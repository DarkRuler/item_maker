movie 'ATG_-_Revive.swf' {
// flash 9, total frames: 19, frame rate: 40 fps, 650x670 px, compressed

  movieClip 75  {
  }

  // unknown tag 88 length 73

  movieClip 83  {

    frame 1 {
      _parent.ult = true;
      if (_parent.missileQuickAttack == true || Math.random() < 0.3) {
        _parent.missileQuickAttack = true;
        gotoAndStop(4);
      } else {
        if (Math.random() < 0.7) {
          gotoAndStop(2);
        } else {
          _parent.missilePower = Math.ceil(_parent.missilePower * 1.6);
          gotoAndStop(3);
        }
      }
    }
  }

  movieClip 87  {
  }

  movieClip 89  {
  }

  movieClip 91  {
  }

  movieClip 93  {
  }

  movieClip 96  {
  }

  movieClip 99  {
  }

  movieClip 102  {
  }

  movieClip 105  {

    frame 3 {
      stop();
    }
  }

  movieClip 109  {

    frame 7 {
      gotoAndPlay(3);
    }
  }

  movieClip 115  {

    frame 5 {
      stop();
    }
  }

  movieClip 121  {

    frame 5 {
      stop();
    }
  }

  movieClip 124  {

    frame 3 {
      stop();
    }
  }

  movieClip 125 missile {

    frame 1 {
      function blah() {
        cd -= 1;
        if (_currentframe >= 284 && _currentframe <= 291) {
          alphaX -= 5;
          _alpha = alphaX;
        } else {
          _x = _x + 20;
          if (_root.save.arenaOutfitWeapon != 0) {
            if (_root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 92 || _root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 93) {
              _alpha = 0;
            } else {
              _alpha = 100;
            }
          }
        }
        if (_parent._parent.enemy.enemyID != 0 && cd <= 0 && _x >= _parent._parent.enemy._x && _x <= _parent._parent.enemy._x + _parent._parent.enemy._width) {
          if (this.hitTest(_parent._parent.enemy)) {
            if (ult == true) {
              _parent._parent.dealDamage(missilePower, missileKnockBack, 'Ultimate Attack');
            } else {
              if (missileSpec == 'Hamstring') {
                _parent._parent.dealDamage(missilePower, missileKnockBack, 'Hamstring');
              } else {
                if (missileSpec == 'Trueshot') {
                  _parent._parent.dealDamage(missilePower, missileKnockBack, 'Ignore Evasion');
                } else {
                  if (missileSpec == 'Rapid Fire') {
                    _parent._parent.dealDamage(missilePower, missileKnockBack);
                    _parent._parent.dealDamage(missilePower, missileKnockBack, 'Quick Attack');
                    _parent._parent.dealDamage(missilePower, missileKnockBack, 'Quick Attack 2');
                    _parent._parent.dealDamage(missilePower, missileKnockBack, 'Quick Attack 3');
                    _parent._parent.dealDamage(missilePower, missileKnockBack, 'Quick Attack 4');
                    _parent._parent.dealDamage(missilePower, missileKnockBack, 'Rapid Fire');
                  } else {
                    if (missileSpec == 'Absorption Shuriken') {
                      _parent._parent.dealDamage(missilePower, missileKnockBack, 'Absorb');
                    } else {
                      if (missileSpec == 'Headshot') {
                        _parent._parent.dealDamage(missilePower, missileKnockBack, 'Headshot');
                      } else {
                        if (missileSpec == 'Hyper Cannonball') {
                          _parent._parent.dealDamage(missilePower, missileKnockBack, 'Hyper Cannonball');
                        } else {
                          if (missileSpec == 'Hyper EXPlosion') {
                            _parent._parent.dealDamage(missilePower, missileKnockBack, 'Hyper EXPlosion');
                          } else {
                            _parent._parent.dealDamage(missilePower, missileKnockBack);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (missileQuickAttack == true) {
              _parent._parent.dealDamage(missilePower, 0, 'Quick Attack');
              _parent._parent.dealDamage(missilePower, 0, 'Quick Attack 2');
              if (_root.save.arenaSkill[6] >= 1) {
                _parent._parent.dealDamage(missilePower, 0, 'Quick Attack 3');
              }
            }
            if (_root.spiritDouble > 0) {
              _parent._parent.dealDamage(missilePower * 2, 0, 'Double Hit');
            } else {
              if (Math.random() < _root.doubleHit / 100) {
                _parent._parent.dealDamage(missilePower, 0, 'Double Hit');
              }
            }
            if (_currentframe >= 284 && _currentframe <= 291) {
              cd = 3;
              _root.save.arenaMana += Math.floor(_root.maxMana * 0.02);
            } else {
              _x = 710;
            }
          }
        }
        if (_x > 700 || alphaX <= 0) {
          onEnterFrame = null;
          loadMovie('', this);
          this.removeMovieClip();
        }
      }

      gotoAndStop(_root.save.inventoryFrame[_root.save.arenaWeapon]);
      if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 280 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 291) {
        gotoAndStop(_root.save.inventoryFrame[_root.save.arenaSubWeapon]);
      }
      if (_root.save.arenaOutfitWeapon != 0) {
        if (_root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 92 || _root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 93) {
          _alpha = 0;
        } else {
          _alpha = 100;
        }
      }
      cd = 0;
      ult = false;
      alphaX = 100;
      blah();
      alt = false;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          blah();
        }
      };

    }

    instance of movieClip 75  {

      onClipEvent (load) {
        gotoAndStop(random(12) + 1);
      }
    }
  }

  movieClip 127 newLoot14 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'To-be-Nerfed Gem') {
            _root.save.questCount += 1;
          }
        }
        amntToGain = lootValue;
        if (isNaN(lootValue)) {
          amntToGain = 1;
        }
        _root.save.arenaNerfGem += amntToGain;
        _root.dispNews(40, 'Found ' + amntToGain + ' [To-be-Nerfed Gem]!');
        _root.house.arena.showDamage('To-be-Nerfed Gem +' + _root.withComma(amntToGain), 8978176, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  // unknown tag 88 length 84

  movieClip 130 damagePop {

    frame 1 {
      _root.damageNumCount += 1;
      tsc = _root.damageNumCount;
      disp.text = damageNum;
      disp.textColor = damageColor;
      stop();
      Xalpha = 180;
      if (damageColor == 14522624) {
        Xalpha = 120;
      }
      alt = false;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          _y = _y - 1;
          Xalpha -= 200 / _root.fps;
          if (_root.damageNumCount - tsc > 10) {
            _y = _y - 2;
            Xalpha -= 800 / _root.fps;
          }
          if (_root.save.arenaZone == 20) {
            _y = _y - 4;
            Xalpha -= 1600 / _root.fps;
          }
          if (_root._quality == 'BEST') {
            _alpha = Xalpha;
            if (Xalpha > 100) {
              _alpha = 100;
            }
          }
          if (_root._quality != 'BEST' || Xalpha > 100) {
            Xalpha -= 400 / _root.fps;
          }
          if (_root.save.damageDisplay == false) {
            Xalpha -= 1600 / _root.fps;
          }
          if (_root.save.damageDisplay != false && (_root._quality == 'HIGH' || _root._quality == 'BEST')) {
            if (Xalpha > 150) {
              _xscale = 150;
              _yscale = 150;
            } else {
              if (Xalpha > 100) {
                _xscale = Xalpha;
                _yscale = Xalpha;
              } else {
                _xscale = 100;
                _yscale = 100;
              }
            }
          }
          if (Xalpha < 10) {
            gotoAndStop(8);
          }
        }
      };

    }

    frame 2 {
      onEnterFrame = null;
      loadMovie('', this);
      this.removeMovieClip();
    }
  }

  movieClip 136 stadiumPop {

    frame 1 {
      Xalpha = 180;
      alt = false;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          _y = _y - 1;
          Xalpha -= 800 / _root.fps;
          if (_root._quality == 'BEST') {
            _alpha = Xalpha;
            if (Xalpha > 100) {
              _alpha = 100;
            }
          }
          if (_root.save.damageDisplay == false) {
            Xalpha -= 1600 / _root.fps;
          }
          if (_root.save.damageDisplay != false && (_root._quality == 'HIGH' || _root._quality == 'BEST')) {
            if (Xalpha > 100) {
              _xscale = Xalpha;
              _yscale = Xalpha;
            } else {
              _xscale = 100;
              _yscale = 100;
            }
          }
          if (Xalpha < 10) {
            gotoAndStop(6);
          }
        }
      };

      gotoAndStop(damager + 1);
    }

    frame 6 {
      onEnterFrame = null;
      loadMovie('', this);
      this.removeMovieClip();
    }
  }

  // unknown tag 88 length 75

  movieClip 145 buttonDamagePop {

    frame 1 {
      Xalpha = 110;
      alt = false;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          _y = _y - 1;
          Xalpha -= 800 / _root.fps;
          if (_root._quality == 'BEST') {
            _alpha = Xalpha;
            if (Xalpha > 100) {
              _alpha = 100;
            }
          }
          if (_root.save.damageDisplay == false) {
            Xalpha -= 1600 / _root.fps;
          }
          if (_root.save.damageDisplay != false && (_root._quality == 'HIGH' || _root._quality == 'BEST')) {
            if (Xalpha > 100) {
              _xscale = Xalpha;
              _yscale = Xalpha;
            } else {
              _xscale = 100;
              _yscale = 100;
            }
          }
          if (Xalpha < 10) {
            gotoAndStop(8);
          }
        }
      };

      Xalpha += rank * 10;
      gotoAndStop(rank);
    }

    frame 8 {
      onEnterFrame = null;
      loadMovie('', this);
      this.removeMovieClip();
    }
  }

  // unknown tag 88 length 88

  movieClip 148 scorePopMain {

    frame 1 {
      whatDisp.text = what;
      whatDisp.textColor = whatColor;
      al = 200;
      stop();
      onEnterFrame = function () {
        al -= 400 / _root.fps;
        _y = _y - 0.5;
        if (al < 10) {
          gotoAndStop(2);
        }
        if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
          _alpha = al;
          if (al > 100) {
            _alpha = 100;
          }
        }
      };

    }

    frame 2 {
      onEnterFrame = null;
      loadMovie('', this);
      this.removeMovieClip();
    }
  }

  movieClip 151 newLoot1 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Coin') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 100;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Coin from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        _root.gainCoin(amntToGain);
        _root.house.arena.showDamage('Coin +' + _root.withComma(amntToGain), 16776960, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 154 newLoot2 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Green Coin') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Green Coin from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        _root.gainGreenCoin(amntToGain);
        _root.house.arena.showDamage('Green Coin +' + _root.withComma(amntToGain), 65280, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 157 newLoot20 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'White Coin') {
            _root.save.questCount += 1;
          }
        }
        if (isNaN(lootValue)) {
          lootValue = 1;
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x White Coin from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        _root.gainWhiteCoin(lootValue);
        _root.house.arena.showDamage('White Coin +' + _root.withComma(amntToGain), 16777215, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 0;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 160 newLoot3 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Blue Coin') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Blue Coin from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        _root.gainBlueCoin(amntToGain);
        _root.house.arena.showDamage('Blue Coin +' + _root.withComma(amntToGain), 39423, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 0;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 162 newLoot4 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Stat Increase') {
            _root.save.questCount += 1;
          }
        }
        powerType = random(4) + 1;
        if (Math.random() < 0.25) {
          powerType = random(7) + 1;
        }
        amntToGain = lootValue;
        if (isNaN(amntToGain)) {
          amntToGain = 1;
        }
        if (_root.save.bannedB >= 1 && powerType != 7) {
          if (_root.save.arenaLevel >= 500) {
            amntToGain *= 20;
          } else {
            amntToGain *= 2;
          }
        }
        if (powerType == 1) {
          _root.save.arenaAttack += amntToGain;
          _root.house.arena.showDamage('Attack +' + _root.withComma(amntToGain), 16711680, _x, _y - 50);
        } else {
          if (powerType == 2) {
            _root.save.arenaDefense += amntToGain;
            _root.house.arena.showDamage('Defense +' + _root.withComma(amntToGain), 16711680, _x, _y - 50);
          } else {
            if (powerType == 3) {
              _root.save.arenaMaxHealth += 10 * amntToGain;
              _root.house.arena.showDamage('MaxHP +' + _root.withComma(10 * amntToGain), 16711680, _x, _y - 50);
            } else {
              if (powerType == 4) {
                _root.save.arenaMaxMana += 4 * amntToGain;
                _root.house.arena.showDamage('MaxMP +' + _root.withComma(4 * amntToGain), 16711680, _x, _y - 50);
              } else {
                if (powerType == 5) {
                  _root.save.arenaAccuracy += 2 * Math.ceil(amntToGain / 4.5);
                  _root.house.arena.showDamage('Accuracy +' + _root.withComma(Math.ceil(amntToGain / 4.5)), 16711680, _x, _y - 50);
                } else {
                  if (powerType == 6) {
                    _root.save.arenaEvasion += 2 * Math.ceil(amntToGain / 4.5);
                    _root.house.arena.showDamage('Evasion +' + _root.withComma(Math.ceil(amntToGain / 4.5)), 16711680, _x, _y - 50);
                  } else {
                    if (powerType == 7) {
                      if (_root.save.arenaBuffType == 0 && Math.random() < 0.3) {
                        _root.save.arenaBuffType = random(3) + 1;
                        _root.save.arenaBuffDuration = 10;
                        if (_root.save.arenaBuffType == 1) {
                          _root.house.arena.showDamage('Power Buff +10s', 16711680, _x, _y - 50);
                        } else {
                          if (_root.save.arenaBuffType == 2) {
                            _root.house.arena.showDamage('Master Buff +10s', 16711680, _x, _y - 50);
                          } else {
                            if (_root.save.arenaBuffType == 3) {
                              _root.house.arena.showDamage('Reward Buff +10s', 16711680, _x, _y - 50);
                            }
                          }
                        }
                      } else {
                        if (_root.save.arenaBuffDuration < 5999 && _root.save.arenaBuffType < 4 && Math.random() < 0.3) {
                          _root.save.arenaBuffDuration += 1;
                          _root.house.arena.showDamage('Buff Duration +1s', 16711680, _x, _y - 50);
                        } else {
                          _root.save.arenaExp += 1000 * amntToGain;
                          _root.house.arena.showDamage('A.EXP +' + _root.withComma(1000 * amntToGain), 10092288, _x, _y - 50);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 164 newLoot5 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Boost') {
            _root.save.questCount += 1;
          }
        }
        _root.gainBoost(1, 3);
        _root.house.arena.showDamage('Boost +1%', 16724991, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 166 newLoot6 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Crafting Material') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Crafting Material from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        if (isNaN(amntToGain) || amntToGain < 1) {
          amntToGain = 1;
        }
        _root.gainCareerEXP(4, Math.ceil(0.5 * Math.pow(amntToGain, 0.12)), true);
        _root.save.arenaCraft += amntToGain;
        _root.house.arena.showDamage('Crafting Material +' + _root.withComma(amntToGain), 10629939, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 168 newLoot10 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Superior Crafting Material') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Superior Crafting Material from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        if (_root.clock_year == 2013 && _root.clock_month == 12 && _root.saveid < 10) {
          if (_root.clock_date == 6 || _root.clock_date == 20) {
            amntToGain = Math.floor(amntToGain * 4);
          }
        }
        if (isNaN(amntToGain)) {
          amntToGain = 1;
        }
        _root.gainCareerEXP(4, 5 * amntToGain, true);
        _root.save.arenaSuperiorCraft += amntToGain;
        _root.dispNews(36, 'Found ' + amntToGain + ' [Superior Crafting Material]!');
        _root.house.arena.showDamage('Superior Crafting Material +' + _root.withComma(amntToGain), 10630050, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          if (_y > 0) {
            xVel *= 0.98;
            if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
              xVel -= 1;
            }
          }
          yVel += 1;
          if (_y > 150 && yVel > 0) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            if (_y > 0) {
              _x = _x + xVel;
            }
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 170 newLoot7 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Pixel') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Pixel from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        _root.save.arenaPixel += amntToGain;
        _root.house.arena.showDamage('Pixel +' + _root.withComma(amntToGain), 65535, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 183  {

    frame 1 {
      stop();
    }
  }

  movieClip 184  {
  }

  movieClip 327  {

    frame 1 {
      if (_root.save.vegetarianMode == true) {
        gotoAndStop(2);
      } else {
        gotoAndStop(1);
      }
    }
  }

  movieClip 398  {
  }

  movieClip 448  {
  }

  movieClip 462  {

    frame 1 {
      fr = _root.save.banned + 1;
      if (fr > 11) {
        fr = 11;
      }
      gotoAndStop(fr);
    }
  }

  movieClip 522  {
  }

  movieClip 594  {
  }

  movieClip 661  {
  }

  movieClip 734  {
  }

  movieClip 798  {
  }

  movieClip 863  {
  }

  // unknown tag 88 length 79

  movieClip 870  {
  }

  movieClip 1025  {

    frame 1 {
      function reset() {
        _alpha = 100;
        _x = defX + (Math.random() - Math.random()) * 5;
        _y = defY + (Math.random() - Math.random()) * 5;
      }

      defX = _x;
      defY = _y;
      _alpha = 0;
      onEnterFrame = function () {
        if (_alpha > 0) {
          _rotation = _rotation + 5;
          _alpha = _alpha - 2;
        } else {
          if (Math.random() < 0.005) {
            reset();
          }
        }
      };

    }
  }

  movieClip 1031  {

    instance of movieClip 870  {

      onClipEvent (load) {
        function checkSI() {
          typeS = _parent._parent._parent.typeS;
          typeI = _parent._parent._parent.typeI;
          if (typeS == true && typeI == true) {
            gotoAndStop(3);
          } else {
            if (typeS == true) {
              gotoAndStop(1);
            } else {
              if (typeI == true) {
                gotoAndStop(2);
              } else {
                gotoAndStop(4);
              }
            }
          }
        }

        checkSI();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkSI();
        }
      }
    }
  }

  // unknown tag 88 length 36

  movieClip 1149  {
  }

  movieClip 1171  {
  }

  movieClip 1194  {
  }

  movieClip 1208  {
  }

  movieClip 1225  {
  }

  movieClip 1234  {
  }

  movieClip 1245  {
  }

  movieClip 1250  {
  }

  // unknown tag 88 length 48

  movieClip 1253  {

    instance of movieClip 522  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
        if (_parent._parent.range == false) {
          _y = 40;
        } else {
          _y = 20;
        }
      }
    }

    instance of movieClip 594  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 661  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 798  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1031  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1149  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1171  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1194  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1208  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1225  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1245  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        d = 0;
      }
    }

    instance of movieClip 1250  {

      onClipEvent (load) {
        this.setMask(_parent.itemMark);
        gotoAndStop(_parent._parent.frame);
        _parent.chipText.text = _parent._parent.attack;
        d = 0;
      }
    }
  }

  movieClip 1254 invenLoot {

    frame 1 {
      function getLoot() {
        autoSell = false;
        filterArr = _root.save.arenaFilter.split(',');
        i = 0;
        while (i < filterArr.length) {
          if (filterArr[i] == name) {
            autoSell = true;
          }
          ++i;
        }
        if (autoSell == true) {
          if (!isNaN(sell)) {
            _root.save.arenaPixel += sell;
          }
        } else {
          if (name == 'Roflhunter\'s Pendant') {
            _root.save.roflPendant += 1;
          }
          if (type == 'Enhancer') {
            _root.getArenaEnhancer(subtype, frame, power, curse, success, bonus, ability, moreBonus, enhance, bonusPow, sell, expiry, name, desc);
            if (_root.save.questType == 'Loot') {
              if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Enhancer') {
                _root.save.questCount += 1;
              }
            }
          } else {
            if (type == 'Weapon') {
              _root.getArenaWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc);
              if (_root.save.questType == 'Loot') {
                if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Weapon') {
                  _root.save.questCount += 1;
                }
              }
            } else {
              if (type == 'Potion') {
                _root.getArenaPotion(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, name, desc);
                if (_root.save.questType == 'Loot') {
                  if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Potion') {
                    _root.save.questCount += 1;
                  }
                }
              } else {
                if (type == 'Accessory') {
                  _root.getArenaAccessory(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, name, desc);
                  if (_root.save.questType == 'Loot') {
                    if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Accessory') {
                      _root.save.questCount += 1;
                    }
                  }
                } else {
                  if (type == 'Outfit') {
                    _root.getArenaOutfit(reqRank, subtype, frame, bonusPow, sell, name, desc);
                    if (_root.save.questType == 'Loot') {
                      if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Accessory') {
                        _root.save.questCount += 1;
                      }
                    }
                  } else {
                    if (type == 'Chip') {
                      _root.getArenaChip(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, name, desc);
                      if (_root.save.questType == 'Loot') {
                        if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Chip') {
                          _root.save.questCount += 1;
                        }
                      }
                    } else {
                      _root.getArenaArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc);
                      if (_root.save.questType == 'Loot') {
                        if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Armor') {
                          _root.save.questCount += 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _root.toCheck = true;
          _root.gCheck = true;
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      if (name.indexOf('[S]') != -1) {
        typeS = true;
      } else {
        typeS = false;
      }
      if (name.indexOf('[I]') != -1) {
        typeI = true;
      } else {
        typeI = false;
      }
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
            if (_alpha > 100) {
              _alpha = 100;
            }
          }
        }
      };

    }

    instance of movieClip 1253  {

      onClipEvent (load) {
        function checkFrame() {
          if (_parent.type == 'Weapon') {
            gotoAndStop(2);
          } else {
            if (_parent.subtype == 'Hat') {
              gotoAndStop(3);
            } else {
              if (_parent.subtype == 'Shirt') {
                gotoAndStop(4);
              } else {
                if (_parent.subtype == 'Gloves') {
                  gotoAndStop(5);
                } else {
                  if (_parent.subtype == 'Pants') {
                    gotoAndStop(6);
                  } else {
                    if (_parent.subtype == 'Shoes') {
                      gotoAndStop(7);
                    } else {
                      if (_parent.subtype == 'Weapon') {
                        gotoAndStop(2);
                      } else {
                        if (_parent.subtype == 'Skin') {
                          gotoAndStop(14);
                        } else {
                          if (_parent.subtype == 'Medal') {
                            gotoAndStop(9);
                          } else {
                            if (_parent.subtype == 'Pendant') {
                              gotoAndStop(11);
                            } else {
                              if (_parent.subtype == 'Earring') {
                                gotoAndStop(12);
                              } else {
                                if (_parent.subtype == 'Trinket') {
                                  gotoAndStop(13);
                                } else {
                                  if (_parent.type == 'Enhancer') {
                                    gotoAndStop(8);
                                  } else {
                                    if (_parent.type == 'Potion') {
                                      gotoAndStop(10);
                                    } else {
                                      if (_parent.type == 'Chip') {
                                        gotoAndStop(15);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          bonuspow = _parent.bonusPow;
          if (isNaN(bonuspow)) {
            bonuspow = 0;
          }
          if (bonuspow >= 706) {
            fr = 10;
          } else {
            if (bonuspow >= 406) {
              fr = 9;
            } else {
              if (bonuspow >= 256) {
                fr = 8;
              } else {
                if (bonuspow >= 156) {
                  fr = 7;
                } else {
                  if (bonuspow >= 106) {
                    fr = 6;
                  } else {
                    if (bonuspow >= 66) {
                      fr = 5;
                    } else {
                      if (bonuspow >= 36) {
                        fr = 4;
                      } else {
                        if (bonuspow >= 16) {
                          fr = 3;
                        } else {
                          if (bonuspow >= 1) {
                            fr = 2;
                          } else {
                            fr = 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (powDisp._currentframe != fr) {
            powDisp.gotoAndStop(fr);
          }
        }

        checkFrame();
      }
    }
  }

  movieClip 1256  {
  }

  movieClip 1257 newLoot8 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Ring') {
            _root.save.questCount += 1;
          }
        }
        if (_root.save.arenaZone == 44 && _root.save.questType == 'Loot' && _root.save.questSubtype == 'Roflhunter\'s Ring' && Math.random() < 0.5) {
          _root.save.questCount += 1;
          _root.dispNews(44, 'Found new Ring! [Roflhunter\'s Ring]');
        } else {
          ringType = random(16) + 1;
          if (_root.save.arenaZone >= 50 && _root.save.arenaZone <= 54) {
            ringType = random(22) + 1;
          }
          if (_root.save.arenaRingOwned[ringType] > 0) {
            ringType = 0;
          }
          if (ringType != 0) {
            _root.save.arenaRingOwned[ringType] = 1;
            _root.dispNews(44, 'Found new Ring! [Ring of ' + ringArray[ringType] + ']');
            _root.checkBestiary();
          } else {
            pixelToGain = Math.floor(100 * _root.save.arenaLevel);
            _root.save.arenaPixel += pixelToGain;
            _root.dispNews(45, 'Found Ring! (+' + _root.withComma(pixelToGain) + ' Pixels)');
            powerType = random(4) + 1;
            if (Math.random() < 0.25) {
              powerType = random(7) + 1;
            }
            amntToGain = 5 + random(6);
            if (powerType == 1) {
              _root.save.arenaAttack += amntToGain;
              _root.house.arena.showDamage('Attack +' + _root.withComma(amntToGain), 16711680, _x, _y - 50);
            } else {
              if (powerType == 2) {
                _root.save.arenaDefense += amntToGain;
                _root.house.arena.showDamage('Defense +' + _root.withComma(amntToGain), 16711680, _x, _y - 50);
              } else {
                if (powerType == 3) {
                  _root.save.arenaMaxHealth += 10 * amntToGain;
                  _root.house.arena.showDamage('MaxHP +' + _root.withComma(10 * amntToGain), 16711680, _x, _y - 50);
                } else {
                  if (powerType == 4) {
                    _root.save.arenaMaxMana += 4 * amntToGain;
                    _root.house.arena.showDamage('MaxMP +' + _root.withComma(4 * amntToGain), 16711680, _x, _y - 50);
                  } else {
                    if (powerType == 5) {
                      _root.save.arenaAccuracy += 2 * Math.ceil(amntToGain / 4.5);
                      _root.house.arena.showDamage('Accuracy +' + _root.withComma(Math.ceil(amntToGain / 4.5)), 16711680, _x, _y - 50);
                    } else {
                      if (powerType == 6) {
                        _root.save.arenaEvasion += 2 * Math.ceil(amntToGain / 4.5);
                        _root.house.arena.showDamage('Evasion +' + _root.withComma(Math.ceil(amntToGain / 4.5)), 16711680, _x, _y - 50);
                      } else {
                        if (powerType == 7) {
                          if (_root.save.arenaBuffType == 0 && Math.random() < 0.3) {
                            _root.save.arenaBuffType = random(3) + 1;
                            _root.save.arenaBuffDuration = 10;
                            if (_root.save.arenaBuffType == 1) {
                              _root.house.arena.showDamage('Power Buff +10s', 16711680, _x, _y - 50);
                            } else {
                              if (_root.save.arenaBuffType == 2) {
                                _root.house.arena.showDamage('Master Buff +10s', 16711680, _x, _y - 50);
                              } else {
                                if (_root.save.arenaBuffType == 3) {
                                  _root.house.arena.showDamage('Reward Buff +10s', 16711680, _x, _y - 50);
                                }
                              }
                            }
                          } else {
                            if (_root.save.arenaBuffDuration < 6000 && _root.save.arenaBuffType < 4 && Math.random() < 0.3) {
                              _root.save.arenaBuffDuration += 1;
                              _root.house.arena.showDamage('Buff Duration +1s', 16711680, _x, _y - 50);
                            } else {
                              _root.save.arenaExp += 1000 * amntToGain;
                              _root.house.arena.showDamage('A.EXP +' + _root.withComma(1000 * amntToGain), 10092288, _x, _y - 50);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      ringArray = ['', 'Health', 'Mana', 'Power', 'Speed', 'Mastery', 'Critical', 'Defense', 'Reflection', 'Accuracy', 'Evasion', 'Leech', 'Chaos', 'Encounter', 'Experience', 'Greed', 'Protection', 'Luck', 'Combo', 'Chronos', 'Rage', 'Resistance', 'Cruelty'];
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1260 newLoot9 {

    frame 1 {
      function getLoot() {
        if (lootValue == 1) {
          _root.save.boostPotion += 1;
          _root.dispNews(181, 'Found 1 [Regular Boost Potion]!');
          _root.house.arena.showDamage('Regular Boost Potion +1', 15790080, _x, _y - 20);
          if (_root.save.questType == 'Loot') {
            if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Regular Boost Potion') {
              _root.save.questCount += 1;
            }
          }
        } else {
          if (lootValue == 2) {
            _root.save.megaBoostPotion += 1;
            _root.dispNews(182, 'Found 1 [Mega Boost Potion]!');
            _root.house.arena.showDamage('Mega Boost Potion +1', 9175240, _x, _y - 20);
            if (_root.save.questType == 'Loot') {
              if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Mega Boost Potion') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

      gotoAndStop(lootValue);
    }
  }

  movieClip 1262  {
  }

  movieClip 1264  {
  }

  movieClip 1265 newLoot11 {

    frame 1 {
      function getLoot() {
        if (lootValue == 1) {
          _root.gainCareerEXP(4, 50, true);
          _root.save.arenaCrystal1 += 1;
          _root.dispNews(42, 'Found 1 [Crystal of Rarity]!');
          _root.house.arena.showDamage('Crystal of Rarity +1', 13369086, _x, _y - 20);
          if (_root.save.questType == 'Loot') {
            if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Crystal of Rarity') {
              _root.save.questCount += 1;
            }
          }
        } else {
          if (lootValue == 2) {
            _root.gainCareerEXP(4, 200, true);
            _root.save.arenaCrystal2 += 1;
            _root.dispNews(43, 'Found 1 [Crystal of Ultimate Rarity]!');
            _root.house.arena.showDamage('Crystal of Ultimate Rarity +1', 16698366, _x, _y - 20);
            if (_root.save.questType == 'Loot') {
              if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Crystal of Ultimate Rarity') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          if (_y > 0) {
            xVel *= 0.98;
            if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
              xVel -= 1;
            }
          }
          yVel += 1;
          if (_y > 150 && yVel > 0) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            if (_y > 0) {
              _x = _x + xVel;
            }
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

      gotoAndStop(lootValue);
    }
  }

  movieClip 1267 newLoot13 {

    frame 1 {
      function getLoot() {
        _root.obtainAlly(lootValue);
        _root.checkBestiary();
        _root.submitKong('[Battle Arena] Invisible Allies Tamed', _root.totalAllyTamed);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1275 newLoot12 {

    frame 1 {
      function getLoot() {
        if (lootValue == 1) {
          if (_root.save.recipeLevel < 4) {
            _root.save.recipeLevel += 1;
            _root.dispNews(46, 'Found recipe! [\'lrn2craft\' Recipe Lv. ' + (_root.save.recipeLevel + 1) + ']');
          }
          if (_root.save.questType == 'Loot') {
            if (_root.save.questSubtype == 'Any') {
              _root.save.questCount += 1;
            }
          }
        } else {
          if (lootValue == 2) {
            if (_root.save.secretRecipeLevel < 4) {
              _root.save.secretRecipeLevel += 1;
              _root.dispNews(46, 'Found recipe! [Secret Recipe Lv. ' + (_root.save.secretRecipeLevel + 1) + ']');
            }
            if (_root.save.questType == 'Loot') {
              if (_root.save.questSubtype == 'Any') {
                _root.save.questCount += 1;
              }
            }
          } else {
            if (lootValue == 3) {
              if (_root.save.arenaSkill[101] < 30) {
                _root.save.arenaSkill[101] += 1;
                _root.dispNews(47, 'You have learned [Pixel Throw] Lv. ' + _root.save.arenaSkill[101] + '!');
              }
              if (_root.save.questType == 'Loot') {
                if (_root.save.questSubtype == 'Any') {
                  _root.save.questCount += 1;
                }
              }
            } else {
              if (lootValue == 4) {
                if (_root.save.arenaSkill[104] < 30) {
                  _root.save.arenaSkill[104] += 1;
                  _root.dispNews(47, 'You have learned [Enrage] Lv. ' + _root.save.arenaSkill[104] + '!');
                }
                if (_root.save.questType == 'Loot') {
                  if (_root.save.questSubtype == 'Any') {
                    _root.save.questCount += 1;
                  }
                }
              } else {
                if (lootValue == 5) {
                  if (_root.save.arenaSkill[105] < 30) {
                    _root.save.arenaSkill[105] += 1;
                    _root.dispNews(47, 'You have learned [Elemental Boost] Lv. ' + _root.save.arenaSkill[105] + '!');
                  }
                  if (_root.save.questType == 'Loot') {
                    if (_root.save.questSubtype == 'Any') {
                      _root.save.questCount += 1;
                    }
                  }
                } else {
                  if (lootValue == 6) {
                    if (_root.save.arenaSkill[106] < 30) {
                      _root.save.arenaSkill[106] += 1;
                      _root.dispNews(47, 'You have learned [Invincibility] Lv. ' + _root.save.arenaSkill[106] + '!');
                    }
                    if (_root.save.questType == 'Loot') {
                      if (_root.save.questSubtype == 'Any') {
                        _root.save.questCount += 1;
                      }
                    }
                  } else {
                    if (lootValue == 7) {
                      spCap = 150 + Math.floor(_root.save.battlePoint / 10000);
                      if (_root.save.arenaUltimateSP < spCap) {
                        _root.save.arenaUltimateSP += 1;
                        _root.save.arenaSP += 10;
                        _root.dispNews(47, 'You have gained 10 SP! (' + _root.withComma(_root.save.arenaUltimateSP * 10) + ' / 2,500)');
                      }
                      if (_root.save.questType == 'Loot') {
                        if (_root.save.questSubtype == 'Any') {
                          _root.save.questCount += 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

      gotoAndStop(lootValue);
    }
  }

  movieClip 1278 newLoot17 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Bacon') {
            _root.save.questCount += 1;
          }
        }
        amntToGain = lootValue;
        if (isNaN(lootValue)) {
          amntToGain = 1;
        }
        _root.save.arenaBacon += amntToGain;
        _root.dispNews(41, 'Found ' + amntToGain + ' [Bacon]!');
        _root.house.arena.showDamage('Bacon +' + _root.withComma(amntToGain), 14524531, _x, _y - 20);
      }

      if (_root.save.vegetarianMode == true) {
        gotoAndStop(2);
      } else {
        gotoAndStop(1);
      }
      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }

    frame 2 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Bacon') {
            _root.save.questCount += 1;
          }
        }
        amntToGain = lootValue;
        if (isNaN(lootValue)) {
          amntToGain = 1;
        }
        _root.save.arenaBacon += amntToGain;
        _root.dispNews(41, 'Found ' + amntToGain + ' [Broccoli]!');
        _root.house.arena.showDamage('Broccoli +' + _root.withComma(amntToGain), 14524531, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1280  {

    frame 1 {
      rota = 0;
      rotSpeed = 0;
      onEnterFrame = function () {
        rota += 7.5;
        if (rota > 360) {
          rota -= 360;
        }
        _rotation = rota;
      };

    }
  }

  movieClip 1281 newLoot15 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Chaotic Fragment of Chaos') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Chaotic Fragment of Chaos from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        if (_root.clock_year == 2013 && _root.clock_month == 12 && _root.saveid < 10) {
          if (_root.clock_date == 4 || _root.clock_date == 18) {
            amntToGain = Math.floor(amntToGain * 4);
          }
        }
        if (isNaN(amntToGain)) {
          amntToGain = 1;
        }
        _root.gainCareerEXP(4, 66 * amntToGain, true);
        _root.save.arenaChaoticFragment += amntToGain;
        _root.dispNews(39, 'Found ' + amntToGain + ' [Chaotic Fragment of Chaos]!');
        _root.house.arena.showDamage('Chaotic Fragment of Chaos +' + _root.withComma(amntToGain), 16721703, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1283 newLoot16 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Unobtainium') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Unobtainium from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        if (_root.clock_year == 2013 && _root.clock_month == 12 && _root.saveid < 10) {
          if (_root.clock_date == 3 || _root.clock_date == 17) {
            amntToGain = Math.floor(amntToGain * 4);
          }
        }
        if (isNaN(amntToGain)) {
          amntToGain = 1;
        }
        _root.gainCareerEXP(4, 25 * amntToGain, true);
        _root.save.arenaUnobtainium += amntToGain;
        _root.dispNews(37, 'Found ' + amntToGain + ' [Unobtainium]!');
        _root.house.arena.showDamage('Unobtainium +' + _root.withComma(amntToGain), 65399, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          if (_y > 0) {
            xVel *= 0.98;
            if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
              xVel -= 1;
            }
          }
          yVel += 1;
          if (_y > 150 && yVel > 0) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            if (_y > 0) {
              _x = _x + xVel;
            }
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1285 newLoot18 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Enhancer Fragment') {
            _root.save.questCount += 1;
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == '4x Enhancer Fragment from loot drops in Battle Arena') {
            lootValue *= 4;
          }
          ++i;
        }
        amntToGain = lootValue;
        if (_root.clock_year == 2013 && _root.clock_month == 12 && _root.saveid < 10) {
          if (_root.clock_date == 13 || _root.clock_date == 27) {
            amntToGain = Math.floor(amntToGain * 4);
          }
        }
        if (isNaN(amntToGain)) {
          amntToGain = 1;
        }
        _root.gainCareerEXP(4, amntToGain, true);
        _root.save.arenaEnhancerFragment += amntToGain;
        _root.dispNews(38, 'Found ' + amntToGain + ' [Enhancer Fragment]!');
        _root.house.arena.showDamage('Enhancer Fragment +' + _root.withComma(amntToGain), 8553090, _x, _y - 20);
      }

      leftChance = 0.3;
      magneticChance = 1;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

    }
  }

  movieClip 1389  {

    frame 1 {
      stop();
    }

    frame 101 {
      stop();
    }
  }

  movieClip 1390 newLoot19 {

    frame 1 {
      function getLoot() {
        if (_root.save.questType == 'Loot') {
          if (_root.save.questSubtype == 'Any' || _root.save.questSubtype == 'Skill Book') {
            _root.save.questCount += 1;
          }
        }
        if (_root.save.arenaSkillMax[lootValue] < _root.arenaSkillMaxF[lootValue]) {
          _root.save.arenaSkillMax[lootValue] += 1;
          _root.save.arenaSkillBook += 1;
          _root.dispNews(48, 'Skill Book GET! [' + _root.arenaSkillNameF[lootValue] + ' Lv. ' + _root.save.arenaSkillMax[lootValue] + ']');
        }
      }

      leftChance = 0.3;
      magneticChance = 0;
      _x = x;
      _y = y - 50;
      xVel = Math.random() * 2;
      if (Math.random() < leftChance) {
        xVel = -Math.random() * 2;
      }
      magnetic = false;
      if (_root.lootMagnet == true && Math.random() < magneticChance) {
        magnetic = true;
      }
      if (_root.save.bouncyLoot == false) {
        if (magnetic == true) {
          _x = 80;
        } else {
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            _x = 80;
          } else {
            if (x > 85) {
              _x = x + xVel * 100;
            } else {
              _x = x;
            }
          }
        }
        _y = y;
      }
      yVel = -5;
      xalpha = 250;
      del = 0;
      onEnterFrame = function () {
        del += 1;
        if (del >= 2) {
          del = 0;
          xVel *= 0.98;
          if (_root.save.activityLoot == true && (_root.cursoridle < 5 || _root.arenaBot > 0 && _root.arenaBot < 2400)) {
            xVel -= 1;
          }
          yVel += 1;
          if (_y > y) {
            yVel *= -0.6;
          }
          if (_root.save.bouncyLoot != false) {
            if (magnetic == true) {
              xVel -= 1;
            }
            _x = _x + xVel;
            _y = _y + yVel;
          }
          if (_x > 500) {
            _x = 500;
          }
          if (xalpha > 0) {
            xalpha -= 100 / _root.fps;
            if (_x < 85 || _xmouse >= -25 && _xmouse <= 25 && _ymouse >= -50 && _ymouse <= 5 && _root.cursoridle < 60) {
              _root.save.arenaLoot += 1;
              getLoot();
              onEnterFrame = null;
              loadMovie('', this);
              this.removeMovieClip();
            }
          } else {
            onEnterFrame = null;
            loadMovie('', this);
            this.removeMovieClip();
          }
          if (_root._quality == 'HIGH' || _root._quality == 'BEST') {
            _alpha = xalpha;
          }
        }
      };

      skillIcon.gotoAndStop(lootValue + 1);
    }
  }

  movieClip 1392  {
  }

  movieClip 1393 epSupply {

    frame 1 {
      _x = x;
      _y = y;
      healthGained = false;
      if (isNaN(lootValue)) {
        lootValue = 0;
      }
      onEnterFrame = function () {
        _x = _x + (480 - _x) / 2;
        _y = _y + (190 - _y) / 2;
        if (_y >= 185 && _x <= 490 && _x >= 470 && healthGained != true) {
          healthGained = true;
          _root.save.arenaEventPoint[_root.save.arenaEvent] += lootValue;
        }
        if (healthGained == true) {
          _alpha = _alpha - 10;
          if (_alpha <= 0) {
            loadMovie('', this);
            this.removeMovieClip();
          }
        }
      };

    }
  }

  movieClip 1394 dmSupply {

    frame 1 {
      _x = x;
      _y = y;
      healthGained = false;
      onEnterFrame = function () {
        _x = _x + (85 - _x) / 2;
        _y = _y + (230 - _y) / 2;
        if (_y >= 225 && _x <= 90 && _x >= 80 && healthGained != true) {
          healthGained = true;
          _root.save.arenaHealth += 1;
        }
        if (healthGained == true) {
          _alpha = _alpha - 10;
          if (_alpha <= 0) {
            loadMovie('', this);
            this.removeMovieClip();
          }
        }
      };

    }
  }

  movieClip 1396  {
  }

  movieClip 1398  {

    frame 1 {
      onEnterFrame = function () {
        _rotation = _rotation + 5;
      };

    }
  }

  // unknown tag 88 length 99

  movieClip 1402  {
  }

  movieClip 1403  {
  }

  movieClip 1406  {
  }

  movieClip 1408  {

    instance of movieClip 1406  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.fcgExp / _parent._parent.reqExp) * 100;
        _xscale = _xscale + (targetScale - _xscale) / 5;
      }
    }
  }

  movieClip 1453  {
  }

  movieClip 1455  {
  }

  // unknown tag 88 length 89

  movieClip 1459  {
  }

  movieClip 1460  {

    frame 1 {
      function checkAll() {
        reqExp = _root.save.fcgLevel * _root.save.fcgLevel * 25 + 5;
        if (_root.save.fcgLevel >= 200) {
          _root.save.fcgLevel = 200;
          reqExp = Infinity;
        }
        if (_root.save.fcgExp >= reqExp && _root.save.fcgLevel < 200) {
          _root.save.fcgExp -= reqExp;
          _root.save.fcgExpTotal += reqExp;
          _root.save.fcgLevel += 1;
          _root.save.fcgCash += _root.save.fcgLevel * 50;
        }
        expPercent = Math.floor((_root.save.fcgExp / reqExp) * 10000) / 100;
        expPercentDisp = expPercent;
        if (expPercent < 10) {
          expPercentDisp = '0' + expPercentDisp;
        }
        if (expPercent == Math.floor(expPercent)) {
          expPercentDisp += '.00';
        } else {
          if (expPercent == Math.floor(expPercent * 10) / 10) {
            expPercentDisp += '0';
          }
        }
        expPercentDisp += '%';
        winPercent = Math.floor((_root.save.fcgWin / _root.save.fcgPlay) * 10000) / 100;
        if (_root.save.fcgPlay < 1) {
          winPercent = 0;
        }
        winPercentDisp = winPercent;
        if (winPercent < 10) {
          winPercentDisp = '0' + winPercentDisp;
        }
        if (winPercent == Math.floor(winPercent)) {
          winPercentDisp += '.00';
        } else {
          if (winPercent == Math.floor(winPercent * 10) / 10) {
            winPercentDisp += '0';
          }
        }
        winPercentDisp += '%';
        expText.text = _root.withComma(_root.save.fcgExp) + ' / ' + _root.withComma(reqExp) + ' [' + expPercentDisp + ']';
        if (_root.save.fcgLevel >= 200) {
          expText.text = _root.withComma(_root.save.fcgExp) + ' [MAX]';
        }
        totalText.text = _root.withComma(_root.save.fcgExp + _root.save.fcgExpTotal);
        winText.text = _root.withComma(_root.save.fcgWin) + ' / ' + _root.withComma(_root.save.fcgPlay) + ' [' + winPercentDisp + ']';
        cashText.text = _root.withComma(_root.save.fcgCash);
      }

      checkAll();
      onEnterFrame = function () {
        checkAll();
      };

    }

    instance of movieClip 1455  {

      onClipEvent (enterFrame) {
        rank = _root.save.fcgLevel;
        fts = rank;
        if (fts > 51) {
          fts = 51;
        }
        gotoAndStop(fts);
      }
    }
  }

  movieClip 1463  {
  }

  movieClip 1467  {
  }

  movieClip 1470  {
  }

  movieClip 1473  {
  }

  movieClip 1476  {
  }

  movieClip 1479  {
  }

  movieClip 1482  {
  }

  movieClip 1485  {
  }

  movieClip 1489  {
  }

  movieClip 1490  {

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 500;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 350;
          }
          if (_root.save.fcgLevel >= 10) {
            unlocked = true;
            if (_root.save.fcgPower[1] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The First Superpower</font></b>\n\nYou begin the match with 1 additional energy of each color.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 10 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[1] = !_root.save.fcgPower[1];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 1500;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 1050;
          }
          if (_root.save.fcgLevel >= 20) {
            unlocked = true;
            if (_root.save.fcgPower[2] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The Second Superpower</font></b>\n\nYou begin the match with 20 additional HP.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 20 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[2] = !_root.save.fcgPower[2];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 3000;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 2100;
          }
          if (_root.save.fcgLevel >= 30) {
            unlocked = true;
            if (_root.save.fcgPower[3] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The Third Superpower</font></b>\n\nYou begin the match with 5 Attack.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 30 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[3] = !_root.save.fcgPower[3];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 5000;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 3500;
          }
          if (_root.save.fcgLevel >= 40) {
            unlocked = true;
            if (_root.save.fcgPower[4] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The Fourth Superpower</font></b>\n\nYou begin the match with a Dream Book, which costs no energy to play.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 40 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[4] = !_root.save.fcgPower[4];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 8000;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 5600;
          }
          if (_root.save.fcgLevel >= 50) {
            unlocked = true;
            if (_root.save.fcgPower[5] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The Fifth Superpower</font></b>\n\nYou begin the match with 1 additional generator of each color.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 50 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[5] = !_root.save.fcgPower[5];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 12000;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 8400;
          }
          if (_root.save.fcgLevel >= 60) {
            unlocked = true;
            if (_root.save.fcgPower[6] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>The Sixth Superpower</font></b>\n\nYou begin the match with an Elite Inferno, which costs no energy to play.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 60 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[6] = !_root.save.fcgPower[6];
          checkFrame();
        }
      }
    }

    instance of movieClip 1489  {

      onClipEvent (load) {
        function checkFrame() {
          cost = 5000;
          if (_root.save.careerLevel[8] >= 200) {
            cost = 3500;
          }
          if (_root.save.fcgLevel >= 1) {
            unlocked = true;
            if (_root.save.fcgPower[7] == true) {
              gotoAndStop(4);
            } else {
              gotoAndStop(3);
            }
          } else {
            unlocked = false;
            gotoAndStop(2);
          }
        }

        checkFrame();
      }

      onClipEvent (rollOver, dragOver) {
        checkFrame();
        if (unlocked == true) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>EXP Boost</font></b>\n\nYou gain 2x A: TG EXP if you win.\n\nCost per match:\n<b>' + _root.withComma(cost) + '</b> FCG Cash';
        } else {
          _root.actiondescription = '<font color=\'#999999\'>Reach FCG Level 1 to unlock!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (unlocked == true) {
          _root.save.fcgPower[7] = !_root.save.fcgPower[7];
          checkFrame();
        }
      }
    }
  }

  movieClip 1493  {
  }

  // unknown tag 88 length 75

  // unknown tag 88 length 67

  // unknown tag 88 length 65

  movieClip 1549  {
  }

  movieClip 1552  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onRelease = function () {
        gotoAndStop(2);
      };

      onReleaseOutside = function () {
        gotoAndStop(1);
      };

      onPress = function () {
        gotoAndStop(1);
      };

    }
  }

  // unknown tag 88 length 67

  movieClip 1572  {
  }

  movieClip 1575  {
  }

  movieClip 1589  {

    frame 1 {
      stop();
      onEnterFrame = function () {
        if (_root.save.fcgCurDiff == 9) {
          if (_root.save.fcgLegendDeck > 0 && _root.save.fcgLegendLife > 0) {
            gotoAndStop(4);
          } else {
            if (_root.systemtimenow % 86400000 > 85500000) {
              gotoAndStop(6);
            } else {
              gotoAndStop(5);
            }
          }
        } else {
          if (_root.save.fcgCurDiff == 11) {
            gotoAndStop(7);
          } else {
            if (_root.save.fcgCurDiff == 10) {
              gotoAndStop(9);
            } else {
              if (_root.save.fcgCurDiff == 8) {
                gotoAndStop(3);
              } else {
                if (_root.save.fcgCurDiff == 5) {
                  if (_root.saveid == 4) {
                    gotoAndStop(8);
                  } else {
                    gotoAndStop(2);
                  }
                } else {
                  gotoAndStop(1);
                }
              }
            }
          }
        }
        winCountText.text = _root.save['fcgLevel' + _root.save.fcgCurDiff];
        winStreakText.text = _root.save['fcgStreak' + _root.save.fcgCurDiff] + 'x [Best: ' + _root.save['fcgMaxStreak' + _root.save.fcgCurDiff] + 'x]';
      };

    }

    instance of movieClip 1572  {

      onClipEvent (release) {
        getURL('http://tvtropes.org/pmwiki/pmwiki.php/Main/MirrorMatch', '_blank');
      }
    }

    frame 4 {
      monsterNameText.text = _root.deckList[_root.save.fcgLegendDeck].deckname;
    }

    instance of movieClip 1575  {

      onClipEvent (load) {
        _xscale = _root.save.fcgLegendLife * 10;
      }
    }

    frame 5 {
      totalWinText.text = 'Monsters Defeated: ' + _root.save.fcgLegendCount;
    }

    frame 6 {
      totalWinText.text = 'Monsters Defeated: ' + _root.save.fcgLegendCount;
    }

    frame 9 {
      monsterNameText.text = _root.deckList[_root.save.fcgSeriousDeck].deckname;
      if (_root.saveid == 25) {
        if (_root.save.fcgChallenge5[_root.save.fcgSeriousDeck] == 0) {
          monsterNameText.text += ' Lv.1';
        } else {
          if (_root.save.fcgChallenge5[_root.save.fcgSeriousDeck] == 1) {
            monsterNameText.text += ' Lv.2';
          } else {
            monsterNameText.text += ' Lv.3';
          }
        }
      }
    }
  }

  movieClip 1594  {
  }

  movieClip 1596  {
  }

  button 1604 {

    on (release) {
      gotoAndStop(1);
    }
  }

  // unknown tag 88 length 102

  movieClip 1609  {

    frame 1 {
      stop();
    }

    instance of movieClip 1596  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.fcg_opponentlevel = 5;
        _root.save.fcgLastDiff = 5;
        _root.enemy_randomdeck = false;
        _root.fcg_challenged = true;
        if (Math.random() < 5 / _root.fcg_challengerlv) {
          _root.enemy_randomdeck = true;
        }
        if (Math.random() < 10 / _root.fcg_challengerlv) {
          _parent._parent.enemy_deck = 70 + random(97);
        } else {
          _parent._parent.enemy_deck = 70 + random(167);
        }
        _parent._parent.gotoAndStop(3);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }
  }

  movieClip 1611  {
  }

  movieClip 1614  {
  }

  movieClip 1622  {

    frame 1 {
      stop();
      cashReward = 0;
      while (_root.save.fcgRewardedLevel < _root.save.fcgLevel) {
        _root.save.fcgRewardedLevel += 1;
        if (_root.save.fcgRewardedLevel >= 50) {
          cashReward += _root.save.fcgRewardedLevel * 5000;
        } else {
          if (_root.save.fcgRewardedLevel >= 40) {
            cashReward += _root.save.fcgRewardedLevel * 2000;
          } else {
            if (_root.save.fcgRewardedLevel >= 30) {
              cashReward += _root.save.fcgRewardedLevel * 1000;
            } else {
              if (_root.save.fcgRewardedLevel >= 20) {
                cashReward += _root.save.fcgRewardedLevel * 500;
              } else {
                if (_root.save.fcgRewardedLevel >= 10) {
                  cashReward += _root.save.fcgRewardedLevel * 200;
                } else {
                  cashReward += 1000;
                }
              }
            }
          }
        }
      }
      if (cashReward > 99999999) {
        cashReward = 99999999;
      }
      if (cashReward > 0) {
        gotoAndStop(2);
      }
    }

    frame 2 {
      _root.dispNews(106, 'You\'ve reached FCG Level ' + _root.save.fcgLevel + '. Congratulations!');
      _root.save.fcgCash += cashReward;
      levelText.text = _root.save.fcgLevel;
      cashRewardText.text = '+' + _root.withComma(cashReward);
      _parent.buffAOwnedText.text = _root.withComma(_root.save.fcgBuff[1] + _root.save.fcgBuff[2] + _root.save.fcgBuff[3] + _root.save.fcgBuff[4] + _root.save.fcgBuff[5] + _root.save.fcgBuff[6]) + 'x';
      _parent.buffBOwnedText.text = _root.withComma(_root.save.fcgBuff[7]) + 'x';
      _parent.buffCOwnedText.text = _root.withComma(_root.save.fcgBuff[8]) + 'x';
    }

    instance of movieClip 1611  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }
  }

  movieClip 1624  {
  }

  movieClip 1626  {
  }

  // unknown tag 88 length 93

  movieClip 1644  {
  }

  movieClip 1647  {

    frame 1 {
      stop();
      if (_root.save.fcgInitDeck != 0) {
        gotoAndStop(2);
      }
    }

    instance of movieClip 1626  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _root.setInitDeck('10.5.5.17.1.27.1.29.1.31.1.33.2.35.1.37.1.43.2.103.3.105.1.107.3.109.1.113.3.115.1.121.1.129.1.149.1.167.2.183.1.185.1.205.1.215');
        _root.save.fcgInitDeck = 1;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _root.setInitDeck('10.7.5.19.1.47.1.49.1.51.1.53.2.55.1.57.1.61.1.109.2.123.3.125.1.127.5.129.1.131.1.133.1.137.1.139.1.141.1.149.1.167.1.189.1.205.1.217');
        _root.save.fcgInitDeck = 2;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _root.setInitDeck('10.9.5.21.1.65.1.67.1.69.1.71.2.73.1.75.1.79.1.81.1.109.1.129.2.143.3.145.1.147.3.149.1.151.3.153.1.155.1.161.1.167.1.191.1.205.1.219');
        _root.save.fcgInitDeck = 3;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _root.setInitDeck('10.11.5.23.1.85.1.87.1.89.1.91.2.93.1.95.1.99.1.109.1.129.1.149.2.163.3.165.3.167.1.171.1.175.3.177.2.179.1.181.1.197.1.205.1.221');
        _root.save.fcgInitDeck = 4;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1644  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 10) {
          _alpha = _alpha - 2;
        }
      }

      onClipEvent (rollOver) {
        _alpha = 50;
      }

      onClipEvent (release) {
        _root.save.fcgCash += 2500;
        _root.save.fcgInitDeck = 5;
        _parent.gotoAndStop(2);
      }
    }
  }

  movieClip 1650  {
  }

  movieClip 1658  {
  }

  movieClip 1659  {
  }

  movieClip 1671  {
  }

  movieClip 1683  {
  }

  movieClip 1702  {
  }

  // unknown tag 88 length 63

  movieClip 1854  {
  }

  // unknown tag 88 length 74

  movieClip 1859  {
  }

  movieClip 1861  {
  }

  movieClip 1867  {
  }

  movieClip 1872  {

    frame 1 {
      _parent.nameBox.textColor = 0;
    }

    frame 2 {
      _parent.nameBox.textColor = 16777215;
    }

    frame 3 {
      _parent.nameBox.textColor = 3355392;
    }

    frame 4 {
      _parent.nameBox.textColor = 16776960;
    }
  }

  // unknown tag 88 length 67

  // unknown tag 88 length 89

  movieClip 1882  {

    frame 1 {
      stop();
    }
  }

  movieClip 1883  {

    instance image of movieClip 1859  {

      onClipEvent (load) {
        this.setMask(_parent.mask);
      }
    }
  }

  movieClip 1884  {

    instance of movieClip 1883  {

      onClipEvent (load) {
        cardloc = _parent.cardloc;
        depth = _parent.getDepth();
        delay = 5;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 4) {
          delay = 0;
          gotoAndStop(2 - _root['exist_card' + cardloc]);
          bg.gotoAndStop(_root['quanta_card' + cardloc]);
          image.gotoAndStop(_root['id_card' + cardloc]);
          rareupgraded.gotoAndStop(_root['upgraded_card' + cardloc] + 1);
          triangle.gotoAndStop(_root['quanta_card' + cardloc]);
          reqBox.text = _root['req_card' + cardloc];
          if (_parent.cardloc != undefined && _parent.cardloc <= 6 && _root['req_card' + cardloc] > _root['fcg_player_ene' + _root['quanta_card' + cardloc]]) {
            playable.gotoAndStop(2);
          } else {
            if (_root.fcg_time < 0.25 || _root.fcg_player_time > 0) {
              playable.gotoAndStop(3);
            } else {
              playable.gotoAndStop(1);
            }
          }
          nameBox.text = _root['name_card' + cardloc];
          typeBox.text = _root['type_card' + cardloc];
          copyRight.text = _root['author_card' + cardloc];
          if (_root['type_card' + cardloc] == 'Monster') {
            hpBox.text = 'HP: ' + _root['hp_card' + cardloc];
            typeBox.text = _root['atk_card' + cardloc] + ' / ' + _root['def_card' + cardloc];
          } else {
            hpBox.text = '';
          }
          descBox.text = _root['desc_card' + cardloc];
          if (_xmouse >= -45 && _xmouse <= 45 && _ymouse >= -50 && _ymouse < 0) {
            _parent.swapDepths(1000 + depth);
          } else {
            _parent.swapDepths(depth);
          }
          if (_root.fcg_dep == 2) {
            this.removeMovieClip();
            this.unloadMovie();
          }
        }
        if (cardloc <= 6 && cardloc > 0 && _parent._parent._parent.holding[cardloc] == 1 && _root['exist_card' + cardloc] == 1) {
          if (Key.isDown(16)) {
            _parent._parent._parent.discardCard(cardloc);
          } else {
            _parent._parent._parent.summonCard(cardloc);
          }
        }
      }

      onClipEvent (release) {
        if (cardloc <= 6 && cardloc > 0 && _root['exist_card' + cardloc] == 1) {
          if (Key.isDown(16)) {
            _parent._parent._parent.discardCard(cardloc);
          } else {
            _parent._parent._parent.summonCard(cardloc);
          }
        }
      }
    }
  }

  movieClip 1887  {

    frame 1 {
      keyID = Math.round(_y / 10) + 1;
      keyText.text = keyID;
      _alpha = 0;
      onEnterFrame = function () {
        if (_root['exist_card' + keyID] == 1) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      };

    }
  }

  movieClip 1888  {

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 1;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 2;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 3;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 4;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 5;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 6;
      }
    }
  }

  movieClip 1896  {

    frame 1 {
      stop();
    }
  }

  movieClip 1909  {

    frame 1 {
      stop();
      alt = false;
      xscale = 0;
      _xscale = 0;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          _xscale = _xscale + (xscale - _xscale) / 1.5;
          if (_xscale > 100) {
            _xscale = 100;
          }
          if (_xscale < 0) {
            _xscale = 0;
          }
          _parent.textBox.text = _parent.numberdisp;
        }
      };

    }
  }

  movieClip 1910  {

    frame 1 {
      function reset() {
        _alpha = 100;
        _x = 5 + Math.random() * 180;
        _y = 5 + Math.random() * 10;
      }

      _alpha = 0;
      onEnterFrame = function () {
        if (_alpha > 0) {
          _rotation = _rotation + 5;
          _alpha = _alpha - 2;
        } else {
          if (Math.random() < 0.005) {
            reset();
          }
        }
      };

    }
  }

  movieClip 1911  {

    frame 1 {
      stop();
    }
  }

  movieClip 1914  {
  }

  movieClip 1915  {

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 7;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 8;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 9;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 10;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 11;
      }
    }

    instance of movieClip 1884  {

      onClipEvent (load) {
        cardloc = 12;
      }
    }
  }

  movieClip 1921  {
  }

  movieClip 1930  {
  }

  movieClip 1937  {
  }

  movieClip 1956  {
  }

  movieClip 1966  {
  }

  movieClip 1970  {
  }

  movieClip 1976  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onPress = function () {
        gotoAndStop(3);
      };

      onDragOver = onRollOver;
      onDragOut = onRollOut;
      onRelease = onRollOver;
      onReleaseOutside = onRollOut;
    }
  }

  movieClip 1980  {
  }

  movieClip 1983  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onRelease = function () {
        gotoAndStop(2);
      };

      onPress = function () {
        gotoAndStop(1);
      };

    }
  }

  // unknown tag 88 length 75

  movieClip 1990  {
  }

  movieClip 1993  {

    frame 1 {
      if (_parent._currentframe == 4) {
        cardtowin = _parent.enemyDeckArray[random(_root.opponent_totalcards) + 1];
        if (_root.fcg_epic > 0) {
          cardtowin = random(13) * 2 + 1;
        }
        if (isNaN(cardtowin)) {
          cardtowin = 1;
        }
        _root.save.fcgOwned[cardtowin] += 1;
        gotoAndStop(2);
      } else {
        gotoAndStop(3);
      }
    }

    instance of movieClip 1883  {

      onClipEvent (load) {
        delay = 0;
        gotoAndStop(1);
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 1) {
          delay = 0;
          bg.gotoAndStop(_root.cardList[_parent.cardtowin].quanta);
          image.gotoAndStop(_root.cardList[_parent.cardtowin].id);
          rareupgraded.gotoAndStop(_root.cardList[_parent.cardtowin].upgraded + 1);
          triangle.gotoAndStop(_root.cardList[_parent.cardtowin].quanta);
          reqBox.text = _root.cardList[_parent.cardtowin].req;
          nameBox.text = _root.cardList[_parent.cardtowin].name;
          if (_root.cardList[_parent.cardtowin].name != undefined) {
            gotoAndStop(1);
          } else {
            gotoAndStop(2);
          }
          ownBox.text = '';
          typeBox.text = _root.cardList[_parent.cardtowin].type;
          copyRight.text = 'Cost: ' + _root.cardList[_parent.cardtowin].cost;
          if (_root.cardList[_parent.cardtowin].type == 'Monster') {
            hpBox.text = 'HP: ' + _root.cardList[_parent.cardtowin].hp;
            typeBox.text = _root.cardList[_parent.cardtowin].atk + ' / ' + _root.cardList[_parent.cardtowin].def;
          } else {
            hpBox.text = '';
          }
          descBox.text = _root.cardList[_parent.cardtowin].desc;
        }
      }
    }
  }

  // unknown tag 88 length 75

  movieClip 2014  {

    frame 1 {
      box1r = 0;
      box2r = 0;
      box3r = 0;
      box4r = 0;
      delay = 0;
      onEnterFrame = function () {
        delay += 1;
        if (delay > 1) {
          box1target = _root['fcg_reward' + line + 'a'];
          box2target = _root['fcg_reward' + line + 'b'];
          box3target = _root['fcg_reward' + line + 'c'];
          box4target = _root['fcg_reward' + line + 'd'];
          box1r += (box1target - box1r) / 5;
          box2r += (box2target - box2r) / 5;
          box3r += (box3target - box3r) / 5;
          box4r += (box4target - box4r) / 5;
          box1 = _root.withComma(Math.round(box1r));
          if (box2r > 0) {
            box2 = '+' + _root.withComma(Math.round(box2r));
          } else {
            box2 = _root.withComma(Math.round(box2r));
          }
          if (box3r > 0) {
            box3 = '+' + _root.withComma(Math.round(box3r));
          } else {
            box3 = _root.withComma(Math.round(box3r));
          }
          if (box4r > 0) {
            box4 = '+' + _root.withComma(Math.round(box4r));
          } else {
            box4 = _root.withComma(Math.round(box4r));
          }
          delay = 0;
        }
      };

    }
  }

  movieClip 2022  {

    frame 1 {
      if (_parent._parent._currentframe == 4) {
        gotoAndStop(1);
      } else {
        if (_root.atie == true) {
          gotoAndStop(4);
        } else {
          if (_root.forfeit == true) {
            gotoAndStop(3);
          } else {
            gotoAndStop(2);
          }
        }
      }
    }
  }

  movieClip 2026  {

    frame 1 {
      box1r = 0;
      box2r = 0;
      box3r = 0;
      onEnterFrame = function () {
        box1target = _root.fcg_rewardt1;
        box2target = _root.fcg_rewardt2;
        box3target = _root.fcg_rewardt3;
        box1r += Math.ceil((box1target - box1r) / 10);
        box2r += Math.ceil((box2target - box2r) / 30);
        box3r += Math.ceil((box3target - box3r) / 30);
        box1 = '+' + _root.withComma(Math.round(box1r));
        box2 = '+' + _root.withComma(Math.round(box2r));
        box3 = '+' + _root.withComma(Math.round(box3r));
      };

    }
  }

  movieClip 2028  {

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 2014  {

      onClipEvent (load) {
        line = Math.round((_y - 50) / 15);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.targetx = 1000;
      }
    }
  }

  movieClip 2038  {
  }

  movieClip 2041  {

    frame 1 {
      stop();
    }
  }

  movieClip 2044  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onRelease = function () {
        gotoAndStop(2);
      };

      onReleaseOutside = function () {
        gotoAndStop(1);
      };

      onPress = function () {
        gotoAndStop(1);
      };

    }
  }

  movieClip 2049  {

    instance image of movieClip 1859  {

      onClipEvent (load) {
        this.setMask(_parent.mask);
      }
    }

    instance hit of movieClip 2038  {

      onClipEvent (load) {
        delay = 0;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 2) {
          delay = 0;
          _height = 10;
          if (_root['exist_card' + (_parent._parent.cardloc + 1)] == 0) {
            _height = _height + 10;
            if (_root['exist_card' + (_parent._parent.cardloc + 2)] == 0) {
              _height = _height + 10;
            }
            if (_root['exist_card' + (_parent._parent.cardloc + 3)] == 0) {
              _height = _height + 10;
            }
          }
        }
      }
    }

    instance filter of movieClip 2041  {

      onClipEvent (release) {
        card = _parent.card;
        if (Key.isDown(16)) {
          if (_root.save.fcgDeck[card] > 0) {
            _root.save.fcgDeck[card] -= 1;
            _root.save.fcgTotalCards -= 1;
          }
        } else {
          if (Key.isDown(17) || Key.isDown(66)) {
            if (_root.save.fcgOwned[card] < 7 || card <= 26 && _root.save.fcgOwned[_parent.card] < 100) {
              if (_root.save.fcgCash >= _root.cardList[card].cost && !isNaN(_root.cardList[card].cost)) {
                _root.save.fcgCash -= _root.cardList[card].cost;
                _root.save.fcgOwned[card] += 1;
              }
            }
          } else {
            if (Key.isDown(83)) {
              if (_root.save.fcgOwned[card] > _root.save.fcgDeck[card] && _root.save.fcgTotalCards >= 25) {
                if (!isNaN(_parent.sellprice)) {
                  _root.save.fcgCash += _parent.sellprice;
                  _root.save.fcgOwned[card] -= 1;
                }
              }
            } else {
              if (_root.cardList[card].upgraded == 1 || _root.cardList[card].upgraded == 3) {
                if (_root.save.fcgDeck[card] + _root.save.fcgDeck[_parent.card - 1] < 7 || card <= 26) {
                  if (_root.save.fcgDeck[card] < _root.save.fcgOwned[card] && _root.save.fcgTotalCards < 100) {
                    _root.save.fcgDeck[card] += 1;
                    _root.save.fcgTotalCards += 1;
                  }
                }
              } else {
                if (_root.cardList[card].upgraded == 0 || _root.cardList[card].upgraded == 2) {
                  if (_root.save.fcgDeck[card] + _root.save.fcgDeck[_parent.card + 1] < 7 || card <= 26) {
                    if (_root.save.fcgDeck[card] < _root.save.fcgOwned[card] && _root.save.fcgTotalCards < 100) {
                      _root.save.fcgDeck[card] += 1;
                      _root.save.fcgTotalCards += 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.cardList[_parent.card].upgraded == 1 || _root.cardList[_parent.card].upgraded == 3) {
          if (_root.save.fcgDeck[_parent.card] + _root.save.fcgDeck[_parent.card - 1] < 7 || _parent.card <= 26) {
            if (_root.save.fcgDeck[_parent.card] < _root.save.fcgOwned[_parent.card] && _root.save.fcgTotalCards < 100) {
              _root.save.fcgDeck[_parent.card] += 1;
              _root.save.fcgTotalCards += 1;
            }
          }
        } else {
          if (_root.cardList[_parent.card].upgraded == 0 || _root.cardList[_parent.card].upgraded == 2) {
            if (_root.save.fcgDeck[_parent.card] + _root.save.fcgDeck[_parent.card + 1] < 7 || _parent.card <= 26) {
              if (_root.save.fcgDeck[_parent.card] < _root.save.fcgOwned[_parent.card] && _root.save.fcgTotalCards < 100) {
                _root.save.fcgDeck[_parent.card] += 1;
                _root.save.fcgTotalCards += 1;
              }
            }
          }
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.fcgDeck[_parent.card] > 0) {
          _root.save.fcgDeck[_parent.card] -= 1;
          _root.save.fcgTotalCards -= 1;
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.fcgOwned[_parent.card] < 7 || _parent.card <= 26 && _root.save.fcgOwned[_parent.card] < 100) {
          if (_root.save.fcgCash >= _root.cardList[_parent.card].cost && !isNaN(_root.cardList[_parent.card].cost)) {
            _root.save.fcgCash -= _root.cardList[_parent.card].cost;
            _root.save.fcgOwned[_parent.card] += 1;
          }
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.fcgOwned[_parent.card] > _root.save.fcgDeck[_parent.card] && _root.save.fcgTotalCards >= 25) {
          if (!isNaN(_parent.sellprice)) {
            _root.save.fcgCash += _parent.sellprice;
            _root.save.fcgOwned[_parent.card] -= 1;
          }
        }
      }
    }
  }

  movieClip 2050  {

    instance of movieClip 2049  {

      onClipEvent (load) {
        depth = _parent.getDepth();
        delay = 2;
        gotoAndStop(1);
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 1) {
          cardx = Math.round(_parent._y / 10) + 1 + (_root.bazaarpage - 1) * 16;
          card = _root['cardx_' + cardx];
          delay = 0;
          bg.gotoAndStop(_root.cardList[card].quanta);
          image.gotoAndStop(_root.cardList[card].id);
          rareupgraded.gotoAndStop(_root.cardList[card].upgraded + 1);
          triangle.gotoAndStop(_root.cardList[card].quanta);
          reqBox.text = _root.cardList[card].req;
          nameBox.text = _root.cardList[card].name;
          if (_root.cardList[card].name != undefined) {
            gotoAndStop(1);
          } else {
            gotoAndStop(2);
          }
          ownBox.text = '[' + _root.save.fcgDeck[card] + ' / ' + _root.save.fcgOwned[card] + ']';
          if (_root.save.fcgOwned[card] < 1) {
            ownBox.textColor = 6684672;
            filter.gotoAndStop(2);
          } else {
            if (_root.save.fcgDeck[card] < 1) {
              ownBox.textColor = 13369344;
              filter.gotoAndStop(3);
            } else {
              ownBox.textColor = 16776960;
              filter.gotoAndStop(1);
            }
          }
          typeBox.text = _root.cardList[card].type;
          copyRight.text = 'Cost: ' + _root.withComma(_root.cardList[card].cost);
          sellprice = Math.ceil(_root.cardList[card].cost * 0.1);
          if (sellprice > 9001 || isNaN(sellprice)) {
            sellprice = 9001;
          }
          if (_root.fcg_bmode == 'Selling' || Key.isDown(83) || hit.hitTest(_root.cursor) && _xmouse >= 125) {
            copyRight.text = 'Sell For: ' + _root.withComma(sellprice);
          }
          if (_root.cardList[card].type == 'Monster') {
            hpBox.text = 'HP: ' + _root.cardList[card].hp;
            typeBox.text = _root.cardList[card].atk + ' / ' + _root.cardList[card].def;
          } else {
            hpBox.text = '';
          }
          descBox.text = _root.cardList[card].desc;
          if (hit.hitTest(_root.cursor)) {
            _parent.swapDepths(2000);
          } else {
            _parent.swapDepths(depth);
          }
        }
      }
    }
  }

  movieClip 2051  {
  }

  // unknown tag 88 length 63

  button 2056 {

    on (release, keyPress '<Left>') {
      if (_root.bazaarpage > 1) {
        _root.bazaarpage -= 1;
      }
    }
  }

  button 2057 {

    on (release, keyPress '<Right>') {
      if (_root.bazaarpage < 16) {
        _root.bazaarpage += 1;
      }
    }
  }

  movieClip 2079  {

    frame 1 {
      stop();
    }

    frame 2 {
      deckCodeInput = '';
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckCodeInput.replace(' ', '');
        if (_parent.deckCodeInput.indexOf('.') != -1) {
          tempDeckArray = _parent.deckCodeInput.split('.');
          myDeckArray = new Array();
          i = 0;
          while (i <= tempDeckArray.length - 1) {
            if (tempDeckArray[i] > 100) {
              tempDeckArray[i] = 100;
            }
            if (isNaN(tempDeckArray[i])) {
              tempDeckArray[i] = 0;
              _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
              validSoFar = 0;
            }
            j = 1;
            while (j <= tempDeckArray[i]) {
              myDeckArray.push(tempDeckArray[i + 1]);
              ++j;
            }
            i += 2;
          }
        } else {
          myDeckArray = _parent.deckCodeInput.split(',');
        }
        _parent.errorText.text = '';
        validSoFar = 1;
        planDeck = new Array();
        i = 1;
        while (i <= 400) {
          planDeck[i] = 0;
          ++i;
        }
        if (myDeckArray.length > 10 && myDeckArray.length <= 100) {
          i = 0;
          while (i <= myDeckArray.length - 1) {
            planDeck[myDeckArray[i]] += 1;
            if (_root.cardList[myDeckArray[i]].upgraded == 0) {
              cardName = _root.cardList[myDeckArray[i]].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 1) {
              cardName = '(Upgraded) ' + _root.cardList[myDeckArray[i]].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 2) {
              cardName = '(Rare) ' + _root.cardList[myDeckArray[i]].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 3) {
              cardName = '(Rare/Upgraded) ' + _root.cardList[myDeckArray[i]].name;
            }
            if (Math.ceil(myDeckArray[i] / 2) != myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] * 1 + 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (Math.ceil(myDeckArray[i] / 2) == myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] - 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (planDeck[myDeckArray[i]] > _root.save.fcgOwned[myDeckArray[i]]) {
              _parent.errorText.text += '\nYou need [' + cardName + '] to load this deck.';
              validSoFar = 0;
            }
            if (myDeckArray[i] > _parent._parent.maxcard || myDeckArray[i] < 1) {
              _parent.errorText.text += '\nThis deck contains a non-existent card.';
              validSoFar = 0;
            }
            if (isNaN(myDeckArray[i])) {
              _parent.errorText.text += '\nInvalid deck.';
              validSoFar = 0;
            }
            ++i;
          }
        } else {
          _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
          validSoFar = 0;
        }
        if (validSoFar == 1) {
          i = 1;
          while (i <= 400) {
            _root.save.fcgDeck[i] = planDeck[i];
            ++i;
          }
          _root.save.fcgTotalCards = myDeckArray.length;
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }
  }

  movieClip 2141  {
  }

  movieClip 2144  {

    frame 1 {
      stop();
    }

    instance of movieClip 1883  {

      onClipEvent (load) {
        bg.gotoAndStop(_root.cardList[_root.cardspin].quanta);
        image.gotoAndStop(_root.cardList[_root.cardspin].id);
        rareupgraded.gotoAndStop(_root.cardList[_root.cardspin].upgraded + 1);
        triangle.gotoAndStop(_root.cardList[_root.cardspin].quanta);
        reqBox.text = _root.cardList[_root.cardspin].req;
        nameBox.text = _root.cardList[_root.cardspin].name;
        if (_root.cardList[_root.cardspin].name != undefined) {
          gotoAndStop(1);
        } else {
          gotoAndStop(2);
        }
        ownBox.text = '';
        typeBox.text = _root.cardList[_root.cardspin].type;
        copyRight.text = 'Cost: ' + _root.withComma(_root.cardList[_root.cardspin].cost);
        if (_root.cardList[_root.cardspin].type == 'Monster') {
          hpBox.text = 'HP: ' + _root.cardList[_root.cardspin].hp;
          typeBox.text = _root.cardList[_root.cardspin].atk + ' / ' + _root.cardList[_root.cardspin].def;
        } else {
          hpBox.text = '';
        }
        descBox.text = _root.cardList[_root.cardspin].desc;
      }
    }
  }

  button 2147 {

    on (release) {
      prevFrame();
    }
  }

  button 2148 {

    on (release) {
      nextFrame();
    }
  }

  movieClip 2171  {

    frame 1 {
      stop();
    }

    frame 8 {
      _root.save.failproof = 1337;
    }
  }

  movieClip 2175  {
  }

  // unknown tag 88 length 75

  movieClip 2259  {
  }

  movieClip 2260 entireFcg {

    frame 1 {
      count = 0;
      stop();
      if (_root.fcgConnected == true) {
        gotoAndStop(2);
      }
      onEnterFrame = function () {
        count += 1;
        if (count >= 100) {
          _root.fcgCooldown = 1;
          _root.fcgConnected = true;
          gotoAndStop(2);
        }
      };

      _root.epicdesc = '';
      deckCodeInput = '';
    }

    instance of movieClip 1396  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1463  {

      onClipEvent (enterFrame) {
        _x = _parent._xmouse;
        _y = _parent._ymouse;
        if (epicText.text != _root.epicdesc) {
          epicText.text = _root.epicdesc;
          if (_root.epicdesc != '') {
            _alpha = 100;
          } else {
            _alpha = 0;
          }
        }
      }
    }

    frame 2 {
      _root.save.fcgTotalCards = 0;
      i = 1;
      while (i <= 400) {
        if (!isNaN(_root.save.fcgDeck[i]) && _root.save.fcgDeck[i] > 0) {
          _root.save.fcgTotalCards += _root.save.fcgDeck[i];
        }
        ++i;
      }
      _root.house.gotoAndStop(12);
    }

    frame 2 {
      _root.power1Active = false;
      _root.power2Active = false;
      _root.power3Active = false;
      _root.power4Active = false;
      _root.power5Active = false;
      _root.power6Active = false;
      _root.power7Active = false;
      _root.power8Active = false;
      maxcard = 248;
      powerCost = -1;
      _root.house.gotoAndStop(12);
      _root.fcg_challenged = false;
      tempTotalCards = 0;
      i = 1;
      while (i <= 400) {
        if (!isNaN(_root.save.fcgDeck[i])) {
          tempTotalCards += _root.save.fcgDeck[i];
        }
        ++i;
      }
      _root.save.fcgTotalCards = tempTotalCards;
      if (_root.saveid == 25) {
        _root.fcgCooldown = 1;
      }
      onEnterFrame = function () {
        powerCost = 0;
        _root.power1Active = false;
        _root.power2Active = false;
        _root.power3Active = false;
        _root.power4Active = false;
        _root.power5Active = false;
        _root.power6Active = false;
        _root.power7Active = false;
        if (_root.save.fcgCurDiff >= 6 && _root.save.fcgCurDiff <= 11) {
          if (_root.save.fcgPower[1] == true) {
            powerCost += 500;
            _root.power1Active = true;
          }
          if (_root.save.fcgPower[2] == true) {
            powerCost += 1500;
            _root.power2Active = true;
          }
          if (_root.save.fcgPower[3] == true) {
            powerCost += 3000;
            _root.power3Active = true;
          }
          if (_root.save.fcgPower[4] == true) {
            powerCost += 5000;
            _root.power4Active = true;
          }
          if (_root.save.fcgPower[5] == true) {
            powerCost += 8000;
            _root.power5Active = true;
          }
          if (_root.save.fcgPower[6] == true) {
            powerCost += 12000;
            _root.power6Active = true;
          }
          if (_root.save.fcgPower[7] == true) {
            powerCost += 5000;
            _root.power7Active = true;
          }
          if (_root.save.careerLevel[8] >= 200) {
            powerCost = Math.round(powerCost * 0.7);
          }
          if (_root.save.fcgCurDiff == 11) {
            powerCost = 0;
          }
        }
        if (_root.save.fcgCurDiff == 12) {
          powerCost += 5000;
        }
        if (_root.save.fcgTotalCards < 25) {
          _root.save.fcgRandomDeck = true;
        }
        if (_root.saveid == 25) {
          _root.save.fcgReceiveChallenge = false;
          if (_root.save.fcgCurDiff == 10) {
            conditions = 0;
            challengeHP = 120;
            condition1 = 1;
            condition2 = 1;
            condition3 = 1;
            condition4 = 1;
            condition5 = 1;
            condition6 = 1;
            condition7 = 1;
            condition5a = 1;
            condition5b = 1;
            condition5c = 1;
            condition5d = 1;
            condition5e = 1;
            condition6a = 7;
            if (_root.save.fcgDeck[129] > 0 || _root.save.fcgDeck[130] > 0) {
              condition2 = 0;
            }
            i = 1;
            while (i <= 248) {
              if (i >= 3 && i <= 14 && _root.save.fcgDeck[i] > 0) {
                condition1 = 0;
              }
              if (_root.cardList[i].upgraded == 1 || _root.cardList[i].upgraded == 3) {
                challengeHP -= _root.save.fcgDeck[i];
              }
              if (_root.cardList[i].upgraded >= 2 && _root.save.fcgDeck[i] > 0) {
                condition3 = 0;
              }
              if (_root.cardList[i].req >= 7 && _root.save.fcgDeck[i] > 0) {
                condition4 = 0;
              }
              if (_root.cardList[i].quanta == 1 && _root.save.fcgDeck[i] > 0) {
                condition5a = 0;
              }
              if (_root.cardList[i].quanta == 2 && _root.save.fcgDeck[i] > 0) {
                condition5b = 0;
              }
              if (_root.cardList[i].quanta == 3 && _root.save.fcgDeck[i] > 0) {
                condition5c = 0;
              }
              if (_root.cardList[i].quanta == 4 && _root.save.fcgDeck[i] > 0) {
                condition5d = 0;
              }
              if (_root.cardList[i].quanta == 5 && _root.save.fcgDeck[i] > 0) {
                condition5e = 0;
              }
              if (i % 2 == 1) {
                if (_root.save.fcgDeck[i] > 0 || _root.save.fcgDeck[i + 1] > 0) {
                  condition6a -= 1;
                }
                if (_root.save.fcgDeck[i] + _root.save.fcgDeck[i + 1] > 5) {
                  condition7 = 0;
                }
              }
              ++i;
            }
            if (condition5a + condition5b + condition5c + condition5d + condition5e < 2) {
              condition5 = 0;
            }
            if (condition6a < 0) {
              condition6 = 0;
            }
            conditions = condition1 + condition2 + condition3 + condition4 + condition5 + condition6 + condition7;
            if (conditions < 4 || _root.save.fcgRandomDeck == true) {
              _root.fcgCooldown = 1;
            }
          }
        }
      };

      _root.epicdesc = '';
      stop();
      _root.fcg_dep = 2;
      _root.fcg_epic = 0;
      if (_root.save.fcgStreak > _root.save.fcgMaxStreak) {
        _root.save.fcgMaxStreak = _root.save.fcgStreak;
      }
      if (_root.save.fcgCash > _root.save.fcgMaxCash) {
        _root.save.fcgMaxCash = _root.save.fcgCash;
      }
      _root.enemy_randomdeck = true;
      _root.fcg_opponentlevel = 0;
      enemy_deck = 1;
      _root.epicdesc = '';
      if (_root.save.fcgWin + _root.save.fcgLose < _root.save.fcgPlay) {
        _root.save.fcgLose = _root.save.fcgPlay - _root.save.fcgWin;
        _root.save.fcgStreak = 0;
        _root.save['fcgStreak' + _root.save.fcgLastDiff] = 0;
      }
    }

    instance of movieClip 1490  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCurDiff >= 6 && _root.save.fcgCurDiff <= 11) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1493  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgReceiveChallenge == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.fcgReceiveChallenge == false) {
          _root.save.fcgReceiveChallenge = true;
        } else {
          _root.save.fcgReceiveChallenge = false;
        }
      }
    }

    instance of movieClip 1549  {

      onClipEvent (enterFrame) {
        gotoAndStop(_root.save.fcgCurDiff + 2);
      }

      onClipEvent (release) {
        if (_root.fcgCooldown <= 0 && !isNaN(_parent.powerCost) && _parent.powerCost >= 0) {
          _root.save.fcgCash -= _parent.powerCost;
          _root.fcg_challenged = false;
          _root.save.fcgLastDiff = _root.save.fcgCurDiff;
          if (_root.save.fcgCurDiff != 11) {
            _root.fcgCooldown = 15;
          }
          if (_root.save.fcgCurDiff == 0) {
            _root.fcg_opponentlevel = 0;
            _root.enemy_randomdeck = false;
            _parent.enemy_deck = 1;
            _parent.gotoAndStop(3);
          } else {
            if (_root.save.fcgCurDiff == 1) {
              _root.fcg_opponentlevel = 1;
              _root.enemy_randomdeck = true;
              _parent.enemy_deck = 1;
              _parent.gotoAndStop(3);
            } else {
              if (_root.save.fcgCurDiff == 2) {
                _root.fcg_opponentlevel = 2;
                _root.enemy_randomdeck = true;
                _parent.enemy_deck = 3 + random(6);
                _parent.gotoAndStop(3);
              } else {
                if (_root.save.fcgCurDiff == 3) {
                  _root.fcg_opponentlevel = 3;
                  _root.enemy_randomdeck = false;
                  _parent.enemy_deck = 3 + random(5);
                  _parent.enemy_deckhyb = 3 + random(5);
                  _parent.gotoAndStop(3);
                } else {
                  if (_root.save.fcgCurDiff == 4) {
                    _root.fcg_opponentlevel = 4;
                    _root.enemy_randomdeck = false;
                    _parent.enemy_deck = 8 + random(5);
                    _parent.enemy_deckhyb = 8 + random(5);
                    _parent.gotoAndStop(3);
                  } else {
                    if (_root.save.fcgCurDiff == 5 && _root.saveid != 4) {
                      _root.fcg_opponentlevel = 5;
                      _root.enemy_randomdeck = false;
                      _parent.enemy_deck = 70 + random(164);
                      _parent.gotoAndStop(14);
                    } else {
                      if (_root.save.fcgCurDiff == 6) {
                        _root.fcg_opponentlevel = 6;
                        _root.enemy_randomdeck = false;
                        _parent.enemy_deck = 13 + random(21);
                        _parent.gotoAndStop(3);
                      } else {
                        if (_root.save.fcgCurDiff == 7) {
                          _root.fcg_opponentlevel = 7;
                          _root.enemy_randomdeck = false;
                          _parent.enemy_deck = 13 + random(21);
                          _parent.gotoAndStop(3);
                        } else {
                          if (_root.save.fcgCurDiff == 8) {
                            if (_root.save.fcgRandomDeck != true) {
                              _root.fcg_opponentlevel = 8;
                              _root.enemy_randomdeck = false;
                              _parent.enemy_deck = 2;
                              _parent.gotoAndStop(3);
                            }
                          } else {
                            if (_root.save.fcgCurDiff == 9) {
                              if (_root.save.fcgLegendDeck > 0 && _root.save.fcgLegendLife > 0) {
                                if (_root.systemtimenow % 86400000 > 85500000) {
                                  _root.showPopup('Access Denied', 'The Legendary Monster is currently sleeping.');
                                  _root.save.fcgCash += _parent.powerCost;
                                } else {
                                  _root.fcg_opponentlevel = 9;
                                  _root.enemy_randomdeck = false;
                                  _parent.enemy_deck = _root.save.fcgLegendDeck;
                                  _parent.gotoAndStop(3);
                                }
                              } else {
                                _root.save.fcgCash += _parent.powerCost;
                              }
                            } else {
                              if (_root.save.fcgCurDiff == 10) {
                                _root.fcgCooldown = 30;
                                _root.fcg_opponentlevel = 10;
                                _root.enemy_randomdeck = false;
                                tempDeck = _root.save.fcgSeriousDeck;
                                _parent.enemy_deck = _root.save.fcgSeriousDeck;
                                _root.save.fcgSeriousDeck = 34 + random(35);
                                if (_root.saveid == 25) {
                                  _root.save.fcgSeriousDeck = 13 + random(56);
                                  if (_root.save.fcgLevel10 == 79) {
                                    _root.save.fcgSeriousDeck = 69;
                                  }
                                  for (;;) {
                                    if (!(_root.save.fcgChallenge5[_root.save.fcgSeriousDeck] >= 2 && _root.save.fcgLevel10 < 100 || _root.save.fcgSeriousDeck == tempDeck)) break;
                                    _root.save.fcgSeriousDeck = 13 + random(56);
                                  }
                                }
                                _parent.gotoAndStop(3);
                              } else {
                                if (_root.save.fcgCurDiff == 11) {
                                  _parent.gotoAndStop(7);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 1549  {

      onClipEvent (enterFrame) {
        gotoAndStop(_root.save.fcgCurDiff + 1);
      }

      onClipEvent (release, keyPress '<Left>') {
        if (_root.save.fcgCurDiff > 0) {
          _root.save.fcgCurDiff -= 1;
        }
      }
    }

    instance of movieClip 1549  {

      onClipEvent (enterFrame) {
        gotoAndStop(_root.save.fcgCurDiff + 3);
      }

      onClipEvent (release, keyPress '<Right>') {
        if (_root.save.fcgCurDiff < 11) {
          _root.save.fcgCurDiff += 1;
          if (_root.saveid == 25 && _root.save.fcgCurDiff == 10) {
            _root.fcgCooldown = 1;
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release, keyPress '<Space>') {
        if (_root.fcgCooldown <= 0 && !isNaN(_parent.powerCost) && _parent.powerCost >= 0) {
          _root.save.fcgCash -= _parent.powerCost;
          _root.fcg_challenged = false;
          _root.save.fcgLastDiff = _root.save.fcgCurDiff;
          if (_root.save.fcgCurDiff != 11) {
            _root.fcgCooldown = 15;
          }
          if (_root.save.fcgCurDiff == 0) {
            _root.fcg_opponentlevel = 0;
            _root.enemy_randomdeck = false;
            _parent.enemy_deck = 1;
            _parent.gotoAndStop(3);
          } else {
            if (_root.save.fcgCurDiff == 1) {
              _root.fcg_opponentlevel = 1;
              _root.enemy_randomdeck = true;
              _parent.enemy_deck = 1;
              _parent.gotoAndStop(3);
            } else {
              if (_root.save.fcgCurDiff == 2) {
                _root.fcg_opponentlevel = 2;
                _root.enemy_randomdeck = true;
                _parent.enemy_deck = 3 + random(6);
                _parent.gotoAndStop(3);
              } else {
                if (_root.save.fcgCurDiff == 3) {
                  _root.fcg_opponentlevel = 3;
                  _root.enemy_randomdeck = false;
                  _parent.enemy_deck = 3 + random(5);
                  _parent.enemy_deckhyb = 3 + random(5);
                  _parent.gotoAndStop(3);
                } else {
                  if (_root.save.fcgCurDiff == 4) {
                    _root.fcg_opponentlevel = 4;
                    _root.enemy_randomdeck = false;
                    _parent.enemy_deck = 8 + random(5);
                    _parent.enemy_deckhyb = 8 + random(5);
                    _parent.gotoAndStop(3);
                  } else {
                    if (_root.save.fcgCurDiff == 5 && _root.saveid != 4) {
                      _root.fcg_opponentlevel = 5;
                      _root.enemy_randomdeck = false;
                      _parent.enemy_deck = 70 + random(167);
                      _parent.gotoAndStop(14);
                    } else {
                      if (_root.save.fcgCurDiff == 6) {
                        _root.fcg_opponentlevel = 6;
                        _root.enemy_randomdeck = false;
                        _parent.enemy_deck = 13 + random(21);
                        _parent.gotoAndStop(3);
                      } else {
                        if (_root.save.fcgCurDiff == 7) {
                          _root.fcg_opponentlevel = 7;
                          _root.enemy_randomdeck = false;
                          _parent.enemy_deck = 13 + random(21);
                          _parent.gotoAndStop(3);
                        } else {
                          if (_root.save.fcgCurDiff == 8) {
                            if (_root.save.fcgRandomDeck != true) {
                              _root.fcg_opponentlevel = 8;
                              _root.enemy_randomdeck = false;
                              _parent.enemy_deck = 2;
                              _parent.gotoAndStop(3);
                            }
                          } else {
                            if (_root.save.fcgCurDiff == 9) {
                              if (_root.save.fcgLegendDeck > 0 && _root.save.fcgLegendLife > 0) {
                                if (_root.systemtimenow % 86400000 > 85500000) {
                                  _root.showPopup('Access Denied', 'The Legendary Monster is currently sleeping.');
                                  _root.save.fcgCash += _parent.powerCost;
                                } else {
                                  _root.fcg_opponentlevel = 9;
                                  _root.enemy_randomdeck = false;
                                  _parent.enemy_deck = _root.save.fcgLegendDeck;
                                  _parent.gotoAndStop(3);
                                }
                              } else {
                                _root.save.fcgCash += _parent.powerCost;
                              }
                            } else {
                              if (_root.save.fcgCurDiff == 10) {
                                _root.fcgCooldown = 30;
                                _root.fcg_opponentlevel = 10;
                                _root.enemy_randomdeck = false;
                                tempDeck = _root.save.fcgSeriousDeck;
                                _parent.enemy_deck = _root.save.fcgSeriousDeck;
                                _root.save.fcgSeriousDeck = 34 + random(35);
                                if (_root.saveid == 25) {
                                  _root.save.fcgSeriousDeck = 13 + random(56);
                                  if (_root.save.fcgLevel10 == 99) {
                                    _root.save.fcgSeriousDeck = 69;
                                  }
                                  for (;;) {
                                    if (!(_root.save.fcgChallenge5[_root.save.fcgSeriousDeck] >= 2 && _root.save.fcgLevel10 < 100 || _root.save.fcgSeriousDeck == tempDeck)) break;
                                    _root.save.fcgSeriousDeck = 13 + random(56);
                                  }
                                }
                                _parent.gotoAndStop(3);
                              } else {
                                if (_root.save.fcgCurDiff == 11) {
                                  _parent.gotoAndStop(7);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(12);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(6);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(13);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.alreadyopened = 0;
        _parent.removeMovieClip();
        removeMovieClip(_parent);
        _parent.unloadMovie();
        loadMovie('', _parent);
      }
    }

    instance of movieClip 1493  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgRandomDeck == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.fcgRandomDeck == false) {
          _root.save.fcgRandomDeck = true;
        } else {
          _root.save.fcgRandomDeck = false;
        }
      }
    }

    instance of movieClip 1594  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.powerCost > 0 && _alpha < 100) {
          _alpha = _alpha + 10;
        } else {
          if (_parent.powerCost == 0 && _alpha > 0) {
            _alpha = _alpha - 10;
          }
        }
        if (_parent.powerCost > 0) {
          costText.text = '-' + _root.withComma(_parent.powerCost);
        }
        if (_root.save.fcgCash < _parent.powerCost) {
          costText.textColor = 16711680;
          if (_root.fcgCooldown < 1) {
            _root.fcgCooldown = 1;
          }
        } else {
          costText.textColor = 52479;
        }
      }
    }

    instance popUp of movieClip 1609  {

      onClipEvent (enterFrame) {
        if (Math.random() < 0.001 && _currentframe == 1 && _root.save.fcgLevel >= 2 && _root.save.fcgReceiveChallenge == true && _root.saveid != 4) {
          _root.fcg_challengerlv = _root.save.fcgLevel + random(6) - random(6);
          if (_root.fcg_challengerlv < 3) {
            _root.fcg_challengerlv = 3;
          }
          if (_root.fcg_challengerlv > 45) {
            _root.fcg_challengerlv = 40 + random(10);
          }
          if (_root.fcg_challengerlv > 35 && Math.random() < 0.7) {
            _root.fcg_challengerlv = 30 + random(10);
          }
          gotoAndStop(2);
        }
        if (_currentframe == 2 && Math.random() < 0.001) {
          gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1624  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        alphaX = _root.fcgCooldown * 100;
        if (alphaX > 100) {
          alphaX = 100;
        }
        if (alphaX < 0) {
          alphaX = 0;
        }
        _alpha = alphaX;
      }
    }

    frame 3 {
      _root.house.gotoAndStop(12);
    }

    frame 3 {
      function updateText() {
        statBox1.text = _root.fcg_opponent_chp;
        statBox2.text = _root.fcg_opponent_catk;
        statBox3.text = _root.fcg_opponent_cdef;
        statBox4.text = _root.player_damagedealt + _root.fcg_player_catk + _root.fcg_player_matk;
        statBox5.text = _root.opponent_damagedealt + _root.fcg_opponent_catk + _root.fcg_opponent_matk;
        statBox7.text = _root.fcg_player_chp;
        statBox8.text = _root.fcg_player_catk;
        statBox9.text = _root.fcg_player_cdef;
        statBox10.text = _root.fcg_player_catk + _root.fcg_player_matk + ' + ' + _root.player_damagedealt;
        statBox11.text = _root.fcg_opponent_catk + _root.fcg_opponent_matk + ' + ' + _root.opponent_damagedealt;
        genBox1.text = '+' + _root.fcg_opponent_pil1;
        genBox2.text = '+' + _root.fcg_opponent_pil2;
        genBox3.text = '+' + _root.fcg_opponent_pil3;
        genBox4.text = '+' + _root.fcg_opponent_pil4;
        genBox5.text = '+' + _root.fcg_opponent_pil5;
        genBox6.text = '+' + _root.fcg_player_pil1;
        genBox7.text = '+' + _root.fcg_player_pil2;
        genBox8.text = '+' + _root.fcg_player_pil3;
        genBox9.text = '+' + _root.fcg_player_pil4;
        genBox10.text = '+' + _root.fcg_player_pil5;
        eneBox1.text = _root.fcg_opponent_ene1;
        eneBox2.text = _root.fcg_opponent_ene2;
        eneBox3.text = _root.fcg_opponent_ene3;
        eneBox4.text = _root.fcg_opponent_ene4;
        eneBox5.text = _root.fcg_opponent_ene5;
        eneBox6.text = _root.fcg_player_ene1;
        eneBox7.text = _root.fcg_player_ene2;
        eneBox8.text = _root.fcg_player_ene3;
        eneBox9.text = _root.fcg_player_ene4;
        eneBox10.text = _root.fcg_player_ene5;
      }

      function addLog(something) {
        fcgLog.logText.text += '\n' + something;
      }

      function resetLog() {
        fcgLog.logText.text = '';
      }

      function checkPriority() {
        priority = [zeroItem];
        ignore = [zeroItem];
        playerCurVal = _root.fcg_player_mhp * 0.3 + _root.fcg_player_matk * 2 + _root.fcg_player_mdef + _root.fcg_player_mreq;
        enemyCurVal = _root.fcg_opponent_mhp * 0.3 + _root.fcg_opponent_matk * 2 + _root.fcg_opponent_mdef + _root.fcg_opponent_mreq;
        if (isNaN(playerCurVal) || _root.fcg_player_mexist == 0) {
          playerCurVal = 0;
        }
        if (isNaN(enemyCurVal) || _root.fcg_opponent_mexist == 0) {
          enemyCurVal = 0;
        }
        c = 7;
        while (c <= 12) {
          priority[c] = 0;
          cardloc = c;
          if (_root['fcg_opponent_ene' + _root['quanta_card' + cardloc]] < _root['req_card' + cardloc] || _root['exist_card' + cardloc] != 1) {
            ignore[c] = 1;
          }
          xname = _root['name_card' + cardloc];
          xspec = _root['special_card' + cardloc];
          if (xspec != '' && _root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial == '') {
            priority[c] += 3;
          }
          if (xspec == 'Poison') {
            if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Poison') {
              priority[c] += 10;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 8;
              }
            }
          }
          if (xspec == 'Destroy') {
            if (_root.fcg_player_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
              priority[c] -= 25;
              if (efullhand == 1) {
                priority[c] += 16;
              }
            } else {
              priority[c] += 15 + playerCurVal;
            }
          }
          if (xspec == 'Absorb') {
            if (_root.fcg_player_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
              priority[c] -= 25;
              if (efullhand == 1) {
                priority[c] += 13;
              }
            } else {
              priority[c] += 12 + _root.fcg_player_mhp + playerCurVal;
            }
          }
          if (xspec == 'Forget') {
            if (_root.fcg_player_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
              priority[c] -= 5;
            } else {
              if (_root.fcg_player_mspecialpow < 0) {
                priority[c] -= 20;
              } else {
                if (_root.fcg_player_mspecialpow == 0) {
                  priority[c] -= 3;
                } else {
                  priority[c] += 5;
                }
              }
            }
          }
          if (xspec == 'Sacrifice') {
            if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Transform') {
              priority[c] += enemyCurVal - 10;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              } else {
                if (_root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 25;
                }
              }
            }
          }
          if (xspec == 'Growth') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += 7 + _root['specialpow_card' + cardloc] * 2;
            } else {
              if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Growth' || _root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial == 'Growth' && _root.fcg_opponent_mspecialpow <= _root['specialpow_card' + cardloc]) {
                priority[c] += 3 + _root['specialpow_card' + cardloc] * 2;
              } else {
                if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 4;
                } else {
                  if (_root['type_card' + cardloc] != 'Monster') {
                    priority[c] -= 25;
                    if (efullhand == 1) {
                      priority[c] += 10;
                    }
                  }
                }
              }
            }
          }
          if (xspec == 'GrowthA') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += 6 + _root['specialpow_card' + cardloc] * 2;
            } else {
              if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Growth' && _root.fcg_opponent_mspecial != 'GrowthA' || _root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial == 'GrowthA' && _root.fcg_opponent_mspecialpow <= _root['specialpow_card' + cardloc]) {
                priority[c] += 2 + _root['specialpow_card' + cardloc] * 2;
              } else {
                if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 4;
                } else {
                  if (_root['type_card' + cardloc] != 'Monster') {
                    priority[c] -= 25;
                    if (efullhand == 1) {
                      priority[c] += 10;
                    }
                  }
                }
              }
            }
          }
          if (xspec == 'GrowthD') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += 5 + _root['specialpow_card' + cardloc] * 2;
            } else {
              if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Growth' && _root.fcg_opponent_mspecial != 'GrowthD' || _root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial == 'GrowthD' && _root.fcg_opponent_mspecialpow <= _root['specialpow_card' + cardloc]) {
                priority[c] += 1 + _root['specialpow_card' + cardloc] * 2;
              } else {
                if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 4;
                } else {
                  if (_root['type_card' + cardloc] != 'Monster') {
                    priority[c] -= 25;
                    if (efullhand == 1) {
                      priority[c] += 10;
                    }
                  }
                }
              }
            }
          }
          if (xspec == 'Transform') {
            if (_root.fcg_opponent_mhp > 0 && _root.fcg_opponent_mspecial != 'Transform') {
              priority[c] += 20 - enemyCurVal;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 3;
              } else {
                if (_root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 25;
                  if (efullhand == 1) {
                    priority[c] += 10;
                  }
                }
              }
            }
          }
          if (xspec == 'Mutate') {
            if (_root.fcg_opponent_mhp > 0) {
              priority[c] += 21 - enemyCurVal;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 3;
              }
            }
          }
          if (xspec == 'Rebirth') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += 7;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 3;
              } else {
                if (_root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 25;
                  if (efullhand == 1) {
                    priority[c] += 10;
                  }
                }
              }
            }
          }
          if (xspec == 'Lure') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += _root.fcg_opponent_mdef * 3 + _root.fcg_opponent_mhp - 20;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              } else {
                if (_root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 25;
                  if (efullhand == 1) {
                    priority[c] += 10;
                  }
                }
              }
            }
          }
          if (xspec == 'MonKill') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0) && _root.fcg_player_mhp > 0) {
              priority[c] += _root.fcg_opponent_matk - _root.fcg_player_mdef;
            } else {
              if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0) <= 0) {
                priority[c] += _root.fcg_opponent_matk - 3;
              } else {
                if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 5;
                }
              }
            }
          }
          if (xspec == 'Unfreeze') {
            if (_root.fcg_opponent_mfreeze > 0) {
              priority[c] += _root.fcg_opponent_mfreeze * 5;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (xspec == 'Antidote') {
            if (_root.fcg_opponent_crec < 0) {
              priority[c] -= _root.fcg_opponent_crec - 3;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
            if (_root.fcg_opponent_crec < _root.fcg_opponent_hp * -0.2) {
              priority[c] += 20;
            }
          }
          if (xspec == 'NoRegen') {
            if (_root.fcg_player_crec > 0) {
              priority[c] += 3 + _root.fcg_player_crec;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (xspec == 'Zombify') {
            if (_root.fcg_player_crec > 0) {
              priority[c] += 5 + _root.fcg_player_crec * 5;
            }
          }
          if (xspec == 'Generator') {
            if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
              priority[c] += 3 + _root['specialpow_card' + cardloc] * 2;
            } else {
              if (_root.fcg_opponent_mhp < 1 && _root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (_root['omhp_card' + cardloc] < 0) {
            if (_root.fcg_player_mhp > 0) {
              priority[c] += _root['omhp_card' + cardloc] + playerCurVal;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
            if (_root['omhp_card' + cardloc] > _root.fcg_player_mhp * -1 && _root.fcg_player_mhp > 0) {
              priority[c] += 15;
            }
          }
          if (_root['omatk_card' + cardloc] < 0) {
            if (_root.fcg_player_matk > 0) {
              priority[c] += 10;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (_root['omdef_card' + cardloc] < 0) {
            if (_root.fcg_player_mdef > 0) {
              priority[c] += 10;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (_root['omrec_card' + cardloc] < 0) {
            if (_root.fcg_player_mhp > _root.fcg_player_mrec * -1) {
              priority[c] += 5 + playerCurVal;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (_root['freeze_card' + cardloc] > 0) {
            if (_root.fcg_player_mfreeze <= 0 && _root.fcg_player_mhp > 0) {
              priority[c] += _root['freeze_card' + cardloc] * 2;
            } else {
              if (_root['type_card' + cardloc] != 'Monster') {
                priority[c] -= 5;
              }
            }
          }
          if (_root['draw_card' + cardloc] > 0) {
            if (efullhand == 0 && _root.opponent_cardsLeft > _root.player_cardsLeft) {
              priority[c] += 10;
            } else {
              if (efullhand == 1) {
                priority[c] += 3;
              } else {
                if (_root['type_card' + cardloc] != 'Monster') {
                  priority[c] -= 2;
                }
              }
            }
          }
          if (_root['inflict_card' + cardloc] > 0) {
            priority[c] += _root['inflict_card' + cardloc];
          }
          if (_root['mhp_card' + cardloc] > 0 || _root['matk_card' + cardloc] > 0 || _root['mdef_card' + cardloc] > 0 || _root['mrec_card' + cardloc] > 0) {
            if (_root.fcg_opponent_mhp > 0) {
              priority[c] += 10;
            } else {
              if (_root.fcg_opponent_mhp > 0 && (_root.fcg_opponent_mspecial == '' || _root.fcg_opponent_mspecialpow < 0)) {
                priority[c] -= 5;
              }
            }
          }
          if (_root['mrec_card' + cardloc] > 0) {
            if (_root.fcg_opponent_mhp < _root.fcg_opponent_mrec) {
              priority[c] -= 10;
            }
          }
          k = 1;
          while (k <= 5) {
            if (_root['pil' + k + '_card' + cardloc] > 0) {
              if (_root['fcg_opponent_pil' + k] < 10) {
                priority[c] += 10 * _root['pil' + k + '_card' + cardloc];
              } else {
                priority[c] += 1;
              }
            }
            if (_root['ene' + k + '_card' + cardloc] > 0) {
              priority[c] += 5 * _root['ene' + k + '_card' + cardloc];
            }
            ++k;
          }
          if (_root['chp_card' + cardloc] > 0) {
            if (_root.fcg_opponent_chp < 200 - _root['chp_card' + cardloc]) {
              priority[c] += _root['chp_card' + cardloc];
            }
          }
          if (_root['catk_card' + cardloc] > 0 || _root['cdef_card' + cardloc] > 0 || _root['crec_card' + cardloc] > 0) {
            priority[c] += 10;
          }
          if (_root['ochp_card' + cardloc] > 0) {
            if (_root.fcg_opponent_chp < 200 - _root['chp_card' + cardloc]) {
              priority[c] += _root['chp_card' + cardloc];
            }
          }
          if (_root['ochp_card' + cardloc] < 0) {
            priority[c] -= _root['ochp_card' + cardloc] * 2;
          }
          if (_root['ocatk_card' + cardloc] < 0) {
            if (_root.fcg_player_catk > 0) {
              priority[c] += 10;
            }
          }
          if (_root['ocdef_card' + cardloc] < 0) {
            if (_root.fcg_player_cdef > 0) {
              priority[c] += 10;
            }
          }
          if (_root['ocrec_card' + cardloc] < 0) {
            priority[c] += 10;
          }
          if (_root['type_card' + cardloc] == 'Monster') {
            if (_root.fcg_opponent_mhp > 0) {
              priority[c] += _root['hp_card' + cardloc] * 0.3 + _root['atk_card' + cardloc] * 2 + _root['def_card' + cardloc] * 1 + _root['req_card' + cardloc] - enemyCurVal - 4;
              if (_root.fcg_opponent_mfreeze > 0) {
                priority[c] += _root.fcg_opponent_mfreeze * 5;
              }
            } else {
              priority[c] += _root['hp_card' + cardloc] * 0.3 + _root['atk_card' + cardloc] * 2 + _root['def_card' + cardloc] * 1 + _root['req_card' + cardloc] + 17;
            }
          }
          if (_root['chp_card' + cardloc] <= _root.fcg_opponent_chp * -1) {
            priority[c] -= 50000;
          }
          if (xname == 'Rage' || xname == 'Berserk') {
            if (_root.fcg_opponent_mhp > 4) {
              priority[c] = 5;
            } else {
              priority[c] = -5;
            }
          }
          if (xname == 'Meteor Rain') {
            if (_root.fcg_opponent_mhp != 1) {
              priority[c] = 5;
            } else {
              priority[c] = -25;
            }
          }
          if (xname == 'Final Strikes') {
            if (_root.fcg_opponent_mhp > 2 && _root.fcg_opponent_mrec >= 0) {
              priority[c] = 5;
            } else {
              priority[c] = -25;
            }
          }
          if (xname == 'Hide') {
            if (_root.fcg_opponent_mhp > 0) {
              if (_root.fcg_opponent_matk < 2 || _root.fcg_opponent_matk > 5 || _root.fcg_opponent_mspecial == 'Lure') {
                priority[c] = 5;
              }
            } else {
              priority[c] = -25;
            }
          }
          if (xname == 'Epicbolt') {
            if (enemyCurVal < 15 || _root.fcg_opponent_mhp > 10) {
              priority[c] = 5;
            } else {
              priority[c] = -25;
            }
          }
          if (xname == 'Match Delay') {
            if (_root.fcg_opponent_chp < _root.fcg_player_chp || _root.opponent_cardsLeft > _root.player_cardsLeft) {
              priority[c] = 5;
            } else {
              priority[c] = -25;
            }
          }
          if (xname == 'Poison Heal') {
            if (_root.fcg_opponent_chp < 50 && _root.fcg_opponent_crec < 5) {
              priority[c] = 5;
            } else {
              priority[c] = -35;
            }
            cc = 7;
            while (cc <= 12) {
              if (_root['name_card' + cc] == 'Cure' && _root['exist_card' + cc] == 1) {
                priority[c] += 70 - _root.fcg_opponent_crec;
              }
              ++cc;
            }
            cc = 7;
            while (cc <= 12) {
              if (_root['name_card' + cc] == 'Poison Heal' && _root['exist_card' + cc] == 1 && priority[c] > 5) {
                priority[c] += 1000;
              }
              ++cc;
            }
          }
          if (xname == 'Attack Removal') {
            priority[c] = _root.fcg_player_catk - _root.fcg_opponent_catk - 3;
          }
          if (xname == 'Defense Removal') {
            priority[c] = _root.fcg_player_cdef - _root.fcg_opponent_cdef - 3;
          }
          if (xname == 'Stat Wipeout') {
            priority[c] = _root.fcg_player_catk - _root.fcg_opponent_catk + _root.fcg_player_cdef - _root.fcg_opponent_cdef - 3;
          }
          if (xname == 'Green World') {
            priority[c] = _root.fcg_player_pil1 + _root.fcg_player_pil2 + _root.fcg_player_pil3 + _root.fcg_player_pil5 - 7;
          }
          if (efullhand == 1) {
            priority[c] += 34 - _root['req_card' + cardloc];
          }
          ++c;
        }
      }

      function drawCard(codeFu) {
        cardloc = 1;
        i = 1;
        while (i <= 6) {
          if (_root['exist_card' + cardloc] == 1) {
            cardloc += 1;
          }
          ++i;
        }
        if (cardloc <= 6) {
          if (codeFu == 5) {
            card = 122;
          } else {
            if (codeFu == 4) {
              card = 142;
            } else {
              if (codeFu != 1 && codeFu != 2) {
                _root.player_cardsDrawn += 1;
                _root.player_cardsLeft -= 1;
                if (_root.player_cardsLeft >= 0) {
                  if (_root.save.fcgRandomDeck == false) {
                    card = playerDeckArray[_root.player_cardsDrawn];
                  } else {
                    card = random(maxcard) + 1;
                    if (Math.random() < 0.2) {
                      card = random(24) + 3;
                    }
                  }
                }
              } else {
                if (codeFu == 2) {
                  card = random(maxcard) + 1;
                  if (Math.random() < 0.2) {
                    card = random(24) + 3;
                  }
                  if (Math.ceil(card / 2) != card / 2) {
                    card += 1;
                  }
                } else {
                  if (codeFu == 1) {
                    if (_root.fcg_opponent_chp <= 16 && _root.fcg_player_chp > 1) {
                      card = 116;
                    } else {
                      if (_root.fcg_opponent_catk > _root.fcg_player_catk + 5 && _root.fcg_opponent_catk > 20 && _root.fcg_opponent_catk > _root.fcg_player_cdef + _root.fcg_player_chp * 0.2 && Math.random() < 0.8) {
                        card = 180;
                      } else {
                        if (_root.fcg_opponent_catk > _root.fcg_player_catk + 5 && _root.fcg_opponent_catk > _root.fcg_player_cdef && Math.random() < 0.8) {
                          card = 244;
                        } else {
                          if (_root.fcg_player_crec < -5 && Math.random() < 0.8) {
                            card = 236;
                          } else {
                            if (_root.fcg_opponent_mexist > 0 && Math.random() < 0.8) {
                              card = 164;
                            } else {
                              if (_root.fcg_player_chp < 40 && Math.random() < 0.8) {
                                card = 182;
                              } else {
                                if (_root.fcg_opponent_cdef > _root.fcg_player_cdef + 5 && Math.random() < 0.8) {
                                  card = 190;
                                } else {
                                  if (_root.fcg_player_cfreeze > 0 && Math.random() < 0.8) {
                                    card = 234;
                                  } else {
                                    if ((_root.fcg_player_matk > 6 || _root.fcg_player_mdef > 6 || _root.fcg_player_mhp > 9) && Math.random() < 0.8) {
                                      card = 110;
                                    } else {
                                      if (_root.fcg_opponent_crec > _root.fcg_player_crec + 3 && _root.fcg_opponent_crec > 4 && _root.fcg_player_crec <= 4 && Math.random() < 0.8) {
                                        card = 238;
                                      } else {
                                        if (_root.player_cardsLeft > 10 && Math.random() < 0.8) {
                                          card = 142;
                                        } else {
                                          card = 122;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (codeFu == 1 || codeFu == 2 || codeFu == 4 || codeFu == 5 || _root.player_cardsLeft >= 0) {
            _root['exist_card' + cardloc] = 1;
            _root['id_card' + cardloc] = _root.cardList[card].id;
            _root['upgraded_card' + cardloc] = _root.cardList[card].upgraded;
            _root['name_card' + cardloc] = _root.cardList[card].name;
            _root['quanta_card' + cardloc] = _root.cardList[card].quanta;
            _root['req_card' + cardloc] = _root.cardList[card].req;
            if (codeFu != 0) {
              _root['quanta_card' + cardloc] = 6;
              _root['req_card' + cardloc] = 0;
            }
            _root['type_card' + cardloc] = _root.cardList[card].type;
            _root['desc_card' + cardloc] = _root.cardList[card].desc;
            _root['atk_card' + cardloc] = _root.cardList[card].atk;
            _root['def_card' + cardloc] = _root.cardList[card].def;
            _root['hp_card' + cardloc] = _root.cardList[card].hp;
            _root['catk_card' + cardloc] = _root.cardList[card].catk;
            _root['cdef_card' + cardloc] = _root.cardList[card].cdef;
            _root['chp_card' + cardloc] = _root.cardList[card].chp;
            _root['matk_card' + cardloc] = _root.cardList[card].matk;
            _root['mdef_card' + cardloc] = _root.cardList[card].mdef;
            _root['mhp_card' + cardloc] = _root.cardList[card].mhp;
            _root['crec_card' + cardloc] = _root.cardList[card].crec;
            _root['mrec_card' + cardloc] = _root.cardList[card].mrec;
            _root['draw_card' + cardloc] = _root.cardList[card].draw;
            _root['inflict_card' + cardloc] = _root.cardList[card].inflict;
            _root['freeze_card' + cardloc] = _root.cardList[card].freeze;
            _root['special_card' + cardloc] = _root.cardList[card].special;
            _root['specialpow_card' + cardloc] = _root.cardList[card].specialpow;
            _root['pil1_card' + cardloc] = _root.cardList[card].pil1;
            _root['pil2_card' + cardloc] = _root.cardList[card].pil2;
            _root['pil3_card' + cardloc] = _root.cardList[card].pil3;
            _root['pil4_card' + cardloc] = _root.cardList[card].pil4;
            _root['pil5_card' + cardloc] = _root.cardList[card].pil5;
            _root['ene1_card' + cardloc] = _root.cardList[card].ene1;
            _root['ene2_card' + cardloc] = _root.cardList[card].ene2;
            _root['ene3_card' + cardloc] = _root.cardList[card].ene3;
            _root['ene4_card' + cardloc] = _root.cardList[card].ene4;
            _root['ene5_card' + cardloc] = _root.cardList[card].ene5;
            _root['opil1_card' + cardloc] = _root.cardList[card].opil1;
            _root['opil2_card' + cardloc] = _root.cardList[card].opil2;
            _root['opil3_card' + cardloc] = _root.cardList[card].opil3;
            _root['opil4_card' + cardloc] = _root.cardList[card].opil4;
            _root['opil5_card' + cardloc] = _root.cardList[card].opil5;
            _root['oene1_card' + cardloc] = _root.cardList[card].oene1;
            _root['oene2_card' + cardloc] = _root.cardList[card].oene2;
            _root['oene3_card' + cardloc] = _root.cardList[card].oene3;
            _root['oene4_card' + cardloc] = _root.cardList[card].oene4;
            _root['oene5_card' + cardloc] = _root.cardList[card].oene5;
            _root['ocatk_card' + cardloc] = _root.cardList[card].ocatk;
            _root['ocdef_card' + cardloc] = _root.cardList[card].ocdef;
            _root['ochp_card' + cardloc] = _root.cardList[card].ochp;
            _root['omatk_card' + cardloc] = _root.cardList[card].omatk;
            _root['omdef_card' + cardloc] = _root.cardList[card].omdef;
            _root['omhp_card' + cardloc] = _root.cardList[card].omhp;
            _root['ocrec_card' + cardloc] = _root.cardList[card].ocrec;
            _root['omrec_card' + cardloc] = _root.cardList[card].omrec;
            _root['author_card' + cardloc] = _root.cardList[card].author;
          }
        }
      }

      function drawCard_opponent(codeFu) {
        cardloc = 7;
        if (_root.fcg_opponentlevel == 9 && Math.random() < 0.03 * _root.fcg_turn - 0.01 * _root.save.fcgLegendLife - 0.14 && codeFu == 0) {
          codeFu = 3;
        }
        if (_root.fcg_epic == 4 && Math.random() < 0.03 * _root.fcg_turn - 0.15 && codeFu == 0) {
          codeFu = 3;
        }
        i = 1;
        while (i <= 6) {
          if (_root['exist_card' + cardloc] == 1) {
            cardloc += 1;
          }
          ++i;
        }
        if (cardloc <= 12) {
          if (codeFu != 1 && codeFu != 2) {
            _root.opponent_cardsDrawn += 1;
            _root.opponent_cardsLeft -= 1;
            if (_root.opponent_cardsLeft >= 0) {
              if (_root.enemy_randomdeck == false) {
                card = enemyDeckArray[_root.opponent_cardsDrawn];
              } else {
                card = random(maxcard) + 1;
                if (Math.random() < 0.2) {
                  card = random(24) + 3;
                }
                if (_root.fcg_opponentlevel < 3 && _root.cardList[card].upgraded >= 2 && Math.random() < 0.7) {
                  card = random(24) + 3;
                }
                if (_root.fcg_opponentlevel < 2) {
                  if (Math.ceil(card / 2) == card / 2) {
                    card -= 1;
                  }
                }
              }
            }
          } else {
            if (codeFu == 2) {
              card = random(maxcard) + 1;
              if (Math.random() < 0.2) {
                card = random(24) + 3;
              }
              if (Math.ceil(card / 2) != card / 2) {
                card += 1;
              }
            } else {
              if (codeFu == 1) {
                if (_root.fcg_player_chp <= 16 && _root.fcg_opponent_chp > 1) {
                  card = 116;
                } else {
                  if (_root.fcg_player_catk > _root.fcg_opponent_catk + 5 && _root.fcg_player_catk > 20 && _root.fcg_player_catk > _root.fcg_opponent_cdef + _root.fcg_opponent_chp * 0.2 && Math.random() < 0.8) {
                    card = 180;
                  } else {
                    if (_root.fcg_player_catk > _root.fcg_opponent_catk + 5 && _root.fcg_player_catk > _root.fcg_opponent_cdef && Math.random() < 0.8) {
                      card = 244;
                    } else {
                      if (_root.fcg_opponent_crec < -5 && Math.random() < 0.8) {
                        card = 236;
                      } else {
                        if (_root.fcg_player_mexist > 0 && Math.random() < 0.8) {
                          card = 164;
                        } else {
                          if (_root.fcg_opponent_chp < 40 && Math.random() < 0.8) {
                            card = 182;
                          } else {
                            if (_root.fcg_player_cdef > _root.fcg_opponent_cdef + 5 && Math.random() < 0.8) {
                              card = 190;
                            } else {
                              if (_root.fcg_opponent_cfreeze > 0 && Math.random() < 0.8) {
                                card = 234;
                              } else {
                                if ((_root.fcg_opponent_matk > 6 || _root.fcg_opponent_mdef > 6 || _root.fcg_opponent_mhp > 9) && Math.random() < 0.8) {
                                  card = 110;
                                } else {
                                  if (_root.fcg_player_crec > _root.fcg_opponent_crec + 3 && _root.fcg_player_crec > 4 && _root.fcg_opponent_crec <= 4 && Math.random() < 0.8) {
                                    card = 238;
                                  } else {
                                    if (_root.opponent_cardsLeft > 10 && Math.random() < 0.8) {
                                      card = 142;
                                    } else {
                                      card = 122;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (codeFu == 1 || codeFu == 2 || _root.opponent_cardsLeft >= 0) {
            _root['exist_card' + cardloc] = 1;
            _root['id_card' + cardloc] = _root.cardList[card].id;
            _root['upgraded_card' + cardloc] = _root.cardList[card].upgraded;
            _root['name_card' + cardloc] = _root.cardList[card].name;
            _root['quanta_card' + cardloc] = _root.cardList[card].quanta;
            _root['req_card' + cardloc] = _root.cardList[card].req;
            if (codeFu != 0) {
              _root['quanta_card' + cardloc] = 6;
              _root['req_card' + cardloc] = 0;
            }
            _root['type_card' + cardloc] = _root.cardList[card].type;
            _root['desc_card' + cardloc] = _root.cardList[card].desc;
            _root['atk_card' + cardloc] = _root.cardList[card].atk;
            _root['def_card' + cardloc] = _root.cardList[card].def;
            _root['hp_card' + cardloc] = _root.cardList[card].hp;
            _root['catk_card' + cardloc] = _root.cardList[card].catk;
            _root['cdef_card' + cardloc] = _root.cardList[card].cdef;
            _root['chp_card' + cardloc] = _root.cardList[card].chp;
            _root['matk_card' + cardloc] = _root.cardList[card].matk;
            _root['mdef_card' + cardloc] = _root.cardList[card].mdef;
            _root['mhp_card' + cardloc] = _root.cardList[card].mhp;
            _root['crec_card' + cardloc] = _root.cardList[card].crec;
            _root['mrec_card' + cardloc] = _root.cardList[card].mrec;
            _root['draw_card' + cardloc] = _root.cardList[card].draw;
            _root['inflict_card' + cardloc] = _root.cardList[card].inflict;
            _root['freeze_card' + cardloc] = _root.cardList[card].freeze;
            _root['special_card' + cardloc] = _root.cardList[card].special;
            _root['specialpow_card' + cardloc] = _root.cardList[card].specialpow;
            _root['pil1_card' + cardloc] = _root.cardList[card].pil1;
            _root['pil2_card' + cardloc] = _root.cardList[card].pil2;
            _root['pil3_card' + cardloc] = _root.cardList[card].pil3;
            _root['pil4_card' + cardloc] = _root.cardList[card].pil4;
            _root['pil5_card' + cardloc] = _root.cardList[card].pil5;
            _root['ene1_card' + cardloc] = _root.cardList[card].ene1;
            _root['ene2_card' + cardloc] = _root.cardList[card].ene2;
            _root['ene3_card' + cardloc] = _root.cardList[card].ene3;
            _root['ene4_card' + cardloc] = _root.cardList[card].ene4;
            _root['ene5_card' + cardloc] = _root.cardList[card].ene5;
            _root['opil1_card' + cardloc] = _root.cardList[card].opil1;
            _root['opil2_card' + cardloc] = _root.cardList[card].opil2;
            _root['opil3_card' + cardloc] = _root.cardList[card].opil3;
            _root['opil4_card' + cardloc] = _root.cardList[card].opil4;
            _root['opil5_card' + cardloc] = _root.cardList[card].opil5;
            _root['oene1_card' + cardloc] = _root.cardList[card].oene1;
            _root['oene2_card' + cardloc] = _root.cardList[card].oene2;
            _root['oene3_card' + cardloc] = _root.cardList[card].oene3;
            _root['oene4_card' + cardloc] = _root.cardList[card].oene4;
            _root['oene5_card' + cardloc] = _root.cardList[card].oene5;
            _root['ocatk_card' + cardloc] = _root.cardList[card].ocatk;
            _root['ocdef_card' + cardloc] = _root.cardList[card].ocdef;
            _root['ochp_card' + cardloc] = _root.cardList[card].ochp;
            _root['omatk_card' + cardloc] = _root.cardList[card].omatk;
            _root['omdef_card' + cardloc] = _root.cardList[card].omdef;
            _root['omhp_card' + cardloc] = _root.cardList[card].omhp;
            _root['ocrec_card' + cardloc] = _root.cardList[card].ocrec;
            _root['omrec_card' + cardloc] = _root.cardList[card].omrec;
            _root['author_card' + cardloc] = _root.cardList[card].author;
          }
        }
      }

      function summonCard(cardloc) {
        if (_root.fcg_time > 0.25) {
          if (cardloc <= 6 && _root.fcg_player_time <= 0) {
            if (_root['fcg_player_ene' + _root['quanta_card' + cardloc]] >= _root['req_card' + cardloc] && _root['exist_card' + cardloc] == 1) {
              ignore = 0;
              if (_root['type_card' + cardloc] == 'Monster') {
                if (_root.fcg_player_mhp <= 0) {
                  _root.fcg_player_mid = _root['id_card' + cardloc];
                  _root.fcg_player_mquanta = _root['quanta_card' + cardloc];
                  _root.fcg_player_mreq = _root['req_card' + cardloc];
                  _root.fcg_player_mname = _root['name_card' + cardloc];
                  _root.fcg_player_mdesc = _root['desc_card' + cardloc];
                  _root.fcg_player_mupgraded = _root['upgraded_card' + cardloc];
                  _root.fcg_player_mauthor = _root['author_card' + cardloc];
                  _root.fcg_player_mspecial = _root['special_card' + cardloc];
                  _root.fcg_player_mspecialpow = _root['specialpow_card' + cardloc];
                  _root.fcg_player_mexist = 1;
                  _root.fcg_player_mhp = _root['hp_card' + cardloc];
                  _root.fcg_player_matk = _root['atk_card' + cardloc];
                  _root.fcg_player_mdef = _root['def_card' + cardloc];
                } else {
                  ignore = 1;
                }
              }
              if (ignore != 1) {
                if (_root.fcg_time < 15) {
                  _root.fcg_time += 1;
                }
                _root.fcg_player_time = 0.5;
                _root.fcg_opponent_time = 0.3;
                if (_root.fcg_opponentlevel == 0) {
                  _root.fcg_opponent_time = 0.6;
                } else {
                  if (_root.fcg_opponentlevel <= 2) {
                    _root.fcg_opponent_time = 0.5;
                  } else {
                    if (_root.fcg_opponentlevel <= 5) {
                      _root.fcg_opponent_time = 0.4;
                    }
                  }
                }
                _root.fcg_player_id = _root['id_card' + cardloc];
                _root.fcg_player_quanta = _root['quanta_card' + cardloc];
                _root.fcg_player_req = _root['req_card' + cardloc];
                _root.fcg_player_name = _root['name_card' + cardloc];
                _root.fcg_player_desc = _root['desc_card' + cardloc];
                _root.fcg_player_author = _root['author_card' + cardloc];
                _root.fcg_player_upgraded = _root['upgraded_card' + cardloc];
                _root.fcg_player_special = _root['special_card' + cardloc];
                _root.fcg_player_specialpow = _root['specialpow_card' + cardloc];
                _root.fcg_player_type = _root['type_card' + cardloc];
                _root.fcg_player_catk += _root['catk_card' + cardloc];
                _root.fcg_player_cdef += _root['cdef_card' + cardloc];
                _root.fcg_player_chp += _root['chp_card' + cardloc];
                _root.fcg_player_matk += _root['matk_card' + cardloc];
                _root.fcg_player_mdef += _root['mdef_card' + cardloc];
                _root.fcg_player_mhp += _root['mhp_card' + cardloc];
                _root.fcg_player_crec += _root['crec_card' + cardloc];
                _root.fcg_player_mrec += _root['mrec_card' + cardloc];
                _root.fcg_opponent_catk += _root['ocatk_card' + cardloc];
                _root.fcg_opponent_cdef += _root['ocdef_card' + cardloc];
                _root.fcg_opponent_chp += _root['ochp_card' + cardloc];
                _root.fcgDamageDealt -= _root['ochp_card' + cardloc];
                _root.fcg_opponent_matk += _root['omatk_card' + cardloc];
                _root.fcg_opponent_mdef += _root['omdef_card' + cardloc];
                _root.fcg_opponent_mhp += _root['omhp_card' + cardloc];
                _root.fcg_opponent_crec += _root['ocrec_card' + cardloc];
                _root.fcg_opponent_mrec += _root['omrec_card' + cardloc];
                _root.player_damagedealtc += _root['inflict_card' + cardloc];
                _root.fcg_opponent_mfreeze += _root['freeze_card' + cardloc];
                f = 1;
                while (f <= _root['draw_card' + cardloc]) {
                  if (_root['name_card' + cardloc] == 'Code Fu') {
                    drawCard(1);
                  } else {
                    if (_root['name_card' + cardloc] == 'Dream Book' && f == 1) {
                      drawCard(3);
                    } else {
                      if (_root['name_card' + cardloc] == 'Mystery Card') {
                        drawCard(2);
                      } else {
                        drawCard(0);
                      }
                    }
                  }
                  ++f;
                }
                _root['fcg_player_ene' + _root['quanta_card' + cardloc]] -= _root['req_card' + cardloc];
                _root.fcg_player_pil1 += _root['pil1_card' + cardloc];
                _root.fcg_player_pil2 += _root['pil2_card' + cardloc];
                _root.fcg_player_pil3 += _root['pil3_card' + cardloc];
                _root.fcg_player_pil4 += _root['pil4_card' + cardloc];
                _root.fcg_player_pil5 += _root['pil5_card' + cardloc];
                _root.fcg_player_ene1 += _root['ene1_card' + cardloc];
                _root.fcg_player_ene2 += _root['ene2_card' + cardloc];
                _root.fcg_player_ene3 += _root['ene3_card' + cardloc];
                _root.fcg_player_ene4 += _root['ene4_card' + cardloc];
                _root.fcg_player_ene5 += _root['ene5_card' + cardloc];
                _root.fcg_opponent_pil1 += _root['opil1_card' + cardloc];
                _root.fcg_opponent_pil2 += _root['opil2_card' + cardloc];
                _root.fcg_opponent_pil3 += _root['opil3_card' + cardloc];
                _root.fcg_opponent_pil4 += _root['opil4_card' + cardloc];
                _root.fcg_opponent_pil5 += _root['opil5_card' + cardloc];
                _root.fcg_opponent_ene1 += _root['oene1_card' + cardloc];
                _root.fcg_opponent_ene2 += _root['oene2_card' + cardloc];
                _root.fcg_opponent_ene3 += _root['oene3_card' + cardloc];
                _root.fcg_opponent_ene4 += _root['oene4_card' + cardloc];
                _root.fcg_opponent_ene5 += _root['oene5_card' + cardloc];
                fcg_player_recentsummon.delay = 3;
                fcg_player_recentsummon._alpha = 150;
                _root['exist_card' + cardloc] = 0;
                addLog('You played [' + _root['name_card' + cardloc] + ']!');
              }
            }
          } else {
            if (cardloc == 1337 && _root.fcg_opponent_time <= 0) {
              if (_root.exist_card7 == true && _root.exist_card8 == true && _root.exist_card9 == true && _root.exist_card10 == true && _root.exist_card11 == true && _root.exist_card12 == true) {
                efullhand = 1;
              } else {
                efullhand = 0;
              }
              checkPriority();
              cardToPlay = 0;
              maxPriority = 1;
              e = 7;
              while (e <= 12) {
                if (priority[e] >= maxPriority && ignore[e] != 1) {
                  maxPriority = priority[e];
                  cardToPlay = e;
                }
                ++e;
              }
              cardloc = cardToPlay;
              if (_root['type_card' + cardloc] == 'Monster' && cardloc != 0) {
                if (_root.fcg_opponent_mhp <= 0) {
                  _root.fcg_opponent_mid = _root['id_card' + cardloc];
                  _root.fcg_opponent_mquanta = _root['quanta_card' + cardloc];
                  _root.fcg_opponent_mreq = _root['req_card' + cardloc];
                  _root.fcg_opponent_mname = _root['name_card' + cardloc];
                  _root.fcg_opponent_mdesc = _root['desc_card' + cardloc];
                  _root.fcg_opponent_mupgraded = _root['upgraded_card' + cardloc];
                  _root.fcg_opponent_mauthor = _root['author_card' + cardloc];
                  _root.fcg_opponent_mspecial = _root['special_card' + cardloc];
                  _root.fcg_opponent_mspecialpow = _root['specialpow_card' + cardloc];
                  _root.fcg_opponent_mexist = 1;
                  _root.fcg_opponent_mhp = _root['hp_card' + cardloc];
                  _root.fcg_opponent_matk = _root['atk_card' + cardloc];
                  _root.fcg_opponent_mdef = _root['def_card' + cardloc];
                } else {
                  addLog('Your opponent destroyed its own [' + _root.fcg_opponent_mname + ']!');
                  _root.fcg_opponent_mhp = 0;
                  if (_root.fcg_time < 15) {
                    _root.fcg_time += 1;
                  }
                  _root.fcg_opponent_time = 0.5;
                  cardloc = -1;
                }
              }
              if (cardloc != 0 && cardloc != -1) {
                if (_root.fcg_time < 15) {
                  _root.fcg_time += 1;
                }
                _root.fcg_opponent_time = 0.7;
                if (_root.fcg_opponentlevel == 0) {
                  _root.fcg_opponent_time = 2;
                } else {
                  if (_root.fcg_opponentlevel <= 2) {
                    _root.fcg_opponent_time = 1.5;
                  } else {
                    if (_root.fcg_opponentlevel <= 5) {
                      _root.fcg_opponent_time = 1;
                    }
                  }
                }
                _root.fcg_opponent_id = _root['id_card' + cardloc];
                _root.fcg_opponent_quanta = _root['quanta_card' + cardloc];
                _root.fcg_opponent_req = _root['req_card' + cardloc];
                _root.fcg_opponent_name = _root['name_card' + cardloc];
                _root.fcg_opponent_desc = _root['desc_card' + cardloc];
                _root.fcg_opponent_author = _root['author_card' + cardloc];
                _root.fcg_opponent_upgraded = _root['upgraded_card' + cardloc];
                _root.fcg_opponent_special = _root['special_card' + cardloc];
                _root.fcg_opponent_specialpow = _root['specialpow_card' + cardloc];
                _root.fcg_opponent_type = _root['type_card' + cardloc];
                _root.fcg_opponent_catk += _root['catk_card' + cardloc];
                _root.fcg_opponent_cdef += _root['cdef_card' + cardloc];
                _root.fcg_opponent_chp += _root['chp_card' + cardloc];
                _root.fcg_opponent_matk += _root['matk_card' + cardloc];
                _root.fcg_opponent_mdef += _root['mdef_card' + cardloc];
                _root.fcg_opponent_mhp += _root['mhp_card' + cardloc];
                _root.fcg_opponent_crec += _root['crec_card' + cardloc];
                _root.fcg_opponent_mrec += _root['mrec_card' + cardloc];
                _root.fcg_player_catk += _root['ocatk_card' + cardloc];
                _root.fcg_player_cdef += _root['ocdef_card' + cardloc];
                _root.fcg_player_chp += _root['ochp_card' + cardloc];
                _root.fcg_player_matk += _root['omatk_card' + cardloc];
                _root.fcg_player_mdef += _root['omdef_card' + cardloc];
                _root.fcg_player_mhp += _root['omhp_card' + cardloc];
                _root.fcg_player_crec += _root['ocrec_card' + cardloc];
                _root.fcg_player_mrec += _root['omrec_card' + cardloc];
                _root.opponent_damagedealtc += _root['inflict_card' + cardloc];
                _root.fcg_player_mfreeze += _root['freeze_card' + cardloc];
                f = 1;
                while (f <= _root['draw_card' + cardloc]) {
                  if (_root['name_card' + cardloc] == 'Code Fu') {
                    drawCard_opponent(1);
                  } else {
                    if (_root['name_card' + cardloc] == 'Dream Book' && f == 1) {
                      drawCard_opponent(3);
                    } else {
                      if (_root['name_card' + cardloc] == 'Mystery Card') {
                        drawCard_opponent(2);
                      } else {
                        drawCard_opponent(0);
                      }
                    }
                  }
                  ++f;
                }
                _root['fcg_opponent_ene' + _root['quanta_card' + cardloc]] -= _root['req_card' + cardloc];
                _root.fcg_opponent_pil1 += _root['pil1_card' + cardloc];
                _root.fcg_opponent_pil2 += _root['pil2_card' + cardloc];
                _root.fcg_opponent_pil3 += _root['pil3_card' + cardloc];
                _root.fcg_opponent_pil4 += _root['pil4_card' + cardloc];
                _root.fcg_opponent_pil5 += _root['pil5_card' + cardloc];
                _root.fcg_opponent_ene1 += _root['ene1_card' + cardloc];
                _root.fcg_opponent_ene2 += _root['ene2_card' + cardloc];
                _root.fcg_opponent_ene3 += _root['ene3_card' + cardloc];
                _root.fcg_opponent_ene4 += _root['ene4_card' + cardloc];
                _root.fcg_opponent_ene5 += _root['ene5_card' + cardloc];
                _root.fcg_player_pil1 += _root['opil1_card' + cardloc];
                _root.fcg_player_pil2 += _root['opil2_card' + cardloc];
                _root.fcg_player_pil3 += _root['opil3_card' + cardloc];
                _root.fcg_player_pil4 += _root['opil4_card' + cardloc];
                _root.fcg_player_pil5 += _root['opil5_card' + cardloc];
                _root.fcg_player_ene1 += _root['oene1_card' + cardloc];
                _root.fcg_player_ene2 += _root['oene2_card' + cardloc];
                _root.fcg_player_ene3 += _root['oene3_card' + cardloc];
                _root.fcg_player_ene4 += _root['oene4_card' + cardloc];
                _root.fcg_player_ene5 += _root['oene5_card' + cardloc];
                fcg_opponent_recentsummon.delay = 3;
                fcg_opponent_recentsummon._alpha = 150;
                _root['exist_card' + cardloc] = 0;
                addLog('Your opponent played [' + _root['name_card' + cardloc] + ']!');
              } else {
                if (cardloc == 0) {
                  if (efullhand == 1 && _root.opponent_cardsLeft >= 8) {
                    cardloc = 7 + random(6);
                    discardCard(cardloc);
                  }
                }
              }
            }
          }
        }
        updateText();
      }

      function discardCard(cardloc) {
        if (cardloc <= 6) {
          if (_root['exist_card' + cardloc] == 1) {
            addLog('You discarded [' + _root['name_card' + cardloc] + ']!');
            _root['exist_card' + cardloc] = 0;
            _root.discards += 1;
            _root.fcg_player_crec -= 1;
            if (_root.fcg_time < 15) {
              _root.fcg_time += 1;
            }
            _root.fcg_player_time = 0.5;
          }
        }
        if (cardloc > 6) {
          if (_root['exist_card' + cardloc] == 1) {
            addLog('Your opponent discarded [' + _root['name_card' + cardloc] + ']!');
            _root['exist_card' + cardloc] = 0;
            _root.fcg_opponent_crec -= 1;
            if (_root.fcg_time < 15) {
              _root.fcg_time += 1;
            }
            _root.fcg_opponent_time = 0.5;
          }
        }
        updateText();
      }

      function nextTurn() {
        damagedealtdisp.box1.text = '';
        damagedealtdisp.box2.text = '';
        damagedealtdisp.box3.text = '';
        damagedealtdisp.box4.text = '';
        genFlash1._alpha = 100;
        genFlash2._alpha = 100;
        _root.fcg_turn += 1;
        if (_root.fcg_turn < 10) {
          _root.fcg_time = 5.25;
        } else {
          if (_root.fcg_turn < 30) {
            _root.fcg_time = 4.25;
          } else {
            if (_root.fcg_turn < 70) {
              _root.fcg_time = 3.25;
            } else {
              _root.fcg_time = 3.25;
              _root.fcg_player_crec -= 1;
              _root.fcg_opponent_crec -= 1;
            }
          }
        }
        _root.fcg_player_time = 0.1;
        _root.fcg_opponent_time = 0.5;
        resetLog();
        addLog('Turn ' + _root.fcg_turn + ' started!');
        _root.fcg_player_curchp = _root.fcg_player_chp;
        _root.fcg_player_curmhp = _root.fcg_player_mhp;
        _root.fcg_opponent_curchp = _root.fcg_opponent_chp;
        _root.fcg_opponent_curmhp = _root.fcg_opponent_mhp;
        if (_root.fcg_player_crec != 0) {
          _root.fcg_player_chp += _root.fcg_player_crec;
          addLog('You recovered ' + _root.fcg_player_crec + ' HP! Your HP is now ' + _root.fcg_player_chp);
        }
        if (_root.fcg_player_mrec != 0) {
          _root.fcg_player_mhp += _root.fcg_player_mrec;
          addLog('Your monster recovered ' + _root.fcg_player_mrec + ' HP! Your monster\'s HP is now ' + _root.fcg_player_mhp);
        }
        if (_root.fcg_opponent_crec != 0) {
          _root.fcg_opponent_chp += _root.fcg_opponent_crec;
          addLog('Your opponent recovered ' + _root.fcg_opponent_crec + ' HP! Your opponent\'s HP is now ' + _root.fcg_opponent_chp);
        }
        if (_root.fcg_opponent_mrec != 0) {
          _root.fcg_opponent_mhp += _root.fcg_opponent_mrec;
          addLog('Your opponent\'s monster recovered ' + _root.fcg_opponent_mrec + ' HP! Your opponent\'s monster\'s HP is now ' + _root.fcg_opponent_mhp);
        }
        _root.player_damagedealtc += _root.fcg_player_catk;
        if (_root.fcg_player_mfreeze <= 0) {
          _root.player_damagedealtm += _root.fcg_player_matk;
          if (_root.fcg_player_mspecial == 'Poison') {
            _root.fcg_opponent_crec -= _root.fcg_player_mspecialpow;
            addLog('Your monster dealt ' + _root.fcg_player_mspecialpow + ' Poison damage to your opponent!');
          }
        }
        _root.opponent_damagedealtc += _root.fcg_opponent_catk;
        if (_root.fcg_opponent_mfreeze <= 0) {
          _root.opponent_damagedealtm += _root.fcg_opponent_matk;
          if (_root.fcg_opponent_mspecial == 'Poison') {
            _root.fcg_player_crec -= _root.fcg_opponent_mspecialpow;
            addLog('Your opponent\'s monster dealt ' + _root.fcg_opponent_mspecialpow + ' Poison damage to you!');
          }
        }
        _root.fcg_player_mfreeze -= 1;
        _root.fcg_opponent_mfreeze -= 1;
        if (_root.fcg_opponent_mspecial == 'Lure') {
          _root.player_damagedealtc -= _root.fcg_opponent_mdef;
          if (_root.player_damagedealtc > _root.fcg_opponent_mhp) {
            _root.player_damagedealtc -= _root.fcg_opponent_mhp;
            addLog('Your opponent\'s monster took ' + _root.fcg_opponent_mhp + ' damage (from you) for your opponent and died.');
            _root.fcg_opponent_mhp = 0;
          } else {
            if (_root.player_damagedealtc > 0) {
              _root.fcg_opponent_mhp -= _root.player_damagedealtc;
              addLog('Your opponent\'s monster took ' + _root.player_damagedealtc + ' damage (from you) for your opponent.');
              _root.player_damagedealtc = 0;
            }
          }
        }
        if (_root.fcg_opponent_mspecial == 'Lure' || _root.fcg_player_mspecial == 'MonKill') {
          _root.player_damagedealtm -= _root.fcg_opponent_mdef;
          if (_root.player_damagedealtm > _root.fcg_opponent_mhp) {
            _root.player_damagedealtm -= _root.fcg_opponent_mhp;
            addLog('Your opponent\'s monster took ' + _root.fcg_opponent_mhp + ' damage (from your monster) for your opponent and died.');
            _root.fcg_opponent_mhp = 0;
          } else {
            if (_root.player_damagedealtm > 0) {
              _root.fcg_opponent_mhp -= _root.player_damagedealtm;
              addLog('Your opponent\'s monster took ' + _root.player_damagedealtc + ' damage (from your monster) for your opponent.');
              _root.player_damagedealtm = 0;
            }
          }
        }
        _root.player_damagedealtc -= _root.fcg_opponent_cdef;
        if (_root.player_damagedealtc > 0) {
          _root.fcg_opponent_chp -= _root.player_damagedealtc;
          addLog('Your opponent took ' + _root.player_damagedealtc + ' damage (from you)!');
        }
        _root.player_damagedealtm -= _root.fcg_opponent_cdef;
        if (_root.player_damagedealtm > 0) {
          _root.fcg_opponent_chp -= _root.player_damagedealtm;
          addLog('Your opponent took ' + _root.player_damagedealtm + ' damage (from your monster)!');
        }
        if (_root.fcg_player_mspecial == 'Lure') {
          _root.opponent_damagedealtc -= _root.fcg_player_mdef;
          if (_root.opponent_damagedealtc > _root.fcg_player_mhp) {
            _root.opponent_damagedealtc -= _root.fcg_player_mhp;
            addLog('Your monster took ' + _root.fcg_player_mhp + ' damage (from your opponent) for you and died.');
            _root.fcg_player_mhp = 0;
          } else {
            if (_root.opponent_damagedealtc > 0) {
              _root.fcg_player_mhp -= _root.opponent_damagedealtc;
              addLog('Your monster took ' + _root.opponent_damagedealtm + ' damage (from your opponent) for you.');
              _root.opponent_damagedealtc = 0;
            }
          }
        }
        if (_root.fcg_player_mspecial == 'Lure' || _root.fcg_opponent_mspecial == 'MonKill') {
          _root.opponent_damagedealtm -= _root.fcg_player_mdef;
          if (_root.opponent_damagedealtm > _root.fcg_player_mhp) {
            _root.opponent_damagedealtm -= _root.fcg_player_mhp;
            addLog('Your monster took ' + _root.fcg_player_mhp + ' damage (from your opponent\'s monster) for you and died.');
            _root.fcg_player_mhp = 0;
          } else {
            if (_root.opponent_damagedealtm > 0) {
              _root.fcg_player_mhp -= _root.opponent_damagedealtm;
              addLog('Your monster took ' + _root.opponent_damagedealtm + ' damage (from your opponent\'s monster) for you.');
              _root.opponent_damagedealtm = 0;
            }
          }
        }
        _root.opponent_damagedealtc -= _root.fcg_player_cdef;
        if (_root.opponent_damagedealtc > 0) {
          _root.fcg_player_chp -= _root.opponent_damagedealtc;
          addLog('You took ' + _root.opponent_damagedealtc + ' damage (from your opponent)!');
        }
        _root.opponent_damagedealtm -= _root.fcg_player_cdef;
        if (_root.opponent_damagedealtm > 0) {
          _root.fcg_player_chp -= _root.opponent_damagedealtm;
          addLog('You took ' + _root.opponent_damagedealtm + ' damage (from your opponent\'s monster)!');
        }
        _root.fcgDamageDealt -= _root.fcg_opponent_chp - _root.fcg_opponent_curchp;
        if (_root.fcgDamageDealt < 0) {
          _root.fcgDamageDealt = 0;
        }
        damagedealtdisp.box1.text = _root.fcg_player_chp - _root.fcg_player_curchp;
        damagedealtdisp.box2.text = _root.fcg_player_mhp - _root.fcg_player_curmhp;
        damagedealtdisp.box3.text = _root.fcg_opponent_chp - _root.fcg_opponent_curchp;
        damagedealtdisp.box4.text = _root.fcg_opponent_mhp - _root.fcg_opponent_curmhp;
        i = 1;
        while (i <= 4) {
          if (damagedealtdisp['box' + i].text == 0) {
            damagedealtdisp['box' + i].text = '';
          }
          if (damagedealtdisp['box' + i].text > 0) {
            damagedealtdisp['box' + i].text = '+' + damagedealtdisp['box' + i].text;
          }
          ++i;
        }
        if (_root.fcg_player_mspecial == 'Generator' && _root.fcg_player_mquanta != 6) {
          _root['fcg_player_ene' + _root.fcg_player_mquanta] += _root.fcg_player_mspecialpow;
        }
        if (_root.fcg_opponent_mspecial == 'Generator' && _root.fcg_opponent_mquanta != 6) {
          _root['fcg_opponent_ene' + _root.fcg_opponent_mquanta] += _root.fcg_opponent_mspecialpow;
        }
        if (_root.fcg_player_mspecial == 'Growth') {
          _root.fcg_player_matk += _root.fcg_player_mspecialpow;
          _root.fcg_player_mdef += _root.fcg_player_mspecialpow;
        }
        if (_root.fcg_opponent_mspecial == 'Growth') {
          _root.fcg_opponent_matk += _root.fcg_opponent_mspecialpow;
          _root.fcg_opponent_mdef += _root.fcg_opponent_mspecialpow;
        }
        if (_root.fcg_player_mspecial == 'GrowthA') {
          _root.fcg_player_matk += _root.fcg_player_mspecialpow;
        }
        if (_root.fcg_opponent_mspecial == 'GrowthA') {
          _root.fcg_opponent_matk += _root.fcg_opponent_mspecialpow;
        }
        if (_root.fcg_player_mspecial == 'GrowthD') {
          _root.fcg_player_mdef += _root.fcg_player_mspecialpow;
        }
        if (_root.fcg_opponent_mspecial == 'GrowthD') {
          _root.fcg_opponent_mdef += _root.fcg_opponent_mspecialpow;
        }
        if (_root.fcg_player_mspecial == 'Transform' && _root.fcg_player_mhp > 0) {
          card = _root.fcg_player_mspecialpow;
          if (card == 0) {
            card = random(maxcard) + 1;
          }
          i = 1;
          while (i <= 6) {
            if (_root.cardList[card].type != 'Monster') {
              card = random(maxcard) + 1;
            }
            ++i;
          }
          if (_root.cardList[card].type != 'Monster') {
            card = 1 + random(2);
          }
          _root.fcg_player_mid = _root.cardList[card].id;
          _root.fcg_player_mquanta = _root.cardList[card].quanta;
          _root.fcg_player_mreq = _root.cardList[card].req;
          _root.fcg_player_mname = _root.cardList[card].name;
          _root.fcg_player_mdesc = _root.cardList[card].desc;
          _root.fcg_player_mupgraded = _root.cardList[card].upgraded;
          _root.fcg_player_mauthor = _root.cardList[card].author;
          _root.fcg_player_mspecial = _root.cardList[card].special;
          _root.fcg_player_mspecialpow = _root.cardList[card].specialpow;
          _root.fcg_player_special = _root.cardList[card].special;
          _root.fcg_player_specialpow = _root.cardList[card].specialpow;
          _root.fcg_player_mexist = 1;
          _root.fcg_player_mhp = _root.cardList[card].hp;
          _root.fcg_player_matk = _root.cardList[card].atk;
          _root.fcg_player_mdef = _root.cardList[card].def;
          _root.fcg_player_catk += _root.cardList[card].catk;
          _root.fcg_player_cdef += _root.cardList[card].cdef;
          _root.fcg_player_chp += _root.cardList[card].chp;
          _root.fcg_player_crec += _root.cardList[card].crec;
          _root.fcg_player_mrec = _root.cardList[card].mrec;
          _root.fcg_opponent_mhp += _root.cardList[card].omhp;
          _root.fcg_opponent_matk += _root.cardList[card].omatk;
          _root.fcg_opponent_mdef += _root.cardList[card].omdef;
          _root.fcg_opponent_catk += _root.cardList[card].ocatk;
          _root.fcg_opponent_cdef += _root.cardList[card].ocdef;
          _root.fcg_opponent_chp += _root.cardList[card].ochp;
          _root.fcg_opponent_crec += _root.cardList[card].ocrec;
          _root.fcg_opponent_mrec += _root.cardList[card].omrec;
          _root.player_damagedealtc += _root.cardList[card].inflict;
          _root.fcg_opponent_mfreeze += _root.cardList[card].freeze;
          f = 1;
          while (f <= _root.cardList[card].draw) {
            drawCard(0);
            ++f;
          }
          _root.fcg_player_pil1 += _root.cardList[card].pil1;
          _root.fcg_player_pil2 += _root.cardList[card].pil2;
          _root.fcg_player_pil3 += _root.cardList[card].pil3;
          _root.fcg_player_pil4 += _root.cardList[card].pil4;
          _root.fcg_player_pil5 += _root.cardList[card].pil5;
          _root.fcg_player_ene1 += _root.cardList[card].ene1;
          _root.fcg_player_ene2 += _root.cardList[card].ene2;
          _root.fcg_player_ene3 += _root.cardList[card].ene3;
          _root.fcg_player_ene4 += _root.cardList[card].ene4;
          _root.fcg_player_ene5 += _root.cardList[card].ene5;
          _root.fcg_opponent_pil1 += _root.cardList[card].opil1;
          _root.fcg_opponent_pil2 += _root.cardList[card].opil2;
          _root.fcg_opponent_pil3 += _root.cardList[card].opil3;
          _root.fcg_opponent_pil4 += _root.cardList[card].opil4;
          _root.fcg_opponent_pil5 += _root.cardList[card].opil5;
          _root.fcg_opponent_ene1 += _root.cardList[card].oene1;
          _root.fcg_opponent_ene2 += _root.cardList[card].oene2;
          _root.fcg_opponent_ene3 += _root.cardList[card].oene3;
          _root.fcg_opponent_ene4 += _root.cardList[card].oene4;
          _root.fcg_opponent_ene5 += _root.cardList[card].oene5;
        }
        if (_root.fcg_opponent_mspecial == 'Transform' && _root.fcg_opponent_mhp > 0) {
          card = _root.fcg_opponent_mspecialpow;
          if (card == 0) {
            card = random(maxcard) + 1;
          }
          if (card == 0) {
            card = random(maxcard) + 1;
          }
          i = 1;
          while (i <= 6) {
            if (_root.cardList[card].type != 'Monster') {
              card = random(maxcard) + 1;
            }
            ++i;
          }
          if (_root.cardList[card].type != 'Monster') {
            card = 1 + random(2);
          }
          _root.fcg_opponent_mid = _root.cardList[card].id;
          _root.fcg_opponent_mquanta = _root.cardList[card].quanta;
          _root.fcg_opponent_mreq = _root.cardList[card].req;
          _root.fcg_opponent_mname = _root.cardList[card].name;
          _root.fcg_opponent_mdesc = _root.cardList[card].desc;
          _root.fcg_opponent_mupgraded = _root.cardList[card].upgraded;
          _root.fcg_opponent_mauthor = _root.cardList[card].author;
          _root.fcg_opponent_mspecial = _root.cardList[card].special;
          _root.fcg_opponent_mspecialpow = _root.cardList[card].specialpow;
          _root.fcg_opponent_special = _root.cardList[card].special;
          _root.fcg_opponent_specialpow = _root.cardList[card].specialpow;
          _root.fcg_opponent_mexist = 1;
          _root.fcg_opponent_mhp = _root.cardList[card].hp;
          _root.fcg_opponent_matk = _root.cardList[card].atk;
          _root.fcg_opponent_mdef = _root.cardList[card].def;
          _root.fcg_opponent_catk += _root.cardList[card].catk;
          _root.fcg_opponent_cdef += _root.cardList[card].cdef;
          _root.fcg_opponent_chp += _root.cardList[card].chp;
          _root.fcg_opponent_crec += _root.cardList[card].crec;
          _root.fcg_opponent_mrec = _root.cardList[card].mrec;
          _root.fcg_player_mhp += _root.cardList[card].omhp;
          _root.fcg_player_matk += _root.cardList[card].omatk;
          _root.fcg_player_mdef += _root.cardList[card].omdef;
          _root.fcg_player_catk += _root.cardList[card].ocatk;
          _root.fcg_player_cdef += _root.cardList[card].ocdef;
          _root.fcg_player_chp += _root.cardList[card].ochp;
          _root.fcg_player_crec += _root.cardList[card].ocrec;
          _root.fcg_player_mrec += _root.cardList[card].omrec;
          _root.opponent_damagedealtc += _root.cardList[card].inflict;
          _root.fcg_player_mfreeze += _root.cardList[card].freeze;
          f = 1;
          while (f <= _root.cardList[card].draw) {
            drawCard(0);
            ++f;
          }
          _root.fcg_opponent_pil1 += _root.cardList[card].pil1;
          _root.fcg_opponent_pil2 += _root.cardList[card].pil2;
          _root.fcg_opponent_pil3 += _root.cardList[card].pil3;
          _root.fcg_opponent_pil4 += _root.cardList[card].pil4;
          _root.fcg_opponent_pil5 += _root.cardList[card].pil5;
          _root.fcg_opponent_ene1 += _root.cardList[card].ene1;
          _root.fcg_opponent_ene2 += _root.cardList[card].ene2;
          _root.fcg_opponent_ene3 += _root.cardList[card].ene3;
          _root.fcg_opponent_ene4 += _root.cardList[card].ene4;
          _root.fcg_opponent_ene5 += _root.cardList[card].ene5;
          _root.fcg_player_pil1 += _root.cardList[card].opil1;
          _root.fcg_player_pil2 += _root.cardList[card].opil2;
          _root.fcg_player_pil3 += _root.cardList[card].opil3;
          _root.fcg_player_pil4 += _root.cardList[card].opil4;
          _root.fcg_player_pil5 += _root.cardList[card].opil5;
          _root.fcg_player_ene1 += _root.cardList[card].oene1;
          _root.fcg_player_ene2 += _root.cardList[card].oene2;
          _root.fcg_player_ene3 += _root.cardList[card].oene3;
          _root.fcg_player_ene4 += _root.cardList[card].oene4;
          _root.fcg_player_ene5 += _root.cardList[card].oene5;
        }
        damagedealtdisp._alpha = 100;
        _root.fcg_opponent_killdelay += 2;
        _root.player_damagedealtc = 0;
        _root.opponent_damagedealtc = 0;
        _root.player_damagedealtm = 0;
        _root.opponent_damagedealtm = 0;
        xcardloc = 1;
        i = 1;
        while (i <= 6) {
          if (_root['exist_card' + xcardloc] == 1) {
            xcardloc += 1;
          }
          ++i;
        }
        if (xcardloc > 6 && _root.player_cardsLeft > 0) {
          _root.fcg_player_crec -= 1;
          addLog('Your hand is full. You took 1 poison damage.');
        }
        if (_root.player_cardsLeft <= 0) {
          _root.fcg_player_crec -= 1;
          addLog('Your decked out. You took 1 poison damage.');
        }
        _root.fullHandX = xcardloc;
        xcardloc = 7;
        i = 1;
        while (i <= 6) {
          if (_root['exist_card' + xcardloc] == 1) {
            xcardloc += 1;
          }
          ++i;
        }
        if (xcardloc > 12 && _root.opponent_cardsLeft > 0) {
          _root.fcg_opponent_crec -= 1;
          addLog('Your opponent\'s hand is full. Your opponent took 1 poison damage.');
        }
        if (_root.opponent_cardsLeft <= 0) {
          _root.fcg_opponent_crec -= 1;
          addLog('Your opponent decked out. Your opponent took 1 poison damage.');
        }
        i = 1;
        while (i <= 5) {
          _root['fcg_player_ene' + i] += _root['fcg_player_pil' + i];
          _root['fcg_opponent_ene' + i] += _root['fcg_opponent_pil' + i];
          ++i;
        }
        drawCard(0);
        drawCard_opponent(0);
        updateText();
      }

      holding = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      if (_root.fcg_opponentlevel == 5 && _root.fcg_challenged == true) {
        _root.power1Active = false;
        _root.power2Active = false;
        _root.power3Active = false;
        _root.power4Active = false;
        _root.power5Active = false;
        _root.power6Active = false;
        _root.power7Active = false;
        _root.power8Active = false;
      }
      _root.fullHandX = 0;
      if (_root.fcg_epic < 1) {
        _root.save.fcgPlay += 1;
      }
      userName1.text = _root.kongregate_username;
      userName2.text = 'Guest';
      _root.fcg_dep = 1;
      _root.fcg_player_mexist = 0;
      _root.fcg_opponent_mexist = 0;
      _root.fcg_opponent_killdelay = 0;
      _root.discards = 0;
      _root.forfeit = false;
      _root.atie = false;
      _root.fcgDamageDealt = 0;
      i = 1;
      while (i <= 12) {
        _root['exist_card' + i] = 0;
        ++i;
      }
      _root.fcg_player_catk = 0;
      if (_root.power3Active == true) {
        _root.fcg_player_catk += 5;
      }
      _root.fcg_player_cdef = 0;
      _root.fcg_player_chp = 80;
      if (_root.saveid == 25 && _root.fcg_opponentlevel == 10) {
        _root.fcg_player_chp = challengeHP;
      }
      if (_root.power2Active == true) {
        _root.fcg_player_chp += 20;
      }
      _root.fcg_player_crec = 0;
      _root.fcg_player_matk = 0;
      _root.fcg_player_mdef = 0;
      _root.fcg_player_mhp = 0;
      _root.fcg_player_mrec = 0;
      _root.fcg_player_mfreeze = 0;
      _root.fcg_player_mspecial = '';
      _root.fcg_opponent_catk = 0;
      _root.fcg_opponent_cdef = 0;
      _root.fcg_opponent_crec = 0;
      _root.fcg_opponent_chp = 80;
      if (_root.fcg_opponentlevel == 0) {
        _root.fcg_opponent_chp = 50;
      }
      if (_root.fcg_opponentlevel >= 7 || _root.fcg_epic >= 3) {
        _root.fcg_opponent_chp = 200;
      }
      if (_root.fcg_opponentlevel == 9) {
        _root.fcg_opponent_chp = 50 + 35 * (11 - _root.save.fcgLegendLife);
      }
      if (_root.fcg_epic >= 4) {
        _root.fcg_opponent_chp = 400;
      }
      chppenalty = 0;
      if (_root.fcg_opponentlevel != 5 && _root.fcg_epic < 1 && _root.fcg_opponentlevel != 9) {
        chppenalty = _root.save['fcgStreak' + _root.fcg_opponentlevel];
        if (chppenalty > 100) {
          chppenalty = 100;
        }
        if (_root.fcg_opponentlevel == 10) {
          chppenalty = _root.save['fcgStreak' + _root.fcg_opponentlevel] * 25;
          if (chppenalty > 800) {
            chppenalty = 800;
          }
        }
      }
      if (_root.fcg_opponentlevel == 5 && _root.fcg_challenged == false) {
        chppenalty = 45;
      } else {
        if (_root.fcg_opponentlevel == 5) {
          _root.discards += 10;
          _root.fcg_player_chp += 45;
        }
      }
      if (_root.fcg_opponentlevel == 8) {
        chppenalty = _root.save.fcgStreak8 * 10;
        if (chppenalty > 300) {
          chppenalty = 300;
        }
      }
      _root.fcg_opponent_chp += chppenalty;
      if (_root.saveid == 25 && _root.fcg_opponentlevel == 10) {
        if (_root.save.fcgChallenge5[enemy_deck] == 0 && enemy_deck != 69) {
          _root.fcg_opponent_chp = 120;
        } else {
          if (_root.save.fcgChallenge5[enemy_deck] == 1 || enemy_deck == 69) {
            _root.fcg_opponent_chp = 180;
          } else {
            _root.fcg_opponent_chp = 600;
          }
        }
      }
      _root.fcg_opponent_matk = 0;
      _root.fcg_opponent_mdef = 0;
      _root.fcg_opponent_mhp = 0;
      _root.fcg_opponent_mrec = 0;
      _root.fcg_opponent_mfreeze = 0;
      _root.fcg_opponent_mspecial = '';
      _root.player_damagedealtc = 0;
      _root.opponent_damagedealtc = 0;
      _root.player_damagedealtm = 0;
      _root.opponent_damagedealtm = 0;
      _root.fcg_player_ene6 = 99;
      _root.fcg_opponent_ene6 = 99;
      i = 1;
      while (i <= 5) {
        _root['fcg_player_pil' + i] = 1;
        _root['fcg_player_ene' + i] = 1;
        _root['fcg_opponent_pil' + i] = 1;
        _root['fcg_opponent_ene' + i] = 1;
        if (_root.power1Active == true) {
          _root['fcg_player_ene' + i] += 1;
        }
        if (_root.power5Active == true) {
          _root['fcg_player_pil' + i] += 1;
        }
        if (_root.fcg_opponentlevel >= 6 || _root.fcg_epic >= 2) {
          _root['fcg_opponent_pil' + i] = 2;
          _root['fcg_opponent_ene' + i] = 2;
        }
        if (_root.fcg_opponentlevel >= 7 || _root.fcg_epic >= 3) {
          _root['fcg_opponent_pil' + i] = 3;
          _root['fcg_opponent_ene' + i] = 3;
        }
        ++i;
      }
      _root.fcg_turn = 1;
      _root.fcg_time = 10;
      _root.fcg_player_time = 0;
      _root.fcg_opponent_time = 0;
      _root.player_totalcards = 0;
      _root.opponent_totalcards = 0;
      if (_root.enemy_randomdeck == true || isNaN(enemy_deck)) {
        enemy_deck = 1;
      }
      if (_root.enemy_randomdeck == false) {
        userName2.text = _root.deckList[enemy_deck].deckname;
      } else {
        userName2.text = '???';
      }
      if (_root.fcg_opponentlevel == 1) {
        userName2.text = 'Level 1';
      }
      if (_root.fcg_opponentlevel == 2) {
        userName2.text = 'Level 2';
      }
      if (_root.fcg_opponentlevel == 3) {
        userName2.text = 'Level 3';
      }
      if (_root.fcg_opponentlevel == 4) {
        userName2.text = 'Level 4';
      }
      if (_root.fcg_epic >= 1 || _root.fcg_opponentlevel == 5) {
        userName2.text = 'PvP';
      }
      if (_root.fcg_challenged == true) {
        userName2.text = 'Challenger';
      }
      playerDeckArray = [zeroItem];
      enemyDeckArray = [zeroItem];
      i = 1;
      while (i <= maxcard) {
        ac = _root.save.fcgDeck[i];
        if (ac == undefined || ac < 0) {
          ac = 0;
        }
        if (ac >= 1) {
          _root.player_totalcards += ac;
          k = 1;
          while (k <= ac) {
            playerDeckArray.push(i);
            if (_root.fcg_opponentlevel == 8) {
              enemyDeckArray.push(i);
              _root.opponent_totalcards += 1;
              enemyDeckArray.push(i);
              _root.opponent_totalcards += 1;
            }
            ++k;
          }
        }
        if (_root.fcg_opponentlevel != 8) {
          ac = _root.deckList[enemy_deck]['c' + i];
          if (_root.fcg_epic >= 1) {
            ac = _root['fcg_epic' + i];
          }
          if (_root.fcg_opponentlevel >= 6 || _root.fcg_epic >= 2) {
            ac *= 2;
          }
          if (ac == undefined || ac < 0) {
            ac = 0;
          }
          if (ac >= 1) {
            _root.opponent_totalcards += ac;
            k = 1;
            while (k <= ac) {
              if (_root.fcg_opponentlevel == 5 && Math.random() < 0.2) {
                enemyDeckArray.push(random(maxcard) + 1);
              } else {
                enemyDeckArray.push(i);
              }
              ++k;
            }
          }
          if (_root.fcg_opponentlevel == 3 || _root.fcg_opponentlevel == 4) {
            ac = _root.deckList[enemy_deckhyb]['c' + i];
            if (ac == undefined || ac < 0) {
              ac = 0;
            }
            if (ac >= 1) {
              _root.opponent_totalcards += ac;
              k = 1;
              while (k <= ac) {
                if (Math.random() < 0.25) {
                  _root.opponent_totalcards -= 1;
                } else {
                  if (_root.fcg_opponentlevel == 3 && Math.random() < 0.1) {
                    enemyDeckArray.push(Math.ceil((random(maxcard) + 1) / 2) * 2 - 1);
                  } else {
                    if (_root.fcg_opponentlevel == 4 && Math.random() < 0.1) {
                      enemyDeckArray.push(Math.ceil((random(maxcard) + 1) / 2) * 2);
                    } else {
                      if (_root.fcg_opponentlevel == 3 && Math.random() < 0.5) {
                        enemyDeckArray.push(i + 1);
                      } else {
                        enemyDeckArray.push(i);
                      }
                    }
                  }
                }
                ++k;
              }
            }
          }
        }
        ++i;
      }
      if (_root.fcg_opponentlevel == 8) {
        rMax = _root.save.fcgStreak8 + 5;
        if (rMax > 55) {
          rMax = 55;
        }
        k = 1;
        while (k <= rMax) {
          card = random(maxcard) + 1;
          if (Math.ceil(card / 2) != card / 2) {
            card += 1;
          }
          playerDeckArray.push(card);
          enemyDeckArray.push(card);
          enemyDeckArray.push(card);
          _root.player_totalcards += 1;
          _root.opponent_totalcards += 2;
          ++k;
        }
      }
      i = 1;
      while (i <= _root.player_totalcards) {
        j = random(_root.player_totalcards) + 1;
        playerDeckArray[0] = playerDeckArray[i];
        playerDeckArray[i] = playerDeckArray[j];
        playerDeckArray[j] = playerDeckArray[0];
        ++i;
      }
      i = 1;
      while (i <= _root.opponent_totalcards) {
        j = random(_root.opponent_totalcards) + 1;
        enemyDeckArray[0] = enemyDeckArray[i];
        enemyDeckArray[i] = enemyDeckArray[j];
        enemyDeckArray[j] = enemyDeckArray[0];
        ++i;
      }
      if (_root.save.fcgRandomDeck == true) {
        _root.player_totalcards = random(20) + 40;
      }
      if (_root.enemy_randomdeck == true) {
        _root.opponent_totalcards = random(20) + 40;
      }
      _root.player_cardsDrawn = 0;
      _root.player_cardsLeft = _root.player_totalcards;
      _root.opponent_cardsDrawn = 0;
      _root.opponent_cardsLeft = _root.opponent_totalcards;
      delay = 0;
      if (isNaN(_root.fps)) {
        _root.fps = 40;
      }
      z = 1;
      while (z <= 3) {
        drawCard(0);
        drawCard_opponent(0);
        ++z;
      }
      if (_root.power4Active == true) {
        drawCard(4);
      }
      if (_root.power6Active == true) {
        drawCard(5);
      }
      onEnterFrame = function () {
        i = 0;
        while (i <= 9) {
          if ((Key.isDown(48 + i) || Key.isDown(96 + i) || Key.isDown(223) && i == 0) && _root.optionsScreen._currentframe == 1) {
            holding[i] += 1;
            j = 0;
            while (j <= 9) {
              if (j != i) {
                holding[j] = 0;
              }
              ++j;
            }
          } else {
            holding[i] = 0;
          }
          ++i;
        }
        if (_root.saveid == 22) {
          _root.fcg_player_cdef = 0;
          _root.fcg_player_mdef = 0;
        }
        if (_root.fcg_player_time > -0.5 || _root.fcg_opponent_time > -0.5) {
          _root.fcg_time -= 1 / _root.fps;
        } else {
          _root.fcg_time -= _root.save.fcgSpeed / 10 / _root.fps;
        }
        _root.fcg_player_time -= 1 / _root.fps;
        _root.fcg_opponent_time -= 1 / _root.fps;
        if (_root.fcg_time <= 0) {
          nextTurn();
        }
        playerDeckText.text = 'Deck: ' + _root.player_cardsLeft + ' cards left';
        enemyDeckText.text = 'Deck: ' + _root.opponent_cardsLeft + ' cards left';
        if (_root.player_cardsLeft < 10) {
          playerDeckText.textColor = 16711680;
        }
        if (_root.opponent_cardsLeft < 10) {
          enemyDeckText.textColor = 16711680;
        }
        if (_root.player_cardsLeft <= 0) {
          playerDeckText.text = 'Decked out';
        }
        if (_root.opponent_cardsLeft <= 0) {
          enemyDeckText.text = 'Decked out';
        }
        turnText.text = 'Turn #' + _root.fcg_turn;
        timeText.text = Math.ceil(_root.fcg_time - 0.25);
        if (_root.save.fcgSpeed == 30) {
          speedText.text = '3.0x';
        } else {
          if (_root.save.fcgSpeed == 20) {
            speedText.text = '2.0x';
          } else {
            if (_root.save.fcgSpeed == 15) {
              speedText.text = '1.5x';
            } else {
              if (_root.save.fcgSpeed == 12) {
                speedText.text = '1.2x';
              } else {
                if (_root.save.fcgSpeed == 10) {
                  speedText.text = '1.0x';
                }
              }
            }
          }
        }
        delay += 1;
        if (delay > 2) {
          delay = 0;
          if (_root.fcg_player_time > -0.5 || _root.fcg_opponent_time > -0.5) {
            if (Math.random() < 3 / _root.fps) {
              summonCard(1337);
            }
          } else {
            if (Math.random() < 0.3 * _root.save.fcgSpeed / _root.fps) {
              summonCard(1337);
            }
          }
          if (_root.fcg_player_chp > 200) {
            _root.fcg_player_chp = 200;
            updateText();
          }
          if (_root.fcg_opponent_chp > 200 && _root.fcg_opponentlevel <= 6) {
            _root.fcg_opponent_chp = 200;
            updateText();
          }
          if (_root.fcg_opponent_chp > 300 && _root.fcg_opponentlevel <= 7) {
            _root.fcg_opponent_chp = 300;
            updateText();
          }
          if (_root.fcg_opponent_chp > 500 && _root.fcg_opponentlevel <= 9) {
            _root.fcg_opponent_chp = 500;
            updateText();
          }
          if (_root.fcg_opponent_chp > 999) {
            _root.fcg_opponent_chp = 999;
            updateText();
          }
          i = 1;
          while (i <= 5) {
            if (_root['fcg_player_pil' + i] > 99) {
              _root['fcg_player_pil' + i] = 99;
              updateText();
            }
            if (_root['fcg_player_ene' + i] > 99) {
              _root['fcg_player_ene' + i] = 99;
              updateText();
            }
            if (_root['fcg_opponent_pil' + i] > 99) {
              _root['fcg_opponent_pil' + i] = 99;
              updateText();
            }
            if (_root['fcg_opponent_ene' + i] > 99) {
              _root['fcg_opponent_ene' + i] = 99;
              updateText();
            }
            ++i;
          }
          if (_root.fcg_player_special != '' || _root.fcg_opponent_special != '') {
            if (_root.fcg_opponent_special == 'Generator') {
              _root.fcg_opponent_mspecial = 'Generator';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Generator') {
              _root.fcg_player_mspecial = 'Generator';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Poison') {
              _root.fcg_opponent_mspecial = 'Poison';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Poison') {
              _root.fcg_player_mspecial = 'Poison';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Growth') {
              _root.fcg_opponent_mspecial = 'Growth';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Growth') {
              _root.fcg_player_mspecial = 'Growth';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'GrowthA') {
              _root.fcg_opponent_mspecial = 'GrowthA';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'GrowthA') {
              _root.fcg_player_mspecial = 'GrowthA';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'GrowthD') {
              _root.fcg_opponent_mspecial = 'GrowthD';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'GrowthD') {
              _root.fcg_player_mspecial = 'GrowthD';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Transform') {
              _root.fcg_opponent_mspecial = 'Transform';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Transform') {
              _root.fcg_player_mspecial = 'Transform';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Mutate') {
              if (_root.fcg_opponent_mhp > 0) {
                _root.fcg_opponent_mhp = 0;
                _root.fcg_opponent_mspecial = 'Rebirth';
                _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
                _root.fcg_opponent_special = '';
                _root.fcg_opponent_specialpow = 0;
              }
            }
            if (_root.fcg_player_special == 'Mutate') {
              if (_root.fcg_player_mhp > 0) {
                _root.fcg_player_mhp = 0;
                _root.fcg_player_mspecial = 'Rebirth';
                _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
                _root.fcg_player_special = '';
                _root.fcg_player_specialpow = 0;
              }
            }
            if (_root.fcg_opponent_special == 'Rebirth') {
              if (_root.fcg_opponent_mhp > 0) {
                _root.fcg_opponent_mspecial = 'Rebirth';
                _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
                _root.fcg_opponent_special = '';
                _root.fcg_opponent_specialpow = 0;
              }
            }
            if (_root.fcg_player_special == 'Rebirth') {
              if (_root.fcg_player_mhp > 0) {
                _root.fcg_player_mspecial = 'Rebirth';
                _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
                _root.fcg_player_special = '';
                _root.fcg_player_specialpow = 0;
              }
            }
            if (_root.fcg_opponent_special == 'Lure') {
              _root.fcg_opponent_mspecial = 'Lure';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Lure') {
              _root.fcg_player_mspecial = 'Lure';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'MonKill') {
              _root.fcg_opponent_mspecial = 'MonKill';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'MonKill') {
              _root.fcg_player_mspecial = 'MonKill';
              _root.fcg_player_mspecialpow = _root.fcg_player_specialpow;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'MonKill') {
              _root.fcg_opponent_mspecial = 'MonKill';
              _root.fcg_opponent_mspecialpow = _root.fcg_opponent_specialpow;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'NoSkill') {
              _root.fcg_opponent_mspecial = '';
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'NoSkill') {
              _root.fcg_player_mspecial = '';
              _root.fcg_opponent_special = '';
              _root.fcg_player_specialpow = 0;
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Sacrifice') {
              _root.fcg_opponent_chp += _root.fcg_opponent_mhp;
              _root.fcg_opponent_catk += _root.fcg_opponent_matk;
              _root.fcg_opponent_cdef += _root.fcg_opponent_mdef;
              _root.fcg_opponent_mhp = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Sacrifice') {
              _root.fcg_player_chp += _root.fcg_player_mhp;
              _root.fcg_player_catk += _root.fcg_player_matk;
              _root.fcg_player_cdef += _root.fcg_player_mdef;
              _root.fcg_player_mhp = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Destroy') {
              _root.fcg_player_mhp = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Destroy') {
              _root.fcg_opponent_mhp = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Absorb') {
              _root.fcg_opponent_chp += _root.fcg_player_mhp;
              _root.fcg_player_mhp = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Absorb') {
              _root.fcg_player_chp += _root.fcg_opponent_mhp;
              _root.fcg_opponent_mhp = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Unfreeze') {
              _root.fcg_opponent_mfreeze = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Unfreeze') {
              _root.fcg_player_mfreeze = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Antidote') {
              _root.fcg_opponent_crec = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Antidote') {
              _root.fcg_player_crec = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'Zombify') {
              if (_root.fcg_player_crec > 0) {
                _root.fcg_player_crec -= Math.floor(_root.fcg_player_crec / 2 + 0.001);
              }
              _root.fcg_player_crec -= 2;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'Zombify') {
              if (_root.fcg_opponent_crec > 0) {
                _root.fcg_opponent_crec -= Math.floor(_root.fcg_opponent_crec / 2 + 0.001);
              }
              _root.fcg_opponent_crec -= 2;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
            if (_root.fcg_opponent_special == 'NoRegen') {
              _root.fcg_player_crec = 0;
              _root.fcg_opponent_special = '';
              _root.fcg_opponent_specialpow = 0;
            }
            if (_root.fcg_player_special == 'NoRegen') {
              _root.fcg_opponent_crec = 0;
              _root.fcg_player_special = '';
              _root.fcg_player_specialpow = 0;
            }
          }
          if (_root.fcg_player_mhp <= 0) {
            if (_root.fcg_player_mspecial == 'Rebirth') {
              card = _root.fcg_player_mspecialpow;
              if (card == 0) {
                card = random(maxcard) + 1;
              }
              i = 1;
              while (i <= 6) {
                if (_root.cardList[card].type != 'Monster') {
                  card = random(maxcard) + 1;
                }
                ++i;
              }
              if (_root.cardList[card].type != 'Monster') {
                card = 1 + random(2);
              }
              _root.fcg_player_mid = _root.cardList[card].id;
              _root.fcg_player_mquanta = _root.cardList[card].quanta;
              _root.fcg_player_mreq = _root.cardList[card].req;
              _root.fcg_player_mname = _root.cardList[card].name;
              _root.fcg_player_mdesc = _root.cardList[card].desc;
              _root.fcg_player_mupgraded = _root.cardList[card].upgraded;
              _root.fcg_player_mauthor = _root.cardList[card].author;
              _root.fcg_player_mspecial = _root.cardList[card].special;
              _root.fcg_player_mspecialpow = _root.cardList[card].specialpow;
              _root.fcg_player_special = _root.cardList[card].special;
              _root.fcg_player_specialpow = _root.cardList[card].specialpow;
              _root.fcg_player_mexist = 1;
              _root.fcg_player_mhp = _root.cardList[card].hp;
              _root.fcg_player_matk = _root.cardList[card].atk;
              _root.fcg_player_mdef = _root.cardList[card].def;
              _root.fcg_player_catk += _root.cardList[card].catk;
              _root.fcg_player_cdef += _root.cardList[card].cdef;
              _root.fcg_player_chp += _root.cardList[card].chp;
              _root.fcg_player_crec += _root.cardList[card].crec;
              _root.fcg_player_mrec = _root.cardList[card].mrec;
              _root.fcg_opponent_mhp += _root.cardList[card].omhp;
              _root.fcg_opponent_matk += _root.cardList[card].omatk;
              _root.fcg_opponent_mdef += _root.cardList[card].omdef;
              _root.fcg_opponent_catk += _root.cardList[card].ocatk;
              _root.fcg_opponent_cdef += _root.cardList[card].ocdef;
              _root.fcg_opponent_chp += _root.cardList[card].ochp;
              _root.fcg_opponent_crec += _root.cardList[card].ocrec;
              _root.fcg_opponent_mrec += _root.cardList[card].omrec;
              _root.player_damagedealtc += _root.cardList[card].inflict;
              _root.fcg_opponent_mfreeze += _root.cardList[card].freeze;
              f = 1;
              while (f <= _root.cardList[card].draw) {
                drawCard(0);
                ++f;
              }
              _root.fcg_player_pil1 += _root.cardList[card].pil1;
              _root.fcg_player_pil2 += _root.cardList[card].pil2;
              _root.fcg_player_pil3 += _root.cardList[card].pil3;
              _root.fcg_player_pil4 += _root.cardList[card].pil4;
              _root.fcg_player_pil5 += _root.cardList[card].pil5;
              _root.fcg_player_ene1 += _root.cardList[card].ene1;
              _root.fcg_player_ene2 += _root.cardList[card].ene2;
              _root.fcg_player_ene3 += _root.cardList[card].ene3;
              _root.fcg_player_ene4 += _root.cardList[card].ene4;
              _root.fcg_player_ene5 += _root.cardList[card].ene5;
              _root.fcg_opponent_pil1 += _root.cardList[card].opil1;
              _root.fcg_opponent_pil2 += _root.cardList[card].opil2;
              _root.fcg_opponent_pil3 += _root.cardList[card].opil3;
              _root.fcg_opponent_pil4 += _root.cardList[card].opil4;
              _root.fcg_opponent_pil5 += _root.cardList[card].opil5;
              _root.fcg_opponent_ene1 += _root.cardList[card].oene1;
              _root.fcg_opponent_ene2 += _root.cardList[card].oene2;
              _root.fcg_opponent_ene3 += _root.cardList[card].oene3;
              _root.fcg_opponent_ene4 += _root.cardList[card].oene4;
              _root.fcg_opponent_ene5 += _root.cardList[card].oene5;
            } else {
              _root.fcg_player_mexist = 0;
              _root.fcg_player_mname = 'Not Existing';
              _root.fcg_player_mhp = 0;
              _root.fcg_player_matk = 0;
              _root.fcg_player_mdef = 0;
              _root.fcg_player_mrec = 0;
              _root.fcg_player_mfreeze = 0;
              _root.fcg_player_mspecial = '';
              _root.fcg_player_mspecialpow = 0;
            }
          }
          if (_root.fcg_opponent_mhp <= 0) {
            if (_root.fcg_opponent_mspecial == 'Rebirth') {
              card = _root.fcg_opponent_mspecialpow;
              if (card == 0) {
                card = random(maxcard) + 1;
              }
              i = 1;
              while (i <= 6) {
                if (_root.cardList[card].type != 'Monster') {
                  card = random(maxcard) + 1;
                }
                ++i;
              }
              if (_root.cardList[card].type != 'Monster') {
                card = 1 + random(2);
              }
              _root.fcg_opponent_mid = _root.cardList[card].id;
              _root.fcg_opponent_mquanta = _root.cardList[card].quanta;
              _root.fcg_opponent_mreq = _root.cardList[card].req;
              _root.fcg_opponent_mname = _root.cardList[card].name;
              _root.fcg_opponent_mdesc = _root.cardList[card].desc;
              _root.fcg_opponent_mupgraded = _root.cardList[card].upgraded;
              _root.fcg_opponent_mauthor = _root.cardList[card].author;
              _root.fcg_opponent_mspecial = _root.cardList[card].special;
              _root.fcg_opponent_mspecialpow = _root.cardList[card].specialpow;
              _root.fcg_opponent_special = _root.cardList[card].special;
              _root.fcg_opponent_specialpow = _root.cardList[card].specialpow;
              _root.fcg_opponent_mexist = 1;
              _root.fcg_opponent_mhp = _root.cardList[card].hp;
              _root.fcg_opponent_matk = _root.cardList[card].atk;
              _root.fcg_opponent_mdef = _root.cardList[card].def;
              _root.fcg_opponent_catk += _root.cardList[card].catk;
              _root.fcg_opponent_cdef += _root.cardList[card].cdef;
              _root.fcg_opponent_chp += _root.cardList[card].chp;
              _root.fcg_opponent_crec += _root.cardList[card].crec;
              _root.fcg_opponent_mrec = _root.cardList[card].mrec;
              _root.fcg_player_mhp += _root.cardList[card].omhp;
              _root.fcg_player_matk += _root.cardList[card].omatk;
              _root.fcg_player_mdef += _root.cardList[card].omdef;
              _root.fcg_player_catk += _root.cardList[card].ocatk;
              _root.fcg_player_cdef += _root.cardList[card].ocdef;
              _root.fcg_player_chp += _root.cardList[card].ochp;
              _root.fcg_player_crec += _root.cardList[card].ocrec;
              _root.fcg_player_mrec += _root.cardList[card].omrec;
              _root.opponent_damagedealtc += _root.cardList[card].inflict;
              _root.fcg_player_mfreeze += _root.cardList[card].freeze;
              f = 1;
              while (f <= _root.cardList[card].draw) {
                drawCard(0);
                ++f;
              }
              _root.fcg_opponent_pil1 += _root.cardList[card].pil1;
              _root.fcg_opponent_pil2 += _root.cardList[card].pil2;
              _root.fcg_opponent_pil3 += _root.cardList[card].pil3;
              _root.fcg_opponent_pil4 += _root.cardList[card].pil4;
              _root.fcg_opponent_pil5 += _root.cardList[card].pil5;
              _root.fcg_opponent_ene1 += _root.cardList[card].ene1;
              _root.fcg_opponent_ene2 += _root.cardList[card].ene2;
              _root.fcg_opponent_ene3 += _root.cardList[card].ene3;
              _root.fcg_opponent_ene4 += _root.cardList[card].ene4;
              _root.fcg_opponent_ene5 += _root.cardList[card].ene5;
              _root.fcg_player_pil1 += _root.cardList[card].opil1;
              _root.fcg_player_pil2 += _root.cardList[card].opil2;
              _root.fcg_player_pil3 += _root.cardList[card].opil3;
              _root.fcg_player_pil4 += _root.cardList[card].opil4;
              _root.fcg_player_pil5 += _root.cardList[card].opil5;
              _root.fcg_player_ene1 += _root.cardList[card].oene1;
              _root.fcg_player_ene2 += _root.cardList[card].oene2;
              _root.fcg_player_ene3 += _root.cardList[card].oene3;
              _root.fcg_player_ene4 += _root.cardList[card].oene4;
              _root.fcg_player_ene5 += _root.cardList[card].oene5;
            } else {
              _root.fcg_opponent_mexist = 0;
              _root.fcg_opponent_mname = 'Not Existing';
              _root.fcg_opponent_mhp = 0;
              _root.fcg_opponent_matk = 0;
              _root.fcg_opponent_mdef = 0;
              _root.fcg_opponent_mrec = 0;
              _root.fcg_opponent_mfreeze = 0;
              _root.fcg_opponent_mspecial = '';
              _root.fcg_opponent_mspecialpow = 0;
            }
          }
          i = 1;
          while (i <= 5) {
            if (_root['fcg_player_pil' + i] < 1) {
              _root['fcg_player_pil' + i] = 1;
            }
            if (_root['fcg_opponent_pil' + i] < 1) {
              _root['fcg_opponent_pil' + i] = 1;
            }
            if (_root['fcg_player_ene' + i] < 0) {
              _root['fcg_player_ene' + i] = 0;
            }
            if (_root['fcg_opponent_ene' + i] < 0) {
              _root['fcg_opponent_ene' + i] = 0;
            }
            ++i;
          }
          if (_root.fcg_opponent_mdef <= 0) {
            _root.fcg_opponent_mdef = 0;
          }
          if (_root.fcg_opponent_matk <= 0) {
            _root.fcg_opponent_matk = 0;
          }
          if (_root.fcg_opponent_mfreeze <= 0) {
            _root.fcg_opponent_mfreeze = 0;
          }
          if (_root.fcg_opponent_cdef <= 0) {
            _root.fcg_opponent_cdef = 0;
          }
          if (_root.fcg_opponent_catk <= 0) {
            _root.fcg_opponent_catk = 0;
          }
          if (_root.fcg_opponentlevel == 5 && Math.random() < 0.001 / _root.fcg_opponent_chp) {
            _root.fcg_opponent_chp = 0;
            gotoAndStop(4);
          }
          if (_root.fcg_opponent_chp <= 0 && _root.fcg_player_chp > 0) {
            _root.fcg_opponent_chp = 0;
            gotoAndStop(4);
          } else {
            if (_root.fcg_opponent_chp > 0 && _root.fcg_player_chp <= 0) {
              _root.fcg_player_chp = 0;
              gotoAndStop(5);
            } else {
              if (_root.fcg_opponent_chp <= 0 && _root.fcg_player_chp <= 0) {
                _root.fcg_opponent_chp = 0;
                _root.fcg_player_chp = 0;
                _root.atie = true;
                gotoAndStop(5);
              }
            }
          }
          if (_root.fcg_player_mdef <= 0) {
            _root.fcg_player_mdef = 0;
          }
          if (_root.fcg_player_matk <= 0) {
            _root.fcg_player_matk = 0;
          }
          if (_root.fcg_player_mfreeze <= 0) {
            _root.fcg_player_mfreeze = 0;
          }
          if (_root.fcg_player_cdef <= 0) {
            _root.fcg_player_cdef = 0;
          }
          if (_root.fcg_player_catk <= 0) {
            _root.fcg_player_catk = 0;
          }
          if (Key.isDown(71)) {
            _root.forfeit = true;
            _root.fcg_player_chp = 0;
          }
        }
        if (_root.fcg_player_mname == 'Not Existing') {
          _root.fcg_player_mhp = 0;
        }
        if (_root.fcg_opponent_mname == 'Not Existing') {
          _root.fcg_opponent_mhp = 0;
        }
        if (_root.fcg_opponent_killdelay > 2) {
          _root.fcg_opponent_killdelay = 2;
        }
        if (genFlash1._alpha > 60) {
          genFlash1._alpha -= 1;
          genFlash2._alpha -= 1;
        }
      };

      updateText();
    }

    instance of movieClip 1914  {

      onClipEvent (load) {
        textBox.textColor = 16777215;
        glow1 = new flash.filters.GlowFilter(0, 70, 5, 5, 3, 1, false, false);
        textBox.filters = [glow1];
      }

      onClipEvent (enterFrame) {
        hp = _root.fcg_opponent_chp;
        attack = _root.fcg_opponent_catk;
        defense = _root.fcg_opponent_cdef;
        numberdisp = 'HP: ' + hp + ' | ' + attack + ' / ' + defense;
        insideBar.xscale = hp;
      }
    }

    instance of movieClip 1914  {

      onClipEvent (load) {
        textBox.textColor = 16777215;
        glow1 = new flash.filters.GlowFilter(0, 70, 5, 5, 3, 1, false, false);
        textBox.filters = [glow1];
      }

      onClipEvent (enterFrame) {
        hp = _root.fcg_player_chp;
        attack = _root.fcg_player_catk;
        defense = _root.fcg_player_cdef;
        numberdisp = 'HP: ' + hp + ' | ' + attack + ' / ' + defense;
        insideBar.xscale = hp;
        insideBar._x = (100 - insideBar._xscale) * 2;
      }
    }

    instance of movieClip 1915  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        delay = 3;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 2) {
          delay = 0;
          val = _root.fcg_player_crec;
          if (val > 0) {
            healDisp.text = val;
            gotoAndStop(1);
          } else {
            if (val < 0) {
              healDisp.text = -val;
              gotoAndStop(2);
            } else {
              gotoAndStop(3);
            }
          }
        }
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        delay = 3;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 2) {
          delay = 0;
          val = _root.fcg_opponent_crec;
          if (val > 0) {
            healDisp.text = val;
            gotoAndStop(1);
          } else {
            if (val < 0) {
              healDisp.text = -val;
              gotoAndStop(2);
            } else {
              gotoAndStop(3);
            }
          }
        }
      }
    }

    instance fcg_player_recentsummon of movieClip 1883  {

      onClipEvent (load) {
        delay = 0;
        _alpha = 0;
        stop();
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 2) {
          if (_alpha > 0) {
            _alpha = _alpha - 2;
          }
          delay = 0;
          bg.gotoAndStop(_root.fcg_player_quanta);
          image.gotoAndStop(_root.fcg_player_id);
          rareupgraded.gotoAndStop(_root.fcg_player_upgraded + 1);
          triangle.gotoAndStop(_root.fcg_player_quanta);
          reqBox.text = _root.fcg_player_req;
          nameBox.text = _root.fcg_player_name;
          typeBox.text = _root.fcg_player_type;
          copyRight.text = _root.fcg_player_author;
          if (_root.fcg_player_type == 'Monster') {
            hpBox.text = 'HP: ' + _root.fcg_player_mhp;
            typeBox.text = _root.fcg_player_matk + ' / ' + _root.fcg_player_mdef;
          } else {
            hpBox.text = '';
          }
          descBox.text = _root.fcg_player_desc;
        }
      }
    }

    instance fcg_opponent_recentsummon of movieClip 1883  {

      onClipEvent (load) {
        delay = 0;
        _alpha = 0;
        stop();
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (delay > 2) {
          if (_alpha > 0) {
            _alpha = _alpha - 2;
          }
          delay = 0;
          bg.gotoAndStop(_root.fcg_opponent_quanta);
          image.gotoAndStop(_root.fcg_opponent_id);
          rareupgraded.gotoAndStop(_root.fcg_opponent_upgraded + 1);
          triangle.gotoAndStop(_root.fcg_opponent_quanta);
          reqBox.text = _root.fcg_opponent_req;
          nameBox.text = _root.fcg_opponent_name;
          typeBox.text = _root.fcg_opponent_type;
          copyRight.text = _root.fcg_opponent_author;
          if (_root.fcg_opponent_type == 'Monster') {
            hpBox.text = 'HP: ' + _root.fcg_opponent_mhp;
            typeBox.text = _root.fcg_opponent_matk + ' / ' + _root.fcg_opponent_mdef;
          } else {
            hpBox.text = '';
          }
          descBox.text = _root.fcg_opponent_desc;
        }
      }
    }

    instance of movieClip 1883  {

      onClipEvent (load) {
        gotoAndStop(2);
      }

      onClipEvent (enterFrame) {
        if (_root.fcg_player_mhp > 0) {
          gotoAndStop(1);
          bg.gotoAndStop(_root.fcg_player_mquanta);
          image.gotoAndStop(_root.fcg_player_mid);
          rareupgraded.gotoAndStop(_root.fcg_player_mupgraded + 1);
          triangle.gotoAndStop(_root.fcg_player_mquanta);
          reqBox.text = _root.fcg_player_mreq;
          nameBox.text = _root.fcg_player_mname;
          hpBox.text = 'HP: ' + _root.fcg_player_mhp;
          typeBox.text = _root.fcg_player_matk + ' / ' + _root.fcg_player_mdef;
          descBox.text = _root.fcg_player_mdesc;
          copyRight.text = _root.fcg_player_mauthor;
        } else {
          gotoAndStop(2);
        }
        if (_parent.holding[0] == 1 && _root.fcg_player_mhp > 0) {
          _root.fcg_player_mhp = 0;
          if (_root.fcg_time < 15) {
            _root.fcg_time += 1;
          }
          _root.fcg_player_time = 0.5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.epicdesc = 'Click to destroy monster';
      }

      onClipEvent (rollOut, dragOut) {
        _root.epicdesc = '';
      }

      onClipEvent (release) {
        _root.fcg_player_mhp = 0;
        if (_root.fcg_time < 15) {
          _root.fcg_time += 1;
        }
        _root.fcg_player_time = 0.5;
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        val = _root.fcg_player_mrec;
        if (val > 0) {
          healDisp.text = val;
          gotoAndStop(1);
        } else {
          if (val < 0) {
            healDisp.text = -1 * val;
            gotoAndStop(2);
          } else {
            gotoAndStop(3);
          }
        }
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        val = _root.fcg_player_mfreeze;
        if (val > 0) {
          gotoAndStop(4);
          healDisp.text = val;
        } else {
          gotoAndStop(3);
        }
      }
    }

    instance of movieClip 1883  {

      onClipEvent (load) {
        gotoAndStop(2);
      }

      onClipEvent (enterFrame) {
        delay = 0;
        if (_root.fcg_opponent_mhp > 0) {
          gotoAndStop(1);
          bg.gotoAndStop(_root.fcg_opponent_mquanta);
          image.gotoAndStop(_root.fcg_opponent_mid);
          rareupgraded.gotoAndStop(_root.fcg_opponent_mupgraded + 1);
          triangle.gotoAndStop(_root.fcg_opponent_mquanta);
          reqBox.text = _root.fcg_opponent_mreq;
          nameBox.text = _root.fcg_opponent_mname;
          hpBox.text = 'HP: ' + _root.fcg_opponent_mhp;
          typeBox.text = _root.fcg_opponent_matk + ' / ' + _root.fcg_opponent_mdef;
          descBox.text = _root.fcg_opponent_mdesc;
          copyRight.text = _root.fcg_opponent_mauthor;
        } else {
          gotoAndStop(2);
        }
      }

      onClipEvent (rollOver) {
        if (Key.isDown(32)) {
          _root.epicdesc = 'Enemy\'s Monster';
        }
      }

      onClipEvent (rollOut) {
        _root.epicdesc = '';
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        val = _root.fcg_opponent_mrec;
        if (val > 0) {
          healDisp.text = val;
          gotoAndStop(1);
        } else {
          if (val < 0) {
            healDisp.text = -1 * val;
            gotoAndStop(2);
          } else {
            gotoAndStop(3);
          }
        }
      }
    }

    instance of movieClip 1921  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        val = _root.fcg_opponent_mfreeze;
        if (val > 0) {
          gotoAndStop(4);
          healDisp.text = val;
        } else {
          gotoAndStop(3);
        }
      }
    }

    instance damagedealtdisp of movieClip 1956  {

      onClipEvent (load) {
        delay = 0;
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (_alpha == 100) {
          _y = 0;
        }
        if (delay > 1) {
          delay = 0;
          if (_alpha > 0) {
            _y = _y - 0.2;
            _alpha = _alpha - 1;
          }
        }
      }
    }

    instance of movieClip 1966  {

      onClipEvent (enterFrame) {
        type = 1;
        txt = '';
        val = _root.fcg_player_mspecial;
        valx = _root.fcg_player_mspecialpow;
        if (val == 'Growth') {
          type = 2;
          txt = 'Growth: ' + valx;
        }
        if (val == 'GrowthA') {
          type = 3;
          txt = 'Attack Growth: ' + valx;
        }
        if (val == 'GrowthD') {
          type = 4;
          txt = 'Defense Growth: ' + valx;
        }
        if (val == 'Generator') {
          type = 5;
          txt = 'Generator: ' + valx;
        }
        if (val == 'Transform') {
          type = 6;
          txt = 'Transform';
        }
        if (val == 'Rebirth') {
          type = 7;
          txt = 'Rebirth';
        }
        if (val == 'Lure') {
          type = 8;
          txt = 'Lure';
        }
        if (val == 'MonKill') {
          type = 9;
          txt = 'Kill Monsters';
        }
        if (val == 'Poison') {
          type = 10;
          txt = 'Venom: ' + valx;
        }
        gotoAndStop(type);
      }

      onClipEvent (rollOver, dragOver) {
        _root.epicdesc = txt;
      }

      onClipEvent (rollOut, dragOut) {
        _root.epicdesc = '';
      }
    }

    instance of movieClip 1966  {

      onClipEvent (enterFrame) {
        type = 1;
        txt = '';
        val = _root.fcg_opponent_mspecial;
        valx = _root.fcg_opponent_mspecialpow;
        if (val == 'Growth') {
          type = 2;
          txt = 'Growth: ' + valx;
        }
        if (val == 'GrowthA') {
          type = 3;
          txt = 'Attack Growth: ' + valx;
        }
        if (val == 'GrowthD') {
          type = 4;
          txt = 'Defense Growth: ' + valx;
        }
        if (val == 'Generator') {
          type = 5;
          txt = 'Generator: ' + valx;
        }
        if (val == 'Transform') {
          type = 6;
          txt = 'Transform';
        }
        if (val == 'Rebirth') {
          type = 7;
          txt = 'Rebirth';
        }
        if (val == 'Lure') {
          type = 8;
          txt = 'Lure';
        }
        if (val == 'MonKill') {
          type = 9;
          txt = 'Kill Monsters';
        }
        if (val == 'Poison') {
          type = 10;
          txt = 'Venom: ' + valx;
        }
        gotoAndStop(type);
      }

      onClipEvent (rollOver, dragOver) {
        _root.epicdesc = txt;
      }

      onClipEvent (rollOut, dragOut) {
        _root.epicdesc = '';
      }
    }

    instance of movieClip 1970  {

      onClipEvent (enterFrame) {
        if (_root.player_cardsLeft < 1) {
          gotoAndStop(3);
        } else {
          if (_root.fullHandX > 6) {
            gotoAndStop(2);
          } else {
            gotoAndStop(1);
          }
        }
      }
    }

    instance of movieClip 1976  {

      onClipEvent (release, keyPress '<Left>') {
        if (_root.save.fcgSpeed == 12) {
          _root.save.fcgSpeed = 10;
        } else {
          if (_root.save.fcgSpeed == 15) {
            _root.save.fcgSpeed = 12;
          } else {
            if (_root.save.fcgSpeed == 20) {
              _root.save.fcgSpeed = 15;
            } else {
              if (_root.save.fcgSpeed == 30) {
                _root.save.fcgSpeed = 20;
              }
            }
          }
        }
      }
    }

    instance of movieClip 1976  {

      onClipEvent (release, keyPress '<Right>') {
        if (_root.save.fcgSpeed == 10) {
          _root.save.fcgSpeed = 12;
        } else {
          if (_root.save.fcgSpeed == 12) {
            _root.save.fcgSpeed = 15;
          } else {
            if (_root.save.fcgSpeed == 15) {
              _root.save.fcgSpeed = 20;
            } else {
              if (_root.save.fcgSpeed == 20) {
                _root.save.fcgSpeed = 30;
              }
            }
          }
        }
      }
    }

    instance fcgLog of movieClip 1980  {

      onClipEvent (load) {
        _x = 0;
        targetX = 0;
        logText.text = '';
      }

      onClipEvent (enterFrame) {
        _x = _x + (targetX - _x) / 2;
        if (_root._xmouse <= 10 || Key.isDown(17)) {
          targetX = 390;
        } else {
          targetX = 0;
        }
      }
    }

    frame 4 {
      _root.house.gotoAndStop(12);
    }

    frame 4 {
      _root.epicdesc = '';
      onEnterFrame = null;
      _root.fcg_dep = 2;
      _root.fcg_targety = 0;
      if (_root.fcg_epic < 1) {
        _root.save.fcgStreak += 1;
        if (_root.fcg_challenged == false) {
          _root.save['fcgStreak' + _root.fcg_opponentlevel] += 1;
          if (_root.save['fcgMaxStreak' + _root.fcg_opponentlevel] < _root.save['fcgStreak' + _root.fcg_opponentlevel]) {
            _root.save['fcgMaxStreak' + _root.fcg_opponentlevel] = _root.save['fcgStreak' + _root.fcg_opponentlevel];
          }
          _root.save['fcgLevel' + _root.fcg_opponentlevel] += 1;
        }
        _root.save.fcgWin += 1;
        if (_root.fcg_opponentlevel <= 4) {
          _root.gainCyborgPoint(Math.floor(2 + _root.fcg_opponentlevel * 2));
        }
        if (_root.fcg_opponentlevel == 5) {
          _root.gainCyborgPoint(30);
        }
        if (_root.fcg_opponentlevel == 6) {
          _root.gainCyborgPoint(30);
        }
        if (_root.fcg_opponentlevel == 7) {
          _root.gainCyborgPoint(100);
        }
        if (_root.fcg_opponentlevel == 8) {
          _root.gainCyborgPoint(100);
        }
        if (_root.fcg_opponentlevel == 9) {
          _root.gainCyborgPoint(200);
        }
        if (_root.fcg_opponentlevel == 10) {
          _root.gainCyborgPoint(200);
        }
        if (_root.save.questType == 'Win') {
          if (_root.save.questSubtype == 'Any') {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 2' && _root.fcg_opponentlevel >= 2) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 3' && _root.fcg_opponentlevel >= 3) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 4' && _root.fcg_opponentlevel >= 4) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 6' && _root.fcg_opponentlevel >= 6) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 7' && _root.fcg_opponentlevel >= 7) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 8' && _root.fcg_opponentlevel >= 8) {
            _root.save.questCount += 1;
          }
          if (_root.save.questSubtype == 'Level 10' && _root.fcg_opponentlevel >= 10) {
            _root.save.questCount += 1;
          }
        }
      }
      target = 1;
      if (_root.fcg_opponentlevel == 9) {
        _root.save.fcgLegendLife -= 1;
        target = 10 - _root.save.fcgLegendLife;
        if (_root.save.fcgLegendLife <= 0) {
          _root.save.fcgLegendCount += 1;
          target = 10;
          _root.gainWhiteCoin(75);
        } else {
          _root.gainWhiteCoin(25);
        }
      }
      _root.fcg_reward1a = target;
      _root.fcg_reward1b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 1000 * target;
      _root.fcg_reward1c = Math.ceil(target * 25);
      _root.fcg_reward1d = Math.ceil(target * 100);
      if (target == 10 && _root.saveid < 10) {
        _root.fcg_reward1b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 100000;
        _root.fcg_reward1c = 1337;
        _root.fcg_reward1d = 5000;
      }
      if (enemy_deck == 69) {
        _root.fcg_reward1b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 50000;
        _root.fcg_reward1c = 1337;
        _root.fcg_reward1d = 5000;
        _root.gainWhiteCoin(50);
      }
      if (_root.fcg_opponentlevel == 10 && _root.saveid == 25) {
        _root.save.fcgChallenge5[enemy_deck] += 1;
        if (_root.save.fcgLevel10 == 79) {
          _root.save.fcgSeriousDeck = 69;
        }
      }
      target = _root.save['fcgStreak' + _root.fcg_opponentlevel];
      if (_root.fcg_opponentlevel >= 6 && target > 100) {
        target = 100;
      } else {
        if (target > 50) {
          target = 50;
        }
      }
      _root.fcg_reward2a = target;
      _root.fcg_reward2b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 50 * target;
      _root.fcg_reward2c = Math.ceil(target * 1);
      _root.fcg_reward2d = Math.ceil(target * 4);
      if (_root.fcg_opponentlevel >= 10) {
        _root.fcg_reward2a = target;
        _root.fcg_reward2b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 500 * target;
        _root.fcg_reward2c = Math.ceil(target * 10);
        _root.fcg_reward2d = Math.ceil(target * 40);
      }
      target = _root.fcg_opponentlevel;
      _root.fcg_reward3a = target;
      if (_root.fcg_opponentlevel == 5) {
        target = 8;
      }
      if (_root.fcg_opponentlevel == 6) {
        target = 6;
        _root.gainWhiteCoin(1);
      }
      if (_root.fcg_opponentlevel == 7) {
        target = 15;
        _root.gainWhiteCoin(3);
      }
      if (_root.fcg_opponentlevel == 8) {
        target = 20;
        _root.gainWhiteCoin(5);
      }
      if (_root.fcg_opponentlevel == 9) {
        target = 50;
      }
      if (_root.fcg_opponentlevel == 10) {
        target = 30;
        if (_root.save.fcgStreak10 >= 5 && _root.save.fcgStreak10 % 5 == 0 && _root.saveid != 25) {
          _root.save.fcgSeriousDeck = 69;
        }
        _root.gainWhiteCoin(10);
      }
      _root.fcg_reward3b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 1000 * target;
      _root.fcg_reward3c = Math.ceil(target * 25);
      _root.fcg_reward3d = Math.ceil(target * 100);
      i = 1;
      while (i <= _root.todayEvent) {
        yy = _root.clock_year % 10;
        mm = _root.clock_month;
        dd = _root.clock_date;
        if (_root.eventList[yy][mm][dd][i] == 'Receive Event Tokens by winning in TukkunFCG') {
          _root.gainEventToken(target);
        }
        ++i;
      }
      target = 50 - _root.fcg_turn;
      if (target < 0) {
        target = 0;
      }
      _root.fcg_reward4a = target;
      _root.fcg_reward4b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 40 * target;
      _root.fcg_reward4c = Math.ceil(target * 0.5);
      _root.fcg_reward4d = Math.ceil(target * 1);
      target = _root.fcg_player_chp;
      _root.fcg_reward5a = target;
      _root.fcg_reward5b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 20 * target;
      _root.fcg_reward5c = Math.ceil(target * 0.5);
      _root.fcg_reward5d = Math.ceil(target * 1);
      target = _root.fcgDamageDealt;
      _root.fcg_reward6a = target;
      _root.fcg_reward6b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 20 * target;
      _root.fcg_reward6c = Math.ceil(target * 0.5);
      _root.fcg_reward6d = Math.floor(target * 1);
      target = _root.save.fcgLevel;
      _root.fcg_reward7a = target;
      _root.fcg_reward7b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b) * target * 0.02);
      _root.fcg_reward7c = Math.ceil((_root.fcg_reward1c + _root.fcg_reward2c + _root.fcg_reward3c + _root.fcg_reward4c + _root.fcg_reward5c + _root.fcg_reward6c) * target * 0.002);
      _root.fcg_reward7d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d) * target * 0.002);
      target = 0;
      if (_root.save.powerUserTime > 0 && _root.save.banPenalty[9] == 1) {
        target = 3;
      } else {
        if (_root.save.powerUserTime > 0) {
          target = 2;
        } else {
          if (_root.save.banPenalty[9] == 1) {
            target = 1;
          }
        }
      }
      _root.fcg_reward8a = target;
      if (target == 3) {
        _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.95);
        _root.fcg_reward8c = 0;
        _root.fcg_reward8d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d + _root.fcg_reward7d) * 1);
      } else {
        if (target == 2) {
          _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.5);
          _root.fcg_reward8c = 0;
          _root.fcg_reward8d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d + _root.fcg_reward7d) * 1);
        } else {
          if (target == 1) {
            _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.3);
            _root.fcg_reward8c = 0;
            _root.fcg_reward8d = 0;
          } else {
            _root.fcg_reward8b = 0;
            _root.fcg_reward8c = 0;
            _root.fcg_reward8d = 0;
          }
        }
      }
      target = _root.save.petStat[6];
      _root.fcg_reward9a = target;
      _root.fcg_reward9b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.002 * target);
      _root.fcg_reward9c = Math.ceil(target * 0);
      _root.fcg_reward9d = Math.ceil(target * 0);
      target = _root.discards;
      _root.fcg_reward10a = target;
      _root.fcg_reward10b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * -50 * target;
      _root.fcg_reward10c = Math.ceil(target * 1) * -1;
      _root.fcg_reward10d = Math.ceil(target * 2) * -1;
      _root.fcg_rewardt1 = 0;
      _root.fcg_rewardt2 = 0;
      _root.fcg_rewardt3 = 0;
      i = 1;
      while (i <= 10) {
        _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * (1 + _root.curCareerLevel[8] * 0.005));
        if (_root.save.permaBanPenalty[20] == 3) {
          _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 3);
        } else {
          if (_root.save.permaBanPenalty[20] == 2) {
            _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 2.2);
          } else {
            if (_root.save.permaBanPenalty[20] == 1) {
              _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 1.8);
            }
          }
        }
        if (_root.power7Active == true) {
          _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 2);
        }
        if (_root.save.careerLevel[8] >= 100) {
          _root['fcg_reward' + i + 'd'] = Math.floor(_root['fcg_reward' + i + 'd'] * 1.5);
        }
        if (_root.power8Active == true && i == 8) {
          _root.fcg_reward8d += 400;
        }
        _root.fcg_rewardt1 += _root['fcg_reward' + i + 'b'];
        _root.fcg_rewardt2 += _root['fcg_reward' + i + 'c'];
        _root.fcg_rewardt3 += _root['fcg_reward' + i + 'd'];
        ++i;
      }
      if (_root.fcg_rewardt1 > 99999999999.0) {
        _root.fcg_rewardt1 = 99999999999.0;
      }
      if (_root.fcg_rewardt1 < 0) {
        _root.fcg_rewardt1 = 0;
      }
      if (_root.fcg_rewardt2 < 0) {
        _root.fcg_rewardt2 = 0;
      }
      if (_root.fcg_rewardt3 < 0) {
        _root.fcg_rewardt3 = 0;
      }
      if (_root.fcg_epic >= 1) {
        _root.fcg_rewardt1 = 0;
        _root.fcg_rewardt2 = 0;
        _root.fcg_rewardt3 = 0;
      }
      _root.gainEXP(_root.fcg_rewardt1);
      _root.save.fcgExp += _root.fcg_rewardt2;
      _root.save.fcgCash += _root.fcg_rewardt3;
      _root.gainBlueCoin(Math.floor((_root.fcg_rewardt2 / 2) * (1 + _root.curCareerLevel[8] * 0.01)));
      _root.gainCareerEXP(8, Math.floor(500 + _root.fcg_rewardt2 * 15), true);
      _root.dispNews(105, 'Epic win! (+' + _root.withComma(_root.fcg_rewardt1) + ' EXP)');
      if (_root.saveid == 25 && _root.save.fcgLevel10 == 80) {
        _root.clearChallenge();
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release, keyPress '<Escape>') {
        _root.fcg_targety = -50;
        _parent.gotoAndStop(2);
      }

      onClipEvent (keyPress '<Space>') {
        _root.fcg_targety = -50;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 2028  {

      onClipEvent (load) {
        targetx = 38.5;
      }

      onClipEvent (enterFrame) {
        diff = targetx - _x;
        _x = _x + diff / 20;
      }
    }

    frame 5 {
      _root.house.gotoAndStop(12);
    }

    frame 5 {
      _root.epicdesc = '';
      onEnterFrame = null;
      _root.fcg_dep = 2;
      _root.fcg_targety = 0;
      if (_root.fcg_epic < 1) {
        _root.save.fcgStreak = 0;
        if (_root.fcg_challenged == false) {
          _root.save['fcgStreak' + _root.fcg_opponentlevel] = 0;
        }
        _root.save.fcgLose += 1;
      }
      target = 1;
      _root.fcg_reward1a = target;
      _root.fcg_reward1b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 500 * target;
      _root.fcg_reward1c = Math.floor(target * 5);
      _root.fcg_reward1d = Math.floor(target * 10);
      if (_root.forfeit == true) {
        _root.fcg_reward1b = 0;
        _root.fcg_reward1c = 0;
        _root.fcg_reward1d = 0;
      }
      if (_root.atie == true) {
        _root.fcg_reward1b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 1000 * target;
        _root.fcg_reward1c = Math.floor(target * 15);
        _root.fcg_reward1d = Math.floor(target * 30);
      }
      target = 0;
      _root.fcg_reward2a = 0;
      _root.fcg_reward2b = 0;
      _root.fcg_reward2c = 0;
      _root.fcg_reward2d = 0;
      target = 0;
      if (_root.atie == true) {
        target = _root.fcg_opponentlevel;
      }
      _root.fcg_reward3a = target;
      if (_root.atie == true) {
        if (_root.fcg_opponentlevel == 5) {
          target = 8;
        }
        if (_root.fcg_opponentlevel == 6) {
          target = 8;
        }
        if (_root.fcg_opponentlevel == 7) {
          target = 15;
        }
        if (_root.fcg_opponentlevel == 8) {
          target = 20;
        }
        if (_root.fcg_opponentlevel == 9) {
          target = 50;
        }
        if (_root.fcg_opponentlevel == 10) {
          target = 30;
          if (_root.save.fcgStreak10 >= 5 && _root.save.fcgStreak10 % 5 == 0) {
            _root.save.fcgSeriousDeck = 52;
          }
        }
      }
      _root.fcg_reward3b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 500 * target;
      _root.fcg_reward3c = Math.floor(target * 5);
      _root.fcg_reward3d = Math.floor(target * 10);
      target = 0;
      _root.fcg_reward4a = 0;
      _root.fcg_reward4b = 0;
      _root.fcg_reward4c = 0;
      _root.fcg_reward4d = 0;
      target = 0;
      _root.fcg_reward5a = 0;
      _root.fcg_reward5b = 0;
      _root.fcg_reward5c = 0;
      _root.fcg_reward5d = 0;
      target = _root.fcgDamageDealt;
      _root.fcg_reward6a = target;
      _root.fcg_reward6b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * 20 * target;
      _root.fcg_reward6c = Math.ceil(target * 0.25);
      _root.fcg_reward6d = Math.floor(target * 0.25);
      target = _root.save.fcgLevel;
      _root.fcg_reward7a = target;
      _root.fcg_reward7b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b) * target * 0.02);
      _root.fcg_reward7c = Math.ceil((_root.fcg_reward1c + _root.fcg_reward2c + _root.fcg_reward3c + _root.fcg_reward4c + _root.fcg_reward5c + _root.fcg_reward6c) * target * 0.002);
      _root.fcg_reward7d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d) * target * 0.002);
      target = 0;
      if (_root.save.powerUserTime > 0 && _root.save.banPenalty[9] == 1) {
        target = 3;
      } else {
        if (_root.save.powerUserTime > 0) {
          target = 2;
        } else {
          if (_root.save.banPenalty[9] == 1) {
            target = 1;
          }
        }
      }
      _root.fcg_reward8a = target;
      if (target == 3) {
        _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.95);
        _root.fcg_reward8c = 0;
        _root.fcg_reward8d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d + _root.fcg_reward7d) * 1);
      } else {
        if (target == 2) {
          _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.5);
          _root.fcg_reward8c = 0;
          _root.fcg_reward8d = Math.ceil((_root.fcg_reward1d + _root.fcg_reward2d + _root.fcg_reward3d + _root.fcg_reward4d + _root.fcg_reward5d + _root.fcg_reward6d + _root.fcg_reward7d) * 1);
        } else {
          if (target == 1) {
            _root.fcg_reward8b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.3);
            _root.fcg_reward8c = 0;
            _root.fcg_reward8d = 0;
          } else {
            _root.fcg_reward8b = 0;
            _root.fcg_reward8c = 0;
            _root.fcg_reward8d = 0;
          }
        }
      }
      target = _root.save.petStat[6];
      _root.fcg_reward9a = target;
      _root.fcg_reward9b = Math.ceil((_root.fcg_reward1b + _root.fcg_reward2b + _root.fcg_reward3b + _root.fcg_reward4b + _root.fcg_reward5b + _root.fcg_reward6b + _root.fcg_reward7b) * 0.002 * target);
      _root.fcg_reward9c = Math.ceil(target * 0);
      _root.fcg_reward9d = Math.ceil(target * 0);
      target = _root.discards;
      if (_root.forfeit == true) {
        target += 99;
      }
      _root.fcg_reward10a = target;
      _root.fcg_reward10b = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * -50 * target;
      _root.fcg_reward10c = Math.ceil(target * 1) * -1;
      _root.fcg_reward10d = Math.ceil(target * 2) * -1;
      _root.fcg_rewardt1 = 0;
      _root.fcg_rewardt2 = 0;
      _root.fcg_rewardt3 = 0;
      if (_root.fcg_separate == true) {
        i = 1;
        while (i <= 10) {
          _root['fcg_reward' + i + 'b'] = 0;
          ++i;
        }
      }
      i = 1;
      while (i <= 10) {
        _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * (1 + _root.curCareerLevel[8] * 0.005));
        if (_root.save.permaBanPenalty[20] == 3) {
          _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 3);
        } else {
          if (_root.save.permaBanPenalty[20] == 2) {
            _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 2.2);
          } else {
            if (_root.save.permaBanPenalty[20] == 1) {
              _root['fcg_reward' + i + 'b'] = Math.floor(_root['fcg_reward' + i + 'b'] * 1.8);
            }
          }
        }
        _root.fcg_rewardt1 += _root['fcg_reward' + i + 'b'];
        _root.fcg_rewardt2 += _root['fcg_reward' + i + 'c'];
        _root.fcg_rewardt3 += _root['fcg_reward' + i + 'd'];
        ++i;
      }
      if (_root.fcg_rewardt1 < 0) {
        _root.fcg_rewardt1 = 0;
      }
      if (_root.fcg_rewardt2 < 0) {
        _root.fcg_rewardt2 = 0;
      }
      if (_root.fcg_rewardt3 < 0) {
        _root.fcg_rewardt3 = 0;
      }
      if (_root.fcg_epic >= 1) {
        _root.fcg_rewardt1 = 0;
        _root.fcg_rewardt2 = 0;
      }
      _root.gainEXP(_root.fcg_rewardt1);
      _root.save.fcgExp += _root.fcg_rewardt2;
      _root.save.fcgCash += _root.fcg_rewardt3;
      _root.gainCareerEXP(8, Math.floor(_root.fcg_rewardt2 * 15), true);
      _root.dispNews(105, 'Epic lose! (+' + _root.withComma(_root.fcg_rewardt1) + ' EXP)');
    }

    frame 6 {
      function sortCards(sortType) {
        cardcount = 0;
        i = 1;
        while (i <= maxcard) {
          _root['cardx_' + i] = 0;
          ++i;
        }
        if (sortType == 1) {
          k = 1;
          while (k <= 5) {
            i = 1;
            while (i <= maxcard) {
              if (_root.cardList[i].quanta == k && _root.cardList[i].type == 'Monster') {
                cardcount += 1;
                _root['cardx_' + cardcount] = i;
              }
              ++i;
            }
            i = 1;
            while (i <= maxcard) {
              if (_root.cardList[i].quanta == k && _root.cardList[i].type != 'Monster') {
                cardcount += 1;
                _root['cardx_' + cardcount] = i;
              }
              ++i;
            }
            ++k;
          }
        } else {
          if (sortType == 2) {
            k = 1;
            while (k <= 5) {
              l = 0;
              while (l <= 40) {
                i = 1;
                while (i <= maxcard) {
                  if (_root.cardList[i].quanta == k && _root.cardList[i].req == l) {
                    cardcount += 1;
                    _root['cardx_' + cardcount] = i;
                  }
                  ++i;
                }
                ++l;
              }
              ++k;
            }
          } else {
            if (sortType == 3) {
              k = 1;
              while (k <= 5) {
                i = 1;
                while (i <= maxcard) {
                  if (_root.cardList[i].quanta == k && _root.cardList[i].type == 'Monster') {
                    cardcount += 1;
                    _root['cardx_' + cardcount] = i;
                  }
                  ++i;
                }
                ++k;
              }
              k = 1;
              while (k <= 5) {
                i = 1;
                while (i <= maxcard) {
                  if (_root.cardList[i].quanta == k && _root.cardList[i].type != 'Monster') {
                    cardcount += 1;
                    _root['cardx_' + cardcount] = i;
                  }
                  ++i;
                }
                ++k;
              }
            } else {
              if (sortType == 4) {
                l = 0;
                while (l <= 40) {
                  k = 1;
                  while (k <= 5) {
                    i = 1;
                    while (i <= maxcard) {
                      if (_root.cardList[i].quanta == k && _root.cardList[i].req == l) {
                        cardcount += 1;
                        _root['cardx_' + cardcount] = i;
                      }
                      ++i;
                    }
                    ++k;
                  }
                  ++l;
                }
              } else {
                if (sortType == 5) {
                  k = 50;
                  while (k <= 5000) {
                    i = 1;
                    while (i <= maxcard) {
                      if (_root.cardList[i].cost == k) {
                        cardcount += 1;
                        _root['cardx_' + cardcount] = i;
                      }
                      ++i;
                    }
                    k += 25;
                  }
                  k = 10000;
                  while (k <= 30000) {
                    i = 1;
                    while (i <= maxcard) {
                      if (_root.cardList[i].cost == k) {
                        cardcount += 1;
                        _root['cardx_' + cardcount] = i;
                      }
                      ++i;
                    }
                    k += 10000;
                  }
                  i = 1;
                  while (i <= maxcard) {
                    if (_root.cardList[i].cost == Infinity) {
                      cardcount += 1;
                      _root['cardx_' + cardcount] = i;
                    }
                    ++i;
                  }
                } else {
                  if (sortType == 6) {
                    minCard = 0;
                    minText = '';
                    sel = new Array();
                    i = 1;
                    while (i <= maxcard) {
                      sel[i] = false;
                      ++i;
                    }
                    while (minCard != -1) {
                      minCard = -1;
                      minText = '';
                      i = 1;
                      while (i <= maxcard) {
                        if (sel[i] != true && _root.cardList[i].name < minText) {
                          minCard = i;
                          minText = _root.cardList[i].name;
                        }
                        ++i;
                      }
                      if (minCard != -1) {
                        cardcount += 1;
                        _root['cardx_' + cardcount] = minCard;
                        sel[minCard] = true;
                      }
                    }
                  } else {
                    if (sortType == 9) {
                      i = 1;
                      while (i <= maxcard) {
                        cardcount += 1;
                        _root['cardx_' + cardcount] = i;
                        ++i;
                      }
                    } else {
                      if (sortType == 7) {
                        i = 1;
                        while (i <= maxcard) {
                          if (_root.save.fcgDeck[i] > 0) {
                            cardcount += 1;
                            _root['cardx_' + cardcount] = i;
                          }
                          ++i;
                        }
                        i = 1;
                        while (i <= maxcard) {
                          if (_root.save.fcgDeck[i] <= 0) {
                            cardcount += 1;
                            _root['cardx_' + cardcount] = i;
                          }
                          ++i;
                        }
                      } else {
                        if (sortType == 8) {
                          i = 1;
                          while (i <= maxcard) {
                            if (_root.save.fcgOwned[i] > 0) {
                              cardcount += 1;
                              _root['cardx_' + cardcount] = i;
                            }
                            ++i;
                          }
                          i = 1;
                          while (i <= maxcard) {
                            if (_root.save.fcgOwned[i] <= 0) {
                              cardcount += 1;
                              _root['cardx_' + cardcount] = i;
                            }
                            ++i;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      _root.bazaarpage = 1;
      _root.fcg_dep = 1;
      delay = 40;
      i = 1;
      while (i <= maxcard) {
        if (_root.save.fcgOwned[i] > 100) {
          _root.save.fcgOwned[i] = 100;
        }
        ++i;
      }
      sortCards(1);
      _root.sorttype = 1;
      onEnterFrame = function () {
        delay += 1;
        if (delay > 40) {
          delay = 0;
          _root.deckcodetukkun = '';
          if (_root.sorttype == 7) {
            sortCards(7);
          }
          tempCard = 0;
          myDeckString = '';
          i = 1;
          while (i <= maxcard) {
            if (_root.save.fcgDeck[i] > 0) {
              if (tempCard == 0) {
                tempCard = 1;
                myDeckString += _root.save.fcgDeck[i] + ',' + i;
              } else {
                myDeckString += ',' + _root.save.fcgDeck[i] + ',' + i;
              }
            }
            ++i;
          }
          myDeckArray = myDeckString.split(',');
          myDeckArray2 = myDeckString.replace(',', '.');
          _root.deckcodetukkun += 'PvP / Deck Load Code: \n' + myDeckArray2;
          _root.deckcodetukkun += '\n\nDeck List:';
          i = 1;
          while (i <= maxcard) {
            if (_root.save.fcgDeck[i] > 0) {
              if (_root.cardList[i].upgraded == 0) {
                _root.deckcodetukkun += '\n' + _root.save.fcgDeck[i] + ' ' + _root.cardList[i].name;
              }
              if (_root.cardList[i].upgraded == 1) {
                _root.deckcodetukkun += '\n' + _root.save.fcgDeck[i] + ' (Upgraded) ' + _root.cardList[i].name;
              }
              if (_root.cardList[i].upgraded == 2) {
                _root.deckcodetukkun += '\n' + _root.save.fcgDeck[i] + ' (Rare) ' + _root.cardList[i].name;
              }
              if (_root.cardList[i].upgraded == 3) {
                _root.deckcodetukkun += '\n' + _root.save.fcgDeck[i] + ' (Rare/Upgraded) ' + _root.cardList[i].name;
              }
            }
            ++i;
          }
          _root.deckcodetukkun += '\n\nGame Script:';
          _root.deckcodetukkun += '\naddNewDeck (\'' + _root.kongregate_username + '\', [' + myDeckArray + '])';
        }
        cid.text = _root.save.fcgTotalCards;
        fcgpt.text = _root.withComma(_root.save.fcgCash);
      };

    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 1;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 7;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 8;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        System.setClipboard('<pre>' + _root.deckcodetukkun + '</pre>');
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckLoader.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 4;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 2;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 5;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 3;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (load) {
        type = 6;
      }

      onClipEvent (enterFrame) {
        if (_root.sorttype == type) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _root.sorttype = type;
        _parent.sortCards(type);
      }
    }

    instance deckLoader of movieClip 2079  {

      onClipEvent (load) {
        _x = 0;
      }
    }

    frame 7 {
      onEnterFrame = null;
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckCodeInput.replace(' ', '');
        if (_parent.deckCodeInput.indexOf('.') != -1) {
          tempDeckArray = _parent.deckCodeInput.split('.');
          myDeckArray = new Array();
          i = 0;
          while (i <= tempDeckArray.length - 1) {
            if (tempDeckArray[i] > 100) {
              tempDeckArray[i] = 100;
            }
            if (isNaN(tempDeckArray[i])) {
              tempDeckArray[i] = 0;
              _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
              validSoFar = 0;
            }
            j = 1;
            while (j <= tempDeckArray[i]) {
              myDeckArray.push(tempDeckArray[i + 1]);
              ++j;
            }
            i += 2;
          }
        } else {
          myDeckArray = _parent.deckCodeInput.split(',');
        }
        _parent.errorText.text = '';
        validSoFar = 1;
        planDeck = new Array();
        i = 1;
        while (i <= 400) {
          planDeck[i] = 0;
          ++i;
        }
        if (myDeckArray.length > 24 && myDeckArray.length <= 100) {
          i = 0;
          while (i <= myDeckArray.length - 1) {
            planDeck[myDeckArray[i]] += 1;
            if (_root.cardList[myDeckArray[i]].upgraded == 0) {
              cardName = _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 1) {
              cardName = '(Upgraded) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 2) {
              cardName = '(Rare) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 3) {
              cardName = '(Rare/Upgraded) ' + _root.cardList[i].name;
            }
            if (Math.ceil(myDeckArray[i] / 2) != myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] * 1 + 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (Math.ceil(myDeckArray[i] / 2) == myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] - 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (myDeckArray[i] > _parent.maxcard || myDeckArray[i] < 1) {
              _parent.errorText.text += '\nThis deck contains a non-existent card.';
              validSoFar = 0;
            }
            if (isNaN(myDeckArray[i])) {
              _parent.errorText.text += '\nInvalid deck.';
              validSoFar = 0;
            }
            ++i;
          }
        } else {
          _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
          validSoFar = 0;
        }
        if (validSoFar == 1) {
          i = 1;
          while (i <= 400) {
            _root['fcg_epic' + i] = planDeck[i];
            ++i;
          }
          _root.enemy_randomdeck = false;
          _root.fcg_opponentlevel = 7;
          _root.fcg_epic = 3;
          _parent.gotoAndStop(3);
        }
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckCodeInput.replace(' ', '');
        if (_parent.deckCodeInput.indexOf('.') != -1) {
          tempDeckArray = _parent.deckCodeInput.split('.');
          myDeckArray = new Array();
          i = 0;
          while (i <= tempDeckArray.length - 1) {
            if (tempDeckArray[i] > 100) {
              tempDeckArray[i] = 100;
            }
            if (isNaN(tempDeckArray[i])) {
              tempDeckArray[i] = 0;
              _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
              validSoFar = 0;
            }
            j = 1;
            while (j <= tempDeckArray[i]) {
              myDeckArray.push(tempDeckArray[i + 1]);
              ++j;
            }
            i += 2;
          }
        } else {
          myDeckArray = _parent.deckCodeInput.split(',');
        }
        _parent.errorText.text = '';
        validSoFar = 1;
        planDeck = new Array();
        i = 1;
        while (i <= 400) {
          planDeck[i] = 0;
          ++i;
        }
        if (myDeckArray.length > 24 && myDeckArray.length <= 100) {
          i = 0;
          while (i <= myDeckArray.length - 1) {
            planDeck[myDeckArray[i]] += 1;
            if (_root.cardList[myDeckArray[i]].upgraded == 0) {
              cardName = _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 1) {
              cardName = '(Upgraded) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 2) {
              cardName = '(Rare) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 3) {
              cardName = '(Rare/Upgraded) ' + _root.cardList[i].name;
            }
            if (Math.ceil(myDeckArray[i] / 2) != myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] * 1 + 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (Math.ceil(myDeckArray[i] / 2) == myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] - 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (myDeckArray[i] > _parent.maxcard || myDeckArray[i] < 1) {
              _parent.errorText.text += '\nThis deck contains a non-existent card.';
              validSoFar = 0;
            }
            if (isNaN(myDeckArray[i])) {
              _parent.errorText.text += '\nInvalid deck.';
              validSoFar = 0;
            }
            ++i;
          }
        } else {
          _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
          validSoFar = 0;
        }
        if (validSoFar == 1) {
          i = 1;
          while (i <= 400) {
            _root['fcg_epic' + i] = planDeck[i];
            ++i;
          }
          _root.enemy_randomdeck = false;
          _root.fcg_opponentlevel = 6;
          _root.fcg_epic = 2;
          _parent.gotoAndStop(3);
        }
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckCodeInput.replace(' ', '');
        if (_parent.deckCodeInput.indexOf('.') != -1) {
          tempDeckArray = _parent.deckCodeInput.split('.');
          myDeckArray = new Array();
          i = 0;
          while (i <= tempDeckArray.length - 1) {
            if (tempDeckArray[i] > 100) {
              tempDeckArray[i] = 100;
            }
            if (isNaN(tempDeckArray[i])) {
              tempDeckArray[i] = 0;
              _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
              validSoFar = 0;
            }
            j = 1;
            while (j <= tempDeckArray[i]) {
              myDeckArray.push(tempDeckArray[i + 1]);
              ++j;
            }
            i += 2;
          }
        } else {
          myDeckArray = _parent.deckCodeInput.split(',');
        }
        _parent.errorText.text = '';
        validSoFar = 1;
        planDeck = new Array();
        i = 1;
        while (i <= 400) {
          planDeck[i] = 0;
          ++i;
        }
        if (myDeckArray.length > 24 && myDeckArray.length <= 100) {
          i = 0;
          while (i <= myDeckArray.length - 1) {
            planDeck[myDeckArray[i]] += 1;
            if (_root.cardList[myDeckArray[i]].upgraded == 0) {
              cardName = _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 1) {
              cardName = '(Upgraded) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 2) {
              cardName = '(Rare) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 3) {
              cardName = '(Rare/Upgraded) ' + _root.cardList[i].name;
            }
            if (Math.ceil(myDeckArray[i] / 2) != myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] * 1 + 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (Math.ceil(myDeckArray[i] / 2) == myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] - 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (myDeckArray[i] > _parent.maxcard || myDeckArray[i] < 1) {
              _parent.errorText.text += '\nThis deck contains a non-existent card.';
              validSoFar = 0;
            }
            if (isNaN(myDeckArray[i])) {
              _parent.errorText.text += '\nInvalid deck.';
              validSoFar = 0;
            }
            ++i;
          }
        } else {
          _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
          validSoFar = 0;
        }
        if (validSoFar == 1) {
          i = 1;
          while (i <= 400) {
            _root['fcg_epic' + i] = planDeck[i];
            ++i;
          }
          _root.enemy_randomdeck = false;
          _root.fcg_opponentlevel = 1;
          _root.fcg_epic = 1;
          _parent.gotoAndStop(3);
        }
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.deckCodeInput.replace(' ', '');
        if (_parent.deckCodeInput.indexOf('.') != -1) {
          tempDeckArray = _parent.deckCodeInput.split('.');
          myDeckArray = new Array();
          i = 0;
          while (i <= tempDeckArray.length - 1) {
            if (tempDeckArray[i] > 100) {
              tempDeckArray[i] = 100;
            }
            if (isNaN(tempDeckArray[i])) {
              tempDeckArray[i] = 0;
              _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
              validSoFar = 0;
            }
            j = 1;
            while (j <= tempDeckArray[i]) {
              myDeckArray.push(tempDeckArray[i + 1]);
              ++j;
            }
            i += 2;
          }
        } else {
          myDeckArray = _parent.deckCodeInput.split(',');
        }
        _parent.errorText.text = '';
        validSoFar = 1;
        planDeck = new Array();
        i = 1;
        while (i <= 400) {
          planDeck[i] = 0;
          ++i;
        }
        if (myDeckArray.length > 24 && myDeckArray.length <= 100) {
          i = 0;
          while (i <= myDeckArray.length - 1) {
            planDeck[myDeckArray[i]] += 1;
            if (_root.cardList[myDeckArray[i]].upgraded == 0) {
              cardName = _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 1) {
              cardName = '(Upgraded) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 2) {
              cardName = '(Rare) ' + _root.cardList[i].name;
            }
            if (_root.cardList[myDeckArray[i]].upgraded == 3) {
              cardName = '(Rare/Upgraded) ' + _root.cardList[i].name;
            }
            if (Math.ceil(myDeckArray[i] / 2) != myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] * 1 + 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (Math.ceil(myDeckArray[i] / 2) == myDeckArray[i] / 2 && myDeckArray[i] > 26) {
              sameCards = planDeck[myDeckArray[i]] + planDeck[myDeckArray[i] - 1];
              if (sameCards > 7) {
                _parent.errorText.text += '\nThis deck contains ' + sameCards + ' ' + cardName + '.';
                validSoFar = 0;
              }
            }
            if (myDeckArray[i] > _parent.maxcard || myDeckArray[i] < 1) {
              _parent.errorText.text += '\nThis deck contains a non-existent card.';
              validSoFar = 0;
            }
            if (isNaN(myDeckArray[i])) {
              _parent.errorText.text += '\nInvalid deck.';
              validSoFar = 0;
            }
            ++i;
          }
        } else {
          _parent.errorText.text += '\nInvalid deck. Please (don\'t) try again.';
          validSoFar = 0;
        }
        if (validSoFar == 1) {
          i = 1;
          while (i <= 400) {
            _root['fcg_epic' + i] = planDeck[i];
            ++i;
          }
          _root.enemy_randomdeck = false;
          _root.fcg_opponentlevel = 10;
          _root.fcg_epic = 4;
          _parent.gotoAndStop(3);
        }
      }
    }

    frame 8 {
      onEnterFrame = null;
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    frame 9 {
      onEnterFrame = null;
    }

    frame 10 {
      onEnterFrame = null;
      if (_root.save.fcgPlay > 0) {
        text1 = _root.save.fcgPlay;
        text2 = _root.save.fcgWin;
        text3 = _root.save.fcgLose;
        text4 = _root.save.fcgStreak;
        text5 = Math.floor((_root.save.fcgWin / _root.save.fcgPlay) * 10000) / 100 + '%';
        text6 = _root.save.fcgExp + _root.save.fcgExpTotal;
        text7 = Math.floor((text6 / _root.save.fcgPlay) * 10) / 10;
        text8 = _root.save.fcgCash;
        text9 = _root.save.fcgMaxCash;
      }
    }

    frame 11 {
      onEnterFrame = null;
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _root.save.fcgPlay = 0;
        _root.save.fcgWin = 0;
        _root.save.fcgLose = 0;
        _root.save.fcgStreak = 0;
        _root.save.fcgLevel = 1;
        _root.save.fcgExp = 0;
        _root.save.fcgExpTotal = 0;
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    frame 12 {
      onEnterFrame = function () {
        fcgpt.text = _root.withComma(_root.save.fcgCash);
      };

    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 2141  {

      onClipEvent (load) {
        function reset() {
          pack = 1;
          if (pack == 1) {
            cost = 50;
          }
          if (pack == 2) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 3) {
            cost = 75 + random(3) * 25;
          }
          if (pack == 4) {
            cost = 750 + random(3) * 250;
          }
          if (pack == 5) {
            cost = 4000 + random(3) * 1000;
          }
          if (pack == 6) {
            cost = 9001;
          }
          if (pack == 7) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 8) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 9) {
            cost = 1500 + random(3) * 500;
          }
          if (pack == 10) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 11) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 12) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 13) {
            cost = 450 + random(3) * 150;
          }
          _root.save.fcgPack1 = pack;
          _root.save.fcgPack1Cost = cost;
          gotoAndStop(pack);
          costText.text = _root.withComma(cost);
        }

        gotoAndStop(_root.save.fcgPack1);
        costText.text = _root.withComma(_root.save.fcgPack1Cost);
      }

      onClipEvent (release) {
        if (_root.save.fcgCash >= _root.save.fcgPack1Cost) {
          _root.save.fcgCash -= _root.save.fcgPack1Cost;
          cardtowin = random(_parent.maxcard) + 1;
          if (_root.save.fcgPack1 == 1) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2) || _root.cardList[cardtowin].upgraded != 0) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 3) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 4) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 != Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 5) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].upgraded < 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 6) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].cost != Infinity) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 7) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type != 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 8) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type == 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 9) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 1) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 10) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 11) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 3) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 12) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 4) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack1 == 13) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 5) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          _root.save.fcgOwned[cardtowin] += 1;
          _root.cardspin = cardtowin;
          _parent.wonCard.gotoAndStop(2);
          reset();
        }
      }
    }

    instance of movieClip 2141  {

      onClipEvent (load) {
        function reset() {
          pack = 2 + random(3);
          if (pack == 1) {
            cost = 50;
          }
          if (pack == 2) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 3) {
            cost = 75 + random(3) * 25;
          }
          if (pack == 4) {
            cost = 750 + random(3) * 250;
          }
          if (pack == 5) {
            cost = 4000 + random(3) * 1000;
          }
          if (pack == 6) {
            cost = 9001;
          }
          if (pack == 7) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 8) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 9) {
            cost = 1500 + random(3) * 500;
          }
          if (pack == 10) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 11) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 12) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 13) {
            cost = 450 + random(3) * 150;
          }
          _root.save.fcgPack2 = pack;
          _root.save.fcgPack2Cost = cost;
          gotoAndStop(pack);
          costText.text = _root.withComma(cost);
        }

        gotoAndStop(_root.save.fcgPack2);
        costText.text = _root.withComma(_root.save.fcgPack2Cost);
      }

      onClipEvent (release) {
        if (_root.save.fcgCash >= _root.save.fcgPack2Cost) {
          _root.save.fcgCash -= _root.save.fcgPack2Cost;
          cardtowin = random(_parent.maxcard) + 1;
          if (_root.save.fcgPack2 == 1) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2) || _root.cardList[cardtowin].upgraded != 0) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 3) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 4) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 != Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 5) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].upgraded < 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 6) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].cost != Infinity) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 7) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type != 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 8) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type == 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 9) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 1) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 10) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 11) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 3) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 12) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 4) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack2 == 13) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 5) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          _root.save.fcgOwned[cardtowin] += 1;
          _root.cardspin = cardtowin;
          _parent.wonCard.gotoAndStop(2);
          reset();
        }
      }
    }

    instance of movieClip 2141  {

      onClipEvent (load) {
        function reset() {
          pack = 5 + random(2);
          if (pack == 1) {
            cost = 50;
          }
          if (pack == 2) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 3) {
            cost = 75 + random(3) * 25;
          }
          if (pack == 4) {
            cost = 750 + random(3) * 250;
          }
          if (pack == 5) {
            cost = 4000 + random(3) * 1000;
          }
          if (pack == 6) {
            cost = 9001;
          }
          if (pack == 7) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 8) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 9) {
            cost = 1500 + random(3) * 500;
          }
          if (pack == 10) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 11) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 12) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 13) {
            cost = 450 + random(3) * 150;
          }
          _root.save.fcgPack3 = pack;
          _root.save.fcgPack3Cost = cost;
          gotoAndStop(pack);
          costText.text = _root.withComma(cost);
        }

        gotoAndStop(_root.save.fcgPack3);
        costText.text = _root.withComma(_root.save.fcgPack3Cost);
      }

      onClipEvent (release) {
        if (_root.save.fcgCash >= _root.save.fcgPack3Cost) {
          _root.save.fcgCash -= _root.save.fcgPack3Cost;
          cardtowin = random(_parent.maxcard) + 1;
          if (_root.save.fcgPack3 == 1) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2) || _root.cardList[cardtowin].upgraded != 0) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 3) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 4) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 != Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 5) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].upgraded < 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 6) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].cost != Infinity) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 7) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type != 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 8) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type == 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 9) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 1) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 10) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 11) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 3) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 12) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 4) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack3 == 13) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 5) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          _root.save.fcgOwned[cardtowin] += 1;
          _root.cardspin = cardtowin;
          _parent.wonCard.gotoAndStop(2);
          reset();
        }
      }
    }

    instance of movieClip 2141  {

      onClipEvent (load) {
        function reset() {
          pack = 7 + random(2);
          if (pack == 1) {
            cost = 50;
          }
          if (pack == 2) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 3) {
            cost = 75 + random(3) * 25;
          }
          if (pack == 4) {
            cost = 750 + random(3) * 250;
          }
          if (pack == 5) {
            cost = 4000 + random(3) * 1000;
          }
          if (pack == 6) {
            cost = 9001;
          }
          if (pack == 7) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 8) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 9) {
            cost = 1500 + random(3) * 500;
          }
          if (pack == 10) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 11) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 12) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 13) {
            cost = 450 + random(3) * 150;
          }
          _root.save.fcgPack4 = pack;
          _root.save.fcgPack4Cost = cost;
          gotoAndStop(pack);
          costText.text = _root.withComma(cost);
        }

        gotoAndStop(_root.save.fcgPack4);
        costText.text = _root.withComma(_root.save.fcgPack4Cost);
      }

      onClipEvent (release) {
        if (_root.save.fcgCash >= _root.save.fcgPack4Cost) {
          _root.save.fcgCash -= _root.save.fcgPack4Cost;
          cardtowin = random(_parent.maxcard) + 1;
          if (_root.save.fcgPack4 == 1) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2) || _root.cardList[cardtowin].upgraded != 0) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 3) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 4) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 != Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 5) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].upgraded < 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 6) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].cost != Infinity) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 7) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type != 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 8) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type == 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 9) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 1) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 10) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 11) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 3) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 12) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 4) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack4 == 13) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 5) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          _root.save.fcgOwned[cardtowin] += 1;
          _root.cardspin = cardtowin;
          _parent.wonCard.gotoAndStop(2);
          reset();
        }
      }
    }

    instance of movieClip 2141  {

      onClipEvent (load) {
        function reset() {
          pack = 9 + random(5);
          if (pack == 1) {
            cost = 50;
          }
          if (pack == 2) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 3) {
            cost = 75 + random(3) * 25;
          }
          if (pack == 4) {
            cost = 750 + random(3) * 250;
          }
          if (pack == 5) {
            cost = 4000 + random(3) * 1000;
          }
          if (pack == 6) {
            cost = 9001;
          }
          if (pack == 7) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 8) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 9) {
            cost = 1500 + random(3) * 500;
          }
          if (pack == 10) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 11) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 12) {
            cost = 450 + random(3) * 150;
          }
          if (pack == 13) {
            cost = 450 + random(3) * 150;
          }
          _root.save.fcgPack5 = pack;
          _root.save.fcgPack5Cost = cost;
          gotoAndStop(pack);
          costText.text = _root.withComma(cost);
        }

        gotoAndStop(_root.save.fcgPack5);
        costText.text = _root.withComma(_root.save.fcgPack5Cost);
      }

      onClipEvent (release) {
        if (_root.save.fcgCash >= _root.save.fcgPack5Cost) {
          _root.save.fcgCash -= _root.save.fcgPack5Cost;
          cardtowin = random(_parent.maxcard) + 1;
          if (_root.save.fcgPack5 == 1) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2) || _root.cardList[cardtowin].upgraded != 0) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 3) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 == Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 4) {
            k = 1;
            while (k <= 50) {
              if (cardtowin / 2 != Math.floor(cardtowin / 2)) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 5) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].upgraded < 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 6) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].cost != Infinity) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 7) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type != 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 8) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].type == 'Monster') {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 9) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 1) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 10) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 2) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 11) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 3) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 12) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 4) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          if (_root.save.fcgPack5 == 13) {
            k = 1;
            while (k <= 50) {
              if (_root.cardList[cardtowin].quanta != 5) {
                cardtowin = random(_parent.maxcard) + 1;
              }
              ++k;
            }
          }
          _root.save.fcgOwned[cardtowin] += 1;
          _root.cardspin = cardtowin;
          _parent.wonCard.gotoAndStop(2);
          reset();
        }
      }
    }

    instance wonCard of movieClip 2144  {

      onClipEvent (release) {
        gotoAndStop(1);
      }
    }

    frame 13 {
      onEnterFrame = null;
    }

    frame 14 {
      count = 0;
      stop();
      onEnterFrame = function () {
        count += 1 + random(5);
        if (count >= 500) {
          gotoAndStop(3);
        }
      };

      _root.epicdesc = '';
    }

    frame 15 {
      function checkPrice() {
        buff1Cost = 500;
        buff2Cost = 1500;
        buff3Cost = 3000;
        buff4Cost = 5000;
        buff5Cost = 8000;
        buff6Cost = 12000;
        buff7Cost = 2000;
        buff8Cost = 200;
        if (_root.save.careerLevel[8] >= 200) {
          buff1Cost = 350;
          buff2Cost = 1050;
          buff3Cost = 2100;
          buff4Cost = 3500;
          buff5Cost = 5600;
          buff6Cost = 8400;
          buff7Cost = 1400;
          buff8Cost = 140;
        }
        if (_root.save.fcgBuff[1] >= 99) {
          buff1Cost = Infinity;
        }
        if (_root.save.fcgBuff[2] >= 99) {
          buff2Cost = Infinity;
        }
        if (_root.save.fcgBuff[3] >= 99) {
          buff3Cost = Infinity;
        }
        if (_root.save.fcgBuff[4] >= 99) {
          buff4Cost = Infinity;
        }
        if (_root.save.fcgBuff[5] >= 99) {
          buff5Cost = Infinity;
        }
        if (_root.save.fcgBuff[6] >= 99) {
          buff6Cost = Infinity;
        }
        if (_root.save.fcgBuff[7] >= 999) {
          buff7Cost = Infinity;
        }
        if (_root.save.fcgBuff[8] >= 999) {
          buff8Cost = Infinity;
        }
        buff1CostText.text = _root.withComma(buff1Cost);
        buff2CostText.text = _root.withComma(buff2Cost);
        buff3CostText.text = _root.withComma(buff3Cost);
        buff4CostText.text = _root.withComma(buff4Cost);
        buff5CostText.text = _root.withComma(buff5Cost);
        buff6CostText.text = _root.withComma(buff6Cost);
        buff7CostText.text = _root.withComma(buff7Cost);
        buff8CostText.text = _root.withComma(buff8Cost);
        i = 1;
        while (i <= 8) {
          this['buff' + i + 'OwnedText'].text = _root.withComma(_root.save.fcgBuff[i]) + 'x';
          if (_root.save.fcgCash < this['buff' + i + 'Cost']) {
            this['buff' + i + 'CostText'].textColor = 16750848;
          } else {
            this['buff' + i + 'CostText'].textColor = 16776960;
            if (_root.save.fcgBuff[i] > 0) {
              this['buff' + i + 'CostText'].textColor = 10092288;
            }
          }
          ++i;
        }
        if (_root.save.fcgLevel < 10) {
          buff1Cost = Infinity;
          buff1CostText.text = 'Lv. 10+';
          buff1CostText.textColor = 10066329;
        }
        if (_root.save.fcgLevel < 20) {
          buff2Cost = Infinity;
          buff2CostText.text = 'Lv. 20+';
          buff2CostText.textColor = 10066329;
        }
        if (_root.save.fcgLevel < 30) {
          buff3Cost = Infinity;
          buff3CostText.text = 'Lv. 30+';
          buff3CostText.textColor = 10066329;
        }
        if (_root.save.fcgLevel < 40) {
          buff4Cost = Infinity;
          buff4CostText.text = 'Lv. 40+';
          buff4CostText.textColor = 10066329;
        }
        if (_root.save.fcgLevel < 50) {
          buff5Cost = Infinity;
          buff5CostText.text = 'Lv. 50+';
          buff5CostText.textColor = 10066329;
        }
        if (_root.save.fcgLevel < 60) {
          buff6Cost = Infinity;
          buff6CostText.text = 'Lv. 60+';
          buff6CostText.textColor = 10066329;
        }
      }

      checkPrice();
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff1Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff1Cost) {
          _root.save.fcgCash -= _parent.buff1Cost;
          _root.save.fcgBuff[1] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff2Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff2Cost) {
          _root.save.fcgCash -= _parent.buff2Cost;
          _root.save.fcgBuff[2] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff3Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff3Cost) {
          _root.save.fcgCash -= _parent.buff3Cost;
          _root.save.fcgBuff[3] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff4Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff4Cost) {
          _root.save.fcgCash -= _parent.buff4Cost;
          _root.save.fcgBuff[4] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff5Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff5Cost) {
          _root.save.fcgCash -= _parent.buff5Cost;
          _root.save.fcgBuff[5] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff6Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff6Cost) {
          _root.save.fcgCash -= _parent.buff6Cost;
          _root.save.fcgBuff[6] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff7Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff7Cost) {
          _root.save.fcgCash -= _parent.buff7Cost;
          _root.save.fcgBuff[7] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.fcgCash >= _parent.buff8Cost) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkPrice();
        if (_root.save.fcgCash >= _parent.buff8Cost) {
          _root.save.fcgCash -= _parent.buff8Cost;
          _root.save.fcgBuff[8] += 1;
        }
        _parent.checkPrice();
      }
    }

    instance of movieClip 1983  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }
  }

  frame 1 {
    _root.kpaChip = false;
    _root.autoStart = true;
    _root.sessionTimeLeft = 2419200;
    _root.luckyNumber = 10000000 + random(90000000);
    stop();
    _root.upnumber = 1809;
    _root.upnumberHidden = 0;
    _root.flashVer = /:$version;
    var kongregate = _global.kongregate;
    kongregate.services.connect();
    _root.kongregate.stats.submit('Version Playing', upnumber);
    var globalSetting = SharedObject.getLocal('ATG_Global', '/');
    var saveGlobal = _root.globalSetting.data;
    Stage.showMenu = false;
    if (_root.kongregate_username == undefined && _root.saveGlobal.aurianMode != true) {
      Stage.scaleMode = 'noScale';
    }
    _root.preloadedFile0 = false;
    _root.preloadedFile1 = false;
    _root.preloadedFile2 = false;
    _root.preloadedFile3 = false;
    _root.thisSession = 0;
    _root.refresh_year = 0;
    _root.refresh_month = 0;
    _root.refresh_date = 0;
  }

  movieClip 2265  {
  }

  movieClip 2267  {

    frame 1 {
      function genRandom() {
        textToGet = random(11) + 1;
        if (textToGet == 1) {
          randomMessage.text = 'Did you know? Anti-Idle: The Game is loading!';
        }
        if (textToGet == 2) {
          randomMessage.text = 'This is one of 11 messages you can get, LOL!';
        }
        if (textToGet == 3) {
          randomMessage.text = 'Don\'t forget to come back and check for updates!';
        }
        if (textToGet == 4) {
          randomMessage.text = 'If it takes too long to load or doesn\'t load at all, try refreshing.';
        }
        if (textToGet == 5) {
          randomMessage.text = 'Happy Birthday! What, it isn\'t your birthday? Oh well...';
        }
        if (textToGet == 6) {
          randomMessage.text = 'Loading epicness...';
        }
        if (textToGet == 7) {
          randomMessage.text = 'Finding a way to reduce lag...';
        }
        if (textToGet == 8) {
          randomMessage.text = 'Increasing player\'s Impatience Quotient...';
        }
        if (textToGet == 9) {
          randomMessage.text = 'The game is fully loaded when the green bar is full, by the way.';
        }
        if (textToGet == 10) {
          randomMessage.text = 'Oh, by the way, this isn\'t the game. This is just the preloader!';
        }
        if (textToGet == 11) {
          if (_root.kongregate_username != undefined && _root.kongregate_username != 'Guest') {
            randomMessage.text = 'Someone named ' + _root.kongregate_username + ' is waiting to play Anti-Idle: The Game!';
          } else {
            randomMessage.text = 'Don\'t forget, playing with a Kongregate account grants you higher rewards!';
          }
        }
      }

      randomMessage.text = '';
      preloadCount = 0;
      onEnterFrame = function () {
        preloadCount += 1;
        if (preloadCount > 200) {
          preloadCount = 0;
          genRandom();
        }
        if (_root.getBytesLoaded() == _root.getBytesTotal()) {
          _root.gotoAndPlay(2);
        }
      };

    }

    instance of movieClip 2265  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.getBytesLoaded() / _root.getBytesTotal()) * 100;
        _xscale = _xscale + (targetScale - _xscale) / 5;
      }
    }
  }

  movieClip 2271  {
  }

  frame 3 {
    function getFullMonthName(monthCount) {
      monthArr = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      return monthArr[monthCount];
    }

    function getShortMonthName(monthCount) {
      monthArr = ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      return monthArr[monthCount];
    }

    function setInitDeck(deckCode) {
      tempDeckArray = deckCode.split('.');
      myDeckArray = new Array();
      i = 0;
      while (i <= tempDeckArray.length - 1) {
        if (tempDeckArray[i] > 100) {
          tempDeckArray[i] = 100;
        }
        j = 1;
        while (j <= tempDeckArray[i]) {
          myDeckArray.push(tempDeckArray[i + 1]);
          ++j;
        }
        i += 2;
      }
      planDeck = new Array();
      i = 1;
      while (i <= 400) {
        planDeck[i] = 0;
        ++i;
      }
      if (myDeckArray.length > 10 && myDeckArray.length <= 100) {
        i = 0;
        while (i <= myDeckArray.length - 1) {
          planDeck[myDeckArray[i]] += 1;
          ++i;
        }
      }
      i = 1;
      while (i <= 400) {
        _root.save.fcgOwned[i] += planDeck[i];
        _root.save.fcgDeck[i] = planDeck[i];
        ++i;
      }
      _root.save.fcgTotalCards = myDeckArray.length;
    }

    function checkAttReward(dayCount) {
      if (dayCount == _root.refresh_max_date) {
        return 8;
      } else {
        if (dayCount == _root.refresh_max_date - 1) {
          return 7;
        } else {
          if (dayCount == 14) {
            return 9;
          } else {
            if (dayCount == 24) {
              return 6;
            } else {
              if (dayCount == 8 || dayCount == 16) {
                return 5;
              } else {
                if (dayCount == 1 || dayCount == 9 || dayCount == 25 || dayCount == 28) {
                  return 4;
                } else {
                  if (dayCount == 2 || dayCount == 3 || dayCount == 4 || dayCount == 12 || dayCount == 17 || dayCount == 18 || dayCount == 19 || dayCount == 20) {
                    return 3;
                  } else {
                    if (dayCount >= 21 || dayCount == 6 || dayCount == 14) {
                      return 2;
                    } else {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    function getKpaValue(kpaName) {
      if (kpaName == undefined || kpaName == '' || kpaName.length < 1) {
        return 0;
      }
      kpaValue = 0;
      k = 1;
      while (k <= kpaName.length) {
        cDigit = substring(kpaName, k, 1);
        switch (cDigit) {
          case 'A':
            nD = 211;
            break;
          case 'B':
            nD = 125;
            break;
          case 'C':
            nD = 334;
            break;
          case 'D':
            nD = 243;
            break;
          case 'E':
            nD = 152;
            break;
          case 'F':
            nD = 367;
            break;
          case 'G':
            nD = 279;
            break;
          case 'H':
            nD = 183;
            break;
          case 'I':
            nD = 391;
            break;
          case 'J':
            nD = 206;
            break;
          case 'K':
            nD = 114;
            break;
          case 'L':
            nD = 329;
            break;
          case 'M':
            nD = 234;
            break;
          case 'N':
            nD = 149;
            break;
          case 'O':
            nD = 355;
            break;
          case 'P':
            nD = 267;
            break;
          case 'Q':
            nD = 174;
            break;
          case 'R':
            nD = 386;
            break;
          case 'S':
            nD = 293;
            break;
          case 'T':
            nD = 108;
            break;
          case 'U':
            nD = 317;
            break;
          case 'V':
            nD = 227;
            break;
          case 'W':
            nD = 138;
            break;
          case 'X':
            nD = 346;
            break;
          case 'Y':
            nD = 251;
            break;
          case 'Z':
            nD = 164;
            break;
          case 'a':
            nD = 473;
            break;
          case 'b':
            nD = 383;
            break;
          case 'c':
            nD = 292;
            break;
          case 'd':
            nD = 405;
            break;
          case 'e':
            nD = 314;
            break;
          case 'f':
            nD = 227;
            break;
          case 'g':
            nD = 433;
            break;
          case 'h':
            nD = 349;
            break;
          case 'i':
            nD = 255;
            break;
          case 'j':
            nD = 468;
            break;
          case 'k':
            nD = 377;
            break;
          case 'l':
            nD = 285;
            break;
          case 'm':
            nD = 496;
            break;
          case 'n':
            nD = 305;
            break;
          case 'o':
            nD = 215;
            break;
          case 'p':
            nD = 429;
            break;
          case 'q':
            nD = 337;
            break;
          case 'r':
            nD = 247;
            break;
          case 's':
            nD = 456;
            break;
          case 't':
            nD = 362;
            break;
          case 'u':
            nD = 278;
            break;
          case 'v':
            nD = 485;
            break;
          case 'w':
            nD = 391;
            break;
          case 'x':
            nD = 204;
            break;
          case 'y':
            nD = 413;
            break;
          case 'z':
            nD = 323;
            break;
          case '0':
            nD = 232;
            break;
          case '1':
            nD = 542;
            break;
          case '2':
            nD = 454;
            break;
          case '3':
            nD = 364;
            break;
          case '4':
            nD = 473;
            break;
          case '5':
            nD = 386;
            break;
          case '6':
            nD = 595;
            break;
          case '7':
            nD = 405;
            break;
          case '8':
            nD = 514;
            break;
          case '9':
            nD = 327;
            break;
          default:
            nD = 13;
        }
        if (k == 1) {
          kpaValue += 3 * nD + 17;
        } else {
          kpaValue += (k + 1) * nD + 9;
        }
        kpaValue %= 10000;
        ++k;
      }
      return kpaValue;
    }

    function getRefundCode() {
      refundTier = 0;
      if (_root.kongregate_username != undefined && _root.kongregate_username != 'Guest') {
        if (_root.save.bestLevel >= 200 && _root.save.totalPlayTime >= 2700) {
          refundTier = 1;
        }
        if (_root.save.bestLevel >= 400 && _root.save.totalPlayTime >= 5400) {
          refundTier = 2;
        }
        if (_root.save.bestLevel >= 700 && _root.save.totalPlayTime >= 10800) {
          refundTier = 3;
        }
        if (_root.save.bestLevel >= 1000 && _root.save.totalPlayTime >= 21600) {
          refundTier = 4;
        }
        if (_root.save.bestLevel >= 1500 && _root.save.totalPlayTime >= 43200) {
          refundTier = 5;
        }
        if (_root.save.bestLevel >= 2000 && _root.save.totalPlayTime >= 86400) {
          refundTier = 6;
        }
        if (_root.save.bestLevel >= 3000 && _root.save.totalPlayTime >= 172800) {
          refundTier = 7;
        }
        if (_root.save.bestLevel >= 4000 && _root.save.totalPlayTime >= 345600) {
          refundTier = 8;
        }
        if (_root.save.bestLevel >= 5500 && _root.save.totalPlayTime >= 604800) {
          refundTier = 9;
        }
        if (_root.save.bestLevel >= 7000 && _root.save.totalPlayTime >= 864000) {
          refundTier = 10;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.totalPlayTime >= 1296000) {
          refundTier = 11;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 2 && _root.save.totalPlayTime >= 1728000) {
          refundTier = 12;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 5 && _root.save.totalPlayTime >= 2160000) {
          refundTier = 13;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 10 && _root.save.totalPlayTime >= 2592000) {
          refundTier = 14;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 20 && _root.save.totalPlayTime >= 3024000) {
          refundTier = 15;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 30 && _root.save.totalPlayTime >= 3456000) {
          refundTier = 16;
        }
        if (_root.save.bestLevel >= 9000 && _root.save.banned >= 50 && _root.save.totalPlayTime >= 3888000) {
          refundTier = 17;
        }
      }
      refundCode = refundTier * (1013174 + refundTier * refundTier + Math.ceil(nameValue / 7)) + refundTier * (refundTier + 4) * Math.ceil(nameValue * refundTier / 1.7);
      if (refundCode % 10 == 7) {
        refundCode += 1;
      }
      refundCode = refundCode * 10 + 7;
      if (refundCode > 7) {
        _root.submitScore('Refund Code', refundCode);
      }
    }

    function checkRefundCode(code) {
      _root.correctTier = 0;
      if (_root.kongregate_username != undefined && _root.kongregate_username != 'Guest') {
        i = 1;
        while (i <= 30) {
          correctCode = i * (1013174 + i * i + Math.ceil(nameValue / 7)) + i * (i + 4) * Math.ceil(nameValue * i / 1.7);
          if (correctCode % 10 == 7) {
            correctCode += 1;
          }
          correctCode = correctCode * 10 + 7;
          if (code == correctCode) {
            _root.correctTier = i;
          }
          ++i;
        }
      }
    }

    function ddec(donCode) {
      decompilerNote1 = 'THIS FUNCTION IS MEANT TO BE USED ONLY BY TUKKUN.';
      decompilerNote2 = 'THIS FUNCTION IS NOT INTENDED FOR DECOMPILERS AND CODE-READERS.';
      decompilerNote3 = 'THE CONTENTS OF THIS FUNCTION AS WELL AS HOW TO USE IT ARE NOT MEANT TO BE EXPOSED TO THE PUBLIC.';
      decompilerNote4 = 'PLEASE DO NOT ATTEMPT TO ABUSE THIS FEATURE.';
      decompilerNote5 = 'MISUSE OF THIS INFORMATION MAY LEAD TO BEING BANNED FROM THE GAME.';
      res = '';
      donArr = ((((((((((((donCode.replace('a', '0')).replace('d', '2')).replace('e', '4')).replace('b', '3')).replace('f', '7')).replace('h', '5')).replace('m', '4')).replace('7', '1')).replace('i', '6')).replace('c', '7')).replace('j', '9')).replace('g', '8')).split('k');
      decCode = 131 + _root.kongregate_username.charCodeAt(2) % 69;
      i = 1;
      while (i < donArr.length) {
        res += String.fromCharCode(donArr[i] * 1 - 137 - (i - 1 + decCode) * 17 - 100);
        ++i;
      }
      return res;
    }

    function submitScore(scoreName, amount, hardCap, submitZero) {
      if (_root.save.bestLevel >= 30 && scoreBanned == false && _root.saveid <= 3) {
        if ((_root.save.bestLevel < 9000 && _root.save.banned < 1 || _root.save.yoEpicFail == 25465) && _root.save.safeHacking == false && _root.save.submitScore == true && _root.save.noobMode != true && _root.save.houseVer <= 0) {
          if ((amount > 0 || submitZero == true) && (amount <= hardCap || isNaN(hardCap))) {
            _root.kongregate.stats.submit(scoreName, amount);
          }
        }
      }
    }

    function submitKong(scoreName, amount, hardCap, submitZero) {}

    function submitGeneral() {
      _root.getRefundCode();
      _root.submitScore('Total Days Played', Math.floor(_root.save.totalPlayTime / 86400), 99999);
      _root.submitScore('Level', _root.save.level + _root.save.banned * 10000);
      _root.submitScore('Max Level', _root.save.bestLevel, 9002);
      _root.submitScore('EXP', _root.save.bestExp);
      _root.submitScore('Speedrun: Lv. 9001 [Minutes]', _root.save.speedRun9001, 99999999, true);
      _root.submitScore('Speedrun: Ascend [Minutes]', _root.save.speedRunAscend, 99999999, true);
      _root.submitScore('Speedrun: Ascend (Hard) [Minutes]', _root.save.speedRunAscendHard, 99999999, true);
      _root.submitScore('Speedrun: Ascend (Impossible) [Minutes]', _root.save.speedRunAscendImpossible, 99999999, true);
      _root.submitScore('Unspent Coins', _root.save.coinMax, 999999999999999.0);
      _root.submitScore('Unspent Green Coins', _root.save.greenCoinMax, 999999999999.0);
      _root.submitScore('Unspent Blue Coins', _root.save.blueCoinMax, 999999999);
      _root.submitScore('Unspent White Coins', _root.save.whiteCoinMax, 999999);
      _root.submitScore('REST Upgrades', _root.totalRestEfficiency, 100);
      _root.submitScore('Inventory Module Slots', _root.save.progModuleSlot, 100);
      _root.submitScore('Main Quests C-Rank', _root.save.mainQuestC);
      _root.submitScore('Main Quests B-Rank', _root.save.mainQuestB);
      _root.submitScore('Main Quests A-Rank', _root.save.mainQuestA);
      _root.submitScore('Main Quests S-Rank', _root.save.mainQuestS);
      _root.submitScore('Quests', _root.save.questTotal);
      _root.submitScore('Quests (1 day)', _root.save.questRecord);
      _root.submitScore('Achievements', _root.awards, _root.totalachievements);
      _root.submitScore('Secret Achievements', _root.sawards, _root.totalsachievements);
      _root.submitScore('Achievement Score', _root.achRedCoin, _root.maxredcoin);
      if (_root.save.level >= 1000 || _root.save.banned > 0) {
        _root.submitScore('% Anti-Idle Rewards', Math.floor((_root.save.rewardClaimManual / _root.save.rewardClaim) * 100), _root.maxredcoin);
      }
      _root.submitScore('Rewards Claimed', _root.save.rewardClaim);
      _root.submitScore('Rewards Claimed (Anti-Idle)', _root.save.rewardClaimManual);
      _root.submitScore('Rewards Claimed (Idle)', _root.save.rewardClaimAuto);
      _root.submitScore('Times Ascended', _root.save.banned);
      _root.submitScore('Times Ascended (Hard)', _root.save.bannedHard);
      _root.submitScore('Times Ascended (Impossible)', _root.save.bannedImpossible);
      _root.submitScore('[Battle Arena] Rebirth', _root.save.bannedB);
      _root.submitScore('[Battle Arena] Battle Points', _root.save.battlePoint);
      _root.submitScore('[Battle Arena] Excessive EXP (x100M)', _root.save.arenaExpExcess);
      _root.submitScore('Pet EXP', _root.save.petStat[1] + _root.save.petStat[2] + _root.save.petStat[3] + _root.save.petStat[4] + _root.save.petStat[5] + _root.save.petStat[6] + _root.save.petStat[7] + _root.save.petStat[8], 1600);
      _root.submitScore('[Kong] Kongpanions', _root.actualKpaCount);
      _root.submitScore('[Kong] Shiny Kongpanions', _root.actualShinyKpaCount);
      _root.submitScore('Ascension Points', _root.save.totalStupidity);
      _root.submitScore('[Battle Arena] Collection Points', _root.save.collectionPointMax);
      z = 1;
      while (z <= 20) {
        _root.submitScore('[Event] Technical Battleground #' + z, _root.save.arenaEventPoint[z]);
        ++z;
      }
    }

    function submitAll() {
      _root.submitGeneral();
      _root.submitScore('[Speedrun] Speedrun Time', _root.saveGlobal.challengeTime[0], 999999999);
      z = 1;
      while (z <= 20) {
        _root.submitScore('[Challenge] Challenge #' + z + ' Time', _root.saveGlobal.challengeTime[z], 999999999);
        ++z;
      }
      _root.submitScore('Ants Sprayed', _root.save.antsSprayed);
      _root.submitScore('[Garden] Tree Harvests', _root.save.harvestCount);
      _root.submitScore('[Garden] Tree Income', _root.save.harvestCoin);
      _root.submitScore('[Garden] Garden EXP', _root.save.gardenEXP);
      _root.submitScore('[Battle Arena] Bestiary Level', _root.bestiaryLevel);
      _root.submitScore('[Battle Arena] Arena Rank', _root.save.arenaLevel);
      _root.submitScore('[Battle Arena] Robacon Rank', _root.save.robaconLevel);
      _root.submitScore('[Battle Arena] Missions', _root.save.arenaMission);
      _root.submitScore('[Battle Arena] Mission Kommander', _root.save.arenaKommanderComplete);
      _root.submitScore('[Battle Arena] Defend Mission', _root.save.arenaDefendComplete);
      _root.submitScore('[Battle Arena] Prehistoric Mission', _root.save.arenaPrehistoricComplete);
      _root.submitScore('[Battle Arena] Kills', _root.save.arenaKill);
      _root.submitScore('[Battle Arena] Kills (Non-Weak)', _root.save.arenaKillWhite);
      _root.submitScore('[Battle Arena] Kills (Strong)', _root.save.arenaKillRed);
      _root.submitScore('[Battle Arena] Kills (Boss)', _root.save.arenaKillPurple);
      _root.submitScore('[Battle Arena] Combo', _root.save.arenaMaxCombo);
      _root.submitScore('[Battle Arena] Loot Drops', _root.save.arenaLoot);
      _root.submitScore('[Battle Arena] Unspent Pixels', _root.save.arenaPixelMax);
      _root.submitScore('[Battle Arena] Crafting Material Used', _root.save.arenaCraftUsed);
      _root.submitScore('[Battle Arena] Max Damage Dealt', _root.save.arenaMaxDamage);
      _root.submitScore('[Battle Arena] Invisible Allies Tamed', _root.totalAllyTamed);
      _root.submitScore('[Battle Arena] Invisible Allies Mastered', _root.totalAllyMastered);
      _root.submitScore('[Battle Arena] Skill Books', _root.save.arenaSkillBook);
      _root.submitScore('[Button Machine] Button Presses', _root.save.buttonPress);
      _root.submitScore('[Button Machine] Perfect Clicks', _root.save.buttonPerfect);
      _root.submitScore('[Button Machine] Max Hit Combo', _root.save.buttonMaxCombo);
      _root.submitScore('[Money Printer] Illegal Coins', _root.save.totalPrinterMoney);
      _root.submitScore('[Money Printer] Battery Charges', _root.save.totalPrinterCharge);
      _root.submitScore('[Arcade] Pong', _root.save.rankedPong);
      _root.submitScore('[Arcade] Ultimate Avoidance', _root.save.rankedAvoidance);
      _root.submitScore('[Arcade] Math Master', _root.save.rankedMath);
      _root.submitScore('[Arcade] Whack-a-greg', _root.save.rankedWhack);
      _root.submitScore('[Arcade] MindSweeper', _root.save.rankedMind);
      _root.submitScore('[Arcade] Balance 3', _root.save.rankedBalance);
      _root.submitScore('[Arcade] Triangle Count', _root.save.rankedCount);
      _root.submitScore('[Stadium] Simple Race (Impossible)', _root.save.stadiumImpossibleRace);
      _root.submitScore('[Stadium] Item Fight (Impossible)', _root.save.stadiumImpossibleItem);
      _root.submitScore('[Stadium] Death Match Wins', _root.save.stadiumDeathMatch);
      _root.submitScore('[Stadium] Death Match PWNts', _root.save.stadiumBestDeathMatch);
      _root.submitScore('[Stadium] Fastest Race', _root.save.stadiumBestTime, 99999);
      _root.submitScore('[Stadium] Unspent Stadium Tokens', _root.save.stadiumTokenMax);
      _root.submitScore('[TukkunFCG] FCG Level', _root.save.fcgLevel);
      _root.submitScore('[TukkunFCG] FCG EXP', _root.save.fcgExp + _root.save.fcgExpTotal);
      _root.submitScore('[TukkunFCG] FCG Cash', _root.save.fcgMaxCash);
      _root.submitScore('[TukkunFCG] FCG Wins', _root.save.fcgWin);
      _root.submitScore('[TukkunFCG] FCG Win Streak (Lv6)', _root.save.fcgMaxStreak6);
      _root.submitScore('[TukkunFCG] FCG Win Streak (Lv7)', _root.save.fcgMaxStreak7);
      _root.submitScore('[TukkunFCG] FCG Win Streak (Lv8 New)', _root.save.fcgMaxStreak8);
      _root.submitScore('[TukkunFCG] FCG Win Streak (Lv10)', _root.save.fcgMaxStreak10);
      _root.submitScore('[TukkunFCG] FCG Wins (Lv8)', _root.save.fcgLevel8);
      _root.submitScore('[TukkunFCG] FCG Wins (Lv10)', _root.save.fcgLevel10);
      _root.submitScore('[TukkunFCG] Legendary Monsters Killed', _root.save.fcgLegendCount);
      _root.submitScore('[LolMarket] LolMarket Profit', _root.save.lolMaxProfit);
      _root.submitScore('[Awesome Adventures] Reputation', _root.save.awesomeMaxReputation);
      _root.submitScore('[Awesome Adventures] Town', _root.save.awesomeTotalAdv1);
      _root.submitScore('[Awesome Adventures] Untitled Zone', _root.save.awesomeTotalAdv2);
      _root.submitScore('[Awesome Adventures] Titled Zone', _root.save.awesomeTotalAdv3);
      _root.submitScore('[Fishing] Skill', _root.save.fishBestLevel, 50);
      _root.submitScore('[Fishing] Mastery', _root.save.fishExp + _root.save.fishTotalExp);
      _root.submitScore('[Fishing] Score', _root.save.fishScore);
      _root.submitScore('[Fishing] Score (1 day)', _root.save.fishScoreRecord);
      _root.submitScore('[Fishing] Catches', _root.save.fishTotal);
      _root.submitScore('[Fishing] Perfect Catches', _root.save.fishPerfect);
      _root.submitScore('[Fishing] Perfect Streak', _root.save.fishBestStreak);
      _root.submitScore('[Career] Career: Idler', _root.save.careerLevel[1], 200);
      _root.submitScore('[Career] Career: Gardener', _root.save.careerLevel[2], 200);
      _root.submitScore('[Career] Career: Fighter', _root.save.careerLevel[3], 200);
      _root.submitScore('[Career] Career: Item Maker', _root.save.careerLevel[4], 200);
      _root.submitScore('[Career] Career: Button Basher', _root.save.careerLevel[5], 200);
      _root.submitScore('[Career] Career: Arcade Player', _root.save.careerLevel[6], 200);
      _root.submitScore('[Career] Career: Racer', _root.save.careerLevel[7], 200);
      _root.submitScore('[Career] Career: Card Player', _root.save.careerLevel[8], 200);
      _root.submitScore('[Career] Career: Gem Trader', _root.save.careerLevel[9], 200);
      _root.submitScore('[Career] Career: Adventurer', _root.save.careerLevel[10], 200);
      _root.submitScore('[Career] Career: Pet Trainer', _root.save.careerLevel[11], 200);
      _root.submitScore('[Career] Career: Fisherman', _root.save.careerLevel[12], 200);
      _root.submitScore('[Career] Total Career Level', _root.totalCareerLevel, 2400);
      _root.submitScore('[Cyborg] Cyborg Level', _root.save.botLevel, 200);
      _root.submitScore('[Battle Arena] +10 Upgraded Allies', _root.totalAllyMaxed);
      _root.submitScore('[Battle Arena] ULTRA ALLIES', _root.totalUltra);
      _root.submitScore('[Battle Arena] Unique ULTRA-1 Kills [New]', _root.uniqueUlt1);
      _root.submitScore('[Battle Arena] Unique ULTRA-2 Kills [New]', _root.uniqueUlt2);
      _root.submitScore('[Battle Arena] Unique ULTRA-3 Kills [New]', _root.uniqueUlt3);
      _root.submitScore('[Button Machine] Additional Multiplier', _root.save.buttonMultiplier, 1200);
      _root.submitScore('[Button Machine] Grandpas', _root.save.buttonGrandpa, 20);
      _root.submitScore('[Arcade] Unranked Upgrades', _root.totalUnrankedPower);
      _root.submitScore('[Stadium] Hats Unlocked', _root.stadiumHatUnlocked);
      _root.submitScore('[Awesome Adventures] Reputation (-)', -1 * _root.save.awesomeReputation);
      _root.submitScore('[Fishing] Rods Unlocked', _root.fishRodCount, 10);
      _root.submitScore('[BA Raid] Dark Pyramid', _root.save.raidPyramid);
      _root.submitScore('[BA Raid] Defend Mission', _root.save.raidDefend);
      _root.submitScore('[BA Raid] Prehistoric Mission', _root.save.raidPrehistoric);
      _root.submitScore('[BA Raid] The Special Arena', _root.save.raidMegaboss);
      _root.submitScore('[BA Raid] Tower of DOOOOOOM', _root.save.raidTower);
      _root.submitScore('[BA Raid] Secret Dungeon', _root.save.raidDungeon);
      _root.submitScore('[BA Raid] Endless Dungeon', _root.save.raidEndless);
      _root.submitScore('[BA Raid] THE MEGABOSS\'s Revenge', _root.save.arenaRevengeScore);
      _root.submitScore('[BA Raid] Spooky Crypt', _root.save.arenaSpookyScore);
      _root.submitScore('[BA Raid] Triangle Hideout', _root.save.arenaTriangleScore);
      _root.submitScore('[BA Raid] Special Training Zone (new)', _root.save.raidSpecial);
      _root.submitScore('[Typing] WPM', _root.save.bestWpm);
    }

    function dispNews(type, news) {
      if (_root.save.breakNewsMode == 1) {
        ignoreNews = true;
        if (_root.saveGlobal.breakAll[type] == true || _root.saveGlobal.breakFeature[type] == true || _root.saveGlobal.breakTab1[type] == true || _root.saveGlobal.breakTab2[type] == true || _root.saveGlobal.breakTab3[type] == true || _root.saveGlobal.breakTab4[type] == true) {
          ignoreNews = false;
        }
        if (ignoreNews == false) {
          b = 30;
          while (b >= 2) {
            imp = 1;
            while (imp <= 4) {
              if (_root.saveGlobal['breakTab' + imp][type] == true) {
                _root['X' + imp + 'breakNews' + b] = _root['X' + imp + 'breakNews' + (b - 1)];
                _root['X' + imp + 'breakStamp' + b] = _root['X' + imp + 'breakStamp' + (b - 1)];
                _root['X' + imp + 'breakColor' + b] = _root['X' + imp + 'breakColor' + (b - 1)];
              }
              ++imp;
            }
            if (_root.saveGlobal.breakAll[type] == true) {
              c = 1;
              while (c <= 30) {
                _root['F' + c + 'breakNews' + b] = _root['F' + c + 'breakNews' + (b - 1)];
                _root['F' + c + 'breakStamp' + b] = _root['F' + c + 'breakStamp' + (b - 1)];
                _root['F' + c + 'breakColor' + b] = _root['F' + c + 'breakColor' + (b - 1)];
                ++c;
              }
            } else {
              if (_root.saveGlobal.breakFeature[type] == true) {
                ft = _root.newsFeature[type];
                _root['F' + ft + 'breakNews' + b] = _root['F' + ft + 'breakNews' + (b - 1)];
                _root['F' + ft + 'breakStamp' + b] = _root['F' + ft + 'breakStamp' + (b - 1)];
                _root['F' + ft + 'breakColor' + b] = _root['F' + ft + 'breakColor' + (b - 1)];
              }
            }
            b -= 1;
          }
          imp = 1;
          while (imp <= 4) {
            if (_root.saveGlobal['breakTab' + imp][type] == true) {
              _root['X' + imp + 'breakNews1'] = news;
              _root['X' + imp + 'breakStamp1'] = '[' + _root.clock_display + ']';
              _root['X' + imp + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
            }
            ++imp;
          }
          if (_root.saveGlobal.breakAll[type] == true) {
            c = 1;
            while (c <= 30) {
              _root['F' + c + 'breakNews1'] = news;
              _root['F' + c + 'breakStamp1'] = '[' + _root.clock_display + ']';
              _root['F' + c + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
              ++c;
            }
          } else {
            if (_root.saveGlobal.breakFeature[type] == true) {
              ft = _root.newsFeature[type];
              _root['F' + ft + 'breakNews1'] = news;
              _root['F' + ft + 'breakStamp1'] = '[' + _root.clock_display + ']';
              _root['F' + ft + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
            }
          }
          _root.updateBreakNews = 1;
        }
      } else {
        if (_root.save.breakNewsMode == 2) {
          if (_root.saveGlobal.defTab == 5) {
            if (_root.saveGlobal.breakAll[type] == true || _root.saveGlobal.breakFeature[type] == true && _root.house._currentframe == _root.newsFeature[type]) {
              b = 30;
              while (b >= 2) {
                if (_root.saveGlobal.breakAll[type] == true) {
                  c = 1;
                  while (c <= 30) {
                    _root['F' + c + 'breakNews' + b] = _root['F' + c + 'breakNews' + (b - 1)];
                    _root['F' + c + 'breakStamp' + b] = _root['F' + c + 'breakStamp' + (b - 1)];
                    _root['F' + c + 'breakColor' + b] = _root['F' + c + 'breakColor' + (b - 1)];
                    ++c;
                  }
                } else {
                  if (_root.saveGlobal.breakFeature[type] == true) {
                    ft = _root.newsFeature[type];
                    _root['F' + ft + 'breakNews' + b] = _root['F' + ft + 'breakNews' + (b - 1)];
                    _root['F' + ft + 'breakStamp' + b] = _root['F' + ft + 'breakStamp' + (b - 1)];
                    _root['F' + ft + 'breakColor' + b] = _root['F' + ft + 'breakColor' + (b - 1)];
                  }
                }
                b -= 1;
              }
              if (_root.saveGlobal.breakAll[type] == true) {
                c = 1;
                while (c <= 30) {
                  _root['F' + c + 'breakNews1'] = news;
                  _root['F' + c + 'breakStamp1'] = '[' + _root.clock_display + ']';
                  _root['F' + c + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
                  ++c;
                }
              } else {
                if (_root.saveGlobal.breakFeature[type] == true) {
                  ft = _root.newsFeature[type];
                  _root['F' + ft + 'breakNews1'] = news;
                  _root['F' + ft + 'breakStamp1'] = '[' + _root.clock_display + ']';
                  _root['F' + ft + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
                }
              }
              _root.updateBreakNews = 1;
            }
          } else {
            if (_root.saveGlobal.defTab == 0 || _root.saveGlobal['breakTab' + _root.saveGlobal.defTab][type] == true) {
              imp = _root.saveGlobal.defTab;
              b = 30;
              while (b >= 2) {
                _root['X' + imp + 'breakNews' + b] = _root['X' + imp + 'breakNews' + (b - 1)];
                _root['X' + imp + 'breakStamp' + b] = _root['X' + imp + 'breakStamp' + (b - 1)];
                _root['X' + imp + 'breakColor' + b] = _root['X' + imp + 'breakColor' + (b - 1)];
                b -= 1;
              }
              _root['X' + imp + 'breakNews1'] = news;
              _root['X' + imp + 'breakStamp1'] = '[' + _root.clock_display + ']';
              _root['X' + imp + 'breakColor1'] = _root.saveGlobal.breakR[type] * 65536 + _root.saveGlobal.breakG[type] * 256 + _root.saveGlobal.breakB[type];
              _root.updateBreakNews = 1;
            }
          }
        }
      }
    }

    function showPopup(popT, popD) {
      _root.popUp.gotoAndStop(2);
      _root.popUp.popTitle.text = popT;
      _root.popUp.popDesc.text = popD;
    }

    function convertMin(thatNumber) {
      if (thatNumber < 0) {
        thatNumber = 0;
      }
      hr = Math.floor(thatNumber / 3600);
      min = Math.floor(thatNumber / 60) - hr * 60;
      if (min < 10) {
        min = '0' + min;
      }
      return hr + ':' + min;
    }

    function convertSecFull(thatNumber) {
      if (thatNumber < 0) {
        thatNumber = 0;
      }
      hr = Math.floor(thatNumber / 3600);
      min = Math.floor(thatNumber / 60) - hr * 60;
      sec = Math.floor(thatNumber) - hr * 3600 - min * 60;
      if (min < 10) {
        min = '0' + min;
      }
      if (sec < 10) {
        sec = '0' + sec;
      }
      return hr + ':' + min + ':' + sec;
    }

    function convertSec(thatNumber) {
      if (thatNumber < 0) {
        thatNumber = 0;
      }
      min = Math.floor(thatNumber / 60);
      sec = Math.floor(thatNumber) - min * 60;
      if (min < 10) {
        min = '0' + min;
      }
      if (sec < 10) {
        sec = '0' + sec;
      }
      return min + ':' + sec;
    }

    function convertSecCD(thatNumber) {
      if (thatNumber < 0) {
        thatNumber = 0;
      }
      min = Math.floor(thatNumber / 60);
      sec = Math.floor(thatNumber) - min * 60;
      if (sec < 10) {
        sec = '0' + sec;
      }
      return min + ':' + sec;
    }

    function tukkunRandom(noZero, maxChance, maxVal) {
      maxVal = Math.ceil(maxVal);
      if (Math.random() < noZero) {
        val = Math.ceil(Math.random() * maxVal);
        if (Math.random() < maxChance) {
          val = maxVal;
        }
      } else {
        val = 0;
      }
    }

    function withComma(thatNumber) {
      if (thatNumber == Infinity || isNaN(thatNumber)) {
        finalNumber = '-----';
        return finalNumber;
      }
      if (thatNumber > 999999999999999.0) {
        thatNumber = 999999999999999.0;
      }
      cNegative = false;
      groupval = thatNumber;
      if (thatNumber < 0) {
        groupval = Math.abs(thatNumber);
        cNegative = true;
      }
      group1 = Math.floor(groupval / 1000000000000.0);
      group2 = Math.floor(groupval / 1000000000) - group1 * 1000;
      group3 = Math.floor(groupval / 1000000) - group1 * 1000000 - group2 * 1000;
      group4 = Math.floor(groupval / 1000) - group1 * 1000000000 - group2 * 1000000 - group3 * 1000;
      group5 = Math.floor(groupval) - group1 * 1000000000000.0 - group2 * 1000000000 - group3 * 1000000 - group4 * 1000;
      groupCount = 1;
      if (group4 > 0) {
        groupCount = 2;
      }
      if (group3 > 0) {
        groupCount = 3;
      }
      if (group2 > 0) {
        groupCount = 4;
      }
      if (group1 > 0) {
        groupCount = 5;
      }
      if (groupCount >= 2 && group5 < 10) {
        group5 = '0' + group5;
      }
      if (groupCount >= 2 && group5 < 100) {
        group5 = '0' + group5;
      }
      if (groupCount >= 3 && group4 < 10) {
        group4 = '0' + group4;
      }
      if (groupCount >= 3 && group4 < 100) {
        group4 = '0' + group4;
      }
      if (groupCount >= 4 && group3 < 10) {
        group3 = '0' + group3;
      }
      if (groupCount >= 4 && group3 < 100) {
        group3 = '0' + group3;
      }
      if (groupCount >= 5 && group2 < 10) {
        group2 = '0' + group2;
      }
      if (groupCount >= 5 && group2 < 100) {
        group2 = '0' + group2;
      }
      if (groupCount == 5) {
        finalNumber = group1 + ',' + group2 + ',' + group3 + ',' + group4 + ',' + group5;
      }
      if (groupCount == 4) {
        finalNumber = group2 + ',' + group3 + ',' + group4 + ',' + group5;
      }
      if (groupCount == 3) {
        finalNumber = group3 + ',' + group4 + ',' + group5;
      }
      if (groupCount == 2) {
        finalNumber = group4 + ',' + group5;
      }
      if (groupCount == 1) {
        finalNumber = group5;
      }
      if (cNegative == true) {
        finalNumber = '-' + finalNumber;
      }
      return finalNumber;
    }

    function toB(reg) {
      if (reg == Infinity || isNaN(reg)) {
        return 0;
      }
      tmpB = reg;
      tmpE = 0;
      while (tmpB > 999999999999.0) {
        tmpB = Math.floor(tmpB / 10);
        tmpE += 1;
      }
      tmpB = Math.floor(tmpB);
      return _root.bCreate(tmpB, tmpE);
    }

    function toR(bn) {
      if (isNaN(bn) || bn == Infinity) {
        return 0;
      }
      return Math.round(_root.bGetB(bn) * Math.pow(10, _root.bGetE(bn)));
    }

    function bReduc(bn) {
      for (;;) {
        if (!(bGetE(bn) > 0 && bGetB(bn) < 100000000000.0)) break;
        tmpE = _root.bGetE(bn) - 1;
        tmpB = _root.bGetB(bn) * 10;
        bn = Math.floor(tmpE * 1000000000000.0 + tmpB);
      }
      return bn;
    }

    function bGetB(bn) {
      return bn % 1000000000000.0;
    }

    function bGetE(bn) {
      return Math.floor(bn / 1000000000000.0);
    }

    function bAdd(bnA, bnB) {
      if (bnB > bnA) {
        tmp = bnB;
        bnB = bnA;
        bnA = tmp;
      }
      tmpEDiff = _root.bGetE(bnA) - _root.bGetE(bnB);
      if (tmpEDiff > 12) {
        return bnA;
      }
      tmpBA = _root.bGetB(bnA);
      tmpBB = Math.floor(_root.bGetB(bnB) / Math.pow(10, tmpEDiff));
      tmpB = tmpBA + tmpBB;
      tmpE = _root.bGetE(bnA);
      if (tmpB > 999999999999.0) {
        tmpB = Math.floor(tmpB / 10);
        tmpE += 1;
      }
      return _root.bCreate(tmpB, tmpE);
    }

    function bSub(bnA, bnB) {
      if (bnB >= bnA) {
        return 0;
      }
      tmpEDiff = _root.bGetE(bnA) - _root.bGetE(bnB);
      if (tmpEDiff > 12) {
        return bnA;
      }
      tmpBA = _root.bGetB(bnA);
      tmpBB = Math.floor(_root.bGetB(bnB) / Math.pow(10, tmpEDiff));
      tmpB = tmpBA - tmpBB;
      tmpE = _root.bGetE(bnA);
      if (tmpB > 999999999999.0) {
        tmpB = Math.floor(tmpB / 10);
        tmpE += 1;
      }
      return _root.bCreate(tmpB, tmpE);
    }

    function bMul2(bnA, regB) {
      tmpB = _root.bGetB(bnA);
      tmpE = _root.bGetE(bnA);
      while (regB >= 10) {
        tmpB *= 10;
        if (tmpB > 999999999999.0) {
          tmpB = Math.floor(tmpB / 10);
          tmpE += 1;
        }
        regB /= 10;
      }
      tmpB *= regB;
      if (tmpB > 999999999999.0) {
        tmpB = Math.floor(tmpB / 10);
        tmpE += 1;
      }
      return _root.bCreate(tmpB, tmpE);
    }

    function bMul(bnA, bnB) {
      return _root.bMul2(_root.bCreate(_root.bGetB(bnA), _root.bGetE(bnA) + _root.bGetE(bnB)), _root.bGetB(bnB));
    }

    function bDiv2(bnA, regB) {
      return _root.bMul2(bnA, 1 / regB);
    }

    function bDiv(bnA, bnB) {
      if (bnA < bnB) {
        return 0;
      }
      return _root.bDiv2(_root.bCreate(_root.bGetB(bnA), _root.bGetE(bnA) - _root.bGetE(bnB)), _root.bGetB(bnB));
    }

    function bPct(bnA, bnB) {
      if (bnA >= bnB) {
        return 100;
      }
      tmpBA = _root.bGetB(bnA);
      tmpEA = _root.bGetE(bnA);
      tmpBB = _root.bGetB(bnB);
      tmpEB = _root.bGetE(bnB);
      if (tmpEB - tmpEA > 4) {
        return 0;
      }
      while (tmpEA < tmpEB) {
        tmpEA += 1;
        tmpBA /= 10;
      }
      return tmpBA * 100 / tmpBB;
    }

    function bPctD(bnA, bnB) {
      tmp = Math.floor(bPct(bnA, bnB) * 100);
      tmpPA = Math.floor(tmp / 100);
      tmpPB = tmp % 100;
      if (tmpPA < 10) {
        tmpPA = '0' + tmpPA;
      }
      if (tmpPB < 10) {
        tmpPB = '0' + tmpPB;
      }
      return tmpPA + '.' + tmpPB + '%';
    }

    function pctD(pct) {
      pct = Math.floor(pct * 100);
      tmpPA = Math.floor(pct / 100);
      tmpPB = tmp % 100;
      if (tmpPB < 10) {
        tmpPB = '0' + tmpPB;
      }
      return tmpPA + '.' + tmpPB + '%';
    }

    function bPow(regA, regB) {
      maxB = Math.floor(Math.log(_root.maxNum) / Math.log(regA) - 1);
      if (regB < maxB) {
        res = Math.pow(regA, regB);
        return _root.toB(res);
      } else {
        return _root.bMul(_root.toB(Math.pow(regA, maxB)), _root.bPow(regA, regB - maxB));
      }
    }

    function bSqrt(bn) {
      tmpB = _root.bGetB(bn);
      tmpE = _root.bGetE(bn);
      if (tmpE % 2 != 0) {
        tmpE -= 1;
        tmpB *= 10;
      }
      tmpI = 1;
      while (tmpI <= 4) {
        if (tmpE >= 2) {
          tmpE -= 2;
          tmpB *= 100;
        } else {
          tmpI = 5;
        }
        ++tmpI;
      }
      tmpE /= 2;
      tmpB = Math.floor(Math.sqrt(tmpB));
      return _root.bCreate(tmpB, tmpE);
    }

    function bCreate(regB, regE) {
      for (;;) {
        if (!(regE > 0 && regB < 100000000000.0)) break;
        regE -= 1;
        regB *= 10;
      }
      if (regE > 990) {
        return 990999999999999.0;
      }
      return Math.floor(regE * 1000000000000.0 + regB);
    }

    function bDisp(bn) {
      tmpB = _root.bGetB(bn);
      tmpB2 = 0;
      tmpE = _root.bGetE(bn);
      if (tmpE == 0) {
        return _root.withComma(tmpB);
      }
      for (;;) {
        if (!(tmpB > 99999 || tmpE % 3 != 1)) break;
        tmpE += 1;
        tmpB = Math.floor(tmpB / 10);
      }
      tmpB2 = tmpB % 100;
      if (tmpB2 < 10) {
        tmpB2 = '0' + tmpB2;
      }
      tmpB = Math.floor(tmpB / 100);
      tmpE += 2;
      return tmpB + '.' + tmpB2 + ' x 10^' + tmpE;
    }

    function toFW(str) {
      str += '';
      str = str.replace('0', '０');
      str = str.replace('1', '１');
      str = str.replace('2', '２');
      str = str.replace('3', '３');
      str = str.replace('4', '４');
      str = str.replace('5', '５');
      str = str.replace('6', '６');
      str = str.replace('7', '７');
      str = str.replace('8', '８');
      str = str.replace('9', '９');
      return str;
    }

    function bDispX(bn) {
      tmpB = _root.bGetB(bn);
      tmpB2 = 0;
      tmpE = _root.bGetE(bn);
      if (tmpE == 0) {
        return _root.withComma(tmpB);
      }
      for (;;) {
        if (!(tmpB > 99999 || tmpE % 3 != 1)) break;
        tmpE += 1;
        tmpB = Math.floor(tmpB / 10);
      }
      tmpB2 = tmpB % 100;
      if (tmpB2 < 10) {
        tmpB2 = '0' + tmpB2;
      }
      tmpB = Math.floor(tmpB / 100);
      tmpE += 2;
      return tmpB + '.' + tmpB2 + ' x 10' + _root.toFW(tmpE);
    }

    function withCommaB(num) {
      if (num < 0) {
        return '-' + _root.bDisp(_root.toB(-num));
      }
      return _root.bDisp(_root.toB(num));
    }

    function withCommaC(num) {
      if (num < 0) {
        return '-' + _root.bDispX(_root.toB(-num));
      }
      return _root.bDispX(_root.toB(num));
    }

    function gainBoost(amount, limit) {
      if (!isNaN(amount)) {
        if (limit == 1) {
          realLimit = _root.boostMax;
        } else {
          if (limit == 2 || limit == 3) {
            realLimit = _root.boostMax * 1.5;
          } else {
            realLimit = _root.boostMax * 2.5;
          }
        }
        if (_root.save.bestLevel <= 5 && _root.save.featureBoostGen != true) {
          realLimit = 100;
        }
        actualGain = amount;
        if (actualGain > realLimit - _root.save.boost) {
          actualGain = realLimit - _root.save.boost;
        }
        if (actualGain < 0) {
          actualGain = 0;
        }
        _root.save.boost += actualGain;
        _root.save.boostPurchased += actualGain;
      }
    }

    function sauceMult(sa) {
      if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
        tMult = 1.2 - _root.save.expSauceAsc[sa] / 1000000 / 20000000 - (_root.save.expSauceAsc[sa] / (_root.save.expSauceAsc[40] + 1)) * 0.2;
        if (sa == 0 || sa == 7) {
          tMult += 0.1;
        }
        if (tMult > 1.2) {
          tMult = 1.2;
        }
        if (tMult < 0.8) {
          tMult = 0.8;
        }
      } else {
        if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
          tMult = 1.2 - _root.save.expSauceAsc[sa] / 1000000 / 10000000 - (_root.save.expSauceAsc[sa] / (_root.save.expSauceAsc[40] + 1)) * 0.2;
          if (sa == 0 || sa == 7) {
            tMult += 0.1;
          }
          if (tMult > 1.1) {
            tMult = 1.1;
          }
          if (tMult < 0.9) {
            tMult = 0.9;
          }
        } else {
          tMult = 1;
        }
      }
      tMult = Math.round(tMult * 100) / 100;
      if (isNaN(tMult)) {
        tMult = 1;
      }
      return tMult;
    }

    function gainEXP(amount, sauce) {
      if (isNaN(sauce)) {
        sauce = _root.house._currentframe;
      }
      if (!isNaN(amount) && amount > 0 && amount != Infinity) {
        if (_root.save.level < 9001 && _root.save.featureBoostAuto == true) {
          boostToGain = 0.05 + (amount / Math.min(_root.requiredExp, 810000000) / Math.pow(_root.save.boost, 1.11)) * 35000;
          if (_root.save.level < 125) {
            boostToGain = boostToGain * _root.save.level / 125;
          }
          if (_root.save.boost < _root.boostMax) {
            boostToGain *= 5;
          }
          if (boostToGain > 10) {
            boostToGain = 10;
          }
          if (_root.save.restTime > 0) {
            boostToGain *= 1.1 + _root.save.restEfficiency[3] * 0.01;
          }
          if (_root.save.permaBanPenalty[28] == 3) {
            boostToGain *= 1.1;
          } else {
            if (_root.save.permaBanPenalty[28] == 2) {
              boostToGain *= 1.06;
            } else {
              if (_root.save.permaBanPenalty[28] == 1) {
                boostToGain *= 1.04;
              }
            }
          }
          _root.gainBoost(boostToGain, 3);
        }
        multiplier = 1;
        if (_root.saveid == 23) {
          multiplier = 0.75;
        }
        if (_root.saveid == 24) {
          multiplier = 0.35;
        }
        if (_root.saveid == 4) {
          multiplier = _root.save.dbExp / 100;
        }
        ascentMult = _root.save.banned / 10;
        if (ascentMult > 0.5) {
          ascentMult = 0.5;
        }
        multiplier += ascentMult;
        multiplier2 = 1;
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Gain 10% more EXP from all sources') {
            multiplier += 0.1;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 20% more EXP from all sources') {
            multiplier += 0.2;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 30% more EXP from all sources') {
            multiplier += 0.3;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 50% more EXP from all sources') {
            multiplier += 0.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 25% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures' && sauce != 0 && sauce != 13 && sauce != 14) {
            multiplier += 0.25;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 50% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures' && sauce != 0 && sauce != 13 && sauce != 14) {
            multiplier += 0.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures' && sauce != 0 && sauce != 13 && sauce != 14) {
            multiplier += 1;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 200% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures' && sauce != 0 && sauce != 13 && sauce != 14) {
            multiplier += 2;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Button Machine' && sauce == 8) {
            multiplier2 *= 1.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Arcade' && sauce == 10) {
            multiplier2 *= 1.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Stadium' && sauce == 11) {
            multiplier2 *= 1.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from TukkunFCG' && sauce == 12) {
            multiplier2 *= 1.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Fishing' && sauce == 22) {
            multiplier2 *= 1.5;
          }
          ++i;
        }
        if (_root.save.hyperDay[1] == _root.todayCode || _root.save.hyperDay[2] == _root.todayCode) {
          if (sauce != 0 && sauce != 13 && sauce != 14) {
            multiplier += 3;
          }
        }
        if (sauce == 0 && _root.save.boostFreeze > 0) {
          multiplier += Math.min(Math.floor(_root.save.totalStupidity / 500), 250) * 0.01;
        }
        multiplier += _root.save.ascStupidity * 0.05;
        multiplier *= multiplier2;
        if (_root.save.restTime > 0) {
          multiplier *= 1.1 + _root.save.restEfficiency[1] * 0.01;
        }
        if (_root.save.careerLevel[1] >= 200 && _root.cursoridle >= 30) {
          multiplier *= 1.03;
        }
        if (_root.save.banPenalty[1] == 1) {
          multiplier *= 1.05;
        }
        if (sauce == 38) {
          multiplier = 1;
        }
        if (_root.save.newbieProgress != 15 && _root.save.bestLevel < 1000) {
          multiplier = 1;
        }
        if (_root.save.level == 9000) {
          multiplier *= 0.5;
        }
        if (_root.save.level == 9001) {
          multiplier *= 0.05;
        }
        if (_root.save.level == 9002) {
          multiplier = 0;
        }
        if (_root.save.doubleExpTime > 0) {
          multiplier *= 1.5;
        }
        multiplier *= _root.sauceMult(sauce);
        if (_root.detectedX == 1) {
          multiplier = 0;
        }
        _root.save.expLag += Math.floor(amount * multiplier);
        _root.save.expGraph[7] += Math.floor(amount);
        _root.save.expGraph2[7] += Math.floor(amount * multiplier);
        _root.save.expSauce[sauce] += Math.floor(amount * multiplier);
        _root.save.expSauceAsc[sauce] += Math.floor(amount * multiplier);
        _root.save.expSauce[40] += Math.floor(amount * multiplier);
        _root.save.expSauceAsc[40] += Math.floor(amount * multiplier);
        if (_root.cursoridle < 30 && _root.save.showGain == true && sauce != 0 && multiplier > 0) {
          _root.mainSummonCount += 1;
          _root.mainAntiLag += 1;
          _root.popContain.attachMovie('scorePopMain', 'scorePopMain' + _root.mainSummonCount, _root.mainAntiLag, {'_x': 480, '_y': 60, 'what': '+' + _root.withComma(Math.floor(amount * multiplier)), 'whatColor': 10092288});
        }
      }
    }

    function gainCoin(amount, sauce) {
      if (isNaN(sauce)) {
        sauce = _root.house._currentframe;
      }
      if (!isNaN(amount) && amount > 0 && amount != Infinity && _root.save.coinOvercap < 300) {
        if (_root.save.level < 9001 && _root.save.featureBoostAuto == true) {
          boostToGain = 0.01 + (amount / Math.min(_root.requiredExp, 810000000) / Math.pow(_root.save.boost, 1.11)) * 7000;
          if (_root.save.level < 125) {
            boostToGain = boostToGain * _root.save.level / 125;
          }
          if (_root.save.boost < _root.boostMax) {
            boostToGain *= 5;
          }
          if (boostToGain > 2) {
            boostToGain = 2;
          }
          if (_root.save.restTime > 0) {
            boostToGain *= 1.1 + _root.save.restEfficiency[3] * 0.01;
          }
          if (_root.save.permaBanPenalty[28] == 3) {
            boostToGain *= 1.1;
          } else {
            if (_root.save.permaBanPenalty[28] == 2) {
              boostToGain *= 1.06;
            } else {
              if (_root.save.permaBanPenalty[28] == 1) {
                boostToGain *= 1.04;
              }
            }
          }
          _root.gainBoost(boostToGain, 3);
        }
        multiplier = 1;
        if (_root.saveid == 24) {
          multiplier = 0.35;
        }
        if (_root.saveid == 4) {
          multiplier = _root.save.dbCoin / 100;
        }
        if (sauce != 0) {
          if (sauce == 6 || sauce == 13) {
            multiplier += Math.min(Math.floor(_root.save.totalStupidity / 250), 100) * 0.01;
          } else {
            if (_root.save.totalStupidity >= 25000) {
              multiplier += Math.min(Math.floor((_root.save.totalStupidity - 25000) / 250), 150) * 0.02 + 1;
            } else {
              multiplier += Math.min(Math.floor(_root.save.totalStupidity / 250), 100) * 0.01;
            }
          }
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Gain 10% more Coins from all sources') {
            multiplier += 0.1;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 20% more Coins from all sources') {
            multiplier += 0.2;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 30% more Coins from all sources') {
            multiplier += 0.3;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 50% more Coins from all sources') {
            multiplier += 0.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 25% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing' && sauce != 0 && sauce != 6 && sauce != 13 && sauce != 22) {
            multiplier += 0.25;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing' && sauce != 0 && sauce != 6 && sauce != 13 && sauce != 22) {
            multiplier += 0.5;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 100% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing' && sauce != 0 && sauce != 6 && sauce != 13 && sauce != 22) {
            multiplier += 1;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 200% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing' && sauce != 0 && sauce != 6 && sauce != 13 && sauce != 22) {
            multiplier += 2;
          }
          ++i;
        }
        if (_root.save.restTime > 0) {
          multiplier *= 1.1 + _root.save.restEfficiency[2] * 0.01;
        }
        if (_root.save.careerLevel[1] >= 200 && _root.cursoridle >= 30) {
          multiplier *= 1.03;
        }
        if (_root.save.banPenalty[2] == 1) {
          multiplier *= 1.1;
        }
        if (_root.save.doubleCoinTime > 0) {
          multiplier *= 1.5;
        }
        if (sauce == 22 || sauce == 38 || sauce == 39) {
          multiplier = 1;
        }
        if (_root.detectedX == 1) {
          multiplier = 0;
        }
        finalAmnt = Math.floor(amount * multiplier);
        _root.save.coinLag += finalAmnt;
        _root.save.coinSauce[sauce] += finalAmnt;
        _root.save.coinSauce[40] += finalAmnt;
        if (_root.save.level < 9000) {
          if (_root.save.permaBanPenalty[8] == 3) {
            _root.save.expLag += Math.floor(finalAmnt * 0.1);
            _root.save.expGraph[7] += Math.floor(amount * 0.1);
            _root.save.expGraph2[7] += Math.floor(finalAmnt * 0.1);
          } else {
            if (_root.save.permaBanPenalty[8] == 2) {
              _root.save.expLag += Math.floor(finalAmnt * 0.06);
              _root.save.expGraph[7] += Math.floor(amount * 0.06);
              _root.save.expGraph2[7] += Math.floor(finalAmnt * 0.06);
            } else {
              if (_root.save.permaBanPenalty[8] == 1) {
                _root.save.expLag += Math.floor(finalAmnt * 0.04);
                _root.save.expGraph[7] += Math.floor(amount * 0.04);
                _root.save.expGraph2[7] += Math.floor(finalAmnt * 0.04);
              }
            }
          }
        }
        if (_root.cursoridle < 30 && _root.save.showGain == true && sauce != 22 && sauce != 0 && sauce != 39) {
          _root.mainSummonCount += 1;
          _root.mainAntiLag += 1;
          _root.popContain.attachMovie('scorePopMain', 'scorePopMain' + _root.mainSummonCount, _root.mainAntiLag, {'_x': 80, '_y': 20, 'what': '+' + _root.withComma(Math.floor(amount * multiplier)), 'whatColor': 16776960});
        }
      }
    }

    function gainGreenCoin(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity && _root.save.greenCoinOvercap < 300) {
        multiplier = 1;
        if (_root.saveid == 4) {
          multiplier = _root.save.dbGreenCoin / 100;
        }
        multiplier += Math.min(Math.floor(_root.save.totalStupidity / 5), 10) * 0.03;
        _root.save.greenCoin += Math.floor(amount * multiplier);
        if (_root.cursoridle < 30 && _root.save.showGain == true) {
          _root.mainSummonCount += 1;
          _root.mainAntiLag += 1;
          _root.popContain.attachMovie('scorePopMain', 'scorePopMain' + _root.mainSummonCount, _root.mainAntiLag, {'_x': 10, '_y': 60, 'what': '+' + _root.withComma(Math.floor(amount * multiplier)), 'whatColor': 65280});
        }
      }
    }

    function gainGreenCoinND(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity && _root.save.greenCoinOvercap < 300) {
        multiplier = 1;
        if (_root.saveid == 4) {
          multiplier = _root.save.dbGreenCoin / 100;
        }
        multiplier += Math.min(Math.floor(_root.save.totalStupidity / 5), 10) * 0.03;
        _root.save.greenCoin += Math.floor(amount * multiplier);
      }
    }

    function gainBlueCoin(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity && _root.save.blueCoinOvercap < 300) {
        multiplier = 1;
        if (_root.saveid == 4) {
          multiplier = _root.save.dbBlueCoin / 100;
        }
        _root.save.blueCoin += Math.floor(amount * multiplier);
        if (_root.cursoridle < 30 && _root.save.showGain == true) {
          _root.mainSummonCount += 1;
          _root.mainAntiLag += 1;
          _root.popContain.attachMovie('scorePopMain', 'scorePopMain' + _root.mainSummonCount, _root.mainAntiLag, {'_x': 100, '_y': 60, 'what': '+' + _root.withComma(Math.floor(amount * multiplier)), 'whatColor': 39423});
        }
      }
    }

    function gainWhiteCoin(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity) {
        multiplier = 1;
        if (Math.random() < Math.min(Math.floor(_root.save.totalStupidity / 500), 20) * 0.05) {
          multiplier += 1;
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Gain 100% more White Coins from all sources except level 9001 reward' && amount < 1000) {
            multiplier += 1;
          }
          ++i;
        }
        _root.save.whiteCoin += Math.floor(amount * multiplier);
        if (_root.save.whiteCoin > 999999) {
          _root.save.whiteCoin = 999999;
        }
        if (Math.floor(amount * multiplier) >= 2) {
          _root.dispNews(163, 'Gained ' + _root.withComma(amount * multiplier) + ' White Coins! You now have ' + _root.withComma(_root.save.whiteCoin) + '.');
        } else {
          _root.dispNews(163, 'Gained 1 White Coin! You now have ' + _root.withComma(_root.save.whiteCoin) + '.');
        }
      }
    }

    function gainWhiteCoinB(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity) {
        multiplier = 1;
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Gain 100% more White Coins from all sources except level 9001 reward' && amount < 1000) {
            multiplier += 1;
          }
          ++i;
        }
        _root.save.whiteCoin += Math.floor(amount * multiplier);
        if (_root.save.whiteCoin > 999999) {
          _root.save.whiteCoin = 999999;
        }
        if (Math.floor(amount * multiplier) >= 2) {
          _root.dispNews(163, 'Gained ' + _root.withComma(amount * multiplier) + ' White Coins! You now have ' + _root.withComma(_root.save.whiteCoin) + '.');
        } else {
          _root.dispNews(163, 'Gained 1 White Coin! You now have ' + _root.withComma(_root.save.whiteCoin) + '.');
        }
      }
    }

    function dispOverGC() {
      var v3 = Math.floor(_root.save.greenCoin / 1000000000);
      var v2 = Math.floor((_root.save.greenCoin % 1000000000) / 10000000);
      if (v2 < 10) {
        v2 = '0' + v2;
      }
      return v3 + '.' + v2 + 'B';
    }

    function dispOverBC() {
      var v3 = Math.floor(_root.save.blueCoin / 1000000);
      var v2 = Math.floor((_root.save.blueCoin % 1000000) / 10000);
      if (v2 < 10) {
        v2 = '0' + v2;
      }
      return v3 + '.' + v2 + 'M';
    }

    function gainEventToken(amount) {
      if (!isNaN(amount) && amount > 0) {
        actualAmount = Math.floor(amount);
        if (actualAmount > _root.eventMaxToken - _root.save.eventTokenToday) {
          actualAmount = _root.eventMaxToken - _root.save.eventTokenToday;
        }
        if (actualAmount < 0) {
          actualAmount = 0;
        }
        _root.save.eventToken += actualAmount;
        _root.save.eventTokenToday += actualAmount;
        if (actualAmount > 0) {
          _root.dispNews(155, 'Event Tokens gained! (+' + _root.withComma(actualAmount) + ')');
        }
      }
    }

    function gainCareerEXP(careerID, amount, mustTurnOn) {
      amount = Math.floor(amount);
      if (!isNaN(amount) && amount > 0) {
        if (_root.save.careerActive[careerID] > 0 || _root.save.careerBoost[careerID] > 0 || mustTurnOn == false) {
          if (_root.save.careerBoost[careerID] > 0 && mustTurnOn != false) {
            if (_root.save.permaBanPenalty[13] == 3) {
              amount = Math.floor(amount * 4);
              _root.dispNews(143, 'Blessed Career - 300% extra Career EXP gained!');
            } else {
              if (_root.save.permaBanPenalty[13] == 2) {
                amount = Math.floor(amount * 3.2);
                _root.dispNews(143, 'Blessed Career - 220% extra Career EXP gained!');
              } else {
                if (_root.save.permaBanPenalty[13] == 1) {
                  amount = Math.floor(amount * 2.8);
                  _root.dispNews(143, 'Blessed Career - 180% extra Career EXP gained!');
                } else {
                  amount = Math.floor(amount * 2);
                  _root.dispNews(143, 'Blessed Career - 100% extra Career EXP gained!');
                }
              }
            }
          }
          amount += Math.floor(amount * Math.min(Math.floor(_root.save.totalStupidity / 250), 20) * 0.03);
          if (_root.save.banPenalty[6] == 1) {
            amount = Math.floor(amount * 1.2);
          }
          i = 1;
          while (i <= _root.todayEvent) {
            yy = _root.clock_year % 10;
            mm = _root.clock_month;
            dd = _root.clock_date;
            if (_root.eventList[yy][mm][dd][i] == '1.5x Career EXP gain') {
              amount = Math.floor(amount * 1.5);
            }
            ++i;
          }
          _root.save.careerEXP[careerID] += amount;
          if (_root.save.questType == 'Career EXP') {
            if (_root.save.questSubtype == 'Career ' + careerID || _root.save.questSubtype == 'Any') {
              _root.save.questCount += amount;
            }
          }
          _root.dispNews(careerID + 130, 'Career EXP gained! (' + careerName[careerID] + ', +' + _root.withComma(amount) + ')');
          careerReq = 100 + _root.save.careerLevel[careerID] * (_root.save.careerLevel[careerID] + 1) * Math.max(1, _root.save.careerLevel[careerID] - 99) * 5;
          if (_root.save.careerEXP[careerID] > 4000000000.0) {
            _root.save.careerEXP[careerID] = 4000000000.0;
          }
          for (;;) {
            if (!(_root.save.careerEXP[careerID] >= careerReq && _root.save.careerLevel[careerID] < 200)) break;
            _root.save.careerEXP[careerID] -= careerReq;
            _root.save.careerLevel[careerID] += 1;
            careerReq = 100 + _root.save.careerLevel[careerID] * (_root.save.careerLevel[careerID] + 1) * Math.max(1, _root.save.careerLevel[careerID] - 99) * 5;
            _root.dispNews(144, 'Career Level Up! (' + careerName[careerID] + ', Lv. ' + _root.save.careerLevel[careerID] + ')');
            if (_root.save.careerLevel[careerID] >= 100) {
              _root.save.mysteryBox[10] += 1;
              _root.dispNews(144, 'You have gained a Supply Crate!');
            }
          }
          for (;;) {
            if (!(_root.save.careerEXP[careerID] >= 40000000 && _root.save.careerLevel[careerID] == 200)) break;
            _root.save.careerEXP[careerID] -= 40000000;
            _root.save.mysteryBox[10] += 1;
            careerReq = 100 + _root.save.careerLevel[careerID] * (_root.save.careerLevel[careerID] + 1) * Math.max(1, _root.save.careerLevel[careerID] - 99) * 5;
            _root.dispNews(144, '40,000,000 [' + careerName[careerID] + '] Career EXP has been exchanged for a Supply Crate!');
          }
        }
        if (careerID == _root.save.curBusiness && mustTurnOn != false) {
          if (_root.save.careerActive[careerID] > 0 || _root.save.careerBoost[careerID] > 0) {
            _root.save.curBusinessActivity += amount;
          } else {
            _root.save.curBusinessActivity += Math.ceil(amount * 0.5);
          }
        }
      }
    }

    function claimReward() {
      if (_root.save.seppukuPenalty > _root.save.seppukuAscension) {
        _root.save.seppukuPenalty -= 1;
      }
      rewardToClaim = Math.ceil(_root.progPercent / 200);
      if (rewardToClaim > 500) {
        rewardToClaim = 500;
      }
      _root.progPercent -= 100 * rewardToClaim;
      _root.save.rewardClaim += 1 * rewardToClaim;
      i = 1;
      while (i <= _root.todayEvent) {
        yy = _root.clock_year % 10;
        mm = _root.clock_month;
        dd = _root.clock_date;
        if (_root.eventList[yy][mm][dd][i] == 'Receive Event Tokens by claiming rewards') {
          _root.gainEventToken(1);
        }
        ++i;
      }
      expToGet = Math.floor(1.4 * _root.save.boost * Math.pow(_root.save.level, 0.6) * (1 + _root.achRedCoin / 10000 + _root.save.petBestLevel / 100 + (_root.save.mainQuestC * 1 + _root.save.mainQuestB * 3 + _root.save.mainQuestA * 6 + _root.save.mainQuestS * 10) / 2500) * rewardToClaim);
      coinToGet = Math.floor(0.35 * _root.save.boost * Math.pow(_root.save.level, 0.6) * (0.8 + Math.random() * 0.4) * (1 + _root.achRedCoin / 10000 + _root.save.petBestLevel / 100 + (_root.save.mainQuestC * 1 + _root.save.mainQuestB * 3 + _root.save.mainQuestA * 6 + _root.save.mainQuestS * 10) / 2500) * rewardToClaim);
      if (_root.save.bestLevel < 35) {
        expToGet = Math.floor(expToGet * 0.5);
        if (expToGet > _root.requiredExp * 2) {
          expToGet = _root.requiredExp * 2;
        }
      }
      greenCoinToGet = 100 * rewardToClaim;
      blueCoinToGet = 0;
      if (_root.save.rewardClaim <= 5) {
        expToGet = 4;
        coinToGet = 1000;
        greenCoinToGet = 200;
        blueCoinToGet = 20;
      }
      if (_root.save.idleMode == false) {
        _root.save.rewardClaimManual += 1 * rewardToClaim;
        greenCoinToGet += 100 * rewardToClaim;
        bcChance = 0.1;
        if (_root.save.permaBanPenalty[2] == 3) {
          bcChance = 0.6;
        } else {
          if (_root.save.permaBanPenalty[2] == 2) {
            bcChance = 0.4;
          }
        }
        if (_root.save.permaBanPenalty[2] == 1) {
          bcChance = 0.3;
        }
        if (Math.random() < bcChance) {
          blueCoinToGet += rewardToClaim;
        }
        if (_root.save.questType == 'Claim Reward') {
          _root.save.questCount += 1 * rewardToClaim;
        }
      } else {
        _root.save.rewardClaimAuto += 1 * rewardToClaim;
        if (Math.random() < 0.1) {
          _root.gainCareerEXP(1, rewardToClaim, true);
        }
        if (_root.save.questType == 'Claim Reward') {
          if (_root.save.questSubtype != 'No Idle Mode') {
            _root.save.questCount += 1 * rewardToClaim;
          }
        }
      }
      doubleMod = 1;
      if (_root.save.featureEpicLicense == true) {
        if (Math.random() < _root.save.epicSkill[1] * 0.01) {
          _root.progPercent += 100 * rewardToClaim;
          _root.dispNews(8, 'Epic Skill [Double Progress] activated!');
        }
        if (Math.random() < _root.save.epicSkill[2] * 0.01) {
          _root.gainBoost(2 * rewardToClaim, 3);
          _root.dispNews(9, 'Epic Skill [Boost Charger] activated!');
        }
        if (Math.random() < _root.save.epicSkill[3] * 0.01) {
          coinToGet += 1000000 * rewardToClaim;
          greenCoinToGet += 500 * rewardToClaim;
          _root.dispNews(10, 'Epic Skill [Money Mastery] activated!');
        }
        if (Math.random() < _root.save.epicSkill[4] * 0.01) {
          _root.save.printerCharge += 1 * rewardToClaim;
          _root.save.totalPrinterCharge += 1 * rewardToClaim;
          _root.dispNews(12, 'Epic Skill [Battery Booster] activated!');
        }
        if (Math.random() < _root.save.epicSkill[5] * 0.01) {
          _root.save.fishFatigue -= 1 * rewardToClaim;
          _root.dispNews(12, 'Epic Skill [Fanatical Fisher] activated!');
        }
        if (Math.random() < _root.save.epicSkill[6] * 0.01) {
          doubleMod = 2;
          _root.dispNews(13, 'Epic Skill [Module Master] activated!');
        }
        if (Math.random() < _root.save.epicSkill[7] * 0.01) {
          _root.save.botEnergy += 1 * rewardToClaim;
          if (_root.save.botEnergy > 359999) {
            _root.save.botEnergy = 359999;
          }
          _root.dispNews(184, 'Epic Skill [Cyborg Charger] activated!');
        }
      }
      i = 1;
      while (i <= 9) {
        mcModif = 1;
        j = 1;
        while (j <= 9) {
          if (i != j && _root.save.progModuleType[i] == _root.save.progModuleType[j]) {
            mcModif = 0.9;
          }
          ++j;
        }
        if (Math.random() < (_root.save.progModuleChance[i] / 10000) * doubleMod * mcModif) {
          tempMod = _root.save.progModuleType[i];
          if (tempMod == 1) {
            expToGet += Math.floor(_root.save.progModuleEffect[i] * 0.014 * _root.save.boost * Math.pow(_root.save.level, 0.6) * (1 + _root.achRedCoin / 10000 + _root.save.petBestLevel / 100 + (_root.save.mainQuestC * 1 + _root.save.mainQuestB * 3 + _root.save.mainQuestA * 6 + _root.save.mainQuestS * 10) / 2500) * rewardToClaim);
          } else {
            if (tempMod == 2) {
              coinToGet += Math.floor(_root.save.progModuleEffect[i] * 0.0035 * _root.save.boost * Math.pow(_root.save.level, 0.6) * (0.8 + Math.random() * 0.4) * (1 + _root.achRedCoin / 10000 + _root.save.petBestLevel / 100 + (_root.save.mainQuestC * 1 + _root.save.mainQuestB * 3 + _root.save.mainQuestA * 6 + _root.save.mainQuestS * 10) / 2500) * rewardToClaim);
            } else {
              if (tempMod == 3) {
                greenCoinToGet += _root.save.progModuleEffect[i] * rewardToClaim;
              } else {
                if (tempMod == 4) {
                  blueCoinToGet += _root.save.progModuleEffect[i] * rewardToClaim;
                } else {
                  if (tempMod == 5) {
                    _root.gainWhiteCoin(_root.save.progModuleEffect[i] * rewardToClaim);
                  } else {
                    if (tempMod == 6) {
                      _root.gainBoost(_root.save.progModuleEffect[i] * rewardToClaim, 3);
                    } else {
                      if (tempMod == 7) {
                        if (_root.save.boostFreeze <= 0 || Math.random() < 0.1 || rewardToClaim >= 10) {
                          _root.save.boostFreeze += _root.save.progModuleEffect[i] * Math.ceil(rewardToClaim * 0.1);
                        }
                      } else {
                        if (tempMod == 8) {
                          _root.save.doubleExpTime += _root.save.progModuleEffect[i] * rewardToClaim;
                        } else {
                          if (tempMod == 9) {
                            _root.save.doubleCoinTime += _root.save.progModuleEffect[i] * rewardToClaim;
                          } else {
                            if (tempMod == 10) {
                              tr = 1;
                              while (tr <= 50) {
                                if (_root.save.gardenTrees[tr] > 0 && _root.save.gardenTreeModuleProc[tr] < 10000000 && _root.save.gardenTrees[tr] != 1) {
                                  _root.save.gardenHarvestValue[tr] += _root.save.progModuleEffect[i] * rewardToClaim;
                                  _root.save.gardenTreeModuleProc[tr] += _root.save.progModuleEffect[i] * rewardToClaim;
                                  if (_root.save.gardenTreeModuleProc[tr] > 10000000) {
                                    _root.save.gardenHarvestValue[tr] -= _root.save.gardenTreeModuleProc[tr] - 10000000;
                                    _root.save.gardenTreeModuleProc[tr] = 10000000;
                                  }
                                }
                                ++tr;
                              }
                            } else {
                              if (tempMod == 11) {
                                _root.save.petMana += _root.save.progModuleEffect[i] * rewardToClaim;
                              } else {
                                if (tempMod == 12) {
                                  _root.save.gardenPoint += _root.save.progModuleEffect[i] * rewardToClaim;
                                } else {
                                  if (tempMod == 13) {
                                    _root.save.gardenFruit += _root.save.progModuleEffect[i] * rewardToClaim;
                                  } else {
                                    if (tempMod == 14) {
                                      if (_root.house._currentframe == 7 && !isNaN(_root.hpRecover) && _root.hpRecover > 0 && _root.save.arenaHealth > 0 && !isNaN(_root.maxHealth)) {
                                        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
                                          _root.save.arenaHealth += Math.floor(_root.hpRecover * _root.save.progModuleEffect[i] * rewardToClaim / 100);
                                          if (_root.save.arenaHealth > _root.maxHealth) {
                                            _root.save.arenaHealth = _root.maxHealth;
                                          }
                                        }
                                      }
                                    } else {
                                      if (tempMod == 15) {
                                        if (_root.house._currentframe == 7 && !isNaN(_root.hpRecover) && _root.hpRecover > 0 && _root.save.arenaHealth > 0 && !isNaN(_root.maxMana)) {
                                          if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
                                            _root.save.arenaMana += Math.floor(_root.mpRecover * _root.save.progModuleEffect[i] * rewardToClaim / 100);
                                            if (_root.save.arenaMana > _root.maxMana) {
                                              _root.save.arenaMana = _root.maxMana;
                                            }
                                          }
                                        }
                                      } else {
                                        if (tempMod == 16) {
                                          if (_root.house._currentframe == 7 && !isNaN(_root.hpRecover) && _root.hpRecover > 0 && _root.save.arenaHealth > 0) {
                                            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
                                              _root.save.arenaRage += _root.save.progModuleEffect[i] * rewardToClaim;
                                            }
                                          }
                                        } else {
                                          if (tempMod == 17) {
                                            _root.save.arenaPixel += _root.save.progModuleEffect[i] * rewardToClaim * _root.save.arenaLevel;
                                          } else {
                                            if (tempMod == 18) {
                                              _root.save.arenaCraft += _root.save.progModuleEffect[i] * rewardToClaim * _root.save.arenaLevel;
                                            } else {
                                              if (tempMod == 19) {
                                                _root.save.arenaSuperiorCraft += _root.save.progModuleEffect[i] * rewardToClaim;
                                              } else {
                                                if (tempMod == 20) {
                                                  _root.save.arenaUnobtainium += _root.save.progModuleEffect[i] * rewardToClaim;
                                                } else {
                                                  if (tempMod == 21) {
                                                    _root.save.arenaEnhancerFragment += _root.save.progModuleEffect[i] * rewardToClaim;
                                                  } else {
                                                    if (tempMod == 22) {
                                                      _root.save.arenaBacon += _root.save.progModuleEffect[i] * rewardToClaim;
                                                    } else {
                                                      if (tempMod == 23) {
                                                        _root.save.arenaCrystal1 += _root.save.progModuleEffect[i] * rewardToClaim;
                                                      } else {
                                                        if (tempMod == 24) {
                                                          _root.save.arenaCrystal2 += _root.save.progModuleEffect[i] * rewardToClaim;
                                                        } else {
                                                          if (tempMod == 25) {
                                                            _root.save.buttonPurple += _root.save.progModuleEffect[i] * rewardToClaim;
                                                          } else {
                                                            if (tempMod == 26) {
                                                              modCareer = random(12) + 1;
                                                              if (_root.save.careerLevel[modCareer] >= 100) {
                                                                _root.gainCareerEXP(modCareer, _root.save.progModuleEffect[i] * rewardToClaim * 2, false);
                                                              } else {
                                                                _root.gainCareerEXP(modCareer, _root.save.progModuleEffect[i] * rewardToClaim, false);
                                                              }
                                                            } else {
                                                              if (tempMod == 27) {
                                                                _root.save.arcade100kMedal += _root.save.progModuleEffect[i] * rewardToClaim;
                                                              } else {
                                                                if (tempMod == 28) {
                                                                  _root.save.stadiumToken += _root.save.progModuleEffect[i] * rewardToClaim;
                                                                } else {
                                                                  if (tempMod == 29) {
                                                                    _root.save.fcgCash += _root.save.progModuleEffect[i] * rewardToClaim;
                                                                  } else {
                                                                    if (tempMod >= 30 && tempMod <= 39) {
                                                                      _root.save.lolGems[tempMod - 29] += _root.save.progModuleEffect[i] * rewardToClaim;
                                                                    } else {
                                                                      if (tempMod == 40) {
                                                                        if (_root.save.awesomeEnergy < _root.save.awesomeMaxEnergy * 5 + 15) {
                                                                          _root.save.awesomeEnergyNext -= _root.save.progModuleEffect[i] * rewardToClaim;
                                                                        }
                                                                      } else {
                                                                        if (tempMod == 41) {
                                                                          _root.save.specialPetFood += _root.save.progModuleEffect[i] * rewardToClaim;
                                                                        } else {
                                                                          if (tempMod == 42) {
                                                                            _root.save.fishFatigue -= _root.save.progModuleEffect[i] * rewardToClaim;
                                                                          } else {
                                                                            if (tempMod == 43) {
                                                                              _root.save.totalMute += rewardToClaim;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        doubleMod = 1;
        ++i;
      }
      if (_root.save.gardenBreed1 != 0) {
        _root.save.gardenResearch += 1 * rewardToClaim;
      }
      if (_root.save.idleMode == false) {
        if (_root.save.permaBanPenalty[17] == 3) {
          expToGet = Math.floor(expToGet * 1.5);
        } else {
          if (_root.save.permaBanPenalty[17] == 2) {
            expToGet = Math.floor(expToGet * 1.3);
          } else {
            if (_root.save.permaBanPenalty[17] == 1) {
              expToGet = Math.floor(expToGet * 1.2);
            }
          }
        }
        if (_root.save.permaBanPenalty[26] == 3) {
          coinToGet = Math.floor(coinToGet * 1.5);
        } else {
          if (_root.save.permaBanPenalty[26] == 2) {
            coinToGet = Math.floor(coinToGet * 1.3);
          } else {
            if (_root.save.permaBanPenalty[26] == 1) {
              coinToGet = Math.floor(coinToGet * 1.2);
            }
          }
        }
      } else {
        if (_root.save.idleMode == true) {
          if (_root.save.permaBanPenalty[25] == 3) {
            expToGet = Math.floor(expToGet * 1.1);
          } else {
            if (_root.save.permaBanPenalty[25] == 2) {
              expToGet = Math.floor(expToGet * 1.06);
            } else {
              if (_root.save.permaBanPenalty[25] == 1) {
                expToGet = Math.floor(expToGet * 1.04);
              }
            }
          }
          if (_root.save.permaBanPenalty[36] == 3) {
            coinToGet = Math.floor(coinToGet * 1.1);
          } else {
            if (_root.save.permaBanPenalty[36] == 2) {
              coinToGet = Math.floor(coinToGet * 1.06);
            } else {
              if (_root.save.permaBanPenalty[36] == 1) {
                coinToGet = Math.floor(coinToGet * 1.04);
              }
            }
          }
        }
      }
      if (_root.saveid == 26) {
        expToGet = Math.floor(expToGet * 20);
        coinToGet = Math.floor(coinToGet * 2);
      }
      if (_root.save.permaBanPenalty[2] == 3) {
        greenCoinToGet += 1000 * rewardToClaim;
      } else {
        if (_root.save.permaBanPenalty[2] == 2) {
          greenCoinToGet += 600 * rewardToClaim;
        } else {
          if (_root.save.permaBanPenalty[2] == 1) {
            greenCoinToGet += 400 * rewardToClaim;
          }
        }
      }
      _root.gainEXP(expToGet, 0);
      _root.gainCoin(coinToGet, 0);
      _root.gainGreenCoinND(greenCoinToGet);
      _root.gainBlueCoin(blueCoinToGet);
      if (rewardToClaim > 1) {
        _root.dispNews(5, _root.withComma(rewardToClaim) + ' rewards claimed! (+' + _root.withComma(expToGet) + ' EXP | +' + _root.withComma(coinToGet) + ' Coins)');
      } else {
        _root.dispNews(4, 'Reward claimed! (+' + _root.withComma(expToGet) + ' EXP | +' + _root.withComma(coinToGet) + ' Coins)');
      }
      if (_root.save.level > 10) {
        if (Math.random() < (0.01 - _root.save.boost / 100000) * rewardToClaim) {
          _root.gainBoost(5, 3);
          _root.dispNews(6, 'Yay, free boost! (+5% Boost)');
        }
        if (Math.random() < 0.05) {
          if (_root.kongregate_username != 'Guest' && _root.kongregate_username != undefined) {
            tempAmnt = Math.floor(1.4 * _root.save.boost * Math.pow(_root.save.level, 0.6) * (1 + _root.achRedCoin / 10000 + _root.save.petBestLevel / 100 + (_root.save.mainQuestC * 1 + _root.save.mainQuestB * 3 + _root.save.mainQuestA * 6 + _root.save.mainQuestS * 10) / 2500) * rewardToClaim);
            _root.gainEXP(tempAmnt, 0);
            _root.dispNews(7, 'Additional reward for being ' + _root.kongregate_username + '! (+' + _root.withComma(tempAmnt) + ' EXP)');
          }
        }
      }
    }

    function harvestTree(slot, harvestAll) {
      tmul = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
      if (isNaN(_root.save.gardenHarvestValue[slot])) {
        _root.save.gardenHarvestValue[slot] = 0;
      }
      _root.save.curForestDestroyer = 0;
      _root.save.harvestCount += 1;
      _root.save.gardenMastery[_root.save.gardenTrees[slot]] += 1;
      if (_root.save.questType == 'Harvest') {
        if (_root.save.questSubtype == 'Any') {
          _root.save.questCount += 1;
        }
      }
      plotExpToEarn = _root.save.gardenTreeExp[slot];
      if (_root.save.gardenTrees[slot] == 1) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Free Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 2) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Blue Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 3) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Pink Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 4) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Green Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 5) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Lime Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 6) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Yellow Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 7) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Red Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 8) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Black Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenTrees[slot] == 9) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Holiday Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (_root.save.gardenCapacity >= 16 && slot <= 25) {
        if (Math.random() < 0.01 * Math.sqrt(plotExpToEarn)) {
          if (Math.random() < 0.3333333333333333) {
            _root.save.gardenSeed[26] += 1;
            _root.dispNews(22, 'Gained Seed #1 for Another Garden!');
          } else {
            if (Math.random() < 0.5) {
              _root.save.gardenSeed[51] += 1;
              _root.dispNews(22, 'Gained Seed #26 for Another Garden!');
            } else {
              _root.save.gardenSeed[76] += 1;
              _root.dispNews(22, 'Gained Seed #51 for Another Garden!');
            }
          }
        }
      }
      if (slot >= 26 && slot <= 50) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Another Garden Tree') {
            _root.save.questCount += 1;
          }
        }
        if (Math.random() < 0.15 && _root.save.gardenSeed[_root.save.gardenTrees[slot]] < 99) {
          _root.save.gardenSeed[_root.save.gardenTrees[slot]] += 1;
          _root.dispNews(22, 'Gained Seed #' + (_root.save.gardenTrees[slot] - 25) + ' for Another Garden!');
        }
        if (Math.random() < 0.01 * plotExpToEarn) {
          fruitToEarn = 1;
          if (_root.save.permaBanPenalty[14] == 3) {
            fruitToEarn = 6;
          } else {
            if (_root.save.permaBanPenalty[14] == 2) {
              fruitToEarn = 4;
            } else {
              if (_root.save.permaBanPenalty[14] == 1) {
                fruitToEarn = 3;
              }
            }
          }
          _root.save.gardenFruit += fruitToEarn;
          if (harvestAll != true) {
            _root.dispNews(21, 'Gained ' + fruitToEarn + ' Randomfruit! You now have: ' + _root.withComma(_root.save.gardenFruit));
          } else {
            harvestSummaryFruit += fruitToEarn;
          }
        }
      }
      if (slot >= 51) {
        if (_root.save.questType == 'Harvest') {
          if (_root.save.questSubtype == 'Another Another Garden Tree') {
            _root.save.questCount += 1;
          }
        }
      }
      if (Math.random() < 0.01 + 0.002 * plotExpToEarn) {
        _root.gainWhiteCoin(1);
      }
      _root.save.gardenSlotEXP[slot] += plotExpToEarn;
      _root.save.gardenEXP += plotExpToEarn;
      _root.save.gardenPoint += plotExpToEarn;
      i = 1;
      while (i <= _root.todayEvent) {
        yy = _root.clock_year % 10;
        mm = _root.clock_month;
        dd = _root.clock_date;
        if (_root.eventList[yy][mm][dd][i] == 'Receive Event Tokens by harvesting trees') {
          _root.gainEventToken(plotExpToEarn / 5);
        }
        ++i;
      }
      if (harvestAll != true) {
        careerToGain = Math.floor(5 + plotExpToEarn * (1 + _root.save.gardenSlotEXP[slot] / 50000));
        if (careerToGain > 5 + 3 * plotExpToEarn) {
          careerToGain = 5 + 3 * plotExpToEarn;
        }
        if (slot >= 26 && slot <= 50) {
          careerToGain = Math.floor(careerToGain * 2);
        }
        if (slot >= 51) {
          careerToGain = Math.floor(careerToGain * 3);
        }
        _root.gainCareerEXP(2, careerToGain, true);
        _root.dispNews(19, 'Tree #' + slot + ' harvested! (+' + _root.withComma(_root.save.gardenHarvestValue[slot] * tmul * (1 + _root.curCareerLevel[2] * 0.005)) + ' Coins)');
        if (slot <= 25) {
          _root.gainEXP(_root.save.gardenHarvestValue[slot] * tmul * (0.3 + _root.curCareerLevel[2] * 0.0015) * (1 + _root.save.petStat[1] * 0.002), 6);
        } else {
          if (slot <= 50) {
            _root.gainEXP(_root.save.gardenHarvestValue[slot] * tmul * (0.45 + _root.curCareerLevel[2] * 0.00225) * (1 + _root.save.petStat[1] * 0.002), 6);
          } else {
            _root.gainEXP(_root.save.gardenHarvestValue[slot] * tmul * (0.6 + _root.curCareerLevel[2] * 0.003) * (1 + _root.save.petStat[1] * 0.002), 6);
          }
        }
        _root.gainCoin(Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (1 + _root.curCareerLevel[2] * 0.005), 6));
        _root.save.harvestCoin += Math.floor(_root.save.gardenHarvestValue[slot] * (1 + _root.curCareerLevel[2] * 0.005));
        _root.save.gardenRecentTime[slot] = _root.systemtimenow;
        greenCoinToEarn = Math.ceil(250 + plotExpToEarn * 50);
        _root.gainGreenCoin(greenCoinToEarn);
        blueCoinToEarn = Math.ceil(0.5 + plotExpToEarn * 0.1);
        if (_root.save.gardenTrees[slot] == 1) {
          blueCoinToEarn = 1;
        }
        _root.gainBlueCoin(blueCoinToEarn);
      } else {
        careerToGain = Math.floor(5 + plotExpToEarn * (1 + _root.save.gardenSlotEXP[slot] / 50000));
        if (careerToGain > 5 + 3 * plotExpToEarn) {
          careerToGain = 5 + 3 * plotExpToEarn;
        }
        if (slot >= 26 && slot <= 50) {
          careerToGain = Math.floor(careerToGain * 2);
        }
        if (slot >= 51) {
          careerToGain = Math.floor(careerToGain * 3);
        }
        harvestSummaryCareer += careerToGain;
        harvestSummaryCount += 1;
        harvestSummaryCoin += Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (1 + _root.curCareerLevel[2] * 0.005));
        if (slot <= 25) {
          harvestSummaryEXP += Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (0.3 + _root.curCareerLevel[2] * 0.0015) * (1 + _root.save.petStat[1] * 0.002));
        } else {
          if (slot <= 50) {
            harvestSummaryEXP += Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (0.45 + _root.curCareerLevel[2] * 0.00225) * (1 + _root.save.petStat[1] * 0.002));
          } else {
            harvestSummaryEXP += Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (0.6 + _root.curCareerLevel[2] * 0.003) * (1 + _root.save.petStat[1] * 0.002));
          }
        }
        _root.save.harvestCoin += Math.floor(_root.save.gardenHarvestValue[slot] * tmul * (1 + _root.curCareerLevel[2] * 0.005));
        _root.save.gardenRecentTime[slot] = _root.systemtimenow;
        greenCoinToEarn = Math.ceil(250 + plotExpToEarn * 50);
        harvestSummaryGreenCoin += greenCoinToEarn;
        blueCoinToEarn = Math.ceil(0.5 + plotExpToEarn * 0.1);
        if (_root.save.gardenTrees[slot] == 1) {
          blueCoinToEarn = 1;
        }
        harvestSummaryBlueCoin += blueCoinToEarn;
      }
    }

    function harvestAllTree() {
      harvestSummaryCount = 0;
      harvestSummaryEXP = 0;
      harvestSummaryCoin = 0;
      harvestSummaryGreenCoin = 0;
      harvestSummaryBlueCoin = 0;
      harvestSummaryCareer = 0;
      harvestSummaryFruit = 0;
      tr = 1;
      while (tr <= _root.save.gardenCapacity) {
        if (_root.save.gardenTrees[tr] > 0) {
          if (_root.save.gardenRecentTime[tr] + _root.save.gardenHarvestTime[tr] - _root.systemtimenow <= 0) {
            _root.harvestTree(tr, true);
          }
        }
        ++tr;
      }
      _root.gainEXP(harvestSummaryEXP, 6);
      _root.gainCoin(harvestSummaryCoin, 6);
      _root.gainGreenCoin(harvestSummaryGreenCoin);
      _root.gainBlueCoin(harvestSummaryBlueCoin);
      _root.gainCareerEXP(2, harvestSummaryCareer, true);
      if (harvestSummaryCount >= 2) {
        _root.dispNews(19, harvestSummaryCount + ' trees harvested! (+' + _root.withComma(harvestSummaryCoin) + ' Coins)');
      } else {
        if (harvestSummaryCount == 1) {
          _root.dispNews(19, '1 tree harvested! (+' + _root.withComma(harvestSummaryCoin) + ' Coins)');
        }
      }
      if (harvestSummaryFruit >= 1) {
        _root.dispNews(21, 'Gained ' + harvestSummaryFruit + ' Randomfruit! You now have: ' + _root.withComma(_root.save.gardenFruit));
      }
    }

    function printMoney(moneyToPrintX) {
      _root.printPercent = 0;
      if (_root.save.printerCharge > 0) {
        if (_root.save.questType == 'Print') {
          if (_root.save.questSubtype == 'Any') {
            _root.save.questCount += 1;
          }
        }
        _root.save.printerCharge -= 1;
        if (_root.save.printerCharge > 160) {
          _root.save.printerCharge -= 4;
        }
        if (_root.save.printerCharge > 1000) {
          _root.save.printerCharge = 1000;
        }
        if (Math.random() < Math.min(Math.floor(_root.save.totalStupidity / 20), 25) * 0.04) {
          _root.gainBlueCoin(1);
        }
        _root.dispNews(75, 'Money printed! (+' + _root.withComma(moneyToPrintX) + ' Coins)');
        critPrintChance = 0.01;
        if (_root.save.permaBanPenalty[29] == 3) {
          critPrintChance *= 6;
        } else {
          if (_root.save.permaBanPenalty[29] == 2) {
            critPrintChance *= 4;
          } else {
            if (_root.save.permaBanPenalty[29] == 1) {
              critPrintChance *= 3;
            }
          }
        }
        if (Math.random() < critPrintChance) {
          greenCoinToGain = Math.floor(moneyToPrintX * 0.002) * 10;
          _root.gainGreenCoin(greenCoinToGain);
          _root.dispNews(76, 'CRITICAL PRINT! (+' + _root.withComma(greenCoinToGain) + ' Green Coins)');
          if (_root.save.questType == 'Print') {
            if (_root.save.questSubtype == 'Critical') {
              _root.save.questCount += 1;
            }
          }
        }
      }
      if (_root.save.printerCharge > 0 && _root.save.printerCharge < 10) {
        _root.dispNews(156, 'Your Printer Battery is low.');
      }
      if (_root.save.printerCharge <= 0) {
        _root.dispNews(157, 'Your Printer Battery has run out. Charge it now!');
      }
      _root.gainCoin(moneyToPrintX, 9);
      _root.save.totalPrinterMoney += moneyToPrintX;
      if (_root.save.totalPrinterMoney >= 1000000) {
        _root.save.totalPrinterMillion += Math.floor(_root.save.totalPrinterMoney / 1000000);
        _root.save.totalPrinterMoney %= 1000000;
      }
    }

    function toHex(dec) {
      return dec.toString(16);
    }

    function jewk(str) {
      if (str.length == 1) {
        return '<font color=\'#FFFF00\'>' + str + ' </font>';
      }
      var v6 = '';
      var v4;
      var v5 = str.length;
      var v2 = 0;
      var v3 = 0;
      v4 = 0;
      while (v4 < v5) {
        if (v4 > (v5 - 1) / 2) {
          v2 = Math.round(((v5 - 1 - v4) / (v5 - 1)) * 300) + 100;
          v3 = 250;
        } else {
          v2 = 250;
          v3 = Math.round((v4 / (v5 - 1)) * 300) + 100;
        }
        if (v2 > 250) {
          v2 = 250;
        }
        if (v3 > 250) {
          v3 = 250;
        }
        if (v2 < 0) {
          v2 = 0;
        }
        if (v3 < 0) {
          v3 = 0;
        }
        v6 += '<font color=\'#' + _root.toHex(v2 * 65536 + v3 * 256) + '\'>' + substring(str, v4 + 1, 1) + '</font>';
        ++v4;
      }
      return v6;
    }

    function jewkB(str) {
      if (str.length == 1) {
        return '<font color=\'#FFFF00\'>' + str + ' </font>';
      }
      var v6 = '';
      var v4;
      var v5 = str.length;
      var v2 = 0;
      var v3 = 0;
      v4 = 0;
      while (v4 < v5) {
        if (v4 > (v5 - 1) / 2) {
          v2 = Math.round(((v5 - 1 - v4) / (v5 - 1)) * 200) + 150;
          v3 = 250;
        } else {
          v2 = 250;
          v3 = Math.round((v4 / (v5 - 1)) * 200) + 150;
        }
        if (v2 > 250) {
          v2 = 250;
        }
        if (v3 > 250) {
          v3 = 250;
        }
        if (v2 < 0) {
          v2 = 0;
        }
        if (v3 < 0) {
          v3 = 0;
        }
        v6 += '<font color=\'#' + _root.toHex(v2 * 65536 + v3 * 256) + '\'>' + substring(str, v4 + 1, 1) + '</font>';
        ++v4;
      }
      return v6;
    }

    function jewkC(str) {
      if (str.length == 1) {
        return '<font color=\'#FFFF00\'>' + str + ' </font>';
      }
      var v6 = '';
      var v4;
      var v5 = str.length;
      var v2 = 0;
      var v3 = 0;
      v4 = 0;
      while (v4 < v5) {
        if (v4 > (v5 - 1) / 2) {
          v2 = Math.round(((v5 - 1 - v4) / (v5 - 1)) * 200) + 150;
          v3 = 250;
          blue = 0;
        } else {
          v2 = 250;
          v3 = 250;
          blue = Math.round((((v5 - 1) / 2 - v4) / (v5 - 1)) * 250);
        }
        if (v2 > 250) {
          v2 = 250;
        }
        if (v3 > 250) {
          v3 = 250;
        }
        if (blue > 250) {
          blue = 250;
        }
        if (v2 < 0) {
          v2 = 0;
        }
        if (v3 < 0) {
          v3 = 0;
        }
        if (blue < 0) {
          blue = 0;
        }
        v6 += '<font color=\'#' + _root.toHex(v2 * 65536 + v3 * 256 + blue) + '\'>' + substring(str, v4 + 1, 1) + '</font>';
        ++v4;
      }
      return v6;
    }

    function clearChallenge() {
      if (_root.saveid >= 20) {
        _root.save.challengeToken = Math.floor(_root.saveid * (_root.saveid + 1) * (_root.saveid - 7) * 156.4);
      }
    }

    function scrollUp() {
      _root.scrollingDir = -1;
    }

    function scrollDown() {
      _root.scrollingDir = 1;
    }

    function calcPerf(op) {
      tempCPerf = 0;
      if (op == 0) {
        tempCPerf = 40 + _root.save.botLevel * 1;
      } else {
        if (op == 1) {
          tempCPerf = Math.floor(100 + _root.save.highPong * 0.0065 + Math.pow(_root.save.totalPong / 100000, 0.4) * 10) * 100;
        } else {
          if (op == 2) {
            tempCPerf = Math.floor(100 + _root.save.highAvoidance * 0.0065 + Math.pow(_root.save.totalAvoidance / 100000, 0.4) * 10) * 100;
          } else {
            if (op == 3) {
              tempCPerf = Math.floor(100 + _root.save.highMath * 0.0065 + Math.pow(_root.save.totalMath / 100000, 0.4) * 10) * 100;
            } else {
              if (op == 4) {
                tempCPerf = Math.floor(100 + _root.save.highWhack * 0.0065 + Math.pow(_root.save.totalWhack / 100000, 0.4) * 10) * 100;
              } else {
                if (op == 5) {
                  tempCPerf = Math.floor(100 + _root.save.highCount * 0.0065 + Math.pow(_root.save.totalCount / 100000, 0.4) * 10) * 100;
                } else {
                  if (op == 6) {
                    tempCPerf = Math.floor(100 + _root.save.highMind * 0.0065 + Math.pow(_root.save.totalMind / 100000, 0.4) * 10) * 100;
                  } else {
                    if (op == 7) {
                      tempCPerf = Math.floor(100 + _root.save.highBalance * 0.0065 + Math.pow(_root.save.totalBalance / 100000, 0.4) * 10) * 100;
                    } else {
                      if (op == 8) {
                        tempCPerf = Math.floor(50 + _root.save.stadiumAbilityCost / 4 + Math.pow(_root.save.stadiumRace, 0.3) * 10 + Math.pow(_root.save.stadiumImpossibleRace, 0.4) * 15) / 10;
                      } else {
                        if (op == 9) {
                          tempCPerf = Math.floor(50 + _root.save.stadiumAbilityCost / 4 + Math.pow(_root.save.stadiumItem, 0.3) * 10 + Math.pow(_root.save.stadiumImpossibleItem, 0.4) * 15) / 10;
                        } else {
                          if (op == 10) {
                            tempCPerf = Math.floor(50 + _root.save.stadiumAbilityCost / 8 + _root.save.stadiumBestDeathMatch * 0.65 + Math.pow(_root.save.stadiumDeathMatch, 0.5) * 2);
                          } else {
                            if (op == 11) {
                              tempCPerf = Math.floor(50 + 500 * _root.save.fcgMaxStreak0 / (_root.save.fcgMaxStreak0 + 25) + Math.pow(_root.save.fcgLevel0, 0.4) * 15 + _root.save.fcgLevel * 10) / 10;
                            } else {
                              if (op == 12) {
                                tempCPerf = Math.floor(45 + 500 * _root.save.fcgMaxStreak1 / (_root.save.fcgMaxStreak1 + 25) + Math.pow(_root.save.fcgLevel1, 0.4) * 14 + _root.save.fcgLevel * 9) / 10;
                              } else {
                                if (op == 13) {
                                  tempCPerf = Math.floor(40 + 500 * _root.save.fcgMaxStreak2 / (_root.save.fcgMaxStreak2 + 25) + Math.pow(_root.save.fcgLevel2, 0.4) * 13 + _root.save.fcgLevel * 8) / 10;
                                } else {
                                  if (op == 14) {
                                    tempCPerf = Math.floor(35 + 500 * _root.save.fcgMaxStreak3 / (_root.save.fcgMaxStreak3 + 25) + Math.pow(_root.save.fcgLevel3, 0.4) * 12 + _root.save.fcgLevel * 7) / 10;
                                  } else {
                                    if (op == 15) {
                                      tempCPerf = Math.floor(30 + 500 * _root.save.fcgMaxStreak4 / (_root.save.fcgMaxStreak4 + 25) + Math.pow(_root.save.fcgLevel4, 0.4) * 11 + _root.save.fcgLevel * 6) / 10;
                                    } else {
                                      if (op == 16) {
                                        tempCPerf = Math.floor(25 + 500 * _root.save.fcgMaxStreak6 / (_root.save.fcgMaxStreak6 + 25) + Math.pow(_root.save.fcgLevel6, 0.3) * 9 + _root.save.fcgLevel * 4) / 10;
                                      } else {
                                        if (op == 17) {
                                          tempCPerf = Math.floor(20 + 500 * _root.save.fcgMaxStreak7 / (_root.save.fcgMaxStreak7 + 25) + Math.pow(_root.save.fcgLevel7, 0.3) * 8 + _root.save.fcgLevel * 3) / 10;
                                        } else {
                                          if (op == 18) {
                                            tempCPerf = Math.floor(15 + 500 * _root.save.fcgMaxStreak8 / (_root.save.fcgMaxStreak8 + 25) + Math.pow(_root.save.fcgLevel8, 0.3) * 7 + _root.save.fcgLevel * 2) / 10;
                                          } else {
                                            if (op == 19) {
                                              tempCPerf = Math.floor(10 + 500 * _root.save.fcgMaxStreak10 / (_root.save.fcgMaxStreak10 + 25) + Math.pow(_root.save.fcgLevel10, 0.3) * 5 + _root.save.fcgLevel * 1) / 10;
                                            } else {
                                              if (op == 20) {
                                                tempCPerf = Math.floor(10 + 500 * _root.save.fishBestStreak / (_root.save.fishBestStreak + 25) + Math.pow(_root.save.fishPerfect, 0.3) * 5 + _root.save.fishBestLevel * 5) / 10;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (op != 0) {
        tempCPerf += (_root.cyborgActMaxPerf[op] - tempCPerf) * (_root.save.botLevel * 0.0025 + Math.pow(_root.save.botOp[op] * Math.max(30, _root.cyborgActTime[op]) / 30, 0.45) * 0.001);
      }
      if (op >= 1 && op <= 7) {
        tempCPerf = Math.floor(tempCPerf / 100) * 100;
      } else {
        if (op == 10) {
          tempCPerf = Math.floor(tempCPerf);
        } else {
          tempCPerf = Math.floor(tempCPerf * 10) / 10;
        }
      }
      if (tempCPerf > _root.cyborgActMaxPerf[op]) {
        tempCPerf = _root.cyborgActMaxPerf[op];
      }
      if (tempCPerf < _root.cyborgActMinPerf[op]) {
        tempCPerf = _root.cyborgActMinPerf[op];
      }
      if (isNaN(tempCPerf)) {
        tempCPerf = 0;
      }
      return tempCPerf;
    }

    function cyborgOp(op) {
      if (op == 0) {
        _root.save.botEnergy += _root.calcPerf(0);
        if (_root.save.botEnergy > 359999) {
          _root.save.botEnergy = 359999;
        }
      } else {
        if (op >= 1 && op <= 7) {
          tempCScore = Math.floor(_root.calcPerf(op) * (0.005 + Math.random() * 0.0025 + Math.random() * 0.001 + Math.random() * Math.random() * 0.0015)) * 100;
          if (op == 1) {
            _root.gainWhiteCoin(6 + random(10));
            cybA = 'Pong';
            medMult = 3;
            div = 50;
            if (_root.save.highPong < tempCScore) {
              _root.save.highPong = tempCScore;
            }
            if (_root.save.todayHighPong < tempCScore) {
              _root.save.todayHighPong = tempCScore;
            }
            _root.save.totalPong += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Pong.');
          }
          if (op == 2) {
            _root.gainWhiteCoin(2 + random(6));
            cybA = 'Ultimate Avoidance';
            medMult = 3;
            div = 40;
            if (_root.save.highAvoidance < tempCScore) {
              _root.save.highAvoidance = tempCScore;
            }
            if (_root.save.todayHighAvoidance < tempCScore) {
              _root.save.todayHighAvoidance = tempCScore;
            }
            _root.save.totalAvoidance += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Ultimate Avoidance.');
          }
          if (op == 3) {
            _root.gainWhiteCoin(1 + random(4));
            cybA = 'Math Master';
            medMult = 2;
            div = 150;
            if (_root.save.highMath < tempCScore) {
              _root.save.highMath = tempCScore;
            }
            if (_root.save.todayHighMath < tempCScore) {
              _root.save.todayHighMath = tempCScore;
            }
            _root.save.totalMath += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Math Master.');
          }
          if (op == 4) {
            _root.gainWhiteCoin(2 + random(6));
            cybA = 'Whack-a-greg';
            medMult = 2;
            div = 100;
            if (_root.save.highWhack < tempCScore) {
              _root.save.highWhack = tempCScore;
            }
            if (_root.save.todayHighWhack < tempCScore) {
              _root.save.todayHighWhack = tempCScore;
            }
            _root.save.totalWhack += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Whack-a-greg.');
          }
          if (op == 5) {
            _root.gainWhiteCoin(8 + random(14));
            cybA = 'Triangle Count';
            medMult = 3;
            div = 100;
            if (_root.save.highCount < tempCScore) {
              _root.save.highCount = tempCScore;
            }
            if (_root.save.todayHighCount < tempCScore) {
              _root.save.todayHighCount = tempCScore;
            }
            _root.save.totalCount += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Triangle Count.');
          }
          if (op == 6) {
            _root.gainWhiteCoin(4 + random(8));
            cybA = 'MindSweeper';
            medMult = 4;
            div = 40;
            if (_root.save.highMind < tempCScore) {
              _root.save.highMind = tempCScore;
            }
            if (_root.save.todayHighMind < tempCScore) {
              _root.save.todayHighMind = tempCScore;
            }
            _root.save.totalMind += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in MindSweeper.');
          }
          if (op == 7) {
            _root.gainWhiteCoin(6 + random(10));
            cybA = 'Balance 3';
            medMult = 3;
            div = 100;
            if (_root.save.highBalance < tempCScore) {
              _root.save.highBalance = tempCScore;
            }
            if (_root.save.todayHighBalance < tempCScore) {
              _root.save.todayHighBalance = tempCScore;
            }
            _root.save.totalBalance += tempCScore;
            _root.dispNews(175, '[Cyborg] Simulation Cyborg scored ' + _root.withComma(tempCScore) + ' in Balance 3.');
          }
          _root.gainCyborgEXP(Math.ceil((tempCScore / _root.cyborgActMaxPerf[op] + 1) * (_root.cyborgActTime[op] / 20) + _root.cyborgActCost[op] / 10));
          if (tempCScore >= 100000) {
            medalToGet = Math.floor(Math.floor(tempCScore / 100000) * medMult * (1 + _root.curCareerLevel[6] * 0.02));
            _root.dispNews(175, '[Cyborg] You have gained ' + medalToGet + ' Arcade 100k Medals!');
            _root.save.arcade100kMedal += medalToGet;
          }
          if (_root.save.questType == cybA) {
            if (_root.save.questSubtype == 'High Score') {
              if (_root.save.questCount < tempCScore) {
                _root.save.questCount = tempCScore;
              }
            }
            if (_root.save.questSubtype == 'Total Score') {
              _root.save.questCount += tempCScore;
            }
          }
          _root.globalPong = _root.save.todayParPong;
          _root.globalAvoidance = _root.save.todayParAvoidance;
          _root.globalMath = _root.save.todayParMath;
          _root.globalWhack = _root.save.todayParWhack;
          _root.globalMind = _root.save.todayParMind;
          _root.globalBalance = _root.save.todayParBalance;
          _root.globalCount = _root.save.todayParCount;
          _root.medalGold = 0;
          _root.medalSilver = 0;
          _root.medalBronze = 0;
          _root.pctPong = (_root.save.todayHighPong / _root.globalPong) * 100;
          tempPct = _root.pctPong;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctAvoidance = (_root.save.todayHighAvoidance / _root.globalAvoidance) * 100;
          tempPct = _root.pctAvoidance;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctMath = (_root.save.todayHighMath / _root.globalMath) * 100;
          tempPct = _root.pctMath;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctWhack = (_root.save.todayHighWhack / _root.globalWhack) * 100;
          tempPct = _root.pctWhack;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctMind = (_root.save.todayHighMind / _root.globalMind) * 100;
          tempPct = _root.pctMind;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctBalance = (_root.save.todayHighBalance / _root.globalBalance) * 100;
          tempPct = _root.pctBalance;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.pctCount = (_root.save.todayHighCount / _root.globalCount) * 100;
          tempPct = _root.pctCount;
          if (tempPct >= 100) {
            _root.medalGold += 1;
          }
          if (tempPct >= 75) {
            _root.medalSilver += 1;
          }
          if (tempPct >= 50) {
            _root.medalBronze += 1;
          }
          _root.arcadeRewardMult = 1 + _root.medalGold * 0.3 + _root.medalSilver * 0.15 + _root.medalBronze * 0.05;
          if (_root.save.careerLevel[6] >= 200) {
            _root.arcadeRewardMult = 1 + _root.medalGold * 0.39 + _root.medalSilver * 0.195 + _root.medalBronze * 0.065;
          }
          baseExp = Math.floor((tempCScore / div / 1.8) * _root.arcadeRewardMult);
          baseCoin = Math.floor((tempCScore / div / 2.4) * _root.arcadeRewardMult);
          baseGreenCoin = Math.floor((tempCScore / div) * 2.5 * _root.arcadeRewardMult);
          baseBlueCoin = Math.floor((tempCScore / div / 200) * _root.arcadeRewardMult);
          _root.gainCareerEXP(6, Math.floor((tempCScore / div / 4) * _root.arcadeRewardMult), true);
          baseExp = Math.floor(baseExp * (1 + _root.curCareerLevel[6] * 0.005) * (1 + _root.save.petStat[4] * 0.002));
          baseCoin = Math.floor(baseCoin * (1 + _root.curCareerLevel[6] * 0.01));
          baseGreenCoin = Math.floor(baseGreenCoin * (1 + _root.curCareerLevel[6] * 0.01));
          finalExp = Math.ceil(baseExp * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100));
          finalCoin = Math.ceil(baseCoin * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100));
          finalGreenCoin = Math.ceil(baseGreenCoin);
          finalBlueCoin = Math.ceil(baseBlueCoin);
          if (_root.save.permaBanPenalty[10] == 3) {
            finalExp = Math.floor(finalExp * 3);
          } else {
            if (_root.save.permaBanPenalty[10] == 2) {
              finalExp = Math.floor(finalExp * 2.2);
            } else {
              if (_root.save.permaBanPenalty[10] == 1) {
                finalExp = Math.floor(finalExp * 1.8);
              }
            }
          }
          if (_root.save.banPenalty[9] == 1) {
            finalExp = Math.floor(finalExp * 1.3);
          }
          if (finalExp > 99999999999.0) {
            finalExp = 99999999999.0;
          }
          if (finalCoin > 99999999999.0) {
            finalCoin = 99999999999.0;
          }
          _root.gainEXP(finalExp, 10);
          _root.gainCoin(finalCoin, 10);
          _root.gainGreenCoin(finalGreenCoin);
          _root.gainBlueCoin(finalBlueCoin);
          _root.dispNews(175, '[Cyborg] You have gained: ' + _root.withComma(finalExp) + ' EXP + ' + _root.withComma(finalCoin) + ' Coins');
        } else {
          if (op >= 8 && op <= 9) {
            if (Math.random() < _root.calcPerf(op) / 100) {
              order = 1;
              _root.gainCyborgEXP(2);
              if (Math.random() < 0.5) {
                _root.gainWhiteCoin(1);
              }
            } else {
              order = 2 + random(4);
              if (order != 5) {
                _root.gainCyborgEXP(1);
              }
            }
            if (op == 8) {
              baseExp = 3200;
              baseCoin = 5900;
              baseGreenCoin = 8000;
              baseBlueCoin = 16;
              baseToken = 600;
            } else {
              baseExp = 3750;
              baseCoin = 6900;
              baseGreenCoin = 10000;
              baseBlueCoin = 20;
              baseToken = 700;
            }
            fReward = _root.save.stadiumReward;
            _root.gainCareerEXP(7, Math.floor(300 + (300 + (5 - order) * 50) * (100 + fReward) / 100 / order), true);
            finalExp = Math.ceil(((baseExp - 150) / order) * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100) * (1 + fReward * 0.01));
            finalCoin = Math.ceil(((baseCoin - 150) / order) * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100));
            finalGreenCoin = Math.ceil(baseGreenCoin / order);
            finalBlueCoin = Math.ceil(baseBlueCoin / order);
            finalToken = Math.ceil(baseToken / order);
            finalExp = Math.floor(finalExp * (1 + _root.curCareerLevel[7] * 0.005) * (1 + _root.save.petStat[5] * 0.002));
            finalCoin = Math.floor(finalCoin * (1 + _root.curCareerLevel[7] * 0.005));
            finalToken = Math.floor(finalToken * (1 + _root.curCareerLevel[7] * 0.01));
            if (_root.save.careerLevel[7] >= 100) {
              finalGreenCoin = Math.floor(finalGreenCoin * 2);
            }
            if (_root.save.careerLevel[7] >= 200) {
              finalBlueCoin = Math.floor(finalBlueCoin * 4);
            }
            if (order >= 2) {
              finalCoin = Math.floor(finalCoin * 0.5);
              finalToken = Math.floor(finalToken * 0.5);
            }
            if (order == 5) {
              finalExp = Math.floor(finalExp * 0.5);
              finalCoin = Math.floor(finalCoin * 0.5);
              finalGreenCoin = Math.floor(finalGreenCoin * 0.5);
              finalBlueCoin = Math.floor(finalBlueCoin * 0.5);
              finalToken = Math.floor(finalToken * 0.5);
            }
            if (_root.save.banPenalty[9] == 1) {
              finalExp = Math.floor(finalExp * 1.3);
            }
            if (_root.save.stadiumProTime > 0) {
              finalExp = Math.floor(finalExp * 1.5);
              finalToken = Math.floor(finalToken * 2);
            }
            if (_root.save.permaBanPenalty[19] == 3) {
              finalExp = Math.floor(finalExp * 3);
            } else {
              if (_root.save.permaBanPenalty[19] == 2) {
                finalExp = Math.floor(finalExp * 2.2);
              } else {
                if (_root.save.permaBanPenalty[19] == 1) {
                  finalExp = Math.floor(finalExp * 1.8);
                }
              }
            }
            if (finalExp < 0) {
              finalExp = 0;
            }
            if (finalCoin < 0) {
              finalCoin = 0;
            }
            _root.gainEXP(finalExp, 11);
            _root.gainCoin(finalCoin, 11);
            _root.gainGreenCoin(finalGreenCoin);
            _root.gainBlueCoin(finalBlueCoin);
            if (op == 8) {
              _root.dispNews(175, '[Cyborg] Simple Race COMPLETE! - Position: #' + order);
            } else {
              if (op == 9) {
                _root.dispNews(175, '[Cyborg] Item Fight COMPLETE! - Position: #' + order);
              }
            }
            _root.dispNews(175, '[Cyborg] You have gained: ' + _root.withComma(finalExp) + ' EXP + ' + _root.withComma(finalCoin) + ' Coins');
            _root.dispNews(175, '[Cyborg] You have gained ' + _root.withComma(finalToken) + ' Stadium Tokens!');
            if (order == 1) {
              if (_root.save.questType == 'Simple Race' && op == 8 || _root.save.questType == 'Item Fight' && op == 9) {
                if (_root.save.questSubtype == 'Easy') {
                  _root.save.questCount += 1;
                }
                if (_root.save.questSubtype == 'Medium') {
                  _root.save.questCount += 1;
                }
                if (_root.save.questSubtype == 'Hard') {
                  _root.save.questCount += 1;
                }
                if (_root.save.questSubtype == 'Impossible') {
                  _root.save.questCount += 1;
                }
              }
              if (op == 8) {
                _root.save.stadiumRace += 1;
                _root.save.stadiumImpossibleRace += 1;
              } else {
                if (op == 9) {
                  _root.save.stadiumItem += 1;
                  _root.save.stadiumImpossibleItem += 1;
                }
              }
            }
            _root.save.stadiumToken += finalToken;
          } else {
            if (op == 10) {
              tempCScore = Math.floor(_root.calcPerf(op) * (0.5 + Math.random() * 0.3 + Math.random() * 0.2));
              baseExp = 100000;
              baseCoin = 100000;
              baseGreenCoin = 250000;
              baseBlueCoin = 500;
              baseToken = 10000;
              fReward = _root.save.stadiumReward;
              if (_root.save.questType == 'Death Match') {
                if (_root.save.questSubtype == 'PWNt') {
                  if (_root.save.questCount < tempCScore) {
                    _root.save.questCount = tempCScore;
                  }
                }
              }
              if (Math.random() < 0.95 && Math.random() < (tempCScore - 200) / 500) {
                order = 1;
                _root.gainCyborgEXP(Math.ceil((tempCScore / 1100 + 1) * (_root.cyborgActTime[op] / 20) + 50));
              } else {
                order = 2 + random(4);
                if (tempCScore >= 600) {
                  order = 2;
                }
                _root.gainCyborgEXP(Math.ceil((tempCScore / 1100 + 1) * (_root.cyborgActTime[op] / 20) + 10));
              }
              _root.gainCareerEXP(7, Math.floor(10000 + (20000 + tempCScore * 50 + (5 - order) * 5000) * (100 + fReward) / 100 / order), true);
              finalExp = Math.ceil(((baseExp + Math.floor(tempCScore * 250)) / order) * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100) * (1 + fReward * 0.01));
              finalCoin = Math.ceil(((baseCoin + Math.floor(tempCScore * 250)) / order) * Math.pow(_root.save.level, 0.6) * (_root.save.boost / 100));
              finalGreenCoin = Math.ceil((baseGreenCoin + tempCScore * 500) / order);
              finalBlueCoin = Math.ceil((baseBlueCoin + tempCScore * 1) / order);
              finalToken = Math.ceil((baseToken + tempCScore * 20) / order);
              finalExp = Math.floor(finalExp * (1 + _root.curCareerLevel[7] * 0.005) * (1 + _root.save.petStat[5] * 0.002));
              finalCoin = Math.floor(finalCoin * (1 + _root.curCareerLevel[7] * 0.005));
              finalToken = Math.floor(finalToken * (1 + _root.curCareerLevel[7] * 0.01));
              if (_root.save.careerLevel[7] >= 100) {
                finalGreenCoin = Math.floor(finalGreenCoin * 2);
              }
              if (_root.save.careerLevel[7] >= 200) {
                finalBlueCoin = Math.floor(finalBlueCoin * 4);
              }
              if (order >= 2) {
                finalCoin = Math.floor(finalCoin * 0.5);
                finalToken = Math.floor(finalToken * 0.5);
              }
              if (order == 5) {
                finalExp = Math.floor(finalExp * 0.5);
                finalCoin = Math.floor(finalCoin * 0.5);
                finalGreenCoin = Math.floor(finalGreenCoin * 0.5);
                finalBlueCoin = Math.floor(finalBlueCoin * 0.5);
                finalToken = Math.floor(finalToken * 0.5);
              }
              if (_root.save.banPenalty[9] == 1) {
                finalExp = Math.floor(finalExp * 1.3);
              }
              if (_root.save.stadiumProTime > 0) {
                finalExp = Math.floor(finalExp * 1.5);
                finalToken = Math.floor(finalToken * 2);
              }
              if (_root.save.permaBanPenalty[19] == 3) {
                finalExp = Math.floor(finalExp * 3);
              } else {
                if (_root.save.permaBanPenalty[19] == 2) {
                  finalExp = Math.floor(finalExp * 2.2);
                } else {
                  if (_root.save.permaBanPenalty[19] == 1) {
                    finalExp = Math.floor(finalExp * 1.8);
                  }
                }
              }
              if (finalExp < 0) {
                finalExp = 0;
              }
              if (finalCoin < 0) {
                finalCoin = 0;
              }
              if (finalExp > 999999999999.0) {
                finalExp = 999999999999.0;
              }
              if (finalCoin > 999999999999.0) {
                finalCoin = 999999999999.0;
              }
              _root.gainEXP(finalExp, 11);
              _root.gainCoin(finalCoin, 11);
              _root.gainGreenCoin(finalGreenCoin);
              _root.gainBlueCoin(finalBlueCoin);
              _root.gainWhiteCoin(Math.floor((10 + tempCScore / 25) / order));
              _root.save.stadiumToken += finalToken;
              _root.dispNews(175, '[Cyborg] Death Match COMPLETE! - Position: #' + order + ' - PWNts: ' + _root.withComma(tempCScore));
              _root.dispNews(175, '[Cyborg] You have gained: ' + _root.withComma(finalExp) + ' EXP + ' + _root.withComma(finalCoin) + ' Coins');
              _root.dispNews(175, '[Cyborg] You have gained ' + _root.withComma(finalToken) + ' Stadium Tokens!');
              if (order == 1) {
                if (_root.save.questType == 'Death Match') {
                  if (_root.save.questSubtype == 'Win') {
                    _root.save.questCount += 1;
                  }
                }
                _root.save.stadiumDeathMatch += 1;
              }
              if (_root.save.stadiumBestDeathMatch < tempCScore) {
                _root.save.stadiumBestDeathMatch = tempCScore;
              }
              if (_root.save.stadiumTodayDeathMatch < tempCScore) {
                _root.save.stadiumTodayDeathMatch = tempCScore;
              }
            } else {
              if (op >= 11 && op <= 19) {
                _root.save.fcgPlay += 1;
                if (op == 11) {
                  fDiff = 0;
                  diffMult = 0;
                } else {
                  if (op == 12) {
                    fDiff = 1;
                    diffMult = 1;
                  } else {
                    if (op == 13) {
                      fDiff = 2;
                      diffMult = 2;
                    } else {
                      if (op == 14) {
                        fDiff = 3;
                        diffMult = 3;
                      } else {
                        if (op == 15) {
                          fDiff = 4;
                          diffMult = 4;
                        } else {
                          if (op == 16) {
                            fDiff = 6;
                            diffMult = 6;
                          } else {
                            if (op == 17) {
                              fDiff = 7;
                              diffMult = 15;
                            } else {
                              if (op == 18) {
                                fDiff = 8;
                                diffMult = 20;
                              } else {
                                if (op == 19) {
                                  fDiff = 10;
                                  diffMult = 30;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (op == 19) {
                  _root.save.fcgSeriousDeck = 34 + random(35);
                }
                actualWinRate = _root.calcPerf(op);
                if (op == 19 && _root.save.fcgSeriousDeck == 69) {
                  actualWinRate *= 0.2;
                }
                if (Math.random() < actualWinRate / 100) {
                  if (_root.save.questType == 'Win') {
                    if (_root.save.questSubtype == 'Any') {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 2' && fDiff >= 2) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 3' && fDiff >= 3) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 4' && fDiff >= 4) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 6' && fDiff >= 6) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 7' && fDiff >= 7) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 8' && fDiff >= 8) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Level 10' && fDiff >= 10) {
                      _root.save.questCount += 1;
                    }
                  }
                  if (fDiff == 6) {
                    _root.gainWhiteCoin(1);
                  } else {
                    if (fDiff == 7) {
                      _root.gainWhiteCoin(3);
                    } else {
                      if (fDiff == 8) {
                        _root.gainWhiteCoin(5);
                      } else {
                        if (fDiff == 10) {
                          if (_root.save.fcgStreak10 >= 4 && _root.save.fcgStreak10 % 5 == 4) {
                            _root.save.fcgSeriousDeck = 69;
                          }
                          _root.gainWhiteCoin(10);
                        }
                      }
                    }
                  }
                  _root.save.fcgWin += 1;
                  _root.save.fcgStreak += 1;
                  target = 2500;
                  finalFcgExp = 25;
                  finalFcgCash = 100;
                  if (op == 19 && _root.save.fcgSeriousDeck == 69) {
                    target = 62500;
                    finalFcgExp = 1337;
                    finalFcgCash = 5000;
                    _root.gainWhiteCoin(50);
                  }
                  _root.save['fcgStreak' + fDiff] += 1;
                  if (_root.save['fcgMaxStreak' + fDiff] < _root.save['fcgStreak' + fDiff]) {
                    _root.save['fcgMaxStreak' + fDiff] = _root.save['fcgStreak' + fDiff];
                  }
                  _root.save['fcgLevel' + fDiff] += 1;
                  target += 2500 + Math.min(_root.save['fcgStreak' + fDiff], 50) * diffMult * 100 + diffMult * 1000;
                  finalFcgExp += 25 + Math.min(_root.save['fcgStreak' + fDiff], 50) * diffMult * 1 + diffMult * 25;
                  finalFcgCash += 100 + Math.min(_root.save['fcgStreak' + fDiff], 50) * diffMult * 2 + diffMult * 50;
                  target = Math.floor(target * (1 + _root.save.fcgLevel * 0.02) * (1 + Math.random() * 0.05));
                  finalFcgExp = Math.floor(finalFcgExp * (1 + _root.save.fcgLevel * 0.002) * (1 + Math.random() * 0.05));
                  finalFcgCash = Math.floor(finalFcgCash * (1 + _root.save.fcgLevel * 0.002) * (0.7 + Math.random() * 0.4));
                  if (_root.save.powerUserTime > 0 && _root.save.banPenalty[9] == 1) {
                    target = Math.floor(target * 1.95);
                    finalFcgCash = Math.floor(finalFcgCash * 2);
                  } else {
                    if (_root.save.powerUserTime > 0) {
                      target = Math.floor(target * 1.5);
                      finalFcgCash = Math.floor(finalFcgCash * 2);
                    } else {
                      if (_root.save.banPenalty[9] == 1) {
                        target = Math.floor(target * 1.3);
                      }
                    }
                  }
                  target = Math.floor(target * (1 + _root.save.petStat[6] * 0.002));
                  finalExp = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * target;
                  finalExp = Math.floor(finalExp * (1 + _root.curCareerLevel[8] * 0.005));
                  if (_root.save.permaBanPenalty[20] == 3) {
                    finalExp = Math.floor(finalExp * 3);
                  } else {
                    if (_root.save.permaBanPenalty[20] == 2) {
                      finalExp = Math.floor(finalExp * 2.2);
                    } else {
                      if (_root.save.permaBanPenalty[20] == 1) {
                        finalExp = Math.floor(finalExp * 1.8);
                      }
                    }
                  }
                  if (_root.save.careerLevel[8] >= 100) {
                    finalFcgCash = Math.floor(finalFcgCash * 1.5);
                  }
                  _root.gainEXP(finalExp, 12);
                  _root.save.fcgExp += finalFcgExp;
                  _root.save.fcgCash += finalFcgCash;
                  _root.gainBlueCoin(Math.floor((finalFcgExp / 2) * (1 + _root.curCareerLevel[8] * 0.01)));
                  _root.gainCareerEXP(8, Math.floor(500 + finalFcgExp * 15), true);
                  _root.gainCyborgEXP(Math.ceil(2 * (_root.cyborgActTime[op] / 20) + _root.cyborgActCost[op] / 10));
                  _root.dispNews(175, '[Cyborg] Epic win! (+' + _root.withComma(finalExp) + ' EXP)');
                  _root.dispNews(175, '[Cyborg] You have gained ' + _root.withComma(finalFcgExp) + ' FCG EXP + ' + _root.withComma(finalFcgCash) + ' FCG Cash!');
                } else {
                  target = 500;
                  finalFcgExp = 5;
                  finalFcgCash = 10;
                  _root.save['fcgStreak' + fDiff] = 0;
                  _root.save.fcgStreak = 0;
                  _root.save.fcgLose += 1;
                  target = Math.floor(target * (1 + _root.save.fcgLevel * 0.02) * (1 + Math.random() * 0.05));
                  finalFcgExp = Math.floor(finalFcgExp * (1 + _root.save.fcgLevel * 0.005) * (1 + Math.random() * 0.05));
                  finalFcgCash = Math.floor(finalFcgCash * (1 + _root.save.fcgLevel * 0.005) * (0.7 + Math.random() * 0.4));
                  if (_root.save.powerUserTime > 0 && _root.save.banPenalty[9] == 1) {
                    target = Math.floor(target * 1.95);
                    finalFcgCash = Math.floor(finalFcgCash * 2);
                  } else {
                    if (_root.save.powerUserTime > 0) {
                      target = Math.floor(target * 1.5);
                      finalFcgCash = Math.floor(finalFcgCash * 2);
                    } else {
                      if (_root.save.banPenalty[9] == 1) {
                        target = Math.floor(target * 1.3);
                      }
                    }
                  }
                  target = Math.floor(target * (1 + _root.save.petStat[6] * 0.002));
                  finalExp = Math.ceil(Math.pow(_root.save.level, 0.6) * Math.max(_root.boostMax, _root.save.boost) / 100) * target;
                  _root.gainEXP(finalExp, 12);
                  _root.save.fcgExp += finalFcgExp;
                  _root.save.fcgCash += finalFcgCash;
                  _root.gainBlueCoin(Math.floor((finalFcgExp / 2) * (1 + _root.curCareerLevel[8] * 0.01)));
                  _root.gainCareerEXP(8, Math.floor(500 + finalFcgExp * 15), true);
                  _root.dispNews(175, '[Cyborg] Epic lose! (+' + _root.withComma(finalExp) + ' EXP)');
                  _root.dispNews(175, '[Cyborg] You have gained ' + _root.withComma(finalFcgExp) + ' FCG EXP + ' + _root.withComma(finalFcgCash) + ' FCG Cash!');
                }
              } else {
                if (op == 20) {
                  chaos1 = random(200) + 1;
                  if (_root.save.careerLevel[12] >= 200 && Math.random() < 0.03) {
                    chaos1 = random(20) + 1;
                  }
                  if (Math.random() < 0.05 && _root.save.fishStreak >= 2) {
                    cybFishCurrent = 59;
                  } else {
                    if (chaos1 <= 3 && _root.save.fishStreak >= 5) {
                      chaos = random(100) + 1;
                      if (chaos <= 4 && _root.save.fishLevel >= 25) {
                        cybFishCurrent = 3;
                      } else {
                        if (chaos <= 20 && _root.save.fishLevel >= 15) {
                          cybFishCurrent = 2;
                        } else {
                          cybFishCurrent = 1;
                        }
                      }
                    } else {
                      if (chaos1 <= 6 && _root.save.fishStreak >= 4) {
                        chaos = random(100) + 1;
                        if (chaos <= 4 && _root.save.fishLevel >= 25) {
                          cybFishCurrent = 6;
                        } else {
                          if (chaos <= 20 && _root.save.fishLevel >= 15) {
                            cybFishCurrent = 5;
                          } else {
                            cybFishCurrent = 4;
                          }
                        }
                      } else {
                        if (chaos1 <= 12 && _root.save.fishStreak >= 3) {
                          chaos = random(100) + 1;
                          tempChance = _root.save.fishLevel;
                          if (chaos <= tempChance) {
                            cybFishCurrent = 8;
                          } else {
                            if (chaos <= 50) {
                              cybFishCurrent = 7;
                            } else {
                              if (chaos <= 50 + tempChance) {
                                cybFishCurrent = 10;
                              } else {
                                if (chaos <= 100) {
                                  cybFishCurrent = 9;
                                }
                              }
                            }
                          }
                        } else {
                          if (chaos1 <= 17 && _root.save.fishStreak >= 6) {
                            if (_root.save.fishStreak >= 10 && _root.save.fishLevel >= 20 && Math.random() < 0.6) {
                              cybFishCurrent = 54;
                            } else {
                              if (_root.save.fishStreak >= 9 && _root.save.fishLevel >= 15 && Math.random() < 0.7) {
                                cybFishCurrent = 61;
                              } else {
                                if (_root.save.fishStreak >= 8 && _root.save.fishLevel >= 10 && Math.random() < 0.8) {
                                  cybFishCurrent = 53;
                                } else {
                                  if (_root.save.fishStreak >= 7 && _root.save.fishLevel >= 5 && Math.random() < 0.9) {
                                    cybFishCurrent = 60;
                                  } else {
                                    cybFishCurrent = 52;
                                  }
                                }
                              }
                            }
                          } else {
                            if (chaos1 <= 20 && _root.save.fishStreak >= 5 || _root.save.eliteFisherTime > 0 && _root.save.fishStreak >= 2 && Math.random() < 0.02 && chaos1 > 20) {
                              if (_root.save.fishStreak >= 11 && _root.save.fishLevel >= 30 && Math.random() < 0.4) {
                                cybFishCurrent = 58;
                              } else {
                                if (_root.save.fishStreak >= 9 && _root.save.fishLevel >= 20 && Math.random() < 0.6) {
                                  cybFishCurrent = 57;
                                } else {
                                  if (_root.save.fishStreak >= 7 && _root.save.fishLevel >= 10 && Math.random() < 0.8) {
                                    cybFishCurrent = 56;
                                  } else {
                                    cybFishCurrent = 55;
                                  }
                                }
                              }
                            } else {
                              if (chaos1 <= 130) {
                                ftc = 11;
                                fL = _root.save.fishLevel + 1 + Math.ceil(Math.sqrt(_root.save.fishStreak / 3));
                                if (_root.save.eliteFisherTime > 0) {
                                  fL += 4;
                                }
                                i = 1;
                                while (i <= fL) {
                                  if (ftc < 30) {
                                    blah = _root.save.fishLevel - _root.fishArray[ftc + 1].fishLevel;
                                    if (blah > 0) {
                                      chance = 45 + Math.pow(blah, 0.7) * 3;
                                    } else {
                                      chance = 35 - Math.pow(Math.abs(blah), 1.1) * 3;
                                    }
                                    if (ftc >= 20) {
                                      chance *= 0.6;
                                    }
                                    if (chance > 80) {
                                      chance = 80;
                                    }
                                    if (Math.random() < chance / 100) {
                                      ftc += 1;
                                    }
                                  }
                                  ++i;
                                }
                                if (Math.random() < 0.3) {
                                  ftc = 11 + random(ftc - 10);
                                }
                                cybFishCurrent = ftc;
                              } else {
                                ftc = 31;
                                fL = _root.save.fishLevel + 1 + Math.ceil(Math.sqrt(_root.save.fishStreak / 3));
                                if (_root.save.eliteFisherTime > 0) {
                                  fL += 4;
                                }
                                i = 1;
                                while (i <= fL) {
                                  if (ftc < 50) {
                                    blah = _root.save.fishLevel - _root.fishArray[ftc + 1].fishLevel;
                                    if (blah > 0) {
                                      chance = 45 + Math.pow(blah, 0.7) * 3;
                                    } else {
                                      chance = 35 - Math.pow(Math.abs(blah), 1.1) * 3;
                                    }
                                    if (ftc >= 40) {
                                      chance *= 0.6;
                                    }
                                    if (chance > 80) {
                                      chance = 80;
                                    }
                                    if (Math.random() < chance / 100) {
                                      ftc += 1;
                                    }
                                  }
                                  ++i;
                                }
                                if (Math.random() < 0.3) {
                                  ftc = 31 + random(ftc - 30);
                                }
                                cybFishCurrent = ftc;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  cybFishCurrentExp = Math.floor(_root.fishArray[cybFishCurrent].fishExp * (1 + _root.curCareerLevel[12] * 0.01));
                  cybFishCate = _root.fishArray[cybFishCurrent].fishCate;
                  cybFishSpec = _root.fishArray[cybFishCurrent].fishSpec;
                  cybFishLev = _root.fishArray[cybFishCurrent].fishLevel;
                  cybFishAExp = Math.floor(_root.fishArray[cybFishCurrent].fishAExp * (1 + _root.curCareerLevel[12] * 0.005));
                  if (_root.save.eliteFisherTime > 0) {
                    cybFishAExp = Math.floor(cybFishAExp * 1.5);
                  }
                  if (cybFishCate == 'Fish' || cybFishCate == 'Junk') {
                    tempName = 'Lv. ' + cybFishLev + ' ' + cybFishCate;
                  } else {
                    if (cybFishLev == '') {
                      tempName = cybFishCate;
                    } else {
                      tempName = cybFishLev + ' ' + cybFishCate;
                    }
                  }
                  if (Math.random() < _root.calcPerf(op) / 100 && (_root.save.fishStreak < 250 || Math.random() < 0.7) || cybFishSpec == 'Manual+') {
                    _root.save.fishStreak += 1;
                    if (_root.save.fishBestStreak < _root.save.fishStreak) {
                      _root.save.fishBestStreak = _root.save.fishStreak;
                    }
                    streakBonus = _root.save.fishStreak;
                    if (_root.save.fishStreak > 10) {
                      streakBonus = 9 + Math.ceil(_root.save.fishStreak / 10);
                    }
                    if (_root.save.fishStreak > 100) {
                      streakBonus = 20;
                    }
                    if (_root.save.fishStreak > 1000) {
                      streakBonus = 0;
                    }
                    _root.save.fishScore += cybFishCurrentExp * (200 + streakBonus * 50);
                    _root.save.fishScoreToday += cybFishCurrentExp * (200 + streakBonus * 50);
                    _root.save.fishExp += cybFishCurrentExp + streakBonus;
                    _root.gainCareerEXP(12, 100 + cybFishCurrentExp * 3 + streakBonus * 5 + _root.save.fishLevel, true);
                    if (_root.save.permaBanPenalty[35] == 3) {
                      _root.gainGreenCoin(30000 + streakBonus * 6000);
                    } else {
                      if (_root.save.permaBanPenalty[35] == 2) {
                        _root.gainGreenCoin(20000 + streakBonus * 4000);
                      } else {
                        if (_root.save.permaBanPenalty[35] == 1) {
                          _root.gainGreenCoin(15000 + streakBonus * 3000);
                        } else {
                          _root.gainGreenCoin(5000 + streakBonus * 1000);
                        }
                      }
                    }
                    _root.gainBlueCoin(10 + streakBonus * 2);
                    _root.dispNews(175, '[Cyborg] Fishing Mastery increased! (+' + _root.withComma(cybFishCurrentExp + streakBonus) + ')');
                    expToGain = Math.floor((cybFishAExp * Math.pow(_root.save.level, 0.6) * _root.save.boost / 100) * (1 + streakBonus / 20));
                    if (_root.save.permaBanPenalty[6] == 3) {
                      expToGain = Math.floor(expToGain * 3);
                    } else {
                      if (_root.save.permaBanPenalty[6] == 2) {
                        expToGain = Math.floor(expToGain * 2.2);
                      } else {
                        if (_root.save.permaBanPenalty[6] == 1) {
                          expToGain = Math.floor(expToGain * 1.8);
                        }
                      }
                    }
                    if (cybFishCurrent == 52) {
                      _root.save.awesomeRefill += 1;
                    }
                    if (cybFishCurrent == 53) {
                      _root.save.gardenFertilizer += 1;
                    }
                    if (cybFishCurrent == 54) {
                      _root.save.gardenMegaFertilizer += 1;
                    }
                    if (cybFishCurrent == 55) {
                      _root.save.mysteryBox[1] += 1;
                    }
                    if (cybFishCurrent == 56) {
                      _root.save.mysteryBox[7] += 1;
                    }
                    if (cybFishCurrent == 57) {
                      _root.save.mysteryBox[8] += 1;
                    }
                    if (cybFishCurrent == 58) {
                      _root.save.mysteryBox[4] += 1;
                    }
                    if (cybFishCurrent == 59) {
                      _root.gainWhiteCoin(1);
                    }
                    if (cybFishCurrent == 60) {
                      _root.save.boostPotion += 1;
                    }
                    if (cybFishCurrent == 61) {
                      _root.save.megaBoostPotion += 1;
                    }
                    _root.gainEXP(expToGain, 22);
                    _root.dispNews(175, '[Cyborg] PERFECT CATCH (' + _root.save.fishStreak + 'x)! ' + tempName + ' GET! (+' + _root.withComma(expToGain) + ' EXP)');
                    if (_root.save.questType == 'Result') {
                      if (_root.save.questSubtype == 'Perfect' || _root.save.questSubtype == 'Success') {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Perfect Streak') {
                        if (_root.save.questCount < _root.save.fishStreak) {
                          _root.save.questCount = _root.save.fishStreak;
                        }
                      }
                    }
                    if (_root.save.fishLevel > 30) {
                      expToGain = Math.floor(expToGain * (_root.save.fishLevel * 0.05 - 1.25));
                      _root.gainEXP(expToGain, 22);
                      _root.dispNews(175, '[Cyborg] Bonus LEGEND EXP gained! (+' + _root.withComma(expToGain) + ' EXP)');
                    }
                    if (_root.save.fishStreak >= 3) {
                      _root.gainCyborgEXP(3);
                    } else {
                      _root.gainCyborgEXP(2);
                    }
                    _root.save.fishPerfect += 1;
                    _root.save.fishTotal += 1;
                    _root.save.fishFound[cybFishCurrent] += 1;
                    _root.save.fishLeft[cybFishCurrent] += 1;
                    _root.gainBoost(1, 3);
                  } else {
                    _root.save.fishStreak = 0;
                    _root.save.fishScore += cybFishCurrentExp * 100;
                    _root.save.fishScoreToday += cybFishCurrentExp * 100;
                    _root.save.fishExp += cybFishCurrentExp;
                    _root.gainCareerEXP(12, 50 + cybFishCurrentExp * 3 + _root.save.fishLevel, true);
                    if (_root.save.permaBanPenalty[35] == 3) {
                      _root.gainGreenCoin(15000);
                    } else {
                      if (_root.save.permaBanPenalty[35] == 2) {
                        _root.gainGreenCoin(10000);
                      } else {
                        if (_root.save.permaBanPenalty[35] == 1) {
                          _root.gainGreenCoin(7500);
                        } else {
                          _root.gainGreenCoin(2500);
                        }
                      }
                    }
                    _root.gainBlueCoin(5);
                    _root.dispNews(175, '[Cyborg] Fishing Mastery increased! (+' + _root.withComma(cybFishCurrentExp) + ')');
                    if (cybFishCurrent == 52) {
                      _root.save.awesomeRefill += 1;
                    }
                    if (cybFishCurrent == 53) {
                      _root.save.gardenFertilizer += 1;
                    }
                    if (cybFishCurrent == 54) {
                      _root.save.gardenMegaFertilizer += 1;
                    }
                    if (cybFishCurrent == 55) {
                      _root.save.mysteryBox[1] += 1;
                    }
                    if (cybFishCurrent == 56) {
                      _root.save.mysteryBox[7] += 1;
                    }
                    if (cybFishCurrent == 57) {
                      _root.save.mysteryBox[8] += 1;
                    }
                    if (cybFishCurrent == 58) {
                      _root.save.mysteryBox[4] += 1;
                    }
                    if (cybFishCurrent == 59) {
                      _root.gainWhiteCoin(1);
                    }
                    if (cybFishCurrent == 60) {
                      _root.save.boostPotion += 1;
                    }
                    if (cybFishCurrent == 61) {
                      _root.save.megaBoostPotion += 1;
                    }
                    expToGain = Math.floor((cybFishAExp * Math.pow(_root.save.level, 0.6) * _root.save.boost / 100) * 0.8);
                    if (_root.save.permaBanPenalty[6] == 3) {
                      expToGain = Math.floor(expToGain * 2);
                    } else {
                      if (_root.save.permaBanPenalty[6] == 2) {
                        expToGain = Math.floor(expToGain * 1.6);
                      } else {
                        if (_root.save.permaBanPenalty[6] == 1) {
                          expToGain = Math.floor(expToGain * 1.4);
                        }
                      }
                    }
                    _root.gainEXP(expToGain, 22);
                    _root.dispNews(175, '[Cyborg] ' + tempName + ' GET! (+' + _root.withComma(expToGain) + ' EXP)');
                    if (_root.save.fishLevel > 30) {
                      expToGain = Math.floor(expToGain * (_root.save.fishLevel * 0.05 - 1.25));
                      _root.gainEXP(expToGain, 22);
                      _root.dispNews(175, '[Cyborg] Bonus LEGEND EXP gained! (+' + _root.withComma(expToGain) + ' EXP)');
                    }
                    if (_root.save.questType == 'Result') {
                      if (_root.save.questSubtype == 'Success') {
                        _root.save.questCount += 1;
                      }
                    }
                    _root.gainCyborgEXP(1);
                    _root.save.fishTotal += 1;
                    _root.save.fishFound[cybFishCurrent] += 1;
                    _root.save.fishLeft[cybFishCurrent] += 1;
                  }
                  if (_root.save.questType == 'Junk' && cybFishCurrent >= 11 && cybFishCurrent <= 30) {
                    if (_root.save.questSubtype == 'Any') {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 5+' && cybFishCurrent >= 15) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 10+' && cybFishCurrent >= 20) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 20+' && cybFishCurrent >= 25) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 30' && cybFishCurrent >= 30) {
                      _root.save.questCount += 1;
                    }
                  }
                  if (_root.save.questType == 'Fish' && cybFishCurrent >= 31 && cybFishCurrent <= 50) {
                    if (_root.save.questSubtype == 'Any') {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 5+' && cybFishCurrent >= 35) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 10+' && cybFishCurrent >= 40) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 20+' && cybFishCurrent >= 45) {
                      _root.save.questCount += 1;
                    }
                    if (_root.save.questSubtype == 'Lv. 30' && cybFishCurrent >= 50) {
                      _root.save.questCount += 1;
                    }
                  }
                  if (_root.save.questType == 'Special Item') {
                    if (cybFishCurrent <= 10 || cybFishCurrent >= 52) {
                      if (_root.save.questSubtype == 'Any') {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Treasure Box' && cybFishCurrent >= 1 && cybFishCurrent <= 3) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Key' && cybFishCurrent >= 4 && cybFishCurrent <= 6) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Energy Drink' && cybFishCurrent >= 7 && cybFishCurrent <= 8) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Pet Food' && cybFishCurrent >= 9 && cybFishCurrent <= 10) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Energy Refill' && cybFishCurrent == 52) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Fertilizer' && cybFishCurrent == 53) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Mega Fertilizer' && cybFishCurrent == 54) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Mystery Box' && cybFishCurrent >= 55 && cybFishCurrent <= 58) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Explosion Crate' && cybFishCurrent == 55) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Awesome Crate' && cybFishCurrent == 56) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Chaos Crate' && cybFishCurrent == 57) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Legendary Box' && cybFishCurrent == 58) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'White Coin' && cybFishCurrent == 59) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Regular Boost Potion' && cybFishCurrent == 60) {
                        _root.save.questCount += 1;
                      }
                      if (_root.save.questSubtype == 'Mega Boost Potion' && cybFishCurrent == 61) {
                        _root.save.questCount += 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _root.save.botOp[op] += 1;
    }

    function checkCyborg() {
      if (_root.save.bestLevel >= 1250) {
        if (_root.save.botCurrentOp >= 1 && _root.save.botCurrentOp <= 7) {
          if (_root.save.featureArcade == true && _root.house._currentframe != 10) {
            _root.save.botActive = true;
          } else {
            _root.save.botActive = false;
          }
        }
        if (_root.save.botCurrentOp >= 8 && _root.save.botCurrentOp <= 10) {
          if (_root.save.featureStadium == true && _root.house._currentframe != 11) {
            _root.save.botActive = true;
          } else {
            _root.save.botActive = false;
          }
        }
        if (_root.save.botCurrentOp >= 11 && _root.save.botCurrentOp <= 19) {
          if (_root.save.featureTukkunFCG == true && _root.house._currentframe != 12) {
            _root.save.botActive = true;
          } else {
            _root.save.botActive = false;
          }
        }
        if (_root.save.botCurrentOp == 20) {
          if (_root.save.featureFishing == true && _root.house._currentframe != 22) {
            _root.save.botActive = true;
          } else {
            _root.save.botActive = false;
          }
        }
        if (_root.save.botEnergy <= 0) {
          _root.save.botEnergy = 0;
          _root.save.botActive = false;
        }
        if (_root.save.botCurrentOp == 0) {
          _root.save.botActive = true;
          _root.save.botCurrentOpNum = 1;
          _root.save.botCurrentOpMax = 1;
        }
        if (_root.cyborgWorking == true && _root.save.botActive == false) {
          _root.dispNews(176, '[Cyborg] Simulation Cyborg status: PAUSED');
        }
        if (_root.save.botActive == true) {
          if (_root.cyborgWorking == false) {
            if (_root.save.botCurrentOp != 0) {
              _root.dispNews(177, '[Cyborg] Simulation Cyborg status: WORKING');
            } else {
              _root.dispNews(177, '[Cyborg] Simulation Cyborg status: RECHARGING');
            }
          }
          if (_root.save.botCurrentOp != 0) {
            _root.save.botEnergy -= 1;
          }
          _root.save.botCurrentOpTime += 1;
          if (_root.save.botCurrentOpTime >= _root.cyborgActTime[_root.save.botCurrentOp]) {
            _root.save.botCurrentOpTime = 0;
            _root.cyborgOp(_root.save.botCurrentOp);
            _root.save.botCurrentOpNum += 1;
            if (_root.save.botCurrentOpNum > _root.save.botCurrentOpMax) {
              if (_root.save.botCurrentOp != 0) {
                _root.save.botCurrentOp = 0;
                _root.dispNews(178, '[Cyborg] Simulation Cyborg status: FINISHED');
              }
              _root.save.botActive = true;
              _root.save.botCurrentOpNum = 1;
              _root.save.botCurrentOpMax = 1;
            }
          }
        }
        _root.cyborgWorking = _root.save.botActive;
      }
    }

    function gainCyborgPoint(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity && _root.save.bestLevel >= 1250) {
        _root.save.botPoint += Math.floor(amount);
        if (_root.save.botPoint > 9999999999.0) {
          _root.save.botPoint = 9999999999.0;
        }
        if (Math.floor(amount) >= 2) {
          _root.dispNews(174, '[Cyborg] Gained ' + _root.withComma(amount) + ' Cyborg Points! You now have ' + _root.withComma(_root.save.botPoint) + '.');
        } else {
          _root.dispNews(174, '[Cyborg] Gained 1 Cyborg Point! You now have ' + _root.withComma(_root.save.botPoint) + '.');
        }
      }
    }

    function gainCyborgEXP(amount) {
      if (!isNaN(amount) && amount > 0 && amount != Infinity) {
        expReq = _root.save.botLevel * 5;
        if (_root.save.botLevel > 100) {
          expReq = _root.save.botLevel * (_root.save.botLevel - 99) * 5;
        }
        if (_root.save.botLevel == 200) {
          expReq = -1;
        }
        if (amount > expReq && expReq > 0) {
          amount = expReq;
        }
        _root.save.botExp += Math.floor(amount);
        _root.dispNews(179, '[Cyborg] Simulation Cyborg gained ' + _root.withComma(amount) + ' EXP!');
        if (_root.save.botExp >= expReq && expReq > 0) {
          _root.save.botExp -= expReq;
          _root.save.botLevel += 1;
          _root.dispNews(180, '[Cyborg] Simulation Cyborg LEVEL UP! Simulation Cyborg is now Lv. ' + _root.withComma(_root.save.botLevel) + '.');
        }
      }
    }

    function equipModule(modLoc) {
      if (_root.save.progModuleTier[modLoc] > 0) {
        _root.organizeModule();
        if (_root.save.progModuleSize[modLoc] <= _root.moduleSlotLeft) {
          im = _root.save.progModuleSize[modLoc] - 1;
          i = 0;
          while (i <= im) {
            _root.swapModulePiece(modLoc + i, _root.moduleSlotOccupied + i + 1);
            ++i;
          }
        } else {
          _root.showPopup('Error', 'Insufficient space. This module is too large.');
        }
      } else {
        _root.showPopup('Error', 'An unexpected error has occurred. The module you are trying to equip appears to be non-existent.');
      }
      _root.organizeModule();
    }

    function unequipModule(modLoc) {
      if (_root.save.progModuleTier[modLoc] > 0) {
        _root.organizeModule();
        if (_root.save.progModuleSize[modLoc] <= _root.moduleInvSlotLeft) {
          im = _root.save.progModuleSize[modLoc] - 1;
          i = 0;
          while (i <= im) {
            _root.swapModulePiece(modLoc + i, _root.moduleInvSlotOccupied + i + 11);
            ++i;
          }
        } else {
          _root.showPopup('Error', 'Insufficient inventory space. This module is too large.');
        }
      } else {
        _root.showPopup('Error', 'An unexpected error has occurred. The module you are trying to unequip appears to be non-existent.');
      }
      _root.organizeModule();
    }

    function organizeModule() {
      i = 1;
      while (i <= 8) {
        if (_root.save.progModuleTier[i] == 0) {
          mustSwap = false;
          j = i + 1;
          while (j <= 9) {
            if (_root.save.progModuleTier[j] != 0) {
              mustSwap = true;
              j = 10;
            }
            ++j;
          }
          if (mustSwap == true) {
            j = i + 1;
            while (j <= 9) {
              _root.swapModulePiece(j - 1, j);
              ++j;
            }
            i -= 1;
          } else {
            i = 9;
          }
        }
        ++i;
      }
      i = 11;
      while (i <= 110) {
        if (_root.save.progModuleTier[i] == 0) {
          mustSwap = false;
          j = i + 1;
          while (j <= 110) {
            if (_root.save.progModuleTier[j] != 0) {
              mustSwap = true;
              j = 111;
            }
            ++j;
          }
          if (mustSwap == true) {
            j = i + 1;
            while (j <= 110) {
              _root.swapModulePiece(j - 1, j);
              ++j;
            }
            i -= 1;
          } else {
            i = 111;
          }
        }
        ++i;
      }
      _root.moduleSlotOccupied = 0;
      i = 1;
      while (i <= 9) {
        if (_root.save.progModuleTier[i] != 0) {
          _root.moduleSlotOccupied += 1;
        } else {
          i = 10;
        }
        ++i;
      }
      _root.moduleInvSlotOccupied = 0;
      i = 11;
      while (i <= 110) {
        if (_root.save.progModuleTier[i] != 0) {
          _root.moduleInvSlotOccupied += 1;
        } else {
          i = 111;
        }
        ++i;
      }
      _root.moduleSlotLeft = 9 - _root.moduleSlotOccupied;
      _root.moduleInvSlotLeft = _root.save.progModuleSlot - _root.moduleInvSlotOccupied;
    }

    function buyModule(modLoc) {
      _root.organizeModule();
      modName = _root.save.progModuleName[modLoc];
      modTier = _root.save.progModuleTier[modLoc];
      modSize = _root.save.progModuleSize[modLoc];
      modShiny = _root.save.progModuleShiny[modLoc];
      modType = _root.save.progModuleType[modLoc];
      modChance = _root.save.progModuleChance[modLoc];
      modEffect = _root.save.progModuleEffect[modLoc];
      modCost = _root.save.progModuleCost[modLoc];
      shinyCost = 0;
      if (modShiny == true) {
        shinyCost = Math.floor((30 + modTier * 2 + modTier * modTier / 2) * modSize);
        if (modTier == 9) {
          shinyCost = 100 * modSize;
        }
      }
      if (modTier > 0) {
        if (_root.save.shinyToken < shinyCost) {
          _root.showPopup('Error', 'You don\'t have enough Shiny Tokens to buy this module. Buy more in the Mystery Shop!');
        } else {
          if (_root.save.whiteCoin >= modCost && _root.moduleInvSlotLeft >= modSize) {
            _root.save.shinyToken -= shinyCost;
            _root.save.whiteCoin -= modCost;
            if (_root.save.progModuleSize[modLoc] <= _root.moduleInvSlotLeft) {
              i = 0;
              while (i <= modSize - 1) {
                _root.swapModulePiece(_root.moduleInvSlotOccupied + i + 11, modLoc + i);
                ++i;
              }
            }
          } else {
            if (_root.save.whiteCoin < modCost) {
              _root.showPopup('Error', 'You don\'t have enough White Coins to buy this module.');
            } else {
              _root.showPopup('Error', 'You don\'t have sufficient inventory slots to buy this module.');
            }
          }
        }
      } else {
        _root.showPopup('Error', 'An unexpected error has occurred. The module you are trying to buy appears to be non-existent.');
      }
      _root.organizeModule();
    }

    function getModule(modName, modTier, modSize, modShiny, modType, modChance, modEffect, modCost) {
      if (modTier > 0) {
        _root.organizeModule();
        if (modSize <= _root.moduleInvSlotLeft) {
          _root.save.progModuleName[_root.moduleInvSlotOccupied + 11] = modName;
          _root.save.progModuleTier[_root.moduleInvSlotOccupied + 11] = modTier;
          _root.save.progModuleSize[_root.moduleInvSlotOccupied + 11] = modSize;
          _root.save.progModuleShiny[_root.moduleInvSlotOccupied + 11] = modShiny;
          _root.save.progModuleType[_root.moduleInvSlotOccupied + 11] = modType;
          _root.save.progModuleChance[_root.moduleInvSlotOccupied + 11] = modChance;
          _root.save.progModuleEffect[_root.moduleInvSlotOccupied + 11] = modEffect;
          _root.save.progModuleCost[_root.moduleInvSlotOccupied + 11] = modCost;
          i = 1;
          while (i <= modSize - 1) {
            _root.deleteModulePiece(_root.moduleInvSlotOccupied + i + 11);
            _root.save.progModuleTier[_root.moduleInvSlotOccupied + i + 11] = -1;
            ++i;
          }
        } else {
          _root.showPopup('Error', 'Insufficient inventory space. This module is too large.');
        }
      } else {
        _root.showPopup('Error', 'An unexpected error has occurred. The module you are trying to get appears to be non-existent.');
      }
      _root.organizeModule();
    }

    function sellModule(modLoc) {
      if (_root.save.progModuleTier[modLoc] > 0) {
        if (!isNaN(_root.save.progModuleCost[modLoc]) && _root.save.progModuleCost[modLoc] > 0) {
          _root.save.whiteCoin += Math.ceil(_root.save.progModuleCost[modLoc] / 2);
        }
        _root.organizeModule();
        mi = _root.save.progModuleSize[modLoc] - 1;
        i = 0;
        while (i <= mi) {
          _root.deleteModulePiece(modLoc + i);
          ++i;
        }
      } else {
        _root.showPopup('Error', 'An unexpected error has occurred. The module you are trying to sell appears to be non-existent.');
      }
      _root.organizeModule();
    }

    function swapModulePiece(pieceA, pieceB) {
      _root.copyModulePiece(pieceA, 141);
      _root.copyModulePiece(pieceB, pieceA);
      _root.copyModulePiece(141, pieceB);
      _root.deleteModulePiece(141);
    }

    function copyModulePiece(pieceOrig, pieceDest) {
      _root.save.progModuleName[pieceDest] = _root.save.progModuleName[pieceOrig];
      _root.save.progModuleTier[pieceDest] = _root.save.progModuleTier[pieceOrig];
      _root.save.progModuleSize[pieceDest] = _root.save.progModuleSize[pieceOrig];
      _root.save.progModuleShiny[pieceDest] = _root.save.progModuleShiny[pieceOrig];
      _root.save.progModuleType[pieceDest] = _root.save.progModuleType[pieceOrig];
      _root.save.progModuleChance[pieceDest] = _root.save.progModuleChance[pieceOrig];
      _root.save.progModuleEffect[pieceDest] = _root.save.progModuleEffect[pieceOrig];
      _root.save.progModuleCost[pieceDest] = _root.save.progModuleCost[pieceOrig];
    }

    function deleteModulePiece(pieceA) {
      _root.save.progModuleName[pieceA] = '';
      _root.save.progModuleTier[pieceA] = 0;
      _root.save.progModuleSize[pieceA] = 0;
      _root.save.progModuleShiny[pieceA] = 0;
      _root.save.progModuleType[pieceA] = 0;
      _root.save.progModuleChance[pieceA] = 0;
      _root.save.progModuleEffect[pieceA] = 0;
      _root.save.progModuleCost[pieceA] = 0;
    }

    function restockModule(typ) {
      curPos = 111;
      if (typ == 1) {
        tierUpChance = 0.5;
        minTier = 1;
        maxTier = 6;
        shinyChance = 0.02;
      } else {
        if (typ == 2) {
          tierUpChance = 0.6;
          minTier = 3;
          maxTier = 7;
          shinyChance = 0.05;
        } else {
          if (typ == 3) {
            tierUpChance = 0.7;
            minTier = 5;
            maxTier = 8;
            shinyChance = 0.15;
          } else {
            if (typ == 4) {
              tierUpChance = 0.8;
              minTier = 7;
              maxTier = 9;
              shinyChance = 0.3;
            } else {
              tierUpChance = 0.42;
              minTier = 1;
              maxTier = 4 + _root.save.banned;
              shinyChance = 0.008;
              if (_root.save.bestLevel >= 9000) {
                shinyChance = 0.06900000000000001;
              }
              tierUpChance += _root.save.whiteCoin / 2500000;
              if (_root.dow == 0 || _root.dow == 2 || _root.dow == 4 || _root.dow == 6) {
                tierUpChance += 0.1;
              }
              if (_root.dow == 5 || _root.dow == 6) {
                shinyChance += 0.1;
              }
              if (_root.clock_year == 2015 && _root.clock_month == 1 && _root.clock_date >= 25) {
                shinyChance += 0.2;
              }
            }
          }
        }
      }
      i = 111;
      while (i <= 140) {
        _root.deleteModulePiece(i);
        _root.save.progModuleTier[i] = -1;
        ++i;
      }
      while (curPos <= 140) {
        maxSize = 141 - curPos;
        tempModuleType = random(42) + 1;
        if (Math.random() < 0.2) {
          tempModuleType = random(4) + 1;
        }
        if (tempModuleType == 5 || tempModuleType == 13 || tempModuleType == 22 || tempModuleType == 24 || tempModuleType == 25 || tempModuleType == 27 || tempModuleType >= 33 && tempModuleType <= 39 || tempModuleType == 41) {
          tempModuleType = random(42) + 1;
        }
        tempShiny = 0;
        tempTier = 1;
        i = 1;
        while (i <= 8) {
          if (Math.random() < shinyChance && maxSize >= 2) {
            tempShiny = 1;
          }
          if (Math.random() < tierUpChance && tempTier < maxTier || tempTier < minTier) {
            tempTier += 1;
          } else {
            if (Math.random() < 0.5) {
              i = 9;
            }
          }
          ++i;
        }
        if (tempModuleType == 1) {
          tempNameA = 'EXP Module';
          tempSize = 1;
          tempChance = 1000;
          tempEffect = 15;
          tempCost = 25;
        } else {
          if (tempModuleType == 2) {
            tempNameA = 'Coin Module';
            tempSize = 1;
            tempChance = 1000;
            tempEffect = 15;
            tempCost = 10;
          } else {
            if (tempModuleType == 3) {
              tempNameA = 'Green Coin Module';
              tempSize = 1;
              tempChance = 1000;
              tempEffect = 250;
              tempCost = 10;
            } else {
              if (tempModuleType == 4) {
                tempNameA = 'Blue Coin Module';
                tempSize = 2;
                tempChance = 500;
                tempEffect = 2;
                tempCost = 25;
              } else {
                if (tempModuleType == 5) {
                  tempNameA = 'White Coin Module';
                  tempSize = 4;
                  tempChance = 10;
                  tempEffect = 1;
                  tempCost = 250;
                } else {
                  if (tempModuleType == 6) {
                    tempNameA = 'Boost Module';
                    tempSize = 2;
                    tempChance = 250;
                    tempEffect = 2;
                    tempCost = 50;
                  } else {
                    if (tempModuleType == 7) {
                      tempNameA = 'Boost Freeze Module';
                      tempSize = 2;
                      tempChance = 50;
                      tempEffect = 5;
                      tempCost = 100;
                    } else {
                      if (tempModuleType == 8) {
                        tempNameA = '1.5x EXP Module';
                        tempSize = 2;
                        tempChance = 100;
                        tempEffect = 10;
                        tempCost = 25;
                      } else {
                        if (tempModuleType == 9) {
                          tempNameA = '1.5x Coin Module';
                          tempSize = 2;
                          tempChance = 100;
                          tempEffect = 10;
                          tempCost = 10;
                        } else {
                          if (tempModuleType == 10) {
                            tempNameA = 'Harvest Value Module';
                            tempSize = 2;
                            tempChance = 500;
                            tempEffect = 100;
                            tempCost = 25;
                          } else {
                            if (tempModuleType == 11) {
                              tempNameA = 'Pet Mana Module';
                              tempSize = 2;
                              tempChance = 50;
                              tempEffect = 1;
                              tempCost = 25;
                            } else {
                              if (tempModuleType == 12) {
                                tempNameA = 'Garden Point Module';
                                tempSize = 2;
                                tempChance = 500;
                                tempEffect = 5;
                                tempCost = 25;
                              } else {
                                if (tempModuleType == 13) {
                                  tempNameA = 'Randomfruit Module';
                                  tempSize = 4;
                                  tempChance = 100;
                                  tempEffect = 1;
                                  tempCost = 50;
                                } else {
                                  if (tempModuleType == 14) {
                                    tempNameA = 'HP Recovery Module';
                                    tempSize = 1;
                                    tempChance = 2000;
                                    tempEffect = 25;
                                    tempCost = 25;
                                  } else {
                                    if (tempModuleType == 15) {
                                      tempNameA = 'MP Recovery Module';
                                      tempSize = 1;
                                      tempChance = 2000;
                                      tempEffect = 25;
                                      tempCost = 50;
                                    } else {
                                      if (tempModuleType == 16) {
                                        tempNameA = 'Rage Module';
                                        tempSize = 2;
                                        tempChance = 250;
                                        tempEffect = 3;
                                        tempCost = 50;
                                      } else {
                                        if (tempModuleType == 17) {
                                          tempNameA = 'Pixel Module';
                                          tempSize = 2;
                                          tempChance = 500;
                                          tempEffect = 1000;
                                          tempCost = 25;
                                        } else {
                                          if (tempModuleType == 18) {
                                            tempNameA = 'CM Module';
                                            tempSize = 2;
                                            tempChance = 500;
                                            tempEffect = 100;
                                            tempCost = 25;
                                          } else {
                                            if (tempModuleType == 19) {
                                              tempNameA = 'SCM Module';
                                              tempSize = 2;
                                              tempChance = 500;
                                              tempEffect = 1;
                                              tempCost = 25;
                                            } else {
                                              if (tempModuleType == 20) {
                                                tempNameA = 'Unobtainium Module';
                                                tempSize = 3;
                                                tempChance = 200;
                                                tempEffect = 1;
                                                tempCost = 50;
                                              } else {
                                                if (tempModuleType == 21) {
                                                  tempNameA = 'Enhancer Fragment Module';
                                                  tempSize = 1;
                                                  tempChance = 100;
                                                  tempEffect = 10;
                                                  tempCost = 10;
                                                } else {
                                                  if (tempModuleType == 22) {
                                                    tempNameA = 'Bacon Module';
                                                    tempSize = 3;
                                                    tempChance = 200;
                                                    tempEffect = 1;
                                                    tempCost = 25;
                                                  } else {
                                                    if (tempModuleType == 23) {
                                                      tempNameA = 'Crystal Module';
                                                      tempSize = 3;
                                                      tempChance = 100;
                                                      tempEffect = 1;
                                                      tempCost = 25;
                                                    } else {
                                                      if (tempModuleType == 24) {
                                                        tempNameA = 'Ultimate Crystal Module';
                                                        tempSize = 4;
                                                        tempChance = 25;
                                                        tempEffect = 1;
                                                        tempCost = 50;
                                                      } else {
                                                        if (tempModuleType == 25) {
                                                          tempNameA = 'Purple Button Module';
                                                          tempSize = 3;
                                                          tempChance = 200;
                                                          tempEffect = 1;
                                                          tempCost = 25;
                                                        } else {
                                                          if (tempModuleType == 26) {
                                                            tempNameA = 'Career EXP Module';
                                                            tempSize = 1;
                                                            tempChance = 500;
                                                            tempEffect = 50;
                                                            tempCost = 10;
                                                          } else {
                                                            if (tempModuleType == 27) {
                                                              tempNameA = '100k Medal Module';
                                                              tempSize = 3;
                                                              tempChance = 200;
                                                              tempEffect = 1;
                                                              tempCost = 25;
                                                            } else {
                                                              if (tempModuleType == 28) {
                                                                tempNameA = 'Stadium Token Module';
                                                                tempSize = 1;
                                                                tempChance = 500;
                                                                tempEffect = 20;
                                                                tempCost = 10;
                                                              } else {
                                                                if (tempModuleType == 29) {
                                                                  tempNameA = 'FCG Cash Module';
                                                                  tempSize = 1;
                                                                  tempChance = 500;
                                                                  tempEffect = 20;
                                                                  tempCost = 10;
                                                                } else {
                                                                  if (tempModuleType >= 30 && tempModuleType <= 39) {
                                                                    tempNameA = 'LolMarket Lv. ' + (tempModuleType - 29) + ' Module';
                                                                    if (tempModuleType == 30) {
                                                                      tempSize = 1;
                                                                      tempChance = 10;
                                                                      tempEffect = 1;
                                                                      tempCost = 10;
                                                                    } else {
                                                                      if (tempModuleType == 31) {
                                                                        tempSize = 2;
                                                                        tempChance = 15;
                                                                        tempEffect = 1;
                                                                        tempCost = 20;
                                                                      } else {
                                                                        if (tempModuleType == 32) {
                                                                          tempSize = 2;
                                                                          tempChance = 15;
                                                                          tempEffect = 1;
                                                                          tempCost = 30;
                                                                        } else {
                                                                          if (tempModuleType == 33) {
                                                                            tempSize = 3;
                                                                            tempChance = 20;
                                                                            tempEffect = 1;
                                                                            tempCost = 40;
                                                                          } else {
                                                                            if (tempModuleType == 34) {
                                                                              tempSize = 3;
                                                                              tempChance = 20;
                                                                              tempEffect = 1;
                                                                              tempCost = 50;
                                                                            } else {
                                                                              if (tempModuleType == 35) {
                                                                                tempSize = 3;
                                                                                tempChance = 20;
                                                                                tempEffect = 1;
                                                                                tempCost = 60;
                                                                              } else {
                                                                                if (tempModuleType == 36) {
                                                                                  tempSize = 4;
                                                                                  tempChance = 25;
                                                                                  tempEffect = 1;
                                                                                  tempCost = 70;
                                                                                } else {
                                                                                  if (tempModuleType == 37) {
                                                                                    tempSize = 4;
                                                                                    tempChance = 25;
                                                                                    tempEffect = 1;
                                                                                    tempCost = 80;
                                                                                  } else {
                                                                                    if (tempModuleType == 38) {
                                                                                      tempSize = 4;
                                                                                      tempChance = 25;
                                                                                      tempEffect = 1;
                                                                                      tempCost = 90;
                                                                                    } else {
                                                                                      if (tempModuleType == 39) {
                                                                                        tempSize = 4;
                                                                                        tempChance = 25;
                                                                                        tempEffect = 1;
                                                                                        tempCost = 100;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } else {
                                                                    if (tempModuleType == 40) {
                                                                      tempNameA = 'Adventure Time Module';
                                                                      tempSize = 2;
                                                                      tempChance = 200;
                                                                      tempEffect = 2;
                                                                      tempCost = 25;
                                                                    } else {
                                                                      if (tempModuleType == 41) {
                                                                        tempNameA = 'Special Food Module';
                                                                        tempSize = 4;
                                                                        tempChance = 400;
                                                                        tempEffect = 1;
                                                                        tempCost = 10;
                                                                      } else {
                                                                        if (tempModuleType == 42) {
                                                                          tempNameA = 'Fatigue Recovery Module';
                                                                          tempSize = 2;
                                                                          tempChance = 250;
                                                                          tempEffect = 3;
                                                                          tempCost = 50;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (tempTier >= 9) {
          tempTier = 9;
          if (tempEffect == 1) {
            tempChance = Math.round(tempChance * 4);
          } else {
            tempChance = Math.round(tempChance * 2);
            tempEffect = Math.floor(tempEffect * 2);
          }
          tempCost = Math.round(tempCost * 100);
        } else {
          if (tempEffect == 1) {
            tempChance = Math.round(tempChance * (1 + (tempTier - 1) / 10) * (1 + (tempTier - 1) / 10));
          } else {
            tempChance = Math.round(tempChance * (1 + (tempTier - 1) / 10));
            tempEffect = Math.floor(tempEffect * (1 + (tempTier - 1) / 10));
          }
          tempCost = Math.round(tempCost * tempTier * tempTier);
        }
        if (tempShiny == 1) {
          tempSize += 1;
          if (tempEffect == 1) {
            tempChance = Math.ceil(tempChance * 5);
          } else {
            tempChance = Math.ceil(tempChance * 2.5);
            tempEffect = Math.floor(tempEffect * 2);
          }
          tempCost = Math.round(tempCost * 10);
        }
        tempValid = true;
        if (tempSize > maxSize) {
          tempValid = false;
        }
        if (tempValid == true) {
          _root.save.progModuleName[curPos] = tempNameA;
          _root.save.progModuleTier[curPos] = tempTier;
          _root.save.progModuleSize[curPos] = tempSize;
          _root.save.progModuleShiny[curPos] = tempShiny;
          _root.save.progModuleType[curPos] = tempModuleType;
          _root.save.progModuleChance[curPos] = tempChance;
          _root.save.progModuleEffect[curPos] = tempEffect;
          _root.save.progModuleCost[curPos] = tempCost;
          curPos += tempSize;
        }
      }
    }

    bannedUsers = ['Guest', 'Tukkun', 'omfg13321', 'milleraus10', 'Valmont06', 'DarkWazza', 'idan2', 'luungockhang', 'danielm59', 'Batux1995', 'nc666', 'hilariousguy878', 'Dariush', 'wazor', 'Darnal', 'Weredeer', 'littleNekoDemon', 'oblivion60', 'Chendler', 'tiopo', 'supersonicguy', 'blackwiz', 'jamesty', 'omonoiadam', 'CECIII', 'KidDeath', 'Hedgehog101', 'Eciplyse2', 'Arutima', 'Mnchngrnqs', 'keith143', 'kamitop', 'p9a9u9l', 'EsCaPeThEfAtE2', 'MattiasM', 'TecknozThaBezt', 'thelolofdeath', 'alsc', 'Darvious', 'AntonioS2740', 'saltineface', 'JaredOfSubway', 'HARIB0L', 'luka1795', 'Vsegdaskray', 'Mnchngrngs', 'perez7631', 'zeroskil1', 'Salomanity', 'Franklinperry2', 'delshady', 'Salomanity2', 'Inhruby', 'justfg', 'Bunker', 'vitinho90', 'BNR32k'];
    scoreBanned = false;
    i = 0;
    while (i <= bannedUsers.length) {
      if (_root.kongregate_username == bannedUsers[i]) {
        scoreBanned = true;
      }
      ++i;
    }
    careerName = ['', 'Idler', 'Gardener', 'Fighter', 'Item Maker', 'Button Basher', 'Arcade Player', 'Racer', 'Card Player', 'Gem Trader', 'Adventurer', 'Pet Trainer', 'Fisher'];
    String.prototype.replace = function (F, R) {
      return (this.split(F)).join(R);
    };

    nameValue = 0;
    str = _root.kongregate_username;
    if (str == undefined) {
      str = 'Kongregate Username';
    }
    i = 1;
    while (i <= str.length) {
      cDigit = substring(str, i, 1);
      switch (cDigit) {
        case 'A':
          nD = 21;
          break;
        case 'B':
          nD = 15;
          break;
        case 'C':
          nD = 34;
          break;
        case 'D':
          nD = 23;
          break;
        case 'E':
          nD = 12;
          break;
        case 'F':
          nD = 37;
          break;
        case 'G':
          nD = 29;
          break;
        case 'H':
          nD = 13;
          break;
        case 'I':
          nD = 31;
          break;
        case 'J':
          nD = 26;
          break;
        case 'K':
          nD = 14;
          break;
        case 'L':
          nD = 39;
          break;
        case 'M':
          nD = 24;
          break;
        case 'N':
          nD = 19;
          break;
        case 'O':
          nD = 35;
          break;
        case 'P':
          nD = 27;
          break;
        case 'Q':
          nD = 14;
          break;
        case 'R':
          nD = 36;
          break;
        case 'S':
          nD = 23;
          break;
        case 'T':
          nD = 18;
          break;
        case 'U':
          nD = 37;
          break;
        case 'V':
          nD = 27;
          break;
        case 'W':
          nD = 18;
          break;
        case 'X':
          nD = 36;
          break;
        case 'Y':
          nD = 21;
          break;
        case 'Z':
          nD = 14;
          break;
        case 'a':
          nD = 43;
          break;
        case 'b':
          nD = 33;
          break;
        case 'c':
          nD = 22;
          break;
        case 'd':
          nD = 45;
          break;
        case 'e':
          nD = 34;
          break;
        case 'f':
          nD = 27;
          break;
        case 'g':
          nD = 43;
          break;
        case 'h':
          nD = 39;
          break;
        case 'i':
          nD = 25;
          break;
        case 'j':
          nD = 48;
          break;
        case 'k':
          nD = 37;
          break;
        case 'l':
          nD = 25;
          break;
        case 'm':
          nD = 46;
          break;
        case 'n':
          nD = 35;
          break;
        case 'o':
          nD = 25;
          break;
        case 'p':
          nD = 49;
          break;
        case 'q':
          nD = 37;
          break;
        case 'r':
          nD = 27;
          break;
        case 's':
          nD = 46;
          break;
        case 't':
          nD = 32;
          break;
        case 'u':
          nD = 28;
          break;
        case 'v':
          nD = 45;
          break;
        case 'w':
          nD = 31;
          break;
        case 'x':
          nD = 24;
          break;
        case 'y':
          nD = 43;
          break;
        case 'z':
          nD = 33;
          break;
        case '0':
          nD = 22;
          break;
        case '1':
          nD = 52;
          break;
        case '2':
          nD = 44;
          break;
        case '3':
          nD = 34;
          break;
        case '4':
          nD = 43;
          break;
        case '5':
          nD = 36;
          break;
        case '6':
          nD = 55;
          break;
        case '7':
          nD = 45;
          break;
        case '8':
          nD = 54;
          break;
        case '9':
          nD = 37;
          break;
        default:
          nD = 1;
      }
      if (i == 1) {
        nameValue += 7 * nD + 133;
      } else {
        nameValue += (i + 1) * nD + 2;
      }
      if (nameValue > 10000) {
        nameValue -= 337;
      }
      ++i;
    }
    if (str == 'Guest') {
      nameValue = 0;
    }
    b = 1;
    while (b <= 30) {
      _root['X0breakNews' + b] = '';
      _root['X0breakStamp' + b] = '';
      _root['X0breakColor' + b] = 0;
      _root['X1breakNews' + b] = '';
      _root['X1breakStamp' + b] = '';
      _root['X1breakColor' + b] = 0;
      _root['X2breakNews' + b] = '';
      _root['X2breakStamp' + b] = '';
      _root['X2breakColor' + b] = 0;
      _root['X3breakNews' + b] = '';
      _root['X3breakStamp' + b] = '';
      _root['X3breakColor' + b] = 0;
      _root['X4breakNews' + b] = '';
      _root['X4breakStamp' + b] = '';
      _root['X4breakColor' + b] = 0;
      c = 1;
      while (c <= 30) {
        _root['F' + c + 'breakNews' + b] = '';
        _root['F' + c + 'breakStamp' + b] = '';
        _root['F' + c + 'breakColor' + b] = 0;
        ++c;
      }
      ++b;
    }
    var mouseListener = new Object();
    mouseListener.onMouseWheel = function (wheelNum) {
      if (wheelNum > 0) {
        _root.scrollUp();
      } else {
        if (wheelNum < 0) {
          _root.scrollDown();
        }
      }
    };

    Mouse.addListener(mouseListener);
    cyborgActShortName = ['Recharge', 'Pong', 'Ult. Avoidance', 'Math Master', 'Whack-a-greg', 'Triangle Count', 'MindSweeper', 'Balance 3', 'Simple Race', 'Item Fight', 'Death Match', 'FCG - Level 0', 'FCG - Level 1', 'FCG - Level 2', 'FCG - Level 3', 'FCG - Level 4', 'FCG - Level 6', 'FCG - Level 7', 'FCG - Level 8', 'FCG - Level 10', 'Fishing'];
    cyborgActLongName = ['Recharging...', 'Arcade - Pong: Survival Battle', 'Arcade - Ultimate Avoidance', 'Arcade - Math Master', 'Arcade - Whack-a-greg', 'Arcade - Triangle Count', 'Arcade - MindSweeper', 'Arcade - Balance 3', 'Stadium - Simple Race (Impossible)', 'Stadium - Item Fight (Impossible)', 'Stadium - Death Match', 'TukkunFCG - Level 0', 'TukkunFCG - Level 1', 'TukkunFCG - Level 2', 'TukkunFCG - Level 3', 'TukkunFCG - Level 4', 'TukkunFCG - Level 6', 'TukkunFCG - Level 7', 'TukkunFCG - Level 8', 'TukkunFCG - Level 10', 'Fishing'];
    cyborgActMinPerf = [40, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 5, 5, 50, 5, 4.5, 4, 3.5, 3, 2.5, 2, 1.5, 1, 1];
    cyborgActMaxPerf = [240, 4200000, 1400000, 2400000, 3300000, 13500000, 4000000, 7200000, 90, 90, 1100, 99, 98, 97, 96, 95, 90, 85, 80, 70, 95];
    cyborgActPerfText = ['Energy', 'Maximum Score', 'Maximum Score', 'Maximum Score', 'Maximum Score', 'Maximum Score', 'Maximum Score', 'Maximum Score', 'Win Rate', 'Win Rate', 'Maximum PWNts', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Win Rate', 'Perfect Rate'];
    cyborgActPerfSign = [' sec', '', '', '', '', '', '', '', '%', '%', '', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%'];
    cyborgActTime = [300, 420, 175, 80, 165, 675, 500, 360, 17, 19, 600, 60, 80, 100, 120, 150, 180, 220, 260, 360, 27];
    cyborgActCost = [0, 75, 30, 15, 30, 90, 90, 60, 5, 5, 1000, 9, 12, 15, 18, 25, 40, 60, 90, 150, 11];
    cyborgWorking = false;
  }

  frame 4 {
    function addArenaCraftWeapon(recipeType, recipeReq, recipeLimit, reqRank, subtype, range, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.reqRank = reqRank;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.range = range;
      v1.attack = attack;
      v1.speed = speed;
      v1.defense = defense;
      v1.bonus = bonus;
      v1.ability = ability;
      v1.moreBonus = moreBonus;
      v1.maxLevel = maxLevel;
      v1.expTNL = expTNL;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      if (noLife == false) {
        v1.expiry = Infinity;
      }
      v1.noBonus = noBonus;
      v1.noLife = noLife;
      v1.noFuse = noFuse;
      v1.noUnique = noUnique;
      v1.spirit = spirit;
      v1.unob = unob;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.crit = crit;
      v1.dexterity = dexterity;
      v1.health = health;
      v1.desc = desc;
      craftWeapon.push(v1);
    }

    function addArenaCraftArmor(recipeType, recipeReq, recipeLimit, reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.reqRank = reqRank;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.attack = attack;
      v1.speed = speed;
      v1.defense = defense;
      v1.bonus = bonus;
      v1.ability = ability;
      v1.moreBonus = moreBonus;
      v1.maxLevel = maxLevel;
      v1.expTNL = expTNL;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      if (noLife == false) {
        v1.expiry = Infinity;
      }
      v1.noBonus = noBonus;
      v1.noLife = noLife;
      v1.noFuse = noFuse;
      v1.noUnique = noUnique;
      v1.spirit = spirit;
      v1.unob = unob;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.crit = crit;
      v1.dexterity = dexterity;
      v1.health = health;
      v1.desc = desc;
      craftArmor.push(v1);
    }

    function addArenaCraftAccessory(recipeType, recipeReq, recipeLimit, reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.reqRank = reqRank;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.attack = attack;
      v1.speed = speed;
      v1.defense = defense;
      v1.bonus = bonus;
      v1.ability = ability;
      v1.moreBonus = moreBonus;
      v1.maxLevel = maxLevel;
      v1.expTNL = expTNL;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      if (noLife == false) {
        v1.expiry = Infinity;
      }
      v1.noBonus = noBonus;
      v1.noLife = noLife;
      v1.noFuse = false;
      v1.noUnique = noUnique;
      v1.spirit = spirit;
      v1.unob = unob;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.crit = crit;
      v1.dexterity = dexterity;
      v1.health = health;
      v1.desc = desc;
      craftAccessory.push(v1);
    }

    function addArenaCraftMedal(recipeType, recipeReq, recipeLimit, reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.reqRank = reqRank;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.attack = attack;
      v1.speed = speed;
      v1.defense = defense;
      v1.bonus = bonus;
      v1.ability = ability;
      v1.moreBonus = moreBonus;
      v1.maxLevel = maxLevel;
      v1.expTNL = expTNL;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      if (noLife == false) {
        v1.expiry = Infinity;
      }
      v1.noBonus = noBonus;
      v1.noLife = noLife;
      v1.noFuse = false;
      v1.noUnique = noUnique;
      v1.spirit = spirit;
      v1.unob = unob;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.crit = crit;
      v1.dexterity = dexterity;
      v1.health = health;
      v1.desc = desc;
      craftMedal.push(v1);
    }

    function addArenaCraftEnhancer(recipeType, recipeReq, recipeLimit, subtype, frame, power, curse, success, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.power = power;
      v1.curse = curse;
      v1.success = success;
      v1.bonus = bonus;
      v1.ability = ability;
      v1.moreBonus = moreBonus;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.desc = desc;
      craftEnhancer.push(v1);
    }

    function addArenaCraftPotion(recipeType, recipeReq, recipeLimit, subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.attack = attack;
      v1.defense = defense;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.desc = desc;
      craftPotion.push(v1);
    }

    function addArenaCraftChip(recipeType, recipeReq, recipeLimit, subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, costPixel, costCraft, costSpec, careerExp, name, desc) {
      var v1 = new Object();
      v1.recipeType = recipeType;
      v1.recipeReq = recipeReq;
      v1.recipeLimit = recipeLimit;
      v1.name = name;
      v1.subtype = subtype;
      v1.frame = frame;
      v1.attack = attack;
      v1.defense = defense;
      v1.enhance = enhance;
      v1.bonusPow = bonusPow;
      v1.sell = sell;
      v1.expiry = expiry * 86400000;
      v1.costPixel = costPixel;
      v1.costCraft = costCraft;
      v1.costSpec = costSpec;
      v1.careerExp = careerExp;
      v1.desc = desc;
      craftChip.push(v1);
    }

    function addArenaSet(setNameD, bonusReq, bonusStat, bonusAmnt, setItems) {
      var v1 = new Object();
      v1.setNameD = setNameD;
      v1.setItems = setItems;
      v1.bonusReq = bonusReq;
      v1.bonusStat = bonusStat;
      v1.bonusAmnt = bonusAmnt;
      setArray.push(v1);
    }

    function checkArenaSet(itemName) {
      tempSetID = 0;
      n = 1;
      while (n <= setArray.length - 1) {
        p = 0;
        while (p <= setArray[n].setItems.length - 1) {
          tempName = setArray[n].setItems[p];
          if (itemName == tempName) {
            tempSetID = n;
          }
          if (tempName == 'Any Weapon of DOOOOOOM') {
            if (itemName.indexOf('DOOOOOOM') != -1) {
              tempSetID = n;
            }
          }
          if (tempName == 'Any Meteoric Weapon') {
            if (itemName.indexOf('Meteoric') != -1) {
              tempSetID = n;
            }
          }
          if (tempName == 'Any Dragon Slayer Weapon') {
            if (itemName.indexOf('Dragon Slayer') != -1) {
              tempSetID = n;
            }
          }
          if (tempName == 'Any Demon Slayer Weapon') {
            if (itemName.indexOf('Demon Slayer') != -1) {
              tempSetID = n;
            }
          }
          if (tempName == 'Any Pickaxe') {
            if (itemName.indexOf('Pickaxe') != -1) {
              tempSetID = n;
            }
          }
          if (tempName.indexOf('Any Alien') != -1) {
            if (itemName.indexOf('Alien') != -1) {
              tempSetID = n;
            }
          }
          if (tempName.indexOf('Dragon Slayer') != -1) {
            if (itemName.indexOf('Dragon Slayer') != -1) {
              tempSetID = n;
            }
          }
          if (tempName.indexOf('Demon Slayer') != -1) {
            if (itemName.indexOf('Demon Slayer') != -1) {
              tempSetID = n;
            }
          }
          ++p;
        }
        ++n;
      }
      return tempSetID;
    }

    function displaySetItems(setID) {
      tempDisp = '';
      equipCount = 0;
      i = 0;
      while (i <= setArray[setID].setItems.length - 1) {
        tempName = setArray[setID].setItems[i];
        equipped = false;
        if (_root.save.inventoryName[_root.save.arenaWeapon] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaSubWeapon] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaHat] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaShirt] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaGloves] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaPants] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaShoes] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaSkin] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaMedal] == tempName && _root.save.inventoryDesc[_root.save.arenaMedal] != 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!' && _root.save.inventoryDesc[_root.save.arenaMedal] != 'Thank you for your donation and your continued support!') {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaPendant] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaEarring] == tempName) {
          equipped = true;
        }
        if (_root.save.inventoryName[_root.save.arenaTrinket] == tempName) {
          equipped = true;
        }
        if (tempName == 'Any Weapon of DOOOOOOM') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('DOOOOOOM') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Meteoric Weapon') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Meteoric') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Dragon Slayer Weapon') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Demon Slayer Weapon') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Dragon Slayer Hat') {
          if (_root.save.inventoryName[_root.save.arenaHat].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Dragon Slayer Shirt') {
          if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Dragon Slayer Gloves') {
          if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Dragon Slayer Pants') {
          if (_root.save.inventoryName[_root.save.arenaPants].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Dragon Slayer Shoes') {
          if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('Dragon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Demon Slayer Hat') {
          if (_root.save.inventoryName[_root.save.arenaHat].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Demon Slayer Shirt') {
          if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Demon Slayer Gloves') {
          if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Demon Slayer Pants') {
          if (_root.save.inventoryName[_root.save.arenaPants].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Demon Slayer Shoes') {
          if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('Demon Slayer') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Pickaxe') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Pickaxe') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Weapon') {
          if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Hat') {
          if (_root.save.inventoryName[_root.save.arenaHat].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Shirt') {
          if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Gloves') {
          if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Pants') {
          if (_root.save.inventoryName[_root.save.arenaPants].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Alien Shoes') {
          if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('Alien') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Crystal Hat') {
          if (_root.save.inventoryName[_root.save.arenaHat].indexOf('Crystal') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Crystal Shirt') {
          if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('Crystal') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Crystal Gloves') {
          if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('Crystal') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Crystal Pants') {
          if (_root.save.inventoryName[_root.save.arenaPants].indexOf('Crystal') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Crystal Shoes') {
          if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('Crystal') != -1) {
            equipped = true;
          }
        }
        if (tempName == 'Any Rank 200+ Weapon') {
          if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 200) {
            equipped = true;
          }
        }
        if (tempName == 'Any Rank 300+ Weapon') {
          if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 300) {
            equipped = true;
          }
        }
        if (tempName == 'Any Rank 400+ Weapon') {
          if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 400) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Weapon') {
          if (_root.save.inventoryLevel[_root.save.arenaWeapon] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Hat') {
          if (_root.save.inventoryLevel[_root.save.arenaHat] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Shirt') {
          if (_root.save.inventoryLevel[_root.save.arenaShirt] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Gloves') {
          if (_root.save.inventoryLevel[_root.save.arenaGloves] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Pants') {
          if (_root.save.inventoryLevel[_root.save.arenaPants] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Shoes') {
          if (_root.save.inventoryLevel[_root.save.arenaShoes] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Any Finalized Skin') {
          if (_root.save.inventoryLevel[_root.save.arenaSkin] == 9999) {
            equipped = true;
          }
        }
        if (tempName == 'Invisible X') {
          if (_root.save.arenaAlly == 1) {
            equipped = true;
          }
        }
        if (tempName == 'Apocalypse Mode') {
          if (_root.apocalypse == true) {
            equipped = true;
          }
        }
        if (equipped == true) {
          tempDisp += '\n<font color=\'#FFFF00\'>' + tempName + '</font>';
          equipCount += 1;
        } else {
          tempDisp += '\n<font color=\'#CCCCCC\'>' + tempName + '</font>';
        }
        ++i;
      }
      tempDisp += '\n\n<font color=\'#CC9900\'><b>Set Bonus</b></font>';
      i = 0;
      while (i <= setArray[setID].bonusStat.length - 1) {
        if (setArray[setID].bonusAmnt[i] == -1) {
          if (setArray[setID].bonusReq[i] == 1) {
            plu = ' item';
          } else {
            plu = ' items';
          }
          if (equipCount >= setArray[setID].bonusReq[i]) {
            tempDisp += '\n<font color=\'#FFFF00\'>[' + setArray[setID].bonusReq[i] + plu + ']' + '</font> <font color=\'#CCFF33\'>' + setArray[setID].bonusStat[i];
          } else {
            tempDisp += '\n<font color=\'#CCCCCC\'>[' + setArray[setID].bonusReq[i] + plu + ']' + '</font> <font color=\'#BBBBBB\'>' + setArray[setID].bonusStat[i];
          }
        } else {
          if (setArray[setID].bonusReq[i] == 1) {
            plu = ' item';
          } else {
            plu = ' items';
          }
          if (equipCount >= setArray[setID].bonusReq[i]) {
            tempDisp += '\n<font color=\'#FFFF00\'>[' + setArray[setID].bonusReq[i] + plu + ']' + '</font> <font color=\'#CCFF33\'>' + setArray[setID].bonusStat[i] + ' <b>+' + setArray[setID].bonusAmnt[i] + '%</b>';
          } else {
            tempDisp += '\n<font color=\'#CCCCCC\'>[' + setArray[setID].bonusReq[i] + plu + ']' + '</font> <font color=\'#BBBBBB\'>' + setArray[setID].bonusStat[i] + ' <b>+' + setArray[setID].bonusAmnt[i] + '%</b>';
          }
        }
        ++i;
      }
      return tempDisp;
    }

    function checkSetBonus() {
      i = 1;
      while (i <= setArray.length - 1) {
        _root.setCount[i] = 0;
        ++i;
      }
      _root.setHighest = 0;
      _root.setCount[_root.save.inventorySet[_root.save.arenaWeapon]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaHat]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaShirt]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaGloves]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaPants]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaShoes]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaSkin]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaMedal]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaPendant]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaEarring]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaTrinket]] += 1;
      _root.setCount[_root.save.inventorySet[_root.save.arenaSubWeapon]] += 1;
      if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Constancy') {
        if (_root.save.inventoryLevel[_root.save.arenaWeapon] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaHat] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaShirt] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaGloves] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaPants] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaShoes] == 9999) {
          _root.setCount[1] += 1;
        }
        if (_root.save.inventoryLevel[_root.save.arenaSkin] == 9999) {
          _root.setCount[1] += 1;
        }
      }
      if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Empowering Gem') {
        if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 200) {
          _root.setCount[2] += 1;
        }
        if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 300) {
          _root.setCount[2] += 1;
        }
        if (_root.save.inventoryReqRank[_root.save.arenaWeapon] >= 400) {
          _root.setCount[2] += 1;
        }
      }
      if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('Pickaxe') != -1) {
        if (_root.save.inventoryName[_root.save.arenaHat].indexOf('Crystal') != -1) {
          _root.setCount[3] += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('Crystal') != -1) {
          _root.setCount[3] += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('Crystal') != -1) {
          _root.setCount[3] += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaPants].indexOf('Crystal') != -1) {
          _root.setCount[3] += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('Crystal') != -1) {
          _root.setCount[3] += 1;
        }
      }
      if (_root.setCount[48] > 0 && _root.apocalypse == true) {
        _root.setCount[48] += 1;
      }
      if (_root.setCount[64] > 0 && _root.apocalypse == true) {
        _root.setCount[64] += 1;
      }
      if (_root.setCount[70] > 0 && _root.save.arenaAlly == 1) {
        _root.setCount[70] += 1;
      }
      _root.setExpBonus = 0;
      _root.setCoinBonus = 0;
      _root.setPixelBonus = 0;
      _root.setDropBonus = 0;
      _root.setSpawnBonus = 0;
      _root.setDamageBonus = 0;
      _root.setHealthBonus = 0;
      _root.setManaBonus = 0;
      _root.setSpeedBonus = 0;
      _root.setRareBonus = 0;
      _root.setEpicBonus = 0;
      i = 1;
      while (i <= setArray.length - 1) {
        if (_root.setCount[i] > 0) {
          tmpItemCount = _root.setCount[i];
          if (i == 48 && _root.setCount[48] > 0 && _root.apocalypse == true) {
            tmpItemCount -= 1;
          }
          if (i == 64 && _root.setCount[64] > 0 && _root.apocalypse == true) {
            tmpItemCount -= 1;
          }
          if (i == 70 && _root.setCount[70] > 0 && _root.save.arenaAlly == 1) {
            tmpItemCount -= 1;
          }
          if (_root.setHighest < tmpItemCount) {
            _root.setHighest = tmpItemCount;
          }
          k = 0;
          while (k <= setArray[i].bonusStat.length - 1) {
            if (_root.setCount[i] >= setArray[i].bonusReq[k]) {
              if (setArray[i].bonusStat[k] == 'EXP') {
                _root.setExpBonus += setArray[i].bonusAmnt[k];
              } else {
                if (setArray[i].bonusStat[k] == 'Coin') {
                  _root.setCoinBonus += setArray[i].bonusAmnt[k];
                } else {
                  if (setArray[i].bonusStat[k] == 'Pixel') {
                    _root.setPixelBonus += setArray[i].bonusAmnt[k];
                  } else {
                    if (setArray[i].bonusStat[k] == 'Drop Rate') {
                      _root.setDropBonus += setArray[i].bonusAmnt[k];
                    } else {
                      if (setArray[i].bonusStat[k] == 'Spawn Rate') {
                        _root.setSpawnBonus += setArray[i].bonusAmnt[k];
                      } else {
                        if (setArray[i].bonusStat[k] == 'Damage') {
                          _root.setDamageBonus += setArray[i].bonusAmnt[k];
                        } else {
                          if (setArray[i].bonusStat[k] == 'MaxHP') {
                            _root.setHealthBonus += setArray[i].bonusAmnt[k];
                          } else {
                            if (setArray[i].bonusStat[k] == 'MaxMP') {
                              _root.setManaBonus += setArray[i].bonusAmnt[k];
                            } else {
                              if (setArray[i].bonusStat[k] == 'Attack Speed') {
                                _root.setSpeedBonus += setArray[i].bonusAmnt[k];
                              } else {
                                if (setArray[i].bonusStat[k] == 'Rare Monster Rate') {
                                  _root.setRareBonus += setArray[i].bonusAmnt[k];
                                } else {
                                  if (setArray[i].bonusStat[k] == 'Epic Monster Rate') {
                                    _root.setEpicBonus += setArray[i].bonusAmnt[k];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++k;
          }
        }
        ++i;
      }
    }

    function previewFusedWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard) {
      k = 1331;
      if (noBonus == undefined) {
        noBonus = false;
      }
      if (noLife == undefined) {
        noLife = true;
      }
      if (noFuse == undefined) {
        noFuse = false;
      }
      if (noUnique == undefined) {
        noUnique = false;
      }
      if (spirit == undefined) {
        spirit = false;
      }
      if (guard == undefined) {
        guard = false;
      }
      if (isNaN(level)) {
        level = 1;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [level] not defined.', 16711680, 9002);
      }
      if (isNaN(exp)) {
        exp = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [exp] not defined.', 16711680, 9002);
      }
      if (isNaN(crit)) {
        crit = 10;
        dexterity = 0;
        health = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [crit] not defined.', 16711680, 9002);
      }
      if (isNaN(unob)) {
        unob = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [unob] not defined.', 16711680, 9002);
      }
      itemSet = _root.checkArenaSet(name);
      if (moreBonus == undefined) {
        moreBonus = '';
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
      }
      if (desc == undefined) {
        desc = '';
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
      }
      _root.save.inventoryExist[k] = 1;
      _root.save.inventoryName[k] = name;
      _root.save.inventoryReqRank[k] = reqRank;
      _root.save.inventoryType[k] = 'Weapon';
      _root.save.inventorySubtype[k] = subtype;
      _root.save.inventoryFrame[k] = frame;
      _root.save.inventoryRange[k] = range;
      _root.save.inventoryAttack[k] = attack;
      _root.save.inventorySpeed[k] = speed;
      _root.save.inventoryDefense[k] = defense;
      _root.save.inventoryBonus[k] = bonus;
      _root.save.inventoryAbility[k] = ability;
      _root.save.inventoryMoreBonus[k] = moreBonus;
      _root.save.inventoryLevel[k] = level;
      _root.save.inventoryMaxLevel[k] = maxLevel;
      _root.save.inventoryExp[k] = exp;
      _root.save.inventoryExpTNL[k] = expTNL;
      _root.save.inventoryEnhance[k] = enhance;
      _root.save.inventoryBonusPow[k] = bonusPow;
      _root.save.inventorySell[k] = sell;
      _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
      if (noLife == false) {
        _root.save.inventoryExpiry[k] = Infinity;
      }
      _root.save.inventoryObtainTime[k] = _root.systemtimenow;
      _root.save.inventoryDesc[k] = desc;
      _root.save.inventoryCrit[k] = crit;
      _root.save.inventoryDexterity[k] = dexterity;
      _root.save.inventoryHealth[k] = health;
      _root.save.inventoryNoBonus[k] = noBonus;
      _root.save.inventoryNoFuse[k] = noFuse;
      _root.save.inventoryNoUnique[k] = noUnique;
      _root.save.inventorySpirit[k] = spirit;
      _root.save.inventoryGuard[k] = guard;
      _root.save.inventoryUnob[k] = unob;
      _root.save.inventorySet[k] = itemSet;
      if (_root.save.inventoryBonus[k] == 'Random') {
        bonusToGet = random(22) + 1;
        if (bonusToGet == 1 || bonusToGet == 2) {
          _root.save.inventoryBonus[k] = 'Reward';
        }
        if (bonusToGet == 3 || bonusToGet == 4) {
          _root.save.inventoryBonus[k] = 'EXP';
        }
        if (bonusToGet == 5 || bonusToGet == 6) {
          _root.save.inventoryBonus[k] = 'Coin';
        }
        if (bonusToGet == 7 || bonusToGet == 8) {
          _root.save.inventoryBonus[k] = 'Pixel';
        }
        if (bonusToGet == 9 || bonusToGet == 10) {
          _root.save.inventoryBonus[k] = 'Drop Rate';
        }
        if (bonusToGet == 11 || bonusToGet == 12) {
          _root.save.inventoryBonus[k] = 'Spawn Rate';
        }
        if (bonusToGet == 13) {
          _root.save.inventoryBonus[k] = 'Fire Element';
        }
        if (bonusToGet == 14) {
          _root.save.inventoryBonus[k] = 'Ice Element';
        }
        if (bonusToGet == 15) {
          _root.save.inventoryBonus[k] = 'Wind Element';
        }
        if (bonusToGet == 16) {
          _root.save.inventoryBonus[k] = 'Earth Element';
        }
        if (bonusToGet == 17) {
          _root.save.inventoryBonus[k] = 'Thunder Element';
        }
        if (bonusToGet == 18) {
          _root.save.inventoryBonus[k] = 'Water Element';
        }
        if (bonusToGet == 19) {
          _root.save.inventoryBonus[k] = 'Light Element';
        }
        if (bonusToGet == 20) {
          _root.save.inventoryBonus[k] = 'Dark Element';
        }
        if (bonusToGet == 21) {
          _root.save.inventoryBonus[k] = 'Rare Monster Rate';
        }
        if (bonusToGet == 22) {
          _root.save.inventoryBonus[k] = 'Epic Monster Rate';
        }
        if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
        } else {
          if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
          }
        }
      }
      if (_root.save.inventoryAbility[k] == 'Random') {
        bonusToGet = random(47) + 1;
        if (bonusToGet == 1) {
          _root.save.inventoryAbility[k] = 'Attack';
        }
        if (bonusToGet == 2) {
          _root.save.inventoryAbility[k] = 'Attack Speed';
        }
        if (bonusToGet == 3) {
          _root.save.inventoryAbility[k] = 'Ignore Defense';
        }
        if (bonusToGet == 4) {
          _root.save.inventoryAbility[k] = 'Mastery';
        }
        if (bonusToGet == 5) {
          _root.save.inventoryAbility[k] = 'Critical Chance';
        }
        if (bonusToGet == 6) {
          _root.save.inventoryAbility[k] = 'Critical Damage';
        }
        if (bonusToGet == 7) {
          _root.save.inventoryAbility[k] = 'Defense';
        }
        if (bonusToGet == 8) {
          _root.save.inventoryAbility[k] = 'Damage Taken';
        }
        if (bonusToGet == 9) {
          _root.save.inventoryAbility[k] = 'Reflect';
        }
        if (bonusToGet == 10) {
          _root.save.inventoryAbility[k] = 'Accuracy';
        }
        if (bonusToGet == 11) {
          _root.save.inventoryAbility[k] = 'Hit Chance';
        }
        if (bonusToGet == 12) {
          _root.save.inventoryAbility[k] = 'Evasion';
        }
        if (bonusToGet == 13) {
          _root.save.inventoryAbility[k] = 'Dodge Chance';
        }
        if (bonusToGet == 14) {
          _root.save.inventoryAbility[k] = 'Poison Chance';
        }
        if (bonusToGet == 15) {
          _root.save.inventoryAbility[k] = 'Weaken Chance';
        }
        if (bonusToGet == 16) {
          _root.save.inventoryAbility[k] = 'Blind Chance';
        }
        if (bonusToGet == 17) {
          _root.save.inventoryAbility[k] = 'Stun Chance';
        }
        if (bonusToGet == 18) {
          _root.save.inventoryAbility[k] = 'HP';
        }
        if (bonusToGet == 19) {
          _root.save.inventoryAbility[k] = 'MP';
        }
        if (bonusToGet == 20) {
          _root.save.inventoryAbility[k] = 'HP Regen';
        }
        if (bonusToGet == 21) {
          _root.save.inventoryAbility[k] = 'MP Regen';
        }
        if (bonusToGet == 22) {
          _root.save.inventoryAbility[k] = 'Rage Depletion';
        }
        if (bonusToGet == 23) {
          _root.save.inventoryAbility[k] = 'Drain';
        }
        if (bonusToGet == 24) {
          _root.save.inventoryAbility[k] = 'Mana Eater';
        }
        if (bonusToGet == 25) {
          _root.save.inventoryAbility[k] = 'Autosteal';
        }
        if (bonusToGet == 26) {
          _root.save.inventoryAbility[k] = 'Double Hit Chance';
        }
        if (bonusToGet == 27) {
          _root.save.inventoryAbility[k] = 'Rage Attack';
        }
        if (bonusToGet == 28) {
          _root.save.inventoryAbility[k] = 'Rage Speed';
        }
        if (bonusToGet == 29) {
          _root.save.inventoryAbility[k] = 'Poison Damage';
        }
        if (bonusToGet == 30) {
          _root.save.inventoryAbility[k] = 'Poison Duration';
        }
        if (bonusToGet == 31) {
          _root.save.inventoryAbility[k] = 'Weaken Effect';
        }
        if (bonusToGet == 32) {
          _root.save.inventoryAbility[k] = 'Weaken Duration';
        }
        if (bonusToGet == 33) {
          _root.save.inventoryAbility[k] = 'Blind Effect';
        }
        if (bonusToGet == 34) {
          _root.save.inventoryAbility[k] = 'Blind Duration';
        }
        if (bonusToGet == 35) {
          _root.save.inventoryAbility[k] = 'Potion Efficiency';
        }
        if (bonusToGet == 36) {
          _root.save.inventoryAbility[k] = 'Boss Damage';
        }
        if (bonusToGet == 37) {
          _root.save.inventoryAbility[k] = 'Magic Resist';
        }
        if (bonusToGet == 38) {
          _root.save.inventoryAbility[k] = 'Instant Kill';
        }
        if (bonusToGet == 39) {
          _root.save.inventoryAbility[k] = 'Negate Effect';
        }
        if (bonusToGet == 40) {
          _root.save.inventoryAbility[k] = 'Non-Boss Damage';
        }
        if (bonusToGet == 41) {
          _root.save.inventoryAbility[k] = 'Damage';
        }
        if (bonusToGet == 42) {
          _root.save.inventoryAbility[k] = 'Extra Combo';
        }
        if (bonusToGet == 43) {
          _root.save.inventoryAbility[k] = 'Magic Reflect';
        }
        if (bonusToGet == 44) {
          _root.save.inventoryAbility[k] = 'Nullify Death Penalty';
        }
        if (bonusToGet == 45) {
          _root.save.inventoryAbility[k] = 'Buff Effect';
        }
        if (bonusToGet == 46) {
          _root.save.inventoryAbility[k] = 'All Elements';
        }
        if (bonusToGet == 47) {
          _root.save.inventoryAbility[k] = 'Max Spirit';
        }
        if (_root.save.arenaAbilityPreference1 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference1;
        } else {
          if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.1) {
            _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
          } else {
            if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.05) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
            }
          }
        }
      }
      if (_root.save.inventoryMoreBonus[k] == 'Random') {
        bonusToGet = random(11) + 1;
        if (bonusToGet == 1) {
          _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
        }
        if (bonusToGet == 2) {
          _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
        }
        if (bonusToGet == 3) {
          _root.save.inventoryMoreBonus[k] = 'Attack Power';
        }
        if (bonusToGet == 4) {
          _root.save.inventoryMoreBonus[k] = 'Defense Power';
        }
        if (bonusToGet == 5) {
          _root.save.inventoryMoreBonus[k] = 'MaxHP';
        }
        if (bonusToGet == 6) {
          _root.save.inventoryMoreBonus[k] = 'MaxMP';
        }
        if (bonusToGet == 7) {
          _root.save.inventoryMoreBonus[k] = 'Accuracy';
        }
        if (bonusToGet == 8) {
          _root.save.inventoryMoreBonus[k] = 'Evasion';
        }
        if (bonusToGet == 9) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
        }
        if (bonusToGet == 10) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
        }
        if (bonusToGet == 11) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
        }
        if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
        } else {
          if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
          }
        }
      }
    }

    function previewFusedArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard) {
      k = 1331;
      if (noBonus == undefined) {
        noBonus = false;
      }
      if (noLife == undefined) {
        noLife = true;
      }
      if (noFuse == undefined) {
        noFuse = false;
      }
      if (noUnique == undefined) {
        noUnique = false;
      }
      if (spirit == undefined) {
        spirit = false;
      }
      if (guard == undefined) {
        guard = false;
      }
      if (isNaN(level)) {
        level = 1;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [level] not defined.', 16711680, 9002);
      }
      if (isNaN(exp)) {
        exp = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [exp] not defined.', 16711680, 9002);
      }
      if (isNaN(crit)) {
        crit = 10;
        dexterity = 0;
        health = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [crit] not defined.', 16711680, 9002);
      }
      if (isNaN(unob)) {
        unob = 0;
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [unob] not defined.', 16711680, 9002);
      }
      itemSet = _root.checkArenaSet(name);
      if (moreBonus == undefined) {
        moreBonus = '';
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
      }
      if (desc == undefined) {
        desc = '';
        _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
      }
      _root.save.inventoryExist[k] = 1;
      _root.save.inventoryName[k] = name;
      _root.save.inventoryReqRank[k] = reqRank;
      _root.save.inventoryType[k] = 'Armor';
      _root.save.inventorySubtype[k] = subtype;
      _root.save.inventoryFrame[k] = frame;
      _root.save.inventoryRange[k] = false;
      _root.save.inventoryAttack[k] = attack;
      _root.save.inventorySpeed[k] = speed;
      _root.save.inventoryDefense[k] = defense;
      _root.save.inventoryBonus[k] = bonus;
      _root.save.inventoryAbility[k] = ability;
      _root.save.inventoryMoreBonus[k] = moreBonus;
      _root.save.inventoryLevel[k] = level;
      _root.save.inventoryMaxLevel[k] = maxLevel;
      _root.save.inventoryExp[k] = exp;
      _root.save.inventoryExpTNL[k] = expTNL;
      _root.save.inventoryEnhance[k] = enhance;
      _root.save.inventoryBonusPow[k] = bonusPow;
      _root.save.inventorySell[k] = sell;
      _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
      if (noLife == false) {
        _root.save.inventoryExpiry[k] = Infinity;
      }
      _root.save.inventoryObtainTime[k] = _root.systemtimenow;
      _root.save.inventoryDesc[k] = desc;
      _root.save.inventoryCrit[k] = crit;
      _root.save.inventoryDexterity[k] = dexterity;
      _root.save.inventoryHealth[k] = health;
      _root.save.inventoryNoBonus[k] = noBonus;
      _root.save.inventoryNoFuse[k] = noFuse;
      _root.save.inventoryNoUnique[k] = noUnique;
      _root.save.inventorySpirit[k] = spirit;
      _root.save.inventoryGuard[k] = guard;
      _root.save.inventoryUnob[k] = unob;
      _root.save.inventorySet[k] = itemSet;
      if (_root.save.inventoryBonus[k] == 'Random') {
        bonusToGet = random(15) + 1;
        if (Math.random() < 0.2) {
          bonusToGet = random(22) + 1;
        }
        if (bonusToGet == 1 || bonusToGet == 2) {
          _root.save.inventoryBonus[k] = 'Reward';
        }
        if (bonusToGet == 3 || bonusToGet == 4) {
          _root.save.inventoryBonus[k] = 'EXP';
        }
        if (bonusToGet == 5 || bonusToGet == 6) {
          _root.save.inventoryBonus[k] = 'Coin';
        }
        if (bonusToGet == 7 || bonusToGet == 8) {
          _root.save.inventoryBonus[k] = 'Pixel';
        }
        if (bonusToGet == 9 || bonusToGet == 10) {
          _root.save.inventoryBonus[k] = 'Drop Rate';
        }
        if (bonusToGet == 11 || bonusToGet == 12) {
          _root.save.inventoryBonus[k] = 'Spawn Rate';
        }
        if (bonusToGet == 13) {
          _root.save.inventoryBonus[k] = 'Fire Element';
        }
        if (bonusToGet == 14) {
          _root.save.inventoryBonus[k] = 'Ice Element';
        }
        if (bonusToGet == 15) {
          _root.save.inventoryBonus[k] = 'Wind Element';
        }
        if (bonusToGet == 16) {
          _root.save.inventoryBonus[k] = 'Earth Element';
        }
        if (bonusToGet == 17) {
          _root.save.inventoryBonus[k] = 'Thunder Element';
        }
        if (bonusToGet == 18) {
          _root.save.inventoryBonus[k] = 'Water Element';
        }
        if (bonusToGet == 19) {
          _root.save.inventoryBonus[k] = 'Light Element';
        }
        if (bonusToGet == 20) {
          _root.save.inventoryBonus[k] = 'Dark Element';
        }
        if (bonusToGet == 21) {
          _root.save.inventoryBonus[k] = 'Rare Monster Rate';
        }
        if (bonusToGet == 22) {
          _root.save.inventoryBonus[k] = 'Epic Monster Rate';
        }
        if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
        } else {
          if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
          }
        }
      }
      if (_root.save.inventoryAbility[k] == 'Random') {
        bonusToGet = random(25) + 1;
        if (bonusToGet == 1) {
          _root.save.inventoryAbility[k] = 'Attack';
        }
        if (bonusToGet == 2) {
          _root.save.inventoryAbility[k] = 'Attack Speed';
        }
        if (bonusToGet == 3) {
          _root.save.inventoryAbility[k] = 'Ignore Defense';
        }
        if (bonusToGet == 4) {
          _root.save.inventoryAbility[k] = 'Mastery';
        }
        if (bonusToGet == 5) {
          _root.save.inventoryAbility[k] = 'Critical Chance';
        }
        if (bonusToGet == 6) {
          _root.save.inventoryAbility[k] = 'Critical Damage';
        }
        if (bonusToGet == 7) {
          _root.save.inventoryAbility[k] = 'Defense';
        }
        if (bonusToGet == 8) {
          _root.save.inventoryAbility[k] = 'Damage Taken';
        }
        if (bonusToGet == 9) {
          _root.save.inventoryAbility[k] = 'Reflect';
        }
        if (bonusToGet == 10) {
          _root.save.inventoryAbility[k] = 'Accuracy';
        }
        if (bonusToGet == 11) {
          _root.save.inventoryAbility[k] = 'Hit Chance';
        }
        if (bonusToGet == 12) {
          _root.save.inventoryAbility[k] = 'Evasion';
        }
        if (bonusToGet == 13) {
          _root.save.inventoryAbility[k] = 'Dodge Chance';
        }
        if (bonusToGet == 14) {
          _root.save.inventoryAbility[k] = 'Poison Chance';
        }
        if (bonusToGet == 15) {
          _root.save.inventoryAbility[k] = 'Weaken Chance';
        }
        if (bonusToGet == 16) {
          _root.save.inventoryAbility[k] = 'Blind Chance';
        }
        if (bonusToGet == 17) {
          _root.save.inventoryAbility[k] = 'Stun Chance';
        }
        if (bonusToGet == 18) {
          _root.save.inventoryAbility[k] = 'HP';
        }
        if (bonusToGet == 19) {
          _root.save.inventoryAbility[k] = 'MP';
        }
        if (bonusToGet == 20) {
          _root.save.inventoryAbility[k] = 'HP Regen';
        }
        if (bonusToGet == 21) {
          _root.save.inventoryAbility[k] = 'MP Regen';
        }
        if (bonusToGet == 22) {
          _root.save.inventoryAbility[k] = 'Rage Depletion';
        }
        if (bonusToGet == 23) {
          _root.save.inventoryAbility[k] = 'Drain';
        }
        if (bonusToGet == 24) {
          _root.save.inventoryAbility[k] = 'Mana Eater';
        }
        if (bonusToGet == 25) {
          _root.save.inventoryAbility[k] = 'Autosteal';
        }
        if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
        } else {
          if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.07000000000000001) {
            _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
          }
        }
      }
      if (_root.save.inventoryMoreBonus[k] == 'Random') {
        bonusToGet = random(11) + 1;
        if (bonusToGet == 1) {
          _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
        }
        if (bonusToGet == 2) {
          _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
        }
        if (bonusToGet == 3) {
          _root.save.inventoryMoreBonus[k] = 'Attack Power';
        }
        if (bonusToGet == 4) {
          _root.save.inventoryMoreBonus[k] = 'Defense Power';
        }
        if (bonusToGet == 5) {
          _root.save.inventoryMoreBonus[k] = 'MaxHP';
        }
        if (bonusToGet == 6) {
          _root.save.inventoryMoreBonus[k] = 'MaxMP';
        }
        if (bonusToGet == 7) {
          _root.save.inventoryMoreBonus[k] = 'Accuracy';
        }
        if (bonusToGet == 8) {
          _root.save.inventoryMoreBonus[k] = 'Evasion';
        }
        if (bonusToGet == 9) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
        }
        if (bonusToGet == 10) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
        }
        if (bonusToGet == 11) {
          _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
        }
        if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
          _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
        } else {
          if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
          }
        }
      }
    }

    function getArenaWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard) {
      k = 9999;
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 30 && name != undefined) {
        if (noBonus == undefined) {
          noBonus = false;
        }
        if (noLife == undefined) {
          noLife = true;
        }
        if (noFuse == undefined) {
          noFuse = false;
        }
        if (noUnique == undefined) {
          noUnique = false;
        }
        if (spirit == undefined) {
          spirit = false;
        }
        if (guard == undefined) {
          guard = false;
        }
        if (isNaN(level)) {
          level = 1;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [level] not defined.', 16711680, 9002);
        }
        if (isNaN(exp)) {
          exp = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [exp] not defined.', 16711680, 9002);
        }
        if (isNaN(crit)) {
          crit = 10;
          dexterity = 0;
          health = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [crit] not defined.', 16711680, 9002);
        }
        if (isNaN(unob)) {
          unob = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [unob] not defined.', 16711680, 9002);
        }
        itemSet = _root.checkArenaSet(name);
        if (moreBonus == undefined) {
          moreBonus = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
        }
        if (desc == undefined) {
          desc = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
        }
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = reqRank;
        _root.save.inventoryType[k] = 'Weapon';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryRange[k] = range;
        _root.save.inventoryAttack[k] = attack;
        _root.save.inventorySpeed[k] = speed;
        _root.save.inventoryDefense[k] = defense;
        _root.save.inventoryBonus[k] = bonus;
        _root.save.inventoryAbility[k] = ability;
        _root.save.inventoryMoreBonus[k] = moreBonus;
        _root.save.inventoryLevel[k] = level;
        _root.save.inventoryMaxLevel[k] = maxLevel;
        _root.save.inventoryExp[k] = exp;
        _root.save.inventoryExpTNL[k] = expTNL;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        if (noLife == false) {
          _root.save.inventoryExpiry[k] = Infinity;
        }
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.save.inventoryCrit[k] = crit;
        _root.save.inventoryDexterity[k] = dexterity;
        _root.save.inventoryHealth[k] = health;
        _root.save.inventoryNoBonus[k] = noBonus;
        _root.save.inventoryNoFuse[k] = noFuse;
        _root.save.inventoryNoUnique[k] = noUnique;
        _root.save.inventorySpirit[k] = spirit;
        _root.save.inventoryGuard[k] = guard;
        _root.save.inventoryUnob[k] = unob;
        _root.save.inventorySet[k] = itemSet;
        if (_root.save.inventoryBonus[k] == 'Random') {
          bonusToGet = random(22) + 1;
          if (bonusToGet == 1 || bonusToGet == 2) {
            _root.save.inventoryBonus[k] = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            _root.save.inventoryBonus[k] = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            _root.save.inventoryBonus[k] = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            _root.save.inventoryBonus[k] = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            _root.save.inventoryBonus[k] = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            _root.save.inventoryBonus[k] = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryBonus[k] = 'Fire Element';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryBonus[k] = 'Ice Element';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryBonus[k] = 'Wind Element';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryBonus[k] = 'Earth Element';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryBonus[k] = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryBonus[k] = 'Water Element';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryBonus[k] = 'Light Element';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryBonus[k] = 'Dark Element';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryBonus[k] = 'Rare Monster Rate';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryBonus[k] = 'Epic Monster Rate';
          }
          if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
          } else {
            if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
            }
          }
        }
        if (_root.save.inventoryAbility[k] == 'Random') {
          bonusToGet = random(47) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryAbility[k] = 'Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryAbility[k] = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryAbility[k] = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryAbility[k] = 'Mastery';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryAbility[k] = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryAbility[k] = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryAbility[k] = 'Defense';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryAbility[k] = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryAbility[k] = 'Reflect';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryAbility[k] = 'Accuracy';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryAbility[k] = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            _root.save.inventoryAbility[k] = 'Evasion';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryAbility[k] = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryAbility[k] = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryAbility[k] = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryAbility[k] = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryAbility[k] = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryAbility[k] = 'HP';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryAbility[k] = 'MP';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryAbility[k] = 'HP Regen';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryAbility[k] = 'MP Regen';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryAbility[k] = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            _root.save.inventoryAbility[k] = 'Drain';
          }
          if (bonusToGet == 24) {
            _root.save.inventoryAbility[k] = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            _root.save.inventoryAbility[k] = 'Autosteal';
          }
          if (bonusToGet == 26) {
            _root.save.inventoryAbility[k] = 'Double Hit Chance';
          }
          if (bonusToGet == 27) {
            _root.save.inventoryAbility[k] = 'Rage Attack';
          }
          if (bonusToGet == 28) {
            _root.save.inventoryAbility[k] = 'Rage Speed';
          }
          if (bonusToGet == 29) {
            _root.save.inventoryAbility[k] = 'Poison Damage';
          }
          if (bonusToGet == 30) {
            _root.save.inventoryAbility[k] = 'Poison Duration';
          }
          if (bonusToGet == 31) {
            _root.save.inventoryAbility[k] = 'Weaken Effect';
          }
          if (bonusToGet == 32) {
            _root.save.inventoryAbility[k] = 'Weaken Duration';
          }
          if (bonusToGet == 33) {
            _root.save.inventoryAbility[k] = 'Blind Effect';
          }
          if (bonusToGet == 34) {
            _root.save.inventoryAbility[k] = 'Blind Duration';
          }
          if (bonusToGet == 35) {
            _root.save.inventoryAbility[k] = 'Potion Efficiency';
          }
          if (bonusToGet == 36) {
            _root.save.inventoryAbility[k] = 'Boss Damage';
          }
          if (bonusToGet == 37) {
            _root.save.inventoryAbility[k] = 'Magic Resist';
          }
          if (bonusToGet == 38) {
            _root.save.inventoryAbility[k] = 'Instant Kill';
          }
          if (bonusToGet == 39) {
            _root.save.inventoryAbility[k] = 'Negate Effect';
          }
          if (bonusToGet == 40) {
            _root.save.inventoryAbility[k] = 'Non-Boss Damage';
          }
          if (bonusToGet == 41) {
            _root.save.inventoryAbility[k] = 'Damage';
          }
          if (bonusToGet == 42) {
            _root.save.inventoryAbility[k] = 'Extra Combo';
          }
          if (bonusToGet == 43) {
            _root.save.inventoryAbility[k] = 'Magic Reflect';
          }
          if (bonusToGet == 44) {
            _root.save.inventoryAbility[k] = 'Nullify Death Penalty';
          }
          if (bonusToGet == 45) {
            _root.save.inventoryAbility[k] = 'Buff Effect';
          }
          if (bonusToGet == 46) {
            _root.save.inventoryAbility[k] = 'All Elements';
          }
          if (bonusToGet == 47) {
            _root.save.inventoryAbility[k] = 'Max Spirit';
          }
          if (_root.save.arenaAbilityPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference1;
          } else {
            if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.1) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
            } else {
              if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.05) {
                _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
              }
            }
          }
        }
        if (_root.save.inventoryMoreBonus[k] == 'Random') {
          bonusToGet = random(11) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryMoreBonus[k] = 'Attack Power';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryMoreBonus[k] = 'Defense Power';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryMoreBonus[k] = 'MaxHP';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryMoreBonus[k] = 'MaxMP';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryMoreBonus[k] = 'Accuracy';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryMoreBonus[k] = 'Evasion';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
          }
          if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
          } else {
            if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
            }
          }
        }
        _root.dispNews(49, 'Weapon GET! [' + name + ']');
      } else {
        _root.dispNews(55, 'Weapon inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard) {
      k = 9999;
      i = 101;
      while (i <= 130) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 130 && name != undefined) {
        if (noBonus == undefined) {
          noBonus = false;
        }
        if (noLife == undefined) {
          noLife = true;
        }
        if (noFuse == undefined) {
          noFuse = false;
        }
        if (noUnique == undefined) {
          noUnique = false;
        }
        if (spirit == undefined) {
          spirit = false;
        }
        if (guard == undefined) {
          guard = false;
        }
        if (isNaN(level)) {
          level = 1;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [level] not defined.', 16711680, 9002);
        }
        if (isNaN(exp)) {
          exp = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [exp] not defined.', 16711680, 9002);
        }
        if (isNaN(crit)) {
          crit = 10;
          dexterity = 0;
          health = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [crit] not defined.', 16711680, 9002);
        }
        if (isNaN(unob)) {
          unob = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [unob] not defined.', 16711680, 9002);
        }
        itemSet = _root.checkArenaSet(name);
        if (moreBonus == undefined) {
          moreBonus = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
        }
        if (desc == undefined) {
          desc = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
        }
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = reqRank;
        _root.save.inventoryType[k] = 'Armor';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryRange[k] = false;
        _root.save.inventoryAttack[k] = attack;
        _root.save.inventorySpeed[k] = speed;
        _root.save.inventoryDefense[k] = defense;
        _root.save.inventoryBonus[k] = bonus;
        _root.save.inventoryAbility[k] = ability;
        _root.save.inventoryMoreBonus[k] = moreBonus;
        _root.save.inventoryLevel[k] = level;
        _root.save.inventoryMaxLevel[k] = maxLevel;
        _root.save.inventoryExp[k] = exp;
        _root.save.inventoryExpTNL[k] = expTNL;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        if (noLife == false) {
          _root.save.inventoryExpiry[k] = Infinity;
        }
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.save.inventoryCrit[k] = crit;
        _root.save.inventoryDexterity[k] = dexterity;
        _root.save.inventoryHealth[k] = health;
        _root.save.inventoryNoBonus[k] = noBonus;
        _root.save.inventoryNoFuse[k] = noFuse;
        _root.save.inventoryNoUnique[k] = noUnique;
        _root.save.inventorySpirit[k] = spirit;
        _root.save.inventoryGuard[k] = guard;
        _root.save.inventoryUnob[k] = unob;
        _root.save.inventorySet[k] = itemSet;
        if (_root.save.inventoryBonus[k] == 'Random') {
          bonusToGet = random(15) + 1;
          if (Math.random() < 0.2) {
            bonusToGet = random(22) + 1;
          }
          if (bonusToGet == 1 || bonusToGet == 2) {
            _root.save.inventoryBonus[k] = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            _root.save.inventoryBonus[k] = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            _root.save.inventoryBonus[k] = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            _root.save.inventoryBonus[k] = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            _root.save.inventoryBonus[k] = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            _root.save.inventoryBonus[k] = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryBonus[k] = 'Fire Element';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryBonus[k] = 'Ice Element';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryBonus[k] = 'Wind Element';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryBonus[k] = 'Earth Element';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryBonus[k] = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryBonus[k] = 'Water Element';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryBonus[k] = 'Light Element';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryBonus[k] = 'Dark Element';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryBonus[k] = 'Rare Monster Rate';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryBonus[k] = 'Epic Monster Rate';
          }
          if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
          } else {
            if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
            }
          }
        }
        if (_root.save.inventoryAbility[k] == 'Random') {
          bonusToGet = random(25) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryAbility[k] = 'Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryAbility[k] = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryAbility[k] = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryAbility[k] = 'Mastery';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryAbility[k] = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryAbility[k] = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryAbility[k] = 'Defense';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryAbility[k] = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryAbility[k] = 'Reflect';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryAbility[k] = 'Accuracy';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryAbility[k] = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            _root.save.inventoryAbility[k] = 'Evasion';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryAbility[k] = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryAbility[k] = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryAbility[k] = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryAbility[k] = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryAbility[k] = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryAbility[k] = 'HP';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryAbility[k] = 'MP';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryAbility[k] = 'HP Regen';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryAbility[k] = 'MP Regen';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryAbility[k] = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            _root.save.inventoryAbility[k] = 'Drain';
          }
          if (bonusToGet == 24) {
            _root.save.inventoryAbility[k] = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            _root.save.inventoryAbility[k] = 'Autosteal';
          }
          if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
          } else {
            if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
            }
          }
        }
        if (_root.save.inventoryMoreBonus[k] == 'Random') {
          bonusToGet = random(11) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryMoreBonus[k] = 'Attack Power';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryMoreBonus[k] = 'Defense Power';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryMoreBonus[k] = 'MaxHP';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryMoreBonus[k] = 'MaxMP';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryMoreBonus[k] = 'Accuracy';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryMoreBonus[k] = 'Evasion';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
          }
          if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
          } else {
            if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
            }
          }
        }
        _root.dispNews(50, 'Armor GET! [' + name + ']');
      } else {
        _root.dispNews(56, 'Armor inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaOutfit(reqRank, subtype, frame, bonusPow, sell, name, desc) {
      k = 9999;
      i = 601;
      while (i <= 630) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 630 && name != undefined) {
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = reqRank;
        _root.save.inventoryType[k] = 'Outfit';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryEnhance[k] = 0;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = Infinity;
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.dispNews(54, 'Outfit GET! [' + name + ']');
      } else {
        _root.dispNews(60, 'Outfit inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaAccessory(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, name, desc, guard) {
      k = 9999;
      i = 501;
      while (i <= 530) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 530 && name != undefined) {
        if (noBonus == undefined) {
          noBonus = false;
        }
        if (noLife == undefined) {
          noLife = true;
        }
        if (noFuse == undefined) {
          noFuse = false;
        }
        if (noUnique == undefined) {
          noUnique = false;
        }
        if (spirit == undefined) {
          spirit = false;
        }
        if (guard == undefined) {
          guard = false;
        }
        if (isNaN(level)) {
          level = 1;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [level] not defined.', 16711680, 9002);
        }
        if (isNaN(exp)) {
          exp = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [exp] not defined.', 16711680, 9002);
        }
        if (isNaN(crit)) {
          crit = 10;
          dexterity = 0;
          health = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [crit] not defined.', 16711680, 9002);
        }
        if (isNaN(unob)) {
          unob = 0;
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [unob] not defined.', 16711680, 9002);
        }
        itemSet = _root.checkArenaSet(name);
        if (desc == 'Thank you for your donation and your continued support!') {
          itemSet = 0;
        }
        if (desc == 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!') {
          itemSet = 0;
        }
        if (moreBonus == undefined) {
          moreBonus = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
        }
        if (desc == undefined) {
          desc = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
        }
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = reqRank;
        _root.save.inventoryType[k] = 'Accessory';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryRange[k] = false;
        _root.save.inventoryAttack[k] = attack;
        _root.save.inventorySpeed[k] = speed;
        _root.save.inventoryDefense[k] = defense;
        _root.save.inventoryBonus[k] = bonus;
        _root.save.inventoryAbility[k] = ability;
        if (moreBonus == undefined) {
          moreBonus = '';
        }
        _root.save.inventoryMoreBonus[k] = moreBonus;
        _root.save.inventoryLevel[k] = level;
        _root.save.inventoryMaxLevel[k] = maxLevel;
        _root.save.inventoryExp[k] = exp;
        if (isNaN(level)) {
          _root.save.inventoryLevel[k] = 1;
        }
        if (isNaN(exp)) {
          _root.save.inventoryExp[k] = 0;
        }
        _root.save.inventoryExpTNL[k] = expTNL;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        if (noLife == false) {
          _root.save.inventoryExpiry[k] = Infinity;
        }
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.save.inventoryCrit[k] = crit;
        _root.save.inventoryDexterity[k] = dexterity;
        _root.save.inventoryHealth[k] = health;
        _root.save.inventoryNoBonus[k] = noBonus;
        _root.save.inventoryNoFuse[k] = false;
        _root.save.inventoryNoUnique[k] = noUnique;
        _root.save.inventorySpirit[k] = spirit;
        _root.save.inventoryGuard[k] = guard;
        _root.save.inventoryUnob[k] = unob;
        _root.save.inventorySet[k] = itemSet;
        if (_root.save.inventoryBonus[k] == 'Random') {
          bonusToGet = random(22) + 1;
          if (bonusToGet == 1 || bonusToGet == 2) {
            _root.save.inventoryBonus[k] = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            _root.save.inventoryBonus[k] = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            _root.save.inventoryBonus[k] = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            _root.save.inventoryBonus[k] = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            _root.save.inventoryBonus[k] = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            _root.save.inventoryBonus[k] = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryBonus[k] = 'Fire Element';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryBonus[k] = 'Ice Element';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryBonus[k] = 'Wind Element';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryBonus[k] = 'Earth Element';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryBonus[k] = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryBonus[k] = 'Water Element';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryBonus[k] = 'Light Element';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryBonus[k] = 'Dark Element';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryBonus[k] = 'Rare Monster Rate';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryBonus[k] = 'Epic Monster Rate';
          }
          if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
          } else {
            if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
            }
          }
        }
        if (_root.save.inventoryAbility[k] == 'Random') {
          bonusToGet = random(25) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryAbility[k] = 'Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryAbility[k] = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryAbility[k] = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryAbility[k] = 'Mastery';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryAbility[k] = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryAbility[k] = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryAbility[k] = 'Defense';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryAbility[k] = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryAbility[k] = 'Reflect';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryAbility[k] = 'Accuracy';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryAbility[k] = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            _root.save.inventoryAbility[k] = 'Evasion';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryAbility[k] = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryAbility[k] = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryAbility[k] = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryAbility[k] = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryAbility[k] = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryAbility[k] = 'HP';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryAbility[k] = 'MP';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryAbility[k] = 'HP Regen';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryAbility[k] = 'MP Regen';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryAbility[k] = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            _root.save.inventoryAbility[k] = 'Drain';
          }
          if (bonusToGet == 24) {
            _root.save.inventoryAbility[k] = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            _root.save.inventoryAbility[k] = 'Autosteal';
          }
          if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
          } else {
            if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
            }
          }
        }
        if (_root.save.inventoryMoreBonus[k] == 'Random') {
          bonusToGet = random(11) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryMoreBonus[k] = 'Attack Power';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryMoreBonus[k] = 'Defense Power';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryMoreBonus[k] = 'MaxHP';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryMoreBonus[k] = 'MaxMP';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryMoreBonus[k] = 'Accuracy';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryMoreBonus[k] = 'Evasion';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
          }
          if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
          } else {
            if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
            }
          }
        }
        _root.dispNews(51, 'Accessory GET! [' + name + ']');
      } else {
        _root.dispNews(57, 'Accessory inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaEnhancer(subtype, frame, power, curse, success, bonus, ability, moreBonus, enhance, bonusPow, sell, expiry, name, desc, guard) {
      k = 9999;
      i = 201;
      while (i <= 230) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 230 && name != undefined) {
        if (guard == undefined) {
          guard = false;
        }
        if (moreBonus == undefined) {
          moreBonus = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [moreBonus] not defined.', 16711680, 9002);
        }
        if (desc == undefined) {
          desc = '';
          _root.breakNews('[Error]', 'ERROR: ' + name + ' / [desc] not defined.', 16711680, 9002);
        }
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = 1;
        _root.save.inventoryType[k] = 'Enhancer';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryRange[k] = false;
        _root.save.inventoryAttack[k] = power;
        _root.save.inventoryBonus[k] = bonus;
        _root.save.inventoryAbility[k] = ability;
        _root.save.inventoryMoreBonus[k] = moreBonus;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryNoBonus[k] = false;
        _root.save.inventoryNoRecycle[k] = false;
        _root.save.inventoryNoFuse[k] = false;
        _root.save.inventoryNoUnique[k] = false;
        _root.save.inventorySpirit[k] = false;
        _root.save.inventoryGuard[k] = guard;
        _root.save.inventoryDesc[k] = desc;
        if (_root.save.inventoryBonus[k] == 'Random') {
          bonusToGet = random(22) + 1;
          if (bonusToGet == 1 || bonusToGet == 2) {
            _root.save.inventoryBonus[k] = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            _root.save.inventoryBonus[k] = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            _root.save.inventoryBonus[k] = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            _root.save.inventoryBonus[k] = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            _root.save.inventoryBonus[k] = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            _root.save.inventoryBonus[k] = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryBonus[k] = 'Fire Element';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryBonus[k] = 'Ice Element';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryBonus[k] = 'Wind Element';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryBonus[k] = 'Earth Element';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryBonus[k] = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryBonus[k] = 'Water Element';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryBonus[k] = 'Light Element';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryBonus[k] = 'Dark Element';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryBonus[k] = 'Rare Monster Rate';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryBonus[k] = 'Epic Monster Rate';
          }
          if (_root.save.arenaBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference1;
          } else {
            if (_root.save.arenaBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryBonus[k] = _root.save.arenaBonusPreference2;
            }
          }
        }
        if (_root.save.inventoryAbility[k] == 'Random') {
          bonusToGet = random(25) + 1;
          if (subtype == 'Weapon Bonus Adder') {
            bonusToGet = random(47) + 1;
          }
          if (bonusToGet == 1) {
            _root.save.inventoryAbility[k] = 'Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryAbility[k] = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryAbility[k] = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryAbility[k] = 'Mastery';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryAbility[k] = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryAbility[k] = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryAbility[k] = 'Defense';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryAbility[k] = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryAbility[k] = 'Reflect';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryAbility[k] = 'Accuracy';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryAbility[k] = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            _root.save.inventoryAbility[k] = 'Evasion';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryAbility[k] = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryAbility[k] = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryAbility[k] = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryAbility[k] = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryAbility[k] = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryAbility[k] = 'HP';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryAbility[k] = 'MP';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryAbility[k] = 'HP Regen';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryAbility[k] = 'MP Regen';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryAbility[k] = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            _root.save.inventoryAbility[k] = 'Drain';
          }
          if (bonusToGet == 24) {
            _root.save.inventoryAbility[k] = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            _root.save.inventoryAbility[k] = 'Autosteal';
          }
          if (bonusToGet == 26) {
            _root.save.inventoryAbility[k] = 'Double Hit Chance';
          }
          if (bonusToGet == 27) {
            _root.save.inventoryAbility[k] = 'Rage Attack';
          }
          if (bonusToGet == 28) {
            _root.save.inventoryAbility[k] = 'Rage Speed';
          }
          if (bonusToGet == 29) {
            _root.save.inventoryAbility[k] = 'Poison Damage';
          }
          if (bonusToGet == 30) {
            _root.save.inventoryAbility[k] = 'Poison Duration';
          }
          if (bonusToGet == 31) {
            _root.save.inventoryAbility[k] = 'Weaken Effect';
          }
          if (bonusToGet == 32) {
            _root.save.inventoryAbility[k] = 'Weaken Duration';
          }
          if (bonusToGet == 33) {
            _root.save.inventoryAbility[k] = 'Blind Effect';
          }
          if (bonusToGet == 34) {
            _root.save.inventoryAbility[k] = 'Blind Duration';
          }
          if (bonusToGet == 35) {
            _root.save.inventoryAbility[k] = 'Potion Efficiency';
          }
          if (bonusToGet == 36) {
            _root.save.inventoryAbility[k] = 'Boss Damage';
          }
          if (bonusToGet == 37) {
            _root.save.inventoryAbility[k] = 'Magic Resist';
          }
          if (bonusToGet == 38) {
            _root.save.inventoryAbility[k] = 'Instant Kill';
          }
          if (bonusToGet == 39) {
            _root.save.inventoryAbility[k] = 'Negate Effect';
          }
          if (bonusToGet == 40) {
            _root.save.inventoryAbility[k] = 'Non-Boss Damage';
          }
          if (bonusToGet == 41) {
            _root.save.inventoryAbility[k] = 'Damage';
          }
          if (bonusToGet == 42) {
            _root.save.inventoryAbility[k] = 'Extra Combo';
          }
          if (bonusToGet == 43) {
            _root.save.inventoryAbility[k] = 'Magic Reflect';
          }
          if (bonusToGet == 44) {
            _root.save.inventoryAbility[k] = 'Nullify Death Penalty';
          }
          if (bonusToGet == 45) {
            _root.save.inventoryAbility[k] = 'Buff Effect';
          }
          if (bonusToGet == 46) {
            _root.save.inventoryAbility[k] = 'All Elements';
          }
          if (bonusToGet == 47) {
            _root.save.inventoryAbility[k] = 'Max Spirit';
          }
          if (subtype == 'Weapon Bonus Adder') {
            if (_root.save.arenaAbilityPreference1 != 'None' && Math.random() < 0.2) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference1;
            } else {
              if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.1) {
                _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
              } else {
                if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.05) {
                  _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
                }
              }
            }
          } else {
            if (_root.save.arenaAbilityPreference2 != 'None' && Math.random() < 0.2) {
              _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference2;
            } else {
              if (_root.save.arenaAbilityPreference3 != 'None' && Math.random() < 0.07000000000000001) {
                _root.save.inventoryAbility[k] = _root.save.arenaAbilityPreference3;
              }
            }
          }
        }
        if (_root.save.inventoryMoreBonus[k] == 'Random') {
          bonusToGet = random(11) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryMoreBonus[k] = 'Equipment Defense';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryMoreBonus[k] = 'Attack Power';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryMoreBonus[k] = 'Defense Power';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryMoreBonus[k] = 'MaxHP';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryMoreBonus[k] = 'MaxMP';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryMoreBonus[k] = 'Accuracy';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryMoreBonus[k] = 'Evasion';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Boss Kill';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Rare Kill';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryMoreBonus[k] = 'EXP / Epic Kill';
          }
          if (_root.save.arenaMoreBonusPreference1 != 'None' && Math.random() < 0.2) {
            _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference1;
          } else {
            if (_root.save.arenaMoreBonusPreference2 != 'None' && Math.random() < 0.07000000000000001) {
              _root.save.inventoryMoreBonus[k] = _root.save.arenaMoreBonusPreference2;
            }
          }
        }
        _root.dispNews(52, 'Enhancer GET! [' + name + ']');
      } else {
        _root.dispNews(58, 'Enhancer inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaPotion(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, name, desc) {
      k = 9999;
      i = 401;
      while (i <= 430) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 430 && name != undefined) {
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = 1;
        _root.save.inventoryType[k] = 'Potion';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryAttack[k] = attack;
        _root.save.inventoryDefense[k] = defense;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.dispNews(53, 'Potion GET! [' + name + ']');
      } else {
        _root.dispNews(59, 'Potion inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function getArenaChip(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, name, desc) {
      k = 9999;
      i = 701;
      while (i <= 730) {
        if (_root.save.inventoryExist[i] != 1) {
          if (k > i) {
            k = i;
          }
        }
        ++i;
      }
      if (k <= 730 && name != undefined) {
        _root.save.inventoryExist[k] = 1;
        _root.save.inventoryName[k] = name;
        _root.save.inventoryReqRank[k] = 1;
        _root.save.inventoryType[k] = 'Chip';
        _root.save.inventorySubtype[k] = subtype;
        _root.save.inventoryFrame[k] = frame;
        _root.save.inventoryAttack[k] = attack;
        _root.save.inventoryDefense[k] = defense;
        _root.save.inventoryEnhance[k] = enhance;
        _root.save.inventoryBonusPow[k] = bonusPow;
        _root.save.inventorySell[k] = sell;
        _root.save.inventoryExpiry[k] = expiry + _root.systemtimenow;
        _root.save.inventoryObtainTime[k] = _root.systemtimenow;
        _root.save.inventoryDesc[k] = desc;
        _root.dispNews(170, 'Chip GET! [' + name + ']');
      } else {
        _root.dispNews(171, 'Chip inventory full! [' + name + '] deleted :(');
      }
      checkFullInventory();
    }

    function addArenaWeapon(name, reqRank, subtype, frame, range, attack, speed, defense, bonus, ability, maxLevel, expTNL, enhance, bonusPow, sell, expiry, noBonus, noLife, noRecycle, spirit, crit, dexterity, health, desc, noFuse, level, exp, noUnique, unob, moreBonus) {
      getArenaWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc);
    }

    function addArenaArmor(name, reqRank, subtype, frame, attack, speed, defense, bonus, ability, maxLevel, expTNL, enhance, bonusPow, sell, expiry, noBonus, noLife, noRecycle, spirit, crit, dexterity, health, desc, noFuse, level, exp, noUnique, unob, moreBonus) {
      getArenaArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc);
    }

    function addArenaAccessory(name, reqRank, subtype, frame, attack, speed, defense, bonus, ability, maxLevel, expTNL, enhance, bonusPow, sell, expiry, noBonus, noLife, noRecycle, spirit, crit, dexterity, health, desc, noFuse, level, exp, noUnique, unob) {
      getArenaAccessory(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, name, desc);
    }

    function addArenaEnhancer(name, subtype, frame, power, curse, success, bonus, ability, enhance, bonusPow, sell, expiry, desc, moreBonus) {
      getArenaEnhancer(subtype, frame, power, curse, success, bonus, ability, moreBonus, enhance, bonusPow, sell, expiry, name, desc);
    }

    function addArenaPotion(name, subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, desc) {
      getArenaPotion(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry, name, desc);
    }

    function swapArenaItem(item1, item2) {
      j = item1;
      k = item2;
      _root.xSwapArenaItem(900, item1);
      _root.xSwapArenaItem(item1, item2);
      _root.xSwapArenaItem(item2, 900);
      _root.deleteArenaItem(900);
      _root.arenaSwap1 = 0;
      checkFullInventory();
    }

    function xSwapArenaItem(xitem1, xitem2) {
      j = xitem2;
      k = xitem1;
      _root.save.inventoryExist[k] = _root.save.inventoryExist[j];
      _root.save.inventoryName[k] = _root.save.inventoryName[j];
      _root.save.inventoryReqRank[k] = _root.save.inventoryReqRank[j];
      _root.save.inventoryType[k] = _root.save.inventoryType[j];
      _root.save.inventorySubtype[k] = _root.save.inventorySubtype[j];
      _root.save.inventoryFrame[k] = _root.save.inventoryFrame[j];
      _root.save.inventoryRange[k] = _root.save.inventoryRange[j];
      _root.save.inventoryAttack[k] = _root.save.inventoryAttack[j];
      _root.save.inventorySpeed[k] = _root.save.inventorySpeed[j];
      _root.save.inventoryDefense[k] = _root.save.inventoryDefense[j];
      _root.save.inventoryBonus[k] = _root.save.inventoryBonus[j];
      _root.save.inventoryAbility[k] = _root.save.inventoryAbility[j];
      _root.save.inventoryMoreBonus[k] = _root.save.inventoryMoreBonus[j];
      _root.save.inventoryLevel[k] = _root.save.inventoryLevel[j];
      _root.save.inventoryMaxLevel[k] = _root.save.inventoryMaxLevel[j];
      _root.save.inventoryExp[k] = _root.save.inventoryExp[j];
      _root.save.inventoryExpTNL[k] = _root.save.inventoryExpTNL[j];
      _root.save.inventoryEnhance[k] = _root.save.inventoryEnhance[j];
      _root.save.inventoryBonusPow[k] = _root.save.inventoryBonusPow[j];
      _root.save.inventorySell[k] = _root.save.inventorySell[j];
      _root.save.inventoryExpiry[k] = _root.save.inventoryExpiry[j];
      _root.save.inventoryObtainTime[k] = _root.save.inventoryObtainTime[j];
      _root.save.inventoryNoBonus[k] = _root.save.inventoryNoBonus[j];
      _root.save.inventoryNoRecycle[k] = _root.save.inventoryNoRecycle[j];
      _root.save.inventoryNoFuse[k] = _root.save.inventoryNoFuse[j];
      _root.save.inventoryNoUnique[k] = _root.save.inventoryNoUnique[j];
      _root.save.inventoryUnob[k] = _root.save.inventoryUnob[j];
      _root.save.inventorySpirit[k] = _root.save.inventorySpirit[j];
      _root.save.inventoryCrit[k] = _root.save.inventoryCrit[j];
      _root.save.inventoryDexterity[k] = _root.save.inventoryDexterity[j];
      _root.save.inventoryHealth[k] = _root.save.inventoryHealth[j];
      _root.save.inventoryDesc[k] = _root.save.inventoryDesc[j];
      _root.save.inventorySet[k] = _root.save.inventorySet[j];
      _root.save.inventoryGuard[k] = _root.save.inventoryGuard[j];
      checkFullInventory();
    }

    function deleteArenaItem(k) {
      _root.save.inventoryExist[k] = 0;
      delete _root.save.inventoryName[k];
      delete _root.save.inventoryReqRank[k];
      delete _root.save.inventoryType[k];
      delete _root.save.inventorySubtype[k];
      delete _root.save.inventoryFrame[k];
      delete _root.save.inventoryRange[k];
      delete _root.save.inventoryAttack[k];
      delete _root.save.inventorySpeed[k];
      delete _root.save.inventoryDefense[k];
      delete _root.save.inventoryBonus[k];
      delete _root.save.inventoryAbility[k];
      delete _root.save.inventoryMoreBonus[k];
      delete _root.save.inventoryLevel[k];
      delete _root.save.inventoryMaxLevel[k];
      delete _root.save.inventoryExp[k];
      delete _root.save.inventoryExpTNL[k];
      delete _root.save.inventoryEnhance[k];
      delete _root.save.inventoryBonusPow[k];
      delete _root.save.inventorySell[k];
      delete _root.save.inventoryExpiry[k];
      delete _root.save.inventoryObtainTime[k];
      delete _root.save.inventoryNoBonus[k];
      delete _root.save.inventoryNoRecycle[k];
      delete _root.save.inventoryNoFuse[k];
      delete _root.save.inventoryNoUnique[k];
      delete _root.save.inventoryUnob[k];
      delete _root.save.inventorySpirit[k];
      delete _root.save.inventoryCrit[k];
      delete _root.save.inventoryDexterity[k];
      delete _root.save.inventoryHealth[k];
      delete _root.save.inventoryDesc[k];
      delete _root.save.inventorySet[k];
      delete _root.save.inventoryGuard[k];
      checkFullInventory();
    }

    function sellArenaItem(k) {
      if (_root.save.inventorySell[k] > 0 && !isNaN(_root.save.inventorySell[k]) && _root.save.inventorySell[k] != Infinity) {
        _root.save.arenaPixel += _root.save.inventorySell[k];
      }
      _root.deleteArenaItem(k);
    }

    function enhanceArenaItem(j, k) {
      canEnhance = false;
      if (_root.save.inventoryEnhance[k] < 10 || _root.save.inventorySubtype[j] == 'Weapon Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Weapon Lifespan Extender' || _root.save.inventorySubtype[j] == 'Armor Lifespan Extender' || _root.save.inventorySubtype[j] == 'Weapon Recycler' || _root.save.inventorySubtype[j] == 'Armor Recycler' || _root.save.inventorySubtype[j] == 'Weapon Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Accessory Spirit Rock' || _root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' || _root.save.inventorySubtype[j] == 'Armor Unique Enhancer' || _root.save.inventorySubtype[j] == 'Accessory Bonus Adder' || _root.save.inventorySubtype[j] == 'Accessory Lifespan Extender' || _root.save.inventorySubtype[j] == 'Accessory Growth Rock' || _root.save.inventorySubtype[j] == 'Accessory Unique Enhancer' || _root.save.inventorySubtype[j] == 'Mystery Enhancer Identifier' || _root.save.inventorySubtype[j] == 'Weapon Unobtainium Enhancer' || _root.save.inventorySubtype[j] == 'Armor Unobtainium Enhancer' || _root.save.inventorySubtype[j] == 'Accessory Unobtainium Enhancer' || _root.save.inventorySubtype[j] == 'Weapon Protector' || _root.save.inventorySubtype[j] == 'Armor Protector' || _root.save.inventorySubtype[j] == 'Accessory Protector' || _root.save.inventorySubtype[j] == 'Enhancer Protector' || _root.save.inventorySubtype[j] == 'Weapon Finalizer' || _root.save.inventorySubtype[j] == 'Armor Finalizer' || _root.save.inventorySubtype[j] == 'Accessory Finalizer' || _root.save.inventorySubtype[j] == 'Weapon Cleansing Rock' || _root.save.inventorySubtype[j] == 'Armor Cleansing Rock') {
        canEnhance = true;
        if (j == k) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Attack Enhancer' && _root.save.inventoryAttack[k] < 1) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' && _root.save.inventoryAttack[k] < 1) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' && _root.save.inventoryAttack[k] >= 3000) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Armor Unique Enhancer' && _root.save.inventoryDefense[k] >= 1800) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Accessory Unique Enhancer' && _root.save.inventoryDefense[k] >= 1800) {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' || _root.save.inventorySubtype[j] == 'Armor Unique Enhancer' || _root.save.inventorySubtype[j] == 'Accessory Unique Enhancer') && _root.save.inventoryEnhance[k] < 10) {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' || _root.save.inventorySubtype[j] == 'Armor Unique Enhancer' || _root.save.inventorySubtype[j] == 'Accessory Unique Enhancer') && _root.save.inventoryLevel[k] < _root.save.inventoryMaxLevel[k]) {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer' || _root.save.inventorySubtype[j] == 'Armor Unique Enhancer' || _root.save.inventorySubtype[j] == 'Accessory Unique Enhancer') && _root.save.inventoryNoUnique[k] == true) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Speed Enhancer' && _root.save.inventorySpeed[k] < 3) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Growth Rock' && _root.save.inventoryAttack[k] < 1) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Mystery Enhancer Identifier' && _root.save.inventorySubtype[k] != 'Weapon Mystery Enhancer' && _root.save.inventorySubtype[k] != 'Armor Mystery Enhancer') {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Lifespan Extender' || _root.save.inventorySubtype[j] == 'Armor Lifespan Extender' || _root.save.inventorySubtype[j] == 'Accessory Lifespan Extender') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'GIGA LIFE ROCK' && (_root.save.inventoryName[k] == 'GIGA PENDANT' || _root.save.inventoryName[k] == 'GIGA EARRINGS') && _root.save.inventorySubtype[k] != 'Medal') {
          canEnhance = true;
        }
        if (_root.save.inventoryName[j] == 'GIGA LIFE ROCK EX' && (_root.save.inventoryName[k] == 'GIGA PENDANT' || _root.save.inventoryName[k] == 'GIGA EARRINGS') && _root.save.inventorySubtype[k] != 'Medal') {
          canEnhance = true;
        }
        if (_root.save.inventoryName[j] == 'GIGA ENHANCER' && _root.save.inventoryName[k] != 'GIGA PENDANT' && _root.save.inventoryName[k] != 'GIGA EARRINGS') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'GIGA ENHANCER' && _root.save.inventorySubtype[k] != 'Pendant' && _root.save.inventorySubtype[k] != 'Earring') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'GIGA ENHANCER EX' && _root.save.inventoryName[k] != 'GIGA PENDANT' && _root.save.inventoryName[k] != 'GIGA EARRINGS') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'GIGA ENHANCER EX' && _root.save.inventorySubtype[k] != 'Pendant' && _root.save.inventorySubtype[k] != 'Earring') {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Accessory Bonus Adder') && _root.save.inventoryNoBonus[k] == true && _root.save.inventoryName[j].indexOf('[S]') == -1) {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Accessory Bonus Adder') && _root.save.inventoryNoBonus[k] == true && _root.save.inventorySubtype[k] == 'Trinket') {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Accessory Bonus Adder') && _root.save.inventoryNoBonus[k] == true && _root.save.inventorySubtype[k] == 'Medal') {
          canEnhance = false;
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Accessory Spirit Rock') && _root.save.inventoryName[j].indexOf('[S]') == -1) {
          if (_root.save.inventoryEnhance[k] < 10 || _root.save.inventoryEnhance[k] > 1000) {
            canEnhance = false;
          }
        }
        if ((_root.save.inventorySubtype[j] == 'Weapon Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Accessory Spirit Rock') && _root.save.inventoryName[k] == 'Dark Ruler') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Fairy Weapon Enhancer' && _root.save.inventoryName[k].indexOf('Fairy') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Fairy Armor Enhancer' && _root.save.inventoryName[k].indexOf('Fairy') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Dominator Gem Enhancer' && _root.save.inventoryName[k] != 'Dominator Gem') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Mega Triangle Gem Enhancer' && _root.save.inventoryName[k] != 'Mega Triangle Gem') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Crystal Unique Enhancer MAX' && _root.save.inventoryName[k].indexOf('Crystal') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Alien Core' && _root.save.inventoryName[k].indexOf('Alien') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Alien Core' && isNaN(_root.save.inventoryName[k].indexOf('Alien'))) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Weapon Cleansing Rock' && _root.save.inventoryName[k].indexOf('(Cursed)') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Weapon Cleansing Rock' && isNaN(_root.save.inventoryName[k].indexOf('(Cursed)'))) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Armor Cleansing Rock' && _root.save.inventoryName[k].indexOf('(Cursed)') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Armor Cleansing Rock' && isNaN(_root.save.inventoryName[k].indexOf('(Cursed)'))) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Anti-Nerfer' && _root.save.inventoryName[k] != 'Nerf Accepted!') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Awesome Enhancer' && (_root.save.inventoryName[k] != 'Awesome Earrings' || _root.save.inventorySubtype[k] != 'Earring')) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] != 'Humblebee Armor Upgrade' && _root.save.inventoryEnhance[k] == 8 && _root.save.inventoryMaxLevel[k] < 184 && _root.save.inventoryName[k].indexOf('Humblebee') != -1) {
          if (_root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Unobtainium Enhancer' || _root.save.inventorySubtype[j] == 'Armor Protector' || _root.save.inventorySubtype[j] == 'Armor Finalizer') {
          } else {
            canEnhance = false;
          }
        }
        if (_root.save.inventoryName[j] != 'Humblebee Armor Upgrade' && _root.save.inventoryEnhance[k] == 9 && _root.save.inventoryMaxLevel[k] < 284 && _root.save.inventoryName[k].indexOf('Humblebee') != -1) {
          if (_root.save.inventorySubtype[j] == 'Armor Bonus Adder' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Unobtainium Enhancer' || _root.save.inventorySubtype[j] == 'Armor Protector' || _root.save.inventorySubtype[j] == 'Armor Finalizer') {
          } else {
            canEnhance = false;
          }
        }
        if (_root.save.inventoryName[j] == 'Humblebee Armor Upgrade') {
          if (_root.save.inventoryName[k].indexOf('Humblebee') == -1) {
            canEnhance = false;
          }
          if (_root.save.inventoryMaxLevel[k] >= 284) {
            canEnhance = false;
          }
        }
        if (_root.save.inventoryName[j] == 'Corrupted Bonus Rock' && _root.save.inventoryName[k].indexOf('Elm') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j] == 'Corrupted Bonus Rock' && isNaN(_root.save.inventoryName[k].indexOf('Elm'))) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Unobtainium Enhancer' && _root.save.inventoryUnob[k] >= _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Armor Unobtainium Enhancer' && _root.save.inventoryUnob[k] >= _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Accessory Unobtainium Enhancer' && _root.save.inventoryUnob[k] >= _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Finalizer' && _root.save.inventoryReqRank[k] > _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Armor Finalizer' && _root.save.inventoryReqRank[k] > _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Accessory Finalizer' && _root.save.inventoryReqRank[k] > _root.save.inventoryAttack[j]) {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[j] == 'Accessory Finalizer' && _root.save.inventorySubtype[k] == 'Trinket') {
          canEnhance = false;
        }
        if (_root.save.inventorySubtype[k] == 'Secondary Weapon' && _root.save.inventorySubtype[j].indexOf('Protector') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[k] == 'Eric\'s Shovel') {
          canEnhance = false;
        }
        if (_root.save.inventoryName[k] == 'Eric\'s Gun-Shovel') {
          canEnhance = false;
        }
        if (_root.save.inventoryLevel[k] == 9999 && _root.save.inventorySubtype[j].indexOf('Protector') == -1 && _root.save.inventoryName[j].indexOf('[S]') == -1) {
          canEnhance = false;
        }
        if (_root.save.inventoryName[j].indexOf('Auto Buff') != -1 && _root.save.inventoryName[k] != 'Auto Buff Gem' && _root.save.inventorySubtype[k] != 'Trinket') {
          canEnhance = false;
        }
      }
      if (_root.save.inventoryName[j].indexOf('Auto Buff') != -1 && _root.save.inventoryName[k] == 'Auto Buff Gem' && _root.save.inventorySubtype[k] == 'Trinket') {
        canEnhance = true;
      }
      if (canEnhance == true) {
        pow = _root.save.inventoryAttack[j];
        if (_root.save.inventoryBonus[j] != '') {
          _root.save.inventoryBonus[k] = _root.save.inventoryBonus[j];
        }
        if (_root.save.inventoryAbility[j] != '') {
          _root.save.inventoryAbility[k] = _root.save.inventoryAbility[j];
        }
        if (_root.save.inventoryMoreBonus[j] != '') {
          _root.save.inventoryMoreBonus[k] = _root.save.inventoryMoreBonus[j];
        }
        if (_root.save.inventoryBonus[j] == 'Random') {
          bonusToGet = random(20) + 1;
          if (bonusToGet == 1 || bonusToGet == 2) {
            _root.save.inventoryBonus[k] = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            _root.save.inventoryBonus[k] = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            _root.save.inventoryBonus[k] = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            _root.save.inventoryBonus[k] = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            _root.save.inventoryBonus[k] = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            _root.save.inventoryBonus[k] = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryBonus[k] = 'Fire Element';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryBonus[k] = 'Ice Element';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryBonus[k] = 'Wind Element';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryBonus[k] = 'Earth Element';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryBonus[k] = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryBonus[k] = 'Water Element';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryBonus[k] = 'Light Element';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryBonus[k] = 'Dark Element';
          }
        }
        if (_root.save.inventoryAbility[j] == 'Random') {
          bonusToGet = random(25) + 1;
          if (bonusToGet == 1) {
            _root.save.inventoryAbility[k] = 'Attack';
          }
          if (bonusToGet == 2) {
            _root.save.inventoryAbility[k] = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            _root.save.inventoryAbility[k] = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            _root.save.inventoryAbility[k] = 'Mastery';
          }
          if (bonusToGet == 5) {
            _root.save.inventoryAbility[k] = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            _root.save.inventoryAbility[k] = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            _root.save.inventoryAbility[k] = 'Defense';
          }
          if (bonusToGet == 8) {
            _root.save.inventoryAbility[k] = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            _root.save.inventoryAbility[k] = 'Reflect';
          }
          if (bonusToGet == 10) {
            _root.save.inventoryAbility[k] = 'Accuracy';
          }
          if (bonusToGet == 11) {
            _root.save.inventoryAbility[k] = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            _root.save.inventoryAbility[k] = 'Evasion';
          }
          if (bonusToGet == 13) {
            _root.save.inventoryAbility[k] = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            _root.save.inventoryAbility[k] = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            _root.save.inventoryAbility[k] = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            _root.save.inventoryAbility[k] = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            _root.save.inventoryAbility[k] = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            _root.save.inventoryAbility[k] = 'HP';
          }
          if (bonusToGet == 19) {
            _root.save.inventoryAbility[k] = 'MP';
          }
          if (bonusToGet == 20) {
            _root.save.inventoryAbility[k] = 'HP Regen';
          }
          if (bonusToGet == 21) {
            _root.save.inventoryAbility[k] = 'MP Regen';
          }
          if (bonusToGet == 22) {
            _root.save.inventoryAbility[k] = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            _root.save.inventoryAbility[k] = 'Drain';
          }
          if (bonusToGet == 24) {
            _root.save.inventoryAbility[k] = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            _root.save.inventoryAbility[k] = 'Autosteal';
          }
        }
        if (_root.save.inventorySubtype[j] == 'Weapon Attack Enhancer') {
          _root.save.inventoryEnhance[k] += 1;
          if (_root.save.inventoryEnhance[k] == 10) {
            _root.save.arenaMaxEnhance += 1;
          }
          _root.save.inventoryAttack[k] += pow;
          _root.save.inventoryBonusPow[k] += pow;
        } else {
          if (_root.save.inventorySubtype[j] == 'Weapon Unique Enhancer') {
            _root.save.inventoryAttack[k] += pow;
            _root.save.inventoryBonusPow[k] += pow;
            if (_root.save.inventoryAttack[k] > 3000) {
              _root.save.inventoryAttack[k] = 3000;
            }
          } else {
            if (_root.save.inventorySubtype[j] == 'Weapon Speed Enhancer') {
              _root.save.inventoryEnhance[k] += 1;
              if (_root.save.inventoryEnhance[k] == 10) {
                _root.save.arenaMaxEnhance += 1;
              }
              _root.save.inventorySpeed[k] += pow;
              _root.save.inventoryBonusPow[k] += pow * 20;
            } else {
              if (_root.save.inventorySubtype[j] == 'Weapon Defense Enhancer') {
                _root.save.inventoryEnhance[k] += 1;
                if (_root.save.inventoryEnhance[k] == 10) {
                  _root.save.arenaMaxEnhance += 1;
                }
                _root.save.inventoryDefense[k] += pow;
                _root.save.inventoryBonusPow[k] += Math.round(pow * 5 / 12);
              } else {
                if (_root.save.inventorySubtype[j] == 'Armor Attack Enhancer') {
                  _root.save.inventoryEnhance[k] += 1;
                  if (_root.save.inventoryEnhance[k] == 10) {
                    _root.save.arenaMaxEnhance += 1;
                  }
                  _root.save.inventoryAttack[k] += pow;
                  _root.save.inventoryBonusPow[k] += Math.round(pow * 5 / 2);
                } else {
                  if (_root.save.inventorySubtype[j] == 'Accessory Attack Enhancer') {
                    _root.save.inventoryEnhance[k] += 1;
                    if (_root.save.inventoryEnhance[k] == 10) {
                      _root.save.arenaMaxEnhance += 1;
                    }
                    _root.save.inventoryAttack[k] += pow;
                    _root.save.inventoryBonusPow[k] += Math.round(pow * 5 / 2);
                  } else {
                    if (_root.save.inventorySubtype[j] == 'Armor Speed Enhancer') {
                      _root.save.inventoryEnhance[k] += 1;
                      if (_root.save.inventoryEnhance[k] == 10) {
                        _root.save.arenaMaxEnhance += 1;
                      }
                      _root.save.inventorySpeed[k] += pow;
                      _root.save.inventoryBonusPow[k] += pow * 20;
                    } else {
                      if (_root.save.inventorySubtype[j] == 'Armor Defense Enhancer') {
                        _root.save.inventoryEnhance[k] += 1;
                        if (_root.save.inventoryEnhance[k] == 10) {
                          _root.save.arenaMaxEnhance += 1;
                        }
                        _root.save.inventoryDefense[k] += pow;
                        _root.save.inventoryBonusPow[k] += pow;
                      } else {
                        if (_root.save.inventorySubtype[j] == 'Armor Unique Enhancer') {
                          _root.save.inventoryDefense[k] += pow;
                          _root.save.inventoryBonusPow[k] += pow;
                          if (_root.save.inventoryDefense[k] > 1800) {
                            _root.save.inventoryDefense[k] = 1800;
                          }
                        } else {
                          if (_root.save.inventorySubtype[j] == 'Accessory Unique Enhancer') {
                            _root.save.inventoryDefense[k] += pow;
                            _root.save.inventoryBonusPow[k] += pow;
                            if (_root.save.inventoryDefense[k] > 1800) {
                              _root.save.inventoryDefense[k] = 1800;
                            }
                          } else {
                            if (_root.save.inventorySubtype[j] == 'Weapon Spirit Rock' || _root.save.inventorySubtype[j] == 'Armor Spirit Rock' || _root.save.inventorySubtype[j] == 'Accessory Spirit Rock') {
                              if (_root.save.inventorySpirit[k] != true) {
                                _root.save.inventorySpirit[k] = true;
                              } else {
                                _root.save.inventorySpirit[k] = false;
                              }
                            } else {
                              if (_root.save.inventorySubtype[j] == 'Weapon Growth Rock') {
                                _root.save.inventoryEnhance[k] += 1;
                                if (_root.save.inventoryEnhance[k] == 10) {
                                  _root.save.arenaMaxEnhance += 1;
                                }
                                if (_root.save.inventoryExpTNL[k] < 400) {
                                  _root.save.inventoryExpTNL[k] = 400 * _root.save.inventoryReqRank[k] * _root.save.inventoryReqRank[k];
                                }
                                if (_root.save.inventoryLevel[k] == _root.save.inventoryMaxLevel[k]) {
                                  _root.save.inventoryExp[k] = 0;
                                }
                                _root.save.inventoryMaxLevel[k] += pow;
                              } else {
                                if (_root.save.inventorySubtype[j] == 'Armor Growth Rock') {
                                  _root.save.inventoryEnhance[k] += 1;
                                  if (_root.save.inventoryEnhance[k] == 10) {
                                    _root.save.arenaMaxEnhance += 1;
                                  }
                                  if (_root.save.inventoryExpTNL[k] < 400) {
                                    _root.save.inventoryExpTNL[k] = 400 * _root.save.inventoryReqRank[k] * _root.save.inventoryReqRank[k];
                                  }
                                  if (_root.save.inventoryLevel[k] == _root.save.inventoryMaxLevel[k]) {
                                    _root.save.inventoryExp[k] = 0;
                                  }
                                  _root.save.inventoryMaxLevel[k] += pow;
                                } else {
                                  if (_root.save.inventorySubtype[j] == 'Accessory Growth Rock') {
                                    _root.save.inventoryEnhance[k] += 1;
                                    if (_root.save.inventoryEnhance[k] == 10) {
                                      _root.save.arenaMaxEnhance += 1;
                                    }
                                    if (_root.save.inventoryExpTNL[k] < 400) {
                                      _root.save.inventoryExpTNL[k] = 400 * _root.save.inventoryReqRank[k] * _root.save.inventoryReqRank[k];
                                    }
                                    if (_root.save.inventoryLevel[k] == _root.save.inventoryMaxLevel[k]) {
                                      _root.save.inventoryExp[k] = 0;
                                    }
                                    if (_root.save.inventoryEnhance[k] <= 10) {
                                      _root.save.inventoryMaxLevel[k] += pow;
                                    } else {
                                      _root.save.inventoryDefense[k] += 180;
                                      if (_root.save.inventoryDefense[k] > 1800) {
                                        _root.save.inventoryDefense[k] = 1800;
                                      }
                                    }
                                  } else {
                                    if (_root.save.inventorySubtype[j] == 'Weapon Critical Enhancer') {
                                      _root.save.inventoryEnhance[k] += 1;
                                      if (_root.save.inventoryEnhance[k] == 10) {
                                        _root.save.arenaMaxEnhance += 1;
                                      }
                                      _root.save.inventoryCrit[k] += pow;
                                      _root.save.inventoryBonusPow[k] += pow * 5;
                                    } else {
                                      if (_root.save.inventorySubtype[j] == 'Weapon Dexterity Enhancer') {
                                        _root.save.inventoryEnhance[k] += 1;
                                        if (_root.save.inventoryEnhance[k] == 10) {
                                          _root.save.arenaMaxEnhance += 1;
                                        }
                                        _root.save.inventoryDexterity[k] += pow;
                                        _root.save.inventoryBonusPow[k] += pow * 5;
                                      } else {
                                        if (_root.save.inventorySubtype[j] == 'Weapon Health Enhancer') {
                                          _root.save.inventoryEnhance[k] += 1;
                                          if (_root.save.inventoryEnhance[k] == 10) {
                                            _root.save.arenaMaxEnhance += 1;
                                          }
                                          _root.save.inventoryHealth[k] += pow;
                                          _root.save.inventoryBonusPow[k] += pow * 5;
                                        } else {
                                          if (_root.save.inventorySubtype[j] == 'Armor Critical Enhancer') {
                                            _root.save.inventoryEnhance[k] += 1;
                                            if (_root.save.inventoryEnhance[k] == 10) {
                                              _root.save.arenaMaxEnhance += 1;
                                            }
                                            _root.save.inventoryCrit[k] += pow;
                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                          } else {
                                            if (_root.save.inventorySubtype[j] == 'Armor Dexterity Enhancer') {
                                              _root.save.inventoryEnhance[k] += 1;
                                              if (_root.save.inventoryEnhance[k] == 10) {
                                                _root.save.arenaMaxEnhance += 1;
                                              }
                                              _root.save.inventoryDexterity[k] += pow;
                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                            } else {
                                              if (_root.save.inventorySubtype[j] == 'Armor Health Enhancer') {
                                                _root.save.inventoryEnhance[k] += 1;
                                                if (_root.save.inventoryEnhance[k] == 10) {
                                                  _root.save.arenaMaxEnhance += 1;
                                                }
                                                _root.save.inventoryHealth[k] += pow;
                                                _root.save.inventoryBonusPow[k] += pow * 5;
                                              } else {
                                                if (_root.save.inventorySubtype[j] == 'Weapon Cleansing Rock') {
                                                  _root.save.inventoryName[k] = substring(_root.save.inventoryName[k], 0, _root.save.inventoryName[k].length - 9);
                                                } else {
                                                  if (_root.save.inventorySubtype[j] == 'Armor Cleansing Rock') {
                                                    _root.save.inventoryName[k] = substring(_root.save.inventoryName[k], 0, _root.save.inventoryName[k].length - 9);
                                                  } else {
                                                    if (_root.save.inventorySubtype[j] == 'Accessory Lifespan Extender') {
                                                      if (_root.save.inventoryExpiry[k] < _root.systemtimenow) {
                                                        _root.save.inventoryExpiry[k] = _root.systemtimenow;
                                                      }
                                                      _root.save.inventoryExpiry[k] += pow * 86400000;
                                                    } else {
                                                      if (_root.save.inventorySubtype[j] == 'Mystery Enhancer Identifier') {
                                                        if (_root.save.inventorySubtype[k] == 'Weapon Mystery Enhancer') {
                                                          _root.save.inventoryBonusPow[k] += 500;
                                                          typeX = random(5) + 1;
                                                          if (typeX == 1) {
                                                            _root.save.inventorySubtype[k] = 'Weapon Attack Enhancer';
                                                            _root.save.inventoryAttack[k] *= 5;
                                                          }
                                                          if (typeX == 2) {
                                                            _root.save.inventorySubtype[k] = 'Weapon Defense Enhancer';
                                                            _root.save.inventoryAttack[k] *= 12;
                                                          }
                                                          if (typeX == 3) {
                                                            _root.save.inventorySubtype[k] = 'Weapon Critical Enhancer';
                                                          }
                                                          if (typeX == 4) {
                                                            _root.save.inventorySubtype[k] = 'Weapon Dexterity Enhancer';
                                                          }
                                                          if (typeX == 5) {
                                                            _root.save.inventorySubtype[k] = 'Weapon Health Enhancer';
                                                          }
                                                        }
                                                        if (_root.save.inventorySubtype[k] == 'Armor Mystery Enhancer') {
                                                          _root.save.inventoryBonusPow[k] += 500;
                                                          typeX = random(5) + 1;
                                                          if (typeX == 1) {
                                                            _root.save.inventorySubtype[k] = 'Armor Attack Enhancer';
                                                            _root.save.inventoryAttack[k] *= 2;
                                                          }
                                                          if (typeX == 2) {
                                                            _root.save.inventorySubtype[k] = 'Armor Defense Enhancer';
                                                            _root.save.inventoryAttack[k] *= 5;
                                                          }
                                                          if (typeX == 3) {
                                                            _root.save.inventorySubtype[k] = 'Armor Critical Enhancer';
                                                          }
                                                          if (typeX == 4) {
                                                            _root.save.inventorySubtype[k] = 'Armor Dexterity Enhancer';
                                                          }
                                                          if (typeX == 5) {
                                                            _root.save.inventorySubtype[k] = 'Armor Health Enhancer';
                                                          }
                                                        }
                                                      } else {
                                                        if (_root.save.inventorySubtype[j] == 'Weapon Mystery Enhancer') {
                                                          _root.save.inventoryEnhance[k] += 1;
                                                          if (_root.save.inventoryEnhance[k] == 10) {
                                                            _root.save.arenaMaxEnhance += 1;
                                                          }
                                                          if (_root.save.inventoryAttack[k] != 0) {
                                                            typeX = random(5) + 1;
                                                          } else {
                                                            typeX = random(4) + 2;
                                                          }
                                                          if (typeX == 1) {
                                                            _root.save.inventoryAttack[k] += pow * 5;
                                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                                          }
                                                          if (typeX == 2) {
                                                            _root.save.inventoryDefense[k] += pow * 12;
                                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                                          }
                                                          if (typeX == 3) {
                                                            _root.save.inventoryCrit[k] += pow;
                                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                                          }
                                                          if (typeX == 4) {
                                                            _root.save.inventoryDexterity[k] += pow;
                                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                                          }
                                                          if (typeX == 5) {
                                                            _root.save.inventoryHealth[k] += pow;
                                                            _root.save.inventoryBonusPow[k] += pow * 5;
                                                          }
                                                        } else {
                                                          if (_root.save.inventorySubtype[j] == 'Armor Mystery Enhancer') {
                                                            _root.save.inventoryEnhance[k] += 1;
                                                            if (_root.save.inventoryEnhance[k] == 10) {
                                                              _root.save.arenaMaxEnhance += 1;
                                                            }
                                                            typeX = random(5) + 1;
                                                            if (typeX == 1) {
                                                              _root.save.inventoryAttack[k] += pow * 2;
                                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                                            }
                                                            if (typeX == 2) {
                                                              _root.save.inventoryDefense[k] += pow * 5;
                                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                                            }
                                                            if (typeX == 3) {
                                                              _root.save.inventoryCrit[k] += pow;
                                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                                            }
                                                            if (typeX == 4) {
                                                              _root.save.inventoryDexterity[k] += pow;
                                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                                            }
                                                            if (typeX == 5) {
                                                              _root.save.inventoryHealth[k] += pow;
                                                              _root.save.inventoryBonusPow[k] += pow * 5;
                                                            }
                                                          } else {
                                                            if (_root.save.inventorySubtype[j] == 'Weapon Unobtainium Enhancer') {
                                                              _root.save.inventoryUnob[k] = pow;
                                                            } else {
                                                              if (_root.save.inventorySubtype[j] == 'Armor Unobtainium Enhancer') {
                                                                _root.save.inventoryUnob[k] = pow;
                                                              } else {
                                                                if (_root.save.inventorySubtype[j] == 'Accessory Unobtainium Enhancer') {
                                                                  _root.save.inventoryUnob[k] = pow;
                                                                } else {
                                                                  if (_root.save.inventorySubtype[j] == 'Enhancer Success Enhancer') {
                                                                    _root.save.inventoryEnhance[k] += 1;
                                                                    if (_root.save.inventoryEnhance[k] == 10) {
                                                                      _root.save.arenaMaxEnhance += 1;
                                                                    }
                                                                    _root.save.inventoryDefense[k] = Math.ceil(_root.save.inventoryDefense[k] * pow / 100);
                                                                    _root.save.inventoryBonusPow[k] += pow - 100;
                                                                  } else {
                                                                    if (_root.save.inventorySubtype[j] == 'Enhancer Destruction Enhancer') {
                                                                      _root.save.inventoryEnhance[k] += 1;
                                                                      if (_root.save.inventoryEnhance[k] == 10) {
                                                                        _root.save.arenaMaxEnhance += 1;
                                                                      }
                                                                      _root.save.inventorySpeed[k] = Math.floor(_root.save.inventorySpeed[k] * pow / 100);
                                                                      _root.save.inventoryBonusPow[k] += Math.floor((100 - pow) / 2);
                                                                    } else {
                                                                      if (_root.save.inventorySubtype[j] == 'Weapon Protector') {
                                                                        if (_root.save.inventoryGuard[k] != true) {
                                                                          _root.save.inventoryGuard[k] = true;
                                                                        } else {
                                                                          _root.save.inventoryGuard[k] = false;
                                                                        }
                                                                      } else {
                                                                        if (_root.save.inventorySubtype[j] == 'Armor Protector') {
                                                                          if (_root.save.inventoryGuard[k] != true) {
                                                                            _root.save.inventoryGuard[k] = true;
                                                                          } else {
                                                                            _root.save.inventoryGuard[k] = false;
                                                                          }
                                                                        } else {
                                                                          if (_root.save.inventorySubtype[j] == 'Accessory Protector') {
                                                                            if (_root.save.inventoryGuard[k] != true) {
                                                                              _root.save.inventoryGuard[k] = true;
                                                                            } else {
                                                                              _root.save.inventoryGuard[k] = false;
                                                                            }
                                                                          } else {
                                                                            if (_root.save.inventorySubtype[j] == 'Enhancer Protector') {
                                                                              if (_root.save.inventoryGuard[k] != true) {
                                                                                _root.save.inventoryGuard[k] = true;
                                                                              } else {
                                                                                _root.save.inventoryGuard[k] = false;
                                                                              }
                                                                            } else {
                                                                              if (_root.save.inventorySubtype[j] == 'Weapon Finalizer') {
                                                                                _root.save.inventoryAttack[k] = Math.ceil(_root.save.inventoryAttack[k] * 1.2);
                                                                                _root.save.inventorySpeed[k] = Math.ceil(_root.save.inventorySpeed[k] * 1.2);
                                                                                _root.save.inventoryDefense[k] = Math.ceil(_root.save.inventoryDefense[k] * 1.2);
                                                                                _root.save.inventoryCrit[k] = Math.ceil(_root.save.inventoryCrit[k] * 1.2);
                                                                                _root.save.inventoryDexterity[k] = Math.ceil(_root.save.inventoryDexterity[k] * 1.2);
                                                                                _root.save.inventoryHealth[k] = Math.ceil(_root.save.inventoryHealth[k] * 1.2);
                                                                                _root.save.inventoryLevel[k] = 9999;
                                                                                _root.save.inventoryMaxLevel[k] = 9999;
                                                                                _root.save.inventoryExp[k] = 0;
                                                                                _root.save.inventoryExpTNL[k] = 0;
                                                                                _root.save.inventoryNoBonus[k] = true;
                                                                                _root.save.inventoryNoFuse[k] = true;
                                                                                _root.save.inventoryNoUnique[k] = false;
                                                                              } else {
                                                                                if (_root.save.inventorySubtype[j] == 'Armor Finalizer') {
                                                                                  _root.save.inventoryAttack[k] = Math.ceil(_root.save.inventoryAttack[k] * 1.2);
                                                                                  _root.save.inventorySpeed[k] = Math.ceil(_root.save.inventorySpeed[k] * 1.2);
                                                                                  _root.save.inventoryDefense[k] = Math.ceil(_root.save.inventoryDefense[k] * 1.2);
                                                                                  _root.save.inventoryCrit[k] = Math.ceil(_root.save.inventoryCrit[k] * 1.2);
                                                                                  _root.save.inventoryDexterity[k] = Math.ceil(_root.save.inventoryDexterity[k] * 1.2);
                                                                                  _root.save.inventoryHealth[k] = Math.ceil(_root.save.inventoryHealth[k] * 1.2);
                                                                                  _root.save.inventoryLevel[k] = 9999;
                                                                                  _root.save.inventoryMaxLevel[k] = 9999;
                                                                                  _root.save.inventoryExp[k] = 0;
                                                                                  _root.save.inventoryExpTNL[k] = 0;
                                                                                  _root.save.inventoryNoBonus[k] = true;
                                                                                  _root.save.inventoryNoFuse[k] = true;
                                                                                  _root.save.inventoryNoUnique[k] = false;
                                                                                } else {
                                                                                  if (_root.save.inventorySubtype[j] == 'Accessory Finalizer') {
                                                                                    _root.save.inventoryAttack[k] = Math.ceil(_root.save.inventoryAttack[k] * 1.2);
                                                                                    _root.save.inventorySpeed[k] = Math.ceil(_root.save.inventorySpeed[k] * 1.2);
                                                                                    _root.save.inventoryDefense[k] = Math.ceil(_root.save.inventoryDefense[k] * 1.2);
                                                                                    _root.save.inventoryCrit[k] = Math.ceil(_root.save.inventoryCrit[k] * 1.2);
                                                                                    _root.save.inventoryDexterity[k] = Math.ceil(_root.save.inventoryDexterity[k] * 1.2);
                                                                                    _root.save.inventoryHealth[k] = Math.ceil(_root.save.inventoryHealth[k] * 1.2);
                                                                                    _root.save.inventoryLevel[k] = 9999;
                                                                                    _root.save.inventoryMaxLevel[k] = 9999;
                                                                                    _root.save.inventoryExp[k] = 0;
                                                                                    _root.save.inventoryExpTNL[k] = 0;
                                                                                    _root.save.inventoryNoBonus[k] = true;
                                                                                    _root.save.inventoryNoFuse[k] = true;
                                                                                    _root.save.inventoryNoUnique[k] = false;
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _root.dispNews(61, '[' + _root.save.inventoryName[k] + '] enhanced with [' + _root.save.inventoryName[j] + ']!');
        if (_root.save.inventorySubtype[j].indexOf('Protector') == -1 && _root.save.inventoryName[j].indexOf('[I]') == -1) {
          if (_root.save.questType == 'Enhance') {
            if (_root.save.questSubtype == 'Success') {
              _root.save.questCount += 1;
            }
          }
          if (_root.save.inventorySell[j] > 0) {
            _root.gainCareerEXP(4, Math.ceil(_root.save.inventorySell[j] / 1000000), true);
          }
          deleteArenaItem(j);
        }
      } else {
        if (_root.save.inventorySubtype[k] == 'Secondary Weapon') {
          _root.showPopup('Cannot Enhance', 'Secondary Weapons cannot be enhanced.');
        } else {
          _root.showPopup('Cannot Enhance', 'You cannot use this enhancer on this item!');
        }
      }
      _root.enhancerToUse = 0;
    }

    function checkFullInventory() {
      _root.emptyWeaponSlot = 0;
      _root.emptyArmorSlot = 0;
      _root.emptyAccessorySlot = 0;
      _root.emptyEnhancerSlot = 0;
      _root.emptyPotionSlot = 0;
      _root.emptyOutfitSlot = 0;
      _root.emptyChipSlot = 0;
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyWeaponSlot += 1;
        }
        ++i;
      }
      i = 101;
      while (i <= 130) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyArmorSlot += 1;
        }
        ++i;
      }
      i = 201;
      while (i <= 230) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyEnhancerSlot += 1;
        }
        ++i;
      }
      i = 401;
      while (i <= 430) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyPotionSlot += 1;
        }
        ++i;
      }
      i = 501;
      while (i <= 530) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyAccessorySlot += 1;
        }
        ++i;
      }
      i = 601;
      while (i <= 630) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyOutfitSlot += 1;
        }
        ++i;
      }
      i = 701;
      while (i <= 730) {
        if (_root.save.inventoryExist[i] != 1) {
          _root.emptyChipSlot += 1;
        }
        ++i;
      }
    }

    function addArenaEnemy(level, speed, attack, defense, accuracy, evasion, hp, exp, coin, pixel, name, element, boss, evolve, heal, zombie, rangeDamage, explode, explodeDamage, rampagePct, skill, skillLevel, art, loc, allyPassive1, allyPassive1X, allyPassive2, allyPassive2X, allyPassive3, allyPassive3X, allyActive1, allyActive1X, allyActive1Y, allyActive1Z, allyActive2, allyActive2X, allyActive2Y, allyActive2Z, allyActive3, allyActive3X, allyActive3Y, allyActive3Z) {
      var v1 = new Object();
      v1.level = level;
      v1.speed = speed;
      v1.attack = attack;
      v1.defense = defense;
      v1.accuracy = accuracy;
      v1.evasion = evasion;
      v1.hp = hp;
      v1.exp = exp;
      v1.coin = coin;
      v1.pixel = pixel;
      v1.name = name;
      v1.element = element;
      v1.boss = boss;
      v1.evolve = evolve;
      v1.heal = heal;
      v1.zombie = zombie;
      v1.rangeDamage = rangeDamage;
      v1.explode = explode;
      v1.explodeDamage = explodeDamage;
      v1.rampagePct = rampagePct;
      v1.skill = skill;
      v1.skillLevel = skillLevel;
      v1.art = art;
      v1.loc = loc;
      v1.allyPassive1 = allyPassive1;
      v1.allyPassive1X = allyPassive1X;
      v1.allyPassive2 = allyPassive2;
      v1.allyPassive2X = allyPassive2X;
      v1.allyPassive3 = allyPassive3;
      v1.allyPassive3X = allyPassive3X;
      v1.allyActive1 = allyActive1;
      v1.allyActive1X = allyActive1X;
      v1.allyActive1Y = allyActive1Y;
      v1.allyActive1Z = allyActive1Z;
      v1.allyActive2 = allyActive2;
      v1.allyActive2X = allyActive2X;
      v1.allyActive2Y = allyActive2Y;
      v1.allyActive2Z = allyActive2Z;
      v1.allyActive3 = allyActive3;
      v1.allyActive3X = allyActive3X;
      v1.allyActive3Y = allyActive3Y;
      v1.allyActive3Z = allyActive3Z;
      enemyList.push(v1);
    }

    function obtainAlly(ID) {
      if (isNaN(_root.save.arenaAllyEXP[ID])) {
        _root.save.arenaAllyEXP[ID] = 0;
        _root.save.arenaAllyUpgrade[ID] = 0;
        _root.dispNews(35, 'Invisible Ally GET! [' + _root.enemyList[ID].name + ']!');
      }
    }

    function addKommanderMission(monID, minDiff, monCount) {
      _root.komDiff[monID] = minDiff;
      _root.komCount[monID] = monCount;
    }

    function addMuseumItem(mSlotID, mValue, mName) {
      _root.museumItem[mSlotID] = mName;
      _root.museumValue[mSlotID] = mValue;
      _root.museumMaxItem += 1;
      _root.museumMaxValue += mValue;
    }

    function addMuseumArmorSet(mSlotID, mValue, mName) {
      _root.museumItem[mSlotID] = mName + ' Hat';
      _root.museumValue[mSlotID] = mValue;
      _root.museumItem[mSlotID + 1] = mName + ' Shirt';
      _root.museumValue[mSlotID + 1] = mValue;
      _root.museumItem[mSlotID + 2] = mName + ' Gloves';
      _root.museumValue[mSlotID + 2] = mValue;
      _root.museumItem[mSlotID + 3] = mName + ' Pants';
      _root.museumValue[mSlotID + 3] = mValue;
      _root.museumItem[mSlotID + 4] = mName + ' Shoes';
      _root.museumValue[mSlotID + 4] = mValue;
      _root.museumMaxItem += 5;
      _root.museumMaxValue += mValue * 5;
    }

    function recalcMuseumScore() {
      _root.save.collectionPoint = 0;
      i = 1401;
      while (i <= 3000) {
        if (_root.save.inventoryExist[i] == 1 && !isNaN(_root.museumValue[i])) {
          _root.save.collectionPoint += _root.museumValue[i];
        }
        ++i;
      }
      if (_root.save.collectionPointMax < _root.save.collectionPoint) {
        _root.save.collectionPointMax = _root.save.collectionPoint;
      }
    }

    _root.arenaSkillNameF = ['', 'Quick Attack', 'Power Attack', 'Specialized Skill', 'Combo Strike', 'Heal', 'Quick Attack Improve', 'Power Attack Improve', 'Specialized Skill Improve', 'Strength Enhancement', 'Dexterity Enhancement', 'Invisible Armor', 'Invisible Weapon', 'Artful Dodger', 'Accuracy Boost', 'Weapon Mastery', 'Weapon Booster', '', 'Critical Force', 'Critical Chance', 'Keen Eyes', 'HP Recovery', 'HP Boost', 'Overpowered Tanker', 'MP Recovery', 'MP Boost', '\'potion [PROFANITY] 1/5\'', 'Combo Power', 'Combo Protection', 'Combo Critical', 'Combo Reward', 'Rage Mastery', 'Rage Power', 'Panic', 'Learner', 'Money UP', 'Drain', 'Mana Eater', 'Coup de Grace', 'Poison Ability', 'Poison Power', 'Weaken Ability', 'Weaken Power', 'Blind Ability', 'Blind Power', 'Explosive Attacks', '', '', '', 'Mana Power', 'Five-Leaf Clover', 'Reflect', 'Magic Reflect', 'Autosteal', 'Basic Attack', 'Double Hit', 'Elemental Bonus', 'Master Hunter', 'Spirit Shield', 'Legendary Weapon', 'Adrenaline', 'Protection', 'Buff Boost', 'Crescendo', 'Revive', 'Charge', 'Absorb'];
    _root.arenaSkillMaxF = [0, 30, 30, 30, 30, 10, 1, 1, 1, 50, 50, 40, 40, 50, 50, 50, 40, 0, 50, 30, 50, 30, 50, 50, 30, 50, 1, 30, 30, 40, 50, 30, 50, 50, 50, 50, 50, 30, 50, 30, 40, 30, 40, 30, 40, 50, 0, 0, 0, 1, 50, 30, 30, 50, 20, 30, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    _root.arenaSkillRankF = [999, 10, 30, 70, 120, 10, 250, 350, 500, 10, 10, 30, 40, 50, 60, 70, 80, 999, 90, 100, 110, 15, 25, 130, 45, 55, 120, 35, 75, 115, 155, 65, 85, 95, 30, 30, 70, 70, 70, 105, 145, 135, 175, 125, 165, 140, 999, 999, 999, 180, 170, 150, 160, 120, 1, 120, 500, 500, 500, 500, 500, 120, 120, 180, 180, 180, 180];
    craftWeapon = [zeroItem];
    craftArmor = [zeroItem];
    craftAccessory = [zeroItem];
    craftEnhancer = [zeroItem];
    craftPotion = [zeroItem];
    craftChip = [zeroItem];
    stickName = _root.kongregate_username + '\'s Tree Stick';
    if (_root.kongregate_username == undefined || _root.kongregate_username == 'Guest') {
      stickName = '????\'s Tree Stick';
    }
    addArenaCraftWeapon('Title', 'Newbie Items');
    addArenaCraftWeapon(1, 1, 1, 1, 'Stick', false, 101, 30, 13, 0, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Stick', '');
    addArenaCraftWeapon(1, 1, 1, 1, 'Stick', false, 102, 50, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Pixel', 'Mastery', '', 0, Infinity, false, false, false, false, false, 0, 100, 0, 0, 0, 'Tree Stick', '');
    addArenaCraftWeapon(1, 1, 1, 10, 'Stick', false, 103, 150, 13, 0, 10, 25, 0, 1, 0, 0, 0, 'Pixel', 'Mastery', '', 0, Infinity, false, false, false, false, false, 0, 1000, 0, 0, 0, 'Enchanted Tree Stick', '');
    addArenaCraftWeapon(1, 1, 1, 20, 'Stick', false, 104, 250, 13, 0, 10, 50, 0, 10, 30000, 0, 0, 'Pixel', 'Mastery', '', 0, Infinity, false, false, false, false, true, 0, 50000, 0, 0, 0, stickName, '');
    addArenaCraftWeapon('Title', 'Basic');
    addArenaCraftWeapon('Title 2', 'Melee Weapons');
    addArenaCraftWeapon(3, 1, 2, 10, 'Dagger', false, 105, 200, 16, 40, 10, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 250, Infinity, false, false, false, false, false, 0, 2500, 0, 0, 0, 'Wooden Dagger', '');
    addArenaCraftWeapon(3, 1, 2, 15, 'Sword', false, 110, 220, 15, 40, 15, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 500, Infinity, false, false, false, false, false, 0, 5000, 0, 0, 0, 'Wooden Sword', '');
    addArenaCraftWeapon(3, 1, 2, 20, 'Sword', false, 115, 240, 14, 40, 15, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Wooden Longsword', '');
    addArenaCraftWeapon(3, 1, 2, 25, 'Spear', false, 120, 260, 13, 40, 15, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 2500, Infinity, false, false, false, false, false, 0, 25000, 0, 0, 0, 'Wooden Spear', '');
    addArenaCraftWeapon(3, 1, 2, 30, 'Axe', false, 125, 300, 12, 70, 20, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 5000, Infinity, false, false, false, false, false, 0, 50000, 0, 0, 0, 'Small Axe', '');
    addArenaCraftWeapon(3, 1, 2, 35, 'Axe', false, 130, 320, 11, 100, 20, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 0, 0, 0, 'Doubleaxe', '');
    addArenaCraftWeapon(3, 1, 3, 40, 'Dagger', false, 106, 330, 17, 40, 15, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 15000, Infinity, false, false, false, false, false, 0, 150000, 0, 0, 0, 'Silver Dagger', '');
    addArenaCraftWeapon(3, 1, 3, 45, 'Sword', false, 111, 355, 16, 40, 20, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 25000, Infinity, false, false, false, false, false, 0, 250000, 0, 0, 1, 'Silver Sword', '');
    addArenaCraftWeapon(3, 1, 3, 50, 'Sword', false, 116, 380, 15, 40, 20, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 40000, Infinity, false, false, false, false, false, 0, 400000, 0, 0, 2, 'Blue Longsword', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Spear', false, 121, 405, 14, 40, 20, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Silver Spear', '');
    addArenaCraftWeapon(3, 1, 3, 60, 'Axe', false, 126, 455, 13, 70, 25, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 100000, Infinity, false, false, false, false, false, 0, 1000000, 0, 0, 5, 'Medium Axe', '');
    addArenaCraftWeapon(3, 1, 3, 65, 'Axe', false, 131, 480, 12, 100, 25, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 0, 0, 7, 'Dark Doubleaxe', '');
    addArenaCraftWeapon(3, 1, 4, 70, 'Dagger', false, 107, 490, 18, 40, 20, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 250000, Infinity, false, false, false, false, false, 0, 2500000, 0, 0, 12, 'Golden Dagger', '');
    addArenaCraftWeapon(3, 1, 4, 75, 'Sword', false, 112, 520, 17, 40, 25, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 400000, Infinity, false, false, false, false, false, 0, 4000000, 0, 0, 20, 'Golden Sword', '');
    addArenaCraftWeapon(3, 1, 4, 80, 'Sword', false, 117, 550, 16, 40, 25, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Golden Longsword', '');
    addArenaCraftWeapon(3, 1, 4, 85, 'Spear', false, 122, 580, 15, 40, 25, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 0, 0, 50, 'Golden Spear', '');
    addArenaCraftWeapon(3, 1, 4, 90, 'Axe', false, 127, 640, 14, 70, 30, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 1500000, Infinity, false, false, false, false, false, 0, 15000000, 0, 0, 75, 'Large Axe', '');
    addArenaCraftWeapon(3, 1, 4, 95, 'Hammer', false, 132, 670, 13, 100, 30, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 2000000, Infinity, false, false, false, false, false, 0, 20000000, 0, 0, 100, 'Darkhammer', '');
    addArenaCraftWeapon(3, 2, 5, 100, 'Dagger', false, 108, 680, 19, 40, 25, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 3000000, Infinity, false, false, false, false, false, 0, 30000000, 0, 0, 150, 'Diamond Dagger', '');
    addArenaCraftWeapon(3, 2, 5, 105, 'Sword', false, 113, 715, 18, 40, 30, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 0, 0, 200, 'Diamond Sword', '');
    addArenaCraftWeapon(3, 2, 5, 110, 'Sword', false, 118, 740, 17, 40, 30, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 5000000, Infinity, false, false, false, false, false, 0, 50000000, 0, 0, 250, 'Blood Longsword', '');
    addArenaCraftWeapon(3, 2, 5, 115, 'Spear', false, 123, 775, 16, 40, 30, 10, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 0, 0, 300, 'Diamond Spear', '');
    addArenaCraftWeapon(3, 2, 5, 120, 'Axe', false, 128, 845, 15, 70, 35, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 7000000, Infinity, false, false, false, false, false, 0, 70000000, 0, 0, 350, 'Golden Axe', '');
    addArenaCraftWeapon(3, 2, 5, 125, 'Sword', false, 133, 800, 20, 100, 35, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 0, 0, 400, 'Hero Sword', '');
    addArenaCraftWeapon(3, 2, 5, 130, 'Sword', false, 135, 850, 21, 100, 40, 30, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 9000000, Infinity, false, false, false, false, false, 0, 90000000, 0, 0, 450, 'Legendary Sword', '');
    addArenaCraftWeapon(3, 2, 5, 135, 'Sword', false, 134, 900, 22, 100, 40, 30, 12, 1, 0, 0, 0, 'EXP', 'Attack', '', 10000000, Infinity, false, false, false, false, false, 0, 100000000, 0, 0, 500, 'Triangle Sword', '');
    addArenaCraftWeapon(3, 2, 5, 140, 'Sword', false, 302, 1200, 17, 100, 40, 0, 0, 1, 0, 0, 0, 'EXP', 'Attack', '', 15000000, Infinity, false, false, false, false, true, 0, 150000000, 0, 0, 750, 'Spirit Sword', '');
    addArenaCraftWeapon('Title 2', 'Ranged Weapons');
    addArenaCraftWeapon(3, 1, 2, 10, 'Gun', true, 146, 50, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Water Element', 'Critical Damage', '', 250, Infinity, false, false, false, false, false, 0, 2500, 0, 0, 0, 'Water Gun', '');
    addArenaCraftWeapon(3, 1, 2, 15, 'Bow', true, 136, 140, 8, 0, 5, 10, 0, 1, 0, 0, 0, 'EXP', 'Accuracy', '', 500, Infinity, false, false, false, false, false, 0, 5000, 0, 0, 0, 'Weak Bow', '');
    addArenaCraftWeapon(3, 1, 2, 20, 'Crossbow', true, 141, 170, 7, 0, 10, 10, 0, 1, 0, 0, 0, 'Coin', 'Accuracy', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Weak Crossbow', '');
    addArenaCraftWeapon(3, 1, 2, 25, 'Wand', true, 155, 200, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 2500, Infinity, false, false, false, false, false, 0, 25000, 0, 0, 0, 'Basic Wand', '');
    addArenaCraftWeapon(3, 1, 2, 30, 'Claw', true, 171, 190, 11, 5, 5, 5, 10, 1, 0, 0, 0, 'Pixel', 'Autosteal', '', 5000, Infinity, false, false, false, false, false, 0, 50000, 0, 0, 0, 'Basic Claw', '');
    addArenaCraftWeapon(3, 1, 3, 40, 'Gun', true, 147, 180, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Fire Element', 'Critical Damage', '', 15000, Infinity, false, false, false, false, false, 0, 150000, 0, 0, 0, 'Fire Gun', '');
    addArenaCraftWeapon(3, 1, 3, 45, 'Bow', true, 137, 285, 8, 0, 5, 10, 0, 1, 0, 0, 0, 'EXP', 'Accuracy', '', 25000, Infinity, false, false, false, false, false, 0, 250000, 0, 0, 1, 'Advanced Bow', '');
    addArenaCraftWeapon(3, 1, 3, 50, 'Crossbow', true, 142, 320, 7, 0, 10, 10, 0, 1, 0, 0, 0, 'Coin', 'Accuracy', '', 40000, Infinity, false, false, false, false, false, 0, 400000, 0, 0, 2, 'Advanced Crossbow', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 156, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Fire Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Fire Wand', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 157, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Ice Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Ice Wand', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 158, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Wind Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Wind Wand', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 159, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Earth Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Earth Wand', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 160, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Thunder Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Thunder Wand', '');
    addArenaCraftWeapon(3, 1, 3, 55, 'Wand', true, 161, 355, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Water Element', 'MP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 0, 0, 3, 'Water Wand', '');
    addArenaCraftWeapon(3, 1, 3, 60, 'Claw', true, 172, 345, 11, 10, 5, 5, 10, 1, 0, 0, 0, 'Pixel', 'Autosteal', '', 100000, Infinity, false, false, false, false, false, 0, 1000000, 0, 0, 5, 'Steel Claw', '');
    addArenaCraftWeapon(3, 1, 4, 70, 'Gun', true, 148, 335, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Dark Element', 'Critical Damage', '', 250000, Infinity, false, false, false, false, false, 0, 2500000, 0, 0, 12, 'Dark Gun', '');
    addArenaCraftWeapon(3, 1, 4, 75, 'Bow', true, 138, 455, 8, 0, 5, 10, 0, 1, 0, 0, 0, 'EXP', 'Accuracy', '', 400000, Infinity, false, false, false, false, false, 0, 4000000, 0, 0, 20, 'Diamond Bow', '');
    addArenaCraftWeapon(3, 1, 4, 80, 'Crossbow', true, 143, 495, 7, 0, 10, 10, 0, 1, 0, 0, 0, 'Coin', 'Accuracy', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Diamond Crossbow', '');
    addArenaCraftWeapon(3, 1, 4, 85, 'Wand', true, 162, 535, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Light Element', 'MP Regen', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 0, 0, 50, 'Light Wand', '');
    addArenaCraftWeapon(3, 1, 4, 85, 'Wand', true, 163, 535, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Dark Element', 'MP Regen', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 0, 0, 50, 'Dark Wand', '');
    addArenaCraftWeapon(3, 1, 4, 85, 'Wand', true, 164, 535, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'Drain', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 0, 0, 50, 'Life Drain Wand', '');
    addArenaCraftWeapon(3, 1, 4, 85, 'Wand', true, 165, 535, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'Mana Eater', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 0, 0, 50, 'Mana Eater Wand', '');
    addArenaCraftWeapon(3, 1, 4, 90, 'Claw', true, 173, 525, 11, 15, 5, 5, 10, 1, 0, 0, 0, 'Pixel', 'Autosteal', '', 1500000, Infinity, false, false, false, false, false, 0, 15000000, 0, 0, 75, 'Venomous Claw', '');
    addArenaCraftWeapon(3, 2, 5, 100, 'Gun', true, 149, 515, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Coin', 'Critical Damage', '', 3000000, Infinity, false, false, false, false, false, 0, 30000000, 0, 0, 150, 'Golden Gun', '');
    addArenaCraftWeapon(3, 2, 5, 105, 'Bow', true, 139, 650, 8, 0, 5, 10, 0, 1, 0, 0, 0, 'Light Element', 'Accuracy', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 0, 0, 200, 'Holy Bow', '');
    addArenaCraftWeapon(3, 2, 5, 110, 'Crossbow', true, 144, 695, 7, 0, 10, 10, 0, 1, 0, 0, 0, 'Light Element', 'Accuracy', '', 5000000, Infinity, false, false, false, false, false, 0, 50000000, 0, 0, 250, 'Holy Crossbow', '');
    addArenaCraftWeapon(3, 2, 5, 115, 'Wand', true, 166, 740, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'HP', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 0, 0, 300, 'Life Wand', '');
    addArenaCraftWeapon(3, 2, 5, 115, 'Wand', true, 167, 740, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'MP', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 0, 0, 300, 'Mana Wand', '');
    addArenaCraftWeapon(3, 2, 5, 115, 'Wand', true, 168, 740, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'Poison Chance', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 0, 0, 300, 'Poison Wand', '');
    addArenaCraftWeapon(3, 2, 5, 115, 'Wand', true, 169, 740, 6, 0, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'Weaken Chance', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 0, 0, 300, 'Weaken Wand', '');
    addArenaCraftWeapon(3, 2, 5, 120, 'Claw', true, 174, 730, 11, 20, 5, 5, 10, 1, 0, 0, 0, 'Pixel', 'Autosteal', '', 7000000, Infinity, false, false, false, false, false, 0, 70000000, 0, 0, 350, 'Blood Claw', '');
    addArenaCraftWeapon(3, 2, 5, 130, 'Gun', true, 150, 720, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Water Element', 'Critical Damage', '', 9000000, Infinity, false, false, false, false, false, 0, 90000000, 0, 0, 450, 'Advanced Water Gun', '');
    addArenaCraftWeapon(3, 2, 5, 130, 'Gun', true, 151, 720, 13, 0, 10, 0, 0, 1, 0, 0, 0, 'Fire Element', 'Critical Damage', '', 9000000, Infinity, false, false, false, false, false, 0, 90000000, 0, 0, 450, 'Advanced Fire Gun', '');
    addArenaCraftWeapon('Title', '\'lrn2craft\'');
    addArenaCraftWeapon('Title 2', 'Melee Weapons');
    addArenaCraftWeapon(4, 1, 2, 8, 'Sword', false, 201, 130, 14, 5, 15, 0, 0, 10, 5000, 0, 0, 'Reward', '', '', 500, Infinity, false, false, false, false, false, 0, 5000, 500, 0, 0, 'Broken Greatsword', '');
    addArenaCraftWeapon(4, 1, 2, 18, 'Polearm (Stab)', false, 202, 175, 12, 15, 16, 0, 0, 10, 10000, 0, 0, 'Reward', 'Mastery', '', 2500, Infinity, false, false, false, false, false, 0, 25000, 2500, 0, 0, 'Ranseur', '');
    addArenaCraftWeapon(4, 1, 2, 28, 'Polearm', false, 203, 210, 13, 25, 17, 0, 0, 10, 25000, 0, 0, 'Reward', 'Mastery', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Halberd', '');
    addArenaCraftWeapon(4, 1, 2, 38, 'Polearm (Stab)', false, 204, 265, 12, 35, 18, 0, 0, 10, 50000, 0, 0, 'Reward', 'Mastery', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 50000, 0, 5, 'Trident', '');
    addArenaCraftWeapon(4, 1, 2, 48, 'Polearm (Stab)', false, 205, 285, 12, 45, 19, 0, 0, 10, 100000, 0, 0, 'Reward', 'Mastery', '', 100000, Infinity, false, false, false, false, false, 0, 1000000, 100000, 1, 10, 'Partisan', '');
    addArenaCraftWeapon(4, 1, 2, 58, 'Polearm (Stab)', false, 206, 280, 15, 55, 20, 0, 0, 10, 250000, 0, 0, 'Reward', 'Mastery', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Awl Pike', '');
    addArenaCraftWeapon(4, 1, 3, 68, 'Polearm', false, 207, 275, 18, 65, 21, 0, 0, 10, 500000, 0, 0, 'Reward', 'Mastery', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Bill Hook', '');
    addArenaCraftWeapon(4, 1, 3, 78, 'Polearm (Stab)', false, 208, 380, 12, 75, 22, 0, 0, 10, 1000000, 0, 0, 'Reward', 'Mastery', '', 1000000, Infinity, false, false, false, false, false, 0, 10000000, 1000000, 10, 100, 'Bat-Wing Corseque', '');
    addArenaCraftWeapon(4, 1, 3, 88, 'Polearm (Stab)', false, 209, 400, 12, 85, 23, 0, 0, 10, 1500000, 0, 0, 'Reward', 'Mastery', '', 1500000, Infinity, false, false, false, false, false, 0, 15000000, 1500000, 15, 150, 'Corseque', '');
    addArenaCraftWeapon(4, 2, 3, 98, 'Polearm', false, 210, 385, 12, 95, 24, 0, 0, 10, 1500000, 0, 0, 'Reward', 'Mastery', '', 2000000, Infinity, false, false, false, false, false, 0, 20000000, 2000000, 20, 200, 'Fauchard', '');
    addArenaCraftWeapon(4, 2, 3, 108, 'Polearm (Stab)', false, 211, 420, 12, 105, 25, 0, 0, 10, 3000000, 0, 0, 'Reward', 'Mastery', '', 3000000, Infinity, false, false, false, false, false, 0, 30000000, 3000000, 30, 300, 'Military Fork', '');
    addArenaCraftWeapon(4, 2, 3, 118, 'Polearm', false, 212, 415, 12, 115, 26, 0, 0, 10, 3000000, 0, 0, 'Reward', 'Mastery', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Fauchard-Fork', '');
    addArenaCraftWeapon(4, 2, 3, 128, 'Polearm', false, 213, 385, 13, 125, 27, 0, 0, 20, 4500000, 0, 0, 'Reward', 'Mastery', '', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 6000000, 60, 600, 'Naginata', '');
    addArenaCraftWeapon(4, 2, 4, 133, 'Polearm', false, 214, 410, 12, 135, 28, 0, 0, 20, 4500000, 0, 0, 'Reward', 'Mastery', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Nagimaki', '');
    addArenaCraftWeapon(4, 2, 4, 138, 'Polearm', false, 215, 410, 14, 145, 29, 0, 0, 20, 6000000, 0, 0, 'Reward', 'Mastery', '', 10000000, Infinity, false, false, false, false, false, 0, 100000000, 10000000, 100, 1000, 'Fukuro Yari', '');
    addArenaCraftWeapon(4, 2, 4, 143, 'Polearm', false, 216, 440, 12, 155, 30, 0, 0, 20, 6000000, 0, 0, 'Reward', 'Mastery', '', 15000000, Infinity, false, false, false, false, false, 0, 150000000, 15000000, 150, 1500, 'Voulge', '');
    addArenaCraftWeapon(4, 3, 4, 148, 'Polearm', false, 217, 510, 10, 165, 31, 0, 0, 20, 6000000, 0, 0, 'Reward', 'Mastery', '', 20000000, Infinity, false, false, false, false, false, 0, 200000000, 20000000, 200, 2000, 'Scythe', '');
    addArenaCraftWeapon(4, 3, 4, 153, 'Polearm', false, 218, 475, 10, 175, 32, 0, 0, 30, 9000000, 0, 0, 'Reward', 'Mastery', '', 25000000, Infinity, false, false, false, false, false, 0, 250000000, 25000000, 250, 2500, 'Bardiche', '');
    addArenaCraftWeapon(4, 3, 4, 158, 'Polearm', false, 219, 500, 12, 185, 33, 0, 0, 30, 9000000, 0, 0, 'Reward', 'Mastery', '', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 300, 3000, 'Poleaxe', '');
    addArenaCraftWeapon(4, 3, 4, 163, 'Polearm', false, 220, 525, 10, 195, 34, 0, 0, 30, 9000000, 0, 0, 'Reward', 'Mastery', '', 35000000, Infinity, false, false, false, false, false, 0, 350000000, 35000000, 350, 3500, 'Lochaber Axe', '');
    addArenaCraftWeapon(4, 3, 4, 168, 'Polearm', false, 221, 550, 10, 205, 35, 0, 0, 30, 12000000, 0, 0, 'Reward', 'Mastery', '', 40000000, Infinity, false, false, false, false, false, 0, 400000000, 40000000, 400, 4000, 'Bohemian Earspoon', '');
    addArenaCraftWeapon(4, 3, 4, 173, 'Hammer', false, 222, 560, 10, 215, 36, 0, 0, 30, 12000000, 0, 0, 'Reward', 'Mastery', '', 45000000, Infinity, false, false, false, false, false, 0, 450000000, 45000000, 450, 4500, 'Bec de Corbin', '');
    addArenaCraftWeapon(4, 3, 4, 178, 'Polearm', false, 223, 615, 10, 225, 37, 0, 0, 30, 15000000, 0, 0, 'Reward', 'Mastery', '', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 500, 5000, 'Ox Tongue', '');
    addArenaCraftWeapon(4, 3, 4, 183, 'Polearm (Stab)', false, 224, 630, 10, 235, 38, 0, 0, 30, 15000000, 0, 0, 'Reward', 'Mastery', '', 60000000, Infinity, false, false, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Spetum', '');
    addArenaCraftWeapon(4, 3, 5, 188, 'Polearm', false, 225, 625, 10, 245, 39, 5, 0, 40, 18000000, 0, 0, 'Reward', 'Mastery', '', 70000000, Infinity, false, false, false, false, false, 0, 700000000, 70000000, 700, 7000, 'Glaive', '');
    addArenaCraftWeapon(4, 3, 5, 193, 'Polearm', false, 226, 630, 12, 255, 40, 10, 0, 40, 18000000, 0, 0, 'Reward', 'Mastery', '', 80000000, Infinity, false, false, false, false, false, 0, 800000000, 80000000, 800, 8000, 'Guisarme', '');
    addArenaCraftWeapon(4, 3, 5, 198, 'Polearm (Stab)', false, 231, 675, 11, 265, 41, 10, 0, 40, 21000000, 0, 0, 'Reward', 'Mastery', '', 90000000, Infinity, false, false, false, false, false, 0, 900000000, 90000000, 900, 9000, 'Longspear', '');
    addArenaCraftWeapon(4, 4, 5, 203, 'Hammer', false, 232, 725, 9, 275, 42, 10, 0, 40, 21000000, 0, 0, 'Reward', 'Mastery', '', 100000000, Infinity, false, false, false, false, false, 0, 1000000000, 100000000, 1000, 10000, 'Lucerne Hammer', '');
    addArenaCraftWeapon(4, 4, 5, 208, 'Polearm', false, 227, 730, 9, 285, 43, 15, 0, 40, 24000000, 0, 0, 'Reward', 'Mastery', '', 150000000, Infinity, false, false, false, false, false, 0, 1500000000, 150000000, 1500, 15000, 'Glaive-Guisarme', '');
    addArenaCraftWeapon(4, 4, 5, 213, 'Polearm', false, 228, 745, 11, 295, 44, 15, 0, 40, 24000000, 0, 0, 'Reward', 'Mastery', '', 200000000, Infinity, false, false, false, false, false, 0, 2000000000, 200000000, 2000, 20000, 'Guisarme-Glaive', '');
    addArenaCraftWeapon(4, 4, 5, 218, 'Polearm', false, 229, 795, 9, 320, 45, 20, 0, 40, 27000000, 0, 0, 'Reward', 'Mastery', '', 250000000, Infinity, false, false, false, false, false, 0, 2500000000.0, 250000000, 3000, 25000, 'Glaive-Guisarme-Glaive', '');
    addArenaCraftWeapon(4, 4, 5, 228, 'Polearm', false, 230, 800, 7, 360, 50, 25, 0, 50, 30000000, 0, 0, 'Reward', 'Mastery', 'Attack Power', 400000000, Infinity, false, false, false, false, false, 0, 4000000000.0, 400000000, 5000, 40000, 'Glaive-Glaive-Glaive-Guisarme-Glaive', '');
    addArenaCraftWeapon(4, 5, 5, 238, 'Sword', false, 233, 850, 14, 400, 55, 30, 10, 50, 30000000, 0, 0, 'Reward', 'Boss Damage', 'Attack Power', 600000000, Infinity, false, false, false, false, false, 0, 6000000000.0, 600000000, 10000, 60000, 'Greatsword', '');
    addArenaCraftWeapon(4, 5, 5, 248, 'Sword', false, 234, 875, 14, 500, 60, 35, 10, 50, 30000000, 0, 0, 'Reward', 'Boss Damage', 'Attack Power', 800000000, Infinity, false, false, false, false, false, 0, 8000000000.0, 800000000, 15000, 80000, 'Greatersword', '');
    addArenaCraftWeapon(4, 5, 1, 298, 'Polearm', false, 264, 0, 11, 0, 45, 0, 20, 1, 0, -5, 0, 'Dark Element', 'Boss Damage', '', 1000000000, Infinity, false, false, true, false, false, 0, 0, 2000000000, 5000, 50000, 'Fiend Glaive', 'Cannot be enhanced with Attack enhancers.');
    addArenaCraftWeapon('Title 2', 'Ranged Weapons');
    addArenaCraftWeapon(4, 2, 3, 108, 'Gun', true, 153, 100, 25, 25, 35, 25, 0, 1, 0, 0, 0, 'EXP', 'Stun Chance', '', 3000000, Infinity, false, false, false, false, false, 0, 30000000, 3000000, 30, 300, 'Laser Gun', '');
    addArenaCraftWeapon(4, 3, 4, 128, 'Bow', true, 249, 650, 12, 0, 25, 35, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Accuracy', 6000000, Infinity, false, false, false, false, false, 0, 60000000, 6000000, 60, 600, 'Mystic Bow', '');
    addArenaCraftWeapon(4, 3, 4, 148, 'Gun', true, 154, 150, 30, 30, 40, 30, 0, 1, 0, 0, 0, 'EXP', 'Stun Chance', '', 20000000, Infinity, false, false, false, false, false, 0, 200000000, 20000000, 200, 2000, 'Strong Machine Gun', '');
    addArenaCraftWeapon(4, 4, 5, 168, 'Crossbow', true, 250, 700, 11, 0, 40, 25, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Accuracy', 40000000, Infinity, false, false, false, false, false, 0, 400000000, 40000000, 400, 4000, 'Mystic Crossbow', '');
    addArenaCraftWeapon(4, 4, 5, 188, 'Claw', true, 277, 750, 16, 60, 25, 15, 30, 1, 0, 0, 0, 'Dark Element', 'Autosteal', 'Accuracy', 70000000, Infinity, false, false, false, false, false, 0, 700000000, 70000000, 700, 7000, 'Pure Darkness Claw', '');
    addArenaCraftWeapon(4, 5, 5, 198, 'Slingshot', true, 236, 900, 7, 0, 30, 100, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Accuracy', 90000000, Infinity, false, false, false, false, false, 0, 900000000, 90000000, 900, 9000, 'Slingshot', '');
    addArenaCraftWeapon(4, 5, 5, 208, 'Bow', true, 278, 850, 12, 0, 30, 40, 20, 1, 0, 0, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Attack', 150000000, Infinity, false, false, false, false, false, 0, 1500000000, 150000000, 1500, 15000, 'Crimson Bow', '');
    addArenaCraftWeapon(4, 5, 5, 218, 'Slingshot', true, 237, 1000, 5, 0, 40, 120, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Accuracy', 250000000, Infinity, false, false, false, false, false, 0, 2500000000.0, 250000000, 3000, 25000, 'Oversized Slingshot', '');
    addArenaCraftWeapon(4, 5, 5, 228, 'Cannon', true, 238, 1100, 3, 200, 40, 0, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Defense Power', 300000000, Infinity, false, false, false, false, false, 0, 3000000000.0, 300000000, 3500, 30000, 'Cannon', '');
    addArenaCraftWeapon(4, 5, 5, 238, 'Cannon', true, 239, 1150, 3, 300, 50, 0, 0, 1, 0, 0, 0, 'Epic Monster Rate', 'Instant Kill', 'Defense Power', 400000000, Infinity, false, false, false, false, false, 0, 4000000000.0, 400000000, 5000, 40000, 'Gold Cannon', '');
    addArenaCraftWeapon(4, 5, 1, 258, 'Staff', true, 261, 0, 9, 0, 25, 0, 10, 1, 0, -5, 0, 'Light Element', 'Boss Damage', '', 600000000, Infinity, false, false, true, false, false, 0, 0, 1200000000, 3000, 30000, 'Glaive of Smiting', 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.');
    addArenaCraftWeapon(4, 5, 1, 278, 'Staff', true, 263, 0, 10, 0, 35, 0, 10, 1, 0, -5, 0, 'Dark Element', 'Boss Damage', '', 800000000, Infinity, false, false, true, false, false, 0, 0, 1600000000, 4000, 40000, 'Darkglaive of Smiting', 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.');
    addArenaCraftWeapon('Title', 'Career');
    addArenaCraftWeapon(6, 2, 3, 135, 'Sword', false, 301, 666, 8, 60, 20, 10, 10, 66, 600000, -6, 0, '', 'Random', '', 0, Infinity, true, false, true, false, false, 0, 5000000, 250000, 10, 10, 'Cursed Sword (1)', '');
    addArenaCraftWeapon(6, 3, 4, 165, 'Sword', false, 301, 666, 9, 90, 30, 20, 20, 66, 600000, -6, 0, '', 'Random', '', 0, Infinity, true, false, true, false, false, 0, 50000000, 2500000, 100, 100, 'Cursed Sword (2)', '');
    addArenaCraftWeapon(6, 4, 5, 195, 'Sword', false, 301, 666, 10, 120, 40, 30, 30, 66, 600000, -6, 0, '', 'Random', '', 0, Infinity, true, false, true, false, false, 0, 500000000, 25000000, 1000, 1000, 'Cursed Sword (3)', '');
    addArenaCraftWeapon(6, 5, 1, 500, 'Sword', false, 300, 2005, 10, 0, 20, 0, 0, 1, 0, 2005, 300, 'EXP', 'Silence Chance', '', 0, Infinity, true, false, true, false, false, 0, 5000000000.0, 0, 0, 0, 'Dark Ruler', 'It\'s a ruler with Darkruler2005\'s contributions written on it. Unfortunately, there\'s so much text on it that it turned dark, and no matter how hard you try, you can\'t read anything.');
    addArenaCraftWeapon('Title', 'Mission Kommander');
    addArenaCraftWeapon(7, 1, 1, 30, 'Mining Tool', false, 311, 0, 5, 0, 3, 0, 0, 2, 500000, 10, 1, 'Drop Rate', '', '', 0, Infinity, true, false, true, false, false, 0, 10000, 1000, 0, 0, 'Bronze Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 2, 1, 70, 'Mining Tool', false, 312, 0, 6, 0, 6, 0, 0, 2, 800000, 9, 16, 'Drop Rate', 'Critical Damage', '', 0, Infinity, true, false, true, false, false, 0, 100000, 10000, 0, 1, 'Silver Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 3, 1, 120, 'Mining Tool', false, 313, 0, 6, 0, 9, 0, 0, 3, 1100000, 9, 36, 'Drop Rate', 'Critical Damage', '', 0, Infinity, true, false, true, false, false, 0, 1000000, 100000, 1, 10, 'Golden Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 4, 1, 180, 'Mining Tool', false, 314, 0, 7, 0, 12, 0, 0, 3, 1500000, 9, 66, 'Drop Rate', 'Critical Damage', '', 0, Infinity, true, false, true, false, false, 0, 10000000, 1000000, 5, 100, 'Diamond Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 5, 1, 250, 'Mining Tool', false, 315, 0, 7, 0, 15, 0, 0, 4, 2000000, 9, 106, 'Drop Rate', 'Critical Damage', '', 0, Infinity, true, false, true, false, false, 0, 100000000, 10000000, 25, 1000, 'Master\'s Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 5, 1, 350, 'Mining Tool', false, 316, 0, 8, 0, 18, 0, 0, 4, 3000000, 9, 156, 'Drop Rate', 'Critical Damage', '', 0, Infinity, true, false, true, false, false, 0, 1000000000, 100000000, 100, 10000, 'Legendary Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(7, 2, 1, 1, 'Sword', false, 177, 0, 1, 0, 10, 0, 0, 2, 100000, 0, 0, 'Fire Element', '', '', 0, Infinity, false, false, true, false, false, 0, 200000, 0, 1, 0, 'Burned Rope', '');
    addArenaCraftWeapon(7, 3, 1, 1, 'Wand', true, 178, 0, 8, 0, 10, 0, 0, 3, 4000000, 0, 0, '', '', '', 9001, Infinity, false, false, true, false, false, 0, 2000000, 0, 10, 0, 'Special Wand', '');
    addArenaCraftWeapon('Title', 'The Special Arena');
    addArenaCraftWeapon(8, 3, 3, 120, 'Trophy', false, 193, 937, 25, 100, 20, 20, 0, 60, 25000000, 10, 100, 'Random', 'Random', '', 0, 30, false, true, true, false, false, 5, 0, 0, 100, 100, 'Bronze Endurance Trophy', '');
    addArenaCraftWeapon(8, 4, 4, 180, 'Trophy', false, 194, 1037, 25, 200, 30, 30, 0, 90, 25000000, 9, 200, 'Random', 'Random', '', 0, 45, false, true, true, false, false, 10, 0, 0, 300, 300, 'Silver Endurance Trophy', '');
    addArenaCraftWeapon(8, 5, 5, 250, 'Trophy', false, 195, 1137, 25, 300, 40, 40, 0, 120, 25000000, 8, 300, 'Random', 'Random', '', 0, 60, false, true, true, false, false, 15, 0, 0, 900, 900, 'Gold Endurance Trophy', '');
    addArenaCraftWeapon(8, 5, 5, 350, 'Trophy', false, 298, 1237, 25, 400, 50, 50, 0, 150, 25000000, 7, 400, 'Random', 'Random', '', 0, 75, false, true, true, false, false, 20, 0, 0, 8100, 8100, 'Platinum Endurance Trophy', '');
    addArenaCraftWeapon(8, 5, 5, 500, 'Trophy', false, 299, 1337, 25, 500, 60, 60, 0, 180, 25000000, 6, 500, 'Random', 'Random', '', 0, 90, false, true, true, false, false, 25, 0, 0, 72900, 72900, 'Unobtainium Endurance Trophy', '');
    addArenaCraftWeapon('Title', 'Alien');
    addArenaCraftWeapon(12, 2, 5, 70, 'Sword', false, 303, 750, 16, 100, 30, 30, 0, 30, 1200000, 0, 0, 'Random', 'Rage Depletion', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Sword #1', '');
    addArenaCraftWeapon(12, 2, 5, 70, 'Claw', true, 304, 590, 16, 20, 30, 30, 0, 30, 1200000, 0, 0, 'Random', 'Reflect', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Claw #1', '');
    addArenaCraftWeapon(12, 2, 5, 70, 'Wand', true, 305, 590, 16, 20, 30, 30, 0, 30, 1200000, 0, 0, 'Random', 'Dodge Chance', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Wand #1', '');
    addArenaCraftWeapon(12, 2, 5, 70, 'Bow', true, 306, 590, 16, 20, 30, 30, 0, 30, 1200000, 0, 0, 'Random', 'Poison Chance', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Bow #1', '');
    addArenaCraftWeapon(12, 4, 5, 90, 'Sword', false, 307, 775, 16, 100, 30, 30, 0, 30, 1400000, 0, 0, 'Random', 'Ignore Defense', '', 7000000, 14, false, true, false, false, false, 0, 70000000, 7000000, 7, 350, 'Alien Sword #2', '');
    addArenaCraftWeapon(12, 4, 5, 90, 'Claw', true, 308, 615, 16, 20, 30, 30, 0, 30, 1400000, 0, 0, 'Random', 'Damage Taken', '', 7000000, 14, false, true, false, false, false, 0, 70000000, 7000000, 7, 350, 'Alien Claw #2', '');
    addArenaCraftWeapon(12, 4, 5, 90, 'Wand', true, 309, 615, 16, 20, 30, 30, 0, 30, 1400000, 0, 0, 'Random', 'HP Regen', '', 7000000, 14, false, true, false, false, false, 0, 70000000, 7000000, 7, 350, 'Alien Wand #2', '');
    addArenaCraftWeapon(12, 4, 5, 90, 'Bow', true, 310, 615, 16, 20, 30, 30, 0, 30, 1400000, 0, 0, 'Random', 'Accuracy', '', 7000000, 14, false, true, false, false, false, 0, 70000000, 7000000, 7, 350, 'Alien Bow #2', '');
    addArenaCraftWeapon('Title', 'Elite Alien');
    addArenaCraftWeapon(14, 2, 5, 270, 'Sword', false, 303, 1100, 16, 100, 30, 40, 0, 40, 6000000, 0, 0, 'Random', 'Rage Depletion', '', 50000000, 14, false, true, false, false, false, 10, 500000000, 50000000, 25, 2500, 'Elite Alien Sword #1', '');
    addArenaCraftWeapon(14, 2, 5, 270, 'Claw', true, 304, 940, 16, 20, 30, 40, 0, 40, 6000000, 0, 0, 'Random', 'Reflect', '', 50000000, 14, false, true, false, false, false, 10, 500000000, 50000000, 25, 2500, 'Elite Alien Claw #1', '');
    addArenaCraftWeapon(14, 2, 5, 270, 'Wand', true, 305, 940, 16, 20, 30, 40, 0, 40, 6000000, 0, 0, 'Random', 'Dodge Chance', '', 50000000, 14, false, true, false, false, false, 10, 500000000, 50000000, 25, 2500, 'Elite Alien Wand #1', '');
    addArenaCraftWeapon(14, 2, 5, 270, 'Bow', true, 306, 940, 16, 20, 30, 40, 0, 40, 6000000, 0, 0, 'Random', 'Poison Chance', '', 50000000, 14, false, true, false, false, false, 10, 500000000, 50000000, 25, 2500, 'Elite Alien Bow #1', '');
    addArenaCraftWeapon(14, 4, 5, 290, 'Sword', false, 307, 1125, 16, 100, 30, 40, 0, 40, 7000000, 0, 0, 'Random', 'Ignore Defense', '', 70000000, 14, false, true, false, false, false, 10, 700000000, 70000000, 35, 3500, 'Elite Alien Sword #2', '');
    addArenaCraftWeapon(14, 4, 5, 290, 'Claw', true, 308, 965, 16, 20, 30, 40, 0, 40, 7000000, 0, 0, 'Random', 'Damage Taken', '', 70000000, 14, false, true, false, false, false, 10, 700000000, 70000000, 35, 3500, 'Elite Alien Claw #2', '');
    addArenaCraftWeapon(14, 4, 5, 290, 'Wand', true, 309, 965, 16, 20, 30, 40, 0, 40, 7000000, 0, 0, 'Random', 'HP Regen', '', 70000000, 14, false, true, false, false, false, 10, 700000000, 70000000, 35, 3500, 'Elite Alien Wand #2', '');
    addArenaCraftWeapon(14, 4, 5, 290, 'Bow', true, 310, 965, 16, 20, 30, 40, 0, 40, 7000000, 0, 0, 'Random', 'Accuracy', '', 70000000, 14, false, true, false, false, false, 10, 700000000, 70000000, 35, 3500, 'Elite Alien Bow #2', '');
    addArenaCraftWeapon('Title', 'Chaotic Items');
    addArenaCraftWeapon(15, 1, 5, 268, 'Polearm', false, 235, 700, 6, 600, 30, 30, 12, 60, 60000000, 0, 0, 'Reward', 'Mastery', 'Attack Power', 100000000, Infinity, false, false, false, false, false, 0, 1000000000, 500000000, 100, 10000, 'Badly Recolored Weapon', '');
    addArenaCraftWeapon(15, 1, 5, 288, 'Sword', false, 251, 1300, 18, 800, 50, 50, 12, 60, 60000000, 0, 0, 'Drop Rate', 'Instant Kill', 'Attack Power', 150000000, Infinity, false, false, false, false, false, 0, 1500000000, 750000000, 150, 15000, 'Scimitar', '');
    addArenaCraftWeapon(15, 1, 5, 308, 'Sword', false, 252, 1500, 21, 1000, 50, 50, 40, 60, 60000000, 0, 0, 'Drop Rate', 'Instant Kill', 'Attack Power', 250000000, Infinity, false, false, false, false, false, 0, 2500000000.0, 1250000000, 250, 25000, 'Blood Scimitar', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Axe', false, 266, 300, 8, 0, 30, 10, 10, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Battleaxe', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Sword', false, 267, 275, 7, 0, 20, 20, 10, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Sword', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Dagger', false, 268, 325, 11, 0, 20, 30, 10, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Cleaver', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Polearm', false, 269, 275, 5, 0, 20, 10, 10, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Glaive', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Polearm', false, 270, 325, 7, 0, 10, 10, 40, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Scythe', '');
    addArenaCraftWeapon(15, 1, 2, 500, 'Polearm', false, 271, 175, 6, 0, 20, 10, 10, 6, 70000000, 6, 500, 'EXP', 'Boss Damage', 'Equipment Attack', 8000000000.0, Infinity, false, false, true, true, false, 20, 80000000000.0, 40000000000.0, 16000, 1600000, 'Meteoric Voulge', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Dagger', false, 81, 2100, 9, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Dagger', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Sword', false, 71, 2200, 8, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Sword', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Spear', false, 72, 1900, 4, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Spear', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Axe', false, 73, 2000, 6, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Axe', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Bow', true, 74, 1500, 8, 200, 10, 20, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Bow', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Gun', true, 75, 1400, 10, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Gun', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Staff', true, 82, 1600, 5, 200, 10, 10, 0, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Staff', '');
    addArenaCraftWeapon(15, 4, 1, 388, 'Claw', true, 83, 1300, 10, 200, 10, 10, 10, 44, 70000000, 4, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 444444444, Infinity, false, false, false, false, false, 0, 4444444444.0, 444444444, 444, 44444, 'Dragon Slayer Claw', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Dagger', false, 84, 2500, 10, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Dagger', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Sword', false, 76, 2600, 9, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Sword', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Spear', false, 77, 2300, 5, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Spear', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Axe', false, 78, 2400, 7, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Axe', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Bow', true, 79, 1900, 9, 300, 15, 25, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Bow', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Gun', true, 80, 1800, 11, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Gun', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Staff', true, 85, 2000, 6, 300, 15, 15, 0, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Staff', '');
    addArenaCraftWeapon(15, 5, 1, 438, 'Claw', true, 86, 1700, 11, 300, 15, 15, 10, 66, 2700000000.0, 6, 500, 'Spawn Rate', 'Boss Damage', 'Attack Power', 66666666666.0, Infinity, false, false, false, false, false, 0, 666666666666.0, 66666666666.0, 66666, 6666666, 'Demon Slayer Claw', '');
    addArenaCraftWeapon('Title', 'Unobtainium');
    addArenaCraftWeapon(16, 1, 1, 300, 'Wand', true, 272, 350, 25, 0, 5, 0, 0, 10, 600000000, -7, 0, 'Light Element', 'Potion Efficiency', '', 50000000, Infinity, false, false, true, false, false, 10, 0, 2500000000.0, 7500, 125000, 'Fairy Godmother Wand', 'When equipped: Magic Resist +15%, Negate Effect Chance +15%');
    addArenaCraftWeapon(16, 1, 1, 500, 'Mining Tool', false, 317, 0, 7, 0, 21, 0, 0, 6, 400000000, 8, 510, 'Drop Rate', 'Boss Damage', '', 0, 7, true, true, true, false, false, 10, 1000000000, 50000000, 1337, 10000, 'Unobtainium Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Mining Tool', false, 317, 0, 7, 0, 20, 0, 0, 5, 400000000, 8, 500, 'Drop Rate', 'Boss Damage', '', 0, Infinity, true, false, true, false, false, 10, 1000000000, 50000000, 9001, 25000, 'Unobtainium Pickaxe', 'A pickaxe used for mining. You can only mine in some areas.');
    addArenaCraftWeapon('Title', 'Robotic');
    addArenaCraftWeapon(18, 5, 5, 120, 'Sword', false, 197, 175, 7, 0, 10, 0, 0, 10, 300000000, 0, 100, 'Random', 'Random', '', 0, Infinity, false, false, false, false, false, 0, 20000000000.0, 0, 10000, 100000, 'Bacon Sword', '3rd Edition');
    addArenaCraftWeapon('Title', '?????????????');
    addArenaCraftWeapon(19, 1, 1, 50, 'Sword', false, 330, 2500, 50, 0, 50, 250, 0, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, true, false, true, true, false, 60, 0, 0, 0, 0, 'Reincarnation Weapon', 'Also shoots projectiles at monsters from a far distance!');
    addArenaCraftWeapon('Title', 'Secondary Weapons');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 280, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, '', 'Poison Chance', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 45, 500000000, 100000000, 250, 10000, 'Poison Arrows', '<font color=\'#FFFF00\'>Can only be equipped with a Bow or Crossbow.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 281, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, '', 'Stun Chance', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 45, 500000000, 100000000, 250, 10000, 'Explosive Arrows', '<font color=\'#FFFF00\'>Can only be equipped with a Bow or Crossbow.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 282, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, '', 'Double Hit Chance', 'Attack Power', 50000000, Infinity, true, false, true, false, false, 45, 500000000, 100000000, 250, 10000, 'Mega Bullets', '<font color=\'#FFFF00\'>Can only be equipped with a Gun.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 283, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, '', 'Mastery', 'Attack Power', 50000000, Infinity, true, false, true, false, false, 45, 500000000, 100000000, 250, 10000, 'Master Shurikens', '<font color=\'#FFFF00\'>Can only be equipped with a Claw.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 351, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Fire Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Fire', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 352, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Ice Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Ice', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 353, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Wind Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Wind', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 354, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Earth Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Earth', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 355, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Thunder Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Thunder', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 356, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Water Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Water', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 357, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Light Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Light', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 358, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Dark Element', 'MP', 'Equipment Attack', 50000000, Infinity, true, false, true, false, false, 15, 500000000, 100000000, 250, 10000, 'Spell Scroll - Dark', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 284, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Fire Element', 'Poison Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Fire Card', 'Adds a special FIRE effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 285, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Ice Element', 'Stun Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Ice Card', 'Adds a special ICE effect (rapidly deal 200% damage and knock the monster back a 20% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 286, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Wind Element', 'Weaken Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Wind Card', 'Adds a special WIND effect (rapidly deal 200% damage and knock the monster back a 30% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 287, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Earth Element', 'Weaken Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Earth Card', 'Adds a special EARTH effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 288, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Thunder Element', 'Stun Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Thunder Card', 'Adds a special THUNDER effect (rapidly deal 150% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 289, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Water Element', 'Poison Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Water Card', 'Adds a special WATER effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 290, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Light Element', 'Blind Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Light Card', 'Adds a special LIGHT effect (rapidly deal 150% damage and knock the monster back a 20% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 291, 0, 0, 0, 0, 0, 0, -1, 100000, 0, 706, 'Dark Element', 'Blind Chance', '', 500000000, Infinity, true, false, true, false, false, 15, 5000000000.0, 1000000000, 2500, 100000, 'Dark Card', 'Adds a special DARK effect (rapidly deal 200% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon('Title', 'Secondary Weapons [+]');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 280, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, '', 'Poison Chance', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 45, 20000000000.0, 4000000000.0, 9999, 400000, 'Poison Arrows [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Bow or Crossbow.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 281, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, '', 'Stun Chance', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 45, 20000000000.0, 4000000000.0, 9999, 400000, 'Explosive Arrows [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Bow or Crossbow.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 282, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, '', 'Double Hit Chance', 'Attack Power', 2000000000, Infinity, true, false, true, false, false, 45, 20000000000.0, 4000000000.0, 9999, 400000, 'Mega Bullets [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Gun.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 283, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, '', 'Mastery', 'Attack Power', 2000000000, Infinity, true, false, true, false, false, 45, 20000000000.0, 4000000000.0, 9999, 400000, 'Master Shurikens [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Claw.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 351, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Fire Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Fire [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 352, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Ice Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Ice [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 353, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Wind Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Wind [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 354, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Earth Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Earth [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 355, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Thunder Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Thunder [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 356, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Water Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Water [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 357, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Light Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Light [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 200, 'Secondary Weapon', false, 358, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Dark Element', 'MP', 'Equipment Attack', 2000000000, Infinity, true, false, true, false, false, 15, 20000000000.0, 4000000000.0, 9999, 400000, 'Spell Scroll - Dark [+]', '<font color=\'#FFFF00\'>Can only be equipped with a Wand or Staff.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 284, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Fire Element', 'Poison Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Fire Card [+]', 'Adds a special FIRE effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 285, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Ice Element', 'Stun Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Ice Card [+]', 'Adds a special ICE effect (rapidly deal 200% damage and knock the monster back a 20% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 286, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Wind Element', 'Weaken Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Wind Card [+]', 'Adds a special WIND effect (rapidly deal 200% damage and knock the monster back a 30% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 287, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Earth Element', 'Weaken Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Earth Card [+]', 'Adds a special EARTH effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 288, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Thunder Element', 'Stun Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Thunder Card [+]', 'Adds a special THUNDER effect (rapidly deal 150% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 289, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Water Element', 'Poison Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Water Card [+]', 'Adds a special WATER effect (rapidly deal 300% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 290, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Light Element', 'Blind Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Light Card [+]', 'Adds a special LIGHT effect (rapidly deal 150% damage and knock the monster back a 20% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftWeapon(16, 1, 1, 500, 'Secondary Weapon', false, 291, 0, 0, 0, 0, 0, 0, -1, 2500000, 0, 706, 'Dark Element', 'Blind Chance', '', 20000000000.0, Infinity, true, false, true, false, false, 15, 200000000000.0, 40000000000.0, 99999, 4000000, 'Dark Card [+]', 'Adds a special DARK effect (rapidly deal 200% damage and knock the monster back a 10% distance) when you use Pixel Throw, Combo Strike or Overkill, allowing you to deal increased damage. Effect also has a 1% chance to activate with any other attack.\n\n<font color=\'#FFFF00\'>Can be equipped with any melee weapon, except Ultimate Weapon and Reincarnation Weapon.</font>\n\nThis item cannot be enhanced.');
    addArenaCraftArmor('Title', 'Newbie Items');
    addArenaCraftArmor(1, 1, 1, 1, 'Hat', 101, 0, 0, 10, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Hat', '');
    addArenaCraftArmor(1, 1, 1, 1, 'Shirt', 101, 0, 0, 10, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Shirt', '');
    addArenaCraftArmor(1, 1, 1, 1, 'Gloves', 101, 0, 0, 10, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Gloves', '');
    addArenaCraftArmor(1, 1, 1, 1, 'Pants', 101, 0, 0, 10, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Pants', '');
    addArenaCraftArmor(1, 1, 1, 1, 'Shoes', 101, 0, 0, 10, 10, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 0, 0, 'Newbie Shoes', '');
    addArenaCraftArmor('Title', 'Basic');
    addArenaCraftArmor('Title 2', 'Skin');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 2, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Pink Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 3, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Teal Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 4, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Green Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 5, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Red Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 6, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Black Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 7, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'White Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 10, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Purple Skin', '');
    addArenaCraftArmor(3, 1, 1, 50, 'Skin', 11, 0, 0, 25, 0, 0, 0, 1, 0, 7, 0, 'Random', 'Random', 'Random', 750000, Infinity, false, false, true, false, false, 0, 5000000, 0, 0, 25, 'Blue Skin', '');
    addArenaCraftArmor('Title 2', 'Armor Sets');
    addArenaCraftArmor(3, 1, 2, 10, 'Hat', 102, 2, 0, 20, 11, 0, 0, 1, 0, 0, 0, '', '', '', 50, Infinity, false, false, false, false, false, 0, 500, 0, 0, 0, 'Leather Hat', '');
    addArenaCraftArmor(3, 1, 2, 10, 'Shirt', 102, 2, 0, 30, 10, 0, 0, 1, 0, 0, 0, '', '', '', 50, Infinity, false, false, false, false, false, 0, 500, 0, 0, 0, 'Leather Shirt', '');
    addArenaCraftArmor(3, 1, 2, 10, 'Gloves', 102, 5, 0, 10, 11, 0, 0, 1, 0, 0, 0, '', '', '', 50, Infinity, false, false, false, false, false, 0, 500, 0, 0, 0, 'Leather Gloves', '');
    addArenaCraftArmor(3, 1, 2, 10, 'Pants', 102, 2, 0, 30, 10, 0, 0, 1, 0, 0, 0, '', '', '', 50, Infinity, false, false, false, false, false, 0, 500, 0, 0, 0, 'Leather Pants', '');
    addArenaCraftArmor(3, 1, 2, 10, 'Shoes', 102, 2, 1, 10, 10, 1, 0, 1, 0, 0, 0, '', '', '', 50, Infinity, false, false, false, false, false, 0, 500, 0, 0, 0, 'Leather Shoes', '');
    addArenaCraftArmor(3, 1, 2, 20, 'Hat', 103, 4, 0, 30, 12, 0, 0, 1, 0, 0, 0, '', '', '', 200, Infinity, false, false, false, false, false, 0, 2000, 0, 0, 0, 'Kongregate Hat', '');
    addArenaCraftArmor(3, 1, 2, 20, 'Shirt', 103, 4, 0, 45, 10, 0, 0, 1, 0, 0, 0, '', '', '', 200, Infinity, false, false, false, false, false, 0, 2000, 0, 0, 0, 'Kongregate Shirt', '');
    addArenaCraftArmor(3, 1, 2, 20, 'Gloves', 103, 10, 0, 15, 12, 0, 0, 1, 0, 0, 0, '', '', '', 200, Infinity, false, false, false, false, false, 0, 2000, 0, 0, 0, 'Kongregate Gloves', '');
    addArenaCraftArmor(3, 1, 2, 20, 'Pants', 103, 4, 0, 45, 10, 0, 0, 1, 0, 0, 0, '', '', '', 200, Infinity, false, false, false, false, false, 0, 2000, 0, 0, 0, 'Kongregate Pants', '');
    addArenaCraftArmor(3, 1, 2, 20, 'Shoes', 103, 4, 1, 15, 10, 2, 0, 1, 0, 0, 0, '', '', '', 200, Infinity, false, false, false, false, false, 0, 2000, 0, 0, 0, 'Kongregate Shoes', '');
    addArenaCraftArmor(3, 1, 2, 30, 'Hat', 104, 6, 0, 40, 13, 0, 0, 1, 0, 0, 0, '', '', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Lovely Hat', '');
    addArenaCraftArmor(3, 1, 2, 30, 'Shirt', 104, 6, 0, 60, 10, 0, 0, 1, 0, 0, 0, '', '', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Lovely Shirt', '');
    addArenaCraftArmor(3, 1, 2, 30, 'Gloves', 104, 15, 0, 20, 13, 0, 0, 1, 0, 0, 0, '', '', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Lovely Gloves', '');
    addArenaCraftArmor(3, 1, 2, 30, 'Pants', 104, 6, 0, 60, 10, 0, 0, 1, 0, 0, 0, '', '', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Lovely Pants', '');
    addArenaCraftArmor(3, 1, 2, 30, 'Shoes', 104, 6, 1, 20, 10, 3, 0, 1, 0, 0, 0, '', '', '', 1000, Infinity, false, false, false, false, false, 0, 10000, 0, 0, 0, 'Lovely Shoes', '');
    addArenaCraftArmor(3, 1, 3, 40, 'Hat', 105, 8, 0, 50, 14, 0, 0, 1, 0, 0, 0, '', '', '', 3000, Infinity, false, false, false, false, false, 0, 30000, 0, 0, 0, 'Red Hat', '');
    addArenaCraftArmor(3, 1, 3, 40, 'Shirt', 105, 8, 0, 75, 10, 0, 0, 1, 0, 0, 0, '', '', '', 3000, Infinity, false, false, false, false, false, 0, 30000, 0, 0, 0, 'Red Shirt', '');
    addArenaCraftArmor(3, 1, 3, 40, 'Gloves', 105, 20, 0, 25, 14, 0, 0, 1, 0, 0, 0, '', '', '', 3000, Infinity, false, false, false, false, false, 0, 30000, 0, 0, 0, 'Red Gloves', '');
    addArenaCraftArmor(3, 1, 3, 40, 'Pants', 105, 8, 0, 75, 10, 0, 0, 1, 0, 0, 0, '', '', '', 3000, Infinity, false, false, false, false, false, 0, 30000, 0, 0, 0, 'Red Pants', '');
    addArenaCraftArmor(3, 1, 3, 40, 'Shoes', 105, 8, 1, 25, 10, 4, 0, 1, 0, 0, 0, '', '', '', 3000, Infinity, false, false, false, false, false, 0, 30000, 0, 0, 0, 'Red Shoes', '');
    addArenaCraftArmor(3, 1, 3, 50, 'Hat', 106, 10, 0, 60, 15, 0, 0, 1, 0, 0, 0, '', '', '', 8000, Infinity, false, false, false, false, false, 0, 80000, 0, 0, 0, 'Knight Hat', '');
    addArenaCraftArmor(3, 1, 3, 50, 'Shirt', 106, 10, 0, 90, 10, 0, 0, 1, 0, 0, 0, '', '', '', 8000, Infinity, false, false, false, false, false, 0, 80000, 0, 0, 0, 'Knight Shirt', '');
    addArenaCraftArmor(3, 1, 3, 50, 'Gloves', 106, 25, 0, 30, 15, 0, 0, 1, 0, 0, 0, '', '', '', 8000, Infinity, false, false, false, false, false, 0, 80000, 0, 0, 0, 'Knight Gloves', '');
    addArenaCraftArmor(3, 1, 3, 50, 'Pants', 106, 10, 0, 90, 10, 0, 0, 1, 0, 0, 0, '', '', '', 8000, Infinity, false, false, false, false, false, 0, 80000, 0, 0, 0, 'Knight Pants', '');
    addArenaCraftArmor(3, 1, 3, 50, 'Shoes', 106, 10, 2, 30, 10, 5, 0, 1, 0, 0, 0, '', '', '', 8000, Infinity, false, false, false, false, false, 0, 80000, 0, 0, 0, 'Knight Shoes', '');
    addArenaCraftArmor(3, 1, 4, 60, 'Hat', 107, 12, 0, 70, 16, 0, 0, 1, 0, 0, 0, '', '', '', 20000, Infinity, false, false, false, false, false, 0, 200000, 0, 0, 1, 'Paladin Hat', '');
    addArenaCraftArmor(3, 1, 4, 60, 'Shirt', 107, 12, 0, 105, 10, 0, 0, 1, 0, 0, 0, '', '', '', 20000, Infinity, false, false, false, false, false, 0, 200000, 0, 0, 1, 'Paladin Shirt', '');
    addArenaCraftArmor(3, 1, 4, 60, 'Gloves', 107, 30, 0, 35, 16, 0, 0, 1, 0, 0, 0, '', '', '', 20000, Infinity, false, false, false, false, false, 0, 200000, 0, 0, 1, 'Paladin Gloves', '');
    addArenaCraftArmor(3, 1, 4, 60, 'Pants', 107, 12, 0, 105, 10, 0, 0, 1, 0, 0, 0, '', '', '', 20000, Infinity, false, false, false, false, false, 0, 200000, 0, 0, 1, 'Paladin Pants', '');
    addArenaCraftArmor(3, 1, 4, 60, 'Shoes', 107, 12, 2, 35, 10, 6, 0, 1, 0, 0, 0, '', '', '', 20000, Infinity, false, false, false, false, false, 0, 200000, 0, 0, 1, 'Paladin Shoes', '');
    addArenaCraftArmor(3, 1, 4, 70, 'Hat', 108, 14, 0, 80, 17, 0, 0, 1, 0, 0, 0, '', '', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 0, 0, 2, 'Executioner Hat', '');
    addArenaCraftArmor(3, 1, 4, 70, 'Shirt', 108, 14, 0, 120, 10, 0, 0, 1, 0, 0, 0, '', '', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 0, 0, 2, 'Executioner Shirt', '');
    addArenaCraftArmor(3, 1, 4, 70, 'Gloves', 108, 35, 0, 40, 17, 0, 0, 1, 0, 0, 0, '', '', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 0, 0, 2, 'Executioner Gloves', '');
    addArenaCraftArmor(3, 1, 4, 70, 'Pants', 108, 14, 0, 120, 10, 0, 0, 1, 0, 0, 0, '', '', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 0, 0, 2, 'Executioner Pants', '');
    addArenaCraftArmor(3, 1, 4, 70, 'Shoes', 108, 14, 2, 40, 10, 7, 0, 1, 0, 0, 0, '', '', '', 50000, Infinity, false, false, false, false, false, 0, 500000, 0, 0, 2, 'Executioner Shoes', '');
    addArenaCraftArmor(3, 1, 5, 80, 'Hat', 109, 16, 0, 100, 18, 0, 0, 1, 0, 0, 0, '', '', '', 120000, Infinity, false, false, false, false, false, 0, 1200000, 0, 0, 6, 'Dragonewyn Hat', '');
    addArenaCraftArmor(3, 1, 5, 80, 'Shirt', 109, 16, 0, 150, 10, 0, 0, 1, 0, 0, 0, '', '', '', 120000, Infinity, false, false, false, false, false, 0, 1200000, 0, 0, 6, 'Dragonewyn Shirt', '');
    addArenaCraftArmor(3, 1, 5, 80, 'Gloves', 109, 40, 0, 50, 18, 0, 0, 1, 0, 0, 0, '', '', '', 120000, Infinity, false, false, false, false, false, 0, 1200000, 0, 0, 6, 'Dragonewyn Gloves', '');
    addArenaCraftArmor(3, 1, 5, 80, 'Pants', 109, 16, 0, 150, 10, 0, 0, 1, 0, 0, 0, '', '', '', 120000, Infinity, false, false, false, false, false, 0, 1200000, 0, 0, 6, 'Dragonewyn Pants', '');
    addArenaCraftArmor(3, 1, 5, 80, 'Shoes', 109, 16, 2, 50, 10, 8, 0, 1, 0, 0, 0, '', '', '', 120000, Infinity, false, false, false, false, false, 0, 1200000, 0, 0, 6, 'Dragonewyn Shoes', '');
    addArenaCraftArmor(3, 1, 5, 90, 'Hat', 127, 18, 0, 150, 19, 0, 0, 3, 600000, 0, 0, '', '', '', 300000, Infinity, false, false, false, false, true, 0, 3000000, 0, 0, 15, 'Spirit Hat', '');
    addArenaCraftArmor(3, 1, 5, 90, 'Shirt', 127, 18, 0, 225, 10, 0, 0, 3, 600000, 0, 0, '', '', '', 300000, Infinity, false, false, false, false, true, 0, 3000000, 0, 0, 15, 'Spirit Shirt', '');
    addArenaCraftArmor(3, 1, 5, 90, 'Gloves', 127, 45, 0, 75, 19, 0, 0, 3, 600000, 0, 0, '', '', '', 300000, Infinity, false, false, false, false, true, 0, 3000000, 0, 0, 15, 'Spirit Gloves', '');
    addArenaCraftArmor(3, 1, 5, 90, 'Pants', 127, 18, 0, 225, 10, 0, 0, 3, 600000, 0, 0, '', '', '', 300000, Infinity, false, false, false, false, true, 0, 3000000, 0, 0, 15, 'Spirit Pants', '');
    addArenaCraftArmor(3, 1, 5, 90, 'Shoes', 127, 18, 2, 75, 10, 9, 0, 3, 600000, 0, 0, '', '', '', 300000, Infinity, false, false, false, false, true, 0, 3000000, 0, 0, 15, 'Spirit Shoes', '');
    addArenaCraftArmor(3, 2, 5, 100, 'Hat', 131, 20, 0, 200, 20, 0, 0, 9, 1337000, 0, 0, '', '', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Elite Hat', '');
    addArenaCraftArmor(3, 2, 5, 100, 'Shirt', 131, 20, 0, 300, 10, 0, 0, 9, 1337000, 0, 0, '', '', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Elite Shirt', '');
    addArenaCraftArmor(3, 2, 5, 100, 'Gloves', 131, 50, 0, 100, 20, 0, 0, 9, 1337000, 0, 0, '', '', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Elite Gloves', '');
    addArenaCraftArmor(3, 2, 5, 100, 'Pants', 131, 20, 0, 300, 10, 0, 0, 9, 1337000, 0, 0, '', '', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Elite Pants', '');
    addArenaCraftArmor(3, 2, 5, 100, 'Shoes', 131, 20, 3, 100, 10, 10, 0, 9, 1337000, 0, 0, '', '', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 0, 0, 30, 'Elite Shoes', '');
    addArenaCraftArmor('Title', '\'lrn2craft\'');
    addArenaCraftArmor(4, 1, 2, 8, 'Hat', 116, 3, 0, 20, 10, 0, 6, 1, 0, 0, 0, 'Reward', 'Mastery', '', 100, Infinity, false, false, false, false, false, 0, 1000, 100, 0, 0, 'Training Hat', '');
    addArenaCraftArmor(4, 1, 2, 8, 'Shirt', 116, 3, 0, 20, 11, 0, 0, 1, 0, 0, 0, 'Reward', 'Mastery', '', 100, Infinity, false, false, false, false, false, 0, 1000, 100, 0, 0, 'Training Shirt', '');
    addArenaCraftArmor(4, 1, 2, 8, 'Gloves', 116, 4, 0, 20, 11, 6, 0, 1, 0, 0, 0, 'Reward', 'Mastery', '', 100, Infinity, false, false, false, false, false, 0, 1000, 100, 0, 0, 'Training Gloves', '');
    addArenaCraftArmor(4, 1, 2, 8, 'Pants', 116, 3, 0, 20, 11, 0, 0, 1, 0, 0, 0, 'Reward', 'Mastery', '', 100, Infinity, false, false, false, false, false, 0, 1000, 100, 0, 0, 'Training Pants', '');
    addArenaCraftArmor(4, 1, 2, 8, 'Shoes', 116, 3, 1, 20, 10, 6, 0, 1, 0, 0, 0, 'Reward', 'Mastery', '', 100, Infinity, false, false, false, false, false, 0, 1000, 100, 0, 0, 'Training Shoes', '');
    addArenaCraftArmor(4, 1, 2, 38, 'Hat', 117, 5, 0, 50, 10, 0, 7, 1, 0, 0, 0, 'Reward', 'Accuracy', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Soldier Hat', '');
    addArenaCraftArmor(4, 1, 2, 38, 'Shirt', 117, 5, 0, 50, 12, 0, 0, 1, 0, 0, 0, 'Reward', 'Accuracy', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Soldier Shirt', '');
    addArenaCraftArmor(4, 1, 2, 38, 'Gloves', 117, 7, 0, 50, 12, 7, 0, 1, 0, 0, 0, 'Reward', 'Accuracy', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Soldier Gloves', '');
    addArenaCraftArmor(4, 1, 2, 38, 'Pants', 117, 5, 0, 50, 12, 0, 0, 1, 0, 0, 0, 'Reward', 'Accuracy', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Soldier Pants', '');
    addArenaCraftArmor(4, 1, 2, 38, 'Shoes', 117, 5, 1, 50, 10, 7, 0, 1, 0, 0, 0, 'Reward', 'Accuracy', '', 10000, Infinity, false, false, false, false, false, 0, 100000, 10000, 0, 1, 'Soldier Shoes', '');
    addArenaCraftArmor(4, 1, 3, 68, 'Hat', 118, 7, 0, 80, 10, 0, 8, 1, 0, 0, 0, 'Reward', 'HP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 60000, 0, 6, 'Stripper Nurse Hat', '');
    addArenaCraftArmor(4, 1, 3, 68, 'Shirt', 118, 7, 0, 80, 13, 0, 0, 1, 0, 0, 0, 'Reward', 'HP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 60000, 0, 6, 'Stripper Nurse Shirt', '');
    addArenaCraftArmor(4, 1, 3, 68, 'Gloves', 118, 10, 0, 80, 13, 8, 0, 1, 0, 0, 0, 'Reward', 'HP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 60000, 0, 6, 'Stripper Nurse Gloves', '');
    addArenaCraftArmor(4, 1, 3, 68, 'Pants', 118, 7, 0, 80, 13, 0, 0, 1, 0, 0, 0, 'Reward', 'HP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 60000, 0, 6, 'Stripper Nurse Pants', '');
    addArenaCraftArmor(4, 1, 3, 68, 'Shoes', 118, 7, 1, 80, 10, 8, 0, 1, 0, 0, 0, 'Reward', 'HP Regen', '', 60000, Infinity, false, false, false, false, false, 0, 600000, 60000, 0, 6, 'Stripper Nurse Shoes', '');
    addArenaCraftArmor(4, 2, 3, 88, 'Hat', 110, 9, 0, 110, 10, 0, 9, 1, 0, 0, 0, 'Reward', 'Evasion', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 150000, 1, 15, 'Enchanted Leather Hat', '');
    addArenaCraftArmor(4, 2, 3, 88, 'Shirt', 110, 9, 0, 110, 14, 0, 0, 1, 0, 0, 0, 'Reward', 'Evasion', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 150000, 1, 15, 'Enchanted Leather Shirt', '');
    addArenaCraftArmor(4, 2, 3, 88, 'Gloves', 110, 13, 0, 110, 14, 9, 0, 1, 0, 0, 0, 'Reward', 'Evasion', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 150000, 1, 15, 'Enchanted Leather Gloves', '');
    addArenaCraftArmor(4, 2, 3, 88, 'Pants', 110, 9, 0, 110, 14, 0, 0, 1, 0, 0, 0, 'Reward', 'Evasion', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 150000, 1, 15, 'Enchanted Leather Pants', '');
    addArenaCraftArmor(4, 2, 3, 88, 'Shoes', 110, 9, 2, 110, 10, 9, 0, 1, 0, 0, 0, 'Reward', 'Evasion', '', 150000, Infinity, false, false, false, false, false, 0, 1500000, 150000, 1, 15, 'Enchanted Leather Shoes', '');
    addArenaCraftArmor(4, 2, 4, 108, 'Hat', 111, 11, 0, 140, 10, 0, 10, 1, 0, 0, 0, 'Reward', 'Blind Chance', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Golden Hat', '');
    addArenaCraftArmor(4, 2, 4, 108, 'Shirt', 111, 11, 0, 140, 15, 0, 0, 1, 0, 0, 0, 'Reward', 'Blind Chance', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Golden Shirt', '');
    addArenaCraftArmor(4, 2, 4, 108, 'Gloves', 111, 16, 0, 140, 15, 10, 0, 1, 0, 0, 0, 'Reward', 'Blind Chance', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Golden Gloves', '');
    addArenaCraftArmor(4, 2, 4, 108, 'Pants', 111, 11, 0, 140, 15, 0, 0, 1, 0, 0, 0, 'Reward', 'Blind Chance', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Golden Pants', '');
    addArenaCraftArmor(4, 2, 4, 108, 'Shoes', 111, 11, 2, 140, 10, 10, 0, 1, 0, 0, 0, 'Reward', 'Blind Chance', '', 300000, Infinity, false, false, false, false, false, 0, 3000000, 300000, 2, 30, 'Golden Shoes', '');
    addArenaCraftArmor(4, 3, 4, 128, 'Hat', 112, 13, 0, 170, 10, 0, 11, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Regeneration Hat', '');
    addArenaCraftArmor(4, 3, 4, 128, 'Shirt', 112, 13, 0, 170, 16, 0, 0, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Regeneration Shirt', '');
    addArenaCraftArmor(4, 3, 4, 128, 'Gloves', 112, 19, 0, 170, 16, 11, 0, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Regeneration Gloves', '');
    addArenaCraftArmor(4, 3, 4, 128, 'Pants', 112, 13, 0, 170, 16, 0, 0, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Regeneration Pants', '');
    addArenaCraftArmor(4, 3, 4, 128, 'Shoes', 112, 13, 2, 170, 10, 11, 0, 1, 0, 0, 0, 'Reward', 'MP Regen', '', 600000, Infinity, false, false, false, false, false, 0, 6000000, 600000, 5, 60, 'Regeneration Shoes', '');
    addArenaCraftArmor(4, 3, 5, 148, 'Hat', 113, 15, 0, 200, 10, 0, 12, 1, 0, 0, 0, 'Reward', 'Critical Chance', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Berserker Hat', '');
    addArenaCraftArmor(4, 3, 5, 148, 'Shirt', 113, 15, 0, 200, 17, 0, 0, 1, 0, 0, 0, 'Reward', 'Critical Chance', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Berserker Shirt', '');
    addArenaCraftArmor(4, 3, 5, 148, 'Gloves', 113, 22, 0, 200, 17, 12, 0, 1, 0, 0, 0, 'Reward', 'Critical Chance', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Berserker Gloves', '');
    addArenaCraftArmor(4, 3, 5, 148, 'Pants', 113, 15, 0, 200, 17, 0, 0, 1, 0, 0, 0, 'Reward', 'Critical Chance', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Berserker Pants', '');
    addArenaCraftArmor(4, 3, 5, 148, 'Shoes', 113, 15, 2, 200, 10, 12, 0, 1, 0, 0, 0, 'Reward', 'Critical Chance', '', 4000000, Infinity, false, false, false, false, false, 0, 40000000, 4000000, 40, 400, 'Berserker Shoes', '');
    addArenaCraftArmor(4, 4, 5, 168, 'Hat', 114, 17, 0, 250, 10, 0, 15, 5, 1000000, 0, 0, 'Reward', 'Defense', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Defensive Hat', '');
    addArenaCraftArmor(4, 4, 5, 168, 'Shirt', 114, 17, 0, 250, 20, 0, 0, 5, 1000000, 0, 0, 'Reward', 'Defense', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Defensive Shirt', '');
    addArenaCraftArmor(4, 4, 5, 168, 'Gloves', 114, 25, 0, 250, 20, 13, 0, 5, 1000000, 0, 0, 'Reward', 'Defense', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Defensive Gloves', '');
    addArenaCraftArmor(4, 4, 5, 168, 'Pants', 114, 17, 0, 250, 20, 0, 0, 5, 1000000, 0, 0, 'Reward', 'Defense', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Defensive Pants', '');
    addArenaCraftArmor(4, 4, 5, 168, 'Shoes', 114, 17, 2, 250, 10, 15, 0, 5, 1000000, 0, 0, 'Reward', 'Defense', '', 8000000, Infinity, false, false, false, false, false, 0, 80000000, 8000000, 80, 800, 'Defensive Shoes', '');
    addArenaCraftArmor(4, 4, 5, 188, 'Hat', 119, 19, 0, 300, 10, 0, 20, 10, 3000000, 0, 0, 'Dark Element', 'Autosteal', '', 14000000, Infinity, false, false, false, false, false, 0, 140000000, 14000000, 140, 1400, 'Pure Darkness Hat', '');
    addArenaCraftArmor(4, 4, 5, 188, 'Shirt', 119, 19, 0, 300, 25, 0, 0, 10, 3000000, 0, 0, 'Dark Element', 'Autosteal', '', 14000000, Infinity, false, false, false, false, false, 0, 140000000, 14000000, 140, 1400, 'Pure Darkness Shirt', '');
    addArenaCraftArmor(4, 4, 5, 188, 'Gloves', 119, 28, 0, 300, 25, 14, 0, 10, 3000000, 0, 0, 'Dark Element', 'Autosteal', '', 14000000, Infinity, false, false, false, false, false, 0, 140000000, 14000000, 140, 1400, 'Pure Darkness Gloves', '');
    addArenaCraftArmor(4, 4, 5, 188, 'Pants', 119, 19, 0, 300, 25, 0, 0, 10, 3000000, 0, 0, 'Dark Element', 'Autosteal', '', 14000000, Infinity, false, false, false, false, false, 0, 140000000, 14000000, 140, 1400, 'Pure Darkness Pants', '');
    addArenaCraftArmor(4, 4, 5, 188, 'Shoes', 119, 19, 3, 300, 10, 20, 0, 10, 3000000, 0, 0, 'Dark Element', 'Autosteal', '', 14000000, Infinity, false, false, false, false, false, 0, 140000000, 14000000, 140, 1400, 'Pure Darkness Shoes', '');
    addArenaCraftArmor(4, 5, 5, 208, 'Hat', 132, 21, 1, 400, 10, 0, 30, 21, 10000000, 0, 0, 'Rare Monster Rate', 'Poison Damage', 'Equipment Attack', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 400, 3000, 'Crimson Hat', '');
    addArenaCraftArmor(4, 5, 5, 208, 'Shirt', 132, 21, 1, 400, 35, 0, 0, 21, 10000000, 0, 0, 'Rare Monster Rate', 'Poison Damage', 'Equipment Attack', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 400, 3000, 'Crimson Shirt', '');
    addArenaCraftArmor(4, 5, 5, 208, 'Gloves', 132, 31, 1, 400, 35, 15, 0, 21, 10000000, 0, 0, 'Rare Monster Rate', 'Poison Damage', 'Equipment Attack', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 400, 3000, 'Crimson Gloves', '');
    addArenaCraftArmor(4, 5, 5, 208, 'Pants', 132, 21, 1, 400, 35, 0, 0, 21, 10000000, 0, 0, 'Rare Monster Rate', 'Poison Damage', 'Equipment Attack', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 400, 3000, 'Crimson Pants', '');
    addArenaCraftArmor(4, 5, 5, 208, 'Shoes', 132, 21, 4, 400, 10, 30, 0, 21, 10000000, 0, 0, 'Rare Monster Rate', 'Poison Damage', 'Equipment Attack', 30000000, Infinity, false, false, false, false, false, 0, 300000000, 30000000, 400, 3000, 'Crimson Shoes', '');
    addArenaCraftArmor(4, 5, 5, 218, 'Hat', 150, 23, 2, 550, 10, 0, 50, 42, 30000000, 0, 0, 'Rare Monster Rate', 'Weaken Effect', 'Attack Power', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 600, 5000, 'Knightmare Hat', '');
    addArenaCraftArmor(4, 5, 5, 218, 'Shirt', 150, 23, 2, 550, 50, 0, 0, 42, 30000000, 0, 0, 'Rare Monster Rate', 'Weaken Effect', 'Attack Power', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 600, 5000, 'Knightmare Shirt', '');
    addArenaCraftArmor(4, 5, 5, 218, 'Gloves', 150, 34, 2, 550, 50, 16, 0, 42, 30000000, 0, 0, 'Rare Monster Rate', 'Weaken Effect', 'Attack Power', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 600, 5000, 'Knightmare Gloves', '');
    addArenaCraftArmor(4, 5, 5, 218, 'Pants', 150, 23, 2, 550, 50, 0, 0, 42, 30000000, 0, 0, 'Rare Monster Rate', 'Weaken Effect', 'Attack Power', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 600, 5000, 'Knightmare Pants', '');
    addArenaCraftArmor(4, 5, 5, 218, 'Shoes', 150, 23, 5, 550, 10, 50, 0, 42, 30000000, 0, 0, 'Rare Monster Rate', 'Weaken Effect', 'Attack Power', 50000000, Infinity, false, false, false, false, false, 0, 500000000, 50000000, 600, 5000, 'Knightmare Shoes', '');
    addArenaCraftArmor(4, 5, 1, 238, 'Hat', 164, 25, 3, 750, 10, 0, 70, 84, 90000000, -2, 0, 'Epic Monster Rate', 'Blind Effect', 'MaxHP', 120000000, Infinity, false, false, true, false, false, 0, 1200000000, 120000000, 2000, 12000, 'Humblebee Hat', '');
    addArenaCraftArmor(4, 5, 1, 238, 'Shirt', 164, 25, 3, 750, 70, 0, 0, 84, 90000000, -2, 0, 'Epic Monster Rate', 'Blind Effect', 'MaxHP', 120000000, Infinity, false, false, true, false, false, 0, 1200000000, 120000000, 2000, 12000, 'Humblebee Shirt', '');
    addArenaCraftArmor(4, 5, 1, 238, 'Gloves', 164, 37, 3, 750, 70, 17, 0, 84, 90000000, -2, 0, 'Epic Monster Rate', 'Blind Effect', 'MaxHP', 120000000, Infinity, false, false, true, false, false, 0, 1200000000, 120000000, 2000, 12000, 'Humblebee Gloves', '');
    addArenaCraftArmor(4, 5, 1, 238, 'Pants', 164, 25, 3, 750, 70, 0, 0, 84, 90000000, -2, 0, 'Epic Monster Rate', 'Blind Effect', 'MaxHP', 120000000, Infinity, false, false, true, false, false, 0, 1200000000, 120000000, 2000, 12000, 'Humblebee Pants', '');
    addArenaCraftArmor(4, 5, 1, 238, 'Shoes', 164, 25, 6, 750, 10, 70, 0, 84, 90000000, -2, 0, 'Epic Monster Rate', 'Blind Effect', 'MaxHP', 120000000, Infinity, false, false, true, false, false, 0, 1200000000, 120000000, 2000, 12000, 'Humblebee Shoes', '');
    addArenaCraftArmor(4, 5, 1, 248, 'Hat', 165, 157, 7, 1500, 70, 60, 160, 1, 0, 10, 0, 'Epic Monster Rate', 'Max Spirit', 'MaxHP', 160000000, Infinity, false, false, true, false, true, 5, 1600000000, 160000000, 3000, 16000, 'Ghost Hat', '');
    addArenaCraftArmor(4, 5, 1, 248, 'Shirt', 165, 157, 7, 1500, 160, 60, 60, 1, 0, 10, 0, 'Epic Monster Rate', 'Max Spirit', 'MaxHP', 160000000, Infinity, false, false, true, false, true, 5, 1600000000, 160000000, 3000, 16000, 'Ghost Shirt', '');
    addArenaCraftArmor(4, 5, 1, 248, 'Gloves', 165, 170, 7, 1500, 160, 78, 60, 1, 0, 10, 0, 'Epic Monster Rate', 'Max Spirit', 'MaxHP', 160000000, Infinity, false, false, true, false, true, 5, 1600000000, 160000000, 3000, 16000, 'Ghost Gloves', '');
    addArenaCraftArmor(4, 5, 1, 248, 'Pants', 165, 157, 7, 1500, 160, 60, 60, 1, 0, 10, 0, 'Epic Monster Rate', 'Max Spirit', 'MaxHP', 160000000, Infinity, false, false, true, false, true, 5, 1600000000, 160000000, 3000, 16000, 'Ghost Pants', '');
    addArenaCraftArmor(4, 5, 1, 248, 'Shoes', 165, 157, 10, 1500, 70, 160, 60, 1, 0, 10, 0, 'Epic Monster Rate', 'Max Spirit', 'MaxHP', 160000000, Infinity, false, false, true, false, true, 5, 1600000000, 160000000, 3000, 16000, 'Ghost Shoes', '');
    addArenaCraftArmor('Title', 'Secret');
    addArenaCraftArmor(5, 4, 2, 70, 'Hat', 136, 0, 0, 0, 0, 0, 100, 1, 0, -4, 100, '', '', 'Random', 0, Infinity, false, false, true, false, false, 5, 0, 0, 500, 500, 'Elm Hat', '');
    addArenaCraftArmor(5, 4, 2, 70, 'Shirt', 136, 0, 0, 0, 0, 100, 0, 1, 0, -4, 100, '', '', 'Random', 0, Infinity, false, false, true, false, false, 5, 0, 0, 500, 500, 'Elm Shirt', '');
    addArenaCraftArmor(5, 4, 2, 70, 'Gloves', 136, 0, 0, 0, 100, 0, 0, 1, 0, -4, 100, '', '', 'Random', 0, Infinity, false, false, true, false, false, 5, 0, 0, 500, 500, 'Elm Gloves', '');
    addArenaCraftArmor(5, 4, 2, 70, 'Pants', 136, 0, 0, 0, 0, 100, 0, 1, 0, -4, 100, '', '', 'Random', 0, Infinity, false, false, true, false, false, 5, 0, 0, 500, 500, 'Elm Pants', '');
    addArenaCraftArmor(5, 4, 2, 70, 'Shoes', 136, 0, 10, 0, 0, 50, 0, 1, 0, -4, 100, '', '', 'Random', 0, Infinity, false, false, true, false, false, 5, 0, 0, 500, 500, 'Elm Shoes', '');
    addArenaCraftArmor(5, 5, 5, 500, 'Hat', 126, 0, 0, 0, 0, 0, 0, 1, 0, 5, 100, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 5000, 5000, 'Emperor\'s Hat', '');
    addArenaCraftArmor(5, 5, 5, 500, 'Shirt', 126, 0, 0, 0, 0, 0, 0, 1, 0, 5, 100, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 5000, 5000, 'Emperor\'s Shirt', '');
    addArenaCraftArmor(5, 5, 5, 500, 'Gloves', 126, 0, 0, 0, 0, 0, 0, 1, 0, 5, 100, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 5000, 5000, 'Emperor\'s Gloves', '');
    addArenaCraftArmor(5, 5, 5, 500, 'Pants', 126, 0, 0, 0, 0, 0, 0, 1, 0, 5, 100, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 5000, 5000, 'Emperor\'s Pants', '');
    addArenaCraftArmor(5, 5, 5, 500, 'Shoes', 126, 0, 0, 0, 0, 0, 0, 1, 0, 5, 100, '', '', '', 0, Infinity, false, false, false, false, false, 0, 0, 0, 5000, 5000, 'Emperor\'s Shoes', '');
    addArenaCraftArmor('Title', 'Chuck Norris');
    addArenaCraftArmor(10, 2, 5, 222, 'Hat', 120, 150, 1, 75, 30, 0, 60, 22, 22000000, 0, 100, 'Random', 'Random', '', 60000000, 60, false, true, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Chuck Norris Hat', '');
    addArenaCraftArmor(10, 2, 5, 222, 'Shirt', 120, 150, 1, 50, 45, 30, 30, 22, 22000000, 0, 100, 'Random', 'Random', '', 60000000, 60, false, true, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Chuck Norris Shirt', '');
    addArenaCraftArmor(10, 2, 5, 222, 'Gloves', 120, 200, 1, 30, 75, 0, 30, 22, 22000000, 0, 100, 'Random', 'Random', '', 60000000, 60, false, true, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Chuck Norris Gloves', '');
    addArenaCraftArmor(10, 2, 5, 222, 'Pants', 120, 150, 1, 50, 45, 30, 30, 22, 22000000, 0, 100, 'Random', 'Random', '', 60000000, 60, false, true, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Chuck Norris Pants', '');
    addArenaCraftArmor(10, 2, 5, 222, 'Shoes', 120, 150, 4, 30, 30, 75, 30, 22, 22000000, 0, 100, 'Random', 'Random', '', 60000000, 60, false, true, false, false, false, 0, 600000000, 60000000, 600, 6000, 'Chuck Norris Shoes', '');
    addArenaCraftArmor('Title', 'Alien');
    addArenaCraftArmor('Title 2', 'Set #1');
    addArenaCraftArmor(12, 2, 5, 70, 'Hat', 121, 30, 1, 250, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Hat #1', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shirt', 121, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shirt #1', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Gloves', 121, 80, 1, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Gloves #1', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Pants', 121, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Pants #1', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shoes', 121, 30, 4, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shoes #1', '');
    addArenaCraftArmor('Title 2', 'Set #2');
    addArenaCraftArmor(12, 2, 5, 70, 'Hat', 122, 30, 1, 250, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Defense', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Hat #2', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shirt', 122, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Defense', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shirt #2', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Gloves', 122, 80, 1, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Defense', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Gloves #2', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Pants', 122, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Defense', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Pants #2', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shoes', 122, 30, 4, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Defense', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shoes #2', '');
    addArenaCraftArmor('Title 2', 'Set #3');
    addArenaCraftArmor(12, 2, 5, 70, 'Hat', 123, 30, 1, 250, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'HP', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Hat #3', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shirt', 123, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'HP', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shirt #3', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Gloves', 123, 80, 1, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'HP', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Gloves #3', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Pants', 123, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'HP', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Pants #3', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shoes', 123, 30, 4, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'HP', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shoes #3', '');
    addArenaCraftArmor('Title 2', 'Set #4');
    addArenaCraftArmor(12, 2, 5, 70, 'Hat', 124, 30, 1, 250, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack Speed', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Hat #4', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shirt', 124, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack Speed', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shirt #4', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Gloves', 124, 80, 1, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack Speed', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Gloves #4', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Pants', 124, 30, 1, 280, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack Speed', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Pants #4', '');
    addArenaCraftArmor(12, 2, 5, 70, 'Shoes', 124, 30, 4, 190, 10, 10, 0, 10, 1200000, 0, 100, 'Random', 'Attack Speed', '', 5000000, 14, false, true, false, false, false, 0, 50000000, 5000000, 5, 250, 'Alien Shoes #4', '');
    addArenaCraftArmor('Title', 'Elite Alien');
    addArenaCraftArmor('Title 2', 'Set #1');
    addArenaCraftArmor(14, 2, 5, 270, 'Hat', 121, 70, 1, 365, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Boss Damage', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Hat #1', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shirt', 121, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Attack', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shirt #1', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Gloves', 121, 130, 1, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Attack', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Gloves #1', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Pants', 121, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Attack', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Pants #1', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shoes', 121, 70, 4, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Attack', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shoes #1', '');
    addArenaCraftArmor('Title 2', 'Set #2');
    addArenaCraftArmor(14, 2, 5, 270, 'Hat', 122, 70, 1, 365, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Magic Resist', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Hat #2', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shirt', 122, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Negate Effect', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shirt #2', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Gloves', 122, 130, 1, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Negate Effect', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Gloves #2', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Pants', 122, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Negate Effect', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Pants #2', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shoes', 122, 70, 4, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Negate Effect', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shoes #2', '');
    addArenaCraftArmor('Title 2', 'Set #3');
    addArenaCraftArmor(14, 2, 5, 270, 'Hat', 123, 70, 1, 365, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Weaken Effect', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Hat #3', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shirt', 123, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Potion Efficiency', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shirt #3', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Gloves', 123, 130, 1, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Potion Efficiency', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Gloves #3', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Pants', 123, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Potion Efficiency', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Pants #3', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shoes', 123, 70, 4, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Potion Efficiency', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shoes #3', '');
    addArenaCraftArmor('Title 2', 'Set #4');
    addArenaCraftArmor(14, 2, 5, 270, 'Hat', 124, 70, 1, 369, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Instant Kill', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Hat #4', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shirt', 124, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Speed', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shirt #4', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Gloves', 124, 130, 1, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Speed', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Gloves #4', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Pants', 124, 70, 1, 395, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Speed', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Pants #4', '');
    addArenaCraftArmor(14, 2, 5, 270, 'Shoes', 124, 70, 4, 305, 10, 20, 20, 10, 6000000, 0, 100, 'Random', 'Rage Speed', '', 50000000, 14, false, true, false, false, false, 5, 500000000, 50000000, 25, 2500, 'Elite Alien Shoes #4', '');
    addArenaCraftArmor('Title', 'Chaotic Items');
    addArenaCraftArmor(15, 1, 2, 500, 'Hat', 138, 0, 0, 0, 0, 0, 50, 6, 70000000, 6, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Defense', 4000000000.0, Infinity, false, false, true, true, false, 20, 40000000000.0, 4000000000.0, 4000, 400000, 'Meteoric Hat', '');
    addArenaCraftArmor(15, 1, 2, 500, 'Shirt', 138, 0, 0, 50, 0, 0, 0, 6, 70000000, 6, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Defense', 4000000000.0, Infinity, false, false, true, true, false, 20, 40000000000.0, 4000000000.0, 4000, 400000, 'Meteoric Shirt', '');
    addArenaCraftArmor(15, 1, 2, 500, 'Gloves', 138, 0, 2, 0, 10, 0, 0, 6, 70000000, 6, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Defense', 4000000000.0, Infinity, false, false, true, true, false, 20, 40000000000.0, 4000000000.0, 4000, 400000, 'Meteoric Gloves', '');
    addArenaCraftArmor(15, 1, 2, 500, 'Pants', 138, 0, 0, 50, 0, 0, 0, 6, 70000000, 6, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Defense', 4000000000.0, Infinity, false, false, true, true, false, 20, 40000000000.0, 4000000000.0, 4000, 400000, 'Meteoric Pants', '');
    addArenaCraftArmor(15, 1, 2, 500, 'Shoes', 138, 0, 2, 0, 0, 10, 0, 6, 70000000, 6, 0, 'Epic Monster Rate', 'Poison Damage', 'Equipment Defense', 4000000000.0, Infinity, false, false, true, true, false, 20, 40000000000.0, 4000000000.0, 4000, 400000, 'Meteoric Shoes', '');
    addArenaCraftArmor('Title', 'Robotic');
    addArenaCraftArmor(18, 3, 3, 275, 'Hat', 168, 0, 0, 4200, 0, 0, 0, 1, 0, 0, 100, 'Spawn Rate', 'Damage Taken', 'Defense Power', 0, Infinity, false, false, true, false, false, 0, 0, 1000000000, 5000, 10000, 'Companion Cube Hat', '');
    addArenaCraftArmor(18, 3, 3, 275, 'Shirt', 168, 0, 0, 5100, 0, 0, 0, 1, 0, 0, 100, 'Spawn Rate', 'Damage Taken', 'Defense Power', 0, Infinity, false, false, true, false, false, 0, 0, 1000000000, 5000, 10000, 'Companion Cube Shirt', '');
    addArenaCraftArmor(18, 3, 3, 275, 'Gloves', 168, 0, 0, 3300, 0, 0, 0, 1, 0, 0, 100, 'Spawn Rate', 'Damage Taken', 'Defense Power', 0, Infinity, false, false, true, false, false, 0, 0, 1000000000, 5000, 10000, 'Companion Cube Gloves', '');
    addArenaCraftArmor(18, 3, 3, 275, 'Pants', 168, 0, 0, 5100, 0, 0, 0, 1, 0, 0, 100, 'Spawn Rate', 'Damage Taken', 'Defense Power', 0, Infinity, false, false, true, false, false, 0, 0, 1000000000, 5000, 10000, 'Companion Cube Pants', '');
    addArenaCraftArmor(18, 3, 3, 275, 'Shoes', 168, 0, 0, 3300, 0, 0, 0, 1, 0, 0, 100, 'Spawn Rate', 'Damage Taken', 'Defense Power', 0, Infinity, false, false, true, false, false, 0, 0, 1000000000, 5000, 10000, 'Companion Cube Shoes', '');
    addArenaCraftArmor('Title', '?????????????');
    addArenaCraftArmor(19, 1, 1, 50, 'Hat', 141, 200, 5, 1000, 0, 0, 250, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, false, false, true, true, false, 20, 0, 0, 0, 0, 'Reincarnation Hat', '');
    addArenaCraftArmor(19, 1, 1, 50, 'Shirt', 141, 200, 5, 1000, 0, 125, 0, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, false, false, true, true, false, 20, 0, 0, 0, 0, 'Reincarnation Shirt', '');
    addArenaCraftArmor(19, 1, 1, 50, 'Gloves', 147, 200, 5, 1000, 250, 0, 0, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, false, false, true, true, false, 20, 0, 0, 0, 0, 'Reincarnation Gloves', '');
    addArenaCraftArmor(19, 1, 1, 50, 'Pants', 141, 200, 5, 1000, 0, 125, 0, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, false, false, true, true, false, 20, 0, 0, 0, 0, 'Reincarnation Pants', '');
    addArenaCraftArmor(19, 1, 1, 50, 'Shoes', 141, 200, 20, 1000, 0, 0, 0, 1, 0, 10, 4200, 'Random', 'Random', 'Random', 0, Infinity, false, false, true, true, false, 20, 0, 0, 0, 0, 'Reincarnation Shoes', '');
    addArenaCraftAccessory('Title', '\'lrn2craft\'');
    addArenaCraftAccessory('Title 2', 'Pendant');
    addArenaCraftAccessory(4, 1, 1, 30, 'Pendant', 20, 0, 0, 0, 0, 0, 0, 1, 0, 10, 706, '', '', '', 25000, Infinity, true, false, false, false, 0, 0, 400000000, 0, 10000, 'Collector\'s Pendant', 'Equip this pendant, and you will be able to find special equipment items from monsters!');
    addArenaCraftAccessory(4, 1, 1, 120, 'Pendant', 1, 40, 2, 0, 5, 5, 5, 26, 360000, 10, 1, 'Random', 'Random', '', 100000, Infinity, false, false, false, false, 0, 0, 200000, 100, 100, 'Bronze Pendant', 'A pendant crafted with skill. Unlike looted pendants, this one has improved stats, lasts permanently and levels up three times as fast.');
    addArenaCraftAccessory(4, 2, 1, 180, 'Pendant', 2, 90, 3, 0, 15, 15, 15, 34, 1960000, 10, 1, 'Random', 'Random', '', 250000, Infinity, false, false, false, false, 0, 0, 1000000, 500, 500, 'Silver Pendant', 'A pendant crafted with skill. Unlike looted pendants, this one has improved stats, lasts permanently and levels up three times as fast.');
    addArenaCraftAccessory(4, 3, 1, 250, 'Pendant', 3, 140, 4, 0, 25, 25, 25, 42, 5760000, 10, 1, 'Random', 'Random', '', 500000, Infinity, false, false, false, false, 0, 0, 5000000, 2500, 2500, 'Gold Pendant', 'A pendant crafted with skill. Unlike looted pendants, this one has improved stats, lasts permanently and levels up three times as fast.');
    addArenaCraftAccessory(4, 4, 1, 350, 'Pendant', 4, 190, 5, 0, 35, 35, 35, 50, 12960000, 10, 1, 'Random', 'Random', '', 1000000, Infinity, false, false, false, false, 0, 0, 25000000, 10000, 10000, 'Platinum Pendant', 'A pendant crafted with skill. Unlike looted pendants, this one has improved stats, lasts permanently and levels up three times as fast.');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 9, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Fire Element', 'Poison Chance', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Fire', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 10, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Ice Element', 'Stun Chance', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Ice', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 11, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Wind Element', 'Weaken Chance', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Wind', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 12, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Earth Element', 'Weaken Effect', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Earth', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 13, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Thunder Element', 'Stun Chance', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Thunder', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 14, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Water Element', 'Poison Damage', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Water', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 15, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Light Element', 'Blind Effect', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Light', '');
    addArenaCraftAccessory(4, 2, 5, 500, 'Pendant', 16, 0, 2, 0, 0, 0, 0, 1, 0, 10, 456, 'Dark Element', 'Blind Chance', '', 5000000, Infinity, true, false, false, false, 0, 0, 200000000, 1000, 10000, 'Pendant of Darkness', '');
    addArenaCraftAccessory(4, 5, 5, 1, 'Pendant', 8, 0, 0, 0, 0, 0, 0, 1, 0, 10, 706, '', '', '', 0, Infinity, true, false, false, false, 0, 0, 400000000, 0, 10000, 'Cursed Pendant', '');
    addArenaCraftAccessory(4, 5, 5, 250, 'Pendant', 8, 0, 0, 0, 0, 0, 0, 1, 0, 10, 706, '', '', '', 0, Infinity, true, false, false, false, 0, 0, 400000000, 0, 10000, 'Anti-Checkpoint Pendant', 'This pendant allows you to ignore checkpoints in Spooky Crypt.');
    addArenaCraftAccessory('Title 2', 'Earring');
    addArenaCraftAccessory(4, 1, 1, 30, 'Earring', 3, 0, 0, 0, 0, 0, 0, 15, 1000000, 10, 150, '', 'Potion Efficiency', '', 200000, Infinity, false, false, false, false, 0, 0, 2000000, 100, 1000, 'Crappy Earrings', '');
    addArenaCraftAccessory(4, 5, 5, 70, 'Earring', 10, 0, 0, 0, 0, 0, 0, 30, 10000000, 0, 0, '', 'Potion Efficiency', '', 20000000, 14, false, true, false, false, 0, 0, 200000000, 10000, 100000, 'Awesome Earrings', '');
    addArenaCraftAccessory('Title 2', 'Trinket');
    addArenaCraftAccessory(4, 1, 1, 400, 'Trinket', 7, 0, 0, 0, 0, 0, 0, 500, 25000, 0, 1, 'Random', 'Random', 'Random', 25000000, Infinity, false, false, false, false, 10, 0, 1000000000, 75000, 100000, 'Gem of Constancy', 'This gem gets more and more powerful as you fight with it equipped, but whenever you unequip it, it goes back to its original state. Also, you cannot change equipment when Gem of Constancy is equipped!');
    addArenaCraftAccessory(4, 1, 1, 400, 'Trinket', 10, 0, 0, 0, 0, 0, 0, 500, 250000, 0, 1, '', 'Damage', 'Attack Power', 500000000, Infinity, true, false, false, false, 10, 5000000000.0, 500000000, 50000, 100000, 'Empowering Gem', 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!');
    addArenaCraftAccessory(4, 1, 1, 400, 'Trinket', 13, 0, 0, 0, 0, 0, 0, 500, 1000000, 0, 1, 'Spawn Rate', '', '', 500000000, Infinity, true, false, false, false, 10, 5000000000.0, 500000000, 50000, 100000, 'Worst Moon Gem', 'This gem allows you to enter Worst Moon state. The gem does not look like what you expect it to, but it still does the job. Combine with Invisible X ally to enter Apocalypse mode!');
    addArenaCraftAccessory(4, 1, 1, 400, 'Trinket', 15, 0, 0, 0, 0, 0, 0, 500, 250000, 0, 1, '', 'Buff Effect', 'MaxHP', 500000000, Infinity, true, false, false, false, 10, 5000000000.0, 500000000, 50000, 100000, 'Auto Buff Gem', 'When you equip this gem, you will receive random buffs if you don\'t already have one! You can also cancel your current buff to receive a new one.\n\nPossible buffs: Power, Master, Reward, Enrage, Elemental Boost');
    addArenaCraftAccessory('Title', 'Unobtainium');
    addArenaCraftAccessory('Title 2', 'Pendant');
    addArenaCraftAccessory(16, 1, 1, 500, 'Pendant', 17, 240, 6, 0, 45, 45, 45, 58, 25000000, 10, 1, 'Random', 'Random', '', 5000000, Infinity, false, false, false, false, 5, 0, 100000000, 5000, 100000, 'Unobtainium Pendant', 'A pendant crafted with skill. Unlike looted pendants, this one has improved stats, lasts permanently and levels up three times as fast.');
    addArenaCraftAccessory('Title 2', 'Trinket');
    addArenaCraftAccessory(16, 1, 1, 400, 'Trinket', 6, 0, 0, 0, 0, 0, 0, 500, 250000, 0, 1, 'Drop Rate', '', '', 250000000, Infinity, true, false, false, false, 10, 0, 10000000000.0, 75000, 1000000, 'Gem of Good Luck', 'Every perfectionist\'s dream. With this, you are much more likely to get perfect stats on looted items!');
    addArenaCraftAccessory(16, 1, 1, 400, 'Trinket', 11, 0, 0, 0, 0, 0, 0, 500, 250000, 0, 1, 'EXP', '', 'EXP / Rare Kill', 5000000000.0, Infinity, true, false, false, false, 10, 50000000000.0, 5000000000.0, 50000, 1000000, 'Yellow Madness Gem', 'With this, you no longer suffer a 10% EXP penalty when fighting yellow-named monsters! It also increases your EXP gain rate and makes rare monsters more likely to appear! Isn\'t it awesome?');
    addArenaCraftAccessory(16, 1, 1, 400, 'Trinket', 12, 0, 0, 0, 0, 0, 0, 500, 250000, 0, 1, '', 'Rage Speed', '', 5000000000.0, Infinity, true, false, false, false, 10, 50000000000.0, 5000000000.0, 50000, 1000000, 'Gem of Eternal Rage', 'With this, you will gain 0.5% Rage every second and ignore all forms of rage depletion! It also multiplies your Rage Attack by 1.2x.');
    addArenaCraftAccessory('Title', '?????????????');
    addArenaCraftAccessory(19, 1, 1, 50, 'Pendant', 21, 250, 0, 0, 0, 0, 0, 1, 0, 0, 4200, 'Random', 'Random', 'Random', 0, Infinity, true, false, true, false, 60, 0, 0, 0, 0, 'Reincarnation Pendant', '');
    addArenaCraftAccessory(19, 1, 1, 50, 'Earring', 11, 250, 0, 0, 0, 0, 0, 1, 0, 0, 4200, '', '', '', 0, Infinity, true, false, true, false, 0, 0, 0, 0, 0, 'Reincarnation Earrings', '');
    addArenaCraftAccessory(19, 1, 1, 50, 'Trinket', 16, 500, 0, 0, 0, 0, 0, 1, 0, 0, 4200, '', '', '', 0, Infinity, true, false, true, false, 0, 0, 0, 0, 0, 'Reincarnation Trinket', '');
    addArenaCraftPotion('Title', 'Secret');
    addArenaCraftPotion('Title 2', 'Power Buff');
    addArenaCraftPotion(5, 1, 1, 'Power Buff Potion', 1, 600, 1, 0, 36, 20000, Infinity, 200000, 20000, 1, 2, 'Small Power Potion', '');
    addArenaCraftPotion(5, 2, 2, 'Power Buff Potion', 2, 1800, 1, 0, 66, 150000, Infinity, 1500000, 150000, 5, 15, 'Medium Power Potion', '');
    addArenaCraftPotion(5, 3, 3, 'Power Buff Potion', 3, 5400, 1, 0, 106, 1000000, Infinity, 10000000, 1000000, 25, 100, 'Large Power Potion', '');
    addArenaCraftPotion(5, 5, 5, 'Power Buff Potion', 4, 1800, 50, 0, 156, 0, Infinity, 500000000, 50000000, 1000, 5000, 'Power Crystal', 'A rare Power Crystal. Unlike Buff Potions, this can be used 50 times before it vanishes.');
    addArenaCraftPotion('Title 2', 'Master Buff');
    addArenaCraftPotion(5, 1, 1, 'Master Buff Potion', 6, 600, 1, 0, 36, 20000, Infinity, 200000, 20000, 1, 2, 'Small Master Potion', '');
    addArenaCraftPotion(5, 2, 2, 'Master Buff Potion', 7, 1800, 1, 0, 66, 150000, Infinity, 1500000, 150000, 5, 15, 'Medium Master Potion', '');
    addArenaCraftPotion(5, 3, 3, 'Master Buff Potion', 8, 5400, 1, 0, 106, 1000000, Infinity, 10000000, 1000000, 25, 100, 'Large Master Potion', '');
    addArenaCraftPotion(5, 5, 5, 'Master Buff Potion', 9, 1800, 50, 0, 156, 0, Infinity, 500000000, 50000000, 1000, 5000, 'Master Crystal', 'A rare Master Crystal. Unlike Buff Potions, this can be used 50 times before it vanishes.');
    addArenaCraftPotion('Title 2', 'Reward Buff');
    addArenaCraftPotion(5, 1, 1, 'Reward Buff Potion', 11, 600, 1, 0, 36, 20000, Infinity, 200000, 20000, 1, 2, 'Small Reward Potion', '');
    addArenaCraftPotion(5, 2, 2, 'Reward Buff Potion', 12, 1800, 1, 0, 66, 150000, Infinity, 1500000, 150000, 5, 15, 'Medium Reward Potion', '');
    addArenaCraftPotion(5, 3, 3, 'Reward Buff Potion', 13, 5400, 1, 0, 106, 1000000, Infinity, 10000000, 1000000, 25, 100, 'Large Reward Potion', '');
    addArenaCraftPotion(5, 5, 5, 'Reward Buff Potion', 14, 1800, 50, 0, 156, 0, Infinity, 500000000, 50000000, 1000, 5000, 'Reward Crystal', 'A rare Reward Crystal. Unlike Buff Potions, this can be used 50 times before it vanishes.');
    addArenaCraftPotion('Title 2', '???');
    addArenaCraftPotion(5, 5, 5, 'Nightmare Potion', 16, 200, 1, 0, -1, 0, Infinity, 1000000, 0, 0, 10, '???', '');
    addArenaCraftPotion('Title', 'Unobtainium');
    addArenaCraftPotion(16, 1, 1, 'Rebirth Potion', 23, 120, 1, 0, 706, 0, Infinity, 1000000000, 1000000000, 250, 0, 'Rebirth Potion', 'This potion allows you to Rebirth - which means, starting over from Rank 40 with bonuses.\n\n<font color=\'#FFFF00\'>Rank 500 required. Must be used in Ye Olde Pub.</font>');
    addArenaCraftPotion(16, 1, 1, 'Potion of Regrets', 24, 1, 1, 0, 706, 0, Infinity, 5000000000.0, 5000000000.0, 1250, 0, 'Potion of Regrets', 'This potion contains all of your regrets after making the worst life decision ever (don\'t ask how that works). Drink this potion to gain 10,000,000,000 Arena EXP and 10,000,000,000 Robacon EXP. Does not affect Item EXP. Cannot be used if you haven\'t performed a Rebirth. Can only be used once per real life month.');
    addArenaCraftPotion(16, 1, 1, 'Loot Magnet', 17, 3600, 100, 0, 706, 0, Infinity, 0, 0, 2500, 50000, 'Loot Magnet', 'This thing seems overpowered. It\'s like, NEVER WORRY ABOUT LOOTING AGAIN!!!\n... until the effect wears off, of course.');
    addArenaCraftPotion(16, 1, 1, 'Monster Magnet', 18, 3600, 100, 0, 706, 0, Infinity, 0, 0, 50000, 1000000, 'Monster Magnet', 'This thing speeds monsters up when they are farther away from you, and slows them down when they are closer to you. One can argue that it is not exactly a magnet.');
    addArenaCraftChip('Title', 'Monster Chips');
    addArenaCraftChip(1, 1, 1, 'Monster Chip (Rare)', 3, 178, 0, 0, 16, 0, Infinity, 99999999, 99999999, 999, 2999, 'Monster Chip R-178', '');
    addArenaCraftChip(1, 1, 1, 'Monster Chip (Rare)', 3, 179, 0, 0, 16, 0, Infinity, 99999999, 99999999, 999, 2999, 'Monster Chip R-179', '');
    addArenaCraftChip(1, 1, 1, 'Monster Chip (Rare)', 3, 180, 0, 0, 16, 0, Infinity, 99999999, 99999999, 999, 2999, 'Monster Chip R-180', '');
    addArenaCraftChip(1, 1, 1, 'Monster Chip (Rare)', 3, 181, 0, 0, 16, 0, Infinity, 99999999, 99999999, 999, 2999, 'Monster Chip R-181', '');
    addArenaCraftChip(1, 1, 1, 'Monster Chip (Rare)', 3, 182, 0, 0, 16, 0, Infinity, 99999999, 99999999, 999, 2999, 'Monster Chip R-182', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 331, 0, 0, 16, 0, Infinity, 9999999999.0, 9999999999.0, 9999, 299999, 'Monster Chip R-331', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 433, 0, 0, 16, 0, Infinity, 999999999, 999999999, 999, 29999, 'Monster Chip R-433', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 434, 0, 0, 16, 0, Infinity, 999999999, 999999999, 999, 29999, 'Monster Chip R-434', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 437, 0, 0, 16, 0, Infinity, 999999999, 999999999, 999, 29999, 'Monster Chip R-437', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 486, 0, 0, 16, 0, Infinity, 9999999999.0, 9999999999.0, 9999, 299999, 'Monster Chip R-486', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 488, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-488', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 489, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-489', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 490, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-490', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 491, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-491', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 492, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-492', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 493, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-493', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 494, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-494', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 495, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-495', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 496, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-496', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 497, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-497', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 498, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-498', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 499, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-499', '');
    addArenaCraftChip(16, 1, 1, 'Monster Chip (Rare)', 3, 500, 0, 0, 16, 0, Infinity, 99999999, 99999999, 99, 2999, 'Monster Chip R-500', '');
    addArenaCraftEnhancer('Title', 'Item Protection');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Protector', 421, 0, 0, 100, 0, 1, '', '', '', 0, Infinity, 0, 0, 0, 0, 'Weapon Protector', 'Protects a weapon from being accidentally sold. Use this on a protected item to remove the protected status.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Protector', 422, 0, 0, 100, 0, 1, '', '', '', 0, Infinity, 0, 0, 0, 0, 'Armor Protector', 'Protects an armor piece from being accidentally sold. Use this on a protected item to remove the protected status.');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Protector', 423, 0, 0, 100, 0, 1, '', '', '', 0, Infinity, 0, 0, 0, 0, 'Accessory Protector', 'Protects an accessory from being accidentally sold. Use this on a protected item to remove the protected status.');
    addArenaCraftEnhancer(17, 1, 1, 'Enhancer Protector', 426, 0, 0, 100, 0, 1, '', '', '', 0, Infinity, 0, 0, 0, 0, 'Enhancer Protector', 'Protects an enhancer from being accidentally sold. The item may still be used. Use this on a protected item to remove the protected status.');
    addArenaCraftEnhancer('Title', 'Weapon Enhancer');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 1, 5, 20, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Attack Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 2, 10, 20, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Weapon Attack Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 3, 15, 20, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Weapon Attack Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 4, 20, 20, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Weapon Attack Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 5, 25, 20, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Attack Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 6, 30, 20, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Weapon Attack Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 7, 35, 20, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Weapon Attack Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 8, 40, 20, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Weapon Attack Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 9, 45, 20, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Attack Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Attack Enhancer', 10, 50, 20, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Weapon Attack Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 11, 12, 20, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Defense Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 12, 24, 20, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Weapon Defense Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 13, 36, 20, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Weapon Defense Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 14, 48, 20, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Weapon Defense Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 15, 60, 20, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Defense Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 16, 72, 20, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Weapon Defense Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 17, 84, 20, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Weapon Defense Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 18, 96, 20, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Weapon Defense Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 19, 108, 20, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Defense Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Defense Enhancer', 20, 120, 20, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Weapon Defense Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 61, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Critical Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 62, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Weapon Critical Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 63, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Weapon Critical Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 64, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Weapon Critical Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 65, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Critical Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 66, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Weapon Critical Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 67, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Weapon Critical Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 68, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Weapon Critical Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 69, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Critical Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Critical Enhancer', 70, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Weapon Critical Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 71, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Dexterity Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 72, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Weapon Dexterity Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 73, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Weapon Dexterity Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 74, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Weapon Dexterity Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 75, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Dexterity Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 76, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Weapon Dexterity Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 77, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Weapon Dexterity Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 78, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Weapon Dexterity Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 79, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Dexterity Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Dexterity Enhancer', 80, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Weapon Dexterity Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 81, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Health Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 82, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Weapon Health Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 83, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Weapon Health Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 84, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Weapon Health Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 85, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Health Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 86, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Weapon Health Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 87, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Weapon Health Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 88, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Weapon Health Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 89, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Health Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Health Enhancer', 90, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Weapon Health Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Speed Enhancer', 51, 1, 70, 50, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Weapon Speed Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Speed Enhancer', 52, 2, 70, 30, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Weapon Speed Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Speed Enhancer', 53, 3, 70, 10, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Weapon Speed Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 91, 3, 0, 1000, 0, 0, '', '', '', 1000, Infinity, 20000, 4000, 2, 0, 'Weapon Mystery Rock Lv. 1', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 92, 4, 0, 1000, 0, 0, '', '', '', 3500, Infinity, 70000, 14000, 7, 0, 'Weapon Mystery Rock Lv. 2', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 93, 5, 0, 1000, 0, 0, '', '', '', 10000, Infinity, 200000, 40000, 20, 2, 'Weapon Mystery Rock Lv. 3', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 94, 6, 0, 1000, 0, 0, '', '', '', 35000, Infinity, 700000, 140000, 70, 7, 'Weapon Mystery Rock Lv. 4', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 95, 7, 0, 1000, 0, 0, '', '', '', 100000, Infinity, 2000000, 400000, 200, 20, 'Weapon Mystery Rock Lv. 5', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 96, 8, 0, 1000, 0, 0, '', '', '', 350000, Infinity, 7000000, 1400000, 700, 70, 'Weapon Mystery Rock Lv. 6', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 97, 9, 0, 1000, 0, 0, '', '', '', 1000000, Infinity, 20000000, 4000000, 2000, 200, 'Weapon Mystery Rock Lv. 7', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 98, 10, 0, 1000, 0, 0, '', '', '', 3500000, Infinity, 70000000, 14000000, 7000, 700, 'Weapon Mystery Rock Lv. 8', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 99, 11, 0, 1000, 0, 0, '', '', '', 10000000, Infinity, 200000000, 40000000, 20000, 2000, 'Weapon Mystery Rock Lv. 9', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Mystery Enhancer', 100, 12, 0, 1000, 0, 0, '', '', '', 35000000, Infinity, 700000000, 140000000, 70000, 7000, 'Weapon Mystery Rock Lv. 10', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Bonus Adder', 321, 0, 0, 100, 0, 26, 'Ignore Epic Weapons', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Weapon Bonus: Ignore Epic Weapons', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Bonus Adder', 321, 0, 0, 100, 0, 26, 'Ignore Bonus Rocks', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Weapon Bonus: Ignore Bonus Rocks', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Bonus Adder', 321, 0, 0, 100, 0, 26, 'Ignore Pendants', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Weapon Bonus: Ignore Pendants', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Bonus Adder', 321, 0, 0, 100, 0, 26, 'Ignore Finalizers', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Weapon Bonus: Ignore Finalizers', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Bonus Adder', 321, 0, 0, 100, 0, 26, 'Ignore Outfit Items', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Weapon Bonus: Ignore Outfit Items', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Spirit Rock', 301, 10, 0, 100, 0, 100, '', '', '', 7000000, Infinity, 70000000, 7000000, 500, 700, 'Weapon Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Spirit Rock', 301, 10, 0, 100, 0, 100, '', '', '', 7000000000.0, Infinity, 70000000000.0, 7000000000.0, 99999, 500000, '[S] Weapon Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Weapon Growth Rock', 302, 5, 0, 1000, 0, 100, '', '', '', 200000, Infinity, 2000000, 200000, 250, 20, 'Basic Weapon Growth Rock', '');
    addArenaCraftEnhancer(15, 1, 1, 'Weapon Growth Rock', 302, 8, 0, 1000, 0, 300, '', '', '', 7000000, Infinity, 70000000, 7000000, 50, 700, 'Chaotic Weapon Growth Rock', '');
    addArenaCraftEnhancer(4, 1, 1, 'Weapon Unique Enhancer', 391, 1, 0, 100, 0, 106, '', '', '', 200000000, Infinity, 2000000000, 400000000, 400, 20000, 'Weapon Unique Enhancer Lv. 1', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Weapon Unique Enhancer', 392, 2, 0, 100, 0, 156, '', '', '', 350000000, Infinity, 3500000000.0, 700000000, 700, 35000, 'Weapon Unique Enhancer Lv. 2', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Weapon Unique Enhancer', 393, 3, 0, 100, 0, 256, '', '', '', 500000000, Infinity, 5000000000.0, 1000000000, 1000, 50000, 'Weapon Unique Enhancer Lv. 3', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Weapon Unique Enhancer', 394, 4, 0, 100, 0, 406, '', '', '', 600000000, Infinity, 6000000000.0, 1200000000, 1200, 60000, 'Weapon Unique Enhancer Lv. 4', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Weapon Unique Enhancer', 395, 5, 0, 100, 0, 706, '', '', '', 700000000, Infinity, 7000000000.0, 1400000000, 1400, 70000, 'Weapon Unique Enhancer Lv. 5', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Unobtainium Enhancer', 351, 1, 0, 100, 0, 106, '', '', '', 0, Infinity, 10000000, 2000000, 10, 100, 'Weapon Unobtainium Enhancer Lv. 1', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Unobtainium Enhancer', 352, 2, 0, 100, 0, 156, '', '', '', 0, Infinity, 50000000, 10000000, 50, 500, 'Weapon Unobtainium Enhancer Lv. 2', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Unobtainium Enhancer', 353, 3, 0, 100, 0, 256, '', '', '', 0, Infinity, 250000000, 50000000, 250, 2500, 'Weapon Unobtainium Enhancer Lv. 3', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Unobtainium Enhancer', 354, 4, 0, 100, 0, 406, '', '', '', 0, Infinity, 1000000000, 200000000, 1000, 10000, 'Weapon Unobtainium Enhancer Lv. 4', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Unobtainium Enhancer', 355, 5, 0, 100, 0, 706, '', '', '', 0, Infinity, 5000000000.0, 1000000000, 5000, 50000, 'Weapon Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Weapon Finalizer', 424, 90, 0, 100, 0, 296, '', '', '', 0, Infinity, 1000000, 200000, 25, 10, '[I] Weapon Finalizer (Rank 90)', '');
    addArenaCraftEnhancer('Title', 'Armor Enhancer');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 101, 2, 20, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Attack Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 102, 4, 20, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Armor Attack Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 103, 6, 20, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Armor Attack Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 104, 8, 20, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Armor Attack Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 105, 10, 20, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Attack Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 106, 12, 20, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Armor Attack Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 107, 14, 20, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Armor Attack Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 108, 16, 20, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Armor Attack Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 109, 18, 20, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Attack Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Attack Enhancer', 110, 20, 20, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Armor Attack Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 111, 5, 20, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Defense Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 112, 10, 20, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Armor Defense Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 113, 15, 20, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Armor Defense Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 114, 20, 20, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Armor Defense Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 115, 25, 20, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Defense Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 116, 30, 20, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Armor Defense Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 117, 35, 20, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Armor Defense Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 118, 40, 20, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Armor Defense Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 119, 45, 20, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Defense Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Defense Enhancer', 120, 50, 20, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Armor Defense Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 161, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Critical Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 162, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Armor Critical Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 163, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Armor Critical Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 164, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Armor Critical Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 165, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Critical Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 166, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Armor Critical Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 167, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Armor Critical Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 168, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Armor Critical Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 169, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Critical Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Critical Enhancer', 170, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Armor Critical Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 171, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Dexterity Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 172, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Armor Dexterity Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 173, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Armor Dexterity Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 174, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Armor Dexterity Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 175, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Dexterity Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 176, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Armor Dexterity Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 177, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Armor Dexterity Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 178, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Armor Dexterity Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 179, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Dexterity Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Dexterity Enhancer', 180, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Armor Dexterity Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 181, 1, 120, 100, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Health Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 182, 2, 120, 90, 0, 0, '', '', '', 3500, Infinity, 35000, 7000, 2, 0, 'Armor Health Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 183, 3, 120, 80, 0, 0, '', '', '', 10000, Infinity, 100000, 20000, 5, 1, 'Armor Health Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 184, 4, 120, 70, 0, 0, '', '', '', 35000, Infinity, 350000, 70000, 10, 3, 'Armor Health Rock Lv. 4', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 185, 5, 120, 60, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Health Rock Lv. 5', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 186, 6, 120, 50, 0, 0, '', '', '', 350000, Infinity, 3500000, 700000, 100, 35, 'Armor Health Rock Lv. 6', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 187, 7, 120, 40, 0, 0, '', '', '', 1000000, Infinity, 10000000, 2000000, 350, 100, 'Armor Health Rock Lv. 7', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 188, 8, 120, 30, 0, 0, '', '', '', 3500000, Infinity, 35000000, 7000000, 1000, 350, 'Armor Health Rock Lv. 8', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 189, 9, 120, 20, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Health Rock Lv. 9', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Health Enhancer', 190, 10, 120, 10, 0, 0, '', '', '', 35000000, Infinity, 350000000, 70000000, 10000, 3500, 'Armor Health Rock Lv. 10', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Speed Enhancer', 151, 1, 70, 50, 0, 0, '', '', '', 1000, Infinity, 10000, 2000, 1, 0, 'Armor Speed Rock Lv. 1', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Speed Enhancer', 152, 2, 70, 30, 0, 0, '', '', '', 100000, Infinity, 1000000, 200000, 35, 10, 'Armor Speed Rock Lv. 2', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Speed Enhancer', 153, 3, 70, 10, 0, 0, '', '', '', 10000000, Infinity, 100000000, 20000000, 3500, 1000, 'Armor Speed Rock Lv. 3', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 191, 3, 0, 1000, 0, 0, '', '', '', 1000, Infinity, 20000, 4000, 2, 0, 'Armor Mystery Rock Lv. 1', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 192, 4, 0, 1000, 0, 0, '', '', '', 3500, Infinity, 70000, 14000, 7, 0, 'Armor Mystery Rock Lv. 2', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 193, 5, 0, 1000, 0, 0, '', '', '', 10000, Infinity, 200000, 40000, 20, 2, 'Armor Mystery Rock Lv. 3', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 194, 6, 0, 1000, 0, 0, '', '', '', 35000, Infinity, 700000, 140000, 70, 7, 'Armor Mystery Rock Lv. 4', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 195, 7, 0, 1000, 0, 0, '', '', '', 100000, Infinity, 2000000, 400000, 200, 20, 'Armor Mystery Rock Lv. 5', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 196, 8, 0, 1000, 0, 0, '', '', '', 350000, Infinity, 7000000, 1400000, 700, 70, 'Armor Mystery Rock Lv. 6', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 197, 9, 0, 1000, 0, 0, '', '', '', 1000000, Infinity, 20000000, 4000000, 2000, 200, 'Armor Mystery Rock Lv. 7', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 198, 10, 0, 1000, 0, 0, '', '', '', 3500000, Infinity, 70000000, 14000000, 7000, 700, 'Armor Mystery Rock Lv. 8', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 199, 11, 0, 1000, 0, 0, '', '', '', 10000000, Infinity, 200000000, 40000000, 20000, 2000, 'Armor Mystery Rock Lv. 9', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Mystery Enhancer', 200, 12, 0, 1000, 0, 0, '', '', '', 35000000, Infinity, 700000000, 140000000, 70000, 7000, 'Armor Mystery Rock Lv. 10', 'What this enhancer does remains a mystery.');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Bonus Adder', 324, 0, 0, 100, 0, 26, 'Ignore Epic Weapons', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Armor Bonus: Ignore Epic Weapons', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Bonus Adder', 324, 0, 0, 100, 0, 26, 'Ignore Bonus Rocks', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Armor Bonus: Ignore Bonus Rocks', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Bonus Adder', 324, 0, 0, 100, 0, 26, 'Ignore Pendants', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Armor Bonus: Ignore Pendants', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Bonus Adder', 324, 0, 0, 100, 0, 26, 'Ignore Finalizers', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Armor Bonus: Ignore Finalizers', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Bonus Adder', 324, 0, 0, 100, 0, 26, 'Ignore Outfit Items', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Armor Bonus: Ignore Outfit Items', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Spirit Rock', 304, 10, 0, 100, 0, 100, '', '', '', 3500000, Infinity, 35000000, 3500000, 250, 350, 'Armor Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Spirit Rock', 304, 10, 0, 100, 0, 100, '', '', '', 3500000000.0, Infinity, 35000000000.0, 3500000000.0, 99999, 250000, '[S] Armor Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Growth Rock', 305, 5, 0, 1000, 0, 100, '', '', '', 100000, Infinity, 1000000, 100000, 125, 10, 'Basic Armor Growth Rock', '');
    addArenaCraftEnhancer(15, 1, 1, 'Armor Growth Rock', 305, 8, 0, 1000, 0, 300, '', '', '', 3500000, Infinity, 35000000, 3500000, 25, 350, 'Chaotic Armor Growth Rock', '');
    addArenaCraftEnhancer(4, 1, 1, 'Armor Unique Enhancer', 401, 1, 0, 100, 0, 106, '', '', '', 100000000, Infinity, 1000000000, 200000000, 200, 10000, 'Armor Unique Enhancer Lv. 1', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Armor Unique Enhancer', 402, 2, 0, 100, 0, 156, '', '', '', 175000000, Infinity, 1750000000, 350000000, 350, 17500, 'Armor Unique Enhancer Lv. 2', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Armor Unique Enhancer', 403, 3, 0, 100, 0, 256, '', '', '', 250000000, Infinity, 2500000000.0, 500000000, 500, 25000, 'Armor Unique Enhancer Lv. 3', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Armor Unique Enhancer', 404, 4, 0, 100, 0, 406, '', '', '', 300000000, Infinity, 3000000000.0, 600000000, 600, 30000, 'Armor Unique Enhancer Lv. 4', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(4, 1, 1, 'Armor Unique Enhancer', 405, 5, 0, 100, 0, 706, '', '', '', 350000000, Infinity, 3500000000.0, 700000000, 700, 35000, 'Armor Unique Enhancer Lv. 5', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Unobtainium Enhancer', 361, 1, 0, 100, 0, 106, '', '', '', 0, Infinity, 10000000, 1000000, 10, 100, 'Armor Unobtainium Enhancer Lv. 1', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Unobtainium Enhancer', 362, 2, 0, 100, 0, 156, '', '', '', 0, Infinity, 50000000, 5000000, 50, 500, 'Armor Unobtainium Enhancer Lv. 2', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Unobtainium Enhancer', 363, 3, 0, 100, 0, 256, '', '', '', 0, Infinity, 250000000, 25000000, 250, 2500, 'Armor Unobtainium Enhancer Lv. 3', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Unobtainium Enhancer', 364, 4, 0, 100, 0, 406, '', '', '', 0, Infinity, 1000000000, 100000000, 1000, 10000, 'Armor Unobtainium Enhancer Lv. 4', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Unobtainium Enhancer', 365, 5, 0, 100, 0, 706, '', '', '', 0, Infinity, 5000000000.0, 500000000, 5000, 50000, 'Armor Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.');
    addArenaCraftEnhancer(16, 1, 1, 'Armor Finalizer', 425, 90, 0, 100, 0, 296, '', '', '', 0, Infinity, 1000000, 200000, 25, 10, '[I] Armor Finalizer (Rank 90)', '');
    addArenaCraftEnhancer(17, 1, 1, 'Armor Growth Rock', 451, 100, 0, 100, 0, 706, '', '', '', 0, Infinity, 5000000000.0, 1000000000, 35000, 25000, 'Humblebee Armor Upgrade', 'Raises the Max Level of Humblebee Armor by 100. Adds 1 to the enhancement count. Cannot be used if the item\'s Max Level is already 284 or higher.');
    addArenaCraftEnhancer('Title', 'Accessory Enhancer');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Bonus Adder', 327, 0, 0, 100, 0, 36, 'Ignore Epic Weapons', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Accessory Bonus: Ignore Epic Weapons', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Bonus Adder', 327, 0, 0, 100, 0, 26, 'Ignore Bonus Rocks', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Accessory Bonus: Ignore Bonus Rocks', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Bonus Adder', 327, 0, 0, 100, 0, 26, 'Ignore Pendants', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Accessory Bonus: Ignore Pendants', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Bonus Adder', 327, 0, 0, 100, 0, 26, 'Ignore Finalizers', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Accessory Bonus: Ignore Finalizers', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Bonus Adder', 327, 0, 0, 100, 0, 26, 'Ignore Outfit Items', '', '', 0, Infinity, 50000, 0, 0, 0, '[S] [I] Accessory Bonus: Ignore Outfit Items', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Spirit Rock', 313, 10, 0, 100, 0, 100, '', '', '', 7000000, Infinity, 70000000, 7000000, 500, 700, 'Accessory Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Spirit Rock', 313, 10, 0, 100, 0, 100, '', '', '', 70000000000.0, Infinity, 700000000000.0, 70000000000.0, 99999, 2000000, '[S] Accessory Spirit Rock', '');
    addArenaCraftEnhancer(17, 1, 1, 'Accessory Attack Enhancer', 331, 300, 0, 100, 0, 706, '', '', '', 30000000000.0, 2, 300000000000.0, 15000000000.0, 99999, 750000, 'Awesome Enhancer', 'The worst resource sink that has ever existed.\n\nCan only be used on Awesome Earrings.');
    addArenaCraftEnhancer(15, 1, 1, 'Accessory Attack Enhancer', 332, 150, 0, 100, 0, 706, '', '', '', 75000000000.0, Infinity, 750000000000.0, 75000000000.0, 75000, 7500000, 'GIGA ENHANCER EX', 'Can only be used on GIGA PENDANT and GIGA EARRINGS.');
    addArenaCraftEnhancer(15, 1, 1, 'Accessory Lifespan Extender', 333, 15, 0, 100, 0, 706, '', '', '', 75000000000.0, Infinity, 750000000000.0, 75000000000.0, 75000, 7500000, 'GIGA LIFE ROCK EX', 'Can only be used on GIGA PENDANT and GIGA EARRINGS.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Random', '', '', 0, Infinity, 0, 0, 999, 999, '[I] Auto Buff - RANDOM', 'Apply this to Auto Buff Gem to make it give you random buffs.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Power', '', '', 0, Infinity, 0, 0, 9999, 9999, '[I] Auto Buff - POWER', 'Apply this to Auto Buff Gem to make it give you Power buff.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Master', '', '', 0, Infinity, 0, 0, 9999, 9999, '[I] Auto Buff - MASTER', 'Apply this to Auto Buff Gem to make it give you Master buff.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Reward', '', '', 0, Infinity, 0, 0, 9999, 9999, '[I] Auto Buff - REWARD', 'Apply this to Auto Buff Gem to make it give you Reward buff.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Enrage', '', '', 0, Infinity, 0, 0, 99999, 99999, '[I] Auto Buff - ENRAGE', 'Apply this to Auto Buff Gem to make it give you Enrage buff.');
    addArenaCraftEnhancer(16, 1, 1, 'Accessory Bonus Adder', 222, 0, 0, 100, 0, 26, 'Auto Buff - Boost', '', '', 0, Infinity, 0, 0, 99999, 99999, '[I] Auto Buff - BOOST', 'Apply this to Auto Buff Gem to make it give you Elemental Boost buff.');
    addArenaCraftEnhancer('Title', 'Enhancer Enhancer');
    addArenaCraftEnhancer(16, 1, 1, 'Mystery Enhancer Identifier', 221, 0, 0, 100, 0, 300, '', '', '', 100000000, Infinity, 1000000000, 150000000, 100, 10000, 'Mystery Enhancer Identifier', '');
    addArenaCraftEnhancer(16, 1, 1, 'Mystery Enhancer Identifier', 221, 0, 0, 100, 0, 300, '', '', '', 5000000000.0, 7, 50000000000.0, 7500000000.0, 5000, 500000, '[I] Mystery Enhancer Identifier', '');
    setArray = [zeroItem];
    addArenaSet('Gem of Constancy\n(Gem of Constancy must be equipped)', [2, 3, 4, 5, 6, 7, 8], ['Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate'], [5, 5, 5, 5, 5, 5, 10], ['Gem of Constancy', 'Any Finalized Weapon', 'Any Finalized Hat', 'Any Finalized Shirt', 'Any Finalized Gloves', 'Any Finalized Pants', 'Any Finalized Shoes', 'Any Finalized Skin']);
    addArenaSet('Empowering Gem\n(Empowering Gem must be equipped)', [2, 3, 4], ['Damage', 'Damage', 'Damage'], [5, 5, 10], ['Empowering Gem', 'Any Rank 200+ Weapon', 'Any Rank 300+ Weapon', 'Any Rank 400+ Weapon']);
    addArenaSet('Mining\n(Pickaxe must be equipped)', [2, 3, 4, 5, 6, 6], ['Drop Rate', 'Drop Rate', 'Drop Rate', 'Drop Rate', 'Spawn Rate', 'Attack Speed'], [50, 50, 50, 50, 50, 50], ['Any Pickaxe', 'Any Crystal Hat', 'Any Crystal Shirt', 'Any Crystal Gloves', 'Any Crystal Pants', 'Any Crystal Shoes']);
    addArenaSet('Leather Set', [5], ['Damage'], [15], ['Leather Hat', 'Leather Shirt', 'Leather Gloves', 'Leather Pants', 'Leather Shoes']);
    addArenaSet('Kongregate Set', [5], ['Damage'], [15], ['Kongregate Hat', 'Kongregate Shirt', 'Kongregate Gloves', 'Kongregate Pants', 'Kongregate Shoes']);
    addArenaSet('Lovely Set', [5], ['Damage'], [20], ['Lovely Hat', 'Lovely Shirt', 'Lovely Gloves', 'Lovely Pants', 'Lovely Shoes']);
    addArenaSet('Red Set', [5], ['Damage'], [20], ['Red Hat', 'Red Shirt', 'Red Gloves', 'Red Pants', 'Red Shoes']);
    addArenaSet('Knight Set', [5], ['Damage'], [25], ['Knight Hat', 'Knight Shirt', 'Knight Gloves', 'Knight Pants', 'Knight Shoes']);
    addArenaSet('Paladin Set', [5], ['Damage'], [25], ['Paladin Hat', 'Paladin Shirt', 'Paladin Gloves', 'Paladin Pants', 'Paladin Shoes']);
    addArenaSet('Executioner Set', [5], ['Damage'], [30], ['Executioner Hat', 'Executioner Shirt', 'Executioner Gloves', 'Executioner Pants', 'Executioner Shoes']);
    addArenaSet('Dragonewyn Set', [5], ['Damage'], [30], ['Dragonewyn Hat', 'Dragonewyn Shirt', 'Dragonewyn Gloves', 'Dragonewyn Pants', 'Dragonewyn Shoes']);
    addArenaSet('Spirit Set', [5, 6], ['Damage', 'Spawn Rate'], [30, 15], ['Spirit Sword', 'Spirit Hat', 'Spirit Shirt', 'Spirit Gloves', 'Spirit Pants', 'Spirit Shoes']);
    addArenaSet('Elite Set', [5], ['Damage'], [30], ['Elite Hat', 'Elite Shirt', 'Elite Gloves', 'Elite Pants', 'Elite Shoes']);
    addArenaSet('Training Set', [4, 5], ['Damage', 'EXP'], [10, 10], ['Training Hat', 'Training Shirt', 'Training Gloves', 'Training Pants', 'Training Shoes']);
    addArenaSet('Soldier Set', [4, 5], ['Damage', 'EXP'], [10, 10], ['Soldier Hat', 'Soldier Shirt', 'Soldier Gloves', 'Soldier Pants', 'Soldier Shoes']);
    addArenaSet('Stripper Nurse Set', [4, 5], ['Damage', 'EXP'], [15, 15], ['Stripper Nurse Hat', 'Stripper Nurse Shirt', 'Stripper Nurse Gloves', 'Stripper Nurse Pants', 'Stripper Nurse Shoes']);
    addArenaSet('Enchanted Leather Set', [4, 5, 5], ['Damage', 'EXP', 'Attack Speed'], [15, 15, 15], ['Enchanted Leather Hat', 'Enchanted Leather Shirt', 'Enchanted Leather Gloves', 'Enchanted Leather Pants', 'Enchanted Leather Shoes']);
    addArenaSet('Golden Set', [4, 5, 5], ['Damage', 'EXP', 'Coin'], [20, 20, 20], ['Golden Hat', 'Golden Shirt', 'Golden Gloves', 'Golden Pants', 'Golden Shoes']);
    addArenaSet('Regeneration Set', [4, 5, 5, 5], ['Damage', 'EXP', 'MaxHP', 'MaxMP'], [20, 20, 50, 50], ['Regeneration Hat', 'Regeneration Shirt', 'Regeneration Gloves', 'Regeneration Pants', 'Regeneration Shoes']);
    addArenaSet('Berserker Set', [4, 5, 5], ['Damage', 'EXP', 'Spawn Rate'], [25, 25, 10], ['Berserker Hat', 'Berserker Shirt', 'Berserker Gloves', 'Berserker Pants', 'Berserker Shoes']);
    addArenaSet('Defensive Set', [4, 5, 5, 5], ['Damage', 'EXP', 'Spawn Rate', 'MaxHP'], [25, 25, 10, 125], ['Defensive Hat', 'Defensive Shirt', 'Defensive Gloves', 'Defensive Pants', 'Defensive Shoes']);
    addArenaSet('Pure Darkness Set', [4, 5, 5, 5, 6, 6], ['Damage', 'EXP', 'Spawn Rate', 'MaxHP', 'Spawn Rate', 'Damage'], [30, 30, 15, 150, 15, 45], ['Pure Darkness Claw', 'Pure Darkness Hat', 'Pure Darkness Shirt', 'Pure Darkness Gloves', 'Pure Darkness Pants', 'Pure Darkness Shoes']);
    addArenaSet('Crimson Set', [4, 5, 5, 5, 6, 6], ['Damage', 'EXP', 'Spawn Rate', 'MaxHP', 'Spawn Rate', 'Damage'], [30, 30, 15, 150, 15, 45], ['Crimson Bow', 'Crimson Hat', 'Crimson Shirt', 'Crimson Gloves', 'Crimson Pants', 'Crimson Shoes']);
    addArenaSet('Knightmare Set', [4, 5, 5, 5], ['Damage', 'EXP', 'MaxHP', 'Rare Monster Rate'], [40, 40, 200, 40], ['Knightmare Hat', 'Knightmare Shirt', 'Knightmare Gloves', 'Knightmare Pants', 'Knightmare Shoes']);
    addArenaSet('Humblebee Set', [4, 5, 5, 5, 5], ['Damage', 'EXP', 'Spawn Rate', 'Attack Speed', 'Epic Monster Rate'], [50, 50, 25, 100, 50], ['Humblebee Hat', 'Humblebee Shirt', 'Humblebee Gloves', 'Humblebee Pants', 'Humblebee Shoes']);
    addArenaSet('Ghost Set', [4, 5, 5, 5], ['Damage', 'Damage', 'Spawn Rate', 'MaxHP'], [20, 80, 40, 400], ['Ghost Hat', 'Ghost Shirt', 'Ghost Gloves', 'Ghost Pants', 'Ghost Shoes']);
    addArenaSet('Samurai Set', [4, 5, 5, 5, 5], ['Damage', 'Damage', 'Spawn Rate', 'MaxHP', 'Rare Monster Rate'], [25, 75, 50, 1000, 200], ['Samurai Hat', 'Samurai Shirt', 'Samurai Gloves', 'Samurai Pants', 'Samurai Shoes']);
    addArenaSet('Dress Set', [4, 5, 5, 5, 5, 5], ['Damage', 'Damage', 'Spawn Rate', 'MaxHP', 'MaxMP', 'Epic Monster Rate'], [40, 110, 60, 250, 500, 200], ['Dress Hat', 'Dress Shirt', 'Dress Gloves', 'Dress Pants', 'Dress Shoes']);
    addArenaSet('Elm Set', [3, 4, 5, 5, 5, 5, 5, 5], ['Drop Rate', 'Damage', 'Spawn Rate', 'Attack Speed', 'MaxHP', 'MaxMP', 'Rare Monster Rate', 'Epic Monster Rate'], [15, 15, 15, 75, 75, 75, 75, 75], ['Elm Hat', 'Elm Shirt', 'Elm Gloves', 'Elm Pants', 'Elm Shoes']);
    addArenaSet('Corrupted Elm Set', [3, 4, 5, 5, 5, 5, 5, 5], ['Drop Rate', 'Damage', 'Spawn Rate', 'Attack Speed', 'MaxHP', 'MaxMP', 'Rare Monster Rate', 'Epic Monster Rate'], [25, 25, 25, 125, 125, 125, 125, 125], ['Corrupted Elm Hat', 'Corrupted Elm Shirt', 'Corrupted Elm Gloves', 'Corrupted Elm Pants', 'Corrupted Elm Shoes']);
    addArenaSet('Emperor\'s Clothing', [4, 5], ['Coin', 'Pixel'], [200, 200], ['Emperor\'s Hat', 'Emperor\'s Shirt', 'Emperor\'s Gloves', 'Emperor\'s Pants', 'Emperor\'s Shoes']);
    addArenaSet('Set of DOOOOOOM', [5, 6, 6, 6, 6], ['Spawn Rate', 'Spawn Rate', 'Damage', 'MaxHP', 'Damage dealt in Tower of DOOOOOOM is multiplied by <b>1.2</b>'], [5, 5, 10, 60, -1], ['Any Weapon of DOOOOOOM', 'Hat of DOOOOOOM', 'Shirt of DOOOOOOM', 'Gloves of DOOOOOOM', 'Pants of DOOOOOOM', 'Shoes of DOOOOOOM']);
    addArenaSet('Chuck Norris Set', [5], ['Damage'], [100], ['Chuck Norris Hat', 'Chuck Norris Shirt', 'Chuck Norris Gloves', 'Chuck Norris Pants', 'Chuck Norris Shoes']);
    addArenaSet('Alien Set', [5, 6, 7, 7], ['EXP', 'Spawn Rate', 'Drop Rate', 'Damage'], [50, 50, 100, 100], ['Any Alien Weapon', 'Any Alien Hat', 'Any Alien Shirt', 'Any Alien Gloves', 'Any Alien Pants', 'Any Alien Shoes', 'Alien Earrings']);
    addArenaSet('Meteoric Set', [5, 6, 6], ['Spawn Rate', 'Spawn Rate', 'Damage'], [50, 75, 100], ['Any Meteoric Weapon', 'Meteoric Hat', 'Meteoric Shirt', 'Meteoric Gloves', 'Meteoric Pants', 'Meteoric Shoes']);
    addArenaSet('Companion Cube Set', [5, 5, 5, 5, 5], ['Drop Rate', 'Spawn Rate', 'Rare Monster Rate', 'Epic Monster Rate', 'The amount of damage dealt by Robacon/Robroccoli is tripled'], [150, 30, 150, 150, -1], ['Companion Cube Hat', 'Companion Cube Shirt', 'Companion Cube Gloves', 'Companion Cube Pants', 'Companion Cube Shoes']);
    addArenaSet('Fairy Godfather Set', [4, 5, 5, 5], ['Damage', 'Damage', 'Spawn Rate', 'Fairy Power Bar fills twice as fast'], [25, 25, 55, -1], ['Fairy Godfather Hat', 'Fairy Godfather Shirt', 'Fairy Godfather Gloves', 'Fairy Godfather Pants', 'Fairy Godfather Shoes']);
    addArenaSet('Fairy Godmother Set', [4, 5, 5, 5, 6, 6, 6, 6], ['Damage', 'Damage', 'Spawn Rate', 'Fairy Power Bar fills twice as fast', 'Damage', 'MaxMP', 'Spawn Rate', 'Potion Efficiency <b>+500%</b>'], [20, 20, 60, -1, 60, 300, 15, -1], ['Fairy Godmother Wand', 'Fairy Godmother Hat', 'Fairy Godmother Shirt', 'Fairy Godmother Gloves', 'Fairy Godmother Pants', 'Fairy Godmother Shoes']);
    addArenaSet('Censor Set', [5, 5, 6, 6], ['Damage', 'Spawn Rate', 'Damage', 'You become invulnerable to SOAP and completely ignore monster DEF when otherwise affected by SOAP'], [50, 50, 100, -1], ['Censor Sword', 'Censor Hat', 'Censor Shirt', 'Censor Gloves', 'Censor Pants', 'Censor Shoes']);
    addArenaSet('Wizard Set', [4, 5, 5, 5], ['Damage', 'Damage', 'EXP', 'MaxMP'], [15, 25, 50, 800], ['Wizard Hat', 'Wizard Shirt', 'Wizard Gloves', 'Wizard Pants', 'Wizard Shoes']);
    addArenaSet('Holy Glory Set', [5, 5, 6, 6], ['Spawn Rate', 'Damage', 'Spawn Rate', 'Damage'], [10, 25, 20, 250], ['Glaive of Smiting', 'Holy Glory Hat', 'Holy Glory Shirt', 'Holy Glory Gloves', 'Holy Glory Pants', 'Holy Glory Shoes']);
    addArenaSet('Dark Angel Set', [5, 5, 6, 6], ['Spawn Rate', 'Damage', 'Spawn Rate', 'Damage'], [10, 25, 25, 300], ['Darkglaive of Smiting', 'Dark Angel Hat', 'Dark Angel Shirt', 'Dark Angel Gloves', 'Dark Angel Pants', 'Dark Angel Shoes']);
    addArenaSet('Chaos Set', [5, 5, 6, 6], ['Spawn Rate', 'Damage', 'Spawn Rate', 'Damage'], [10, 25, 30, 300], ['Fiend Glaive', 'Chaos Hat', 'Chaos Shirt', 'Chaos Gloves', 'Chaos Pants', 'Chaos Shoes']);
    addArenaSet('CHAOS SET', [5, 5, 6, 6], ['Spawn Rate', 'Damage', 'Spawn Rate', 'Damage'], [10, 25, 35, 300], ['CHAOS AURA', 'CHAOS HAT', 'CHAOS SHIRT', 'CHAOS GLOVES', 'CHAOS PANTS', 'CHAOS SHOES']);
    addArenaSet('Green Armor of Loot', [5], ['Drop Rate'], [300], ['Green Hat of Loot', 'Green Shirt of Loot', 'Green Gloves of Loot', 'Green Pants of Loot', 'Green Shoes of Loot']);
    addArenaSet('Blue Armor of Loot', [5], ['Drop Rate'], [400], ['Blue Hat of Loot', 'Blue Shirt of Loot', 'Blue Gloves of Loot', 'Blue Pants of Loot', 'Blue Shoes of Loot']);
    addArenaSet('Purple Armor of Loot', [5], ['Drop Rate'], [500], ['Purple Hat of Loot', 'Purple Shirt of Loot', 'Purple Gloves of Loot', 'Purple Pants of Loot', 'Purple Shoes of Loot']);
    addArenaSet('Ultimate Set', [2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 9, 9], ['Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Damage', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Damage', 'Most loot drops are magnetized', 'Recover some MP whenever you deal damage. Effect is improved as you finish more Ascensions.'], [5, 5, 5, 5, 5, 50, 10, 10, 15, 100, -1, -1], ['Ultimate Weapon', 'Ultimate Hat', 'Ultimate Shirt', 'Ultimate Gloves', 'Ultimate Pants', 'Ultimate Shoes', 'Ultimate Pendant', 'Ultimate Earrings', 'Ultimate Trinket', 'Apocalypse Mode']);
    addArenaSet('Halloween Set', [5, 6], ['Coin', 'Candy Drop Rate <b>+50%</font>'], [30, -1], ['Ghostslayer', 'Halloween Hat', 'Halloween Shirt', 'Halloween Gloves', 'Halloween Pants', 'Halloween Shoes']);
    addArenaSet('Elite Lovely Set', [5], ['Coin'], [30], ['Elite Lovely Hat', 'Elite Lovely Shirt', 'Elite Lovely Gloves', 'Elite Lovely Pants', 'Elite Lovely Shoes']);
    addArenaSet('Pre-Explosion Set', [5, 6], ['Nostalgia <b>+50%</b>', 'Nostalgia <b>+150%</b>'], [-1, -1], ['Pre-Explosion Trophy', 'Pre-Explosion Hat', 'Pre-Explosion Shirt', 'Pre-Explosion Gloves', 'Pre-Explosion Pants', 'Pre-Explosion Shoes']);
    addArenaSet('2nd Anniversary Set', [5, 6], ['Nostalgia <b>+25%</b>', 'Nostalgia <b>+50%</b>'], [-1, -1], ['2nd Anniversary Hat', '2nd Anniversary Shirt', '2nd Anniversary Gloves', '2nd Anniversary Pants', '2nd Anniversary Shoes', '2nd Anniversary Medal']);
    addArenaSet('Dragon Slayer Set', [5, 5, 6, 6, 6, 6, 6], ['Spawn Rate', 'MaxHP', 'EXP', 'Damage', 'MaxMP', 'Attack Speed', 'Damage dealt in Endless Dungeon is multiplied by <b>1.2</b>'], [25, 100, 50, 75, 150, 50, -1], ['Any Dragon Slayer Weapon', 'Dragon Slayer Hat', 'Dragon Slayer Shirt', 'Dragon Slayer Gloves', 'Dragon Slayer Pants', 'Dragon Slayer Shoes']);
    addArenaSet('Demon Slayer Set', [5, 5, 6, 6, 6, 6, 6], ['Spawn Rate', 'MaxHP', 'EXP', 'Damage', 'MaxMP', 'Attack Speed', 'Damage dealt in Endless Dungeon is multiplied by <b>1.2</b>'], [25, 100, 50, 75, 150, 50, -1], ['Any Demon Slayer Weapon', 'Demon Slayer Hat', 'Demon Slayer Shirt', 'Demon Slayer Gloves', 'Demon Slayer Pants', 'Demon Slayer Shoes']);
    addArenaSet('Fire Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Fire Staff', 'Pendant of Fire', 'Fire Card', 'Fire Card [+]', 'Spell Scroll - Fire', 'Spell Scroll - Fire [+]']);
    addArenaSet('Ice Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Ice Staff', 'Pendant of Ice', 'Ice Card', 'Ice Card [+]', 'Spell Scroll - Ice', 'Spell Scroll - Ice [+]']);
    addArenaSet('Wind Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Wind Staff', 'Pendant of Wind', 'Wind Card', 'Wind Card [+]', 'Spell Scroll - Wind', 'Spell Scroll - Wind [+]']);
    addArenaSet('Earth Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Earth Staff', 'Pendant of Earth', 'Earth Card', 'Earth Card [+]', 'Spell Scroll - Earth', 'Spell Scroll - Earth [+]']);
    addArenaSet('Thunder Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Thunder Staff', 'Pendant of Thunder', 'Thunder Card', 'Thunder Card [+]', 'Spell Scroll - Thunder', 'Spell Scroll - Thunder [+]']);
    addArenaSet('Water Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [20, 30, 50], ['Epic Water Staff', 'Pendant of Water', 'Water Card', 'Water Card [+]', 'Spell Scroll - Water', 'Spell Scroll - Water [+]']);
    addArenaSet('Light Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [15, 30, 50], ['Light Glaive', 'Pendant of Light', 'Light Card', 'Light Card [+]', 'Spell Scroll - Light', 'Spell Scroll - Light [+]']);
    addArenaSet('Dark Elemental Set', [2, 3, 3], ['Damage', 'Damage', 'EXP'], [15, 30, 50], ['Dark Glaive', 'Pendant of Darkness', 'Dark Card', 'Dark Card [+]', 'Spell Scroll - Dark', 'Spell Scroll - Dark [+]']);
    addArenaSet('Set of Good Luck', [2], ['Drop Rate'], [500], ['Four-Leaf Clover', 'Gem of Good Luck']);
    addArenaSet('Reincarnation Set', [2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 9, 9], ['Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'EXP', 'Spawn Rate', 'Spawn Rate', 'Spawn Rate', 'EXP', 'Most loot drops are magnetized', 'Automatically gain some Arena EXP and A: TG EXP every second. Effect is multiplied by the number of Rebirths.'], [3, 3, 3, 3, 3, 30, 5, 10, 15, 60, -1, -1], ['Reincarnation Weapon', 'Reincarnation Hat', 'Reincarnation Shirt', 'Reincarnation Gloves', 'Reincarnation Pants', 'Reincarnation Shoes', 'Reincarnation Pendant', 'Reincarnation Earrings', 'Reincarnation Trinket', 'Apocalypse Mode']);
    addArenaSet('ULTRA SET', [2, 3, 4, 5], ['Damage', 'Damage', 'Damage', 'Damage'], [10, 20, 30, 40], ['ULTRA HAT', 'ULTRA SHIRT', 'ULTRA GLOVES', 'ULTRA PANTS', 'ULTRA SHOES']);
    addArenaSet('Kana Warrior Set', [2], ['EXP'], [39], ['Kana Warrior', 'Kana King']);
    addArenaSet('Epic Pyramid Set', [2, 2], ['Coin', 'Damage dealt in Dark Pyramid is multiplied by <b>1.2</b>'], [5, -1], ['Revolution Pyrabow', 'Revolution Earrings']);
    addArenaSet('Festive Set', [5, 5, 5, 6, 6], ['EXP', 'Damage', 'MaxMP', 'EXP', 'Damage'], [40, 40, 100, 160, 160], ['Festive Hat', 'Festive Shirt', 'Festive Gloves', 'Festive Pants', 'Festive Shoes', 'Technical Trophy #1']);
    addArenaSet('Choco Set', [5, 5, 5, 6, 6], ['EXP', 'Damage', 'MaxHP', 'EXP', 'Damage'], [40, 40, 100, 160, 160], ['Choco Hat', 'Choco Shirt', 'Choco Gloves', 'Choco Pants', 'Choco Shoes', 'Technical Trophy #2']);
    addArenaSet('Apocalypse', [2, 2], ['Spawn Rate', '<b>Apocalypse Mode</b>'], [25, -1], ['Worst Moon Gem', 'Invisible X']);
    addArenaSet('Lantern Set', [5, 5, 5, 6, 6], ['EXP', 'Damage', 'Spawn Rate', 'EXP', 'Damage'], [40, 40, 5, 160, 160], ['Lantern Hat', 'Lantern Shirt', 'Lantern Gloves', 'Lantern Pants', 'Lantern Shoes', 'Technical Trophy #3']);
    addArenaSet('GIGA SET', [1, 2, 2, 2, 2, 2, 2, 2], ['Damage', 'Damage', 'Spawn Rate', 'Drop Rate', 'Rare Monster Rate', 'Epic Monster Rate', 'Most loot drops are magnetized', 'Damage dealt in Final Chamber is multiplied by <b>1.2</b>'], [25, 50, 50, 150, 150, 150, -1, -1], ['GIGA PENDANT', 'GIGA EARRINGS']);
    _root.setCount = new Array();
    _root.setHighest = 0;
    checkFullInventory();
    var enemyList = [zeroItem];
    _root.totalMonster = 500;
    addArenaEnemy(1, 1, 25, -999999999, 100000, 1, 30, 2000, 1000, 1000, 'Invisible X', 'All', true, 0, 3, false, 30, 0, 0, 0, 'None', 0, 'Tukkun', '2012: Ye Olde Pub', 'Spawn Rate', 30, '', 0, '', 0, 'Spirit Recovery', -1, 0, 1, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(15, 0, 100, 0, 70, 30, 40, 230, 23, 100, 'Idle Dummy', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Beginner Training Zone', 'Instant Kill', 25, 'Hit Chance', 25, 'Mastery', 25, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(17, 1, 100, 0, 70, 30, 60, 240, 24, 100, 'Jr. Dummy', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Regular', 105, 0, 23, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(18, 1, 100, 0, 70, 30, 80, 250, 25, 100, 'Dark Jr. Dummy', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Regular', 105, 0, 23, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(20, 2, 100, 0, 80, 30, 100, 260, 26, 100, 'Wooden Dummy', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Regular', 105, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(21, 3, 100, 0, 80, 30, 120, 270, 27, 100, 'Wind Dummy', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(22, 2, 100, 0, 80, 30, 140, 280, 28, 100, 'Ice Dummy', 'Ice', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Regular', 105, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(23, 2, 100, 0, 80, 30, 160, 290, 29, 100, 'Fire Dummy', 'Fire', false, 0, 0, false, 0, 5, 100, 50, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, '', 0, 'Mastery', 5, 'Attack: Knockback', 50, 5, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(24, 2, 100, 0, 140, 30, 180, 200, 20, 100, 'Water Dummy', 'Water', false, 5, 0, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, 'Hit Chance', 2, 'Mastery', 5, 'Attack: Regular', 105, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(25, 2, 100, 0, 90, 40, 200, 300, 30, 100, 'Thunder Dummy', 'Thunder', false, 0, 0, false, 50, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Beginner Training Zone', 'Accuracy %', 5, 'EXP', 2, 'Mastery', 5, 'Attack: Regular', 105, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(34, 3, 250, 2, 110, 50, 250, 370, 37, 100, 'Living Dummy', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Advanced Training Zone', 'Accuracy %', 8, 'EXP', 4, 'Mastery', 8, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(36, 3, 250, 2, 110, 50, 300, 380, 38, 100, 'Healer Dummy', 'Light', false, 0, 30, false, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Advanced Training Zone', 'Accuracy %', 8, 'EXP', 4, 'Mastery', 8, 'Attack: Regular', 105, 0, 19, 'Heal', 50, 210, 24, '', 0, 0, 0);
    addArenaEnemy(38, 3, 250, 2, 110, 60, 350, 390, 39, 100, 'Dark Dummy', 'Dark', false, 0, 0, false, 0, 5, 960, 50, 'None', 0, 'ChioreanTudor', 'Advanced Training Zone', 'Accuracy %', 8, 'EXP', 4, 'Mastery', 8, 'Attack: Knockback', 50, 5, 14, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(40, 3, 250, 4, 130, 60, 350, 400, 40, 100, 'Ghost Dummy', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'ChioreanTudor', 'Advanced Training Zone', 'Accuracy %', 8, 'Resist', 4, 'Mastery', 8, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(45, 3, 500, 5, 110, 80, 700, 2000, 400, 500, 'Master Dummy', 'Earth', true, 0, 50, false, 300, 0, 0, 50, 'None', 0, 'ChioreanTudor', 'Advanced Training Zone', 'Reward', 4, 'Mastery', 4, 'Mastery', 12, 'Attack: Regular', 105, 0, 19, 'Heal', 50, 210, 24, 'Buff: Master', 10, 0, 80);
    addArenaEnemy(52, 1, 700, 6, 310, 90, 520, 500, 50, 100, 'Green Snail', 'Water', false, 0, 0, false, 0, 0, 0, 25, 'None', 0, 'Tukkun', 'Mystic Forest', 'Defense %', 10, '', 0, 'Resist', 5, 'Attack: Regular', 150, 0, 23, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(54, 1, 750, 8, 315, 90, 600, 510, 51, 100, 'Blue Snail', 'Water', false, 0, 0, false, 0, 0, 0, 25, 'None', 0, 'Tukkun', 'Mystic Forest', 'Defense %', 10, '', 0, 'Resist', 5, 'Attack: Regular', 150, 0, 23, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(65, 1.5, 1350, 17, 515, 130, 1700, 2250, 450, 500, 'Old Snail', 'Fire', true, 0, 50, false, 1900, 0, 0, 25, 'Slow', 3, 'Tukkun', 'Mystic Forest', 'Reward', 5, 'Resist', 5, 'Resist', 7, 'Attack: Regular', 150, 0, 22, 'Heal', 50, 300, 27, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(56, 1.5, 1000, 7, 355, 90, 720, 520, 52, 100, 'Dry Snail', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Toudou1620', 'Mystic Forest', 'Equipment Defense', 40, '', 0, 'Defense %', 10, 'Attack: Regular', 150, 0, 22, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(58, 5, 950, 4, 325, 90, 680, 530, 53, 100, 'Rabbit', 'Ice', false, 0, 0, false, 0, 0, 0, 100, 'None', 0, 'dragonewyn', 'Mystic Forest', 'Attack Speed', 1, '', 0, 'Attack Speed %', 10, 'Attack: Regular', 150, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(70, 5, 1250, 10, 540, 140, 2000, 2500, 500, 500, 'Carabbit', 'Ice', true, 0, 0, false, 2550, 0, 0, 100, 'None', 0, 'Tukkun', 'Mystic Forest', 'Reward', 5, 'Attack Speed', 1, 'Attack Speed %', 15, 'Attack: Regular', 150, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(60, 4, 1000, 5, 520, 100, 720, 540, 54, 100, 'Jr. Blob', 'Water', false, 0, 20, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Mystic Forest', 'MaxMP %', 20, '', 0, 'Critical Chance', 5, 'Attack: Regular', 150, 0, 17, 'Heal', 50, 300, 22, '', 0, 0, 0);
    addArenaEnemy(62, 4, 1050, 5, 530, 100, 800, 550, 55, 100, 'Blob', 'Water', false, 0, 25, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Mystic Forest', 'MaxMP %', 20, '', 0, 'Critical Chance', 5, 'Attack: Regular', 150, 0, 17, 'Heal', 50, 300, 22, '', 0, 0, 0);
    addArenaEnemy(64, 4, 1100, 5, 540, 100, 880, 560, 56, 100, 'Glob', 'Water', false, 0, 30, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'MaxMP %', 20, '', 0, 'Critical Chance', 5, 'Attack: Regular', 150, 0, 17, 'Heal', 50, 300, 22, '', 0, 0, 0);
    addArenaEnemy(80, 4, 1300, 12, 820, 150, 2500, 2750, 550, 500, 'BlobBB', 'Water', true, 0, 60, false, 3000, 0, 0, 50, 'None', 0, 'dragonewyn', 'Mystic Forest', 'Reward', 5, 'MaxMP %', 20, 'Critical Chance', 7, 'Attack: Regular', 150, 0, 17, 'Heal', 50, 300, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(65, 3.5, 1100, 6, 430, 100, 1000, 570, 57, 100, 'Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'MaxHP %', 20, '', 0, 'Critical Damage', 20, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(67, 3.5, 1150, 7, 430, 100, 1080, 580, 58, 100, 'Blue Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'MaxHP %', 20, '', 0, 'Critical Damage', 20, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(68, 3.5, 1200, 7, 430, 100, 1120, 590, 59, 100, 'Slime', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'MaxHP %', 20, '', 0, 'Critical Damage', 20, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(70, 3.5, 1250, 7, 440, 100, 1200, 600, 60, 100, 'Blue Slime', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'MaxHP %', 20, '', 0, 'Critical Damage', 20, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(71, 3.5, 1300, 8, 400, 100, 1040, 390, 39, 100, 'Jr. Goop', 'Water', false, 32, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'Equipment Attack', 40, '', 0, 'Attack %', 10, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(73, 3.5, 1350, 8, 410, 100, 1320, 400, 40, 100, 'Blue Jr. Goop', 'Water', false, 33, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Forest', 'Equipment Attack', 40, '', 0, 'Attack %', 10, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(74, 3.5, 1400, 8, 410, 100, 1360, 630, 63, 100, 'Goop', 'Water', false, 0, 0, false, 1700, 0, 0, 0, 'None', 0, 'Randomthought31', 'Mystic Forest', 'Equipment Attack', 40, '', 0, 'Attack %', 10, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(76, 3.5, 1450, 9, 415, 100, 1440, 640, 64, 100, 'Blue Goop', 'Water', false, 0, 0, false, 1750, 0, 0, 0, 'None', 0, 'Randomthought31', 'Mystic Forest', 'Equipment Attack', 40, '', 0, 'Attack %', 10, 'Attack: Regular', 150, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(77, 4.5, 1250, 8, 375, 100, 1400, 650, 65, 100, 'Octopus', 'Water', false, 0, 0, false, 2150, 0, 0, 50, 'None', 0, 'Tukkun', 'Mystic Forest', 'Attack Speed', 1, '', 0, 'Ignore Defense', 5, 'Attack: Regular', 150, 0, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(90, 1, 1800, 30, 505, 200, 1600, 700, 70, 200, 'Dark Snail', 'Dark', false, 0, 0, false, 0, 0, 0, 25, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, '', 0, 'Resist', 7, 'Attack: Regular', 175, 0, 23, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(92, 5, 2050, 16, 510, 200, 1680, 710, 71, 200, 'Dark Rabbit', 'Dark', false, 0, 0, false, 0, 0, 0, 100, 'None', 0, 'dragonewyn', 'Night Forest', 'Attack Speed', 1, '', 0, 'Attack Speed %', 15, 'Attack: Regular', 175, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(95, 4, 2100, 17, 820, 210, 1800, 720, 72, 200, 'Dark Blob', 'Dark', false, 0, 40, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Night Forest', 'MaxMP %', 30, '', 0, 'Critical Chance', 7, 'Attack: Regular', 175, 0, 25, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(97, 3.5, 2850, 20, 650, 210, 1920, 730, 73, 200, 'Dark Jelly', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'MaxHP %', 30, '', 0, 'Critical Damage', 30, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(100, 3.5, 2950, 22, 660, 220, 2000, 740, 74, 200, 'Dark Slime', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'MaxHP %', 30, '', 0, 'Critical Damage', 30, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(102, 3.5, 3350, 23, 600, 220, 2080, 470, 47, 200, 'Dark Jr. Goop', 'Dark', false, 41, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Equipment Attack', 60, '', 0, 'Attack %', 15, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(105, 3.5, 3100, 24, 610, 230, 2200, 750, 75, 200, 'Dark Goop', 'Dark', false, 0, 0, false, 2400, 0, 0, 0, 'None', 0, 'Randomthought31', 'Night Forest', 'Equipment Attack', 60, '', 0, 'Attack %', 15, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(107, 1.5, 2350, 30, 620, 230, 2800, 760, 76, 200, 'Tree Stump', 'Earth', false, 0, 50, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, '', 0, 'MaxHP %', 30, 'Attack: Regular', 175, 0, 22, 'Heal', 50, 350, 27, '', 0, 0, 0);
    addArenaEnemy(110, 1.5, 2450, 32, 630, 240, 2900, 770, 77, 200, 'Dark Stump', 'Dark', false, 0, 60, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, '', 0, 'MaxHP %', 30, 'Attack: Regular', 175, 0, 22, 'Heal', 50, 350, 27, '', 0, 0, 0);
    addArenaEnemy(112, 1.5, 2500, 56, 635, 240, 3000, 780, 78, 200, 'Zombie Stump', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, 'Resist', 7, 'MaxHP %', 30, 'Attack: Regular', 175, 0, 22, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(115, 2, 2550, 35, 645, 250, 3100, 790, 79, 200, 'Green Tree', 'Earth', false, 0, 80, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, '', 0, 'MaxMP %', 30, 'Attack: Regular', 175, 0, 21, 'Heal', 50, 350, 26, '', 0, 0, 0);
    addArenaEnemy(120, 2, 2650, 39, 660, 250, 3200, 800, 80, 200, 'Red Tree', 'Earth', false, 0, 90, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Defense %', 15, '', 0, 'MaxMP %', 30, 'Attack: Regular', 175, 0, 21, 'Heal', 50, 350, 26, '', 0, 0, 0);
    addArenaEnemy(135, 2, 4500, 87, 1070, 400, 8000, 4000, 800, 1000, 'Treeman', 'Earth', true, 0, 200, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Reward', 7, 'Resist', 7, 'MaxMP %', 45, 'Attack: Regular', 175, 0, 21, 'Heal', 50, 350, 26, '', 0, 0, 0);
    addArenaEnemy(122, 2.5, 2450, 31, 600, 250, 2880, 810, 81, 200, 'Moose', 'Light', false, 0, 0, false, 0, 0, 0, 50, 'None', 0, 'Randomthought31', 'Night Forest', 'Negate Effect', 7, '', 0, 'Potion Efficiency', 15, 'Attack: Regular', 175, 0, 20, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(125, 2.5, 2500, 32, 610, 250, 3000, 830, 83, 200, 'Orange Moose', 'Light', false, 0, 0, false, 0, 0, 0, 50, 'None', 0, 'Randomthought31', 'Night Forest', 'Negate Effect', 7, '', 0, 'Potion Efficiency', 15, 'Attack: Regular', 175, 0, 20, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(127, 0, 2800, 45, 960, 275, 3200, 530, 53, 200, 'Mushouse', 'Earth', false, 51, 0, false, 3050, 7, 3800, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Critical Chance', 7, '', 0, 'Equipment Defense', 60, 'Attack: Knockback', 85, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(130, 3.5, 3450, 48, 770, 275, 3280, 850, 85, 200, 'Mushroom', 'Earth', false, 0, 0, false, 2950, 0, 0, 0, 'None', 0, 'Tukkun', 'Night Forest', 'Critical Damage', 30, '', 0, 'Equipment Defense', 60, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(145, 0, 4800, 92, 1570, 450, 8000, 3000, 600, 1000, 'Giant Mushouse', 'Earth', true, 53, 0, false, 5200, 7, 6500, 0, 'None', 0, 'Guille', 'Night Forest', 'Reward', 7, 'Critical Chance', 7, 'Equipment Defense', 90, 'Attack: Knockback', 85, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(160, 3.5, 6350, 120, 1310, 450, 10000, 4500, 900, 1000, 'Giant Mushroom', 'Earth', true, 0, 0, false, 5450, 0, 0, 0, 'None', 0, 'Guille', 'Night Forest', 'Reward', 7, 'Critical Damage', 30, 'Equipment Defense', 90, 'Attack: Regular', 175, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(175, 4, 6100, 120, 1270, 450, 15000, 5000, 1000, 1000, 'Forest Spirit', 'Earth', true, 0, 0, false, 7350, 0, 0, 0, 'None', 0, 'PartyzantPL', 'Night Forest', 'Reward', 7, 'Boss Damage', 7, 'Potion Efficiency', 30, 'Attack: Regular', 175, 0, 17, 'Heal', 50, 350, 22, 'Spirit Recovery', 2, 0, 5);
    addArenaEnemy(200, 4.5, 4400, 130, 1030, 1050, 6000, 1000, 100, 300, 'Bird', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, '', 0, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(210, 4.5, 4600, 145, 1070, 1050, 6800, 1050, 105, 300, 'Blue Bird', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, '', 0, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(220, 4.5, 4850, 145, 1100, 1050, 7600, 1100, 110, 300, 'Healer Bird', 'Light', false, 0, 300, false, 0, 0, 0, 0, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, '', 0, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, 'Heal', 50, 400, 21, '', 0, 0, 0);
    addArenaEnemy(230, 4.5, 4550, 160, 1020, 1050, 8400, 1150, 115, 300, 'Dark Bird', 'Dark', false, 0, 0, false, 0, 0, 0, 50, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, '', 0, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(240, 4.5, 4250, 180, 1060, 1050, 9200, 1200, 120, 300, 'Thunderbird', 'Thunder', false, 0, 0, false, 5100, 0, 0, 50, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, '', 0, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(250, 4.5, 4950, 295, 1090, 1050, 10000, 1250, 125, 300, 'Zombie Bird', 'Dark', false, 0, 0, true, 0, 0, 0, 50, 'None', 0, 'Ryo_Sangnoir', 'The Sky', 'Attack Speed', 2, 'Resist', 10, 'Dodge Chance', 10, 'Attack: Regular', 200, 0, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(260, 4.5, 5650, 240, 1760, 1300, 11200, 1300, 130, 300, 'Seagull', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 3, 'Toudou1620', 'The Sky', 'Attack Speed', 2, 'Critical Chance', 10, 'Evasion %', 20, 'Attack: Weaken', 100, 5, 21, 'Attack: Regular', 200, 0, 26, '', 0, 0, 0);
    addArenaEnemy(275, 4.5, 10500, 365, 1760, 1000, 50000, 6500, 1300, 1500, 'Feonix', 'Fire', true, 0, 0, false, 9600, 0, 0, 50, 'None', 0, 'Tukkun', 'The Sky', 'Reward', 10, 'Attack Speed %', 20, 'Attack %', 30, 'Attack: Regular', 200, 0, 16, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(300, 5.5, 8950, 450, 1880, 1880, 70000, 7000, 1400, 1500, 'Air Spirit', 'Wind', true, 0, 0, false, 11000, 0, 0, 50, 'None', 0, 'PartyzantPL', 'Polluted Sky', 'Reward', 10, 'Boss Damage', 10, 'Potion Efficiency', 40, 'Attack: Regular', 200, 0, 14, 'Buff: Enrage', 10, 0, 80, 'Spirit Recovery', 3, 0, 5);
    addArenaEnemy(280, 4, 6350, 255, 2840, 1320, 14000, 1400, 140, 300, 'Beeterfly', 'Wind', false, 0, 400, false, 5450, 0, 0, 0, 'Poison', 3, 'Toudou1620', 'Polluted Sky', 'Hit Chance', 10, 'Critical Damage', 40, 'Accuracy %', 20, 'Attack: Poison', 100, 5, 22, 'Attack: Regular', 200, 0, 27, 'Heal', 50, 400, 32);
    addArenaEnemy(330, 3, 11000, 470, 1600, 1600, 18000, 1750, 175, 400, 'Bunnyhead', 'Thunder', false, 0, 0, false, 13000, 0, 0, 0, 'None', 0, 'Tukkun', 'Deadlands', 'Attack Speed', 2, 'Non-Boss Damage', 12, 'Damage', 12, 'Attack: Regular', 225, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(340, 3, 11500, 505, 1640, 1640, 20000, 1800, 180, 400, 'Dark Bunnyhead', 'Dark', false, 0, 0, false, 13500, 0, 0, 0, 'None', 0, 'Tukkun', 'Deadlands', 'Attack Speed', 2, 'Non-Boss Damage', 12, 'Damage', 12, 'Attack: Regular', 225, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(350, 2, 6350, 485, 1510, 2960, 22000, 1850, 185, 400, 'Earth Worm', 'Earth', false, 0, 0, false, 7600, 0, 0, 50, 'None', 0, 'Tukkun', 'Deadlands', 'Dodge Chance', 12, '', 0, 'Evasion %', 25, 'Attack: Regular', 225, 0, 21, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(360, 2, 7800, 575, 1710, 2230, 24000, 1900, 190, 400, 'Spyder', 'Earth', false, 0, 0, false, 7800, 0, 0, 0, 'Poison', 2, 'Tukkun', 'Deadlands', 'Equipment Attack', 100, '', 0, 'Evasion %', 25, 'Attack: Poison', 110, 5, 26, 'Attack: Regular', 225, 0, 31, '', 0, 0, 0);
    addArenaEnemy(370, 5, 6250, 615, 1750, 2630, 26000, 1950, 195, 400, 'Stinky Rat', 'Earth', false, 0, 0, false, 7500, 0, 0, 0, 'Poison', 2, 'ChioreanTudor', 'Deadlands', 'Attack Speed', 2, '', 0, 'Dodge Chance', 12, 'Attack: Poison', 110, 5, 20, 'Attack: Regular', 225, 0, 25, '', 0, 0, 0);
    addArenaEnemy(380, 5, 6450, 655, 1790, 2690, 28000, 2000, 200, 400, 'Rat', 'Earth', false, 0, 0, false, 7750, 0, 0, 0, 'Poison', 2, 'Tukkun', 'Deadlands', 'Attack Speed', 2, '', 0, 'Dodge Chance', 12, 'Attack: Poison', 110, 5, 20, 'Attack: Regular', 225, 0, 25, '', 0, 0, 0);
    addArenaEnemy(400, 5, 10000, 995, 2520, 3780, 160000, 8000, 1600, 2000, 'Giant Rat', 'Earth', true, 0, 0, false, 12000, 0, 0, 25, 'Poison', 3, 'Tukkun', 'Deadlands', 'Reward', 12, 'Attack Speed %', 25, 'Dodge Chance', 18, 'Attack: Poison', 110, 5, 20, 'Attack: Regular', 225, 0, 25, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(450, 3, 13000, 1200, 2260, 3390, 50000, 2050, 205, 600, 'Desert Slime', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'The Desert', 'Attack %', 30, '', 0, 'Dodge Chance', 15, 'Attack: Stun', 275, 2, 34, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(465, 3, 12000, 1300, 2310, 3470, 55000, 2100, 210, 600, 'Mud Slime', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Slow', 5, 'Tukkun', 'The Desert', 'Attack %', 30, '', 0, 'Dodge Chance', 15, 'Attack: Stun', 275, 2, 34, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(480, 2.5, 11500, 1400, 2370, 2370, 60000, 2150, 215, 600, 'Cactus', 'Earth', false, 0, 0, false, 11000, 0, 0, 0, 'Slow', 2, 'Darkranboria', 'The Desert', 'Attack %', 30, '', 0, 'MaxHP %', 60, 'Attack: Regular', 275, 0, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(495, 2.5, 12000, 1500, 2430, 2430, 66000, 2200, 220, 600, 'Flame Cactus', 'Fire', false, 0, 0, false, 11000, 0, 0, 0, 'Poison', 2, 'Darkranboria', 'The Desert', 'Attack %', 30, '', 0, 'MaxHP %', 60, 'Attack: Poison', 135, 5, 25, 'Attack: Regular', 275, 0, 30, '', 0, 0, 0);
    addArenaEnemy(510, 5, 8750, 1600, 3740, 2490, 64000, 2250, 225, 600, 'Green Snake', 'Earth', false, 0, 0, false, 10500, 0, 0, 0, 'Poison', 2, 'Tukkun', 'The Desert', 'Attack Speed', 3, '', 0, 'Hit Chance', 15, 'Attack: Poison', 135, 5, 20, 'Attack: Regular', 275, 0, 25, '', 0, 0, 0);
    addArenaEnemy(525, 5, 9000, 1700, 3810, 2540, 70000, 2300, 230, 600, 'Red Snake', 'Fire', false, 0, 0, false, 11000, 0, 0, 0, 'Poison', 2, 'Tukkun', 'The Desert', 'Attack Speed', 3, '', 0, 'Hit Chance', 15, 'Attack: Poison', 135, 5, 20, 'Attack: Regular', 275, 0, 25, '', 0, 0, 0);
    addArenaEnemy(540, 5, 9300, 1850, 3900, 2600, 76000, 2350, 235, 600, 'Dark Snake', 'Dark', false, 0, 0, false, 11500, 0, 0, 0, 'Poison', 2, 'Tukkun', 'The Desert', 'Attack Speed', 3, '', 0, 'Hit Chance', 15, 'Attack: Poison', 135, 5, 20, 'Attack: Regular', 275, 0, 25, '', 0, 0, 0);
    addArenaEnemy(555, 2, 11500, 1950, 2660, 6750, 80000, 2400, 240, 600, 'Sand Abuser', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Blind', 6, 'Tukkun', 'The Desert', 'Evasion %', 30, 'Dodge Chance', 15, 'Evasion %', 30, 'Attack: Blind', 135, 5, 26, 'Attack: Regular', 275, 0, 31, '', 0, 0, 0);
    addArenaEnemy(570, 2, 12000, 1850, 2440, 2440, 85000, 2450, 245, 600, 'Desert Dwarf', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'None', 0, 'Tukkun', 'The Desert', 'Drop Rate', 15, '', 0, 'EXP', 15, 'Attack: Regular', 275, 0, 21, 'Buff: Enrage', 10, 0, 80, 'Produce Loot: Pixel', 1000, 0, 20);
    addArenaEnemy(585, 2, 12000, 1950, 2500, 2500, 90000, 2500, 250, 600, 'Dark Dwarf', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'None', 0, 'Tukkun', 'The Desert', 'Drop Rate', 15, '', 0, 'EXP', 15, 'Attack: Regular', 275, 0, 21, 'Buff: Enrage', 10, 0, 80, 'Produce Loot: Material', 500, 0, 20);
    addArenaEnemy(650, 2, 16500, 5100, 4090, 6140, 750000, 11000, 2200, 3000, 'Sand Giant', 'Earth', true, 0, 15000, false, 19500, 0, 0, 75, 'Blind', 4, 'Tukkun', 'The Desert', 'Reward', 15, 'Dodge Chance', 15, 'Resist', 22, 'Attack: Blind', 135, 5, 26, 'Attack: Regular', 275, 0, 31, 'Heal', 50, 550, 36);
    addArenaEnemy(720, 1.5, 14000, 7750, 3240, 3240, 180000, 2800, 280, 800, 'Green Turtle', 'Water', false, 0, 0, false, 17000, 0, 0, 75, 'None', 0, 'HeroicHero', 'The Beach', 'Defense %', 35, '', 0, 'Resist', 17, 'Attack: Regular', 325, 0, 22, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(740, 1.5, 14500, 8250, 3310, 3310, 200000, 2850, 285, 800, 'Blue Turtle', 'Water', false, 0, 0, false, 17500, 0, 0, 75, 'None', 0, 'HeroicHero', 'The Beach', 'Defense %', 35, '', 0, 'Resist', 17, 'Attack: Regular', 325, 0, 22, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(760, 1.5, 18500, 8950, 3760, 3760, 220000, 2900, 290, 800, 'Bonefish', 'Dark', false, 0, 0, true, 0, 15, 27500, 0, 'None', 0, 'CTSG', 'The Beach', 'Resist', 17, '', 0, 'Equipment Defense', 140, 'Attack: Knockback', 160, 5, 17, 'Produce Loot: Coin', 2000, 0, 20, '', 0, 0, 0);
    addArenaEnemy(780, 3, 18000, 6900, 3840, 3840, 240000, 2950, 295, 800, 'Floating Fish', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'The Beach', 'Magic Resist', 17, '', 0, 'MaxMP %', 70, 'Attack: Regular', 325, 0, 19, 'Buff Extension', 2, 0, 10, '', 0, 0, 0);
    addArenaEnemy(800, 4, 25000, 5600, 3920, 3920, 260000, 3000, 300, 800, 'White Duck', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'The Beach', 'Spawn Rate', 10, 'Attack Speed', 3, 'Attack %', 35, 'Attack: Regular', 325, 0, 17, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(820, 4, 25500, 5900, 4000, 4000, 280000, 3050, 305, 800, 'Dark Duck', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'The Beach', 'Spawn Rate', 10, 'Attack Speed', 3, 'Attack %', 35, 'Attack: Regular', 325, 0, 17, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(840, 5, 26500, 5600, 3670, 3670, 300000, 3100, 310, 800, 'Mad Duck', 'Water', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'Toudou1620', 'The Beach', 'Attack Speed', 3, 'Non-Boss Damage', 17, 'Attack %', 35, 'Attack: Regular', 325, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(860, 5, 30500, 5900, 4160, 4160, 320000, 3150, 315, 800, 'Mallard', 'Water', false, 0, 14000, false, 0, 0, 0, 0, 'None', 0, '?', 'The Beach', 'Attack Speed', 3, 'Non-Boss Damage', 17, 'Damage', 17, 'Attack: Regular', 325, 0, 15, 'Heal', 50, 650, 20, '', 0, 0, 0);
    addArenaEnemy(880, 5, 31000, 6250, 4240, 4240, 340000, 3200, 320, 800, 'Dark Mallard', 'Dark', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, '?', 'The Beach', 'Attack Speed', 3, 'Non-Boss Damage', 17, 'Damage', 17, 'Attack: Regular', 325, 0, 15, 'Heal', 50, 650, 20, '', 0, 0, 0);
    addArenaEnemy(900, 1.5, 21500, 6550, 3890, 3890, 440000, 3250, 325, 800, 'Thunder Lizard', 'Thunder', false, 0, 0, false, 21500, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Equipment Attack', 140, '', 0, 'MaxHP %', 70, 'Attack: Regular', 325, 0, 22, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(920, 1.5, 22000, 6900, 3960, 3960, 470000, 3300, 330, 800, 'Wind Lizard', 'Wind', false, 0, 0, false, 22000, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Equipment Attack', 140, '', 0, 'MaxHP %', 70, 'Attack: Regular', 325, 0, 22, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(940, 1.5, 22500, 7200, 4030, 4030, 500000, 3350, 335, 800, 'Water Lizard', 'Water', false, 0, 0, false, 22500, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Equipment Attack', 140, '', 0, 'MaxHP %', 70, 'Attack: Regular', 325, 0, 22, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(960, 2, 19000, 9850, 4110, 5350, 480000, 3400, 340, 800, 'Blue Crab', 'Water', false, 0, 0, false, 23000, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Evasion %', 35, '', 0, 'Defense %', 35, 'Attack: Regular', 325, 0, 21, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(980, 2, 19500, 10500, 4180, 5440, 520000, 3450, 345, 800, 'Red Crab', 'Fire', false, 0, 0, false, 23500, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Evasion %', 35, '', 0, 'Defense %', 35, 'Attack: Regular', 325, 0, 21, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1000, 2, 20000, 11000, 4260, 5540, 560000, 3500, 350, 800, 'Black Crab', 'Dark', false, 0, 0, false, 24000, 0, 0, 50, 'None', 0, 'Toudou1620', 'The Beach', 'Evasion %', 35, '', 0, 'Defense %', 35, 'Attack: Regular', 325, 0, 21, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1100, 5, 35500, 15000, 6830, 6830, 4000000, 15000, 3000, 4000, 'Water Spirit', 'Water', true, 0, 0, false, 42500, 0, 0, 50, 'None', 0, 'PartyzantPL', 'Secret Beach', 'Reward', 17, 'Boss Damage', 17, 'Potion Efficiency', 70, 'Attack: Regular', 325, 0, 15, 'Buff: Enrage', 10, 0, 80, 'Spirit Recovery', 4, 0, 5);
    addArenaEnemy(1200, 4, 51000, 30500, 8210, 8210, 5000000, 16000, 3200, 4000, 'Zombie Duck', 'Dark', true, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Secret Beach', 'Reward', 17, 'Resist', 17, 'Attack %', 52, 'Attack: Regular', 325, 0, 17, 'Attack: Silence', 290, 18, 23, 'Attack: Defense Down', 290, 3, 13);
    addArenaEnemy(1100, 0, 27000, 22000, 5270, 5270, 800000, 3900, 390, 1200, 'Rocky', 'Earth', false, 0, 31000, false, 0, 7, 40000, 0, 'None', 0, 'Randomthought31', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Resist', 20, 'Attack: Knockback', 185, 5, 20, 'Heal', 50, 750, 30, '', 0, 0, 0);
    addArenaEnemy(1125, 3, 36500, 23500, 5920, 5380, 840000, 3950, 395, 1200, 'Moving Rocky', 'Earth', false, 0, 33000, false, 0, 7, 39000, 0, 'None', 0, 'Randomthought31', 'Binary Battlefield', 'Defense %', 40, 'Double Hit Chance', 20, 'Resist', 20, 'Attack: Knockback', 185, 5, 14, 'Heal', 50, 750, 24, '', 0, 0, 0);
    addArenaEnemy(1150, 3, 38500, 30500, 5480, 5480, 900000, 4000, 400, 1200, 'RM-04', 'Thunder', false, 0, 0, false, 0, 10, 40000, 0, 'None', 0, 'Tukkun', 'Binary Battlefield', 'Defense %', 40, 'Reflect', 600, 'Reflect', 600, 'Attack: Knockback', 185, 5, 14, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1175, 3, 26500, 19000, 5580, 7260, 940000, 4050, 405, 1200, 'Robo Spyder', 'Thunder', false, 0, 0, false, 26500, 10, 33000, 0, 'Poison', 4, 'Tukkun', 'Binary Battlefield', 'Defense %', 40, 'Equipment Attack', 160, 'Evasion %', 40, 'Attack: Poison', 185, 5, 24, 'Attack: Knockback', 185, 5, 24, '', 0, 0, 0);
    addArenaEnemy(1200, 2.5, 24000, 39000, 5690, 5690, 980000, 4100, 410, 1200, 'Robospook', 'Dark', false, 0, 0, true, 29000, 10, 36000, 0, 'Slow', 4, 'Tukkun', 'Binary Battlefield', 'Resist', 20, 'Defense %', 40, 'Defense %', 40, 'Attack: Knockback', 185, 5, 15, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1225, 0, 35500, 21000, 5790, 5790, 1020000, 4150, 415, 1200, 'Crappy Cannon', 'Thunder', false, 0, 0, false, 32500, 10, 40500, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Attack %', 40, 'Attack: Knockback', 185, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1250, 0, 36000, 22000, 5900, 5900, 1060000, 4200, 420, 1200, 'Defense Cannon', 'Thunder', false, 0, 0, false, 33500, 10, 41500, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Attack %', 40, 'Attack: Knockback', 185, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1275, 3, 42000, 23000, 6000, 6000, 1120000, 4250, 425, 1200, 'Walking Cannon', 'Thunder', false, 0, 0, false, 39000, 10, 40500, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, 'Attack Speed %', 40, 'Attack %', 40, 'Attack: Knockback', 185, 5, 14, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1300, 3, 37000, 21500, 6110, 6110, 1160000, 4300, 430, 1200, 'Computer', 'Light', false, 0, 48000, false, 0, 10, 46000, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Attack Speed %', 40, 'Attack: Knockback', 185, 5, 14, 'Heal', 50, 750, 24, '', 0, 0, 0);
    addArenaEnemy(1325, 3, 37500, 22500, 6210, 6210, 1220000, 4350, 435, 1200, 'Lolputer', 'Light', false, 0, 51000, false, 0, 10, 47000, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Attack Speed %', 40, 'Attack: Knockback', 185, 5, 14, 'Heal', 50, 750, 24, '', 0, 0, 0);
    addArenaEnemy(1350, 3, 38500, 23500, 6320, 6320, 1280000, 4400, 440, 1200, 'Computetris', 'Light', false, 0, 54000, false, 0, 10, 48000, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, '', 0, 'Attack Speed %', 40, 'Attack: Knockback', 185, 5, 14, 'Heal', 50, 750, 24, '', 0, 0, 0);
    addArenaEnemy(1375, 3, 55000, 27500, 7070, 6420, 1340000, 4450, 445, 1200, 'Compbroken', 'Light', false, 0, 0, false, 0, 10, 49000, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, 'Critical Damage', 80, 'Attack Speed %', 40, 'Attack: Knockback', 185, 5, 14, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1400, 3, 40000, 28500, 9150, 6530, 1400000, 4500, 450, 1200, 'BSOD', 'Water', false, 0, 0, false, 43500, 10, 45000, 0, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Defense %', 40, 'Critical Chance', 20, 'Attack Speed %', 40, 'Attack: Knockback', 185, 5, 14, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1425, 5, 45500, 20500, 6570, 5970, 1460000, 4550, 455, 1200, 'Blue Robo', 'Water', false, 0, 0, false, 39000, 15, 37000, 50, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Attack Speed', 4, 'Non-Boss Damage', 20, 'Critical Damage', 80, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1450, 5, 47000, 21500, 6680, 6070, 1520000, 4600, 460, 1200, 'Green Robo', 'Wind', false, 0, 0, false, 40000, 15, 38000, 50, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Attack Speed', 4, 'Non-Boss Damage', 20, 'Critical Damage', 80, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1475, 5, 47500, 22000, 6780, 6160, 1600000, 4650, 465, 1200, 'Red Robo', 'Fire', false, 0, 0, false, 41000, 15, 38500, 50, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Attack Speed', 4, 'Non-Boss Damage', 20, 'Critical Damage', 80, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1500, 0, 53500, 25500, 6960, 6960, 1600000, 4700, 470, 1200, 'Bomb', 'Fire', false, 0, 0, false, 0, 1, 51500, 0, 'Self-Destruct', 1, 'Dragonayzer', 'Binary Battlefield', 'Damage', 20, '', 0, 'Equipment Attack', 160, 'Attack: Knockback', 185, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1525, 0, 54500, 26500, 7060, 7060, 1700000, 4750, 475, 1200, 'Enraged Bomb', 'Fire', false, 0, 0, false, 0, 1, 52500, 0, 'Self-Destruct', 1, 'Dragonayzer', 'Binary Battlefield', 'Damage', 20, '', 0, 'Equipment Attack', 160, 'Attack: Knockback', 185, 5, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1550, 6, 37500, 36000, 7170, 7170, 1800000, 4800, 480, 1200, 'Clawbot', 'Thunder', false, 0, 0, false, 0, 10, 43000, 0, 'Poison', 5, 'meshwire', 'Binary Battlefield', 'Defense %', 40, 'Attack Speed', 4, 'Equipment Attack', 160, 'Attack: Poison', 185, 5, 18, 'Attack: Knockback', 185, 5, 18, 'Buff: Power', 10, 0, 80);
    addArenaEnemy(1700, 5, 41000, 90000, 10500, 10500, 15000000, 20000, 4000, 6000, 'Robosaurus', 'Thunder', true, 0, 0, false, 49500, 20, 61500, 75, 'Slow', 5, 'meshwire', 'Binary Battlefield', 'Reward', 20, 'Defense %', 40, 'Resist', 20, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1575, 0, 40500, 28500, 7280, 7280, 1900000, 4850, 485, 1200, 'Weird Box', 'Thunder', false, 0, 0, false, 0, 10, 60500, 0, 'None', 0, 'Darkranboria', 'Binary Battlefield', 'Reward', 20, '', 0, 'Drop Rate', 40, 'Attack: Knockback', 185, 5, 20, 'Produce Loot: Pixel', 3000, 0, 20, 'Produce Loot: Rare Item', 0, 0, 150);
    addArenaEnemy(1600, 0, 41000, 38500, 7380, 7380, 2000000, 4900, 490, 1200, 'Metal Box', 'Thunder', false, 0, 0, false, 0, 10, 61500, 0, 'None', 0, 'Darkranboria', 'Binary Battlefield', 'Reward', 20, 'Defense %', 40, 'Drop Rate', 40, 'Attack: Knockback', 185, 5, 20, 'Produce Loot: Material', 1500, 0, 20, 'Produce Loot: Rare Item', 0, 0, 150);
    addArenaEnemy(1625, 5, 41500, 27500, 6740, 6740, 2200000, 4950, 495, 1200, 'Octoroc', 'Fire', false, 0, 0, false, 38500, 15, 43500, 50, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Attack Speed', 4, '', 0, 'Attack %', 40, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, 'Produce Loot: Stat', 0, 0, 90);
    addArenaEnemy(1650, 5, 42000, 28500, 6840, 6840, 2300000, 5000, 500, 1200, 'Evil Eye', 'Thunder', false, 0, 0, false, 39000, 15, 44000, 50, 'None', 0, 'ChioreanTudor', 'Binary Battlefield', 'Attack Speed', 4, '', 0, 'Attack %', 40, 'Attack: Knockback', 185, 5, 10, 'Buff: Enrage', 10, 0, 80, 'Attack: Defense Down', 125, 5, 30);
    addArenaEnemy(1800, 3, 71000, 52500, 11100, 11100, 18000000, 22500, 4500, 6000, 'Robo Spirit', 'Thunder', true, 0, 0, false, 85500, 0, 0, 50, 'None', 0, 'PartyzantPL', 'Binary Battlefield', 'Reward', 20, 'Boss Damage', 20, 'Potion Efficiency', 80, 'Attack: Power Down', 240, 5, 29, 'Buff: Enrage', 10, 0, 80, 'Spirit Recovery', 5, 0, 5);
    addArenaEnemy(1900, 4, 53000, 39500, 8010, 8010, 3200000, 5600, 560, 1800, 'Chagon', 'Fire', false, 0, 150000, false, 49000, 0, 0, 50, 'Poison', 4, 'Randomthought31', 'Dragon Cave', 'Pixel', 22, 'Non-Boss Damage', 22, 'Attack %', 45, 'Attack: Poison', 210, 5, 22, 'Attack: Regular', 425, 0, 27, 'Heal', 50, 850, 32);
    addArenaEnemy(1950, 4, 54500, 42000, 8210, 8210, 3400000, 5650, 565, 1800, 'Gragon', 'Earth', false, 0, 160000, false, 50500, 0, 0, 50, 'Poison', 4, 'Randomthought31', 'Dragon Cave', 'Pixel', 22, 'Non-Boss Damage', 22, 'Attack %', 45, 'Attack: Poison', 210, 5, 22, 'Attack: Regular', 425, 0, 27, 'Heal', 50, 850, 32);
    addArenaEnemy(2000, 4, 56500, 44500, 8410, 8410, 3600000, 5700, 570, 1800, 'Wragon', 'Water', false, 0, 180000, false, 52000, 0, 0, 50, 'Slow', 4, 'Randomthought31', 'Dragon Cave', 'Pixel', 22, 'Non-Boss Damage', 22, 'Attack %', 45, 'Attack: Regular', 425, 0, 17, 'Heal', 50, 850, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(2050, 4, 58500, 47500, 8600, 8600, 3800000, 5750, 575, 1800, 'Dagon', 'Dark', false, 0, 190000, false, 54000, 0, 0, 50, 'Blind', 4, 'Randomthought31', 'Dragon Cave', 'Pixel', 22, 'Non-Boss Damage', 22, 'Attack %', 45, 'Attack: Blind', 210, 5, 22, 'Attack: Regular', 425, 0, 27, 'Heal', 50, 850, 32);
    addArenaEnemy(2100, 4, 50000, 55500, 8800, 8800, 4000000, 5800, 580, 1800, 'Gryph', 'Dark', false, 0, 0, false, 60000, 0, 0, 75, 'Weaken', 4, 'CTSG', 'Dragon Cave', 'Negate Effect', 22, '', 0, 'Ignore Defense', 22, 'Attack: Weaken', 210, 5, 22, 'Attack: Regular', 425, 0, 27, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(2150, 4.5, 73500, 58500, 9000, 9000, 4400000, 5850, 585, 1800, 'Fire Dragon', 'Fire', false, 0, 0, false, 88000, 0, 0, 75, 'Poison', 5, 'HeroicHero', 'Dragon Cave', 'Attack Speed', 4, 'Damage', 22, 'Damage', 22, 'Attack: Poison', 210, 5, 21, 'Attack: Regular', 425, 0, 26, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(2200, 4.5, 75500, 62000, 9200, 9200, 4800000, 5900, 590, 1800, 'Frost Dragon', 'Ice', false, 0, 0, false, 91000, 0, 0, 75, 'Slow', 5, 'HeroicHero', 'Dragon Cave', 'Attack Speed', 4, 'Damage', 22, 'Damage', 22, 'Attack: Regular', 425, 0, 16, 'Buff: Enrage', 10, 0, 80, 'HP Recovery', 11, 0, 15);
    addArenaEnemy(2250, 4.5, 78000, 65000, 9400, 9400, 5200000, 5950, 595, 1800, 'Nature Dragon', 'Earth', false, 0, 0, false, 93500, 0, 0, 75, 'Blind', 5, 'HeroicHero', 'Dragon Cave', 'Attack Speed', 4, 'Damage', 22, 'Damage', 22, 'Attack: Blind', 210, 5, 21, 'Attack: Regular', 425, 0, 26, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(2300, 6, 80000, 76000, 10600, 10600, 5000000, 6000, 600, 1800, 'Fireball', 'Fire', false, 0, 0, false, 0, 0, 0, 0, 'Poison', 6, 'Randomthought31', 'Dragon Cave', 'Attack Speed %', 45, 'Damage', 22, 'MaxMP %', 90, 'Attack: Poison', 210, 5, 18, 'Attack: Regular', 425, 0, 23, '', 0, 0, 0);
    addArenaEnemy(2300, 6, 80000, 76000, 10600, 10600, 5000000, 6000, 600, 1800, 'Iceball', 'Ice', false, 0, 0, false, 0, 0, 0, 0, 'Slow', 6, 'Randomthought31', 'Dragon Cave', 'Attack Speed %', 45, 'Damage', 22, 'MaxMP %', 90, 'Attack: Stun', 425, 2, 28, 'Attack: Regular', 425, 0, 23, '', 0, 0, 0);
    addArenaEnemy(2400, 6, 90000, -999999999, 40000, 40000, 20, 25000, 5000, 9000, 'Boogie', 'Fire', true, 0, 0, false, 120000, 0, 0, 0, 'All', 10, 'Tukkun', 'Dragon Cave', 'Negate Effect', 22, 'Instant Kill', 10, 'Magic Resist', 22, 'Attack: Blind', 210, 5, 18, 'Attack: Evasion Down', 1, 5, 29, 'Attack: Accuracy Down', 1, 5, 17);
    addArenaEnemy(2500, 4.5, 94000, 115000, 15600, 15600, 65000000, 27500, 5500, 9000, 'Bloodsurfer', 'Dark', true, 0, 1000000, false, 115000, 0, 0, 75, 'Blind', 5, 'SumYungGai', 'Dragon Cave', 'Reward', 22, 'Damage', 22, 'MaxHP %', 135, 'Attack: Blind', 210, 5, 21, 'Attack: Regular', 425, 0, 26, 'Heal', 50, 850, 31);
    addArenaEnemy(2700, 4, 89500, 110000, 12600, 12600, 9200000, 6500, 650, 3000, 'Bunneye', 'Ice', false, 0, 460000, false, 0, 0, 0, 75, 'None', 0, 'Toudou1620', 'Pirate Ship', 'Mastery', 50, '', 0, 'Attack Speed %', 50, 'Attack: Regular', 475, 0, 17, 'Heal', 50, 950, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(2750, 4, 82500, 115000, 12800, 12800, 9600000, 6550, 655, 3000, 'Sword Bunneye', 'Ice', false, 0, 480000, false, 0, 0, 0, 75, 'Weaken', 2, 'Toudou1620', 'Pirate Ship', 'Mastery', 50, '', 0, 'Attack Speed %', 50, 'Attack: Weaken', 235, 5, 22, 'Attack: Regular', 475, 0, 27, 'Heal', 50, 950, 32);
    addArenaEnemy(2800, 4, 76000, 120000, 13000, 13000, 10000000, 6600, 660, 3000, 'Gun Bunneye', 'Ice', false, 0, 500000, false, 83000, 0, 0, 75, 'Weaken', 2, 'Toudou1620', 'Pirate Ship', 'Mastery', 50, '', 0, 'Attack Speed %', 50, 'Attack: Weaken', 235, 5, 22, 'Attack: Regular', 475, 0, 27, 'Heal', 50, 950, 32);
    addArenaEnemy(2850, 6, 125000, 140000, 13300, 13300, 10600000, 6650, 665, 3000, 'Flying Sword', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Pirate Ship', 'Attack Speed', 5, 'Attack %', 50, 'Equipment Attack', 200, 'Attack: Regular', 475, 0, 13, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(2900, 6, 130000, 145000, 13600, 13600, 11200000, 6700, 670, 3000, 'Evil Sword', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'dragonewyn', 'Pirate Ship', 'Attack Speed', 5, 'Attack %', 50, 'Equipment Attack', 200, 'Attack: Regular', 475, 0, 13, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(2950, 6, 120000, 150000, 13800, 13800, 11600000, 6750, 675, 3000, 'Cursed Sword', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'Slow', 3, 'dragonewyn', 'Pirate Ship', 'Attack Speed', 5, 'Attack %', 50, 'Equipment Attack', 200, 'Attack: Regular', 475, 0, 13, 'Attack: Stun', 475, 2, 38, '', 0, 0, 0);
    addArenaEnemy(3000, 5, 81500, 140000, 12600, 12600, 12200000, 6800, 680, 3000, 'RandomNoob143', 'Fire', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'ChioreanTudor', 'Pirate Ship', 'Attack Speed', 5, '', 0, 'Negate Effect', 25, 'Attack: Regular', 475, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3050, 4, 130000, 175000, 12800, 12800, 12800000, 6850, 685, 3000, 'Knight', 'All', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'ChioreanTudor', 'Pirate Ship', 'Equipment Attack', 200, 'Equipment Defense', 200, 'Attack %', 50, 'Attack: Regular', 475, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3100, 4, 140000, 180000, 13000, 13000, 13400000, 6900, 690, 3000, 'Sword Knight', 'All', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'ChioreanTudor', 'Pirate Ship', 'Attack %', 50, 'Equipment Defense', 200, 'Attack %', 50, 'Attack: Regular', 475, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3150, 4, 145000, 205000, 13200, 13200, 14000000, 6950, 695, 3000, 'Backpack Knight', 'All', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'ChioreanTudor', 'Pirate Ship', 'Attack %', 50, 'Defense %', 50, 'Attack %', 50, 'Attack: Regular', 475, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3200, 5, 87000, 160000, 17500, 13400, 14600000, 7000, 700, 3000, 'Female Hunter A', 'Thunder', false, 0, 0, false, 87000, 0, 0, 75, 'Slow', 3, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Accuracy %', 50, 'Accuracy %', 50, 'Attack: Regular', 475, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3250, 5, 89000, 170000, 17700, 13600, 15400000, 7050, 705, 3000, 'Female Hunter B', 'Thunder', false, 0, 0, false, 89000, 0, 0, 75, 'Slow', 4, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Accuracy %', 50, 'Accuracy %', 50, 'Attack: Regular', 475, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3300, 5, 91000, 175000, 18000, 13800, 16000000, 7100, 710, 3000, 'Female Hunter C', 'Thunder', false, 0, 0, false, 91000, 0, 0, 75, 'Slow', 5, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Accuracy %', 50, 'Accuracy %', 50, 'Attack: Regular', 475, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3350, 5, 93000, 180000, 21200, 14100, 16800000, 7150, 715, 3000, 'Male Hunter A', 'Thunder', false, 0, 0, false, 93000, 0, 0, 75, 'Blind', 3, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Hit Chance', 25, 'Hit Chance', 25, 'Attack: Blind', 235, 5, 20, 'Attack: Regular', 475, 0, 25, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3400, 5, 95000, 185000, 21500, 14300, 17400000, 7200, 720, 3000, 'Male Hunter B', 'Thunder', false, 0, 0, false, 95000, 0, 0, 75, 'Blind', 4, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Hit Chance', 25, 'Hit Chance', 25, 'Attack: Blind', 235, 5, 20, 'Attack: Regular', 475, 0, 25, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3450, 5, 97000, 195000, 21800, 14500, 18200000, 7250, 725, 3000, 'Male Hunter C', 'Thunder', false, 0, 0, false, 97000, 0, 0, 75, 'Blind', 5, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Hit Chance', 25, 'Hit Chance', 25, 'Attack: Blind', 235, 5, 20, 'Attack: Regular', 475, 0, 25, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3500, 6.5, 86500, 200000, 14700, 22100, 19000000, 7300, 730, 3000, 'Neenja A', 'Dark', false, 0, 0, false, 0, 0, 0, 50, 'Blind', 6, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Drop Rate', 25, 'Dodge Chance', 25, 'Attack: Blind', 235, 5, 17, 'Attack: Regular', 475, 0, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3550, 6.5, 88000, 205000, 14900, 22400, 19600000, 7350, 735, 3000, 'Neenja B', 'Dark', false, 0, 0, false, 0, 0, 0, 50, 'Blind', 7, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Drop Rate', 25, 'Dodge Chance', 25, 'Attack: Blind', 235, 5, 17, 'Attack: Regular', 475, 0, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3600, 6.5, 90000, 215000, 15100, 22700, 20000000, 7400, 740, 3000, 'Neenja C', 'Dark', false, 0, 0, false, 0, 0, 0, 50, 'Blind', 8, 'SumYungGai', 'Pirate Ship', 'Attack Speed', 5, 'Drop Rate', 25, 'Dodge Chance', 25, 'Attack: Blind', 235, 5, 17, 'Attack: Regular', 475, 0, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(3650, 4, 94000, 320000, 17000, 17000, 17000000, 5000, 500, 3000, 'Icewizard', 'Ice', false, 134, 0, false, 230000, 0, 0, 0, 'Slow', 5, 'Randomthought31', 'Pirate Ship', 'MaxMP %', 100, 'Magic Resist', 25, 'MaxMP %', 100, 'Attack: Regular', 475, 0, 17, 'MP Recovery', 11, 0, 10, '', 0, 0, 0);
    addArenaEnemy(3650, 4, 94000, 320000, 17000, 17000, 17000000, 5000, 500, 3000, 'Firewizard', 'Fire', false, 133, 0, false, 230000, 0, 0, 0, 'Poison', 5, 'Randomthought31', 'Pirate Ship', 'MaxMP %', 100, 'Magic Resist', 25, 'MaxMP %', 100, 'Attack: Poison', 235, 5, 22, 'Attack: Regular', 475, 0, 27, 'MP Recovery', 11, 0, 15);
    addArenaEnemy(3700, 4, 110000, 295000, 17200, 17200, 22000000, 7500, 750, 3000, 'Bishop', 'Light', false, 0, 1100000, false, 260000, 0, 0, 0, 'None', 0, 'Randomthought31', 'Pirate Ship', 'MaxMP %', 100, 'Magic Resist', 25, 'MaxMP %', 100, 'Attack: Regular', 475, 0, 17, 'Heal', 50, 950, 22, 'MP Recovery', 11, 0, 15);
    addArenaEnemy(4000, 4, 165000, 530000, 28000, 28000, 200000000, 35000, 7000, 15000, 'Dark Mage', 'Dark', true, 0, 4000000, false, 315000, 0, 0, 0, 'Weaken', 5, 'Randomthought31', 'Pirate Ship', 'Reward', 25, 'Magic Resist', 25, 'MaxMP %', 150, 'Attack: Weaken', 235, 5, 22, 'Attack: Regular', 475, 0, 27, 'Heal', 50, 950, 32);
    addArenaEnemy(6100, 3, 230000, 600000, 35900, 23900, 180000000, 10800, 1080, 6000, 'Triangle Dummy', 'All', false, 0, 0, false, 255000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Hit Chance', 30, 'Non-Boss Damage', 30, 'Mastery', 60, 'Attack: Regular', 525, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6200, 3.5, 240000, 900000, 22100, 22100, 240000000, 10900, 1090, 6000, 'Triangle Tree', 'All', false, 0, 0, false, 260000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Resist', 30, 'Non-Boss Damage', 30, 'MaxHP %', 120, 'Attack: Regular', 525, 0, 18, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6300, 4, 275000, 700000, 34900, 22600, 200000000, 11000, 1100, 6000, 'Mushtriangle', 'All', false, 0, 0, false, 215000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Critical Damage', 120, 'Critical Chance', 30, 'Equipment Defense', 240, 'Attack: Regular', 525, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6400, 4, 370000, 800000, 23000, 23000, 210000000, 11100, 1110, 6000, 'Triangoop', 'All', false, 0, 0, false, 220000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Equipment Attack', 240, 'Attack %', 60, 'Attack %', 60, 'Attack: Regular', 525, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6500, 0, 280000, 1300000, 23400, 23400, 220000000, 11200, 1120, 6000, 'Tridle', 'All', false, 0, 0, false, 370000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Equipment Defense', 240, 'Defense %', 60, 'Defense %', 60, 'Attack: Regular', 525, 0, 25, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6600, 4, 350000, 1400000, 23900, 23900, 230000000, 11300, 1130, 6000, 'Triangle Bot', 'All', false, 0, 0, false, 235000, 0, 0, 25, 'None', 0, 'Tukkun', 'Triangle Land', 'Resist', 30, '', 0, 'Equipment Attack', 240, 'Attack: Regular', 525, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6700, 3, 450000, 1100000, 27000, 27000, 250000000, 11400, 1140, 6000, 'Moving Spikes', 'All', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Triangle Land', 'Attack Speed', 6, 'Reflect', 900, 'Attack %', 60, 'Attack: Regular', 525, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6800, 6, 425000, 1200000, 27500, 27500, 260000000, 11500, 1150, 6000, 'Fast Spikes', 'All', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Triangle Land', 'Attack Speed %', 60, 'Reflect', 900, 'Attack %', 60, 'Attack: Regular', 525, 0, 13, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6900, 6, 450000, 1300000, 28000, 28000, 270000000, 11600, 1160, 6000, 'Dark Spikes', 'All', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Triangle Land', 'Attack Speed %', 60, 'Reflect', 900, 'Attack %', 60, 'Attack: Regular', 525, 0, 13, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7000, 5, 270000, 1700000, 30000, 30000, 290000000, 11700, 1170, 6000, 'Blue Triangle', 'All', false, 0, 0, false, 320000, 0, 0, 75, 'Slow', 15, 'Tukkun', 'Triangle Land', 'Attack Speed', 6, 'Drop Rate', 30, 'Damage', 30, 'Attack: Regular', 525, 0, 15, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7100, 5, 280000, 1800000, 30500, 30500, 300000000, 11800, 1180, 6000, 'Green Triangle', 'All', false, 0, 0, false, 330000, 0, 0, 75, 'Poison', 15, 'Tukkun', 'Triangle Land', 'Attack Speed', 6, 'Drop Rate', 30, 'Damage', 30, 'Attack: Poison', 260, 5, 20, 'Attack: Regular', 525, 0, 25, 'Buff: Elemental Boost', 10, 0, 90);
    addArenaEnemy(7200, 5, 290000, 1900000, 31000, 31000, 310000000, 11900, 1190, 6000, 'Red Triangle', 'All', false, 0, 0, false, 340000, 0, 0, 75, 'Blind', 15, 'Tukkun', 'Triangle Land', 'Attack Speed', 6, 'Drop Rate', 30, 'Damage', 30, 'Attack: Blind', 260, 5, 20, 'Attack: Regular', 525, 0, 25, 'Buff: Elemental Boost', 10, 0, 90);
    addArenaEnemy(7300, 5, 300000, 2000000, 31500, 31500, 320000000, 12000, 1200, 6000, 'Black Triangle', 'All', false, 0, 0, false, 350000, 0, 0, 75, 'Weaken', 15, 'Tukkun', 'Triangle Land', 'Attack Speed', 6, 'Drop Rate', 30, 'Damage', 30, 'Attack: Weaken', 260, 5, 20, 'Attack: Regular', 525, 0, 25, 'Buff: Elemental Boost', 10, 0, 90);
    addArenaEnemy(7400, 4, 390000, 2000000, 35500, 35500, 340000000, 13500, 1350, 6000, 'Ghost Triangle A', 'All', false, 0, 0, true, 295000, 0, 0, 75, 'None', 0, 'Tukkun', 'Triangle Land', 'EXP', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 525, 0, 17, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7500, 4, 400000, 2100000, 36000, 36000, 360000000, 14000, 1400, 6000, 'Ghost Triangle B', 'All', false, 0, 0, true, 305000, 0, 0, 75, 'None', 0, 'Tukkun', 'Triangle Land', 'EXP', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 525, 0, 17, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7600, 4, 410000, 2150000, 36400, 36400, 380000000, 14500, 1450, 6000, 'Ghost Triangle C', 'All', false, 0, 0, true, 310000, 0, 0, 75, 'None', 0, 'Tukkun', 'Triangle Land', 'EXP', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 525, 0, 17, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7700, 4, 420000, 2250000, 36900, 36900, 400000000, 15000, 1500, 6000, 'Ghost Triangle D', 'All', false, 0, 0, true, 320000, 0, 0, 75, 'None', 0, 'Tukkun', 'Triangle Land', 'EXP', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 525, 0, 17, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(8000, 4, 900000, 3000000, 60000, 60000, 9000000001.0, 90000, 18000, 30000, 'Super Triangle', 'All', true, 0, 30000000, false, 660000, 40, 3000000, 75, 'Stat UP', 10, 'Tukkun', 'Triangle Land', 'Reward', 30, 'Attack %', 60, 'Attack %', 90, 'Attack: Blind', 260, 5, 22, 'Attack: Knockback', 260, 5, 22, 'Heal', 50, 1050, 32);
    addArenaEnemy(66, 1, 1, 0, 10000, 1, 66, 666, 666, 666, 'Pyramid Worm', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Dark Pyramid', 'Spawn Rate', 20, 'Non-Boss Damage', 5, 'Non-Boss Damage', 8, 'Produce Loot: Pixel', 5000, 0, 25, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(66, 2, 1, 0, 10000, 1, 66, 666, 666, 666, 'Pyramid Snake', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Dark Pyramid', 'Spawn Rate', 20, 'Non-Boss Damage', 5, 'Non-Boss Damage', 8, 'Produce Loot: Material', 2500, 0, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(66, 1.5, 1, 0, 10000, 1, 66, 666, 666, 666, 'Pyramid Ghost', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'Darkranboria', 'Dark Pyramid', 'Spawn Rate', 20, 'Non-Boss Damage', 5, 'Non-Boss Damage', 8, 'Produce Loot: Coin', 4000, 0, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(66, 1, 1, 0, 10000, 1, 66, 666, 666, 666, 'Skulder', 'Dark', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'Toudou1620', 'Dark Pyramid', 'Spawn Rate', 20, 'Non-Boss Damage', 5, 'Non-Boss Damage', 8, 'Produce Loot: Stat', 0, 0, 40, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(66, 2, 1, 0, 10000, 1, 166, 1000, 1000, 1000, 'Pyramid Dragon', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'HeroicHero', 'Dark Pyramid', 'Spawn Rate', 20, 'Non-Boss Damage', 5, 'Non-Boss Damage', 8, 'Produce Loot: Rare Item', 0, 0, 200, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(2200, 3, 7000000, -999999999, 10000, 7000, 10, 4000, 500, 1000, 'Killer Lily', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'EXP', 10, 'Damage', 10, 'Damage', 50, 'Attack: Regular', 105, 0, 19, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2250, 4, 75000, -999999999, 10000, 7000, 30, 5000, 500, 1000, 'Minifish', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 2, 'Tukkun', 'Mystic Path', 'EXP', 10, 'Damage', 10, 'Magic Resist', 50, 'Attack: Weaken', 50, 5, 22, 'Attack: Regular', 105, 0, 27, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(2300, 3, 80000, -999999999, 10000, 8000, 120, 7000, 3500, 3500, 'Bronze Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 2, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Drop Rate', 50, 'Attack: Weaken', 50, 5, 24, 'Attack: Regular', 105, 0, 29, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(2325, 3, 85000, -999999999, 10000, 8000, 140, 7500, 3750, 3500, 'Silver Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 2, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Drop Rate', 50, 'Attack: Weaken', 50, 5, 24, 'Attack: Regular', 105, 0, 29, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(2350, 3, 90000, -999999999, 10000, 8000, 160, 8000, 4000, 3500, 'Golden Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 2, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Drop Rate', 50, 'Attack: Weaken', 50, 5, 24, 'Attack: Regular', 105, 0, 29, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(2375, 3, 95000, -999999999, 10000, 8000, 180, 8500, 4250, 3500, 'Platinum Jelly', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 2, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Drop Rate', 50, 'Attack: Weaken', 50, 5, 24, 'Attack: Regular', 105, 0, 29, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(2400, 0, 1, -999999999, 10000, 9000, 400, 12500, 6250, 7000, 'Emerald', 'Earth', false, 0, 0, false, 100000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2425, 0, 1, -999999999, 10000, 9000, 420, 13000, 6500, 7000, 'Aquamarine', 'Water', false, 0, 0, false, 105000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2450, 0, 1, -999999999, 10000, 9000, 440, 13500, 6750, 7000, 'Topaz', 'Thunder', false, 0, 0, false, 110000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2475, 0, 1, -999999999, 10000, 9000, 460, 14000, 7000, 7000, 'Ruby', 'Fire', false, 0, 0, false, 115000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2500, 0, 1, -999999999, 10000, 9000, 480, 14500, 7250, 7000, 'Diamond', 'Light', false, 0, 0, false, 120000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2525, 0, 1, -999999999, 10000, 9000, 500, 15000, 7500, 7000, 'Dark Gem', 'Dark', false, 0, 0, false, 125000, 20, 200000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2550, 0, 1, -999999999, 20000, 15000, 1200, 35000, 35000, 35000, 'Supergem', 'All', true, 0, 0, false, 150000, 30, 300000, 0, 'None', 0, 'Tukkun', 'Mystic Path', 'Reward', 10, 'Damage', 10, 'Pixel', 50, 'Attack: Ignore Defense', 1, 0, 40, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(2500, 1, 65535, -999999999, 65535, 32767, 100000, 7600, 2000, 9001, 'Alien A', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Power Down', 1, 3, 13);
    addArenaEnemy(2520, 1, 65535, -999999999, 65535, 32767, 105000, 7700, 2000, 9001, 'Alien B', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Defense Down', 1, 3, 13);
    addArenaEnemy(2540, 1, 65535, -999999999, 65535, 32767, 110000, 7800, 2000, 9001, 'Alien C', 'Light', false, 0, 10000, false, 96000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Accuracy Down', 1, 3, 11);
    addArenaEnemy(2560, 1, 65535, -999999999, 65535, 32767, 115000, 7900, 2000, 9001, 'Alien D', 'Light', false, 0, 10000, false, 96000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Evasion Down', 1, 3, 11);
    addArenaEnemy(2580, 1, 65535, -999999999, 65535, 32767, 120000, 8000, 2000, 9001, 'Alien E', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Power Down', 1, 3, 12);
    addArenaEnemy(2600, 1, 65535, -999999999, 65535, 32767, 125000, 8100, 2000, 9001, 'Alien F', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Defense Down', 1, 3, 12);
    addArenaEnemy(2620, 1, 65535, -999999999, 65535, 32767, 130000, 8200, 2000, 9001, 'Alien G', 'Light', false, 0, 10000, false, 120000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Accuracy Down', 1, 3, 10);
    addArenaEnemy(2640, 1, 65535, -999999999, 65535, 32767, 135000, 8300, 2000, 9001, 'Alien H', 'Light', false, 0, 10000, false, 120000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Evasion Down', 1, 3, 10);
    addArenaEnemy(2660, 1, 65535, -999999999, 65535, 32767, 140000, 8400, 2000, 9001, 'Alien I', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Power Down', 1, 3, 11);
    addArenaEnemy(2680, 1, 65535, -999999999, 65535, 32767, 145000, 8500, 2000, 9001, 'Alien J', 'Light', false, 0, 10000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Defense Down', 1, 3, 11);
    addArenaEnemy(2700, 1, 65535, -999999999, 65535, 32767, 150000, 8600, 2000, 9001, 'Alien K', 'Light', false, 0, 10000, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Accuracy Down', 1, 3, 9);
    addArenaEnemy(2720, 1, 65535, -999999999, 65535, 32767, 155000, 8700, 2000, 9001, 'Alien L', 'Light', false, 0, 10000, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 23, 'Buff: Invincibility', 5, 0, 80, 'Attack: Evasion Down', 1, 3, 9);
    addArenaEnemy(2740, 2, 131071, -999999999, 65535, 32767, 160000, 8800, 2500, 9001, 'Robomin', 'Light', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 21, 'Buff: Invincibility', 5, 0, 80, 'Attack: Silence', 1, 20, 13);
    addArenaEnemy(2760, 2, 131071, -999999999, 65535, 32767, 165000, 8900, 2500, 9001, 'Invisibo', 'Light', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 10, 'Non-Boss Damage', 10, '', 0, 'Attack: Regular', 105, 0, 21, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2780, 2, 131071, -999999999, 65535, 32767, 170000, 9000, 2500, 9001, 'Weird Object', 'Light', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 12, 'Non-Boss Damage', 12, '', 0, 'Attack: Regular', 105, 0, 21, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2800, 2, 131071, -999999999, 65535, 32767, 175000, 9100, 2500, 9001, 'Weirder Object', 'Light', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 12, 'Non-Boss Damage', 12, '', 0, 'Attack: Regular', 105, 0, 21, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2820, 5, 131071, -999999999, 65535, 32767, 180000, 9200, 2500, 9001, 'Supertruck', 'Light', false, 0, 15000, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 12, 'Attack Speed %', 25, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2840, 0, 1, -999999999, 65535, 32767, 30000, 9300, 2500, 9001, 'Not_a_Bomb A', 'Ice', false, 0, 0, false, 0, 2, 131071, 0, 'None', 0, 'Dragonayzer', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2860, 0, 1, -999999999, 65535, 32767, 32500, 9400, 2500, 9001, 'Not_a_Bomb B', 'Ice', false, 0, 0, false, 0, 2, 131071, 0, 'None', 0, 'Dragonayzer', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2880, 0, 1, -999999999, 65535, 32767, 35000, 9500, 2500, 9001, 'Not_a_Bomb C', 'Ice', false, 0, 0, false, 0, 2, 131071, 0, 'None', 0, 'Dragonayzer', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2900, 0, 1, -999999999, 65535, 32767, 200000, 9600, 2500, 9001, 'Suspicious Sign', 'Light', false, 0, 15000, false, 262143, 5, 262143, 0, 'None', 0, 'Tukkun', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2920, 5, 131071, -999999999, 65535, 32767, 210000, 9700, 3000, 9001, 'Arrowbot', 'Thunder', false, 0, 20000, false, 0, 0, 0, 0, 'None', 0, 'meshwire', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2940, 5, 131071, -999999999, 65535, 32767, 220000, 9800, 3000, 9001, 'Dogbot', 'Thunder', false, 0, 20000, false, 0, 0, 0, 0, 'None', 0, 'meshwire', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2960, 5, 131071, -999999999, 65535, 32767, 230000, 9900, 3000, 9001, 'Sentrybot', 'Thunder', false, 0, 20000, false, 0, 0, 0, 0, 'None', 0, 'meshwire', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2980, 5, 131071, -999999999, 65535, 32767, 240000, 10000, 3000, 9001, 'Dronebot', 'Thunder', false, 0, 20000, false, 0, 0, 0, 0, 'None', 0, 'meshwire', '9001: Mystic Forest', 'Pixel', 12, 'Damage', 12, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3000, 5, 262143, -999999999, 131071, 65535, 1787569, 65535, 65535, 65535, 'Master Alien', 'Thunder', true, 0, 50000, false, 262143, 0, 0, 0, 'All', 0, 'meshwire', '9001: Mystic Forest', 'Reward', 12, 'Damage', 12, '', 0, 'Attack: Regular', 105, 0, 15, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3000, 6, 7, -999999999, 100000, 10000, 450000, 15000, 6000, 15000, 'Attacker Alien', 'Light', false, 0, 0, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 15, 'Non-Boss Damage', 15, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(3000, 4, 4, -999999999, 100000, 40000, 600000, 15000, 6000, 15000, 'Defender Alien', 'Light', false, 0, 0, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 15, 'Non-Boss Damage', 15, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(3000, 5, 6, -999999999, 100000, 10000, 450000, 15000, 6000, 15000, 'Healer Alien', 'Light', false, 0, 50000, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 15, 'Non-Boss Damage', 15, '', 0, 'Heal', 50, 210, 10, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3000, 8, 5, -999999999, 100000, 10000, 450000, 15000, 6000, 15000, 'Runner Alien', 'Light', false, 0, 0, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 15, 'Attack Speed %', 30, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(3500, 5, 10, -999999999, 100000, 10000, 18000000, 250000, 100000, 250000, 'Super Alien', 'Light', true, 0, 100000, false, 0, 90, 100, 50, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 30, 'Damage', 30, '', 0, 'Buff: Enrage', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 40000, 81018001, 750000, 100000, 750000, 'Alien Generator', 'Light', true, 0, 0, false, 0, 120, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 30, 'Damage', 30, '', 0, 'Buff: Enrage', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 10000, 800000, 10000, 4000, 10000, 'Alien Supply Crate', 'Light', true, 0, 0, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Pixel', 30, 'Drop Rate', 30, '', 0, 'Buff: Enrage', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 10000, 800000, 750000, 200000, 1500000, 'Alien Secret Box', 'Light', true, 0, 0, false, 0, 60, 100, 0, 'None', 0, 'Tukkun', '9001: Defend Mission', 'Spawn Rate', 30, 'Drop Rate', 30, '', 0, 'Buff: Enrage', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3000000, 42500, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'None', 0, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Regular', 105, 0, 25, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3200000, 45000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Slow', 1, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Regular', 105, 0, 25, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3400000, 47500, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Slow', 2, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Regular', 105, 0, 25, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3600000, 50000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Slow', 3, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Regular', 105, 0, 25, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3200000, 45000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Blind', 1, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Blind', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3400000, 47500, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Blind', 2, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Blind', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3600000, 50000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Blind', 3, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Blind', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3200000, 45000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Weaken', 1, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Weaken', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3400000, 47500, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Weaken', 2, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Weaken', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(4000, 0, 1, -999999999, 100000, 4000, 3600000, 50000, 10000, 30000, '???', 'Light', true, 0, 0, false, 1, 0, 0, 0, 'Weaken', 3, 'Tukkun', '9001: Secret Lab', 'Reward', 20, 'Drop Rate', 20, '', 0, 'Attack: Weaken', 50, 5, 30, 'Attack: Regular', 105, 0, 35, 'Buff: Invincibility', 5, 0, 90);
    addArenaEnemy(1600, 5, 33000, 35500, 7140, 7140, 1000000, 390, 60, 1000, 'Treasure Hunter', 'Fire', false, 240, 0, false, 0, 0, 0, 75, 'None', 0, 'ChioreanTudor', 'Pirate Ship Interior', 'Drop Rate', 25, 'Coin', 25, 'Drop Rate', 25, 'Attack: Regular', 500, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1700, 6.5, 33000, 40500, 7530, 7530, 1100000, 400, 60, 1000, 'Duplicated Ninja', 'Dark', false, 241, 0, false, 0, 0, 0, 50, 'Blind', 6, 'SumYungGai', 'Pirate Ship Interior', 'Attack Speed', 5, 'Spawn Rate', 10, 'Spawn Rate', 10, 'Attack: Blind', 250, 5, 17, 'Attack: Regular', 500, 0, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(1800, 0, 5, -999999999, 7920, 7920, 80, 4000, 8000, 8000, 'Treasure Chest', 'Dark', false, 248, 0, false, 0, 10, 33500, 50, 'None', 0, 'Tukkun', 'Pirate Ship Interior', 'Reward', 25, 'Pixel', 25, 'Coin', 25, 'Attack: Knockback', 250, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1800, 0, 5, -999999999, 7920, 7920, 80, 8000, 4000, 4000, 'Another Chest', 'Dark', false, 244, 0, false, 0, 10, 33500, 50, 'None', 0, 'Tukkun', 'Pirate Ship Interior', 'Reward', 25, 'Pixel', 25, 'Coin', 25, 'Attack: Knockback', 250, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1900, 4, 75500, 120000, 12400, 12400, 22000000, 10000, 2000, 10000, 'Blue Ghost', 'Water', true, 245, 0, true, 0, 0, 0, 50, 'Zombify', 2, 'Darkranboria', 'Pirate Ship Interior', 'Reward', 10, 'Boss Damage', 20, 'Resist', 10, 'Attack: Regular', 500, 0, 17, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1950, 4, 78000, 125000, 12700, 12700, 24000000, 15000, 2000, 10000, 'Green Ghost', 'Wind', true, 246, 0, true, 0, 0, 0, 50, 'Zombify', 3, 'Darkranboria', 'Pirate Ship Interior', 'Reward', 10, 'Boss Damage', 20, 'Resist', 10, 'Attack: Regular', 500, 0, 17, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2000, 4, 81000, 130000, 13000, 13000, 25000000, 20000, 2000, 10000, 'Red Ghost', 'Fire', true, 247, 0, true, 0, 0, 0, 50, 'Zombify', 4, 'Darkranboria', 'Pirate Ship Interior', 'Reward', 10, 'Boss Damage', 20, 'Resist', 10, 'Attack: Regular', 500, 0, 17, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2300, 4, 100000, 180000, 15000, 15000, 45000000, 25000, 5000, 10000, 'Super Ghost', 'Dark', true, 0, 0, true, 0, 0, 0, 50, 'Zombify', 5, 'Darkranboria', 'Pirate Ship Interior', 'Reward', 15, 'Boss Damage', 30, 'Resist', 15, 'Attack: Regular', 500, 0, 17, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2250, 0, 1, -999999999, 10000, 10000, 1000, 30000, 30000, 30000, 'Pirate Gem', 'All', true, 0, 0, false, 0, 30, 150000, 0, 'None', 0, 'Tukkun', 'Pirate Ship Interior', 'Reward', 15, 'Drop Rate', 30, 'Drop Rate', 30, 'Attack: Knockback', 250, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1000, 2, 23000, 23500, 5060, 5060, 440000, 3600, 360, 1000, 'Fire Snail', 'Fire', false, 0, 44000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Resist', 20, 'Attack: Regular', 550, 0, 21, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1010, 4, 23000, 16000, 7150, 5100, 450000, 3650, 365, 1000, 'Lava Blob', 'Fire', false, 0, 45000, false, 0, 0, 0, 50, 'None', 0, 'dragonewyn', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Critical Chance', 20, 'Attack: Regular', 550, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1020, 4, 29500, 16500, 5650, 5130, 460000, 3700, 370, 1000, 'Lava Jelly', 'Fire', false, 0, 46000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Critical Damage', 80, 'Attack: Regular', 550, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1030, 4, 30000, 16500, 5690, 5170, 470000, 3750, 375, 1000, 'Lava Slime', 'Fire', false, 0, 47000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Critical Damage', 80, 'Attack: Regular', 550, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1040, 3, 23000, 20500, 5210, 5210, 480000, 3800, 380, 1000, 'Red Mushroom', 'Fire', false, 0, 48000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Equipment Defense', 160, 'Attack: Regular', 550, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1050, 3, 21000, 17500, 7880, 5250, 500000, 3850, 385, 1000, 'Fire Snake', 'Fire', false, 0, 50000, false, 0, 0, 0, 50, 'Poison', 7, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Hit Chance', 20, 'Attack: Poison', 275, 5, 24, 'Attack: Regular', 550, 0, 29, 'Buff: Elemental Boost', 10, 0, 90);
    addArenaEnemy(1060, 2, 24500, 26500, 5280, 5280, 510000, 3900, 390, 1000, 'Fire Turtle', 'Fire', false, 0, 51000, false, 0, 0, 0, 50, 'None', 0, 'HeroicHero', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Resist', 20, 'Attack: Regular', 550, 0, 21, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1070, 2, 25000, 18000, 5320, 5320, 680000, 3950, 395, 1000, 'Flame Lizard', 'Fire', false, 0, 68000, false, 0, 0, 0, 50, 'None', 0, 'Toudou1620', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'MaxHP %', 80, 'Attack: Regular', 550, 0, 21, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1080, 4, 26500, 18000, 5360, 5360, 530000, 4000, 400, 1000, 'Fire Eye', 'Fire', false, 0, 53000, false, 24500, 0, 0, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, '', 0, 'Attack %', 40, 'Attack: Regular', 550, 0, 17, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1090, 5, 24000, 18500, 5400, 5400, 430000, 2500, 250, 1000, 'Floating Fire', 'Fire', false, 260, 43000, false, 0, 5, 32500, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Potion Efficiency', 20, 'Attack Speed', 4, 'Negate Effect', 20, 'Attack: Knockback', 275, 5, 10, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1200, 0, 38000, 43500, 8000, 8000, 10000000, 19000, 3800, 5000, 'Fire Stone', 'Fire', true, 0, 1000000, false, 46000, 30, 57000, 50, 'None', 0, 'Tukkun', 'Volcano Peak', 'Reward', 20, 'Potion Efficiency', 40, 'Defense %', 60, 'Attack: Knockback', 275, 5, 20, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1300, 4, 42000, 39000, 10300, 10300, 12000000, 20000, 4000, 5000, 'Fire Spirit', 'Fire', true, 0, 5000000, false, 50000, 0, 0, 0, 'None', 0, 'PartyzantPL', 'Volcano Peak', 'Reward', 20, 'Potion Efficiency', 40, 'Potion Efficiency', 80, 'Spirit Recovery', 9, 0, 7, 'Heal', 50, 1100, 22, 'Buff: Elemental Boost', 10, 0, 90);
    addArenaEnemy(2700, 2, 88000, 154000, 11900, 11900, 5800000, 6600, 660, 2500, 'Ice Snail', 'Ice', false, 0, 180000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Resist', 30, 'Attack: Regular', 600, 0, 21, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2710, 4, 88000, 102000, 14000, 11900, 5900000, 6650, 665, 2500, 'Ice Blob', 'Ice', false, 0, 180000, false, 0, 0, 0, 50, 'None', 0, 'dragonewyn', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Critical Chance', 30, 'Attack: Regular', 600, 0, 17, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2720, 4, 113000, 104000, 12000, 12000, 6000000, 6700, 670, 2500, 'Ice Jelly', 'Ice', false, 0, 180000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Critical Damage', 120, 'Attack: Regular', 600, 0, 17, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2730, 4, 113000, 106000, 13000, 12000, 6000000, 6750, 675, 2500, 'Ice Slime', 'Ice', false, 0, 190000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Critical Damage', 120, 'Attack: Regular', 600, 0, 17, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2740, 3, 86000, 128000, 12000, 12000, 6100000, 6800, 680, 2500, 'Blue Mushroom', 'Ice', false, 0, 190000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Equipment Defense', 240, 'Attack: Regular', 600, 0, 19, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2750, 3, 86000, 108000, 12100, 12100, 7900000, 6850, 685, 2500, 'Frozen Cactus', 'Ice', false, 0, 250000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'MaxHP %', 120, 'Attack: Regular', 600, 0, 19, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2760, 2.5, 92000, 109000, 12100, 14500, 6200000, 6900, 690, 2500, 'Snow Abuser', 'Ice', false, 0, 190000, false, 0, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Evasion %', 60, 'Attack: Regular', 600, 0, 20, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2770, 2, 92000, 166000, 12200, 12200, 6200000, 6950, 695, 2500, 'Igloo Turtle', 'Ice', false, 0, 200000, false, 0, 0, 0, 50, 'None', 0, 'HeroicHero', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Resist', 30, 'Attack: Regular', 600, 0, 21, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2780, 4, 98000, 112000, 12200, 12200, 6300000, 7000, 700, 2500, 'Frost Eye', 'Ice', false, 0, 200000, false, 45000, 0, 0, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, '', 0, 'Attack %', 60, 'Attack: Regular', 600, 0, 17, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2790, 5, 88000, 113000, 12200, 12200, 5100000, 4000, 400, 2500, 'Cold Fire', 'Ice', false, 272, 160000, false, 0, 5, 59500, 50, 'None', 0, 'Tukkun', 'Frosty Zone', 'Potion Efficiency', 30, 'Attack Speed', 6, 'Negate Effect', 30, 'Attack: Knockback', 300, 6, 10, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2900, 0, 123000, 250000, 18000, 18000, 106000000, 30000, 6000, 12500, 'Ice Stone', 'Ice', true, 0, 3600000, false, 73500, 0, 0, 50, 'Slow', 3, 'Tukkun', 'Frosty Zone', 'Reward', 30, 'Potion Efficiency', 60, 'Defense %', 90, 'Attack: Regular', 600, 0, 25, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3000, 4, 132000, 220000, 15100, 15100, 116000000, 32000, 6400, 12500, 'Ice Spirit', 'Ice', true, 0, 17000000, false, 78500, 0, 0, 0, 'Slow', 15, 'PartyzantPL', 'Frosty Zone', 'Reward', 30, 'Potion Efficiency', 60, 'Potion Efficiency', 120, 'Spirit Recovery', 9, 0, 7, 'Heal', 60, 1200, 22, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(5000, 2, 2000000, 50000000, 30000, 40000, 1000000000, 40000, 20000, 20000, 'The Guardian', 'All', true, 0, 7000000, false, 2850000, 0, 0, 25, 'Slow', 30, 'Tukkun', 'Dark Portal', 'Drop Rate', 30, 'Boss Damage', 30, 'Resist', 30, 'Attack: Regular', 600, 0, 21, 'Heal', 60, 1200, 26, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(1, 2, 10, -999999999, 10000, 0, 9050, 1000, 1000, 1000, 'Grinning Colossus', 'All', true, 0, 300, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Ropeless Room', 'Reward', 5, 'Instant Kill', 5, '', 0, 'Heal', 50, 210, 16, 'Buff: Invincibility', 5, 0, 80, 'HP Recovery', 10, 0, 15);
    addArenaEnemy(9001, 4, 10000000, 1000000, 100000, 100000, 20000000000.0, 2000000, 200000, 200000, 'Chuck Norris', 'All', true, 0, 10000000, false, 10000000, 0, 0, 75, 'Blind', 30, 'dragonewyn', '2012: Ye Olde Pub', 'Reward', 40, 'Boss Damage', 40, 'Ignore Defense', 80, 'Attack: Blind', 2000, 5, 22, 'Attack: Ignore Defense', 20000, 0, 180, 'Heal', 100, 2000, 32);
    addArenaEnemy(1, 6.5, 20, -999999999, 0, 0, 10, 5000, 500, 5000, 'Arena Box', 'All', true, 277, 0, false, 0, 0, 0, 0, 'None', 0, 'Darkranboria', 'The Special Arena', 'Reward', 5, 'Boss Damage', 5, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(500, 4, 20000, 7500, 500, 500, 20000, 6000, 600, 5000, 'Arena Mob 1', 'Earth', true, 278, 600, false, 30000, 0, 0, 50, 'None', 0, 'ChioreanTudor', 'The Special Arena', 'Reward', 6, 'Boss Damage', 6, 'Damage', 5, 'Attack: Regular', 550, 0, 17, 'Heal', 50, 1100, 22, 'Buff: Master', 10, 0, 80);
    addArenaEnemy(600, 1.5, 25000, 10000, 800, 800, 50000, 7000, 700, 5000, 'Arena Mob 2', 'Water', true, 279, 2000, false, 40000, 0, 0, 25, 'Slow', 3, 'Tukkun', 'The Special Arena', 'Reward', 7, 'Boss Damage', 7, 'Damage', 5, 'Attack: Regular', 550, 0, 22, 'Heal', 50, 1100, 27, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(700, 5, 30000, 12500, 1100, 1100, 100000, 8000, 800, 5000, 'Arena Mob 3', 'Ice', true, 280, 0, false, 40000, 0, 0, 100, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 8, 'Boss Damage', 8, 'Damage', 5, 'Attack: Regular', 550, 0, 15, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(800, 4, 35000, 15000, 1400, 1400, 200000, 9000, 900, 5000, 'Arena Mob 4', 'Water', true, 281, 8000, false, 50000, 0, 0, 50, 'None', 0, 'dragonewyn', 'The Special Arena', 'Reward', 9, 'Boss Damage', 9, 'Damage', 5, 'Attack: Regular', 550, 0, 17, 'Heal', 50, 1100, 22, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(900, 2, 50000, 20000, 2200, 2200, 500000, 10000, 1000, 5000, 'Arena Mob 5', 'Earth', true, 282, 30000, false, 70000, 0, 0, 0, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 10, 'Boss Damage', 10, 'Damage', 5, 'Attack: Regular', 550, 0, 21, 'Heal', 50, 1100, 26, '', 0, 0, 0);
    addArenaEnemy(1000, 0, 45000, -999999999, 10000, 900, 100, 50000, 25000, 50000, 'Arena Bonus 1', 'All', true, 283, 0, false, 60000, 30, 60000, 0, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 10, 'Boss Damage', 10, 'Drop Rate', 10, 'Attack: Knockback', 275, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1200, 3.5, 75000, 80000, 3000, 3000, 1000000, 12000, 1200, 10000, 'Arena Mob 6', 'Earth', true, 284, 0, false, 60000, 0, 0, 0, 'None', 0, 'Guille', 'The Special Arena', 'Reward', 11, 'Boss Damage', 11, 'Damage', 10, 'Attack: Regular', 750, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1400, 4.5, 80000, 70000, 4000, 4000, 2000000, 14000, 1400, 10000, 'Arena Mob 7', 'Fire', true, 285, 0, false, 100000, 0, 0, 50, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 12, 'Boss Damage', 12, 'Damage', 10, 'Attack: Regular', 750, 0, 16, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(1600, 5, 90000, 100000, 5000, 5000, 5000000, 16000, 1600, 10000, 'Arena Mob 8', 'Earth', true, 286, 0, false, 90000, 0, 0, 25, 'Poison', 3, 'Tukkun', 'The Special Arena', 'Reward', 13, 'Boss Damage', 13, 'Damage', 10, 'Attack: Poison', 375, 6, 20, 'Attack: Regular', 750, 0, 25, 'Buff: Enrage', 20, 0, 90);
    addArenaEnemy(1800, 2, 120000, 150000, 6000, 6000, 10000000, 18000, 1800, 10000, 'Arena Mob 9', 'Earth', true, 287, 120000, false, 150000, 0, 0, 75, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 14, 'Boss Damage', 14, 'Damage', 10, 'Attack: Regular', 750, 0, 21, 'Heal', 60, 1500, 26, 'Buff: Enrage', 20, 0, 90);
    addArenaEnemy(2100, 5, 130000, 500000, 7000, 7000, 20000000, 20000, 2000, 10000, 'Arena Mob 10', 'Thunder', true, 288, 0, false, 140000, 20, 98500, 75, 'Slow', 5, 'meshwire', 'The Special Arena', 'Reward', 15, 'Boss Damage', 15, 'Damage', 10, 'Attack: Knockback', 375, 6, 10, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2400, 0, 165000, -999999999, 10000, 1900, 200, 100000, 50000, 100000, 'Arena Bonus 2', 'All', true, 289, 0, false, 0, 30, 190000, 0, 'None', 0, 'Tukkun', 'The Special Arena', 'Reward', 15, 'Boss Damage', 15, 'Drop Rate', 20, 'Attack: Knockback', 375, 6, 20, 'Buff: Invincibility', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(2700, 4.5, 210000, 400000, 8500, 8500, 50000000, 25000, 2500, 20000, 'Arena Mob 11', 'Dark', true, 290, 400000, false, 250000, 0, 0, 75, 'Blind', 5, 'SumYungGai', 'The Special Arena', 'Reward', 16, 'Boss Damage', 16, 'Damage', 20, 'Attack: Blind', 500, 6, 21, 'Attack: Regular', 1000, 0, 26, 'Heal', 60, 2000, 31);
    addArenaEnemy(3100, 4, 315000, 600000, 10000, 10000, 100000000, 30000, 3000, 20000, 'Arena Mob 12', 'Dark', true, 291, 0, true, 0, 0, 0, 50, 'None', 0, 'Darkranboria', 'The Special Arena', 'Reward', 17, 'Boss Damage', 17, 'Damage', 20, 'Attack: Regular', 1000, 0, 17, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3500, 4, 335000, 700000, 12000, 12000, 200000000, 35000, 3500, 20000, 'Arena Mob 13', 'Dark', true, 292, 1500000, false, 400000, 0, 0, 0, 'Weaken', 5, 'Randomthought31', 'The Special Arena', 'Reward', 18, 'Boss Damage', 18, 'Damage', 20, 'Attack: Weaken', 500, 6, 22, 'Attack: Regular', 1000, 0, 27, 'Heal', 60, 2000, 32);
    addArenaEnemy(4000, 3, 450000, 800000, 15000, 15000, 500000000, 40000, 4000, 20000, 'Arena Mob 14', 'All', true, 293, 3000000, false, 450000, 40, 3000000, 75, 'Stat UP', 10, 'Tukkun', 'The Special Arena', 'Reward', 19, 'Boss Damage', 19, 'Damage', 20, 'Attack: Blind', 500, 6, 22, 'Attack: Knockback', 500, 6, 22, 'Heal', 60, 2000, 32);
    addArenaEnemy(4500, 5, 400000, 1200000, 17000, 17000, 1000000000, 70000, 7000, 100000, 'Dark Spirit', 'Dark', true, 294, 0, false, 400000, 0, 0, 50, 'Blind', 5, 'Tukkun', 'The Special Arena', 'Reward', 20, 'Boss Damage', 20, 'Potion Efficiency', 100, 'Attack: Blind', 500, 6, 20, 'Buff: Enrage', 20, 0, 80, 'Spirit Recovery', 7, 0, 5);
    addArenaEnemy(5000, 0, 500000, 1800000, 19000, 19000, 2000000000, 200000, 20000, 200000, 'Dark Stone', 'Dark', true, 295, 0, false, 600000, 0, 0, 50, 'Slow', 5, 'Tukkun', 'The Special Arena', 'Reward', 20, 'Boss Damage', 20, 'Defense %', 100, 'Attack: Regular', 1000, 0, 25, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6000, 4, 900000, 3000000, 29000, 21000, 5000000000.0, 1000000, 100000, 500000, 'THE MEGABOSS', 'All', true, 0, 100000000, false, 900000, 0, 0, 25, 'All', 10, 'dragonewyn', 'The Special Arena', 'Reward', 25, 'Boss Damage', 25, 'Negate Effect', 50, 'Attack: Regular', 6000, 0, 17, 'Heal', 70, 2700, 22, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(1, 3, 1, 0, 0, 0, 1, 800, 50, 250, 'Light Donkey', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', '-Infinity: Prehistoric Area', 'Spawn Rate', 20, '', 0, 'Spawn Rate', 10, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1, 3, 1, 0, 0, 0, 1, 800, 50, 250, 'Dark Donkey', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', '-Infinity: Prehistoric Area', 'Spawn Rate', 20, '', 0, 'Spawn Rate', 10, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1, 4, 1, 0, 0, 0, 1, 1000, 50, 250, 'Green Raptor', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', '-Infinity: Prehistoric Area', 'Spawn Rate', 20, '', 0, 'Spawn Rate', 10, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1, 4, 1, 0, 0, 0, 1, 1000, 50, 250, 'Blue Raptor', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', '-Infinity: Prehistoric Area', 'Spawn Rate', 20, '', 0, 'Spawn Rate', 10, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1, 4, 1, 0, 0, 0, 1, 1000, 50, 250, 'Red Raptor', 'Fire', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', '-Infinity: Prehistoric Area', 'Spawn Rate', 20, '', 0, 'Spawn Rate', 10, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 3, 1000, 0, 10000, 5000, 75000, 4000, 250, 4000, 'Light Donkey?', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', 'Entry Room', 'Pixel', 20, '', 0, '', 0, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4000, 3, 1000, 0, 10000, 5000, 75000, 4000, 250, 4000, 'Dark Donkey?', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', 'Entry Room', 'Pixel', 20, '', 0, '', 0, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4250, 3, 1200, 0, 10000, 5000, 125000, 6000, 250, 4000, 'Green Raptor?', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', 'Entry Room', 'EXP', 20, '', 0, '', 0, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4250, 3, 1200, 0, 10000, 5000, 125000, 6000, 250, 4000, 'Blue Raptor?', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', 'Entry Room', 'EXP', 20, '', 0, '', 0, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4250, 3, 1200, 0, 10000, 5000, 125000, 6000, 250, 4000, 'Red Raptor?', 'Fire', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'CTSG', 'Entry Room', 'EXP', 20, '', 0, '', 0, 'Attack: Regular', 105, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1500, 1, 60000, 500, 40000, 'Green Bomb', 'Fire', false, 0, 0, false, 0, 2, 10000000, 0, 'Self-Destruct', 1, 'Dragonayzer', 'Reaction Room', 'Pixel', 30, 'Dodge Chance', 30, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 10000000, -999999999, 75000, 1500, 9001, 60000, 500, 40000, 'Red Bomb', 'Fire', false, 0, 0, false, 0, 2, 1, 0, 'Self-Destruct', 1, 'Dragonayzer', 'Reaction Room', 'Pixel', 30, 'Dodge Chance', 30, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1000, 50, 30000, 500, 20000, 'Reaction Box', 'Earth', false, 306, 0, false, 0, 15, 10000000, 0, 'None', 0, 'Darkranboria', 'Chain Reaction Room', 'Pixel', 30, 'Attack Speed %', 60, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1000, 50, 30000, 500, 20000, 'Reaction Box', 'Earth', false, 307, 0, false, 0, 15, 10000000, 0, 'None', 0, 'Darkranboria', 'Chain Reaction Room', 'Pixel', 30, 'Attack Speed %', 60, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1000, 100, 30000, 500, 20000, 'Lucky Box', 'Earth', false, 313, 0, false, 0, 30, 10000000, 0, 'None', 0, 'Darkranboria', 'Luck Room', 'Pixel', 30, 'Drop Rate', 30, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1000, 100, 30000, 500, 20000, 'Lucky Box', 'Earth', false, 314, 0, false, 0, 30, 10000000, 0, 'None', 0, 'Darkranboria', 'Luck Room', 'Pixel', 30, 'Drop Rate', 30, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4500, 0, 1, -999999999, 75000, 1000, 100, 30000, 500, 20000, 'Lucky Box', 'Earth', false, 315, 0, false, 0, 30, 10000000, 0, 'None', 0, 'Darkranboria', 'Luck Room', 'Pixel', 30, 'Drop Rate', 30, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4750, 4, 2000, 0, 15000, 5000, 40000, 3000, 100, 2000, 'Poisonous Slime', 'Water', false, 313, 0, false, 0, 0, 0, 0, 'Poison', 8, 'Tukkun', 'Luck Room', 'Spawn Rate', 30, '', 0, '', 0, 'Attack: Poison', 50, 5, 22, 'Attack: Regular', 105, 0, 27, '', 0, 0, 0);
    addArenaEnemy(4750, 4, 2200, 0, 15000, 5000, 40000, 3000, 100, 2000, 'Darkness Slime', 'Dark', false, 314, 0, false, 0, 0, 0, 0, 'Blind', 8, 'Tukkun', 'Luck Room', 'Spawn Rate', 30, '', 0, '', 0, 'Attack: Blind', 50, 5, 22, 'Attack: Regular', 105, 0, 27, '', 0, 0, 0);
    addArenaEnemy(4750, 4, 1800, 0, 15000, 5000, 40000, 3000, 100, 2000, 'Destroyer Slime', 'Water', false, 315, 0, false, 0, 0, 0, 0, 'Weaken', 5, 'Tukkun', 'Luck Room', 'Spawn Rate', 30, '', 0, '', 0, 'Attack: Weaken', 50, 5, 22, 'Attack: Regular', 105, 0, 27, '', 0, 0, 0);
    addArenaEnemy(4750, 7, 1500, 0, 15000, 5000, 400000, 30000, 1000, 20000, 'Anti-Snail', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Speed Room', 'Pixel', 30, 'Attack Speed', 6, '', 0, 'Attack: Regular', 105, 0, 11, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(4750, 2.5, 5000, -999999999, 75000, 15000, 200, 60000, 1000, 40000, 'Powerful Snail', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Dimensional Room', 'Pixel', 30, 'Attack %', 60, '', 0, 'Attack: Regular', 105, 0, 20, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5000, 0, 1, 0, 75000, 6000, 10000000, 250000, 10000, 100000, 'Power Stone', 'Thunder', true, 0, 0, false, 0, 45, 10000000, 25, 'None', 0, 'Tukkun', 'Power Room', 'Reward', 30, 'Boss Damage', 30, '', 0, 'Attack: Knockback', 50, 5, 20, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5500, 3, 750, 0, 75000, 6000, 30000000, 500000, 20000, 200000, 'Elite Crab', 'Thunder', true, 0, 0, false, 0, 0, 0, 25, 'Slow', 20, 'Tukkun', 'Water Room', 'Reward', 30, 'Boss Damage', 30, '', 0, 'Attack: Stun', 105, 2, 34, 'Buff: Enrage', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6000, 4, 1250, 0, 75000, 7000, 100000000, 1000000, 50000, 500000, 'Final Alien', 'Thunder', true, 0, 0, false, 0, 0, 0, 25, 'Weaken', 20, 'Tukkun', 'Final Room', 'Reward', 30, 'Boss Damage', 30, '', 0, 'Attack: Weaken', 50, 5, 22, 'Attack: Regular', 105, 0, 27, 'Buff: Enrage', 10, 0, 90);
    addArenaEnemy(6000, 0, 1, -999999999, 10000, 3000, 2000, 500000, 100000, 1000000, 'Alien Treasure', 'Water', true, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Tukkun', 'Treasure Room', 'Reward', 30, 'Drop Rate', 30, '', 0, 'Buff: Invincibility', 5, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 0, 1, -999999999, 100000, 1, 500000, 1, 1, 1, 'Secret Crystal', 'All', true, 0, 0, false, 1, 120, 10000000, 0, 'Stun', 3, 'ChaosII7', '???', 'Pixel', 25, 'Drop Rate', 25, '', 0, 'Attack: Stun', 105, 2, 40, 'Attack: Knockback', 50, 5, 30, 'Buff: Reward', 10, 0, 80);
    addArenaEnemy(1000, 0, 75, -999999999, 100000, 4000, 2000000, 0, 0, 0, 'DON\'T ATTACK!!!', 'Light', true, 0, 0, false, 0, 3, 1, 0, 'Self-Destruct', 1, 'Tukkun', '9001: Defend Mission', 'Instant Kill', 20, '', 0, '', 0, 'Produce Loot: Rare Item', 0, 0, 150, 'Buff: Invincibility', 5, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5000, 3.5, 250000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Blank Face', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Slow', 15, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Regular', 900, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(5000, 4.5, 240000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Confused Face', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Blind', 15, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Blind', 450, 6, 21, 'Attack: Regular', 900, 0, 26, '', 0, 0, 0);
    addArenaEnemy(5000, 3.5, 270000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Happy Face', 'Light', false, 0, 7000000, false, 0, 0, 0, 0, 'None', 0, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Regular', 900, 0, 18, 'Heal', 60, 1800, 23, '', 0, 0, 0);
    addArenaEnemy(5000, 3.5, 250000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Smiling Face', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Poison', 15, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Poison', 450, 6, 23, 'Attack: Regular', 900, 0, 28, '', 0, 0, 0);
    addArenaEnemy(5000, 3.5, 250000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Sad Face', 'Light', false, 0, 0, false, 310000, 0, 0, 0, 'None', 0, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Regular', 900, 0, 18, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(5000, 3.5, 220000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Shocked Face', 'Light', false, 0, 0, false, 0, 0, 0, 25, 'Weaken', 15, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Weaken', 450, 6, 23, 'Attack: Regular', 900, 0, 28, 'Buff: Enrage', 20, 0, 90);
    addArenaEnemy(5000, 3.5, 220000, 5000000, 30000, 30000, 100000000, 10000, 5000, 5000, 'Angry Face', 'Light', false, 0, 0, false, 290000, 0, 0, 75, 'None', 0, 'ABlindOrphan', 'Smiley Island', 'EXP', 20, '', 0, 'EXP', 20, 'Attack: Regular', 900, 0, 18, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(9001, 4, 500000, 500000, 16000, 9000, 9000000001.0, 0, 0, 0, 'The Ascendant', 'All', true, 0, 25000000, false, 500000, 0, 0, 25, 'All', 4, 'Tukkun', '???', 'Instant Kill', 20, 'Damage', 50, '', 0, 'Attack: Poison', 9001, 10, 7, 'Buff: Invincibility', 6, 0, 20, 'Heal', 100, 9001, 5);
    addArenaEnemy(6000, 4, 660000, 60000000, 60000, 60000, 660000000, 60000, 30000, 30000, 'Devil Face', 'Dark', true, 0, 50000000, false, 1000000, 60, 6000000, 50, 'All', 16, 'Axecutioner64', 'Smiley Island', 'Reward', 20, 'Negate Effect', 20, 'EXP', 20, 'Attack: Knockback', 450, 6, 12, 'Heal', 60, 1800, 22, 'Buff: Enrage', 20, 0, 90);
    addArenaEnemy(4000, 4, 200000, 27000, 30000, 30000, 100000000, 25000, 2500, 10000, 'Doom Dummy', 'All', true, 0, 0, false, 200000, 0, 0, 50, 'Doom', 3, 'ChioreanTudor', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 17, 'Heal', 60, 1800, 22, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(4200, 1.5, 250000, 32000, 30000, 30000, 120000000, 26000, 2600, 11000, 'Doom Snail', 'All', true, 0, 0, false, 250000, 0, 0, 25, 'Doom', 3, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 22, 'Heal', 60, 1800, 27, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(4400, 5, 250000, 38000, 30000, 30000, 150000000, 27000, 2700, 12000, 'Doom Rabbit', 'All', true, 0, 0, false, 300000, 0, 0, 100, 'Doom', 4, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 15, 'Heal', 60, 1800, 20, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(4600, 4, 300000, 45000, 30000, 30000, 180000000, 28000, 2800, 13000, 'Doom BlobBB', 'All', true, 0, 0, false, 300000, 0, 0, 50, 'Doom', 4, 'dragonewyn', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 17, 'Heal', 60, 1800, 22, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(4800, 2, 400000, 70000, 30000, 30000, 220000000, 29000, 2900, 14000, 'Doom Treeman', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Doom', 5, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 21, 'Heal', 60, 1800, 26, 'Buff: Elemental Boost', 20, 0, 90);
    addArenaEnemy(5000, 3.5, 450000, 80000, 30000, 30000, 270000000, 30000, 3000, 15000, 'Doom Mushroom', 'All', true, 0, 0, false, 400000, 0, 0, 0, 'Doom', 5, 'Guille', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 18, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5300, 4.5, 350000, 64000, 30000, 30000, 330000000, 32000, 3200, 16000, 'Doom Feonix', 'All', true, 0, 0, false, 450000, 0, 0, 50, 'Doom', 6, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 16, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5600, 5, 400000, 75000, 30000, 30000, 400000000, 34000, 3400, 17000, 'Doom Rat', 'All', true, 0, 0, false, 450000, 0, 0, 25, 'Doom', 6, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 900, 0, 15, 'Buff: Elemental Boost', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5900, 2, 500000, 87000, 30000, 30000, 500000000, 36000, 3600, 18000, 'Doom Giant', 'All', true, 0, 0, false, 500000, 0, 0, 75, 'Doom', 7, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Regular', 1100, 0, 21, 'Heal', 70, 2200, 26, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(6200, 5, 500000, 110000, 30000, 30000, 600000000, 38000, 3800, 19000, 'Doomsaurus', 'All', true, 0, 0, false, 550000, 20, 700000, 75, 'Doom', 7, 'meshwire', 'Tower of DOOOOOOM', 'Reward', 20, 'Boss Damage', 20, 'Damage', 20, 'Attack: Knockback', 550, 7, 10, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6500, 4.5, 550000, 120000, 30000, 30000, 750000000, 40000, 4000, 20000, 'Doomsurfer', 'All', true, 0, 0, false, 600000, 0, 0, 75, 'Doom', 8, 'SumYungGai', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Regular', 1100, 0, 16, 'Heal', 70, 2200, 21, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(6900, 4, 650000, 140000, 30000, 30000, 900000000, 45000, 4500, 21000, 'Doom Ghost', 'All', true, 0, 0, true, 0, 0, 0, 50, 'Doom', 8, 'Darkranboria', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Regular', 1100, 0, 17, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7300, 4, 700000, 160000, 30000, 30000, 1100000000, 50000, 5000, 22000, 'Doom Wizard', 'All', true, 0, 0, false, 750000, 0, 0, 0, 'Doom', 9, 'Randomthought31', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Regular', 1100, 0, 17, 'Heal', 70, 2200, 22, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(7700, 4, 900000, 190000, 30000, 30000, 1300000000, 55000, 5500, 23000, 'Doom Triangle', 'All', true, 0, 300000, false, 950000, 40, 6000000, 75, 'Doom', 9, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Knockback', 675, 7, 12, 'Heal', 70, 2700, 22, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(8100, 5, 1000000, 240000, 30000, 30000, 1600000000, 90000, 6000, 24000, 'Doom Spirit', 'All', true, 0, 0, false, 1000000, 0, 0, 50, 'Doom', 10, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Regular', 1350, 0, 15, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(8500, 0, 1, 300000, 30000, 30000, 2000000000, 125000, 6500, 25000, 'Doom Stone', 'All', true, 0, 0, false, 1050000, 0, 0, 50, 'Doom', 10, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 25, 'Boss Damage', 25, 'Damage', 25, 'Attack: Regular', 1350, 0, 25, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(9000, 4, 1337000, 500000, 68000, 73000, 13370000000.0, 2000000, 200000, 500000, 'Boss of DOOOOOOM', 'All', true, 0, 600000, false, 1337000, 0, 0, 75, 'Doom', 15, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 30, 'Boss Damage', 30, 'Damage', 30, 'Attack: Regular', 9000, 0, 17, 'Heal', 80, 3700, 22, 'Buff: Invincibility', 5, 0, 20);
    addArenaEnemy(9000, 0, 10, -999999999, 9900, 0, 700, 500000, 400000, 1000000, 'Doom Treasure', 'All', true, 0, 0, false, 10, 0, 0, 0, 'Doom', 8, 'Tukkun', 'Tower of DOOOOOOM', 'Reward', 30, 'Drop Rate', 30, 'Damage', 30, 'Attack: Ignore Defense', 1, 0, 11, 'Buff: Invincibility', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(5500, 3, 300000, 1450000, 25300, 25300, 680000000, 9000, 900, 7000, 'Magikrap', 'Water', false, 352, 0, false, 465000, 0, 0, 0, 'Mana Drain', 13, 'ChaosII7', 'Pokayman City', 'Reward', 20, 'MaxMP %', 80, 'EXP', 20, 'MP Recovery', 15, 0, 5, 'Attack: Regular', 1350, 0, 29, '', 0, 0, 0);
    addArenaEnemy(5800, 3, 295000, 1450000, 24100, 24100, 960000000, 17000, 1700, 7000, 'Garydos', 'Water', false, 0, 0, false, 460000, 0, 0, 100, 'Mana Drain', 16, 'ChaosII7', 'Pokayman City', 'Reward', 30, 'MaxMP %', 120, 'EXP', 30, 'MP Recovery', 15, 0, 5, 'Attack: Regular', 1350, 0, 29, 'Buff: Enrage', 30, 0, 90);
    addArenaEnemy(5600, 3, 310000, 1350000, 25800, 25800, 925000000, 9500, 950, 7000, 'Starwe', 'Water', false, 354, 20000000, false, 370000, 0, 0, 0, 'Health Drain', 13, 'ChaosII7', 'Pokayman City', 'Reward', 20, 'MaxHP %', 80, 'EXP', 20, 'HP Recovery', 15, 0, 5, 'Attack: Regular', 1350, 0, 29, 'Heal', 70, 2700, 34);
    addArenaEnemy(5900, 4, 290000, 1350000, 24500, 24500, 1300000000, 17500, 1750, 7000, 'Starthem', 'Water', false, 0, 30000000, false, 345000, 0, 0, 100, 'Health Drain', 16, 'ChaosII7', 'Pokayman City', 'Reward', 30, 'MaxHP %', 120, 'EXP', 30, 'HP Recovery', 15, 0, 5, 'Attack: Regular', 1350, 0, 27, 'Heal', 70, 2700, 32);
    addArenaEnemy(6200, 6, 500000, 1850000, 100000, 43100, 3000000000.0, 30000, 3000, 7000, 'Pokay Ball', 'All', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Pokayman City', 'Instant Kill', 20, 'Hit Chance', 20, 'Hit Chance', 20, 'Attack: Regular', 1350, 0, 13, 'Buff: Power', 30, 0, 70, '', 0, 0, 0);
    addArenaEnemy(6500, 6, 800000, 3050000, 1000000, 68000, 10000000000.0, 100000, 10000, 35000, 'Castor Ball', 'All', true, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Pokayman City', 'Instant Kill', 30, 'Hit Chance', 30, 'Hit Chance', 45, 'Attack: Regular', 1350, 0, 13, 'Buff: Power', 30, 0, 70, '', 0, 0, 0);
    addArenaEnemy(5700, 4, 535000, 2300000, 27600, 27600, 1180000000, 10000, 1000, 8000, 'Peekatchu', 'Thunder', false, 358, 0, false, 495000, 0, 0, 0, 'Stun', 7, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 20, 'Attack %', 40, 'EXP', 20, 'Attack: Stun', 1600, 3, 32, 'Attack: Regular', 1600, 0, 27, '', 0, 0, 0);
    addArenaEnemy(6000, 4, 525000, 2300000, 26100, 26100, 1650000000, 18000, 1800, 8000, 'Ryechew', 'Thunder', false, 0, 0, false, 485000, 0, 0, 50, 'Stun', 9, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 30, 'Attack %', 60, 'EXP', 30, 'Attack: Stun', 1600, 3, 32, 'Attack: Regular', 1600, 0, 27, 'Buff: Enrage', 40, 0, 90);
    addArenaEnemy(5800, 4, 470000, 3100000, 28100, 28100, 1230000000, 10500, 1050, 8000, 'Voltode', 'Thunder', false, 360, 0, false, 0, 3, 705000, 0, 'Self-Destruct', 2, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 20, 'Defense %', 40, 'EXP', 20, 'Attack: Knockback', 800, 8, 12, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(6100, 4, 510000, 3400000, 29500, 29500, 1710000000, 18500, 1850, 8000, 'Electrorb', 'Thunder', false, 0, 0, false, 0, 3, 765000, 0, 'Self-Destruct', 2, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 30, 'Defense %', 60, 'EXP', 30, 'Attack: Knockback', 800, 8, 12, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(5900, 3, 555000, 2450000, 28500, 28500, 1270000000, 11000, 1100, 8000, 'Sanke', 'Earth', false, 362, 0, false, 665000, 0, 0, 0, 'Poison', 13, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 20, 'Attack Speed %', 40, 'EXP', 20, 'Attack: Poison', 800, 8, 24, 'Attack: Regular', 1600, 0, 29, '', 0, 0, 0);
    addArenaEnemy(6200, 3, 540000, 2400000, 27000, 27000, 1770000000, 19000, 1900, 8000, 'Kroba', 'Earth', false, 0, 0, false, 650000, 0, 0, 50, 'Poison', 16, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 30, 'Attack Speed %', 60, 'EXP', 30, 'Attack: Poison', 800, 8, 24, 'Attack: Regular', 1600, 0, 29, 'Buff: Enrage', 40, 0, 90);
    addArenaEnemy(6000, 3, 475000, 2550000, 29000, 37700, 1320000000, 11500, 1150, 8000, 'Duglett', 'Earth', false, 364, 0, false, 570000, 0, 0, 0, 'Blind', 13, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 20, 'Evasion %', 40, 'EXP', 20, 'Attack: Blind', 800, 8, 24, 'Attack: Regular', 1600, 0, 29, '', 0, 0, 0);
    addArenaEnemy(6300, 3, 460000, 2500000, 27400, 35700, 1830000000, 19500, 1950, 8000, 'Digtrio', 'Earth', false, 0, 0, false, 555000, 0, 0, 50, 'Blind', 16, 'ChaosII7', 'Not Copyright Infringement', 'Reward', 30, 'Evasion %', 60, 'EXP', 30, 'Attack: Blind', 800, 8, 24, 'Attack: Regular', 1600, 0, 29, 'Buff: Enrage', 40, 0, 90);
    addArenaEnemy(5100, 2, 510000, 2600000, 38400, 29500, 1370000000, 12000, 1200, 8000, 'Magnetmight', 'Thunder', false, 366, 0, false, 615000, 0, 0, 0, 'Weaken', 13, 'ChaosII7', 'Not Copyright Infringement', 'Spawn Rate', 10, 'Accuracy %', 40, 'EXP', 20, 'Attack: Weaken', 800, 8, 26, 'Attack: Regular', 1600, 0, 31, '', 0, 0, 0);
    addArenaEnemy(5400, 2, 500000, 2550000, 36300, 27900, 1890000000, 20000, 2000, 8000, 'Magnettonne', 'Thunder', false, 0, 0, false, 600000, 0, 0, 50, 'Weaken', 16, 'ChaosII7', 'Not Copyright Infringement', 'Spawn Rate', 15, 'Accuracy %', 60, 'EXP', 30, 'Attack: Weaken', 800, 8, 26, 'Attack: Regular', 1600, 0, 31, 'Buff: Enrage', 40, 0, 90);
    addArenaEnemy(7000, 3, 1100000, 4050000, 50000, 50000, 9000000000.0, 150000, 15000, 40000, 'Rawrquaza', 'Fire', true, 0, 1000000000, false, 1300000, 0, 0, 50, 'All', 9, 'ChaosII7', 'Not Copyright Infringement', 'Negate Effect', 30, 'Boss Damage', 30, 'EXP', 45, 'Attack: Power Down', 220, 4, 11, 'Heal', 80, 3200, 24, 'Buff: Enrage', 40, 0, 90);
    addArenaEnemy(9000, 4, 3000000, 45000000, 50000, 50000, 2000000000, 40000, 10000, 10000, 'Mr. Vitreous', 'Fire', false, 0, 0, false, 4000000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Defense %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 17, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 3000000, 75000000, 60000, 60000, 1400000000, 40000, 10000, 10000, 'Accursed Cranium', 'Dark', false, 0, 0, true, 4000000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Resist', 25, 'EXP', 50, 'Attack: Regular', 600, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 2500000, 32500000, 60000, 40000, 2000000000, 40000, 10000, 10000, 'Methane Cloud', 'Wind', false, 0, 0, false, 693600, 45, 867000, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Defense %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 2500000, 32500000, 50000, 50000, 1600000000, 40000, 10000, 10000, 'Ring of Angry Fire', 'Fire', false, 0, 0, false, 4000000, 45, 1, 75, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Defense %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 19, 'Buff: Enrage', 20, 0, 80, '', 0, 0, 0);
    addArenaEnemy(9000, 0, 1, 32500000, 70000, 50000, 2000000000, 40000, 10000, 10000, 'Sunflower', 'Earth', false, 0, 0, false, 5000000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Defense %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 25, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 2, 3500000, 35000000, 40000, 60000, 4000000000.0, 80000, 10000, 10000, 'Corrupted Giant', 'Dark', false, 0, 0, false, 2500000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Attack %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 3000000, 25000000, 70000, 40000, 2000000000, 40000, 10000, 10000, 'Corrupted Blob', 'Dark', false, 375, 0, false, 4000000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Attack %', 50, 'EXP', 50, 'Attack: Regular', 600, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 5000000, 40000000, 80000, 50000, 6600000000.0, 400000, 100000, 100000, 'Corrupted BlobBB', 'Dark', true, 0, 0, false, 6000000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Boss Damage', 25, 'EXP', 50, 'Attack: Regular', 600, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 2, 6000000, 50000000, 60000, 70000, 7600000000.0, 400000, 100000, 100000, 'Corrupted Treeman', 'Dark', true, 0, 0, false, 4500000, 45, 1, 0, 'None', 0, 'Kurrus', 'The Corruption', 'Reward', 25, 'Boss Damage', 25, 'EXP', 50, 'Attack: Regular', 600, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(9000, 3, 1500000, 5000000, 25000, 25000, 75000000, 800000, 100000, 200000, '!!!!!', 'All', true, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Drop Rate', 40, 'Reward', 40, 'Attack: Accuracy Down', 900, 20, 17, 'Buff: Reward', 30, 0, 70, 'Produce Loot: Rare Item', 0, 0, 90);
    addArenaEnemy(6500, 5, 650000, 3000000, 15000, 50000, 125000000, 20000, 2500, 10000, 'Small Air Elemental', 'Wind', false, 379, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Evasion %', 60, 'Dodge Chance', 30, 'Attack: Regular', 1350, 0, 15, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 5, 700000, 3500000, 15000, 50000, 200000000, 40000, 5000, 20000, 'Large Air Elemental', 'Wind', false, 0, 0, false, 710000, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Evasion %', 60, 'Dodge Chance', 30, 'Attack: Regular', 1350, 0, 15, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(6500, 2, 700000, 7800000, 30000, 15000, 150000000, 20000, 2500, 10000, 'Small Earth Elemental', 'Earth', false, 381, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'Resist', 30, 'Attack: Regular', 1350, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 2, 750000, 8800000, 30000, 15000, 250000000, 40000, 5000, 20000, 'Large Earth Elemental', 'Earth', false, 0, 0, false, 835000, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'Resist', 30, 'Attack: Regular', 1350, 0, 21, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(6500, 3, 700000, 3500000, 30000, 15000, 125000000, 20000, 2500, 10000, 'Small Water Elemental', 'Water', false, 383, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Accuracy %', 60, 'Hit Chance', 30, 'Attack: Regular', 1350, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 3, 750000, 4000000, 30000, 15000, 200000000, 40000, 5000, 20000, 'Large Water Elemental', 'Water', false, 0, 0, false, 795000, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Accuracy %', 60, 'Hit Chance', 30, 'Attack: Regular', 1350, 0, 19, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(6500, 4, 1000000, 2000000, 15000, 15000, 100000000, 20000, 2500, 10000, 'Small Fire Elemental', 'Fire', false, 385, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'Damage', 30, 'Attack: Regular', 1350, 0, 17, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 4, 1050000, 2500000, 15000, 15000, 175000000, 40000, 5000, 20000, 'Large Fire Elemental', 'Fire', false, 0, 0, false, 975000, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'Damage', 30, 'Attack: Regular', 1350, 0, 17, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(6250, 2, 600000, 3250000, 20000, 20000, 75000000, 20000, 2500, 10000, 'Lizard Slave', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Health Drain', 7, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'MaxHP %', 120, 'Attack: Regular', 1350, 0, 21, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6750, 2.5, 700000, 3900000, 20000, 20000, 150000000, 30000, 3750, 15000, 'Lizard Hulk', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Mana Drain', 7, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'MaxHP %', 120, 'Attack: Regular', 1350, 0, 20, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7250, 3, 900000, 3000000, 20000, 20000, 250000000, 60000, 7500, 30000, 'Elite Lizard Hulk', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Mana Drain', 7, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'MaxHP %', 120, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6250, 3, 550000, 3250000, 20000, 20000, 65000000, 20000, 2500, 10000, 'Lizard Witch-Doctor', 'Wind', false, 0, 0, false, 825000, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'MaxMP %', 120, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6750, 3.5, 625000, 3900000, 20000, 20000, 130000000, 30000, 3750, 15000, 'Lizard Shadow Mage', 'Dark', false, 0, 0, false, 875000, 0, 0, 0, 'Weaken', 7, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Defense %', 60, 'MaxMP %', 120, 'Attack: Regular', 1350, 0, 18, 'Buff: Elemental Boost', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7250, 4, 850000, 3000000, 20000, 20000, 225000000, 60000, 7500, 30000, 'Lizard Berserker', 'Dark', false, 0, 0, false, 0, 0, 0, 75, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'MaxMP %', 120, 'Attack: Regular', 1350, 0, 17, 'Buff: Enrage', 30, 0, 80, '', 0, 0, 0);
    addArenaEnemy(7000, 3, 1200000, 4000000, 60000, 25000, 175000000, 40000, 5000, 20000, 'Owlbear', 'Wind', false, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'Damage', 30, 'Attack: Regular', 1350, 0, 19, 'Attack: Stun', 1350, 3, 44, 'Attack: Evasion Down', 300, 4, 7);
    addArenaEnemy(7500, 3.5, 1100000, 4000000, 60000, 35000, 450000000, 120000, 15000, 60000, 'Purple Worm', 'Earth', false, 0, 0, false, 1000000, 0, 0, 50, 'Potion Block', 7, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack %', 60, 'Damage', 30, 'Attack: Regular', 1350, 0, 18, 'Buff: Enrage', 30, 0, 80, 'Attack: Silence', 400, 10, 7);
    addArenaEnemy(6750, 5, 750000, 3500000, 60000, 22500, 100000000, 20000, 2500, 10000, 'Rust Monster', 'Thunder', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 12, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Negate Effect', 30, 'Ignore Defense', 30, 'Attack: Weaken', 675, 7, 20, 'Attack: Regular', 1350, 0, 25, 'Attack: Power Down', 200, 2, 7);
    addArenaEnemy(7250, 2, 850000, 5000000, 60000, 22500, 200000000, 40000, 5000, 20000, 'Roper', 'Earth', false, 0, 0, false, 1050000, 0, 0, 0, 'Stun', 8, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Negate Effect', 30, 'Ignore Defense', 30, 'Attack: Stun', 1350, 3, 36, 'Attack: Regular', 1350, 0, 31, 'Attack: Defense Down', 300, 3, 7);
    addArenaEnemy(7750, 5.5, 1000000, 10000000, 30000, 32500, 500000000, 120000, 15000, 60000, 'Mimic', 'Ice', false, 0, 0, false, 800000, 0, 0, 0, 'Stun', 4, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Drop Rate', 30, 'Coin', 60, 'Attack: Stun', 1350, 3, 29, 'Attack: Knockback', 675, 7, 19, 'Produce Loot: Pixel', 8000, 0, 20);
    addArenaEnemy(6750, 3.5, 700000, 3500000, 50000, 55000, 150000000, 30000, 3750, 15000, 'Flame Lich', 'Fire', false, 0, 0, false, 850000, 0, 0, 0, 'Poison', 16, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Instant Kill', 15, 'Negate Effect', 30, 'Attack: Poison', 675, 7, 23, 'Attack: Regular', 1350, 0, 28, 'Attack: Power Down', 200, 2, 7);
    addArenaEnemy(6750, 3.5, 700000, 4000000, 50000, 55000, 150000000, 30000, 3750, 15000, 'Frost Lich', 'Ice', false, 0, 0, false, 850000, 0, 0, 0, 'Slow', 16, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Instant Kill', 15, 'Negate Effect', 30, 'Attack: Stun', 1350, 3, 33, 'Attack: Regular', 1350, 0, 28, 'Attack: Defense Down', 200, 3, 7);
    addArenaEnemy(7250, 3.5, 800000, 5000000, 70000, 60000, 600000000, 120000, 15000, 60000, 'Demi-Lich', 'Dark', false, 0, 0, false, 1000000, 0, 0, 0, 'Blind', 24, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Instant Kill', 15, 'Negate Effect', 30, 'Attack: Blind', 675, 7, 23, 'Attack: Regular', 1350, 0, 28, 'Attack: Silence', 300, 30, 7);
    addArenaEnemy(6750, 3.5, 750000, 2500000, 55000, 20000, 150000000, 20000, 2500, 10000, 'Inky Pool', 'Water', false, 401, 0, false, 700000, 0, 0, 0, 'Poison', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxHP %', 120, 'Critical Damage', 120, 'Attack: Poison', 675, 7, 23, 'Attack: Regular', 1350, 0, 28, 'Attack: Stun', 1350, 3, 53);
    addArenaEnemy(7250, 3.5, 850000, 3500000, 55000, 20000, 350000000, 40000, 5000, 20000, 'Black Pudding', 'Water', false, 402, 0, false, 800000, 0, 0, 0, 'Poison', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxHP %', 120, 'Critical Damage', 120, 'Attack: Poison', 675, 7, 23, 'Attack: Regular', 1350, 0, 28, 'Attack: Stun', 1350, 3, 53);
    addArenaEnemy(7750, 3.5, 1000000, 4000000, 55000, 20000, 650000000, 60000, 7500, 30000, 'Elder Pudding', 'Water', false, 0, 0, false, 900000, 0, 0, 0, 'Poison', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxHP %', 120, 'Critical Damage', 120, 'Attack: Poison', 675, 7, 23, 'Attack: Regular', 1350, 0, 28, 'Attack: Stun', 1350, 3, 53);
    addArenaEnemy(8000, 3.5, 1100000, 6000000, 55000, 40000, 1000000000, 120000, 15000, 60000, 'Gelatinous Cube', 'Water', false, 0, 0, false, 1000000, 0, 0, 0, 'Slow', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxHP %', 120, 'Critical Damage', 120, 'Attack: Silence', 500, 15, 11, 'Attack: Stun', 1350, 3, 43, '', 0, 0, 0);
    addArenaEnemy(7000, 3, 700000, 3000000, 42000, 20000, 250000000, 30000, 3750, 15000, 'Gibbering Orb', 'Earth', false, 0, 0, false, 950000, 0, 0, 0, 'Weaken', 9, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxMP %', 120, 'Critical Chance', 30, 'Attack: Weaken', 675, 7, 24, 'Attack: Regular', 1350, 0, 29, 'Attack: Power Down', 700, 4, 7);
    addArenaEnemy(7500, 3, 800000, 4000000, 42000, 20000, 400000000, 50000, 6250, 25000, 'Gibbering Mouther', 'Earth', false, 0, 0, false, 1050000, 0, 0, 0, 'Weaken', 9, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'MaxMP %', 120, 'Critical Chance', 30, 'Attack: Weaken', 675, 7, 24, 'Attack: Regular', 1350, 0, 29, 'Attack: Power Down', 700, 4, 7);
    addArenaEnemy(7000, 3, 1000000, 4400000, 44000, 55000, 150000000, 30000, 3750, 15000, 'Giant Spider', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'Blind', 10, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Mastery', 60, 'Instant Kill', 15, 'Attack: Blind', 675, 7, 24, 'Attack: Regular', 1350, 0, 29, 'Attack: Accuracy Down', 700, 7, 7);
    addArenaEnemy(7500, 5, 1100000, 2000000, 40000, 30000, 250000000, 50000, 6250, 25000, 'Reapling', 'Dark', false, 0, 0, false, 0, 0, 0, 0, 'Attack UP', 20, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Instant Kill', 15, 'Instant Kill', 15, 'Attack: Regular', 1350, 0, 15, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7000, 3, 800000, 9000000, 30000, 40000, 125000000, 30000, 3750, 15000, 'Ghostly Adventurer', 'All', false, 0, 400000, true, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'HP Recovery', 15, 0, 15);
    addArenaEnemy(7500, 3, 900000, 16000000, 30000, 50000, 225000000, 50000, 6250, 25000, 'Invisible', 'All', false, 0, 0, true, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Resist', 30, 'Resist', 30, 'Attack: Regular', 1350, 0, 19, 'Buff: Invincibility', 15, 0, 80, '', 0, 0, 0);
    addArenaEnemy(6750, 3.5, 650000, 3500000, 35000, 68300, 150000000, 30000, 3750, 15000, 'Floating Angel', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Potion Block', 5, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Dodge Chance', 30, 'Evasion %', 60, 'Attack: Regular', 1350, 0, 18, 'Buff Extension', 2, 0, 11, '', 0, 0, 0);
    addArenaEnemy(7250, 3.5, 700000, 4000000, 35000, 68300, 225000000, 50000, 6250, 25000, 'Floating Devil', 'Fire', false, 0, 0, false, 0, 0, 0, 0, 'Potion Block', 5, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Dodge Chance', 30, 'Evasion %', 60, 'Attack: Regular', 1350, 0, 18, 'Buff Extension', 2, 0, 11, '', 0, 0, 0);
    addArenaEnemy(7750, 2, 1050000, 10000000, 35000, 45000, 750000000, 160000, 20000, 80000, 'Beholder', 'All', false, 0, 0, false, 850000, 0, 0, 50, 'Potion Block', 5, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Equipment Attack', 240, 'Attack %', 60, 'Attack: Regular', 1350, 0, 21, 'Buff: Power', 30, 0, 70, '', 0, 0, 0);
    addArenaEnemy(6750, 4.5, 800000, 3000000, 35000, 35000, 100000000, 30000, 3750, 15000, 'Hellchihuahua', 'Dark', false, 414, 0, false, 0, 0, 0, 0, 'Poison', 4, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack Speed %', 60, 'Attack Speed', 6, 'Attack: Poison', 675, 7, 21, 'Attack: Regular', 1350, 0, 26, '', 0, 0, 0);
    addArenaEnemy(7250, 5.5, 850000, 4000000, 35000, 35000, 150000000, 50000, 6250, 25000, 'Hellhound', 'Dark', false, 415, 0, false, 0, 0, 0, 0, 'Poison', 6, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack Speed %', 60, 'Attack Speed', 6, 'Attack: Poison', 675, 7, 19, 'Attack: Regular', 1350, 0, 24, '', 0, 0, 0);
    addArenaEnemy(7750, 5, 900000, 6000000, 35000, 40000, 500000000, 160000, 20000, 80000, 'Cerberus', 'Dark', false, 0, 0, false, 0, 0, 0, 75, 'Poison', 8, 'ChaosII7', 'Secret Dungeon', 'Reward', 30, 'Attack Speed %', 60, 'Attack Speed', 6, 'Attack: Poison', 675, 7, 20, 'Attack: Regular', 1350, 0, 25, 'Buff: Enrage', 30, 0, 90);
    addArenaEnemy(7500, 2.5, 1300000, 16000000, 25000, 40000, 1300000000, 400000, 40000, 160000, 'Mummy', 'Dark', true, 417, 0, true, 1, 0, 0, 0, 'Zombify', 10, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Resist', 40, 'Attack: Regular', 1350, 0, 20, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Coin', 12000, 0, 20);
    addArenaEnemy(8000, 3, 1400000, 22500000, 30000, 50000, 3700000000.0, 600000, 60000, 240000, 'Pharaoh', 'Dark', true, 0, 0, true, 1, 0, 0, 0, 'Zombify', 10, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Resist', 40, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Coin', 19000, 0, 30);
    addArenaEnemy(7750, 2, 800000, 12000000, 25000, 35000, 500000000, 175000, 17500, 70000, 'Visage of Sorrow', 'Ice', true, 419, 0, false, 900000, 0, 0, 50, 'Defense UP', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Defense %', 80, 'Attack: Regular', 1350, 0, 21, 'Buff: Enrage', 30, 0, 80, 'Attack: Defense Down', 700, 10, 20);
    addArenaEnemy(8000, 4, 850000, 9000000, 25000, 35000, 400000000, 225000, 22500, 90000, 'Visage of Rage', 'Fire', true, 420, 0, false, 950000, 0, 0, 50, 'Attack UP', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Attack %', 80, 'Attack: Regular', 1350, 0, 17, 'Buff: Enrage', 30, 0, 80, 'Attack: Power Down', 700, 7, 20);
    addArenaEnemy(8250, 3, 900000, 10000000, 25000, 45500, 600000000, 275000, 27500, 110000, 'Visage of Joy', 'Thunder', true, 421, 0, false, 1000000, 0, 0, 50, 'Evasion UP', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Evasion %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Enrage', 30, 0, 80, 'Attack: Evasion Down', 900, 13, 20);
    addArenaEnemy(8500, 3, 950000, 10000000, 25000, 35000, 500000000, 325000, 32500, 130000, 'Visage of Apathy', 'All', true, 0, 0, false, 1050000, 0, 0, 50, 'Stat UP', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Negate Effect', 40, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'Attack: Silence', 900, 50, 20);
    addArenaEnemy(8000, 3, 1200000, 11000000, 35000, 50000, 2400000000.0, 200000, 20000, 80000, 'Chimera', 'Fire', true, 423, 0, false, 1300000, 0, 0, 0, 'Potion Block', 6, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Damage', 40, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'HP Recovery', 15, 0, 15);
    addArenaEnemy(8250, 3, 1100000, 11000000, 35000, 45000, 2000000000, 300000, 30000, 120000, 'Chimera', 'Fire', true, 424, 0, false, 1200000, 0, 0, 0, 'Potion Block', 6, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Damage', 40, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'HP Recovery', 15, 0, 15);
    addArenaEnemy(8500, 3, 1000000, 11000000, 35000, 40000, 1600000000, 500000, 50000, 200000, 'Chimera', 'Fire', true, 0, 0, false, 1100000, 0, 0, 25, 'Potion Block', 6, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Damage', 40, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'HP Recovery', 15, 0, 15);
    addArenaEnemy(7500, 3, 1000000, 18000000, 35000, 50000, 300000000, 100000, 10000, 40000, 'Blooooob', 'All', true, 426, 0, false, 0, 45, 1700000, 0, 'Accuracy UP', 10, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'MaxMP %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'MP Recovery', 15, 0, 15);
    addArenaEnemy(7750, 3, 1100000, 17000000, 35000, 45000, 400000000, 150000, 15000, 60000, 'Bloooob', 'All', true, 427, 0, false, 0, 45, 1800000, 0, 'Accuracy UP', 12, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'MaxMP %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'MP Recovery', 15, 0, 15);
    addArenaEnemy(8000, 3, 1200000, 16000000, 35000, 45000, 500000000, 200000, 20000, 80000, 'Blooob', 'All', true, 428, 0, false, 0, 45, 1900000, 0, 'Accuracy UP', 15, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'MaxMP %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'MP Recovery', 15, 0, 15);
    addArenaEnemy(8250, 3, 1300000, 15000000, 35000, 40000, 600000000, 250000, 25000, 100000, 'Bloob', 'All', true, 429, 0, false, 0, 45, 2000000, 0, 'Accuracy UP', 20, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'MaxMP %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'MP Recovery', 15, 0, 15);
    addArenaEnemy(8500, 3, 1400000, 12000000, 35000, 40000, 700000000, 300000, 30000, 120000, 'Blob?', 'All', true, 0, 0, false, 1100000, 0, 0, 0, 'Accuracy UP', 30, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'MaxMP %', 80, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'MP Recovery', 15, 0, 15);
    addArenaEnemy(9000, 3, 1500000, 5000000, 25000, 25000, 2000000000, 1000000, 100000, 400000, '?????', 'All', true, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'ChaosII7', 'Secret Dungeon', 'Reward', 40, 'Boss Damage', 40, 'Drop Rate', 40, 'Attack: Accuracy Down', 300, 20, 17, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Rare Item', 0, 0, 90);
    addArenaEnemy(9000, 3, 1800000, 60000000, 60000, 45000, 6666666666.0, 1000000, 100000, 400000, 'Chaos', 'All', true, 432, 0, false, 1600000, 0, 0, 0, 'Chaos', 2, 'ChaosII7', 'Final Chamber', 'Reward', 50, 'Boss Damage', 50, 'Ignore Defense', 50, 'Attack: Ignore Defense', 1000, 0, 11, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Stat', 0, 0, 10);
    addArenaEnemy(9001, 3, 1800000, 60000000, 60000, 45000, 26666666666.0, 2500000, 250000, 1000000, 'CHAOS', 'All', true, 0, 266666666, false, 1600000, 0, 0, 100, 'Chaos', 8, 'ChaosII7', 'Final Chamber', 'Reward', 60, 'Boss Damage', 60, 'Ignore Defense', 60, 'Attack: Ignore Defense', 1500, 0, 11, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Rare Item', 0, 0, 60);
    addArenaEnemy(7000, 2.5, 600000, 1000000, 25000, 30000, 10000000, 6666, 666, 6666, 'Elite Mummy', 'Dark', false, 434, 0, true, 0, 0, 0, 0, 'Zombify', 6, 'ChaosII7', 'Spooky Crypt', 'Reward', 40, 'Non-Boss Damage', 40, '', 0, 'Attack: Regular', 1350, 0, 20, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Stat', 0, 0, 20);
    addArenaEnemy(7000, 3, 600000, 1000000, 25000, 30000, 10000000, 6666, 666, 6666, 'Elite Pharaoh', 'Dark', false, 433, 0, true, 0, 0, 0, 0, 'Zombify', 6, 'ChaosII7', 'Spooky Crypt', 'Reward', 40, 'Non-Boss Damage', 40, '', 0, 'Attack: Regular', 1350, 0, 19, 'Buff: Elemental Boost', 30, 0, 80, 'Produce Loot: Stat', 0, 0, 20);
    addArenaEnemy(8400, 0, 1, -999999999, 100000, 1, 1000000, 1, 1, 1, 'Secret Crystal', 'All', true, 0, 0, false, 1, 120, 10000000, 0, 'Stun', 4, 'ChaosII7', '???', 'Pixel', 50, 'Drop Rate', 50, '', 0, 'Attack: Stun', 105, 2, 40, 'Attack: Knockback', 50, 5, 30, 'Buff: Reward', 10, 0, 80);
    addArenaEnemy(9000, 3, 12345, 12345, 12345, 12345, 123450000, 1000000, 400000, 400000, 'shinki, the bridge dweller', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Self-Destruct', 1, 'Tukkun', 'Secret Dungeon', 'Drop Rate', 40, 'Damage', 40, 'Spawn Rate', 20, 'Attack: Defense Down', 900, 30, 17, 'Produce Loot: Coin', 10000, 0, 30, 'Produce Loot: Rare Item', 0, 0, 45);
    addArenaEnemy(6000, 4.5, 800000, 3000000, 29000, 21000, 500000000, 50000, 5000, 25000, 'THE MEGABOSS\'s Revenge', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Chaos', 7, '???', '???', 'Reward', 40, 'Boss Damage', 40, '', 0, 'Attack: Regular', 1350, 0, 16, 'Heal', 70, 2700, 21, 'Buff: Elemental Boost', 30, 0, 90);
    addArenaEnemy(6500, 4, 1000000, 4000000, 455000, 325000, 500000000, 25000, 2500, 10000, 'Monster', 'All', false, 0, 0, false, 5000000, 0, 0, 50, 'Throw Soap', 16, 'SumYungGai', 'Censor Ship', 'Accuracy %', 120, 'Evasion %', 120, 'Negate Effect', 60, 'Attack: Blind', 800, 8, 22, 'Attack: Regular', 1600, 0, 27, 'Buff: Invincibility', 20, 0, 90);
    addArenaEnemy(7000, 4, 1500000, 14000000, 660000, 450000, 6000000000.0, 1000000, 100000, 200000, 'Censor Sheep', 'All', true, 0, 0, false, 8000000, 0, 0, 100, 'Throw Soap', 40, 'Arrrl', 'Censor Ship', 'Hit Chance', 60, 'Dodge Chance', 60, 'Negate Effect', 60, 'Attack: Blind', 800, 8, 22, 'Attack: Silence', 400, 50, 11, 'Buff: Invincibility', 20, 0, 90);
    addArenaEnemy(9000, 0, 1, 50000000, 275000, 50000, 38000000000.0, 16000000, 1000000, 4000000, 'Corrupted Giant Treeman', 'All', true, 0, 0, false, 2000000, 0, 0, 0, 'Accuracy UP', 5, 'Kurrus', 'The Corruption', 'Reward', 50, 'Spawn Rate', 30, 'EXP', 25, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1000, 2.5, 1, -999999999, 1000, 1000, 5000, 5000, 5000, 5000, 'Robaconollitron', 'Earth', true, 0, 0, false, 1, 0, 0, 0, 'Stun', 1, 'toadvine', 'Foodlandistan', 'Reward', 20, 'Reflect', 600, 'Drop Rate', 20, 'Buff: Enrage', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1000, 2.5, 1, -999999999, 1100, 1000, 5000, 5000, 5000, 5000, 'Robroccolaconator', 'Earth', true, 0, 0, false, 1, 0, 0, 0, 'Stun', 1, 'toadvine', 'Foodlandistan', 'Reward', 20, 'Critical Damage', 80, 'Drop Rate', 20, 'Buff: Elemental Boost', 10, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7500, 0, 2800000, 20000000, 99000, 44000, 2500000000.0, 10000, 10000, 10000, 'Abandoned Mob 1', 'All', true, 0, 0, true, 0, 0, 0, 0, 'Zombify', 20, 'Tukkun', 'Abandoned Lab', 'Damage', 20, 'Resist', 20, '', 0, 'Buff: Elemental Boost', 60, 0, 70, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7500, 3, 2800000, 20000000, 99000, 44000, 2500000000.0, 10000, 10000, 10000, 'Abandoned Mob 2', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Stat UP', 20, 'Tukkun', 'Abandoned Lab', 'Instant Kill', 10, 'Boss Damage', 40, '', 0, 'Attack: Ignore Defense', 500, 0, 20, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(7500, 0, 2800000, 80000000, 99000, 44000, 2500000000.0, 10000, 10000, 10000, 'Abandoned Mob 3', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Chaos', 20, 'Tukkun', 'Abandoned Lab', 'Magic Resist', 20, 'Negate Effect', 20, '', 0, 'Buff: Invincibility', 30, 0, 70, 'Spirit Recovery', 5, 0, 10, '', 0, 0, 0);
    addArenaEnemy(7500, 0, 2800000, 20000000, 99000, 44000, 2500000000.0, 10000, 10000, 10000, 'Abandoned Mob 4', 'All', true, 0, 0, false, 0, 0, 0, 0, 'Doom', 10, 'Tukkun', 'Abandoned Lab', 'Equipment Attack', 40, 'Ignore Defense', 8, '', 0, 'Attack: Defense Down', 100, 1, 1, 'Buff: Master', 60, 0, 70, '', 0, 0, 0);
    addArenaEnemy(7500, 0, 2800000, 20000000, 99000, 44000, 3000000000.0, 10000, 10000, 10000, 'Abandoned Mob 5', 'All', true, 0, 150000000, false, 0, 0, 0, 0, 'Evasion UP', 20, 'Tukkun', 'Abandoned Lab', 'MaxHP %', 20, 'Potion Efficiency', 200, '', 0, 'HP Recovery', 20, 0, 5, 'MP Recovery', 20, 0, 10, 'Buff Extension', 1, 0, 10);
    addArenaEnemy(3500, 4.5, 250000, 2000000, 20000, 30000, 50000000, 13900, 1390, 5000, 'Mother Goose', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Attack UP', 10, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 1, '', 0, 'Reward', 1, 'Attack: Power Down', 350, 5, 15, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(3600, 3.5, 275000, 2000000, 25000, 35000, 55000000, 14000, 1400, 5000, 'Little Mermaid', 'Water', false, 0, 0, false, 0, 0, 0, 0, 'Weaken', 5, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 2, '', 0, 'Reward', 2, 'Attack: Weaken', 675, 7, 23, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(3700, 6, 300000, 3000000, 15000, 40000, 60000000, 14100, 1410, 5000, 'Blind Mouse', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Blind', 30, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 3, '', 0, 'Reward', 3, 'Attack: Blind', 675, 7, 18, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(3800, 3, 460000, 4000000, 40000, 40000, 800000000, 45000, 4500, 25000, 'Frog Prince', 'Water', true, 0, 0, false, 550000, 0, 0, 0, 'Poison', 15, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 4, 'Ignore Defense', 5, 'Reward', 4, 'Attack: Poison', 675, 7, 24, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(3900, 4, 300000, 3000000, 20000, 25000, 65000000, 14400, 1440, 5000, 'Ugly Duckling', 'Water', false, 0, 0, false, 0, 0, 0, 25, 'Attack UP', 15, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 5, '', 0, 'Reward', 5, 'Attack: Power Down', 500, 5, 15, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(4000, 5, 300000, 4000000, 30000, 30000, 70000000, 14500, 1450, 5000, 'Tom Thumb', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Defense UP', 15, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 6, '', 0, 'Reward', 6, 'Attack: Defense Down', 500, 5, 15, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(4100, 5, 325000, 4000000, 30000, 30000, 75000000, 14600, 1460, 5000, 'Thumbelina', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Defense UP', 20, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 7, '', 0, 'Reward', 7, 'Attack: Defense Down', 500, 5, 15, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(4200, 3.5, 450000, 5000000, 40000, 40000, 1000000000, 50000, 5000, 25000, 'Old Woman in Shoe', 'Light', true, 0, 0, false, 600000, 0, 0, 0, 'Evasion UP', 30, 'toadvine', 'Lullaby Lake', 'Spawn Rate', 8, 'Potion Efficiency', 40, 'Reward', 8, 'Attack: Evasion Down', 500, 5, 15, 'Produce Loot: Pixel', 5000, 0, 20, 'Buff: Reward', 30, 0, 80);
    addArenaEnemy(4500, 4, 400000, 5000000, 25000, 40000, 140000000, 17000, 1700, 6500, 'Troll', 'Ice', false, 0, 0, false, 0, 0, 0, 50, 'Potion Block', 20, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 9, '', 0, 'Reward', 9, 'Attack: Knockback', 800, 8, 12, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(4600, 4, 500000, 5000000, 25000, 40000, 150000000, 17100, 1710, 6500, 'Trollface', 'Dark', false, 0, 0, false, 400000, 0, 0, 50, 'Throw Soap', 20, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 10, '', 0, 'Reward', 10, 'Attack: Knockback', 800, 8, 12, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(4700, 4, 800000, 7000000, 30000, 50000, 2000000000, 60000, 6000, 32500, 'Successful Troll', 'Ice', true, 0, 0, false, 0, 0, 0, 50, 'Potion Block', 30, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 11, 'Ignore Defense', 10, 'Reward', 11, 'Attack: Knockback', 800, 8, 12, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(4800, 4, 600000, 6000000, 25000, 25000, 160000000, 17300, 1730, 6500, 'Younger Gruff', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'Stun', 4, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 12, '', 0, 'Reward', 12, 'Attack: Stun', 1600, 3, 32, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(4900, 3.5, 460000, 8000000, 27500, 27500, 170000000, 17400, 1740, 6500, 'Middle Gruff', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'Stun', 6, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 13, '', 0, 'Reward', 13, 'Attack: Stun', 1600, 3, 33, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5000, 3, 900000, 10000000, 50000, 40000, 2500000000.0, 65000, 6500, 32500, 'Eldest Gruff', 'Earth', true, 0, 0, false, 0, 0, 0, 25, 'Stun', 10, 'toadvine', 'Billygoat Bridge', 'Spawn Rate', 14, 'Potion Efficiency', 80, 'Reward', 14, 'Attack: Stun', 1600, 3, 34, 'Produce Loot: Pixel', 5500, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5500, 4.5, 1000000, 8000000, 35000, 35000, 300000000, 20300, 2030, 8500, 'Gingerbro', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Poison', 30, 'toadvine', 'Fabled Forest', 'Spawn Rate', 15, '', 0, 'Reward', 15, 'Attack: Poison', 925, 8, 21, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5600, 3.5, 950000, 9000000, 50000, 50000, 315000000, 20400, 2040, 8500, 'HEY! LISTEN!', 'Light', false, 0, 0, false, 900000, 0, 0, 0, 'Evasion UP', 30, 'toadvine', 'Fabled Forest', 'Spawn Rate', 16, '', 0, 'Reward', 16, 'Attack: Silence', 500, 5, 15, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5700, 4, 700000, 7000000, 50000, 40000, 330000000, 20500, 2050, 8500, 'Forest Elf', 'Wind', false, 0, 0, false, 794400, 0, 0, 50, 'Slow', 15, 'toadvine', 'Fabled Forest', 'Spawn Rate', 17, '', 0, 'Reward', 17, 'Attack: Stun', 1850, 3, 32, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5800, 3, 1000000, 15000000, 40000, 40000, 350000000, 20600, 2060, 8500, 'Mini Baba Yaga', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Defense UP', 30, 'toadvine', 'Fabled Forest', 'Spawn Rate', 18, '', 0, 'Reward', 18, 'Attack: Defense Down', 500, 5, 15, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(5900, 5, 1100000, 10000000, 40000, 40000, 375000000, 20700, 2070, 8500, 'Warpig', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'Weaken', 4, 'toadvine', 'Fabled Forest', 'Spawn Rate', 19, '', 0, 'Reward', 19, 'Attack: Weaken', 925, 8, 20, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(6000, 4.5, 1200000, 12000000, 45000, 45000, 400000000, 20800, 2080, 8500, 'Grandma', 'Earth', false, 0, 0, false, 0, 0, 0, 25, 'Weaken', 6, 'toadvine', 'Fabled Forest', 'Spawn Rate', 20, '', 0, 'Reward', 20, 'Attack: Weaken', 925, 8, 21, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(6100, 4, 1400000, 15000000, 60000, 60000, 5000000000.0, 90000, 9000, 42500, 'Goldie Bear', 'Earth', true, 0, 0, false, 0, 0, 0, 50, 'Weaken', 10, 'toadvine', 'Fabled Forest', 'Spawn Rate', 21, 'Potion Efficiency', 120, 'Reward', 21, 'Attack: Weaken', 925, 8, 22, 'Produce Loot: Pixel', 6000, 0, 20, 'Buff: Reward', 40, 0, 80);
    addArenaEnemy(6500, 5, 1400000, 10000000, 60000, 70000, 650000000, 23800, 2380, 11000, 'Jubjub Bird', 'Dark', false, 0, 0, false, 0, 0, 0, 50, 'Accuracy UP', 30, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 22, '', 0, 'Reward', 22, 'Attack: Accuracy Down', 500, 5, 15, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(6600, 7, 1500000, 10000000, 50000, 50000, 700000000, 23900, 2390, 11000, 'Frumious Bandersnatch', 'Wind', false, 0, 0, false, 0, 0, 0, 50, 'Slow', 20, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 23, '', 0, 'Reward', 23, 'Attack: Stun', 2100, 3, 26, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(6700, 4.5, 1500000, 10000000, 40000, 40000, 750000000, 24000, 2400, 11000, 'Dwarf 1', 'Earth', false, 0, 0, false, 0, 0, 0, 50, 'Stat UP', 5, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 24, '', 0, 'Reward', 24, 'Attack: Knockback', 1050, 9, 11, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(6800, 4, 1600000, 20000000, 45000, 45000, 800000000, 24100, 2410, 11000, 'Dwarves 2-3', 'Earth', false, 0, 0, false, 0, 0, 0, 50, 'Stat UP', 10, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 25, '', 0, 'Reward', 25, 'Attack: Knockback', 1050, 9, 12, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(6900, 3.5, 1800000, 40000000, 55000, 55000, 850000000, 24200, 2420, 11000, 'Dwarves 4-7', 'Earth', false, 0, 0, false, 0, 0, 0, 50, 'Stat UP', 20, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 26, '', 0, 'Reward', 26, 'Attack: Knockback', 1050, 9, 13, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7000, 3, 3500000, 100000000, 90000, 90000, 10000000000.0, 120000, 12000, 55000, 'Pumpkin Carriage', 'Earth', true, 0, 0, false, 2500000, 0, 0, 0, 'Stun', 10, 'toadvine', 'Fortress Foothills', 'Spawn Rate', 27, 'Potion Efficiency', 160, 'Reward', 27, 'Attack: Stun', 2100, 3, 34, 'Produce Loot: Pixel', 6500, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7500, 3, 3140000, 31400000, 31400, 31400, 1500000000, 27600, 2760, 14000, '3.14 Piper', 'Wind', false, 0, 0, false, 3140000, 0, 0, 0, 'Blind', 30, 'toadvine', 'Castle Grimm', 'Spawn Rate', 28, '', 0, 'Reward', 28, 'Attack: Blind', 1175, 9, 23, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7600, 3, 3300000, 30000000, 40000, 60000, 1600000000, 27700, 2770, 14000, 'Leprechaun', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Evasion UP', 40, 'toadvine', 'Castle Grimm', 'Spawn Rate', 29, '', 0, 'Reward', 29, 'Attack: Evasion Down', 750, 10, 15, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7700, 0, 1, 20000000, 70000, 70000, 1700000000, 27800, 2780, 14000, 'Sleeping Rose', 'Earth', false, 0, 0, false, 3600000, 0, 0, 0, 'Slow', 30, 'toadvine', 'Castle Grimm', 'Spawn Rate', 30, '', 0, 'Reward', 30, 'Attack: Stun', 2350, 3, 40, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7800, 2, 2700000, 50000000, 70000, 80000, 1800000000, 27900, 2790, 14000, 'Moat Gator', 'Water', false, 0, 0, false, 2400000, 0, 0, 25, 'Slow', 30, 'toadvine', 'Castle Grimm', 'Spawn Rate', 31, '', 0, 'Reward', 31, 'Attack: Stun', 2350, 3, 36, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(7900, 3, 3900000, 150000000, 70000, 70000, 1900000000, 28000, 2800, 14000, 'Gargoyle', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Stun', 10, 'toadvine', 'Castle Grimm', 'Spawn Rate', 32, '', 0, 'Reward', 32, 'Attack: Stun', 2350, 3, 34, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(8000, 5, 4000000, 250000000, 80000, 70000, 20000000000.0, 150000, 15000, 70000, 'Flying Monkey', 'Wind', true, 0, 0, false, 4000000, 0, 0, 50, 'Evasion UP', 40, 'toadvine', 'Castle Grimm', 'Spawn Rate', 33, 'Potion Efficiency', 200, 'Reward', 33, 'Attack: Evasion Down', 750, 10, 15, 'Produce Loot: Pixel', 7000, 0, 20, 'Buff: Reward', 50, 0, 80);
    addArenaEnemy(8500, 3, 5000000, 20000000, 60000, 60000, 3000000000.0, 31700, 3170, 17500, 'Pea Princess', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Mana Drain', 50, 'toadvine', 'Throne Room', 'Spawn Rate', 34, '', 0, 'Reward', 34, 'MP Recovery', 20, 0, 5, 'Produce Loot: Pixel', 7500, 0, 20, 'Buff: Reward', 60, 0, 80);
    addArenaEnemy(8600, 3, 5250000, 25000000, 60000, 60000, 3250000000.0, 31800, 3180, 17500, 'Peach Princess', 'Earth', false, 0, 0, false, 0, 0, 0, 0, 'Mana Drain', 50, 'toadvine', 'Throne Room', 'Spawn Rate', 35, '', 0, 'Reward', 35, 'MP Recovery', 20, 0, 5, 'Produce Loot: Pixel', 7500, 0, 20, 'Buff: Reward', 60, 0, 80);
    addArenaEnemy(8700, 3, 5500000, 30000000, 60000, 60000, 3500000000.0, 31900, 3190, 17500, 'Paperbag Princess', 'Light', false, 0, 0, false, 0, 0, 0, 0, 'Health Drain', 50, 'toadvine', 'Throne Room', 'Spawn Rate', 36, '', 0, 'Reward', 36, 'HP Recovery', 20, 0, 5, 'Produce Loot: Pixel', 7500, 0, 20, 'Buff: Reward', 60, 0, 80);
    addArenaEnemy(8800, 4, 6500000, 150000000, 100000, 100000, 55000000000.0, 180000, 18000, 100000, 'Fairy Godfather', 'Light', true, 0, 0, false, 5500000, 0, 0, 25, 'All', 15, 'toadvine', 'Throne Room', 'Spawn Rate', 38, 'Ignore Defense', 50, 'Reward', 38, 'Attack: Ignore Defense', 750, 0, 15, 'Produce Loot: Rare Item', 0, 0, 40, 'Buff: Reward', 60, 0, 80);
    addArenaEnemy(8900, 4, 6000000, 90000000, 100000, 100000, 60000000000.0, 200000, 20000, 100000, 'Fairy Godmother', 'Light', true, 0, 900000000, false, 7000000, 0, 0, 25, 'Chaos', 25, 'toadvine', 'Throne Room', 'Spawn Rate', 40, 'Potion Efficiency', 500, 'Reward', 40, 'Attack: Ignore Defense', 1000, 0, 15, 'Produce Loot: Rare Item', 0, 0, 40, 'Buff: Reward', 60, 0, 80);
    addArenaEnemy(1, 3, 3333333, 33333333, 33333, 33333, 333333333, 33333, 3333, 33333, 'Triangle', 'All', true, 0, 3333333, false, 1, 25, 9999999999.0, 33, 'Chaos', 15, 'Tukkun', 'Triangle Hideout', 'Reward', 60, 'Drop Rate', 60, '', 0, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(1, 0, 1, -999999999, 100000, 100, 100, 120000, 30000, 60000, 'Strange Box', 'All', true, 0, 5, false, 0, 30, 1, 0, 'None', 0, 'Tukkun', 'Unknown Location', 'Drop Rate', 50, 'Spawn Rate', 20, 'Drop Rate', 20, '', 0, 0, 0, '', 0, 0, 0, '', 0, 0, 0);
    addArenaEnemy(3100, 3, 40000, 1000000, 2000, 2000, 17500000, 3500, 1700, 300, 'Strange Triangle Dummy', 'Earth', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3200, 3, 42500, 1000000, 3000, 3000, 18500000, 3600, 1750, 300, 'Strange Triangle Tree', 'Earth', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3300, 3, 45000, 1000000, 3000, 3000, 20000000, 3700, 1800, 300, 'Strange Mushtriangle', 'Earth', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3400, 3, 47500, 1000000, 3000, 3000, 22000000, 3800, 1850, 300, 'Strange Triangoop', 'Water', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3500, 3, 50000, 1000000, 2000, 4000, 24000000, 3900, 1900, 300, 'Strange Tridle', 'Light', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3500, 3, 52500, 2000000, 4000, 4000, 24000000, 4000, 1950, 300, 'Strange Triangle Bot', 'Light', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3600, 3, 55000, 2000000, 9000, 4000, 26000000, 4100, 2000, 300, 'Strange Moving Spikes', 'Light', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 19, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3700, 5.5, 57500, 2000000, 9000, 4000, 28000000, 4200, 2050, 300, 'Strange Fast Spikes', 'Light', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 14, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3800, 5.5, 60000, 2000000, 9000, 4000, 30000000, 4300, 2100, 300, 'Strange Dark Spikes', 'Dark', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 14, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(3900, 2.5, 65000, 2000000, 2000, 2000, 32500000, 4400, 2150, 300, 'Strange Blue Triangle', 'Water', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 20, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4000, 2.5, 70000, 2000000, 4000, 4000, 35000000, 4500, 2200, 300, 'Strange Green Triangle', 'Wind', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 20, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4100, 2.5, 75000, 2000000, 4000, 4000, 37500000, 4600, 2250, 300, 'Strange Red Triangle', 'Fire', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 20, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    addArenaEnemy(4200, 2.5, 80000, 2000000, 4000, 4000, 40000000, 4700, 2300, 300, 'Strange Black Triangle', 'Dark', false, 0, 0, false, 145000, 0, 0, 0, 'None', 0, 'Tukkun', '2011: Triangle Land', 'EXP', 50, 'Non-Boss Damage', 20, 'Spawn Rate', 5, 'Attack: Regular', 105, 0, 20, 'Buff: Elemental Boost', 10, 0, 80, '', 0, 0, 0);
    i = 501;
    while (i <= 9999) {
      addArenaEnemy(1337, 0, 0, 0, 0, 0, 1, 0, 0, 0, 'LOADING FAILED', 'All', true, 0, 0, false, 0, 0, 0, 0, 'None', 0, 'Jimp (?)', 'Kongpanion', '', 0, '', 0, '', 0, 'Attack: Poison', 1337, 20, 30, 'Buff: Reward', 50, 0, 70, 'Produce Loot: Rare Item', 0, 0, 130);
      ++i;
    }
    _root.komDiff = new Array();
    _root.komCount = new Array();
    i = 1;
    while (i <= 500) {
      _root.komDiff[i] = -1;
      _root.komCount[i] = -1;
      ++i;
    }
    addKommanderMission(1, 7, 100);
    i = 2;
    while (i <= 15) {
      addKommanderMission(i, 1, 5);
      ++i;
    }
    i = 16;
    while (i <= 34) {
      addKommanderMission(i, 2, 10);
      ++i;
    }
    i = 35;
    while (i <= 54) {
      addKommanderMission(i, 3, 15);
      ++i;
    }
    i = 55;
    while (i <= 64) {
      addKommanderMission(i, 4, 20);
      ++i;
    }
    i = 65;
    while (i <= 71) {
      addKommanderMission(i, 5, 25);
      ++i;
    }
    i = 72;
    while (i <= 82) {
      addKommanderMission(i, 6, 30);
      ++i;
    }
    i = 83;
    while (i <= 97) {
      addKommanderMission(i, 7, 35);
      ++i;
    }
    i = 98;
    while (i <= 99) {
      addKommanderMission(i, 8, 40);
      ++i;
    }
    i = 100;
    while (i <= 124) {
      addKommanderMission(i, 10, 50);
      ++i;
    }
    i = 125;
    while (i <= 136) {
      addKommanderMission(i, 15, 60);
      ++i;
    }
    i = 137;
    while (i <= 159) {
      addKommanderMission(i, 20, 80);
      ++i;
    }
    i = 160;
    while (i <= 177) {
      addKommanderMission(i, 25, 100);
      ++i;
    }
    i = 178;
    while (i <= 182) {
      addKommanderMission(i, 4, 200);
      ++i;
    }
    i = 183;
    while (i <= 195) {
      addKommanderMission(i, 11, 20);
      ++i;
    }
    i = 196;
    while (i <= 221) {
      addKommanderMission(i, 12, 15);
      ++i;
    }
    i = 222;
    while (i <= 225) {
      addKommanderMission(i, 15, 4);
      ++i;
    }
    i = 226;
    while (i <= 229) {
      addKommanderMission(i, 15, 1);
      ++i;
    }
    i = 240;
    while (i <= 241) {
      addKommanderMission(i, 12, 500);
      ++i;
    }
    i = 242;
    while (i <= 248) {
      addKommanderMission(i, 12, 50);
      ++i;
    }
    i = 249;
    while (i <= 260) {
      addKommanderMission(i, 9, 50);
      ++i;
    }
    i = 261;
    while (i <= 272) {
      addKommanderMission(i, 13, 60);
      ++i;
    }
    addKommanderMission(273, 25, 20);
    addKommanderMission(274, 5, 1);
    addKommanderMission(275, 40, 2);
    i = 276;
    while (i <= 288) {
      addKommanderMission(i, 10, 2);
      ++i;
    }
    i = 289;
    while (i <= 294) {
      addKommanderMission(i, 15, 2);
      ++i;
    }
    addKommanderMission(295, 20, 2);
    i = 296;
    while (i <= 300) {
      addKommanderMission(i, 10, 100);
      ++i;
    }
    i = 301;
    while (i <= 305) {
      addKommanderMission(i, 15, 8);
      ++i;
    }
    i = 306;
    while (i <= 307) {
      addKommanderMission(i, 15, 2);
      ++i;
    }
    i = 313;
    while (i <= 315) {
      addKommanderMission(i, 15, 8);
      ++i;
    }
    i = 316;
    while (i <= 317) {
      addKommanderMission(i, 15, 2);
      ++i;
    }
    addKommanderMission(318, 17, 1);
    addKommanderMission(319, 17, 1);
    addKommanderMission(320, 20, 1);
    addKommanderMission(321, 20, 1);
    addKommanderMission(323, 14, 2);
    i = 324;
    while (i <= 330) {
      addKommanderMission(i, 20, 150);
      ++i;
    }
    addKommanderMission(332, 20, 25);
    i = 333;
    while (i <= 345) {
      addKommanderMission(i, 25, 2);
      ++i;
    }
    i = 346;
    while (i <= 348) {
      addKommanderMission(i, 30, 2);
      ++i;
    }
    i = 349;
    while (i <= 350) {
      addKommanderMission(i, 35, 2);
      ++i;
    }
    i = 351;
    while (i <= 354) {
      addKommanderMission(i, 25, 150);
      ++i;
    }
    i = 355;
    while (i <= 367) {
      addKommanderMission(i, 30, 150);
      ++i;
    }
    i = 368;
    while (i <= 374) {
      addKommanderMission(i, 15, 10);
      ++i;
    }
    i = 375;
    while (i <= 376) {
      addKommanderMission(i, 15, 5);
      ++i;
    }
    addKommanderMission(377, 35, 2);
    i = 378;
    while (i <= 415) {
      addKommanderMission(i, 30, 8);
      ++i;
    }
    i = 416;
    while (i <= 430) {
      addKommanderMission(i, 35, 4);
      ++i;
    }
    addKommanderMission(431, 35, 3);
    addKommanderMission(432, 40, 3);
    addKommanderMission(436, 35, 2);
    addKommanderMission(438, 30, 300);
    addKommanderMission(439, 35, 5);
    addKommanderMission(440, 50, 1);
    i = 448;
    while (i <= 455) {
      addKommanderMission(i, 20, 175);
      ++i;
    }
    i = 456;
    while (i <= 461) {
      addKommanderMission(i, 25, 200);
      ++i;
    }
    i = 462;
    while (i <= 468) {
      addKommanderMission(i, 30, 225);
      ++i;
    }
    i = 469;
    while (i <= 474) {
      addKommanderMission(i, 35, 250);
      ++i;
    }
    i = 475;
    while (i <= 480) {
      addKommanderMission(i, 40, 275);
      ++i;
    }
    i = 481;
    while (i <= 483) {
      addKommanderMission(i, 45, 300);
      ++i;
    }
    addKommanderMission(484, 50, 50);
    addKommanderMission(485, 50, 50);
    addKommanderMission(487, 10, 2);
    stickName = _root.kongregate_username + '\'s Tree Stick';
    if (_root.kongregate_username == undefined || _root.kongregate_username == 'Guest') {
      stickName = '????\'s Tree Stick';
    }
    _root.museumItem = new Array();
    _root.museumValue = new Array();
    _root.museumMaxItem = 0;
    _root.museumMaxValue = 0;
    addMuseumItem(1401, 1, 'Broken Greatsword');
    addMuseumItem(1402, 1, 'Ranseur');
    addMuseumItem(1403, 2, 'Halberd');
    addMuseumItem(1404, 2, 'Trident');
    addMuseumItem(1405, 3, 'Partisan');
    addMuseumItem(1406, 3, 'Awl Pike');
    addMuseumItem(1407, 3, 'Bill Hook');
    addMuseumItem(1408, 4, 'Bat-Wing Corseque');
    addMuseumItem(1409, 4, 'Corseque');
    addMuseumItem(1410, 4, 'Fauchard');
    addMuseumItem(1411, 5, 'Military Fork');
    addMuseumItem(1412, 5, 'Fauchard-Fork');
    addMuseumItem(1413, 5, 'Naginata');
    addMuseumItem(1414, 5, 'Nagimaki');
    addMuseumItem(1415, 6, 'Fukuro Yari');
    addMuseumItem(1416, 6, 'Voulge');
    addMuseumItem(1417, 6, 'Scythe');
    addMuseumItem(1418, 6, 'Bardiche');
    addMuseumItem(1419, 6, 'Poleaxe');
    addMuseumItem(1420, 6, 'Lochaber Axe');
    addMuseumItem(1421, 7, 'Bohemian Earspoon');
    addMuseumItem(1422, 8, 'Bec de Corbin');
    addMuseumItem(1423, 9, 'Ox Tongue');
    addMuseumItem(1424, 10, 'Spetum');
    addMuseumItem(1425, 11, 'Glaive');
    addMuseumItem(1426, 12, 'Guisarme');
    addMuseumItem(1427, 13, 'Longspear');
    addMuseumItem(1428, 14, 'Lucerne Hammer');
    addMuseumItem(1429, 15, 'Glaive-Guisarme');
    addMuseumItem(1430, 16, 'Guisarme-Glaive');
    addMuseumItem(1431, 17, 'Glaive-Guisarme-Glaive');
    addMuseumItem(1432, 18, 'Glaive-Glaive-Glaive-Guisarme-Glaive');
    addMuseumItem(1433, 19, 'Greatsword');
    addMuseumItem(1434, 20, 'Greatersword');
    addMuseumItem(1441, 4, 'Laser Gun');
    addMuseumItem(1442, 5, 'Mystic Bow');
    addMuseumItem(1443, 6, 'Strong Machine Gun');
    addMuseumItem(1444, 8, 'Mystic Crossbow');
    addMuseumItem(1445, 10, 'Pure Darkness Claw');
    addMuseumItem(1446, 12, 'Slingshot');
    addMuseumItem(1447, 14, 'Crimson Bow');
    addMuseumItem(1448, 16, 'Oversized Slingshot');
    addMuseumItem(1449, 18, 'Cannon');
    addMuseumItem(1450, 20, 'Gold Cannon');
    addMuseumArmorSet(1451, 1, 'Training');
    addMuseumArmorSet(1456, 2, 'Soldier');
    addMuseumArmorSet(1461, 2, 'Stripper Nurse');
    addMuseumArmorSet(1466, 3, 'Enchanted Leather');
    addMuseumArmorSet(1471, 3, 'Golden');
    addMuseumArmorSet(1476, 4, 'Regeneration');
    addMuseumArmorSet(1481, 4, 'Berserker');
    addMuseumArmorSet(1486, 5, 'Defensive');
    addMuseumArmorSet(1491, 5, 'Pure Darkness');
    addMuseumArmorSet(1496, 6, 'Crimson');
    addMuseumArmorSet(1501, 7, 'Knightmare');
    addMuseumArmorSet(1506, 8, 'Humblebee');
    addMuseumArmorSet(1511, 10, 'Ghost');
    addMuseumItem(1521, 1, 'Pink Skin');
    addMuseumItem(1522, 1, 'Teal Skin');
    addMuseumItem(1523, 1, 'Green Skin');
    addMuseumItem(1524, 1, 'Red Skin');
    addMuseumItem(1525, 1, 'Black Skin');
    addMuseumItem(1526, 1, 'White Skin');
    addMuseumItem(1527, 1, 'Purple Skin');
    addMuseumItem(1528, 1, 'Blue Skin');
    addMuseumItem(1529, 5, 'Neon Skin');
    addMuseumItem(1531, 6, 'Cursed Sword (1)');
    addMuseumItem(1532, 6, 'Cursed Sword (2)');
    addMuseumItem(1533, 6, 'Cursed Sword (3)');
    addMuseumItem(1534, 25, 'Dark Ruler');
    addMuseumItem(1541, 1, 'Burned Rope');
    addMuseumItem(1542, 1, 'Special Wand');
    addMuseumArmorSet(1551, 3, 'Elm');
    addMuseumArmorSet(1561, 4, 'Emperor\'s');
    addMuseumArmorSet(1571, 5, 'Chuck Norris');
    addMuseumArmorSet(1581, 6, 'Companion Cube');
    addMuseumItem(1586, 10, 'Bacon Sword');
    addMuseumItem(1591, 5, 'Collector\'s Pendant');
    addMuseumItem(1592, 5, 'Cursed Pendant');
    addMuseumItem(1593, 5, 'Anti-Checkpoint Pendant');
    addMuseumItem(1601, 1, 'Bronze Pendant');
    addMuseumItem(1602, 2, 'Silver Pendant');
    addMuseumItem(1603, 3, 'Gold Pendant');
    addMuseumItem(1604, 4, 'Platinum Pendant');
    addMuseumItem(1605, 5, 'Unobtainium Pendant');
    addMuseumItem(1611, 5, 'Pendant of Fire');
    addMuseumItem(1612, 5, 'Pendant of Ice');
    addMuseumItem(1613, 5, 'Pendant of Wind');
    addMuseumItem(1614, 5, 'Pendant of Earth');
    addMuseumItem(1615, 5, 'Pendant of Thunder');
    addMuseumItem(1616, 5, 'Pendant of Water');
    addMuseumItem(1617, 5, 'Pendant of Light');
    addMuseumItem(1618, 5, 'Pendant of Darkness');
    addMuseumItem(1621, 3, 'Pendant of Double Hit');
    addMuseumItem(1622, 3, 'Pendant of Rage');
    addMuseumItem(1623, 3, 'Pendant of Recovery');
    addMuseumItem(1624, 3, 'Pendant of Bosshunter');
    addMuseumItem(1625, 3, 'Pendant of Spell Protection');
    addMuseumItem(1626, 3, 'Pendant of Cruelty');
    addMuseumItem(1627, 3, 'Pendant of Resistance');
    addMuseumItem(1628, 3, 'Crappy Earrings');
    addMuseumItem(1629, 5, 'Awesome Earrings');
    addMuseumItem(1631, 15, 'Gem of Constancy');
    addMuseumItem(1632, 15, 'Empowering Gem');
    addMuseumItem(1633, 15, 'Worst Moon Gem');
    addMuseumItem(1634, 15, 'Auto Buff Gem');
    addMuseumItem(1635, 25, 'Gem of Good Luck');
    addMuseumItem(1636, 25, 'Yellow Madness Gem');
    addMuseumItem(1637, 25, 'Gem of Eternal Rage');
    addMuseumItem(1638, 5, 'Dominator Gem');
    addMuseumItem(1639, 5, 'Triangle Gem');
    addMuseumItem(1640, 5, 'Mega Triangle Gem');
    addMuseumItem(1641, 2, 'Ultimate Weapon');
    addMuseumArmorSet(1642, 1, 'Ultimate');
    addMuseumItem(1647, 1, 'Ultimate Pendant');
    addMuseumItem(1648, 1, 'Ultimate Earrings');
    addMuseumItem(1649, 1, 'Ultimate Trinket');
    addMuseumItem(1651, 2, 'Reincarnation Weapon');
    addMuseumArmorSet(1652, 1, 'Reincarnation');
    addMuseumItem(1657, 1, 'Reincarnation Pendant');
    addMuseumItem(1658, 1, 'Reincarnation Earrings');
    addMuseumItem(1659, 1, 'Reincarnation Trinket');
    addMuseumItem(1661, 2, 'Bronze Pickaxe');
    addMuseumItem(1662, 4, 'Silver Pickaxe');
    addMuseumItem(1663, 6, 'Golden Pickaxe');
    addMuseumItem(1664, 8, 'Diamond Pickaxe');
    addMuseumItem(1665, 10, 'Master\'s Pickaxe');
    addMuseumItem(1666, 15, 'Legendary Pickaxe');
    addMuseumItem(1667, 20, 'Unobtainium Pickaxe');
    addMuseumArmorSet(1671, 2, 'Blue Crystal');
    addMuseumArmorSet(1676, 2, 'Red Crystal');
    addMuseumArmorSet(1681, 2, 'Yellow Crystal');
    addMuseumArmorSet(1686, 4, 'Green Crystal');
    addMuseumArmorSet(1691, 4, 'Purple Crystal');
    addMuseumArmorSet(1696, 4, 'Pink Crystal');
    addMuseumItem(1701, 2, 'Green Hat of Loot');
    addMuseumItem(1702, 2, 'Green Shirt of Loot');
    addMuseumItem(1703, 2, 'Green Gloves of Loot');
    addMuseumItem(1704, 2, 'Green Pants of Loot');
    addMuseumItem(1705, 2, 'Green Shoes of Loot');
    addMuseumItem(1706, 4, 'Blue Hat of Loot');
    addMuseumItem(1707, 4, 'Blue Shirt of Loot');
    addMuseumItem(1708, 4, 'Blue Gloves of Loot');
    addMuseumItem(1709, 4, 'Blue Pants of Loot');
    addMuseumItem(1710, 4, 'Blue Shoes of Loot');
    addMuseumItem(1711, 6, 'Purple Hat of Loot');
    addMuseumItem(1712, 6, 'Purple Shirt of Loot');
    addMuseumItem(1713, 6, 'Purple Gloves of Loot');
    addMuseumItem(1714, 6, 'Purple Pants of Loot');
    addMuseumItem(1715, 6, 'Purple Shoes of Loot');
    addMuseumArmorSet(1721, 12, 'Samurai');
    addMuseumArmorSet(1726, 15, 'Dress');
    addMuseumItem(1731, 50, 'Dummy Sword');
    addMuseumItem(1732, 50, 'Carrot Gun');
    addMuseumItem(1733, 50, 'Treeman Dagger');
    addMuseumItem(1734, 50, 'Rat Tail');
    addMuseumItem(1735, 50, 'Dark Mage Wand');
    addMuseumArmorSet(1741, 5, 'Censor');
    addMuseumItem(1746, 10, 'Censor Sword');
    addMuseumItem(1751, 1, 'Revolution Pyrabow');
    addMuseumItem(1752, 2, 'Revolution Earrings');
    addMuseumItem(1753, 2, 'Immortal Pendant');
    addMuseumItem(1754, 5, 'Roflhunter\'s Pendant');
    addMuseumItem(1761, 2, 'Alien Sword #1');
    addMuseumItem(1762, 2, 'Alien Claw #1');
    addMuseumItem(1763, 2, 'Alien Wand #1');
    addMuseumItem(1764, 2, 'Alien Bow #1');
    addMuseumItem(1765, 2, 'Alien Sword #2');
    addMuseumItem(1766, 2, 'Alien Claw #2');
    addMuseumItem(1767, 2, 'Alien Wand #2');
    addMuseumItem(1768, 2, 'Alien Bow #2');
    addMuseumItem(1771, 2, 'Alien Hat #1');
    addMuseumItem(1772, 2, 'Alien Shirt #1');
    addMuseumItem(1773, 2, 'Alien Gloves #1');
    addMuseumItem(1774, 2, 'Alien Pants #1');
    addMuseumItem(1775, 2, 'Alien Shoes #1');
    addMuseumItem(1776, 2, 'Alien Hat #2');
    addMuseumItem(1777, 2, 'Alien Shirt #2');
    addMuseumItem(1778, 2, 'Alien Gloves #2');
    addMuseumItem(1779, 2, 'Alien Pants #2');
    addMuseumItem(1780, 2, 'Alien Shoes #2');
    addMuseumItem(1781, 2, 'Alien Hat #3');
    addMuseumItem(1782, 2, 'Alien Shirt #3');
    addMuseumItem(1783, 2, 'Alien Gloves #3');
    addMuseumItem(1784, 2, 'Alien Pants #3');
    addMuseumItem(1785, 2, 'Alien Shoes #3');
    addMuseumItem(1786, 2, 'Alien Hat #4');
    addMuseumItem(1787, 2, 'Alien Shirt #4');
    addMuseumItem(1788, 2, 'Alien Gloves #4');
    addMuseumItem(1789, 2, 'Alien Pants #4');
    addMuseumItem(1790, 2, 'Alien Shoes #4');
    addMuseumItem(1791, 4, 'Elite Alien Sword #1');
    addMuseumItem(1792, 4, 'Elite Alien Claw #1');
    addMuseumItem(1793, 4, 'Elite Alien Wand #1');
    addMuseumItem(1794, 4, 'Elite Alien Bow #1');
    addMuseumItem(1795, 4, 'Elite Alien Sword #2');
    addMuseumItem(1796, 4, 'Elite Alien Claw #2');
    addMuseumItem(1797, 4, 'Elite Alien Wand #2');
    addMuseumItem(1798, 4, 'Elite Alien Bow #2');
    addMuseumItem(1801, 4, 'Elite Alien Hat #1');
    addMuseumItem(1802, 4, 'Elite Alien Shirt #1');
    addMuseumItem(1803, 4, 'Elite Alien Gloves #1');
    addMuseumItem(1804, 4, 'Elite Alien Pants #1');
    addMuseumItem(1805, 4, 'Elite Alien Shoes #1');
    addMuseumItem(1806, 4, 'Elite Alien Hat #2');
    addMuseumItem(1807, 4, 'Elite Alien Shirt #2');
    addMuseumItem(1808, 4, 'Elite Alien Gloves #2');
    addMuseumItem(1809, 4, 'Elite Alien Pants #2');
    addMuseumItem(1810, 4, 'Elite Alien Shoes #2');
    addMuseumItem(1811, 4, 'Elite Alien Hat #3');
    addMuseumItem(1812, 4, 'Elite Alien Shirt #3');
    addMuseumItem(1813, 4, 'Elite Alien Gloves #3');
    addMuseumItem(1814, 4, 'Elite Alien Pants #3');
    addMuseumItem(1815, 4, 'Elite Alien Shoes #3');
    addMuseumItem(1816, 4, 'Elite Alien Hat #4');
    addMuseumItem(1817, 4, 'Elite Alien Shirt #4');
    addMuseumItem(1818, 4, 'Elite Alien Gloves #4');
    addMuseumItem(1819, 4, 'Elite Alien Pants #4');
    addMuseumItem(1820, 4, 'Elite Alien Shoes #4');
    addMuseumItem(1821, 10, 'Alien Earrings');
    addMuseumItem(1831, 2, 'Bronze Trophy');
    addMuseumItem(1832, 4, 'Silver Trophy');
    addMuseumItem(1833, 6, 'Gold Trophy');
    addMuseumItem(1834, 8, 'Platinum Trophy');
    addMuseumItem(1835, 10, 'Unobtainium Trophy');
    addMuseumItem(1836, 2, 'Bronze Endurance Trophy');
    addMuseumItem(1837, 4, 'Silver Endurance Trophy');
    addMuseumItem(1838, 6, 'Gold Endurance Trophy');
    addMuseumItem(1839, 8, 'Platinum Endurance Trophy');
    addMuseumItem(1840, 10, 'Unobtainium Endurance Trophy');
    addMuseumItem(1841, 2, 'Dagger of DOOOOOOM');
    addMuseumItem(1842, 2, 'Sword of DOOOOOOM');
    addMuseumItem(1843, 2, 'Longsword of DOOOOOOM');
    addMuseumItem(1844, 2, 'Spear of DOOOOOOM');
    addMuseumItem(1845, 2, 'Axe of DOOOOOOM');
    addMuseumItem(1846, 2, 'Bow of DOOOOOOM');
    addMuseumItem(1847, 2, 'Crossbow of DOOOOOOM');
    addMuseumItem(1848, 2, 'Gun of DOOOOOOM');
    addMuseumItem(1849, 2, 'Wand of DOOOOOOM');
    addMuseumItem(1850, 2, 'Claw of DOOOOOOM');
    addMuseumItem(1851, 1, 'Hat of DOOOOOOM');
    addMuseumItem(1852, 1, 'Shirt of DOOOOOOM');
    addMuseumItem(1853, 1, 'Gloves of DOOOOOOM');
    addMuseumItem(1854, 1, 'Pants of DOOOOOOM');
    addMuseumItem(1855, 1, 'Shoes of DOOOOOOM');
    addMuseumItem(1861, 5, 'THE MEGABOSS\'s Earrings of Experience');
    addMuseumItem(1862, 5, 'THE MEGABOSS\'s Earrings of Wealth');
    addMuseumItem(1863, 5, 'THE MEGABOSS\'s Earrings of Health');
    addMuseumItem(1864, 5, 'THE MEGABOSS\'s Earrings of Power');
    addMuseumArmorSet(1871, 6, 'Corrupted Elm');
    addMuseumItem(1881, 10, 'Badly Recolored Weapon');
    addMuseumItem(1882, 15, 'Scimitar');
    addMuseumItem(1883, 20, 'Blood Scimitar');
    addMuseumItem(1891, 50, 'Meteoric Battleaxe');
    addMuseumItem(1892, 50, 'Meteoric Sword');
    addMuseumItem(1893, 50, 'Meteoric Cleaver');
    addMuseumItem(1894, 50, 'Meteoric Glaive');
    addMuseumItem(1895, 50, 'Meteoric Scythe');
    addMuseumItem(1896, 50, 'Meteoric Voulge');
    addMuseumArmorSet(1901, 25, 'Meteoric');
    addMuseumArmorSet(1911, 5, 'Wizard');
    addMuseumItem(1916, 7, 'Rain Bow');
    addMuseumItem(1921, 3, 'Epic Fire Staff');
    addMuseumItem(1922, 3, 'Epic Ice Staff');
    addMuseumItem(1923, 3, 'Epic Wind Staff');
    addMuseumItem(1924, 3, 'Epic Earth Staff');
    addMuseumItem(1925, 3, 'Epic Thunder Staff');
    addMuseumItem(1926, 3, 'Epic Water Staff');
    addMuseumItem(1927, 3, 'Light Glaive');
    addMuseumItem(1928, 3, 'Dark Glaive');
    addMuseumItem(1931, 3, 'Ultimate Fire Sword');
    addMuseumItem(1932, 3, 'Ultimate Fire Spear');
    addMuseumItem(1933, 3, 'Ultimate Fire Polearm');
    addMuseumItem(1934, 3, 'Ultimate Ice Sword');
    addMuseumItem(1935, 3, 'Ultimate Ice Spear');
    addMuseumItem(1936, 3, 'Ultimate Ice Polearm');
    addMuseumItem(1937, 3, 'Ultimate Lightning Sword');
    addMuseumItem(1938, 3, 'Ultimate Lightning Spear');
    addMuseumItem(1939, 3, 'Ultimate Lightning Polearm');
    addMuseumArmorSet(1941, 4, 'Holy Glory');
    addMuseumItem(1946, 20, 'Glaive of Smiting');
    addMuseumArmorSet(1951, 5, 'Dark Angel');
    addMuseumItem(1956, 25, 'Darkglaive of Smiting');
    addMuseumArmorSet(1961, 6, 'Chaos');
    addMuseumItem(1966, 30, 'Fiend Glaive');
    addMuseumItem(1971, 8, 'CHAOS HAT');
    addMuseumItem(1972, 8, 'CHAOS SHIRT');
    addMuseumItem(1973, 8, 'CHAOS GLOVES');
    addMuseumItem(1974, 8, 'CHAOS PANTS');
    addMuseumItem(1975, 8, 'CHAOS SHOES');
    addMuseumItem(1976, 40, 'CHAOS AURA');
    addMuseumItem(1977, 250, 'GIGA PENDANT');
    addMuseumItem(1978, 250, 'GIGA EARRINGS');
    addMuseumItem(1981, 44, 'Dragon Slayer Dagger');
    addMuseumItem(1982, 44, 'Dragon Slayer Sword');
    addMuseumItem(1983, 44, 'Dragon Slayer Spear');
    addMuseumItem(1984, 44, 'Dragon Slayer Axe');
    addMuseumItem(1985, 44, 'Dragon Slayer Bow');
    addMuseumItem(1986, 44, 'Dragon Slayer Gun');
    addMuseumItem(1987, 44, 'Dragon Slayer Staff');
    addMuseumItem(1988, 44, 'Dragon Slayer Claw');
    addMuseumArmorSet(1991, 44, 'Dragon Slayer');
    addMuseumItem(2001, 66, 'Demon Slayer Dagger');
    addMuseumItem(2002, 66, 'Demon Slayer Sword');
    addMuseumItem(2003, 66, 'Demon Slayer Spear');
    addMuseumItem(2004, 66, 'Demon Slayer Axe');
    addMuseumItem(2005, 66, 'Demon Slayer Bow');
    addMuseumItem(2006, 66, 'Demon Slayer Gun');
    addMuseumItem(2007, 66, 'Demon Slayer Staff');
    addMuseumItem(2008, 66, 'Demon Slayer Claw');
    addMuseumArmorSet(2011, 66, 'Demon Slayer');
    addMuseumArmorSet(2021, 10, 'Fairy Godfather');
    addMuseumArmorSet(2031, 10, 'Fairy Godmother');
    addMuseumItem(2036, 20, 'Fairy Godmother Wand');
    addMuseumItem(2041, 1, 'First Medal');
    addMuseumItem(2042, 1, 'Newbie Fighter');
    addMuseumItem(2043, 2, 'Fighter');
    addMuseumItem(2044, 2, 'Veteran Fighter');
    addMuseumItem(2045, 3, 'Heroic Fighter');
    addMuseumItem(2046, 3, 'Elite Fighter');
    addMuseumItem(2047, 4, 'Master Fighter');
    addMuseumItem(2048, 4, 'Ultimate Fighter');
    addMuseumItem(2049, 5, 'Arena Champion');
    addMuseumItem(2050, 1, 'Combo King');
    addMuseumItem(2051, 2, 'Bestiary Master');
    addMuseumItem(2052, 3, 'Bestiary King');
    addMuseumItem(2053, 4, 'Mad Scientist');
    addMuseumItem(2054, 5, 'THE BESTiary');
    addMuseumItem(2055, 2, 'Novice Tamer');
    addMuseumItem(2056, 3, 'Veteran Tamer');
    addMuseumItem(2057, 4, 'Master Tamer');
    addMuseumItem(2058, 5, 'Legendary Tamer');
    addMuseumItem(2059, 2, 'Novice Trainer');
    addMuseumItem(2060, 3, 'Veteran Trainer');
    addMuseumItem(2061, 4, 'Master Trainer');
    addMuseumItem(2062, 5, 'Legendary Trainer');
    addMuseumItem(2063, 5, 'Bottomless Bag');
    addMuseumItem(2064, 4, 'Four-Leaf Clover');
    addMuseumItem(2065, 0, 'Speed Runner');
    addMuseumItem(2071, 0, 'Challenge #1 Participant');
    addMuseumItem(2072, 0, 'Challenge #2 Participant');
    addMuseumItem(2073, 0, 'Challenge #3 Participant');
    addMuseumItem(2074, 0, 'Challenge #4 Participant');
    addMuseumItem(2075, 0, 'Challenge #5 Participant');
    addMuseumItem(2076, 0, 'Challenge #6 Participant');
    addMuseumItem(2081, 0, 'Challenge #1 Master');
    addMuseumItem(2082, 0, 'Challenge #2 Master');
    addMuseumItem(2083, 0, 'Challenge #3 Master');
    addMuseumItem(2084, 0, 'Challenge #4 Master');
    addMuseumItem(2085, 0, 'Challenge #5 Master');
    addMuseumItem(2086, 0, 'Challenge #6 Master');
    addMuseumItem(2091, 0, 'This is NOT a Restaurant');
    addMuseumItem(2092, 0, 'Defenseless Warrior');
    addMuseumItem(2093, 0, 'Peaceful Player');
    addMuseumItem(2094, 0, 'Time Traveler');
    addMuseumItem(2095, 0, 'FCG Master');
    addMuseumItem(2096, 0, 'Zombie');
    addMuseumArmorSet(2101, 0, 'Pre-Explosion');
    addMuseumItem(2106, 0, 'Pre-Explosion Trophy');
    addMuseumItem(2111, 0, '\'FIRST!!!\' Sword');
    addMuseumItem(2112, 0, 'Newbie Stick');
    addMuseumArmorSet(2121, 0, 'Halloween');
    addMuseumItem(2126, 0, 'Ghostslayer');
    addMuseumArmorSet(2131, 0, 'Elite Lovely');
    addMuseumArmorSet(2141, 0, '2nd Anniversary');
    addMuseumItem(2146, 0, '2nd Anniversary Medal');
    addMuseumItem(2151, 0, '4 Million Plays Event Sword');
    addMuseumItem(2161, 0, 'Anniversary Hat');
    addMuseumItem(2162, 0, 'Anniversary Hat');
    addMuseumItem(2171, 0, 'Nerf Accepted!');
    addMuseumItem(2181, 0, 'Earrings of Activity');
    addMuseumItem(2182, 0, 'Earrings of Activity');
    addMuseumItem(2183, 0, 'Earrings of Activity');
    addMuseumItem(2184, 0, 'Earrings of Activity');
    addMuseumItem(2185, 0, 'Earrings of Activity');
    addMuseumItem(2186, 0, 'Earrings of Activity');
    addMuseumItem(2187, 0, 'Earrings of Activity');
    addMuseumItem(2188, 0, 'Earrings of Activity');
    addMuseumItem(2189, 0, 'Earrings of Activity');
    addMuseumItem(2190, 0, 'Final Earrings of Activity');
    addMuseumItem(2191, 0, '[Event] Mystery Enhancer Identifier');
    addMuseumItem(2192, 0, '[Event] Mega Bullets');
    addMuseumItem(2193, 0, '[Event] Weapon Mystery Rock Lv. 10');
    addMuseumItem(2194, 0, 'Armor Cleansing Rock');
    addMuseumItem(2195, 0, 'Relic');
    addMuseumItem(2196, 0, 'Anti-Curse Potion');
    addMuseumItem(2201, 0, 'Pendant of Experience');
    addMuseumItem(2202, 0, 'Pendant of Treasure');
    addMuseumItem(2203, 0, 'Pendant of Greed');
    addMuseumItem(2204, 0, 'Pendant of Luck');
    addMuseumItem(2205, 0, 'Pendant of Encounter');
    addMuseumItem(2206, 0, 'Pendant of Epicness');
    addMuseumItem(2207, 0, 'Pendant of Accuracy');
    addMuseumItem(2208, 0, 'Pendant of Nimbleness');
    addMuseumItem(2209, 0, 'Pendant of Quickness');
    addMuseumItem(2210, 0, 'Pendant of Regeneration');
    addMuseumItem(2211, 0, 'Premium Sword (1)');
    addMuseumItem(2212, 0, 'Premium Sword (2)');
    addMuseumItem(2213, 0, 'Premium Sword (3)');
    addMuseumItem(2214, 0, 'Evil Sword');
    addMuseumItem(2215, 0, 'Pyrabow');
    addMuseumItem(2221, 1, 'Adventurer\'s Trophy');
    addMuseumItem(2222, 1, 'Sword of Ascendant');
    addMuseumItem(2223, 3, 'Pirate Sword');
    addMuseumItem(2224, 3, 'Elite Grenades');
    addMuseumItem(2231, 1, 'Transparent Earrings');
    addMuseumItem(2232, 1, 'Yellow Skin');
    addMuseumItem(2233, 1, 'Invisible Skin');
    addMuseumItem(2234, 3, 'Invisible Weapon');
    addMuseumItem(2235, 3, 'Invisible Projectiles');
    addMuseumItem(2236, 3, 'Invisible Weapon and Projectiles');
    addMuseumItem(2241, 0, 'Kana Warrior');
    addMuseumItem(2242, 0, 'Kana King');
    i = 2341;
    while (i <= 2400) {
      addMuseumItem(i, 0, 'Perfect Attendance');
      ++i;
    }
    addMuseumArmorSet(2401, 0, 'Festive');
    addMuseumItem(2406, 0, 'Technical Trophy #1');
    addMuseumArmorSet(2411, 0, 'Choco');
    addMuseumItem(2416, 0, 'Technical Trophy #2');
    addMuseumArmorSet(2421, 0, 'Lantern');
    addMuseumItem(2426, 0, 'Technical Trophy #3');
    trace('MAX: ' + _root.museumMaxValue + ' CP (' + _root.museumMaxItem + ' items)');
  }

  frame 5 {
    function addSaveVar(varName, varValue) {
      if (_root.save[varName] == undefined || isNaN(_root.save[varName]) && !isNaN(varValue) && _root.saveid != -1) {
        _root.save[varName] = varValue;
      }
    }

    _root.autoBanned = 0;
    _root.systemclock = new Date();
    _root.systemtimenow = _root.systemclock.getTime();
    var globalSetting = SharedObject.getLocal('ATG_Global', '/');
    var my_so = SharedObject.getLocal('antiIdle_file0', '/');
    var another_so = SharedObject.getLocal('antiIdle_temp', '/');
    if (isNaN(_root.saveid)) {
      _root.saveid = -1;
    }
    if (_root.saveid == 0) {
      var my_so = SharedObject.getLocal('antiIdle_file0', '/');
    }
    if (_root.saveid == 1) {
      var my_so = SharedObject.getLocal('antiIdle_file1', '/');
    }
    if (_root.saveid == 2) {
      var my_so = SharedObject.getLocal('antiIdle_file2', '/');
    }
    if (_root.saveid == 3) {
      var my_so = SharedObject.getLocal('antiIdle_file3', '/');
    }
    if (_root.saveid == 4) {
      var my_so = SharedObject.getLocal('antiIdle_file4', '/');
    }
    if (_root.saveid == 10) {
      var my_so = SharedObject.getLocal('antiIdle_file10', '/');
    }
    if (_root.saveid == 11) {
      var my_so = SharedObject.getLocal('antiIdle_file11', '/');
    }
    if (_root.saveid == 12) {
      var my_so = SharedObject.getLocal('antiIdle_file12', '/');
    }
    if (_root.saveid == 13) {
      var my_so = SharedObject.getLocal('antiIdle_file13', '/');
    }
    if (_root.saveid >= 20) {
      var my_so = SharedObject.getLocal('antiIdle_file' + _root.saveid, '/');
    }
    if (_root.craftTool == true) {
      var my_so = SharedObject.getLocal('tukkun_craftSim', '/');
    }
    var save = _root.my_so.data;
    var saveGlobal = _root.globalSetting.data;
    if (_root.saveGlobal.graphicQuality == undefined) {
      _root.saveGlobal.graphicQuality = 'HIGH';
      _root.saveGlobal.keyboardLayout = 'qwerty';
    }
    if (_root.saveGlobal.showTitle == undefined) {
      _root.saveGlobal.showTitle = true;
    }
    if (_root.saveGlobal.aurianMode == undefined) {
      _root.saveGlobal.aurianMode = false;
    }
    if (isNaN(_root.saveGlobal.latestVersion)) {
      _root.saveGlobal.latestVersion = 1380;
    }
    if (_root.saveGlobal.speedrunUnlock0 == undefined) {
      _root.saveGlobal.speedrunUnlock0 = false;
      _root.saveGlobal.speedrunUnlock1 = false;
      _root.saveGlobal.speedrunUnlock2 = false;
      _root.saveGlobal.speedrunUnlock3 = false;
    }
    if (_root.saveGlobal.challengePerfect == undefined) {
      _root.saveGlobal.challengeTime = new Array();
      _root.saveGlobal.challengeAttempted = new Array();
      _root.saveGlobal.challengePerfect = new Array();
    }
    if (_root.saveGlobal.breakTab1 == undefined) {
      _root.saveGlobal.breakTab1 = new Array();
      _root.saveGlobal.breakTab2 = new Array();
      _root.saveGlobal.breakTab3 = new Array();
      _root.saveGlobal.breakTab4 = new Array();
      _root.saveGlobal.breakAll = new Array();
      _root.saveGlobal.breakFeature = new Array();
      _root.saveGlobal.breakR = new Array();
      _root.saveGlobal.breakG = new Array();
      _root.saveGlobal.breakB = new Array();
    }
    if (_root.saveGlobal.adminMode == undefined) {
      _root.saveGlobal.adminMode = '';
    }
    if (_root.saveGlobal.defTab == undefined) {
      _root.saveGlobal.defTab = 2;
    }
    if (_root.saveGlobal.selectedSave == undefined) {
      _root.saveGlobal.selectedSave = 0;
      _root.saveGlobal.playTime = ['?', '?', '?', '?'];
      _root.saveGlobal.curLevel = ['', '', '', ''];
      _root.saveGlobal.ascCount = ['', '', '', ''];
    }
    if (_root.saveGlobal.skipMenu == undefined) {
      _root.saveGlobal.skipMenu = false;
    }
    if (_root.saveid <= 3) {
      if (_root.save.dbExp > 100 || _root.save.dbCoin > 100 || _root.save.dbGreenCoin > 100 || _root.save.dbBlueCoin > 100) {
        if (_root.save.safeHacking == false && _root.save.submitScore == true) {
          _root.my_so.clear();
          _root.gotoAndStop(1);
        }
      }
    }
    if (_root.saveid < 10 || _root.saveid >= 20) {
      addSaveVar('lockedFile', false);
    } else {
      addSaveVar('lockedFile', true);
    }
    addSaveVar('pleaseRead', 'If you wish to hack, please turn Safe Hacking Mode on by changing the safeHacking variable to true (ticking the box in .sol Editor).');
    addSaveVar('safeHacking', false);
    if (_root.saveid < 20) {
      addSaveVar('submitScore', false);
      addSaveVar('submitScoreConfirm', false);
    } else {
      addSaveVar('submitScore', false);
      addSaveVar('submitScoreConfirm', true);
    }
    addSaveVar('refundReceived', false);
    addSaveVar('refundCooldown', 0);
    addSaveVar('refundTier', 0);
    addSaveVar('refundCode', 0);
    addSaveVar('noobMode', false);
    addSaveVar('offlineProgress', false);
    addSaveVar('offlineProgressFirst', false);
    addSaveVar('offlineProgressPromo', false);
    addSaveVar('gOldAscension', false);
    addSaveVar('gDifficulty', 1);
    addSaveVar('newbieSupport', 0);
    addSaveVar('bankCoin', 0);
    addSaveVar('bankGreenCoin', 0);
    addSaveVar('bankBlueCoin', 0);
    addSaveVar('bankGardenFruit', 0);
    addSaveVar('bankGardenPoint', 0);
    addSaveVar('bankArenaPixel', 0);
    addSaveVar('bankArenaCraft', 0);
    addSaveVar('dbExp', 100);
    addSaveVar('dbCoin', 100);
    addSaveVar('dbGreenCoin', 100);
    addSaveVar('dbBlueCoin', 100);
    addSaveVar('todayCode', 0);
    addSaveVar('consecutiveDays', 1);
    addSaveVar('maxConsecutiveDays', 1);
    addSaveVar('dailyPending', false);
    addSaveVar('restTime', 0);
    addSaveVar('restEfficiency', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('doubleExpTime', 0);
    addSaveVar('doubleCoinTime', 0);
    addSaveVar('rewardBotTime', 0);
    addSaveVar('autoHarvestTime', 0);
    addSaveVar('eliteButtonTime', 0);
    addSaveVar('batteryChargerTime', 0);
    addSaveVar('stadiumProTime', 0);
    addSaveVar('powerUserTime', 0);
    addSaveVar('demandMasterTime', 0);
    addSaveVar('quickAdventuresTime', 0);
    addSaveVar('eliteFisherTime', 0);
    addSaveVar('noAntsTime', 0);
    addSaveVar('doubleQuestTime', 0);
    addSaveVar('totalPlays', 0);
    addSaveVar('firstPlayed', _root.systemtimenow);
    addSaveVar('lastPlayed', _root.systemtimenow);
    addSaveVar('totalPlayTime', 0);
    addSaveVar('ascendPlayTime', 0);
    addSaveVar('longestSession', 0);
    addSaveVar('longestQuit', 0);
    addSaveVar('mainStatPage', 1);
    addSaveVar('challengeAttempted', [false]);
    addSaveVar('challengeClear', [false]);
    addSaveVar('challengePerfect', [false]);
    addSaveVar('expGraph', [0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expGraph2', [0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expSauce', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('coinSauce', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expSauceAsc', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('viewStat', 0);
    addSaveVar('viewAchievement', 0);
    addSaveVar('viewEvent', 0);
    addSaveVar('viewQuest', 0);
    addSaveVar('viewOption', 0);
    addSaveVar('manualSave', 0);
    addSaveVar('totalMute', 0);
    addSaveVar('newbieProgress', 0);
    addSaveVar('maxAchievement', 0);
    addSaveVar('trackachnum', 0);
    addSaveVar('userTitle', 'Welcome to Anti-Idle!');
    addSaveVar('achEarnTime', new Array());
    addSaveVar('mainQuestRank', new Array());
    addSaveVar('mainQuestC', 0);
    addSaveVar('mainQuestB', 0);
    addSaveVar('mainQuestA', 0);
    addSaveVar('mainQuestS', 0);
    addSaveVar('mainQuestCount', 0);
    addSaveVar('questDifficulty', 5);
    addSaveVar('questFeature', 'Main');
    addSaveVar('questType', 'Level Up');
    addSaveVar('questSubtype', 'Any');
    addSaveVar('questNeed', 100);
    addSaveVar('questCurrent', 1);
    addSaveVar('questReward', 'Legendary Box');
    addSaveVar('questRewardQuan', 1);
    addSaveVar('questRewardBlueCoin', 1000);
    addSaveVar('questRewardToken', 1000);
    addSaveVar('questBot', 0);
    addSaveVar('questCount', 0);
    addSaveVar('questRecord', 0);
    addSaveVar('questTotal', 0);
    addSaveVar('questToday', 0);
    addSaveVar('questSkipToday', 0);
    addSaveVar('questInstaToday', 0);
    addSaveVar('questStreak', 0);
    addSaveVar('questDescA', 'Reach level');
    addSaveVar('questDescB', 'to unlock other quests. An alternative way is to forfeit this quest.');
    addSaveVar('questTargetDiff', 15);
    addSaveVar('shinyToken', 0);
    addSaveVar('questToken', 0);
    addSaveVar('eventToken', 0);
    addSaveVar('eventTokenToday', 0);
    addSaveVar('hyperDay', [0, 0, 0]);
    addSaveVar('hyperDayDel', 2);
    addSaveVar('hyperDayRem', 3);
    addSaveVar('hyperDayCount', 0);
    addSaveVar('regretRem', 1);
    addSaveVar('arenaSampleCraft', 3);
    addSaveVar('specialShopVisit', 0);
    addSaveVar('featureSpecialShop', false);
    addSaveVar('specialStock', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('bestLevel', 1);
    addSaveVar('level', 1);
    addSaveVar('cursornum', 1);
    addSaveVar('bgNum', 8);
    addSaveVar('currentExp', 0);
    addSaveVar('totalExp', 0);
    addSaveVar('bestExp', 0);
    addSaveVar('expLag', 0);
    addSaveVar('coinLag', 0);
    addSaveVar('expFrame', 0);
    addSaveVar('coinFrame', 0);
    addSaveVar('greenCoinFrame', 0);
    addSaveVar('blueCoinFrame', 0);
    addSaveVar('dt', 0);
    addSaveVar('coin', 10000);
    addSaveVar('greenCoin', 0);
    addSaveVar('blueCoin', 0);
    addSaveVar('whiteCoin', 0);
    addSaveVar('whiteCoinRefund', 0);
    addSaveVar('whiteCoinRefundTotal', 0);
    addSaveVar('coinMax', 10000);
    addSaveVar('greenCoinMax', 0);
    addSaveVar('blueCoinMax', 0);
    addSaveVar('whiteCoinMax', 0);
    addSaveVar('coinOvercap', 0);
    addSaveVar('greenCoinOvercap', 0);
    addSaveVar('blueCoinOvercap', 0);
    addSaveVar('redCoinSpent', 0);
    addSaveVar('wcDropToday', 0);
    addSaveVar('rewardClaim', 0);
    addSaveVar('rewardClaimAuto', 0);
    addSaveVar('rewardClaimManual', 0);
    addSaveVar('progFirstRestock', false);
    addSaveVar('progTutorial', false);
    addSaveVar('restTutorial', false);
    addSaveVar('progSpeedAuto', 30);
    addSaveVar('progSpeedManual', 100);
    addSaveVar('progModuleName
    addSaveVar('progModuleTier', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleSize', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleShiny', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleType', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleChance', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleEffect', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleCost', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleScroll', 0);
    addSaveVar('progModuleSlot', 30);
    addSaveVar('progStore', 100);
    addSaveVar('megaBoostPotion', 0);
    addSaveVar('boostPotion', 0);
    addSaveVar('boostFreeze', 0);
    addSaveVar('boost', 100);
    addSaveVar('boostProg', 100);
    addSaveVar('boostExp', 100);
    addSaveVar('boostCoin', 100);
    addSaveVar('boostMax', 500);
    addSaveVar('boostMin', 100);
    addSaveVar('boostPremium', 0);
    addSaveVar('boostZebra', 0);
    addSaveVar('boostTemp', 0);
    addSaveVar('boostPurchased', 0);
    addSaveVar('ants', 100);
    addSaveVar('speedRun9001', 2147483647);
    addSaveVar('speedRun9002', 2147483647);
    addSaveVar('speedRunAscend', 2147483647);
    addSaveVar('speedRunAscendHard', 2147483647);
    addSaveVar('speedRunAscendImpossible', 2147483647);
    addSaveVar('count9002', 0);
    addSaveVar('speedRunMode1000', 2147483647);
    addSaveVar('speedRunMode2000', 2147483647);
    addSaveVar('speedRunMode3000', 2147483647);
    addSaveVar('speedRunMode4000', 2147483647);
    addSaveVar('speedRunMode5000', 2147483647);
    addSaveVar('speedRunMode6000', 2147483647);
    addSaveVar('speedRunMode7000', 2147483647);
    addSaveVar('speedRunMode8000', 2147483647);
    addSaveVar('speedRunMode9000', 2147483647);
    addSaveVar('speedRunMode9001', 2147483647);
    addSaveVar('speedRunClear', 0);
    addSaveVar('speedRunScore', 0);
    addSaveVar('speedRunCoin', 0);
    addSaveVar('speedRunTotalCoin', 0);
    addSaveVar('speedRunNextDay', 1440);
    addSaveVar('petExist', 0);
    addSaveVar('petName', '');
    addSaveVar('petBestLevel', 0);
    addSaveVar('petFullness', 0);
    addSaveVar('petHealth', 0);
    addSaveVar('petMana', 0);
    addSaveVar('petStat', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('petFullnessRestore', 1);
    addSaveVar('petHealthRestore', 1);
    addSaveVar('deadPetName', '');
    addSaveVar('deadPetStat', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('botLevel', 1);
    addSaveVar('botExp', 0);
    addSaveVar('botEnergy', 14400);
    addSaveVar('botPoint', 1000);
    addSaveVar('botOp', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('botActive', false);
    addSaveVar('botCurrentOp', 0);
    addSaveVar('botCurrentOpNum', 0);
    addSaveVar('botCurrentOpMax', 0);
    addSaveVar('botCurrentOpTime', 0);
    addSaveVar('botPill', 0);
    addSaveVar('botPillCrafted', 0);
    addSaveVar('botPillUsed', 0);
    addSaveVar('banned', 0);
    addSaveVar('bannedHard', 0);
    addSaveVar('bannedImpossible', 0);
    addSaveVar('banned1662', 0);
    addSaveVar('bannedB', 0);
    addSaveVar('idleMode', false);
    addSaveVar('boostAuto', false);
    addSaveVar('boostAutoPct', 100);
    addSaveVar('boostAutoCondition', 4);
    addSaveVar('boostAutoMax', 150);
    addSaveVar('boostAutoToday', 0);
    addSaveVar('newHouseStick', 0);
    addSaveVar('newHouseHead', 0);
    addSaveVar('newHouseEyes', 0);
    addSaveVar('newHouseMouth', 0);
    addSaveVar('newHouseHat', 0);
    addSaveVar('newHouseGlasses', 0);
    addSaveVar('newHouseShirt', 0);
    addSaveVar('newHouseLeftHand', 0);
    addSaveVar('newHouseRightHand', 0);
    addSaveVar('newHousePants', 0);
    addSaveVar('newHouseShoes', 0);
    addSaveVar('newHouseFloor', 0);
    addSaveVar('newHouseWall', 0);
    addSaveVar('newHouseWindow', 0);
    addSaveVar('newHouseWallObject', 0);
    addSaveVar('newHouseDesk', 0);
    addSaveVar('newHouseDeskObject', 0);
    addSaveVar('newHouseBackObject', 0);
    addSaveVar('newHouseFrontObject', 0);
    addSaveVar('newHousePet', 0);
    addSaveVar('newHouseCover', 0);
    addSaveVar('newHouseUStick', [1]);
    addSaveVar('newHouseUHead', [1]);
    addSaveVar('newHouseUEyes', [1]);
    addSaveVar('newHouseUMouth', [1]);
    addSaveVar('newHouseUHat', [1]);
    addSaveVar('newHouseUGlasses', [1]);
    addSaveVar('newHouseUShirt', [1]);
    addSaveVar('newHouseULeftHand', [1]);
    addSaveVar('newHouseURightHand', [1]);
    addSaveVar('newHouseUPants', [1]);
    addSaveVar('newHouseUShoes', [1]);
    addSaveVar('newHouseUFloor', [1]);
    addSaveVar('newHouseUWall', [1]);
    addSaveVar('newHouseUWindow', [1]);
    addSaveVar('newHouseUWallObject', [1]);
    addSaveVar('newHouseUDesk', [1]);
    addSaveVar('newHouseUDeskObject', [1]);
    addSaveVar('newHouseUBackObject', [1]);
    addSaveVar('newHouseUFrontObject', [1]);
    addSaveVar('newHouseUPet', [1]);
    addSaveVar('newHouseUCover', [1]);
    addSaveVar('newHouseXWindow', 220);
    addSaveVar('newHouseXWallObject', 400);
    addSaveVar('newHouseXDesk', 180);
    addSaveVar('newHouseXBackObject', 195);
    addSaveVar('newHouseXFrontObject', 0);
    addSaveVar('newHouseXPet', 350);
    addSaveVar('newHouseXStickman', 80);
    addSaveVar('houseRoom1', false);
    addSaveVar('houseRoom2', false);
    addSaveVar('houseRoom3', false);
    addSaveVar('houseWood', 0);
    addSaveVar('houseBrick', 0);
    addSaveVar('houseNail', 0);
    addSaveVar('housePaint', 0);
    addSaveVar('houseMagicRock', 0);
    addSaveVar('houseWhiteCoin', 0);
    addSaveVar('houseWhiteCoinMax', 0);
    addSaveVar('houseActivityCrystal', 0);
    addSaveVar('houseActivityCrystalToday', 0);
    addSaveVar('houseActivityCrystalMax', 0);
    addSaveVar('houseAchievementCrystal', 0);
    addSaveVar('houseQuestCrystal', 0);
    addSaveVar('houseAscensionCrystal', 0);
    addSaveVar('houseFloorUnlocked', [0, 1]);
    addSaveVar('houseWallUnlocked', [0, 1]);
    addSaveVar('houseObjectUnlocked', [0, 1]);
    addSaveVar('houseSkinUnlocked', [0, 1]);
    addSaveVar('houseBorderUnlocked', [0, 1]);
    addSaveVar('houseHatUnlocked', [0, 1]);
    addSaveVar('houseLeftEyeUnlocked', [0, 1]);
    addSaveVar('houseRightEyeUnlocked', [0, 1]);
    addSaveVar('houseGlassesUnlocked', [0, 1]);
    addSaveVar('houseMouthUnlocked', [0, 1]);
    addSaveVar('houseShirtUnlocked', [0, 1]);
    addSaveVar('houseLeftHandUnlocked', [0, 1]);
    addSaveVar('houseRightHandUnlocked', [0, 1]);
    addSaveVar('housePantsUnlocked', [0, 1]);
    addSaveVar('houseLeftFootUnlocked', [0, 1]);
    addSaveVar('houseRightFootUnlocked', [0, 1]);
    addSaveVar('houseVer', 0);
    addSaveVar('houseFloor', 1);
    addSaveVar('houseWall', 1);
    addSaveVar('houseObject', 1);
    addSaveVar('houseSkin', 1);
    addSaveVar('houseBorder', 1);
    addSaveVar('houseHat', 1);
    addSaveVar('houseLeftEye', 1);
    addSaveVar('houseRightEye', 1);
    addSaveVar('houseGlasses', 1);
    addSaveVar('houseMouth', 1);
    addSaveVar('houseShirt', 1);
    addSaveVar('houseLeftHand', 1);
    addSaveVar('houseRightHand', 1);
    addSaveVar('housePants', 1);
    addSaveVar('houseLeftFoot', 1);
    addSaveVar('houseRightFoot', 1);
    addSaveVar('houseX1', 100);
    addSaveVar('houseY1', 60);
    addSaveVar('houseX2', 180);
    addSaveVar('houseY2', 280);
    addSaveVar('houseX3', 230);
    addSaveVar('houseY3', 250);
    addSaveVar('houseBestThrow1', 0);
    addSaveVar('houseBestThrow2', 0);
    addSaveVar('houseFurniture1', false);
    addSaveVar('houseFurniture2', false);
    addSaveVar('houseFurniture3', false);
    addSaveVar('houseFurniture4', false);
    addSaveVar('houseFurniture5', false);
    addSaveVar('houseFurniture6', false);
    addSaveVar('houseFurniture7', false);
    addSaveVar('houseFurniture8', false);
    addSaveVar('houseFurniture9', false);
    addSaveVar('houseFurniture10', false);
    addSaveVar('houseFurniture11', false);
    addSaveVar('featureIdleMode', false);
    addSaveVar('featureBoostGen', false);
    addSaveVar('featureBoostAuto', false);
    addSaveVar('featureGarden', false);
    addSaveVar('featureBattleArena', false);
    addSaveVar('featureButtonMachine', false);
    addSaveVar('featureMoneyPrinter', false);
    addSaveVar('featureMysteryShop', false);
    addSaveVar('featureArcade', false);
    addSaveVar('featureStadium', false);
    addSaveVar('featureAutoSprayer', false);
    addSaveVar('featureEpicLicense', false);
    addSaveVar('featureTukkunFCG', false);
    addSaveVar('featureLolMarket', false);
    addSaveVar('featureAwesomeAdventures', false);
    addSaveVar('featureFishing', false);
    addSaveVar('featureSeppuku', false);
    addSaveVar('featureInstantWin', false);
    addSaveVar('featureTechnicalLight', false);
    addSaveVar('featureMiniGarden', false);
    addSaveVar('featureBestiary', false);
    addSaveVar('featureTravelingTicket', false);
    addSaveVar('featureSuperBattery', false);
    addSaveVar('featureArcadePack', false);
    addSaveVar('featureManualSprayer', false);
    addSaveVar('featureSpecialSprayer', false);
    addSaveVar('featureDoomSprayer', false);
    addSaveVar('featureEnergyToolbar', false);
    addSaveVar('featureCardToolbar', false);
    addSaveVar('featurePetFeedBar', false);
    addSaveVar('featurePremiumSprayer', false);
    addSaveVar('featureTitleEditor', false);
    addSaveVar('featureSecretShop', false);
    addSaveVar('featureNewHouse', false);
    addSaveVar('featureFactory', false);
    addSaveVar('serviceOfflineGrind', false);
    addSaveVar('serviceRewardBot', false);
    addSaveVar('serviceAutoHarvest', false);
    addSaveVar('serviceEliteButton', false);
    addSaveVar('serviceBatteryCharger', false);
    addSaveVar('serviceStadiumPro', false);
    addSaveVar('serviceFCGPowerUser', false);
    addSaveVar('serviceDemandMaster', false);
    addSaveVar('serviceQuickAdventures', false);
    addSaveVar('serviceDoubleQuest', false);
    addSaveVar('serviceNoAnts', false);
    addSaveVar('bgred', 30);
    addSaveVar('bggreen', 25);
    addSaveVar('bgblue', 20);
    addSaveVar('titlered', 255);
    addSaveVar('titlegreen', 255);
    addSaveVar('titleblue', 255);
    addSaveVar('ripoffCard', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('aprilFoolsBest', 0);
    addSaveVar('progBoxCount', 0);
    addSaveVar('progBoxToday', 0);
    addSaveVar('legendaryBoxOpened', 0);
    addSaveVar('supplyCrateOpened', 0);
    addSaveVar('explosionCrateOpened', 0);
    addSaveVar('awesomeCrateOpened', 0);
    addSaveVar('chaosCrateOpened', 0);
    addSaveVar('apocalypseCrateOpened', 0);
    addSaveVar('pixelatedMysteryBoxOpened', 0);
    addSaveVar('mysteryBox', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('mysteryBoxCollect1', new Array());
    addSaveVar('mysteryBoxCollect2', new Array());
    addSaveVar('mysteryBoxCollect3', new Array());
    addSaveVar('mysteryBoxCollect4', new Array());
    addSaveVar('mysteryBoxCollect5', new Array());
    addSaveVar('mysteryBoxCollect6', new Array());
    addSaveVar('mysteryBoxCollect7', new Array());
    addSaveVar('mysteryBoxCollect8', new Array());
    addSaveVar('mysteryBoxCollect9', new Array());
    addSaveVar('mysteryBoxCollect10', new Array());
    addSaveVar('mysteryBoxCollect9001', new Array());
    addSaveVar('mysteryBoxBan1', new Array());
    addSaveVar('mysteryBoxBan2', new Array());
    addSaveVar('mysteryBoxBan3', new Array());
    addSaveVar('mysteryBoxBan4', new Array());
    addSaveVar('mysteryBoxBan5', new Array());
    addSaveVar('mysteryBoxBan6', new Array());
    addSaveVar('mysteryBoxBan7', new Array());
    addSaveVar('mysteryBoxBan8', new Array());
    addSaveVar('mysteryBoxBan9', new Array());
    addSaveVar('mysteryBoxBan10', new Array());
    addSaveVar('harvestCount', 0);
    addSaveVar('harvestCoin', 0);
    addSaveVar('harvestMillion', 0);
    addSaveVar('gardenFertilizer', 5);
    addSaveVar('gardenMegaFertilizer', 1);
    addSaveVar('gardenFertilizerAllow', 0);
    addSaveVar('gardenPoint', 0);
    addSaveVar('gardenPointMax', 0);
    addSaveVar('gardenCapacity', 1);
    addSaveVar('gardenEXP', 0);
    addSaveVar('gardenSlotEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenTrees', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenMastery', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenSeed', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('aagStat1', 50);
    addSaveVar('aagStat2', 50);
    addSaveVar('aagStat3', 50);
    addSaveVar('aagStat4', 50);
    addSaveVar('gardenBreed0', 0);
    addSaveVar('gardenBreed1', 0);
    addSaveVar('gardenBreedReward', 0);
    addSaveVar('gardenBreedRewardC', 0);
    addSaveVar('gardenResearch', 0);
    addSaveVar('gardenBreedTotal', 0);
    addSaveVar('gardenFruit', 0);
    addSaveVar('gardenFruitMax', 0);
    addSaveVar('gardenFullness', 0);
    addSaveVar('gardenHarvestTime', new Array());
    addSaveVar('gardenRecentTime', new Array());
    addSaveVar('gardenExpiryTime', new Array());
    addSaveVar('gardenPurchaseTime', new Array());
    addSaveVar('gardenHarvestValue', new Array());
    addSaveVar('gardenTreeExp', new Array());
    addSaveVar('gardenTreeFertilize', new Array());
    addSaveVar('gardenTreeModuleProc', new Array());
    if (isNaN(_root.save.gardenSlotEXP[1])) {
      _root.save.gardenSlotEXP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (isNaN(_root.save.gardenTrees[1])) {
      _root.save.gardenTrees = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (isNaN(_root.save.gardenTrees[50])) {
      i = 26;
      while (i <= 50) {
        _root.save.gardenSlotEXP[i] = 0;
        _root.save.gardenTrees[i] = 0;
        ++i;
      }
      i = 26;
      while (i <= 100) {
        _root.save.gardenMastery[i] = 0;
        ++i;
      }
    }
    addSaveVar('arenaTutorial', 0);
    addSaveVar('arenaBonusPreference1', 'None');
    addSaveVar('arenaBonusPreference2', 'None');
    addSaveVar('arenaAbilityPreference1', 'None');
    addSaveVar('arenaAbilityPreference2', 'None');
    addSaveVar('arenaAbilityPreference3', 'None');
    addSaveVar('arenaMoreBonusPreference1', 'None');
    addSaveVar('arenaMoreBonusPreference2', 'None');
    addSaveVar('filterPref1t', 1);
    addSaveVar('filterPref2t', 9999);
    addSaveVar('filterPref3t', 1);
    addSaveVar('filterPref4t', 9001);
    addSaveVar('filterPref5t', 'Reward');
    addSaveVar('filterPref6t', 'Attack: Regular');
    addSaveVar('filterPref7t', 'Dummy');
    addSaveVar('filterPref8t', 0);
    addSaveVar('filterPref9t', 15);
    addSaveVar('filterPref1c', false);
    addSaveVar('filterPref2c', false);
    addSaveVar('filterPref3c', false);
    addSaveVar('filterPref4c', false);
    addSaveVar('filterPref5c', false);
    addSaveVar('filterPref6c', false);
    addSaveVar('filterPref7c', false);
    addSaveVar('filterPref8c', false);
    addSaveVar('filterPref9c', false);
    addSaveVar('filterPref10c', false);
    addSaveVar('filterPref11c', false);
    addSaveVar('filterPref12c', false);
    addSaveVar('filterPref13c', false);
    addSaveVar('collectionPoint', 0);
    addSaveVar('collectionPointMax', 0);
    addSaveVar('battlePoint', 0);
    addSaveVar('battleReward', 0);
    addSaveVar('battleDaily', false);
    addSaveVar('arenaLoot', 0);
    addSaveVar('arenaPixel', 0);
    addSaveVar('arenaPixelMax', 0);
    addSaveVar('arenaCraft', 0);
    addSaveVar('arenaCraftMax', 0);
    addSaveVar('arenaMaxDamage', 0);
    addSaveVar('arenaBacon', 0);
    addSaveVar('freeBacon1', 25);
    addSaveVar('freeBacon2', 50);
    addSaveVar('robaconLevel', 1);
    addSaveVar('robaconExp', 0);
    addSaveVar('robaconExpTotal', 0);
    addSaveVar('robaconSP', 0);
    addSaveVar('robaconBacon', 100);
    addSaveVar('vegetarianMode', false);
    addSaveVar('arenaBuffDuration', 0);
    addSaveVar('arenaBuffType', 0);
    addSaveVar('arenaWeapon', 1);
    addSaveVar('arenaSubWeapon', 0);
    addSaveVar('arenaHat', 101);
    addSaveVar('arenaShirt', 102);
    addSaveVar('arenaGloves', 103);
    addSaveVar('arenaPants', 104);
    addSaveVar('arenaShoes', 105);
    addSaveVar('arenaMedal', 0);
    addSaveVar('arenaPendant', 0);
    addSaveVar('arenaEarring', 0);
    addSaveVar('arenaTrinket', 0);
    addSaveVar('arenaSkin', 0);
    addSaveVar('arenaOutfitHat', 0);
    addSaveVar('arenaOutfitShirt', 0);
    addSaveVar('arenaOutfitGloves', 0);
    addSaveVar('arenaOutfitPants', 0);
    addSaveVar('arenaOutfitShoes', 0);
    addSaveVar('arenaOutfitSkin', 0);
    addSaveVar('arenaOutfitEarring', 0);
    addSaveVar('arenaOutfitMedal', 0);
    addSaveVar('arenaOutfitWeapon', 0);
    addSaveVar('arenaRing', 0);
    addSaveVar('arenaRingOwned', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaCrystal1', 0);
    addSaveVar('arenaCrystal2', 0);
    addSaveVar('roflRing', 0);
    addSaveVar('roflPendant', 0);
    addSaveVar('medalColor', 3);
    addSaveVar('disableDrawing', false);
    addSaveVar('disableManaEffect', false);
    addSaveVar('visibleRing', true);
    addSaveVar('drawingBoardHex', new Array());
    addSaveVar('drawingBoardAlp', new Array());
    addSaveVar('arenaPotion', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaFilter', 'Item Name 1,Item Name 2');
    addSaveVar('arenaEvent', 0);
    addSaveVar('arenaEventPoint', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaEventReward', new Array());
    addSaveVar('arenaEventKey', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaLevel', 1);
    addSaveVar('arenaExp', 0);
    addSaveVar('arenaExpTotal', 0);
    addSaveVar('arenaExpExcess', 0);
    addSaveVar('arenaSP', 20);
    addSaveVar('arenaUltimateSP', 0);
    addSaveVar('arenaSkill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaSkillMax', [0, 30, 30, 30, 30, 10, 1, 1, 1, 10, 10, 20, 20, 30, 30, 30, 20, 0, 30, 10, 30, 10, 30, 30, 10, 30, 1, 10, 10, 20, 30, 10, 30, 30, 50, 50, 30, 10, 30, 10, 20, 10, 20, 10, 20, 30, 0, 0, 0, 1, 30, 10, 10, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.arenaSkill[101])) {
      _root.save.arenaSkill[101] = 0;
      _root.save.arenaSkill[102] = 0;
      _root.save.arenaSkill[103] = 0;
    }
    if (isNaN(_root.save.arenaSkill[104])) {
      _root.save.arenaSkill[104] = 0;
      _root.save.arenaSkill[105] = 0;
      _root.save.arenaSkill[106] = 0;
    }
    addSaveVar('arenaTotalSkill', 0);
    addSaveVar('arenaTotalSP', 0);
    addSaveVar('arenaSkillBook', 0);
    addSaveVar('arenaHealth', 2500);
    addSaveVar('arenaMaxHealth', 2500);
    addSaveVar('arenaMana', 1000);
    addSaveVar('arenaMaxMana', 1000);
    addSaveVar('arenaSpirit', 0);
    addSaveVar('arenaFury', 0);
    addSaveVar('arenaAttack', 100);
    addSaveVar('arenaDefense', 100);
    addSaveVar('arenaAccuracy', 100);
    addSaveVar('arenaEvasion', 100);
    addSaveVar('arenaOxygenPenalty', 0);
    addSaveVar('arenaRage', 0);
    addSaveVar('arenaManaPower', false);
    addSaveVar('arenaMission', 0);
    addSaveVar('arenaKommanderProgress', 0);
    addSaveVar('arenaKommanderMonID', 2);
    addSaveVar('arenaKommanderMonCount', 5);
    addSaveVar('arenaKommanderProgBox', 5);
    addSaveVar('arenaKommanderPixBox', 5);
    addSaveVar('arenaKommanderProof', 5);
    addSaveVar('arenaKommanderSkip', 2);
    addSaveVar('arenaMaxEntry', 10);
    addSaveVar('arenaPyramidEntry', 10);
    addSaveVar('arenaMegabossEntry', 10);
    addSaveVar('arenaCorruptionEntry', 10);
    addSaveVar('arenaRevengeEntry', 10);
    addSaveVar('arenaEndlessEntry', 1);
    addSaveVar('arenaBonusChange', 100);
    addSaveVar('arenaKommanderComplete', 0);
    addSaveVar('arenaDefendComplete', 0);
    addSaveVar('arenaPrehistoricComplete', 0);
    addSaveVar('arenaProofTraining', 0);
    addSaveVar('arenaProofMission', 0);
    addSaveVar('arenaSuperiorCraft', 0);
    addSaveVar('arenaUnobtainium', 0);
    addSaveVar('arenaKill', 0);
    addSaveVar('arenaKillWhite', 0);
    addSaveVar('arenaKillRed', 0);
    addSaveVar('arenaKillPurple', 0);
    addSaveVar('arenaKillRare', 0);
    addSaveVar('arenaKillEpic', 0);
    addSaveVar('arenaDeath', 0);
    addSaveVar('arenaMaxEnhance', 0);
    addSaveVar('arenaFreeReset', 0);
    addSaveVar('arenaDiscoverAlley', false);
    addSaveVar('arenaDiscoverSmiley', false);
    addSaveVar('arenaDiscoverPokayman', false);
    addSaveVar('pokayCD', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('pokaystopCount', 0);
    addSaveVar('arenaCorruptScore', 0);
    addSaveVar('arenaCorruptToday', 0);
    addSaveVar('arenaCorruptHealth', 50);
    addSaveVar('arenaCorruptAttack', 50);
    addSaveVar('arenaCorruptDefense', 50);
    addSaveVar('arenaCorruptAccuracy', 50);
    addSaveVar('arenaCorruptEvasion', 50);
    addSaveVar('arenaZone', 0);
    addSaveVar('arenaZoneOrig', 0);
    addSaveVar('arenaMaxCombo', 0);
    addSaveVar('arenaBestiary', new Array());
    addSaveVar('arenaBestiaryExtra', new Array());
    addSaveVar('arenaBestiaryUlt1', new Array());
    addSaveVar('arenaBestiaryUlt2', new Array());
    addSaveVar('arenaBestiaryUlt3', new Array());
    addSaveVar('arenaBestiaryUlt1V', new Array());
    addSaveVar('arenaBestiaryUlt2V', new Array());
    addSaveVar('arenaBestiaryUlt3V', new Array());
    addSaveVar('arenaBestiaryUlt1F', new Array());
    addSaveVar('arenaBestiaryUlt2F', new Array());
    addSaveVar('arenaBestiaryUlt3F', new Array());
    addSaveVar('arenaZoneFound', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaZoneKill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaAllyEXP', new Array());
    addSaveVar('arenaAllyUpgrade', new Array());
    addSaveVar('arenaAllyFavorite', new Array());
    addSaveVar('arenaAlly', 0);
    addSaveVar('autoFight', false);
    addSaveVar('arenaHardcore', false);
    addSaveVar('arenaTurnBased', false);
    addSaveVar('recipeLevel', 0);
    addSaveVar('secretRecipeLevel', 0);
    addSaveVar('inventoryGuard', [false]);
    addSaveVar('inventoryExist', [0]);
    addSaveVar('inventorySet', [0]);
    addSaveVar('inventoryName', ['No Item']);
    addSaveVar('inventoryDesc', ['']);
    addSaveVar('inventoryReqRank', [1]);
    addSaveVar('inventoryLevel', [1]);
    addSaveVar('inventoryMaxLevel', [1]);
    addSaveVar('inventoryExp', [0]);
    addSaveVar('inventoryExpTNL', [0]);
    addSaveVar('inventoryEnhance', [0]);
    addSaveVar('inventoryBonusPow', [0]);
    addSaveVar('inventoryType', ['Any']);
    addSaveVar('inventorySubtype', ['Any']);
    addSaveVar('inventoryFrame', [0]);
    addSaveVar('inventoryRange', [false]);
    addSaveVar('inventoryAttack', [0]);
    addSaveVar('inventorySpeed', [0]);
    addSaveVar('inventoryDefense', [0]);
    addSaveVar('inventoryBonus', ['']);
    addSaveVar('inventoryAbility', ['']);
    addSaveVar('inventoryMoreBonus', ['']);
    addSaveVar('inventorySell', [0]);
    addSaveVar('inventoryExpiry', [Infinity]);
    addSaveVar('inventoryObtainTime', [0]);
    addSaveVar('inventoryNoBonus', [false]);
    addSaveVar('inventoryNoRecycle', [false]);
    addSaveVar('inventoryNoFuse', [false]);
    addSaveVar('inventoryNoUnique', [false]);
    addSaveVar('inventorySpirit', [false]);
    addSaveVar('inventoryCrit', [0]);
    addSaveVar('inventoryDexterity', [0]);
    addSaveVar('inventoryHealth', [0]);
    addSaveVar('inventoryUnob', [0]);
    addSaveVar('buttonGrandpa', 0);
    addSaveVar('buttonGrandpaSpeed', 1);
    addSaveVar('buttonGrandpaAccuracy', 1);
    addSaveVar('buttonGrandpaDiscipline', 1);
    addSaveVar('buttonGrandpaPress', 0);
    addSaveVar('buttonPress', 0);
    addSaveVar('buttonPressToday', 0);
    addSaveVar('buttonBreak', 0);
    addSaveVar('buttonPerfect', 0);
    addSaveVar('buttonPurple', 0);
    addSaveVar('buttonMaxCombo', 0);
    addSaveVar('buttonBroken', false);
    addSaveVar('buttonBless', 0);
    addSaveVar('buttonMultiplier', 0);
    addSaveVar('totalPrinterMoney', 0);
    addSaveVar('totalPrinterMillion', 0);
    addSaveVar('totalPrinterCharge', 0);
    addSaveVar('printerLevel', 1);
    addSaveVar('printerCharge', 80);
    addSaveVar('arcadeConfig1', true);
    addSaveVar('arcadeConfig2', true);
    addSaveVar('arcadeConfig3', true);
    addSaveVar('arcadeConfig4', false);
    addSaveVar('arcadeConfig5', true);
    addSaveVar('arcadeTodayPercent', 0);
    addSaveVar('arcadeHighPercent', 0);
    addSaveVar('arcadeHighTrade', 0);
    addSaveVar('arcadeTradeIn', false);
    addSaveVar('arcadeToken', 25);
    addSaveVar('arcadeBuyCount', 0);
    addSaveVar('arcade100kMedal', 0);
    addSaveVar('arcadeBless', 0);
    addSaveVar('highPong', 0);
    addSaveVar('highAvoidance', 0);
    addSaveVar('highMath', 0);
    addSaveVar('highWhack', 0);
    addSaveVar('highMind', 0);
    addSaveVar('highBalance', 0);
    addSaveVar('highCount', 0);
    addSaveVar('rick', 0);
    addSaveVar('highMMR', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('rankedPong', 0);
    addSaveVar('rankedAvoidance', 0);
    addSaveVar('rankedMath', 0);
    addSaveVar('rankedWhack', 0);
    addSaveVar('rankedMind', 0);
    addSaveVar('rankedBalance', 0);
    addSaveVar('rankedCount', 0);
    addSaveVar('rankedMode', true);
    addSaveVar('unrankedPower', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('totalPong', 0);
    addSaveVar('totalAvoidance', 0);
    addSaveVar('totalMath', 0);
    addSaveVar('totalWhack', 0);
    addSaveVar('totalMind', 0);
    addSaveVar('totalBalance', 0);
    addSaveVar('totalCount', 0);
    addSaveVar('totalMMR', 0);
    addSaveVar('todayHighPong', 0);
    addSaveVar('todayHighAvoidance', 0);
    addSaveVar('todayHighMath', 0);
    addSaveVar('todayHighWhack', 0);
    addSaveVar('todayHighMind', 0);
    addSaveVar('todayHighBalance', 0);
    addSaveVar('todayHighCount', 0);
    addSaveVar('todayParPong', 1400000);
    addSaveVar('todayParAvoidance', 500000);
    addSaveVar('todayParMath', 1000000);
    addSaveVar('todayParWhack', 1500000);
    addSaveVar('todayParMind', 2000000);
    addSaveVar('todayParBalance', 2800000);
    addSaveVar('todayParCount', 6000000);
    addSaveVar('stadiumRunescape', 0);
    addSaveVar('stadiumToken', 0);
    addSaveVar('stadiumTokenMax', 0);
    addSaveVar('stadiumAbilityCost', 0);
    addSaveVar('stadiumRace', 0);
    addSaveVar('stadiumItem', 0);
    addSaveVar('stadiumDeathMatch', 0);
    addSaveVar('stadiumBestDeathMatch', 0);
    addSaveVar('stadiumTodayDeathMatch', 0);
    addSaveVar('stadiumBestTime', 999999);
    addSaveVar('stadiumBetCorrect', 0);
    addSaveVar('stadiumBetStreak', 0);
    addSaveVar('stadiumBetMaxStreak', 0);
    addSaveVar('stadiumBetWinningCoin', 0);
    addSaveVar('stadiumBetWinningToken', 0);
    addSaveVar('stadiumEnergy', 0);
    addSaveVar('stadiumAccel', 0);
    addSaveVar('stadiumMaxSpeed', 0);
    addSaveVar('stadiumStartSpeed', 0);
    addSaveVar('stadiumDash', 0);
    addSaveVar('stadiumJump', 0);
    addSaveVar('stadiumBoost', 0);
    addSaveVar('stadiumReward', 0);
    addSaveVar('stadiumFace', 2);
    addSaveVar('stadiumHat', 1);
    addSaveVar('stadiumHatOwned', [0, 0, 0, 0, 0, 0]);
    addSaveVar('stadiumBless', 0);
    addSaveVar('stadiumImpossibleRace', 0);
    addSaveVar('stadiumImpossibleItem', 0);
    addSaveVar('antsSprayed', 0);
    addSaveVar('epicSkill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.epicSkill[1])) {
      _root.save.epicSkill = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    addSaveVar('banPenalty', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.banPenalty[1])) {
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    addSaveVar('totalStupidity', 0);
    addSaveVar('remStupidity', 0);
    addSaveVar('ascStupidity', 0);
    addSaveVar('ascMilestone', 0);
    addSaveVar('stupidity', 0);
    addSaveVar('permaStupidity', 0);
    addSaveVar('permaStupidityHard', 0);
    addSaveVar('permaStupidityImpossible', 0);
    addSaveVar('permaBanPenalty', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('permaBanMax', 0);
    addSaveVar('permaBanRes', 1);
    addSaveVar('curBanRefID', 201508);
    addSaveVar('curSheetID', 201507);
    addSaveVar('curDateID', 1);
    addSaveVar('curAttStamp', 0);
    addSaveVar('curAttMiss', 0);
    addSaveVar('curAttMedPend', 0);
    addSaveVar('lolConfig1', 1);
    addSaveVar('lolConfig2', 3);
    addSaveVar('lolConfig3', false);
    addSaveVar('lolCapacity', 50);
    addSaveVar('lolProfit', 0);
    addSaveVar('lolCooldown', 0);
    addSaveVar('lolMaxProfit', 0);
    if (isNaN(_root.save.lolGems[1]) && _root.save.lolGems != undefined) {
      delete _root.save.lolGems;
    }
    addSaveVar('lolGems', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('lolDemand', [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
    addSaveVar('lolPrice', [0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000]);
    addSaveVar('lolSpent', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgInitDeck', 0);
    addSaveVar('fcgSpeed', 10);
    addSaveVar('fcgLevel', 1);
    addSaveVar('fcgExp', 0);
    addSaveVar('fcgExpTotal', 0);
    addSaveVar('fcgCash', 1250);
    addSaveVar('fcgMaxCash', 1250);
    addSaveVar('fcgPlay', 0);
    addSaveVar('fcgWin', 0);
    addSaveVar('fcgLose', 0);
    addSaveVar('fcgStreak', 0);
    addSaveVar('fcgMaxStreak', 0);
    addSaveVar('fcgRandomDeck', false);
    addSaveVar('fcgReceiveChallenge', true);
    addSaveVar('fcgPowerActive', true);
    if (isNaN(_root.save.fcgOwned[1]) && _root.save.fcgOwned == undefined) {
      delete _root.save.fcgOwned;
      delete _root.save.fcgDeck;
    }
    addSaveVar('fcgRewardedLevel', 1);
    addSaveVar('fcgMission', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgMissionScore', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgMissionGold', 0);
    addSaveVar('fcgBuff', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgPower', [false, false, false, false, false, false, false, false, false]);
    addSaveVar('fcgOwned', [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgDeck', [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.fcgOwned[400])) {
      _root.save.fcgOwned[400] = 0;
      _root.save.fcgDeck[400] = 0;
    }
    addSaveVar('fcgCurDiff', 0);
    addSaveVar('fcgLastDiff', 0);
    addSaveVar('fcgLevel0', 0);
    addSaveVar('fcgLevel1', 0);
    addSaveVar('fcgLevel2', 0);
    addSaveVar('fcgLevel3', 0);
    addSaveVar('fcgLevel4', 0);
    addSaveVar('fcgLevel5', 0);
    addSaveVar('fcgLevel6', 0);
    addSaveVar('fcgLevel7', 0);
    addSaveVar('fcgLevel8', 0);
    addSaveVar('fcgLevel9', 0);
    addSaveVar('fcgLevel10', 0);
    addSaveVar('fcgStreak0', 0);
    addSaveVar('fcgStreak1', 0);
    addSaveVar('fcgStreak2', 0);
    addSaveVar('fcgStreak3', 0);
    addSaveVar('fcgStreak4', 0);
    addSaveVar('fcgStreak5', 0);
    addSaveVar('fcgStreak6', 0);
    addSaveVar('fcgStreak7', 0);
    addSaveVar('fcgStreak8', 0);
    addSaveVar('fcgStreak9', 0);
    addSaveVar('fcgStreak10', 0);
    addSaveVar('fcgMaxStreak0', 0);
    addSaveVar('fcgMaxStreak1', 0);
    addSaveVar('fcgMaxStreak2', 0);
    addSaveVar('fcgMaxStreak3', 0);
    addSaveVar('fcgMaxStreak4', 0);
    addSaveVar('fcgMaxStreak5', 0);
    addSaveVar('fcgMaxStreak6', 0);
    addSaveVar('fcgMaxStreak7', 0);
    addSaveVar('fcgMaxStreak8', 0);
    addSaveVar('fcgMaxStreak9', 0);
    addSaveVar('fcgMaxStreak10', 0);
    addSaveVar('fcgLegendCount', 0);
    addSaveVar('fcgLegendDeck', 0);
    addSaveVar('fcgLegendLife', 0);
    addSaveVar('fcgSeriousDeck', 34 + random(35));
    addSaveVar('fcgTotalCards', 52);
    addSaveVar('fcgPack1', 1);
    addSaveVar('fcgPack1Cost', 0);
    addSaveVar('fcgPack2', 1);
    addSaveVar('fcgPack2Cost', 0);
    addSaveVar('fcgPack3', 1);
    addSaveVar('fcgPack3Cost', 0);
    addSaveVar('fcgPack4', 1);
    addSaveVar('fcgPack4Cost', 0);
    addSaveVar('fcgPack5', 1);
    addSaveVar('fcgPack5Cost', 0);
    addSaveVar('awesomeBless', 250);
    addSaveVar('awesomeAuto', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('awesomeRedCoin', 0);
    addSaveVar('awesomeTotalRun', 0);
    addSaveVar('awesomeBestRun', 0);
    addSaveVar('awesomeBestRun1', 0);
    addSaveVar('awesomeBestRun2', 0);
    addSaveVar('awesomeBestRun3', 0);
    addSaveVar('awesomeBestRun4', 0);
    addSaveVar('awesomeTotalAdv', 0);
    addSaveVar('awesomeTotalAdv1', 0);
    addSaveVar('awesomeTotalAdv2', 0);
    addSaveVar('awesomeTotalAdv3', 0);
    addSaveVar('awesomeTotalAdv4', 0);
    addSaveVar('awesomeEnergy', 5);
    addSaveVar('awesomeMaxEnergy', 5);
    addSaveVar('awesomeReputation', 0);
    addSaveVar('awesomeMaxReputation', 0);
    addSaveVar('awesomeEnergyNext', 60);
    addSaveVar('awesomeRefill', 1);
    addSaveVar('grammarPill', 0);
    addSaveVar('specialPetFood', 0);
    addSaveVar('nextWizard', 0);
    addSaveVar('fishRod', 1);
    addSaveVar('fishCapacity', 2500);
    addSaveVar('fishRodUnlock', [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishLevel', 1);
    addSaveVar('fishBestLevel', 1);
    addSaveVar('fishExp', 0);
    addSaveVar('fishTotalExp', 0);
    addSaveVar('fishFatigue', 0);
    addSaveVar('fishStreak', 0);
    addSaveVar('fishBestStreak', 0);
    addSaveVar('fishPerfect', 0);
    addSaveVar('fishTotal', 0);
    addSaveVar('fishScore', 0);
    addSaveVar('fishScoreToday', 0);
    addSaveVar('fishScoreRecord', 0);
    addSaveVar('fishMilestoneTotal', 0);
    addSaveVar('fishMilestoneToday', 0);
    addSaveVar('fishFound', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishLeft', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishPetFishCooldown', 50);
    addSaveVar('fishPetFoodCooldown', 3);
    addSaveVar('fishFoodCooldown', 100);
    addSaveVar('fishDrinkCooldown', 3);
    addSaveVar('artifact', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('souvenir', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('raidPyramid', 0);
    addSaveVar('raidDefend', 0);
    addSaveVar('raidPrehistoric', 0);
    addSaveVar('raidMegaboss', 0);
    addSaveVar('raidTower', 0);
    addSaveVar('raidDungeon', 0);
    addSaveVar('raidEndless', 0);
    addSaveVar('raidSpecial', 0);
    addSaveVar('arenaRevengeScore', 0);
    addSaveVar('arenaTriangleScore', 0);
    addSaveVar('arenaTriangleToday', 0);
    addSaveVar('apocSecretKill', 0);
    addSaveVar('strangeBoxKill', 0);
    addSaveVar('triangleLandKill', 0);
    addSaveVar('triangleShoot', 0);
    addSaveVar('arenaEnhancerFragment', 0);
    addSaveVar('arenaChaoticFragment', 0);
    addSaveVar('deathMatchEntry', 1);
    addSaveVar('dragonReward', 0);
    addSaveVar('feedToday', 0);
    addSaveVar('feedTotal', 0);
    addSaveVar('feedMeter', 0);
    addSaveVar('wisdomDiscovered', new Array());
    addSaveVar('arenaNerfGem', 0);
    addSaveVar('arenaNerfCount', 0);
    addSaveVar('arenaNerfNext', 1000);
    addSaveVar('arenaSpookyKey', false);
    addSaveVar('arenaSpookyScore', 0);
    addSaveVar('arenaSpookyToday', 0);
    addSaveVar('arenaCraftUsed', 0);
    addSaveVar('ripoffCardUsed', 0);
    addSaveVar('careerBoost', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerActive', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerLevel', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerPotion', 0);
    addSaveVar('megaCareerPotion', 0);
    addSaveVar('curBusiness', 0);
    addSaveVar('curBusinessOffline', 0);
    addSaveVar('curBusinessOnline', 0);
    addSaveVar('curBusinessActivity', 0);
    addSaveVar('businessHigh', 0);
    addSaveVar('businessTotal', 0);
    addSaveVar('businessEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progBoxAsc', 0);
    addSaveVar('progBoxNext', 0);
    addSaveVar('refillAsc', 0);
    addSaveVar('refillNext', 0);
    addSaveVar('cheat', 0);
    addSaveVar('knowledge', 0);
    addSaveVar('theGame', 0);
    addSaveVar('mada', 0);
    addSaveVar('mbma', 0);
    addSaveVar('comboWaster', 0);
    addSaveVar('support', 0);
    addSaveVar('walkthru', 0);
    addSaveVar('escaped', 0);
    addSaveVar('pwned', 0);
    addSaveVar('petFeederBadge', 0);
    addSaveVar('revenger', 0);
    addSaveVar('ghostCount', 0);
    addSaveVar('hubertCount', 0);
    addSaveVar('seriousBusiness', 0);
    addSaveVar('survivor', 0);
    addSaveVar('forestDestroyer', 0);
    addSaveVar('curForestDestroyer', 0);
    addSaveVar('greed', 0);
    addSaveVar('lolBug', 0);
    addSaveVar('perfectionist', 0);
    addSaveVar('immortality', 0);
    addSaveVar('failproof', 0);
    addSaveVar('nightmare', 0);
    addSaveVar('artificialStupidity', 0);
    addSaveVar('moneySprayer', 0);
    addSaveVar('experienced', 0);
    addSaveVar('doingItWrong', 0);
    addSaveVar('curDoingItWrong', 0);
    addSaveVar('virtue', 0);
    addSaveVar('noHelp', 0);
    addSaveVar('randomGhost', 0);
    addSaveVar('nowUseless', 0);
    addSaveVar('chuckNorris', 0);
    addSaveVar('aceFinish', 0);
    addSaveVar('noDeath', 0);
    addSaveVar('pacifist', 0);
    addSaveVar('wakeUp', 0);
    addSaveVar('awesomeMineQuest', 0);
    addSaveVar('bestWpm', 0);
    addSaveVar('breakNewsMode', 1);
    addSaveVar('bouncyLoot', true);
    addSaveVar('rangeAnimate', true);
    addSaveVar('damageDisplay', true);
    addSaveVar('showBanner', true);
    addSaveVar('showGain', true);
    addSaveVar('showRobaconEXP', true);
    addSaveVar('enableTip', true);
    addSaveVar('activityLoot', false);
    addSaveVar('noob', 0);
    addSaveVar('ver', 0);
    addSaveVar('au', 0);
    addSaveVar('arenaPyramidCraftT', 0);
    addSaveVar('arenaMegabossCraftT', 0);
    addSaveVar('arenaCorruptionCraftT', 0);
    addSaveVar('arenaRevengeCraftT', 0);
    addSaveVar('arenaEndlessCraftT', 0);
    addSaveVar('seppukuTime', 0);
    addSaveVar('seppukuTotal', 0);
    addSaveVar('seppukuAscension', 0);
    addSaveVar('seppukuEnd', 0);
    addSaveVar('seppukuReward', 0);
    addSaveVar('seppukuPenalty', 0);
    addSaveVar('arenaUniqueStock', 10);
    addSaveVar('arenaChaosLeft', 15);
    addSaveVar('arenaChaosMax', 15);
    addSaveVar('arenaStorage2', false);
    addSaveVar('arenaStorage3', false);
    addSaveVar('arenaStorage4', false);
    addSaveVar('shinyWeekCount', 0);
    addSaveVar('shinyWeekLast', 24);
    addSaveVar('shinyWeek2Count', 0);
    addSaveVar('shinyWeek2Last', 10);
    addSaveVar('tech1Program', 'Disabled');
    addSaveVar('tech2Program', 'Disabled');
    addSaveVar('tech3Program', 'Disabled');
    addSaveVar('tech4Program', 'Disabled');
    addSaveVar('tech5Program', 'Disabled');
    addSaveVar('tech6Program', 'Disabled');
    addSaveVar('tech7Program', 'Disabled');
    addSaveVar('tech8Program', 'Disabled');
    addSaveVar('tech9Program', 'Disabled');
    addSaveVar('tech1Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech2Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech3Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech4Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech5Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech6Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech7Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech8Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech9Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech1StringA', '');
    addSaveVar('tech2StringA', '');
    addSaveVar('tech3StringA', '');
    addSaveVar('tech4StringA', '');
    addSaveVar('tech5StringA', '');
    addSaveVar('tech6StringA', '');
    addSaveVar('tech7StringA', '');
    addSaveVar('tech8StringA', '');
    addSaveVar('tech9StringA', '');
    addSaveVar('tech1StringB', '');
    addSaveVar('tech2StringB', '');
    addSaveVar('tech3StringB', '');
    addSaveVar('tech4StringB', '');
    addSaveVar('tech5StringB', '');
    addSaveVar('tech6StringB', '');
    addSaveVar('tech7StringB', '');
    addSaveVar('tech8StringB', '');
    addSaveVar('tech9StringB', '');
    addSaveVar('tech1NumberA', 0);
    addSaveVar('tech2NumberA', 0);
    addSaveVar('tech3NumberA', 0);
    addSaveVar('tech4NumberA', 0);
    addSaveVar('tech5NumberA', 0);
    addSaveVar('tech6NumberA', 0);
    addSaveVar('tech7NumberA', 0);
    addSaveVar('tech8NumberA', 0);
    addSaveVar('tech9NumberA', 0);
    addSaveVar('tech1NumberB', 0);
    addSaveVar('tech2NumberB', 0);
    addSaveVar('tech3NumberB', 0);
    addSaveVar('tech4NumberB', 0);
    addSaveVar('tech5NumberB', 0);
    addSaveVar('tech6NumberB', 0);
    addSaveVar('tech7NumberB', 0);
    addSaveVar('tech8NumberB', 0);
    addSaveVar('tech9NumberB', 0);
    addSaveVar('tech1NumberC', 0);
    addSaveVar('tech2NumberC', 0);
    addSaveVar('tech3NumberC', 0);
    addSaveVar('tech4NumberC', 0);
    addSaveVar('tech5NumberC', 0);
    addSaveVar('tech6NumberC', 0);
    addSaveVar('tech7NumberC', 0);
    addSaveVar('tech8NumberC', 0);
    addSaveVar('tech9NumberC', 0);
    if (_root.save.ver < 1) {
      if (_root.save.boostMax > 1300) {
        _root.save.boostMax = 1300;
      }
      _root.save.ver = 1;
    }
    if (_root.save.event_explosionTour == 1 && _root.save.ver < 2) {
      _root.save.mysteryBox[4] += 4;
      _root.save.ver = 2;
    }
    if (_root.save.ver < 4) {
      if (_root.save.careerLevel[3] > 30) {
        _root.save.careerLevel[3] = 30;
      }
      _root.save.ver = 4;
    }
    if (_root.save.ver < 7) {
      if (_root.save.arcadeToken > 100) {
        _root.save.greenCoin += 1000 * (_root.save.arcadeToken - 100);
      }
      _root.save.arcadeToken = 25;
      _root.save.ver = 7;
    }
    if (_root.save.ver < 8) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy') {
          _root.save.inventoryExpiry[i] = 7776000000.0 + _root.systemtimenow;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Hat' || _root.save.inventoryName[i] == 'Pre-Explosion Shirt' || _root.save.inventoryName[i] == 'Pre-Explosion Gloves' || _root.save.inventoryName[i] == 'Pre-Explosion Pants' || _root.save.inventoryName[i] == 'Pre-Explosion Shoes') {
          _root.save.inventoryExpiry[i] = 7776000000.0 + _root.systemtimenow;
        }
        ++i;
      }
      _root.save.ver = 8;
    }
    if (_root.save.ver < 9) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Stripped Nurse Hat') {
          _root.save.inventoryName[i] = 'Stripper Nurse Hat';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Shirt') {
          _root.save.inventoryName[i] = 'Stripper Nurse Shirt';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Gloves') {
          _root.save.inventoryName[i] = 'Stripper Nurse Gloves';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Pants') {
          _root.save.inventoryName[i] = 'Stripper Nurse Pants';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Shoes') {
          _root.save.inventoryName[i] = 'Stripper Nurse Shoes';
        }
        ++i;
      }
      _root.save.ver = 9;
    }
    if (_root.save.ver < 10) {
      i = 1;
      while (i <= 12) {
        if (_root.save.ripoffCard[i] > 5) {
          _root.save.ripoffCard[i] = 5;
          _root.save.blueCoin += 250;
        }
        ++i;
      }
      _root.save.ver = 10;
    }
    if (_root.save.ver < 11) {
      if (_root.save.mysteryBox[4] > 100) {
        _root.save.mysteryBox[4] = 100;
      }
      _root.save.ver = 11;
    }
    if (_root.save.ver < 12) {
      bcToRefund = 0;
      bcToRefund += _root.save.ripoffCard[5] * 2500;
      bcToRefund += _root.save.ripoffCard[6] * 2000;
      bcToRefund += _root.save.ripoffCard[7] * 1500;
      bcToRefund += _root.save.ripoffCard[8] * 1000;
      bcToRefund += _root.save.ripoffCard[9] * 750;
      bcToRefund += _root.save.ripoffCard[10] * 1250;
      bcToRefund += _root.save.ripoffCard[11] * 1750;
      bcToRefund += _root.save.ripoffCard[12] * 2250;
      if (bcToRefund < 0) {
        bcToRefund = 0;
      }
      if (bcToRefund > 100000) {
        bcToRefund = 100000;
      }
      _root.save.blueCoin += bcToRefund;
      i = 5;
      while (i <= 12) {
        if (_root.save.ripoffCard[i] > 0) {
          _root.save.ripoffCard[i] = 0;
        }
        ++i;
      }
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy' && _root.save.inventoryBonusPow[i] >= 175) {
          _root.save.inventoryAttack[i] -= 175;
          _root.save.inventoryBonusPow[i] -= 175;
          _root.save.inventoryEnhance[i] -= 1;
          _root.save.refund_relic = 1;
        }
        ++i;
      }
      _root.save.ver = 12;
    }
    if (_root.save.ver < 13) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy' && _root.save.inventoryBonusPow[i] >= 100) {
          _root.save.inventoryAttack[i] -= _root.save.inventoryBonusPow[i];
          _root.save.inventoryEnhance[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 13;
    }
    if (_root.save.ver < 15) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy') {
          _root.save.inventoryAttack[i] += 150;
        }
        ++i;
      }
      _root.save.ver = 15;
    }
    if (_root.save.ver < 16) {
      _root.save.ver = 16;
    }
    if (_root.save.ver < 17) {
      if (_root.save.stadiumBestTime < 7000) {
        _root.save.stadiumBestTime = 8000;
      }
      _root.save.ver = 17;
    }
    if (_root.save.ver < 18) {
      _root.save.arenaFreeReset += Math.floor(_root.save.arenaKommanderComplete / 10);
      _root.save.ver = 18;
    }
    if (_root.save.ver < 19) {
      if (_root.save.arenaLevel >= 180) {
        _root.save.arenaFreeReset += 1;
      }
      _root.save.mysteryBox[6] = 0;
      _root.save.mysteryBoxCollect6 = new Array();
      _root.save.ver = 19;
    }
    if (_root.save.ver < 20) {
      if (_root.save.arenaLevel >= 180) {
        _root.save.arenaSP += _root.save.arenaLevel - 180;
      }
      _root.save.ver = 20;
    }
    if (_root.save.ver < 21) {
      if (_root.save.arenaLevel > 250) {
        _root.save.arenaSP -= _root.save.arenaLevel - 250;
        if (_root.save.arenaSP < 0) {
          i = 1;
          while (i <= 100) {
            if (_root.save.arenaSkill[i] > 0) {
              _root.save.arenaSP += _root.save.arenaSkill[i];
              _root.save.arenaSkill[i] = 0;
            }
            ++i;
          }
        }
      }
      _root.save.ver = 21;
    }
    if (_root.save.ver < 23) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventorySpeed[i] = 2;
          _root.save.inventorySell[i] = 1000000;
        }
        ++i;
      }
      _root.save.ver = 23;
    }
    if (_root.save.ver < 26) {
      _root.save.stupidity = _root.save.banned;
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.ver = 26;
    }
    if (_root.save.ver < 28) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Elite Grenades' || _root.save.inventoryName[i] == 'Sword of Ascendant') {
          _root.save.inventoryNoLife[i] = true;
        }
        if (_root.save.inventoryName[i] == 'Bronze Trophy' || _root.save.inventoryName[i] == 'Silver Trophy' || _root.save.inventoryName[i] == 'Gold Trophy' || _root.save.inventoryName[i] == 'Bronze Endurance Trophy' || _root.save.inventoryName[i] == 'Silver Endurance Trophy' || _root.save.inventoryName[i] == 'Gold Endurance Trophy') {
          _root.save.inventoryNoLife[i] = true;
        }
        if (_root.save.inventoryBonusPow[i] > 1000) {
          _root.save.inventoryAttack[i] = 10;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 1' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 2' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 3' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 4' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 5' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 6' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 7' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 1' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 2' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 3' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 4' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 5' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 6' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 7') {
          _root.save.inventoryAbility[i] = '';
          _root.save.inventorySell[i] = 4000;
        }
        ++i;
      }
      _root.save.ver = 28;
    }
    if (_root.save.ver < 29) {
      _root.save.raidTower = 0;
      _root.save.ver = 29;
    }
    if (_root.save.ver < 31) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Anniversary Hat') {
          _root.save.inventoryFrame[i] = 13;
        }
        if (_root.save.inventoryName[i] == 'Halloween Hat') {
          _root.save.inventoryFrame[i] = 12;
        }
        if (_root.save.inventoryName[i] == 'Halloween Shirt') {
          _root.save.inventoryFrame[i] = 11;
        }
        if (_root.save.inventoryName[i] == 'Halloween Gloves') {
          _root.save.inventoryFrame[i] = 10;
        }
        if (_root.save.inventoryName[i] == 'Halloween Pants') {
          _root.save.inventoryFrame[i] = 10;
        }
        if (_root.save.inventoryName[i] == 'Halloween Shoes') {
          _root.save.inventoryFrame[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 31;
    }
    if (_root.save.ver < 32) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryMaxLevel[i] > 22 && _root.save.inventoryMaxLevel[i] < 100) {
          _root.save.inventoryAttack[i] -= _root.save.inventoryMaxLevel[i] * 4;
          _root.save.inventoryEnhance[i] = 9;
          _root.save.inventoryBonusPow[i] -= _root.save.inventoryMaxLevel[i] * 4;
          _root.save.inventoryMaxLevel[i] = 1;
          _root.save.inventoryLevel[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 32;
    }
    if (_root.save.ver < 36) {
      _root.save.buttonPurple = _root.save.buttonPerfect;
      _root.save.totalMMR = _root.save.highMMR[1] + _root.save.highMMR[2] + _root.save.highMMR[3] + _root.save.highMMR[4];
      _root.save.arcade100kMedal = Math.floor((_root.save.totalPong + _root.save.totalAvoidance + _root.save.totalMath + _root.save.totalWhack + _root.save.totalMind + _root.save.totalMMR) / 133700);
      _root.save.ver = 36;
    }
    if (_root.save.ver < 37) {
      if (_root.save.petBestLevel > 0 && _root.save.petExist == 0) {
        _root.save.coinLag += 250000000;
      }
      _root.save.ver = 37;
    }
    if (_root.save.ver < 38) {
      if (_root.save.arenaZoneKill[49] > 0) {
        i = 1;
        while (i <= 16) {
          _root.save.arenaRingOwned[i] = 1;
          ++i;
        }
      }
      _root.save.ver = 38;
    }
    if (_root.save.ver < 39) {
      if (_root.save.petBestLevel > 0 && _root.save.petStat[1] + _root.save.petStat[2] + _root.save.petStat[3] + _root.save.petStat[4] + _root.save.petStat[5] + _root.save.petStat[6] + _root.save.petStat[7] + _root.save.petStat[8] < _root.save.petBestLevel * 8) {
        _root.save.petExist = 1;
        _root.save.petHealth = 100;
        _root.save.petFullness = 100;
        _root.save.petStat[1] = _root.save.petBestLevel;
        _root.save.petStat[2] = _root.save.petBestLevel;
        _root.save.petStat[3] = _root.save.petBestLevel;
        _root.save.petStat[4] = _root.save.petBestLevel;
        _root.save.petStat[5] = _root.save.petBestLevel;
        _root.save.petStat[6] = _root.save.petBestLevel;
        _root.save.petStat[7] = _root.save.petBestLevel;
        _root.save.petStat[8] = _root.save.petBestLevel;
        _root.save.coinLag += 1000000000;
        _root.save.blueCoin += 10000;
      }
      _root.save.ver = 39;
    }
    if (_root.save.ver < 41) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 0;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 41;
    }
    if (_root.save.ver < 42) {
      _root.save.lolProfit += Math.floor(_root.save.petStat[7] * (0.5 + _root.save.petStat[7] / 2) * _root.save.lolPrice[10] * 0.92);
      _root.save.ver = 42;
    }
    if (_root.save.ver < 43) {
      if (_root.save.expGraph[5] >= 210000000000.0 || _root.save.expGraph[6] >= 210000000000.0 || _root.save.expGraph[7] >= 210000000000.0 || _root.save.lolProfit >= 2500000000.0 || isNaN(_root.save.lolProfit)) {
        _root.save.currentExp -= _root.save.expGraph[5] + _root.save.expGraph[6] + _root.save.expGraph[7];
        if (_root.save.lolProfit > 200000000) {
          _root.save.lolProfit = 200000000;
        }
        if (_root.save.blueCoin > 100000) {
          _root.save.blueCoin = 100000;
        }
        _root.save.mysteryBox[6] += 1;
      }
      _root.save.greenCoin += Math.floor(_root.save.lolGems[10] * _root.save.lolPrice[10]);
      _root.save.lolProfit += Math.floor(_root.save.lolGems[10] * _root.save.lolPrice[10]);
      _root.save.lolSpent[10] = 0;
      _root.save.lolGems[10] = 0;
      if (_root.save.petExist == 1) {
        _root.save.petFullness += 24;
        _root.save.petHealth += 12;
      }
      _root.save.ver = 43;
    }
    if (_root.save.ver < 46) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDesc[i] = '';
          tempSS = substring(_root.save.inventoryName[i], 1, 4);
          if (tempSS == '[O] ') {
            _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 5, _root.save.inventoryName[i].length);
            _root.save.inventoryDesc[i] = 'Item obtained before The Explosion update.';
          }
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDesc[i] = '';
          tempSS = substring(_root.save.inventoryName[i], 1, 4);
          if (tempSS == '[O] ') {
            _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 5, _root.save.inventoryName[i].length);
            _root.save.inventoryDesc[i] = 'Item obtained before The Explosion update.';
          }
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryDesc[i] = '';
        }
        ++i;
      }
      _root.save.ver = 46;
    }
    if (_root.save.ver < 47) {
      _root.save.ver = 47;
    }
    if (_root.save.ver < 48) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 48;
    }
    if (_root.save.ver < 51) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 51;
    }
    if (_root.save.ver < 101) {
      if (_root.save.arenaZoneKill[100] == undefined) {
        i = 50;
        while (i <= 100) {
          _root.save.arenaZoneKill[i] = 0;
          ++i;
        }
      }
      _root.save.arenaAttack += 60 * (_root.save.arenaLevel - 1);
      _root.save.arenaDefense += 60 * (_root.save.arenaLevel - 1);
      _root.save.arenaAccuracy += 6 * (_root.save.arenaLevel - 1);
      _root.save.arenaEvasion += 6 * (_root.save.arenaLevel - 1);
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryFrame[i] >= 151 && _root.save.inventoryFrame[i] <= 170) {
          _root.save.inventoryFrame[i] += 50;
        }
        if (_root.save.inventoryFrame[i] >= 101 && _root.save.inventoryFrame[i] <= 106) {
          _root.save.inventoryFrame[i] += 200;
        }
        if (_root.save.inventoryFrame[i] >= 51 && _root.save.inventoryFrame[i] <= 100) {
          _root.save.inventoryFrame[i] += 50;
        }
        if (_root.save.inventoryFrame[i] >= 8 && _root.save.inventoryFrame[i] <= 9) {
          _root.save.inventoryFrame[i] += 43;
        }
        if (_root.save.inventoryFrame[i] >= 108 && _root.save.inventoryFrame[i] <= 109) {
          _root.save.inventoryFrame[i] += 43;
        }
        ++i;
      }
      _root.save.mysteryBoxCollect[3] = new Array();
      _root.save.questCount = _root.save.bestLevel;
      if (!isNaN(_root.save.totalQuests)) {
        _root.save.questTotal = _root.save.totalQuests;
        _root.save.questToken += _root.save.questTotal * 5;
      }
      _root.save.ver = 101;
    }
    if (_root.save.ver < 104) {
      if (_root.save.fishLevel > 1 && _root.kongregate_username != undefined) {
        _root.my_so.clear();
        _root.gotoAndStop(1);
      }
      _root.save.ver = 104;
    }
    if (_root.save.ver < 106) {
      resetPoint = 0;
      i = 1;
      while (i <= 100) {
        if (_root.save.arenaSkill[i] > 0) {
          resetPoint += _root.save.arenaSkill[i];
        }
        ++i;
      }
      _root.save.arenaSP += resetPoint;
      _root.save.arenaTotalSkill = 0;
      i = 1;
      while (i <= 100) {
        if (_root.save.arenaSkill[i] > 0) {
          _root.save.arenaSkill[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 106;
    }
    if (_root.save.ver < 107) {
      _root.save.ver = 107;
    }
    if (_root.save.ver < 108) {
      _root.save.ver = 108;
    }
    if (_root.save.ver < 110) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        if (_root.save.inventoryName[i] == 'Small Master Potion') {
          _root.save.inventoryFrame[i] = 6;
        }
        if (_root.save.inventoryName[i] == 'Small Reward Potion') {
          _root.save.inventoryFrame[i] = 11;
        }
        if (_root.save.questSubtype == 'Another Graden Tree') {
          _root.save.questSubtype = 'Another Garden Tree';
        }
        ++i;
      }
      if (_root.save.questSubtype == 'Another Graden Tree') {
        _root.save.questSubtype = 'Another Garden Tree';
      }
      _root.save.ver = 110;
    }
    if (_root.save.ver < 111) {
      _root.save.arenaPixel = _root.save.arenaPixelMax;
      _root.save.ver = 111;
    }
    if (_root.save.ver < 112) {
      if (_root.save.inventoryExist[_root.save.arenaPendant] == 0) {
        _root.save.arenaPendant = 0;
      }
      _root.save.ver = 112;
    }
    if (_root.save.ver < 113) {
      _root.save.arenaCraft = _root.save.arenaCraftMax;
      _root.save.ver = 113;
    }
    if (_root.save.ver < 114) {
      _root.save.ver = 114;
    }
    if (_root.save.ver < 115) {
      if (_root.save.stadiumToken < 0) {
        _root.save.stadiumToken = 0;
        _root.save.ver = 116;
      }
    }
    if (_root.save.ver < 116) {
      if (_root.save.inventoryExist[_root.save.arenaPendant] == 0) {
        _root.save.arenaPendant = 0;
      }
      _root.save.ver = 116;
    }
    if (_root.save.ver < 117) {
      _root.save.ver = 117;
    }
    if (_root.save.ver < 118) {
      if (_root.save.arenaMaxDamage > 700000000000.0) {
        _root.save.arenaMaxDamage = 0;
        _root.save.arenaWeakenAffected = 1;
      }
      _root.save.ver = 118;
    }
    if (_root.save.ver < 119) {
      if (_root.save.gDifficulty >= 2) {
        _root.save.achEarnTime[1800] = _root.systemtimenow;
        _root.save.achEarnTime[1801] = _root.systemtimenow;
        _root.save.achEarnTime[1802] = _root.systemtimenow;
        _root.save.achEarnTime[1803] = _root.systemtimenow;
        _root.save.achEarnTime[1850] = _root.systemtimenow;
        _root.save.achEarnTime[1851] = _root.systemtimenow;
        _root.save.achEarnTime[1852] = _root.systemtimenow;
        _root.save.achEarnTime[1900] = _root.systemtimenow;
        _root.save.achEarnTime[1901] = _root.systemtimenow;
        _root.save.achEarnTime[1902] = _root.systemtimenow;
        _root.save.achEarnTime[1903] = _root.systemtimenow;
        _root.save.achEarnTime[1904] = _root.systemtimenow;
        _root.save.achEarnTime[1905] = _root.systemtimenow;
        _root.save.achEarnTime[1906] = _root.systemtimenow;
        _root.save.achEarnTime[1907] = _root.systemtimenow;
        _root.save.achEarnTime[1950] = _root.systemtimenow;
        _root.save.achEarnTime[1951] = _root.systemtimenow;
        _root.save.achEarnTime[1952] = _root.systemtimenow;
        _root.save.achEarnTime[1953] = _root.systemtimenow;
        _root.save.achEarnTime[1954] = _root.systemtimenow;
        _root.save.achEarnTime[1955] = _root.systemtimenow;
      }
      if (_root.save.gDifficulty >= 3) {
        _root.save.achEarnTime[2300] = _root.systemtimenow;
        _root.save.achEarnTime[2301] = _root.systemtimenow;
        _root.save.achEarnTime[2302] = _root.systemtimenow;
        _root.save.achEarnTime[2303] = _root.systemtimenow;
        _root.save.achEarnTime[2304] = _root.systemtimenow;
        _root.save.achEarnTime[2305] = _root.systemtimenow;
        _root.save.achEarnTime[3200] = _root.systemtimenow;
        _root.save.achEarnTime[3201] = _root.systemtimenow;
        _root.save.achEarnTime[3202] = _root.systemtimenow;
        _root.save.achEarnTime[3203] = _root.systemtimenow;
        _root.save.achEarnTime[3204] = _root.systemtimenow;
        _root.save.achEarnTime[3205] = _root.systemtimenow;
        _root.save.achEarnTime[4900] = _root.systemtimenow;
        _root.save.achEarnTime[4910] = _root.systemtimenow;
        _root.save.achEarnTime[4920] = _root.systemtimenow;
        _root.save.achEarnTime[4930] = _root.systemtimenow;
        _root.save.achEarnTime[4940] = _root.systemtimenow;
        _root.save.achEarnTime[4950] = _root.systemtimenow;
        _root.save.achEarnTime[4960] = _root.systemtimenow;
        _root.save.achEarnTime[4970] = _root.systemtimenow;
      }
      _root.save.ver = 119;
    }
    if (_root.save.ver < 120) {
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryDesc[i] == 'Explosion Crate Reward' && _root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventoryAttack[i] -= 500;
          _root.save.inventoryNoLife[i] = true;
        }
        ++i;
      }
      _root.save.ver = 120;
    }
    if (_root.save.ver < 121) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      _root.save.ver = 121;
    }
    if (_root.save.ver < 122) {
      i = 1;
      while (i <= 430) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Burned Rope' || _root.save.inventoryName[i] == 'Special Wand' || _root.save.inventoryName[i] == 'Bronze Pickaxe') {
            _root.save.inventoryNoFuse[i] = true;
          } else {
            _root.save.inventoryNoFuse[i] = false;
          }
        }
        ++i;
      }
      i = 401;
      while (i <= 430) {
        if (_root.save.inventoryName[i] == 'Large Power Potion') {
          _root.save.inventoryFrame[i] = 3;
          _root.save.inventoryAttack[i] = 1800;
        }
        if (_root.save.inventoryName[i] == 'Large Reward Potion') {
          _root.save.inventoryFrame[i] = 13;
          _root.save.inventoryAttack[i] = 1800;
        }
        ++i;
      }
      _root.save.ver = 122;
    }
    if (_root.save.ver < 123) {
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        ++i;
      }
      i = 301;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        ++i;
      }
      _root.save.ver = 123;
    }
    if (_root.save.ver < 124) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryAttack[i] > 0) {
            _root.save.inventoryAttack[i] = Math.floor(_root.save.inventoryAttack[i] * 0.9);
            _root.save.inventorySpeed[i] = Math.floor(_root.save.inventorySpeed[i] * 0.9);
            _root.save.inventoryDefense[i] = Math.floor(_root.save.inventoryDefense[i] * 0.9);
            _root.save.inventoryCrit[i] = Math.floor(_root.save.inventoryCrit[i] * 0.9);
            _root.save.inventoryDexterity[i] = Math.floor(_root.save.inventoryDexterity[i] * 0.9);
          }
          if (_root.save.inventoryName[i] == 'Sword of Ascendant') {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
          }
        }
        ++i;
      }
      _root.save.ver = 124;
    }
    if (_root.save.ver < 125) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        if (_root.save.inventorySubtype[i] == 'Mining Tool') {
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 125;
    }
    if (_root.save.ver < 126) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryDesc[i].indexOf('Elite Grenades') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Sword of Ascendant') != -1) {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
          }
          if (_root.save.inventoryDesc[i].indexOf('DOOOOOOM') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Trophy') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Alien') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
        }
        ++i;
      }
      _root.save.ver = 126;
    }
    if (_root.save.ver < 127) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventoryNoLife[i] == true) {
          _root.save.inventoryNoLife[i] = false;
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 127;
    }
    if (_root.save.ver < 128) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryDesc[i] == 'Explosion Crate Reward' && _root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventoryAttack[i] += 500;
        }
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          if (_root.save.inventorySpeed[i] > 2) {
            _root.save.inventoryAttack[i] += _root.save.inventorySpeed[i] * 5;
            _root.save.inventorySpeed[i] = 2;
          }
        }
        ++i;
      }
      _root.save.ver = 128;
    }
    if (_root.save.ver < 129) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          if (_root.save.inventorySpeed[i] > 2) {
            _root.save.inventoryAttack[i] += _root.save.inventorySpeed[i] * 5;
            _root.save.inventorySpeed[i] = 2;
          }
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 129;
    }
    if (_root.save.ver < 131) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryDesc[i].indexOf('Pickaxe') != -1 && _root.save.inventorySpeed[i] > 15) {
            _root.save.inventorySpeed[i] = 7;
          }
        }
        if (_root.save.inventorySubtype[i] == 'Mining Tool') {
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 131;
    }
    if (_root.save.ver < 132) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventorySpeed[i] < 8 + Math.floor(_root.save.inventoryBonusPow[i] / 10)) {
          _root.save.inventorySpeed[i] = 8 + Math.floor(_root.save.inventoryBonusPow[i] / 10);
        }
        ++i;
      }
      _root.save.ver = 132;
    }
    if (_root.save.ver < 133) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Burned Rope' && _root.save.inventoryNoLife[i] == true) {
          _root.save.inventoryNoLife[i] = false;
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 133;
    }
    if (_root.save.ver < 134) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventorySpeed[i] > 9 + Math.floor(_root.save.inventoryBonusPow[i] / 20 - _root.save.inventoryCrit[i] / 10 - _root.save.inventoryDexterity[i] / 10 - _root.save.inventoryHealth[i] / 10)) {
          _root.save.inventorySpeed[i] = 9 + Math.floor(_root.save.inventoryBonusPow[i] / 20 - _root.save.inventoryCrit[i] / 10 - _root.save.inventoryDexterity[i] / 10 - _root.save.inventoryHealth[i] / 10);
        }
        ++i;
      }
      _root.save.ver = 134;
    }
    if (_root.save.ver < 135) {
      _root.save.ver = 135;
    }
    if (_root.save.ver < 136) {
      _root.save.fishScore = Math.floor(_root.save.fishScore / 5) * 5;
      _root.save.fishScoreToday = Math.floor(_root.save.fishScoreToday / 5) * 5;
      _root.save.fishScoreRecord = Math.floor(_root.save.fishScoreRecord / 5) * 5;
      _root.save.ver = 136;
    }
    if (_root.save.ver < 137) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      i = 301;
      while (i <= 324) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      _root.save.ver = 137;
    }
    if (_root.save.ver < 139) {
      _root.save.arenaSpookyPenalty = _root.save.arenaZoneKill[52];
      _root.save.ver = 139;
    }
    if (_root.save.ver < 201) {
      _root.save.arenaSpookyPenalty = 0;
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryLevel[i] > 1 && _root.save.inventorySubtype[i] != 'Pendant') {
          if (_root.save.inventoryType[i] == 'Weapon') {
            _root.save.inventoryDefense[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 2;
            _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 4;
          }
          if (_root.save.inventoryType[i] == 'Armor') {
            _root.save.inventoryAttack[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 1;
            _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 4;
          }
          _root.save.inventoryDexterity[i] += Math.floor(_root.save.inventoryLevel[i] / 3) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 3) * 10;
          _root.save.inventoryHealth[i] += Math.floor(_root.save.inventoryLevel[i] / 4) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 4) * 10;
          _root.save.inventoryCrit[i] += Math.floor(_root.save.inventoryLevel[i] / 5) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 5) * 10;
        }
        ++i;
      }
      _root.save.ver = 201;
    }
    if (_root.save.ver < 202) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Epic Fire Staff' || _root.save.inventoryName[i] == 'Epic Ice Staff' || _root.save.inventoryName[i] == 'Epic Wind Staff' || _root.save.inventoryName[i] == 'Epic Earth Staff' || _root.save.inventoryName[i] == 'Epic Thunder Staff' || _root.save.inventoryName[i] == 'Epic Water Staff' || _root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
          if (_root.save.inventoryNoFuse[i] == true) {
            _root.save.inventoryAttack[i] = 675;
            _root.save.inventoryBonusPow[i] = 0;
            _root.save.inventoryEnhance[i] = 0;
          }
          _root.save.inventoryMaxLevel[i] = 60;
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 202;
    }
    if (_root.save.ver < 203) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting' || _root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryRange[i] = true;
        }
        ++i;
      }
      _root.save.ver = 203;
    }
    if (_root.save.ver < 301) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Epic Fire Staff' || _root.save.inventoryName[i] == 'Epic Ice Staff' || _root.save.inventoryName[i] == 'Epic Wind Staff' || _root.save.inventoryName[i] == 'Epic Earth Staff' || _root.save.inventoryName[i] == 'Epic Thunder Staff' || _root.save.inventoryName[i] == 'Epic Water Staff' || _root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
          _root.save.inventoryAttack[i] = 750;
          _root.save.inventorySpeed[i] = 6;
          _root.save.inventoryDefense[i] = 0;
          _root.save.inventoryCrit[i] = 0;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
          _root.save.inventoryBonusPow[i] = 100;
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventoryMaxLevel[i] = 60;
          _root.save.inventoryNoFuse[i] = true;
        }
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +350%, Spawn Rate +20%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +350%, Spawn Rate +25%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +350%, Spawn Rate +35%\n\nCannot be enhanced with Attack enhancers.';
        }
        ++i;
      }
      _root.save.ver = 301;
    }
    if (_root.save.ver < 401) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
          _root.save.inventoryFrame[i] = 246;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
          _root.save.inventoryFrame[i] = 247;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
          _root.save.inventoryFrame[i] = 248;
        }
        ++i;
      }
      _root.save.ver = 401;
    }
    if (_root.save.ver < 402) {
      if (_root.save.bestLevel >= 200) {
        _root.save.eventToken += 3000;
      }
      _root.save.ver = 402;
    }
    if (_root.save.ver < 404) {
      _root.save.arenaRingOwned[16] = 1;
      _root.save.ver = 404;
    }
    if (_root.save.ver < 405) {
      if (_root.save.activeDeal1 == true) {
        _root.save.eventToken += 1000;
      }
      _root.save.ver = 405;
    }
    if (_root.save.ver < 406) {
      i = 1;
      while (i <= 400) {
        _root.save.inventoryNoUnique[i] = false;
        ++i;
      }
      _root.save.ver = 406;
    }
    if (_root.save.ver < 407) {
      _root.save.speedRunAscend = 2147483647;
      _root.save.speedRunAscendHard = 2147483647;
      _root.save.speedRunAscendImpossible = 2147483647;
      _root.save.speedRun9001 = 2147483647;
      _root.save.ver = 407;
    }
    if (_root.save.ver < 409) {
      i = 17;
      while (i <= 22) {
        _root.save.arenaRingOwned[i] = 0;
        ++i;
      }
      _root.save.ver = 409;
    }
    if (_root.save.ver < 411) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Meteoric') != -1) {
          _root.save.inventoryNoUnique[k] = true;
        } else {
          if (_root.save.inventoryNoUnique[k] == true) {
            _root.save.inventoryNoUnique[k] = false;
          }
        }
        ++k;
      }
      _root.save.ver = 411;
    }
    if (_root.save.ver < 412) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Censor') != -1) {
          _root.save.inventoryExpiry[k] = Infinity;
          _root.save.inventoryEnhance[k] -= 3;
        }
        ++k;
      }
      _root.save.ver = 412;
    }
    if (_root.save.ver < 413) {
      if (_root.save.bestLevel > 1) {
        if (_root.save.inventoryExist[_root.save.arenaHat] != 1) {
          _root.save.arenaHat = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShirt] != 1) {
          _root.save.arenaShirt = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaGloves] != 1) {
          _root.save.arenaGloves = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaPants] != 1) {
          _root.save.arenaPants = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShoes] != 1) {
          _root.save.arenaShoes = 0;
        }
      }
      _root.save.ver = 413;
    }
    if (_root.save.ver < 415) {
      _root.save.permaStupidity = _root.save.banned;
      _root.save.permaStupidityHard = _root.save.bannedHard;
      _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      _root.save.ver = 415;
    }
    if (_root.save.ver < 418) {
      _root.save.fcgExp += _root.save.fcgWin * 20;
      _root.save.fcgExp += _root.save.fcgLevel6 * 10;
      _root.save.fcgExp += _root.save.fcgLevel7 * 20;
      _root.save.fcgExp += _root.save.fcgLevel8 * 30;
      _root.save.fcgCash += _root.save.fcgWin * 30;
      _root.save.fcgCash += _root.save.fcgLevel6 * 15;
      _root.save.fcgCash += _root.save.fcgLevel7 * 30;
      _root.save.fcgCash += _root.save.fcgLevel8 * 45;
      _root.save.fcgLevel8 = 0;
      _root.save.ver = 418;
    }
    if (_root.save.ver < 419) {
      _root.save.fcgLegendDeck = 13 + Math.floor(_root.systemtimenow / 86400000 % 21);
      _root.save.fcgLegendLife = 10;
      _root.save.ver = 419;
    }
    if (_root.save.ver < 424) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == '2nd Anniversary Medal') {
          _root.save.inventoryFrame[i] = 4;
        }
        ++i;
      }
      _root.save.ver = 424;
    }
    if (_root.save.ver < 425) {
      _root.save.fcgStreak8 = 0;
      _root.save.fcgMaxStreak8 = 0;
      _root.save.ver = 425;
    }
    if (_root.save.ver < 426) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'First Medal' || _root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryNoUnique[i] = false;
        }
        ++i;
      }
      _root.save.ver = 426;
    }
    if (_root.save.ver < 427) {
      if (_root.save.gDifficulty >= 3 && _root.save.level < 9000) {
        _root.save.bankGardenFruit = Math.floor(_root.save.gardenFruit * 0.95);
        _root.save.gardenFruit = Math.ceil(_root.save.gardenFruit * 0.05);
      }
      _root.save.robaconBacon += Math.floor(_root.save.arenaCraft / 50000);
      if (_root.save.robaconBacon > 2000) {
        _root.save.robaconBacon = 2000;
      }
      _root.save.ver = 427;
    }
    if (_root.save.ver < 429) {
      if (_root.save.arenaLevel >= 50 && _root.save.totalPlayTime >= 300000) {
        _root.save.arenaTutorial = 2;
      }
    }
    if (_root.save.ver < 436) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Meteoric') != -1) {
          _root.save.inventoryNoUnique[k] = true;
          if (_root.save.inventoryAttack[k] > 550) {
            _root.save.inventoryAttack[k] = 550;
          }
        } else {
          if (_root.save.inventoryNoUnique[k] == true) {
            _root.save.inventoryNoUnique[k] = false;
          }
        }
        if (_root.save.inventoryName[k] == 'Dark Ruler') {
          _root.save.inventoryEnhance[k] = 2005;
        }
        ++k;
      }
      _root.save.ver = 436;
    }
    if (_root.save.ver < 457) {
      _root.save.arenaSP = 1 + _root.save.arenaLevel * 15 + _root.save.arenaUltimateSP * 10;
      i = 1;
      while (i <= 80) {
        _root.save.arenaSkill[i] = 0;
        ++i;
      }
      _root.save.arenaTotalSkill = 0;
      _root.save.arenaSkillMax = [0, 30, 30, 30, 30, 10, 0, 0, 0, 10, 10, 20, 20, 30, 30, 30, 20, 0, 30, 10, 30, 10, 30, 30, 10, 30, 1, 10, 10, 20, 30, 10, 30, 30, 50, 50, 30, 10, 30, 10, 20, 10, 20, 10, 20, 30, 0, 0, 0, 1, 30, 10, 10, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      i = 26;
      while (i <= 100) {
        if (i != 26 && i != 51 && i != 76) {
          _root.save.gardenBreedTotal += Math.floor(_root.save.gardenSeed[i] * 1.2 + _root.save.gardenMastery[i]);
        }
        ++i;
      }
      _root.save.arenaKillEpic += _root.save.arenaUnobtainium;
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Loot Magnet') {
          _root.save.arenaKillEpic += 2500;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
          if (_root.save.inventoryExpiry[i] != Infinity || _root.save.inventoryCrit[i] == 21) {
            _root.save.arenaKillEpic += 1500;
          } else {
            _root.save.arenaKillEpic += 7500;
          }
        }
        ++i;
      }
      _root.save.boostAutoMax = 150;
      _root.save.ver = 457;
    }
    if (_root.save.ver < 460) {
      if (_root.save.level >= 9000 || _root.save.gDifficulty != 3) {
        _root.save.arenaPixel += Math.floor(_root.save.arenaPixelMax * 0.2);
        _root.save.arenaCraft += Math.floor(_root.save.arenaCraftMax * 0.45);
      } else {
        _root.save.bankArenaPixel += Math.floor(_root.save.arenaPixelMax * 0.25);
        _root.save.bankArenaCraft += Math.floor(_root.save.arenaCraftMax * 0.55);
      }
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryUnob[i] = 0;
          if (_root.save.inventoryName[i] == 'Glaive-Glaive-Glaive-Guisarme-Glaive') {
            _root.save.inventoryCrit[i] += 10;
            _root.save.inventoryDexterity[i] += 10;
            _root.save.inventoryAttack[i] += 40;
            _root.save.inventoryBonusPow[i] += 40;
          }
          if (_root.save.inventoryName[i] == 'Greatsword') {
            _root.save.inventoryCrit[i] += 15;
            _root.save.inventoryDexterity[i] += 15;
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryBonusPow[i] += 50;
          }
          if (_root.save.inventoryName[i] == 'Greatersword') {
            _root.save.inventoryCrit[i] += 20;
            _root.save.inventoryDexterity[i] += 20;
            _root.save.inventoryAttack[i] += 60;
            _root.save.inventoryBonusPow[i] += 60;
          }
          if (_root.save.inventoryName[i] == 'Gold Cannon') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryBonusPow[i] += 100;
          }
          if (_root.save.inventoryName[i].indexOf('Berserker') != -1) {
            _root.save.inventoryCrit[i] += 7;
          }
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryCrit[i] += 8;
          }
          if (_root.save.inventoryName[i].indexOf('Pure Darkness') != -1) {
            _root.save.inventoryCrit[i] += 9;
          }
          if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
            _root.save.inventoryCrit[i] += 10;
          }
          if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryBonusPow[i] += 500;
          }
          if (_root.save.inventoryName[i] == 'Cursed Sword') {
            _root.save.inventoryEnhance[i] -= 6;
          }
          if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryBonusPow[i] += 500;
          }
          if (_root.save.inventoryName[i] == 'Loot Magnet') {
            _root.save.inventoryBonusPow[i] += 156;
          }
          if (_root.save.inventoryName[i] == 'Arena Champion') {
            _root.save.inventoryBonusPow[i] += 156;
          }
          if (_root.save.inventoryName[i] == 'Censor Sword') {
            _root.save.inventoryAttack[i] += 100;
          }
          if (_root.save.inventoryName[i] == 'Rain Bow') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryMoreBonus[i] = 'Accuracy';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
        }
        ++i;
      }
      _root.save.arenaZone = 0;
      _root.save.ver = 460;
    }
    if (_root.save.ver < 461) {
      i = 1;
      while (i <= 60) {
        if (_root.save.arenaZoneKill[i] > 0) {
          _root.save.arenaZoneFound[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 461;
    }
    if (_root.save.ver < 462) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryMoreBonus[i] = '';
          if (_root.save.inventoryDesc[i] == undefined) {
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 462;
    }
    if (_root.save.ver < 465) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +200%, Spawn Rate +20%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +225%, Spawn Rate +25%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +250%, Spawn Rate +35%\n\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Pendant of Selectivity') {
          _root.save.inventoryName[i] = 'Pendant of Epicness';
        }
        ++i;
      }
      _root.save.breakignore9002 = true;
      if (_root.kongregate_username == 'Tukkun' || _root.kongregate_username == undefined || _root.saveid == 4) {
        _root.save.breakignore9002 = false;
      }
      _root.save.mysteryBoxCollect3 = new Array();
      _root.save.mysteryBox[2] = Math.ceil(_root.save.mysteryBox[2] * 0.1);
      i = 1;
      while (i <= 12) {
        if (!isNaN(_root.save.mysteryBoxCollect4[i])) {
          _root.save.legendaryBoxOpened += _root.save.mysteryBoxCollect4[i];
        }
        ++i;
      }
      _root.save.ver = 465;
    }
    if (_root.save.ver < 466) {
      _root.save.highCount = 0;
      _root.save.totalCount = 0;
      if (_root.save.bestLevel >= 500) {
        _root.save.mysteryBox[8] += 3;
      }
      _root.save.ver = 466;
    }
    if (_root.save.ver < 470) {
      if (_root.save.gDifficulty >= 3 && _root.save.level >= 9000) {
        _root.save.stadiumAbilityCost = 400;
      }
      _root.save.arenaEnhancerFragment += _root.save.bestLevel;
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryDesc[i].indexOf('Well, it WAS immortal') != -1) {
          _root.save.inventoryExpiry[i] = _root.systemtimenow + 604800000;
        }
        if (_root.save.inventoryDesc[i].indexOf('The more you use it,') != -1) {
          _root.save.inventoryExpiry[i] = _root.systemtimenow + 2592000000.0;
        }
        ++i;
      }
      _root.save.ver = 470;
    }
    if (_root.save.ver < 471) {
      _root.save.stadiumAbilityCost = _root.save.stadiumEnergy + _root.save.stadiumAccel + _root.save.stadiumMaxSpeed + _root.save.stadiumStartSpeed + _root.save.stadiumDash + _root.save.stadiumJump + _root.save.stadiumBoost + _root.save.stadiumReward;
      _root.save.ver = 471;
    }
    if (_root.save.ver < 472) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryDesc[i] == undefined) {
            _root.save.inventoryDesc[i] = '';
            _root.save.inventoryExpiry[i] = Infinity;
          }
        }
        ++i;
      }
      _root.save.ver = 472;
    }
    if (_root.save.ver < 473) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Sword') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Sword';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Spear') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Spear';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Polearm') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Polearm';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
        }
        ++i;
      }
      _root.save.ver = 473;
    }
    if (_root.save.ver < 475) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryBonus[i] == 'Enhancer Filter' || _root.save.inventoryBonus[i] == 'Enhancer Level' || _root.save.inventoryBonus[i] == 'Enhancer Rarity') {
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
        }
        _root.save.ver = 475;
        ++i;
      }
    }
    if (_root.save.ver < 476) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryNoFuse[i] == false && _root.save.inventoryDesc[i].indexOf('Fused Item') != -1) {
          _root.save.inventoryNoFuse[i] = true;
          TFP = _root.save.inventoryAttack[i] + _root.save.inventoryDefense[i] * 1.6 - _root.save.inventoryEnhance[i] * 50;
          if (TFP >= 600) {
            _root.save.inventorySell[i] = Math.floor(_root.save.inventorySell[i] * 5);
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
          }
        }
        ++i;
      }
      _root.save.ver = 476;
    }
    if (_root.save.ver < 480) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Triangle Gem') {
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryEnhance[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 480;
    }
    if (_root.save.ver < 482) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Immortal Pendant') {
          _root.save.inventoryNoBonus[i] = false;
        }
        ++i;
      }
      _root.save.ver = 482;
    }
    if (_root.save.ver < 486) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryAttack[i] += 25;
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%\n\nWhen equipped with Fairy Godmother Armor (5 pieces): Potion Efficiency +500%, Spawn Rate +30%';
          }
          if (_root.save.inventoryBonusPow[i] >= 7000 || _root.save.inventoryAttack[i] >= 3100 || _root.save.inventoryDefense[i] >= 1900 || _root.save.inventoryCrit[i] >= 250 || _root.save.inventoryDexterity[i] >= 250 || _root.save.inventoryHealth[i] >= 250) {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
          }
          if (_root.save.inventoryType[i] == 'Enhancer') {
            if (_root.save.inventorySubtype[i] == 'Weapon Attack Enhancer' && _root.save.inventoryAttack[i] >= 56 && _root.save.inventoryName[i] != 'Relic') {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Attack Enhancer' && _root.save.inventoryAttack[i] >= 23) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Speed Enhancer' && _root.save.inventoryAttack[i] >= 4) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Speed Enhancer' && _root.save.inventoryAttack[i] >= 4) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Defense Enhancer' && _root.save.inventoryAttack[i] >= 100) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Defense Enhancer' && _root.save.inventoryAttack[i] >= 34) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Critical Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Critical Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Dexterity Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Dexterity Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Health Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Health Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Mystery Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Mystery Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Accessory Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
          }
        }
        ++i;
      }
      _root.save.ver = 486;
    }
    if (_root.save.ver < 487) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Alien Core') {
            _root.save.inventoryNoLife[i] = false;
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 487;
    }
    if (_root.save.ver < 489) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryAttack[i] += 25;
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%\n\nWhen equipped with Fairy Godmother Armor (5 pieces): Potion Efficiency +500%, Spawn Rate +40%';
          }
          if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
            _root.save.inventoryDefense[i] += 15;
            _root.save.inventoryBonusPow[i] += 30;
          }
        }
        ++i;
      }
      _root.save.ver = 489;
    }
    if (_root.save.ver < 489) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Pure Darkness Hat') {
            _root.save.inventoryHealth[i] += 6;
            _root.save.inventoryDefense[i] += 40;
          } else {
            if (_root.save.inventoryName[i] == 'Crimson Hat') {
              _root.save.inventorySpeed[i] += 1;
              _root.save.inventoryHealth[i] += 15;
              _root.save.inventoryDefense[i] += 80;
            } else {
              if (_root.save.inventoryName[i] == 'Pure Darkness Shoes') {
                _root.save.inventoryDexterity[i] += 6;
                _root.save.inventoryDefense[i] += 40;
              } else {
                if (_root.save.inventoryName[i] == 'Crimson Shoes') {
                  _root.save.inventorySpeed[i] += 1;
                  _root.save.inventoryDexterity[i] += 15;
                  _root.save.inventoryDefense[i] += 80;
                } else {
                  if (_root.save.inventoryName[i].indexOf('Pure Darkness') != -1) {
                    _root.save.inventoryCrit[i] += 6;
                    _root.save.inventoryDefense[i] += 40;
                  } else {
                    if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
                      _root.save.inventorySpeed[i] += 1;
                      _root.save.inventoryCrit[i] += 15;
                      _root.save.inventoryDefense[i] += 80;
                    } else {
                      if (_root.save.inventoryName[i].indexOf('Berserker') != -1) {
                        _root.save.inventoryDefense[i] += 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 490;
    }
    if (_root.save.ver < 491) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryDefense[i] += 20;
          } else {
            if (_root.save.inventoryName[i].indexOf('Epic') != -1 && _root.save.inventoryName[i].indexOf('Staff') != -1 && _root.save.inventoryReqRank[i] < 500) {
              _root.save.inventoryReqRank[i] = (_root.save.inventoryReqRank[i] - 200) * 10 + 200;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 491;
    }
    if (_root.save.ver < 492) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryDefense[i] += 20;
          } else {
            if (_root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
              if (_root.save.inventoryReqRank[i] < 500) {
                _root.save.inventoryReqRank[i] = (_root.save.inventoryReqRank[i] - 200) * 10 + 200;
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 492;
    }
    if (_root.save.ver < 493) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryReqRank[i] > 500) {
            _root.save.inventoryReqRank[i] = 500;
          }
        }
        ++i;
      }
      _root.save.ver = 493;
    }
    if (_root.save.ver < 494) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Epic') != -1 && _root.save.inventoryName[i].indexOf('Staff') != -1) {
            if (_root.save.inventoryReqRank[i] > _root.save.arenaLevel) {
              _root.save.inventoryReqRank[i] = _root.save.arenaLevel;
            }
          } else {
            if (_root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
              if (_root.save.inventoryReqRank[i] > _root.save.arenaLevel) {
                _root.save.inventoryReqRank[i] = _root.save.arenaLevel;
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 494;
    }
    if (_root.save.ver < 495) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Special Loot Magnet') {
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryNoLife[i] = false;
            _root.save.inventoryDesc[i] = 'A one-of-a-kind Loot Magnet awarded for winning an auction. Now to place it in the Storage and never use it.';
          }
        }
        ++i;
      }
      _root.save.ver = 495;
    }
    if (_root.save.ver < 497) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Dark Ruler') {
            _root.save.inventoryAttack[i] += 1705;
            if (_root.save.inventoryAttack[i] > 3000) {
              _root.save.inventoryAttack[i] = 3000;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 497;
    }
    if (_root.save.ver < 499) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] != 1) {
          delete _root.save.inventoryExpiry[i];
        }
        ++i;
      }
      _root.save.ver = 499;
    }
    if (_root.save.ver < 500) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryReqRank[i] < 0 && !isNaN(_root.save.inventoryReqRank[i])) {
          _root.save.inventoryReqRank[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 500;
    }
    if (_root.save.ver < 502) {
      _root.save.dominatorBonus = 0;
      i = 1;
      while (i <= 1337) {
        _root.save.inventorySell[i] = Math.floor(_root.save.inventorySell[i] * 4);
        if (_root.save.inventoryReqRank[i] < 0 && !isNaN(_root.save.inventoryReqRank[i])) {
          _root.save.inventoryReqRank[i] = 1;
        }
        if (_root.save.inventoryMoreBonus[i] == 'Pixel / Loot' || _root.save.inventoryMoreBonus[i] == 'Material / Loot') {
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Dominator Gem') {
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventorySpirit[i] = false;
          if (g2ku != true) {
            g2ku = true;
            _root.save.arenaUnobtainium += 2000;
          }
        }
        if (_root.save.inventoryName[i] == 'Dominator Gem' && _root.save.inventoryDefense[i] > 81) {
          _root.save.dominatorBonus += _root.save.inventoryDefense[i] - 81;
          _root.save.inventoryDefense[i] = 81;
        }
        if (_root.save.inventoryExist[i] != 1) {
          delete _root.save.inventoryExpiry[i];
        }
        if (_root.save.inventoryName[i] == 'Hero Sword') {
          _root.save.inventoryBonusPow[i] -= 50;
        }
        if (_root.save.inventoryName[i] == 'Triangle Sword') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Legendary Sword') {
          _root.save.inventoryBonusPow[i] -= 150;
        }
        if (_root.save.inventoryName[i] == 'Spirit Sword') {
          _root.save.inventoryBonusPow[i] -= 500;
        }
        if (_root.save.inventoryName[i] == 'Advanced Fire Gun') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Advanced Water Gun') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Glaive') {
          _root.save.inventoryBonusPow[i] -= 10;
        }
        if (_root.save.inventoryName[i] == 'Guisarme') {
          _root.save.inventoryBonusPow[i] -= 20;
        }
        if (_root.save.inventoryName[i] == 'Longspear') {
          _root.save.inventoryBonusPow[i] -= 30;
        }
        if (_root.save.inventoryName[i] == 'Lucerne Hammer') {
          _root.save.inventoryBonusPow[i] -= 40;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Guisarme') {
          _root.save.inventoryBonusPow[i] -= 50;
        }
        if (_root.save.inventoryName[i] == 'Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 60;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 70;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Glaive-Glaive-Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 80;
        }
        if (_root.save.inventoryName[i] == 'Greatsword') {
          _root.save.inventoryBonusPow[i] -= 90;
          _root.save.inventoryAttack[i] += 30;
        }
        if (_root.save.inventoryName[i] == 'Greatersword') {
          _root.save.inventoryBonusPow[i] -= 100;
          _root.save.inventoryAttack[i] += 30;
        }
        if (_root.save.inventoryName[i] == 'Mystic Bow') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Mystic Crossbow') {
          _root.save.inventoryBonusPow[i] -= 110;
        }
        if (_root.save.inventoryName[i] == 'Slingshot') {
          _root.save.inventoryBonusPow[i] -= 120;
        }
        if (_root.save.inventoryName[i] == 'Oversized Slingshot') {
          _root.save.inventoryBonusPow[i] -= 130;
        }
        if (_root.save.inventoryName[i] == 'Cannon') {
          _root.save.inventoryBonusPow[i] -= 140;
        }
        if (_root.save.inventoryName[i] == 'Gold Cannon') {
          _root.save.inventoryBonusPow[i] -= 150;
        }
        if (_root.save.inventoryName[i] == 'Premium Sword (1)' || _root.save.inventoryName[i] == 'Premium Sword (2)' || _root.save.inventoryName[i] == 'Premium Sword (3)' || _root.save.inventoryName[i] == 'Cursed Sword (1)' || _root.save.inventoryName[i] == 'Cursed Sword (2)' || _root.save.inventoryName[i] == 'Cursed Sword (3)') {
          _root.save.inventoryBonusPow[i] -= 66;
        }
        if (_root.save.inventoryName[i] == 'Elite Hat' || _root.save.inventoryName[i] == 'Elite Shirt' || _root.save.inventoryName[i] == 'Elite Gloves' || _root.save.inventoryName[i] == 'Elite Pants' || _root.save.inventoryName[i] == 'Elite Shoes') {
          _root.save.inventoryBonusPow[i] -= 60;
        }
        if (_root.save.inventoryName[i] == 'Defensive Hat' || _root.save.inventoryName[i] == 'Defensive Shirt' || _root.save.inventoryName[i] == 'Defensive Gloves' || _root.save.inventoryName[i] == 'Defensive Pants' || _root.save.inventoryName[i] == 'Defensive Shoes') {
          _root.save.inventoryBonusPow[i] -= 30;
          _root.save.inventoryDefense[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Pure Darkness Hat' || _root.save.inventoryName[i] == 'Pure Darkness Shirt' || _root.save.inventoryName[i] == 'Pure Darkness Gloves' || _root.save.inventoryName[i] == 'Pure Darkness Pants' || _root.save.inventoryName[i] == 'Pure Darkness Shoes') {
          _root.save.inventoryBonusPow[i] -= 60;
          _root.save.inventoryDefense[i] += 20;
        }
        if (_root.save.inventoryName[i] == 'Crimson Hat' || _root.save.inventoryName[i] == 'Crimson Shirt' || _root.save.inventoryName[i] == 'Crimson Gloves' || _root.save.inventoryName[i] == 'Crimson Pants' || _root.save.inventoryName[i] == 'Crimson Shoes') {
          _root.save.inventoryBonusPow[i] -= 120;
          _root.save.inventoryDefense[i] += 40;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
          _root.save.inventoryEnhance[i] -= 1;
        }
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1 && _root.save.inventoryType[i] == 'Weapon') {
          _root.save.inventoryUnob[i] = 20;
          _root.save.inventoryDesc[i] = 'When equipped with Meteoric Armor (5 pieces): Spawn Rate +70%';
        }
        ++i;
      }
      if (_root.save.dominatorBonus > 1800) {
        _root.save.dominatorBonus = 1800;
      }
      _root.save.ver = 502;
    }
    if (_root.save.ver < 503) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1 && _root.save.inventoryType[i] == 'Weapon') {
          _root.save.inventoryUnob[i] = 20;
          _root.save.inventoryDesc[i] = 'When equipped with Meteoric Armor (5 pieces): Spawn Rate +70%';
        }
        ++i;
      }
      _root.save.ver = 503;
    }
    if (_root.save.ver < 504) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Newbie Shirt') {
          _root.save.inventorySubtype[i] = 'Shirt';
        }
        if (_root.save.inventoryName[i] == 'Newbie Gloves') {
          _root.save.inventorySubtype[i] = 'Gloves';
        }
        if (_root.save.inventoryName[i] == 'Newbie Pants') {
          _root.save.inventorySubtype[i] = 'Pants';
        }
        if (_root.save.inventoryName[i] == 'Newbie Shoes') {
          _root.save.inventorySubtype[i] = 'Shoes';
        }
        ++i;
      }
      _root.save.ver = 504;
    }
    if (_root.save.ver < 505) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Dominator Gem') {
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventorySpirit[i] = false;
          if (_root.save.inventoryDefense[i] > 81) {
            _root.save.dominatorBonus += _root.save.inventoryDefense[i] - 81;
            _root.save.inventoryDefense[i] = 81;
          }
        }
        ++i;
      }
      _root.save.ver = 505;
    }
    if (_root.save.ver < 506) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Constancy') {
          _root.save.inventoryExpTNL[i] = 25000;
        }
        ++i;
      }
      _root.save.ver = 506;
    }
    if (_root.save.ver < 509) {
      _root.save.rankedPong = _root.save.highPong;
      _root.save.rankedAvoidance = _root.save.highAvoidance;
      _root.save.rankedMath = _root.save.highMath;
      _root.save.rankedWhack = _root.save.highWhack;
      _root.save.rankedMind = _root.save.highMind;
      _root.save.rankedBalance = _root.save.highBalance;
      _root.save.rankedCount = _root.save.highCount;
      i = 1;
      while (i <= 40) {
        _root.save.unrankedPower[i] = 0;
        ++i;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Meteoric Axe') {
          _root.save.inventoryAttack[i] += 25;
          _root.save.inventoryCrit[i] += 12;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Sword') {
          _root.save.inventoryCrit[i] += 10;
          _root.save.inventoryDexterity[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Cleaver') {
          _root.save.inventorySpeed[i] += 2;
          _root.save.inventoryCrit[i] += 7;
          _root.save.inventoryDexterity[i] += 15;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Glaive') {
          _root.save.inventoryAttack[i] += 50;
          _root.save.inventoryCrit[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Scythe') {
          _root.save.inventoryAttack[i] += 25;
          _root.save.inventoryHealth[i] += 20;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Voulge') {
          _root.save.inventoryAttack[i] += 25;
        }
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +200%, Spawn Rate +10%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +225%, Spawn Rate +15%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +250%, Spawn Rate +25%\n\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Pirate Sword') {
          _root.save.inventoryDesc[i] = 'A Pirate Sword. It allows you to get extra Coins and Pixels as you damage the monsters - the higher level the Pirate Sword gets, the more Coins and Pixels you get. The worst part is that before you attack, you must shout the skill name in pirate language. That\'s why you attack so slowly with this.';
          if (_root.save.inventoryLevel[i] == 300) {
            _root.save.inventorySpeed[i] += 3;
            _root.save.inventoryDesc[i] = 'Congratulations! You have mastered the pirate language (for this particular sword, at least), and as a result, you can attack twice as fast with this Pirate Sword equipped!';
          }
        }
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryBonusPow[i] += _root.save.inventoryReqRank[i] - 1;
          if (_root.save.inventoryReqRank[i] == 500) {
            _root.save.inventoryBonusPow[i] += 250;
          }
        }
        ++i;
      }
      _root.save.ver = 509;
    }
    if (_root.save.ver < 511) {
      if (_root.save.arenaLevel >= 3) {
        i = 2;
        while (i <= _root.save.arenaLevel) {
          _root.save.arenaPixel += 100 * i * i;
          _root.save.arenaCraft += 10 * i * i;
          ++i;
        }
      }
      _root.save.ver = 511;
    }
    if (_root.save.ver < 512) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryGuard[i] = false;
        }
        if (_root.save.inventoryName[i] == 'Gem of Constancy') {
          _root.save.inventoryDesc[i] = 'This gem gets more and more powerful as you fight with it equipped, but whenever you equip or unequip an item (including the Gem of Constancy itself), it will go back to its original state. Rumor says that something will happen when it reaches level 500...\n\nSpawn Rate +5% per piece of Finalized equipment equipped.';
        }
        ++i;
      }
      _root.save.ver = 512;
    }
    if (_root.save.ver < 513) {
      if (_root.save.fcgLevel > 200) {
        _root.save.fcgLevel = 200;
      }
      _root.save.ver = 513;
    }
    if (_root.save.ver < 514) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == '(MYSTERIOUS ITEM)') {
          _root.save.inventoryEnhance[i] = 10;
          if (_root.save.inventoryNoFuse[i] == true) {
            _root.save.inventoryExpiry[i] = 0;
          } else {
            _root.save.inventoryNoFuse[i] = true;
          }
        }
        ++i;
      }
      _root.save.ver = 514;
    }
    if (_root.save.ver < 515) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS GLOVES') {
          _root.save.inventoryDexterity[i] += 50;
        }
        ++i;
      }
      _root.save.ver = 515;
    }
    if (_root.save.ver < 517) {
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.ver = 517;
    }
    if (_root.save.ver < 518) {
      if (_root.save.eventToken < 0) {
        _root.save.eventToken += 500;
      }
      _root.save.ver = 518;
    }
    if (_root.save.ver < 519) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Ghost Shoes' && _root.save.inventoryEnhance[i] > 0) {
          _root.save.inventoryAttack[i] = 27;
          _root.save.inventorySpeed[i] = 7;
          _root.save.inventoryDefense[i] = 900;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 100;
          _root.save.inventoryHealth[i] = 0;
          _root.save.inventoryEnhance[i] = 11;
          _root.save.inventoryBonusPow[i] = 114;
          _root.save.inventorySpirit[i] = true;
        }
        ++i;
      }
      _root.save.ver = 519;
    }
    if (_root.save.ver < 520) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1) {
          _root.save.inventoryExpTNL[i] = 90000000;
        }
        if (_root.save.inventoryName[i].indexOf('Ghost') != -1 && _root.save.inventoryType[i] == 'Armor') {
          _root.save.inventoryDefense[i] += 200;
        }
        if (_root.save.inventoryName[i] == 'Empowering Gem') {
          _root.save.inventoryDesc[i] += 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!\n\nWhen equipped with a Rank 200+ weapon: Damage +50%';
        }
        ++i;
      }
      _root.save.ver = 520;
    }
    if (_root.save.ver < 521) {
      _root.save.arenaSkillMax[6] = 1;
      _root.save.arenaSkillMax[7] = 1;
      _root.save.arenaSkillMax[8] = 1;
      _root.save.ver = 521;
    }
    if (_root.save.ver < 522) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Empowering Gem') {
          _root.save.inventoryDesc[i] = 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!\n\nWhen equipped with a Rank 200+ weapon: Damage +50%';
        }
        ++i;
      }
      _root.save.ver = 522;
    }
    if (_root.save.ver < 523) {
      if (_root.save.anniversary3Deal2 == true) {
        _root.save.mysteryBox[6] += 3;
      }
      _root.save.ver = 523;
    }
    if (_root.save.ver < 524) {
      if (_root.save.mainQuestRank[520] == 4) {
        _root.save.mainQuestS -= 1;
        _root.save.mainQuestA -= 1;
        _root.save.mainQuestB -= 1;
        _root.save.mainQuestC -= 1;
      } else {
        if (_root.save.mainQuestRank[520] == 3) {
          _root.save.mainQuestA -= 1;
          _root.save.mainQuestB -= 1;
          _root.save.mainQuestC -= 1;
        } else {
          if (_root.save.mainQuestRank[520] == 2) {
            _root.save.mainQuestB -= 1;
            _root.save.mainQuestC -= 1;
          } else {
            if (_root.save.mainQuestRank[520] == 1) {
              _root.save.mainQuestC -= 1;
            }
          }
        }
      }
      _root.save.ver = 524;
    }
    if (_root.save.ver < 525) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryReqRank[i] >= 450) {
          if (_root.save.inventorySell[i] == '' || _root.save.inventoryName[i].length <= 2) {
            _root.save.inventorySell[i] = _root.save.inventoryExpiry[i];
            if (isNaN(_root.save.inventorySell[i])) {
              _root.save.inventorySell[i] = 4000000;
            }
            _root.save.inventoryExpiry[i] = _root.save.inventoryNoBonus[i];
            if (isNaN(_root.save.inventoryExpiry[i])) {
              _root.save.inventoryExpiry[i] = Infinity;
            }
            _root.save.inventoryNoBonus[i] = _root.save.inventoryNoLife[i];
            _root.save.inventoryNoLife[i] = _root.save.inventoryNoFuse[i];
            _root.save.inventoryNoFuse[i] = false;
            _root.save.inventoryNoUnique[i] = false;
            _root.save.inventorySpirit[i] = false;
            _root.save.inventoryUnob[i] = _root.save.inventoryName[i];
            if (isNaN(_root.save.inventoryUnob[i])) {
              _root.save.inventoryUnob[i] = 0;
            }
            if (_root.save.inventoryReqRank[i] >= 550) {
              tempName = 'Dress';
            } else {
              tempName = 'Samurai';
            }
            _root.save.inventoryName[i] = tempName + ' ' + _root.save.inventorySubtype[i];
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 525;
    }
    if (_root.save.ver < 526) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Samurai') != -1 || _root.save.inventoryName[i].indexOf('Dress') != -1) {
          _root.save.inventorySell[i] = 5000000;
        }
        ++i;
      }
      _root.save.ver = 526;
    }
    if (_root.save.ver < 527) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventorySubtype[i] == 'Shoes' && _root.save.inventoryFrame[i] == 150) {
          if (_root.save.inventorySell[i] == '' || _root.save.inventoryName[i].length <= 2) {
            _root.save.inventorySell[i] = 0;
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryNoBonus[i] = _root.save.inventoryNoLife[i];
            _root.save.inventoryNoLife[i] = _root.save.inventoryNoFuse[i];
            if (_root.save.inventoryNoFuse[i] == true) {
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryNoLife[i] = false;
            }
            _root.save.inventoryNoFuse[i] = false;
            _root.save.inventoryNoUnique[i] = false;
            _root.save.inventorySpirit[i] = false;
            _root.save.inventoryUnob[i] = _root.save.inventoryName[i];
            if (isNaN(_root.save.inventoryUnob[i])) {
              _root.save.inventoryUnob[i] = 0;
            }
            _root.save.inventoryName[i] = 'Knightmare Shoes';
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 527;
    }
    if (_root.save.ver < 528) {
      if (_root.save.printerCharge > 400) {
        if (_root.save.printerCharge > 5000000) {
          _root.save.printerCharge = 5000000;
        }
        _root.save.mysteryBox[4] += Math.floor(_root.save.printerCharge / 10000);
        _root.save.printerCharge = 400;
      }
      _root.save.ver = 528;
    }
    if (_root.save.ver < 529) {
      _root.save.arcade100kMedal = Math.ceil(_root.save.arcade100kMedal / 2);
      _root.save.ver = 529;
    }
    if (_root.save.ver < 530) {
      _root.save.pirateSwordPenalty = 0;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Pirate Sword' && _root.save.inventoryLevel[i] == 9999) {
          _root.save.pirateSwordPenalty += _root.save.inventoryExp[i] * 10;
        }
        ++i;
      }
      if (_root.save.pirateSwordPenalty > 6500000000.0) {
        _root.save.pirateSwordPenalty = 6500000000.0;
      }
      _root.save.ver = 530;
    }
    if (_root.save.ver < 533) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Crystal ') != -1) {
          _root.save.inventoryDefense[i] += _root.save.inventoryReqRank[i] - 400;
          _root.save.inventoryBonusPow[i] += _root.save.inventoryReqRank[i] * 2 - 1000;
        }
        ++i;
      }
      _root.save.ver = 533;
    }
    if (_root.save.ver < 535) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Crystal ') != -1) {
          if (_root.save.inventoryLevel[i] == 9999) {
            _root.save.inventoryCrit[i] -= 24;
            _root.save.inventoryDexterity[i] -= 24;
            _root.save.inventoryHealth[i] -= 24;
            _root.save.inventoryDefense[i] -= 120;
          } else {
            _root.save.inventoryCrit[i] -= 20;
            _root.save.inventoryDexterity[i] -= 20;
            _root.save.inventoryHealth[i] -= 20;
            _root.save.inventoryDefense[i] -= 100;
          }
          _root.save.inventoryDesc[i] = 'When equipped with a Mining Tool: Drop Rate +50%, Spawn Rate +15%\n\nDropped by: Secret Crystal';
        }
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryEnhance[i] = 1;
          _root.save.inventoryCrit[i] = 5;
          _root.save.inventoryDexterity[i] = 5;
          _root.save.inventoryHealth[i] = 5;
          _root.save.inventoryReqRank[i] = 10;
          _root.save.inventoryBonusPow[i] -= 600;
        }
        ++i;
      }
      _root.save.ver = 535;
    }
    if (_root.save.ver < 537) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Yellow Madness Gem') {
          _root.save.inventoryDesc[i] = 'With this, you no longer suffer a 10% EXP penalty when fighting yellow-named monsters! It also increases your EXP gain rate and makes rare monsters more likely to appear! Isn\'t it awesome?';
        }
        if (_root.save.inventoryType[i] == 'Outfit') {
          if (_root.save.inventoryName[i] == 'Transparent Earrings' || _root.save.inventoryName[i] == 'Yellow Skin' || _root.save.inventoryName[i] == 'Invisible Skin') {
            _root.save.inventoryBonusPow[i] = 16;
          } else {
            _root.save.inventoryBonusPow[i] = 706;
          }
        }
        ++i;
      }
      _root.save.ver = 537;
    }
    if (_root.save.ver < 539) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Ghost Hat' || _root.save.inventoryName[i] == 'Ghost Shirt' || _root.save.inventoryName[i] == 'Ghost Gloves' || _root.save.inventoryName[i] == 'Ghost Pants' || _root.save.inventoryName[i] == 'Ghost Shoes') {
          _root.save.inventoryAttack[i] += 60;
          _root.save.inventorySpeed[i] += 3;
          _root.save.inventoryCrit[i] += 20;
          _root.save.inventoryDexterity[i] += 20;
          _root.save.inventoryHealth[i] += 20;
        }
        if (_root.save.inventoryName[i].indexOf('Elm') != -1) {
          _root.save.inventoryEnhance[i] -= 1;
        }
        ++i;
      }
      _root.save.ver = 539;
    }
    if (_root.save.ver < 543) {
      _root.save.ripoffCard[1] += _root.save.ripoffCard[2] * 3;
      _root.save.ripoffCard[3] += _root.save.ripoffCard[4] * 3;
      _root.save.ripoffCard[4] = 0;
      speedrunRefund = _root.save.speedRunCoin * 10;
      if (speedrunRefund > 200000) {
        speedrunRefund = 200000;
      }
      if (isNaN(speedrunRefund) || speedrunRefund < 0) {
        speedrunRefund = 0;
      }
      _root.save.eventToken += speedrunRefund;
      _root.save.ver = 543;
    }
    if (_root.save.ver < 544) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Success Enhancer' || _root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
          _root.save.eventToken += 100;
        }
        ++i;
      }
      _root.save.ver = 544;
    }
    if (_root.save.ver < 545) {
      if (_root.save.serviceRewardBot == true) {
        _root.save.ripoffCard[5] += 1;
      }
      if (_root.save.serviceAutoHarvest == true) {
        _root.save.ripoffCard[6] += 1;
      }
      if (_root.save.serviceDemandMaster == true) {
        _root.save.ripoffCard[11] += 1;
      }
      if (_root.save.serviceQuickAdventures == true) {
        _root.save.ripoffCard[12] += 1;
      }
      _root.save.ver = 545;
    }
    if (_root.save.ver < 546) {
      if (_root.save.serviceBatteryCharger == true) {
        _root.save.ripoffCard[8] += 1;
      }
      _root.save.ver = 546;
    }
    if (_root.save.ver < 547) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Worst Moon Gem' && _root.save.inventoryNoLife[i] == false) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 547;
    }
    if (_root.save.ver < 548) {
      _root.save.mysteryBox[3] += _root.save.arenaFreeReset;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryLevel[i] < 9999 && _root.save.inventoryNoLife[i] == false) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        if (_root.save.inventoryNoLife[i] != undefined) {
          delete _root.save.inventoryNoLife[i];
        }
        if (_root.save.inventoryExist[i] == undefined || _root.save.inventoryExist[i] != 1 || _root.save.inventoryName[i] == undefined || _root.save.inventorySubtype[i] == 'Weapon Lifespan Extender' || _root.save.inventorySubtype[i] == 'Armor Lifespan Extender' || _root.save.inventorySubtype[i] == 'Accessory Lifespan Extender' || _root.save.inventorySubtype[i] == 'Enhancer Success Enhancer' || _root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
          if (_root.save.inventoryExist[i] != undefined) {
            _root.save.inventoryExist[i] = 0;
          }
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 548;
    }
    if (_root.save.ver < 550) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!' && _root.save.inventoryEnhance[i] > 5) {
          _root.save.inventoryEnhance[i] = 5;
          _root.save.inventoryLevel[i] = 5;
          _root.save.inventoryMaxLevel[i] = 5;
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Anti-Nerfer') {
          if (_root.save.inventoryExist[i] != undefined) {
            _root.save.inventoryExist[i] = 0;
          }
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 550;
    }
    if (_root.save.ver < 551) {
      i = 0;
      while (i <= 66) {
        if (isNaN(_root.save.arenaSkill[i])) {
          _root.save.arenaSkill[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 551;
    }
    if (_root.save.ver < 552) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryReqRank[i] = _root.save.inventoryEnhance[i] * 10;
        }
        ++i;
      }
      _root.save.ver = 552;
    }
    if (_root.save.ver < 553) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Loot Magnet') {
          _root.save.inventoryAttack[i] = 1200;
        }
        ++i;
      }
      _root.save.ver = 553;
    }
    if (_root.save.ver < 554) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Neon Skin' && _root.save.inventoryUnob[i] == 6) {
          _root.save.inventoryUnob[i] = 7;
        }
        ++i;
      }
      _root.save.ver = 554;
    }
    if (_root.save.ver < 555) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
          _root.save.inventoryUnob[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 555;
    }
    if (_root.save.ver < 556) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
          _root.save.inventoryUnob[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 556;
    }
    if (_root.save.ver < 557) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Newbie Fighter') {
          _root.save.inventoryAttack[i] = 5;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Fighter') {
          _root.save.inventoryAttack[i] = 10;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Veteran Fighter') {
          _root.save.inventoryAttack[i] = 15;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Heroic Fighter') {
          _root.save.inventoryAttack[i] = 20;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Elite Fighter') {
          _root.save.inventoryAttack[i] = 25;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Master Fighter') {
          _root.save.inventoryAttack[i] = 30;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Ultimate Fighter') {
          _root.save.inventoryAttack[i] = 35;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryAttack[i] = 40;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Combo King') {
          _root.save.inventoryBonus[i] = '';
          _root.save.inventoryAbility[i] = 'Double Hit Chance';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bestiary Master') {
          _root.save.inventoryDexterity[i] = 10;
          _root.save.inventoryHealth[i] = 10;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bestiary King') {
          _root.save.inventoryDexterity[i] = 15;
          _root.save.inventoryHealth[i] = 15;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Mad Scientist') {
          _root.save.inventoryDexterity[i] = 20;
          _root.save.inventoryHealth[i] = 20;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'THE BESTiary') {
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bottomless Bag') {
          _root.save.inventoryHealth[i] = 30;
          _root.save.inventoryBonus[i] = 'Drop Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Novice Tamer') {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Veteran Tamer') {
          _root.save.inventoryCrit[i] = 15;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Master Tamer') {
          _root.save.inventoryCrit[i] = 20;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Legendary Tamer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Novice Trainer') {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryHealth[i] = 10;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Veteran Trainer') {
          _root.save.inventoryCrit[i] = 15;
          _root.save.inventoryHealth[i] = 15;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Master Trainer') {
          _root.save.inventoryCrit[i] = 20;
          _root.save.inventoryHealth[i] = 20;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Legendary Trainer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryHealth[i] = 25;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i].indexOf('of Loot') == true) {
          if (_root.save.inventoryLevel[i] == 9999) {
            _root.save.inventoryCrit[i] -= 6;
            _root.save.inventoryDexterity[i] -= 6;
            _root.save.inventoryHealth[i] -= 6;
          } else {
            _root.save.inventoryCrit[i] -= 5;
            _root.save.inventoryDexterity[i] -= 5;
            _root.save.inventoryHealth[i] -= 5;
          }
        }
        ++i;
      }
      _root.save.ver = 557;
    }
    if (_root.save.ver < 558) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == undefined) {
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 558;
    }
    if (_root.save.ver < 559) {
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.ver = 559;
    }
    if (_root.save.ver < 560) {
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.ver = 560;
    }
    if (_root.save.ver < 561) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor') {
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            _root.save.inventoryEnhance[i] -= 1;
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryAttack[i] += 24;
              _root.save.inventoryCrit[i] += 24;
              _root.save.inventoryDexterity[i] += 24;
              _root.save.inventoryHealth[i] += 24;
            } else {
              _root.save.inventoryAttack[i] += 20;
              _root.save.inventoryCrit[i] += 20;
              _root.save.inventoryDexterity[i] += 20;
              _root.save.inventoryHealth[i] += 20;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 561;
    }
    if (_root.save.ver < 562) {
      if (_root.save.gDifficulty >= 3) {
        _root.save.arenaAttack = 90000;
        _root.save.arenaDefense = 90000;
        _root.save.arenaMaxHealth = 900000;
        _root.save.arenaMaxMana = 360000;
        _root.save.arenaAccuracy = 18000;
        _root.save.arenaEvasion = 18000;
        _root.save.arenaPixel += _root.save.bankArenaPixel;
        _root.save.arenaCraft += _root.save.bankArenaCraft;
      }
      _root.save.ver = 562;
    }
    if (_root.save.ver < 563) {
      hadHB = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1) {
          hadHB = true;
        }
        ++i;
      }
      if (hadHB == true) {
        _root.save.arenaPixel += 20000000000.0;
        _root.save.arenaCraft += 4000000000.0;
      }
      _root.save.ver = 563;
    }
    if (_root.save.ver < 564) {
      hadHB = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryExist[i] == 1) {
          hadHB = true;
        }
        ++i;
      }
      if (hadHB == false) {
        _root.save.arenaPixel -= 20000000000.0;
        _root.save.arenaCraft -= 4000000000.0;
      }
      if (_root.save.arenaPixel < 0) {
        _root.save.arenaPixel *= 4;
      }
      if (_root.save.arenaCraft < 0) {
        _root.save.arenaCraft *= 4;
      }
      _root.save.ver = 564;
    }
    if (_root.save.ver < 566) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Collector\'s Pendant') {
          _root.save.inventoryEnhance[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 566;
    }
    if (_root.save.ver < 570) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryReqRank[i] = 258;
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryReqRank[i] = 278;
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryReqRank[i] = 298;
        }
        ++i;
      }
      if (_root.save.arenaPixel < 0) {
        _root.save.arenaCraft += Math.floor(_root.save.arenaPixel / 20);
        _root.save.arenaPixel = 0;
      }
      _root.save.ver = 570;
    }
    if (_root.save.ver < 571) {
      if (_root.save.bestLevel >= 2) {
        _root.save.eventToken += 1500;
      }
      _root.save.ver = 571;
    }
    if (_root.save.ver < 572) {
      if (_root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
        if (_root.save.inventoryExist[i] != undefined) {
          _root.save.inventoryExist[i] = 0;
        }
        delete _root.save.inventoryName[i];
        delete _root.save.inventoryReqRank[i];
        delete _root.save.inventoryType[i];
        delete _root.save.inventorySubtype[i];
        delete _root.save.inventoryFrame[i];
        delete _root.save.inventoryRange[i];
        delete _root.save.inventoryAttack[i];
        delete _root.save.inventorySpeed[i];
        delete _root.save.inventoryDefense[i];
        delete _root.save.inventoryBonus[i];
        delete _root.save.inventoryAbility[i];
        delete _root.save.inventoryMoreBonus[i];
        delete _root.save.inventoryLevel[i];
        delete _root.save.inventoryMaxLevel[i];
        delete _root.save.inventoryExp[i];
        delete _root.save.inventoryExpTNL[i];
        delete _root.save.inventoryEnhance[i];
        delete _root.save.inventoryBonusPow[i];
        delete _root.save.inventorySell[i];
        delete _root.save.inventoryExpiry[i];
        delete _root.save.inventoryObtainTime[i];
        delete _root.save.inventoryNoBonus[i];
        delete _root.save.inventoryNoRecycle[i];
        delete _root.save.inventoryNoFuse[i];
        delete _root.save.inventoryNoUnique[i];
        delete _root.save.inventoryUnob[i];
        delete _root.save.inventorySpirit[i];
        delete _root.save.inventoryCrit[i];
        delete _root.save.inventoryDexterity[i];
        delete _root.save.inventoryHealth[i];
        delete _root.save.inventoryDesc[i];
        delete _root.save.inventoryGuard[i];
      }
      _root.save.ver = 572;
    }
    if (_root.save.ver < 574) {
      _root.save.battlePoint += Math.floor(_root.save.arenaExp / 100000000);
      _root.save.arenaExp -= _root.save.battlePoint * 100000000;
      _root.save.battlePoint += _root.save.arenaLevel;
      if (_root.save.gDifficulty >= 3) {
        _root.save.stadiumEnergy = 50;
        _root.save.stadiumAccel = 50;
        _root.save.stadiumMaxSpeed = 50;
        _root.save.stadiumStartSpeed = 50;
        _root.save.stadiumDash = 50;
        _root.save.stadiumJump = 50;
        _root.save.stadiumBoost = 50;
        _root.save.stadiumReward = 50;
        _root.save.stadiumAbilityCost = 400;
        _root.save.stadiumToken += _root.save.bankStadiumToken;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryReqRank[i] = 1;
          _root.save.inventoryUnob[i] = Math.floor(_root.save.inventoryLevel[i] / 10) + 10;
          if (_root.save.inventoryUnob[i] < 0) {
            _root.save.inventoryUnob[i] = 0;
          }
          if (_root.save.inventoryLevel[i] == 500) {
            _root.save.inventoryUnob[i] = 99;
          }
        }
        ++i;
      }
      _root.save.arenaSpookyScore = 0;
      _root.save.ver = 574;
    }
    if (_root.save.ver < 575) {
      _root.save.arenaExpExcess = _root.save.battlePoint - _root.save.arenaLevel - _root.save.bannedB * 1000;
      _root.save.ver = 575;
    }
    if (_root.save.ver < 578) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!' && _root.save.inventoryEnhance[i] > 7) {
          _root.save.inventoryEnhance[i] = 7;
          _root.save.inventoryLevel[i] = 7;
          _root.save.inventoryMaxLevel[i] = 7;
          _root.save.inventoryCrit[i] = 35;
          _root.save.inventoryDexterity[i] = 35;
          _root.save.inventoryHealth[i] = 35;
        }
        if (_root.save.inventoryName[i] == 'Anti-Nerfer') {
          _root.save.inventoryExpiry[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 578;
    }
    if (_root.save.ver < 580) {
      if (_root.save.printerLevel >= 25) {
        _root.save.coinLag += 250000 * _root.save.bestLevel;
      }
      _root.save.ver = 580;
    }
    if (_root.save.ver < 581) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryReqRank[i] = 400;
          _root.save.inventoryUnob[i] = Math.floor(_root.save.inventoryLevel[i] / 10) + 10;
        }
        ++i;
      }
      _root.save.arenaSpookyScore = 0;
      _root.save.ver = 581;
    }
    if (_root.save.ver < 582) {
      if (_root.save.arenaLevel < _root.save.inventoryReqRank[_root.save.arenaTrinket]) {
        _root.save.arenaTrinket = 0;
      }
      _root.save.ver = 582;
    }
    if (_root.save.ver < 583) {
      if (_root.save.bestLevel < 25 || _root.save.arenaAccuracy < 50) {
        _root.save.arenaMaxHealth = 500;
        _root.save.arenaMaxMana = 300;
        _root.save.arenaAttack = 100;
        _root.save.arenaDefense = 100;
        _root.save.arenaAccuracy = 50;
        _root.save.arenaEvasion = 50;
      }
      _root.save.ver = 583;
    }
    if (_root.save.ver < 585) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Outfit') {
          _root.save.inventoryReqRank[i] = 1;
        }
        if (_root.save.inventoryName[i] == 'Fighter') {
          _root.save.inventoryAttack[i] = 15;
          _root.save.inventoryDefense[i] = 15;
        }
        if (_root.save.inventoryName[i] == 'Veteran Fighter') {
          _root.save.inventoryAttack[i] = 30;
          _root.save.inventoryDefense[i] = 30;
        }
        if (_root.save.inventoryName[i] == 'Heroic Fighter') {
          _root.save.inventoryAttack[i] = 50;
          _root.save.inventoryDefense[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Elite Fighter') {
          _root.save.inventoryAttack[i] = 75;
          _root.save.inventoryDefense[i] = 75;
        }
        if (_root.save.inventoryName[i] == 'Master Fighter') {
          _root.save.inventoryAttack[i] = 105;
          _root.save.inventoryDefense[i] = 105;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Fighter') {
          _root.save.inventoryAttack[i] = 140;
          _root.save.inventoryDefense[i] = 140;
        }
        if (_root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryAttack[i] = 180;
          _root.save.inventoryDefense[i] = 180;
        }
        if (_root.save.inventoryName[i] == 'Combo King') {
          _root.save.inventorySpeed[i] = 5;
        }
        if (_root.save.inventoryName[i] == 'Bestiary King') {
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Mad Scientist') {
          _root.save.inventoryDexterity[i] = 50;
          _root.save.inventoryHealth[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'THE BESTiary') {
          _root.save.inventoryDexterity[i] = 100;
          _root.save.inventoryHealth[i] = 100;
        }
        if (_root.save.inventoryName[i] == 'Bottomless Bag') {
          _root.save.inventoryHealth[i] = 150;
        }
        if (_root.save.inventoryName[i] == 'Veteran Tamer') {
          _root.save.inventoryCrit[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Master Tamer') {
          _root.save.inventoryCrit[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Legendary Tamer') {
          _root.save.inventoryCrit[i] = 100;
        }
        if (_root.save.inventoryName[i] == 'Veteran Trainer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Master Trainer') {
          _root.save.inventoryCrit[i] = 50;
          _root.save.inventoryHealth[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Legendary Trainer') {
          _root.save.inventoryCrit[i] = 100;
          _root.save.inventoryHealth[i] = 100;
        }
        ++i;
      }
      _root.save.ver = 585;
    }
    if (_root.save.ver < 586) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
          _root.save.inventoryReqRank[i] = 300;
        }
        ++i;
      }
      _root.save.ver = 586;
    }
    if (_root.save.ver < 587) {
      _root.save.ver = 587;
    }
    if (_root.save.ver < 589) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryReqRank[i] = _root.save.inventoryEnhance[i] * 10;
          if (_root.save.inventoryReqRank[i] > 100) {
            _root.save.inventoryReqRank[i] = 100;
          }
        }
        ++i;
      }
      _root.save.ver = 589;
    }
    if (_root.save.ver < 591) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%';
          }
          if (_root.save.inventoryName[i] == 'Pure Darkness Claw') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Crimson Bow') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Censor Sword') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
            _root.save.inventoryDesc[i] = 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
            _root.save.inventoryDesc[i] = 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i] == 'Fiend Glaive') {
            _root.save.inventoryDesc[i] = 'Cannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('DOOOOOOM') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Crystal') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Hat of Loot') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Ultimate') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Weapon') {
            _root.save.inventoryDesc[i] = 'Also shoots projectiles at monsters from a far distance!';
          }
          if (_root.save.inventoryName[i] == 'Gem of Constancy') {
            _root.save.inventoryDesc[i] = 'This gem gets more and more powerful as you fight with it equipped, but whenever you unequip it, it goes back to its original state. Also, you cannot change equipment when Gem of Constancy is equipped!';
          }
          if (_root.save.inventoryName[i] == 'Empowering Gem') {
            _root.save.inventoryDesc[i] = 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!';
          }
        }
        ++i;
      }
      _root.save.ver = 591;
    }
    if (_root.save.ver < 593) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Crystal') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 593;
    }
    if (_root.save.ver < 594) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryName[i] != 'Humblebee Armor Upgrade') {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] += 12;
              _root.save.inventoryDexterity[i] += 12;
              _root.save.inventoryHealth[i] += 12;
            } else {
              _root.save.inventoryCrit[i] += 10;
              _root.save.inventoryDexterity[i] += 10;
              _root.save.inventoryHealth[i] += 10;
            }
          }
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] += 24;
              _root.save.inventoryDexterity[i] += 24;
              _root.save.inventoryHealth[i] += 24;
            } else {
              _root.save.inventoryCrit[i] += 20;
              _root.save.inventoryDexterity[i] += 20;
              _root.save.inventoryHealth[i] += 20;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 594;
    }
    if (_root.save.ver < 595) {
      if (!isNaN(_root.save.bankStadiumToken)) {
        _root.save.stadiumToken += _root.save.bankStadiumToken;
      }
      if (_root.save.bannedImpossible >= 1 && !isNaN(_root.save.stadiumTokenMax) && _root.save.stadiumToken < _root.save.stadiumTokenMax) {
        _root.save.stadiumToken = _root.save.stadiumTokenMax;
      }
      _root.save.ver = 595;
    }
    if (_root.save.ver < 596) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryName[i] != 'Humblebee Armor Upgrade') {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] -= 12;
              _root.save.inventoryDexterity[i] -= 12;
              _root.save.inventoryHealth[i] -= 12;
            } else {
              _root.save.inventoryCrit[i] -= 10;
              _root.save.inventoryDexterity[i] -= 10;
              _root.save.inventoryHealth[i] -= 10;
            }
            if (_root.save.inventoryMaxLevel[i] >= 84 && _root.save.inventoryMaxLevel[i] < 184) {
              _root.save.inventoryEnhance[i] -= 1;
            } else {
              if (_root.save.inventoryMaxLevel[i] == 9999) {
                _root.save.inventoryDefense[i] += 300;
                if (_root.save.inventoryDefense[i] > 2160) {
                  _root.save.inventoryDefense[i] = 2160;
                }
                _root.save.inventoryAttack[i] += 60;
                _root.save.inventoryDexterity[i] += 40;
                _root.save.inventoryHealth[i] += 30;
                _root.save.inventoryCrit[i] += 24;
              } else {
                if (_root.save.inventoryMaxLevel[i] >= 184) {
                  _root.save.inventoryMaxLevel[i] += 100;
                }
              }
            }
          }
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            _root.save.inventoryUnob[i] = 5;
          }
        }
        ++i;
      }
      _root.save.ver = 596;
    }
    if (_root.save.ver < 597) {
      if (isNaN(_root.save.inventoryExp[_root.save.arenaSkin])) {
        _root.save.inventoryExp[_root.save.arenaSkin] = 0;
      }
      _root.save.ver = 597;
    }
    if (_root.save.ver < 599) {
      _root.save.boostAuto = false;
      _root.save.boostMax = Math.round((_root.save.boostMax + _root.save.boostMin * 0.2) / 50) * 50;
      if (_root.save.mainQuestRank[152] == 4) {
        _root.save.mainQuestS -= 1;
        _root.save.mainQuestA -= 1;
        _root.save.mainQuestB -= 1;
        _root.save.mainQuestC -= 1;
      } else {
        if (_root.save.mainQuestRank[152] == 3) {
          _root.save.mainQuestA -= 1;
          _root.save.mainQuestB -= 1;
          _root.save.mainQuestC -= 1;
        } else {
          if (_root.save.mainQuestRank[152] == 2) {
            _root.save.mainQuestB -= 1;
            _root.save.mainQuestC -= 1;
          } else {
            if (_root.save.mainQuestRank[152] == 1) {
              _root.save.mainQuestC -= 1;
            }
          }
        }
      }
      _root.save.ver = 599;
    }
    if (_root.save.ver < 604) {
      _root.save.ver = 604;
    }
    if (_root.save.ver < 605) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventorySubtype[i] == 'Secondary Weapon') {
            _root.save.inventoryUnob[i] = 30;
          }
        }
        ++i;
      }
      _root.save.ver = 605;
    }
    if (_root.save.ver < 606) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventorySubtype[i] == 'Secondary Weapon') {
            _root.save.inventoryNoBonus[i] = true;
            if (_root.save.inventoryName[i] == 'Poison Arrows') {
              _root.save.inventoryAbility[i] = 'Poison Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Explosive Arrows') {
              _root.save.inventoryAbility[i] = 'Stun Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Mega Bullets' || _root.save.inventoryName[i] == '[Event] Mega Bullets') {
              _root.save.inventoryAbility[i] = 'Double Hit Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Master Shurikens') {
              _root.save.inventoryAbility[i] = 'Mastery';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Fire Card') {
              _root.save.inventoryBonus[i] = 'Fire Element';
              _root.save.inventoryAbility[i] = 'Poison Chance';
            }
            if (_root.save.inventoryName[i] == 'Ice Card') {
              _root.save.inventoryBonus[i] = 'Ice Element';
              _root.save.inventoryAbility[i] = 'Stun Chance';
            }
            if (_root.save.inventoryName[i] == 'Wind Card') {
              _root.save.inventoryBonus[i] = 'Wind Element';
              _root.save.inventoryAbility[i] = 'Weaken Chance';
            }
            if (_root.save.inventoryName[i] == 'Earth Card') {
              _root.save.inventoryBonus[i] = 'Earth Element';
              _root.save.inventoryAbility[i] = 'Weaken Chance';
            }
            if (_root.save.inventoryName[i] == 'Thunder Card') {
              _root.save.inventoryBonus[i] = 'Thunder Element';
              _root.save.inventoryAbility[i] = 'Stun Chance';
            }
            if (_root.save.inventoryName[i] == 'Water Card') {
              _root.save.inventoryBonus[i] = 'Water Element';
              _root.save.inventoryAbility[i] = 'Poison Chance';
            }
            if (_root.save.inventoryName[i] == 'Light Card') {
              _root.save.inventoryBonus[i] = 'Light Element';
              _root.save.inventoryAbility[i] = 'Blind Chance';
            }
            if (_root.save.inventoryName[i] == 'Dark Card') {
              _root.save.inventoryBonus[i] = 'Dark Element';
              _root.save.inventoryAbility[i] = 'Blind Chance';
            }
          }
        }
        ++i;
      }
      _root.save.ver = 606;
    }
    if (_root.save.ver < 607) {
      _root.save.deathMatchEntry = 1;
      _root.save.ver = 607;
    }
    if (_root.save.ver < 608) {
      if (_root.saveid >= 20) {
        i = 1;
        while (i <= 34) {
          if (_root.save.specialStock[i] < 5) {
            _root.save.specialStock[i] += 3;
          }
          _root.save.specialStock[1] = 1;
          _root.save.specialStock[2] = 5;
          _root.save.specialStock[27] = 1;
          _root.save.specialStock[28] = 1;
          _root.save.specialStock[29] = 1;
          _root.save.specialStock[30] = 1;
          ++i;
        }
      }
      _root.save.ver = 608;
    }
    if (_root.save.ver < 609) {
      _root.save.permaBanPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.permaStupidity = _root.save.banned;
      _root.save.permaStupidityHard = _root.save.bannedHard;
      _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      _root.save.ver = 609;
    }
    if (_root.save.ver < 613) {
      if (_root.save.speedRunMode9001 != 2147483647 && _root.save.speedRunMode9001 > 0) {
        _root.saveGlobal.challengeTime[0] = _root.save.speedRunMode9001 * 60;
        _root.saveGlobal.challengeAttempted[0] = true;
        _root.saveGlobal.challengePerfect[0] = true;
      }
      if (_root.save.fishLevel >= 30) {
        _root.save.fishLevel = 30;
        _root.save.fishScore += _root.save.fishExp * 50;
        _root.save.fishExpTotal += _root.save.fishExp;
        _root.save.fishExp = 0;
      }
      if (_root.save.gDifficulty == 3) {
        _root.save.currentExp = Math.floor(_root.save.currentExp * 2);
        _root.save.totalExp = Math.floor(_root.save.totalExp * 2);
      }
      if (_root.save.gDifficulty == 2) {
        _root.save.currentExp = Math.floor(_root.save.currentExp * 4 / 3);
        _root.save.totalExp = Math.floor(_root.save.totalExp * 4 / 3);
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Eternal Rage') {
          _root.save.inventoryDesc[i] = 'With this, you will gain 0.5% Rage every second and ignore all forms of rage depletion!';
        }
        ++i;
      }
      _root.save.ver = 613;
    }
    if (_root.save.ver < 614) {
      _root.save.whiteCoin += Math.floor(_root.save.totalPlayTime / 720);
      _root.save.ver = 614;
    }
    if (_root.save.ver < 615) {
      _root.save.arenaMaxDamage = 0;
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.raidPrehistoric = 0;
      _root.save.raidMegaboss = 0;
      _root.save.raidTower = 0;
      _root.save.raidDungeon = 0;
      _root.save.raidEndless = 0;
      _root.save.arenaRevengeScore = 0;
      _root.save.arenaTriangleScore = 0;
      _root.save.arenaTriangleToday = 0;
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.ver = 615;
    }
    if (_root.save.ver < 616) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Chaos Hat' || _root.save.inventoryName[i] == 'Chaos Shirt' || _root.save.inventoryName[i] == 'Chaos Gloves' || _root.save.inventoryName[i] == 'Chaos Pants' || _root.save.inventoryName[i] == 'Chaos Shoes' || _root.save.inventoryName[i] == 'CHAOS HAT' || _root.save.inventoryName[i] == 'CHAOS SHIRT' || _root.save.inventoryName[i] == 'CHAOS GLOVES' || _root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS PANTS' || _root.save.inventoryName[i] == 'CHAOS SHOES' || _root.save.inventoryName[i] == 'Dragon Slayer Hat' || _root.save.inventoryName[i] == 'Dragon Slayer Shirt' || _root.save.inventoryName[i] == 'Dragon Slayer Gloves' || _root.save.inventoryName[i] == 'Dragon Slayer Pants' || _root.save.inventoryName[i] == 'Dragon Slayer Shoes' || _root.save.inventoryName[i] == 'Demon Slayer Hat' || _root.save.inventoryName[i] == 'Demon Slayer Shirt' || _root.save.inventoryName[i] == 'Demon Slayer Gloves' || _root.save.inventoryName[i] == 'Demon Slayer Pants' || _root.save.inventoryName[i] == 'Demon Slayer Shoes') {
          if (_root.save.inventoryObtainTime[i] > 1385823600000.0) {
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] = 'This item has been blocked in an attempt to wipe out exploited items. If you believe your item was wrongfully blocked, please post a screenshot of the item in the forum.\n\nCODE: ' + random(999999999);
          }
        }
        ++i;
      }
      _root.save.ver = 616;
    }
    if (_root.save.ver < 617) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Chaos Hat' || _root.save.inventoryName[i] == 'Chaos Shirt' || _root.save.inventoryName[i] == 'Chaos Gloves' || _root.save.inventoryName[i] == 'Chaos Pants' || _root.save.inventoryName[i] == 'Chaos Shoes' || _root.save.inventoryName[i] == 'CHAOS HAT' || _root.save.inventoryName[i] == 'CHAOS SHIRT' || _root.save.inventoryName[i] == 'CHAOS GLOVES' || _root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS PANTS' || _root.save.inventoryName[i] == 'CHAOS SHOES' || _root.save.inventoryName[i] == 'Dragon Slayer Hat' || _root.save.inventoryName[i] == 'Dragon Slayer Shirt' || _root.save.inventoryName[i] == 'Dragon Slayer Gloves' || _root.save.inventoryName[i] == 'Dragon Slayer Pants' || _root.save.inventoryName[i] == 'Dragon Slayer Shoes' || _root.save.inventoryName[i] == 'Demon Slayer Hat' || _root.save.inventoryName[i] == 'Demon Slayer Shirt' || _root.save.inventoryName[i] == 'Demon Slayer Gloves' || _root.save.inventoryName[i] == 'Demon Slayer Pants' || _root.save.inventoryName[i] == 'Demon Slayer Shoes') {
          if (_root.save.inventoryObtainTime[i] > 1385823600000.0) {
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] = 'This item has been blocked in an attempt to wipe out exploited items. If you believe your item was wrongfully blocked, please post a screenshot of the item in the forum.\n\nCODE: ' + random(999999999);
          }
        }
        ++i;
      }
      _root.save.ver = 617;
    }
    if (_root.save.ver < 619) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExpiry[i] == 0 && _root.save.inventoryObtainTime[i] > 1385823600000.0 && _root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('617523110') != -1 || _root.save.inventoryDesc[i].indexOf('673811149') != -1 || _root.save.inventoryDesc[i].indexOf('253011004') != -1 || _root.save.inventoryDesc[i].indexOf('536365965') != -1 || _root.save.inventoryDesc[i].indexOf('479591647') != -1 || _root.save.inventoryDesc[i].indexOf('71140877') != -1 || _root.save.inventoryDesc[i].indexOf('59063432') != -1 || _root.save.inventoryDesc[i].indexOf('70380326') != -1 || _root.save.inventoryDesc[i].indexOf('761205567') != -1 || _root.save.inventoryDesc[i].indexOf('663902970') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 619;
    }
    if (_root.save.ver < 620) {
      _root.save.fishBestLevel = _root.save.fishLevel;
      _root.save.ver = 620;
    }
    if (_root.save.ver < 621) {
      if (_root.save.speedRunMode9001 != 2147483647 && _root.save.speedRunMode9001 > 0) {
        _root.saveGlobal.challengeTime[0] = _root.save.speedRunMode9001 * 60;
        _root.saveGlobal.challengeAttempted[0] = true;
        _root.saveGlobal.challengePerfect[0] = true;
      } else {
        delete _root.saveGlobal.challengeTime[0];
        delete _root.saveGlobal.challengeAttempted[0];
        delete _root.saveGlobal.challengePerfect[0];
      }
      _root.save.ver = 621;
    }
    if (_root.save.ver < 622) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Eternal Rage') {
          _root.save.inventoryDesc[i] = 'With this, you will gain 0.5% Rage every second and ignore all forms of rage depletion! It also multiplies your Rage Attack by 1.2x.';
        }
        if (_root.save.inventoryName[i] == 'Immortal Pendant' || _root.save.inventoryName[i] == 'Roflhunter\'s Pendant' || _root.save.inventoryName[i] == 'Dominator\'s Gem' || _root.save.inventoryName[i] == 'Mega Triangle Gem') {
          _root.save.inventoryBonusPow[i] += _root.save.inventoryAttack[i] + _root.save.inventoryCrit[i] * 5 + _root.save.inventoryDexterity[i] * 5 + _root.save.inventoryHealth[i] * 5;
          _root.save.inventoryAttack[i] = Math.floor(_root.save.inventoryAttack[i] * 2);
          _root.save.inventoryCrit[i] = Math.floor(_root.save.inventoryCrit[i] * 2);
          _root.save.inventoryDexterity[i] = Math.floor(_root.save.inventoryDexterity[i] * 2);
          _root.save.inventoryHealth[i] = Math.floor(_root.save.inventoryHealth[i] * 2);
        }
        ++i;
      }
      i = 1;
      while (i <= 2) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 2000 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      i = 3;
      while (i <= 5) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 2250 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      i = 6;
      while (i <= 10) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 900 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      if (!isNaN(_root.save.achEarnTime[1000])) {
        _root.save.newbieProgress = 15;
      }
      _root.save.ver = 622;
    }
    if (_root.save.ver < 623) {
      if (_root.save.banned >= 100) {
        _root.save.whiteCoin += 10000;
        _root.save.eventToken += 10000;
        _root.save.permaBanPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _root.save.permaStupidity = _root.save.banned;
        _root.save.permaStupidityHard = _root.save.bannedHard;
        _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      }
      _root.save.ver = 623;
    }
    if (_root.save.ver < 624) {
      if (_root.saveid == 24) {
        c4Cheated = false;
        i = 1;
        while (i <= 200) {
          if (_root.save.inventoryEnhance[i] > 0 && _root.save.inventorySubtype[i] != 'Skin' && _root.save.inventoryReqRank[i] < 100) {
            c4Cheated = true;
            _root.save.arenaPixel += _root.save.inventorySell[i] * 8;
          }
          ++i;
        }
        if (_root.save.arenaMedal != 0) {
          c4Cheated = true;
          _root.save.arenaMedal = 0;
        }
        if (_root.save.arenaPendant != 0) {
          c4Cheated = true;
          _root.save.arenaPendant = 0;
        }
        if (_root.save.arenaEarring != 0) {
          c4Cheated = true;
          _root.save.arenaEarring = 0;
        }
        if (_root.save.arenaTrinket != 0) {
          c4Cheated = true;
          _root.save.arenaTrinket = 0;
        }
        if (c4Cheated == true) {
          _root.save.ascendPlayTime += 10800;
        }
      }
      _root.save.ver = 624;
    }
    if (_root.save.ver < 625) {
      if (_root.save.gDifficulty >= 3) {
        _root.save.gardenCapacity = 50;
      }
      _root.save.ver = 625;
    }
    if (_root.save.ver < 626) {
      if (_root.saveid == 24) {
        _root.save.arenaPixel = _root.save.arenaPixelMax;
      }
      _root.save.ver = 626;
    }
    if (_root.save.ver < 627) {
      if (_root.saveid == 24) {
        _root.save.ascendPlayTime = Math.ceil(_root.save.ascendPlayTime * 0.85);
      }
      _root.save.ver = 627;
    }
    if (_root.save.ver < 629) {
      if (!isNaN(_root.save.bankGardenFruit) && _root.save.bankGardenFruit > 0) {
        _root.save.gardenPoint = _root.save.gardenPointMax;
        _root.save.gardenFruit = _root.save.gardenFruitMax;
      }
      _root.save.ver = 629;
    }
    if (_root.save.ver < 630) {
      if (_root.save.banned > 100 && _root.save.bannedImpossible > 25) {
        _root.save.banned1662 = Math.floor(_root.save.bannedImpossible / 20 - 1);
        if (isNaN(_root.save.banned1662) || _root.save.banned1662 > 10) {
          _root.save.banned1662 = 10;
        }
        _root.save.banned += _root.save.banned1662;
        _root.save.bannedHard += _root.save.banned1662;
        _root.save.bannedImpossible += _root.save.banned1662;
        _root.save.stupidity += _root.save.banned1662 * 7;
        _root.save.permaStupidity += _root.save.banned1662;
        _root.save.permaStupidityHard += _root.save.banned1662;
        _root.save.permaStupidityImpossible += _root.save.banned1662;
      }
      _root.save.ver = 630;
    }
    if (_root.save.ver < 634) {
      if (_root.save.arenaAllyUpgrade[1] != undefined) {
        _root.save.noobMode = true;
      }
      _root.save.mysteryBox[10] += _root.save.bannedB;
      _root.save.arenaSpookyScore = Math.ceil(_root.save.arenaSpookyScore / 5);
      _root.save.arenaSpookyToday = 0;
      _root.save.raidPyramid = Math.floor(_root.save.raidPyramid / 100);
      _root.save.rewardClaimAuto = _root.save.rewardClaim - _root.save.rewardClaimManual;
      i = 1;
      while (i <= 12) {
        if (_root.save.careerLevel[i] >= 100) {
          _root.save.careerPotion += Math.floor(_root.save.careerEXP[i] / 200000);
        }
        _root.save.careerEXP[i] = Math.floor(_root.save.careerEXP[i] * 0.1);
        ++i;
      }
      if (_root.save.careerLevel[1] >= 100) {
        _root.save.careerEXP[1] += Math.max(_root.save.rewardClaimAuto - 1000000, 0);
      }
      if (_root.save.careerLevel[2] >= 100) {
        _root.save.careerEXP[2] += Math.max(_root.save.gardenEXP - 1000000, 0);
      }
      if (_root.save.careerLevel[3] >= 100) {
        _root.save.careerEXP[3] += Math.max(_root.save.arenaKillWhite / 2 + _root.save.arenaKillRed / 2 + _root.save.battlePoint * 500 - 1000000, 0);
      }
      if (_root.save.careerLevel[4] >= 100) {
        _root.save.careerEXP[4] += Math.max(_root.save.arenaLoot / 10 - 1000000, 0);
      }
      if (_root.save.careerLevel[5] >= 100) {
        _root.save.careerEXP[5] += Math.max(_root.save.buttonPress * 2 + _root.save.buttonPerfect * 20 - 1000000, 0);
      }
      if (_root.save.careerLevel[6] >= 100) {
        _root.save.careerEXP[6] += Math.max(_root.save.totalPong / 1000 + _root.save.totalAvoidance / 1000 + _root.save.totalMath / 2500 + _root.save.totalWhack / 2000 + _root.save.totalMind / 500 + _root.save.totalBalance / 2500 + _root.save.totalCount / 2000 - 1000000, 0);
      }
      if (_root.save.careerLevel[7] >= 100) {
        _root.save.careerEXP[7] += Math.max(_root.save.stadiumRace * 250 + _root.save.stadiumImpossibleRace * 250 + _root.save.stadiumItem * 300 + _root.save.stadiumImpossibleItem * 300 + _root.save.stadiumDeathMatch * 5000 - 1000000, 0);
      }
      if (_root.save.careerLevel[8] >= 100) {
        _root.save.careerEXP[8] += Math.max(_root.save.fcgExpTotal * 4 - 1000000, 0);
      }
      if (_root.save.careerLevel[9] >= 100) {
        _root.save.careerEXP[9] += Math.max(_root.save.lolProfit / 500 - 1000000, 0);
      }
      if (_root.save.careerLevel[10] >= 100) {
        _root.save.careerEXP[10] += Math.max(_root.save.awesomeTotalAdv * 50 - 1000000, 0);
      }
      if (_root.save.careerLevel[12] >= 100) {
        _root.save.careerEXP[12] += Math.max(_root.save.fishExp + _root.save.fishTotalExp - 1000000, 0);
      }
      i = 1;
      while (i <= 500) {
        if (!isNaN(_root.save.arenaAllyEXP[i])) {
          _root.save.arenaAllyUpgrade[i] = 0;
        }
        ++i;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Auto Buff Gem') {
          _root.save.inventoryMoreBonus[i] = 'MaxHP';
        }
        if (_root.save.inventoryName[i] == 'Bronze Pendant') {
          _root.save.inventoryAttack[i] += 20;
          _root.save.inventoryCrit[i] += 5;
          _root.save.inventoryDexterity[i] += 5;
          _root.save.inventoryHealth[i] += 5;
        }
        if (_root.save.inventoryName[i] == 'Silver Pendant') {
          _root.save.inventoryAttack[i] += 60;
          _root.save.inventoryCrit[i] += 15;
          _root.save.inventoryDexterity[i] += 15;
          _root.save.inventoryHealth[i] += 15;
        }
        if (_root.save.inventoryName[i] == 'Gold Pendant') {
          _root.save.inventoryAttack[i] += 100;
          _root.save.inventoryCrit[i] += 25;
          _root.save.inventoryDexterity[i] += 25;
          _root.save.inventoryHealth[i] += 25;
        }
        if (_root.save.inventoryName[i] == 'Platinum Pendant') {
          _root.save.inventoryAttack[i] += 140;
          _root.save.inventoryCrit[i] += 35;
          _root.save.inventoryDexterity[i] += 35;
          _root.save.inventoryHealth[i] += 35;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pendant') {
          _root.save.inventoryAttack[i] += 180;
          _root.save.inventoryCrit[i] += 45;
          _root.save.inventoryDexterity[i] += 45;
          _root.save.inventoryHealth[i] += 45;
        }
        ++i;
      }
      _root.save.ver = 634;
    }
    if (_root.save.ver < 635) {
      _root.save.raidPyramid = Math.floor(_root.save.raidPyramid / 4);
      _root.save.ver = 635;
    }
    if (_root.save.ver < 637) {
      _root.save.raidPyramid = 0;
      _root.save.ver = 637;
    }
    if (_root.save.ver < 638) {
      if (_root.save.careerLevel[6] >= 100) {
        _root.save.careerEXP[6] += Math.max(_root.save.totalPong / 1000 + _root.save.totalAvoidance / 1000 + _root.save.totalMath / 2500 + _root.save.totalWhack / 2000 + _root.save.totalMind / 500 + _root.save.totalBalance / 2500 + _root.save.totalCount / 2000 - 500000, 0);
      }
      if (_root.save.careerLevel[7] >= 100) {
        _root.save.careerEXP[7] += Math.max(_root.save.stadiumRace * 250 + _root.save.stadiumImpossibleRace * 250 + _root.save.stadiumItem * 300 + _root.save.stadiumImpossibleItem * 300 + _root.save.stadiumDeathMatch * 5000 - 500000, 0);
      }
      if (_root.save.careerLevel[8] >= 100) {
        _root.save.careerEXP[8] += Math.max(_root.save.fcgExpTotal * 16 - 500000, 0);
      }
      if (_root.save.careerLevel[12] >= 100) {
        _root.save.careerEXP[12] += Math.max((_root.save.fishExp + _root.save.fishTotalExp) * 2 - 500000, 0);
      }
      _root.save.ver = 638;
    }
    if (_root.save.ver < 639) {
      if (_root.save.arenaAccuracy < 100 || _root.save.arenaLevel > 1 && _root.save.arenaLevel < 40) {
        _root.save.arenaAccuracy += 50;
        _root.save.arenaEvasion += 50;
        _root.save.arenaMaxHealth += 1500;
        _root.save.arenaMaxMana += 500;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Auto Buff Gem') {
          if (_root.save.inventoryBonus[i] != '' && _root.save.inventoryBonus[i].indexOf('Auto Buff') == -1) {
            _root.save.inventoryBonus[i] = '';
          }
        }
        if (_root.save.inventoryName[i] != '' && _root.save.inventoryName[i].indexOf('Auto Buff') != -1) {
          if (_root.save.inventoryBonus[i] != '' && _root.save.inventoryBonus[i].indexOf('Auto Buff') == -1) {
            _root.save.inventoryBonus[i] = '';
          }
        }
        if (_root.save.inventoryExpiry[i] == 0 && _root.save.inventoryObtainTime[i] > 1385823600000.0 && _root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('84663214') != -1 && _root.save.inventoryDesc[i].indexOf('993776406') != -1 && _root.save.inventoryDesc[i].indexOf('336567214') != -1 && _root.save.inventoryDesc[i].indexOf('957022263') != -1 && _root.save.inventoryDesc[i].indexOf('366154706') != -1 && _root.save.inventoryDesc[i].indexOf('993776406') != -1 && _root.save.inventoryDesc[i].indexOf('545318181') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      i = 51;
      while (i <= 75) {
        _root.save.gardenSlotEXP[i] = 0;
        _root.save.gardenTrees[i] = 0;
        ++i;
      }
      i = 1;
      while (i <= 75) {
        if (_root.save.gardenTrees[i] != 0 && !isNaN(_root.save.gardenTrees[i])) {
          _root.save.gardenTreeExp[i] = 50;
          _root.save.gardenTreeFertilize[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 639;
    }
    if (_root.save.ver < 642) {
      if (!isNaN(_root.save.mysteryBoxCollect10[1])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[1] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[1] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[2])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[2] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[2] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[3])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[3] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[3] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[4])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[4] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[4] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[5])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[5] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[5] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[6])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[6] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[6] * 10;
      }
      if (_root.saveid < 4) {
        if (_root.save.firstPlayed >= 1385769600000.0 && _root.save.firstPlayed <= 1420070400000.0) {
          _root.save.mysteryBox[10] += 40;
        }
        if (_root.save.bestLevel >= 150) {
          _root.save.mysteryBox[10] += 1;
        }
        if (_root.save.battlePoint >= 500) {
          _root.save.mysteryBox[10] += 9;
        }
      }
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.raidPrehistoric = 0;
      _root.save.raidMegaboss = 0;
      _root.save.raidTower = 0;
      _root.save.raidDungeon = 0;
      _root.save.raidEndless = 0;
      _root.save.arenaRevengeScore = 0;
      _root.save.arenaTriangleScore = 0;
      _root.save.arenaTriangleToday = 0;
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.fcgSeriousDeck = 34 + random(35);
      _root.save.fcgExp += _root.save.fcgWin * Math.ceil(15 + _root.save.fcgLevel / 3) + _root.save.fcgLevel5 * 25 + _root.save.fcgLevel6 * 50 + _root.save.fcgLevel7 * 75 + _root.save.fcgLevel8 * 100 + _root.save.fcgLevel9 * 125 + _root.save.fcgLevel10 * 150;
      if (_root.save.careerLevel[8] >= 50) {
        _root.save.careerEXP[8] += (_root.save.fcgWin * Math.ceil(15 + _root.save.fcgLevel / 3) + _root.save.fcgLevel5 * 25 + _root.save.fcgLevel6 * 50 + _root.save.fcgLevel7 * 75 + _root.save.fcgLevel8 * 100 + _root.save.fcgLevel9 * 125 + _root.save.fcgLevel10 * 150) * 10;
      }
      _root.save.ver = 642;
    }
    if (_root.save.ver < 643) {
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaAllyUpgrade[i] == 15) {
          if (i == 275 || i == 295 || i >= 332 && i <= 349 || i == 356 || i >= 367 && i <= 376 || i >= 377 && i <= 432 || i >= 438 && i <= 440 || i >= 448 && i <= 485) {
            _root.save.arenaAllyUpgrade[i] = 10;
            _root.save.arenaUnobtainium += 500;
            _root.save.whiteCoin += 200;
            _root.save.mysteryBox[10] += 2;
          }
        }
        if (!isNaN(_root.save.arenaBestiaryUlt1[i])) {
          _root.save.arenaBestiaryUlt1V[i] = 1664;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt2[i])) {
          _root.save.arenaBestiaryUlt2V[i] = 1664;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt3[i])) {
          _root.save.arenaBestiaryUlt3V[i] = 1664;
        }
        ++i;
      }
      _root.save.ver = 643;
    }
    if (_root.save.ver < 644) {
      if (_root.save.speedRunAscendImpossible < 1440) {
        _root.save.speedRunAscendImpossible = 1440;
      }
      _root.save.battlePoint += _root.save.arenaExpExcess * 4 + _root.save.bannedB * 1500;
      _root.save.ver = 644;
    }
    if (_root.save.ver < 645) {
      if (_root.save.houseVer > 172800 && _root.save.banned < 90) {
        _root.save.houseVer = 172800;
      }
      if (_root.save.banned >= 5) {
        _root.save.progSpeedAuto = 200;
        _root.save.progSpeedManual = 400;
      }
      _root.save.fcgCash += _root.save.fcgBuff[1] * 500;
      _root.save.fcgCash += _root.save.fcgBuff[2] * 1500;
      _root.save.fcgCash += _root.save.fcgBuff[3] * 3000;
      _root.save.fcgCash += _root.save.fcgBuff[4] * 5000;
      _root.save.fcgCash += _root.save.fcgBuff[5] * 8000;
      _root.save.fcgCash += _root.save.fcgBuff[6] * 12000;
      _root.save.fcgCash += _root.save.fcgBuff[7] * 2000;
      _root.save.fcgCash += _root.save.fcgBuff[8] * 250;
      _root.save.stupidity += _root.save.bannedImpossible * 2;
      _root.save.banned1665 = Math.floor(_root.save.mysteryBox[8] / 30000);
      if (_root.save.banned1665 > 5) {
        _root.save.banned1665 = 5;
      }
      if (_root.save.banned1665 < 0) {
        _root.save.banned1665 = 0;
      }
      _root.save.banned += _root.save.banned1665;
      _root.save.bannedHard += _root.save.banned1665;
      _root.save.bannedImpossible += _root.save.banned1665;
      _root.save.stupidity += _root.save.banned1665 * 9;
      _root.save.permaStupidity += _root.save.banned1665;
      _root.save.permaStupidityHard += _root.save.banned1665;
      _root.save.permaStupidityImpossible += _root.save.banned1665;
      _root.save.ver = 645;
    }
    if (_root.save.ver < 646) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] >= 30 && _root.save.progModuleType[i] <= 39) {
          _root.save.progModuleChance[i] = Math.floor(_root.save.progModuleChance[i] / 2);
        }
        ++i;
      }
      _root.save.ver = 646;
    }
    if (_root.save.ver < 651) {
      _root.save.arenaSP += _root.save.arenaLevel * 5 - 1;
      _root.save.ver = 651;
    }
    if (_root.save.ver < 652) {
      if (_root.save.arenaUltimateSP > 150 + Math.floor(_root.save.battlePoint / 10000)) {
        _root.save.arenaUltimateSP = 150 + Math.floor(_root.save.battlePoint / 10000);
        _root.save.arenaSP = _root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10;
        _root.save.arenaTotalSkill = 0;
        _root.save.arenaTotalSP = 0;
        i = 1;
        while (i <= 66) {
          if (_root.save.arenaSkill[i] > 0) {
            _root.save.arenaSkill[i] = 0;
          }
          ++i;
        }
      }
      _root.save.ver = 652;
    }
    if (_root.save.ver < 653) {
      if (_root.save.bannedHard >= 1) {
        _root.save.whiteCoin += 1000;
      }
      if (_root.save.bannedImpossible >= 1) {
        _root.save.whiteCoin += 2000;
      }
      _root.save.ver = 653;
    }
    if (_root.save.ver < 654) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('84663214') != -1 || _root.save.inventoryDesc[i].indexOf('993776406') != -1 || _root.save.inventoryDesc[i].indexOf('336567214') != -1 || _root.save.inventoryDesc[i].indexOf('957022263') != -1 || _root.save.inventoryDesc[i].indexOf('366154706') != -1 || _root.save.inventoryDesc[i].indexOf('993776406') != -1 || _root.save.inventoryDesc[i].indexOf('545318181') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 655) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExpiry[i] == 1388583420000.0) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 655;
    }
    if (_root.save.ver < 656) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 5) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        if (_root.save.progModuleType[i] == 30) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 31 && _root.save.progModuleType[i] <= 32) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 60;
          } else {
            _root.save.progModuleChance[i] = Math.round(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 33 && _root.save.progModuleType[i] <= 35) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 36 && _root.save.progModuleType[i] <= 39) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 42) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 656;
    }
    if (_root.save.ver < 657) {
      _root.save.raidSpecial = 0;
      _root.save.ver = 657;
    }
    if (_root.save.ver < 659) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 659;
    }
    if (_root.save.ver < 663) {
      if (_root.save.fcgCash == -Infinity || isNaN(_root.save.fcgCash) || _root.save.fcgCash < 0) {
        delete _root.save.fcgCash;
        if (isNaN(_root.save.fcgMaxCash) || _root.save.fcgMaxCash > 1000000000 || _root.save.fcgMaxCash < 0) {
          _root.save.fcgMaxCash = 0;
        }
        _root.save.fcgCash = _root.save.fcgMaxCash;
      }
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 26) {
          _root.save.progModuleName[i] = 'Career EXP Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 663;
    }
    if (_root.save.ver < 664) {
      i = 1;
      while (i <= 500) {
        if (!isNaN(_root.save.arenaAllyEXP[i]) && isNaN(_root.save.arenaAllyUpgrade[i])) {
          _root.save.arenaAllyUpgrade[i] = 0;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt1V[i])) {
          _root.save.arenaAllyUpgrade[i] = 15;
          if (i == 275 || i == 295 || i >= 332 && i <= 349 || i == 356 || i >= 367 && i <= 376 || i >= 377 && i <= 432 || i >= 438 && i <= 440 || i >= 448 && i <= 485) {
            if (_root.save.arenaBestiaryUlt1V[i] < 1665) {
              _root.save.arenaAllyUpgrade[i] = 10;
            }
          }
        }
        if (!isNaN(_root.save.arenaBestiaryExtra[i]) && _root.save.arenaBestiaryExtra[i] > 0 && _root.save.arenaAllyUpgrade[i] < 10) {
          _root.save.arenaAllyUpgrade[i] = 10;
          if (_root.enemyList[i].allyPassive3 == '') {
            _root.save.arenaAllyUpgrade[i] = 15;
          }
        }
        ++i;
      }
      _root.save.ver = 664;
    }
    if (_root.save.ver < 666) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 10) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 666;
    }
    if (_root.save.ver < 667) {
      tmul = Math.floor(Math.pow(_root.save.bestLevel, 0.6)) / 5 + 1;
      if (_root.save.bestLevel >= 9000) {
        tmul += 2;
      }
      i = 1;
      while (i <= 75) {
        if (!isNaN(_root.save.gardenHarvestValue[i])) {
          _root.save.gardenHarvestValue[i] = Math.ceil(_root.save.gardenHarvestValue[i] / tmul);
        }
        ++i;
      }
      _root.save.ver = 667;
    }
    if (_root.save.ver < 668) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 26) {
          _root.save.progModuleName[i] = 'Career EXP Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 668;
    }
    if (_root.save.ver < 669) {
      i = 1;
      while (i <= 75) {
        if (_root.save.gardenTrees[i] != 0 && !isNaN(_root.save.gardenTrees[i])) {
          _root.save.gardenTreeModuleProc[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 669;
    }
    if (_root.save.ver < 670) {
      if (_root.save.bestLevel >= 150) {
        _root.save.whiteCoin += 1000;
      }
      _root.save.ver = 670;
    }
    if (_root.save.ver < 672) {
      _root.save.consecutiveDays = _root.save.maxConsecutiveDays;
      i = 71;
      while (i <= 141) {
        _root.deleteModulePiece(i);
        ++i;
      }
      i = 41;
      while (i <= 70) {
        _root.copyModulePiece(i, i + 70);
        _root.deleteModulePiece(i);
        ++i;
      }
      _root.save.ver = 672;
    }
    if (_root.save.ver < 675) {
      _root.save.totalStupidity = _root.save.banned + _root.save.bannedHard * 2 + _root.save.bannedImpossible * 6;
      if (_root.save.gDifficulty == 3) {
        _root.save.totalStupidity += 8;
      } else {
        if (_root.save.gDifficulty == 2) {
          _root.save.totalStupidity += 2;
        }
      }
      _root.save.remStupidity = _root.save.totalStupidity;
      _root.save.questToken += 2000 * _root.save.stupidity;
      _root.save.ver = 675;
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.arenaSubWeapon = 0;
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 3) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 16) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 26) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 21) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 28 || _root.save.progModuleType == 29) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 19 || _root.save.progModuleType[i] == 22 || _root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13 || _root.save.progModuleType[i] == 20 || _root.save.progModuleType[i] == 24 || _root.save.progModuleType[i] == 25 || _root.save.progModuleType[i] == 27 || _root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 677) {
      _root.save.ver = 677;
      _root.save.mysteryBox[8] = Math.ceil(_root.save.mysteryBox[8] * 0.1);
      if (_root.save.fcgLevel >= 20) {
        _root.save.fcgInitDeck = 6;
        _root.save.fcgCash += 10000;
      }
      _root.save.whiteCoinRefund = Math.floor(_root.save.banned * 500 * (1 + _root.save.banned / 200));
      if (_root.save.banned > 100) {
        _root.save.whiteCoinRefund -= (_root.save.banned - 100) * 500;
      }
      _root.save.whiteCoinRefund = Math.floor(_root.save.whiteCoinRefund * 0.5);
      _root.save.whiteCoinRefundTotal = _root.save.whiteCoinRefund;
    }
    if (_root.save.ver < 678) {
      _root.save.ver = 678;
      if (_root.save.bestLevel >= 100 && _root.saveid <= 3) {
        _root.save.mysteryBox[10] += 10;
      }
    }
    if (_root.save.ver < 680) {
      _root.save.ver = 680;
      if (_root.save.banned > 100) {
        _root.save.totalStupidity += _root.save.banned - 100;
        _root.save.remStupidity += _root.save.banned - 100;
      }
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 3) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 16) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 26) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 21) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 28 || _root.save.progModuleType == 29) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 19 || _root.save.progModuleType[i] == 22 || _root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13 || _root.save.progModuleType[i] == 20 || _root.save.progModuleType[i] == 24 || _root.save.progModuleType[i] == 25 || _root.save.progModuleType[i] == 27 || _root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 683) {
      _root.save.ver = 683;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryDesc[i] == 'Thank you for your donation and your continuous support!') {
          _root.save.inventoryDesc[i] = 'Thank you for your donation and your continued support!';
        }
        if (_root.save.inventoryName[i].indexOf('(Cursed)') != -1 && _root.save.inventoryExist[i] == 1) {
          _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 0, _root.save.inventoryName[i].length - 9);
        }
        ++i;
      }
    }
    if (_root.save.ver < 684) {
      if (_root.saveid == 0 && _root.kongregate_username == 'FireShard') {
        _root.save.totalStupidity += 2;
        _root.save.remStupidity += 2;
      }
      _root.save.ver = 684;
    }
    if (_root.save.ver < 694) {
      _root.save.ver = 694;
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 50;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 50;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 24) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
            _root.save.progModuleEffect[i] = 10;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(5 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 695) {
      _root.save.ver = 695;
      if (_root.saveid <= 3 && _root.save.bestLevel >= 150) {
        _root.save.shinyToken += 10;
      }
    }
    if (_root.save.ver < 696) {
      _root.save.ver = 696;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt1V[i] == 1736 || _root.save.arenaBestiaryUlt1V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt1V[i];
          delete _root.save.arenaBestiaryUlt1[i];
          if (_root.save.arenaAllyUpgrade[i] == 15) {
            _root.save.arenaAllyUpgrade[i] = 10;
          }
        }
        if (_root.save.arenaBestiaryUlt2V[i] == 1736 || _root.save.arenaBestiaryUlt2V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt2V[i];
          delete _root.save.arenaBestiaryUlt2[i];
        }
        if (_root.save.arenaBestiaryUlt3V[i] == 1736 || _root.save.arenaBestiaryUlt3V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt3V[i];
          delete _root.save.arenaBestiaryUlt3[i];
        }
        ++i;
      }
    }
    if (_root.save.ver < 698) {
      _root.save.ver = 698;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt1F[i] != undefined && _root.save.arenaAllyUpgrade[i] == 10) {
          if (_root.save.arenaBestiaryUlt1F[i].indexOf('2015-10-1') == -1) {
            _root.save.arenaBestiaryUlt1[i] = 1;
            _root.save.arenaBestiaryUlt1V[i] = 1735;
            _root.save.arenaAllyUpgrade[i] = 15;
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 699) {
      _root.save.ver = 699;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt2F[i] != undefined && _root.save.arenaBestiaryUlt2[i] == undefined) {
          if (_root.save.arenaBestiaryUlt2F[i].indexOf('2015-10-1') == -1) {
            _root.save.arenaBestiaryUlt2[i] = 1;
            _root.save.arenaBestiaryUlt2V[i] = 1735;
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 700) {
      _root.save.ver = 700;
      _root.save.wisdomDiscovered = new Array();
    }
    if (_root.save.ver < 701) {
      _root.save.ver = 701;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaAllyUpgrade[i] == 15 && _root.enemyList[i].allyPassive3 == '' && !isNaN(_root.save.arenaBestiaryExtra[i])) {
          _root.save.arenaBestiary[i] += _root.save.arenaBestiaryExtra[i] * 4;
          _root.save.arenaBestiaryExtra[i] += _root.save.arenaBestiaryExtra[i] * 4;
        }
        ++i;
      }
    }
    if (_root.save.ver < 702) {
      if (_root.save.petFullness > 2000) {
        _root.save.pam = true;
      }
      if (_root.save.petFullness > 1000) {
        _root.save.petFullness = 1000;
      }
      _root.save.ver = 702;
    }
    if (_root.save.ver < 704) {
      if (_root.save.petFullness > 2000) {
        _root.save.pam = true;
      }
      if (_root.save.petFullness > 1000) {
        _root.save.petFullness = 1000;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[1]) && !isNaN(_root.save.mysteryBoxCollect10[2]) && !isNaN(_root.save.mysteryBoxCollect10[3]) && !isNaN(_root.save.mysteryBoxCollect10[4]) && !isNaN(_root.save.mysteryBoxCollect10[5]) && !isNaN(_root.save.mysteryBoxCollect10[6])) {
        tmp = _root.save.mysteryBox[10] + _root.save.mysteryBoxCollect10[1] + _root.save.mysteryBoxCollect10[2] + _root.save.mysteryBoxCollect10[3] + _root.save.mysteryBoxCollect10[4] + _root.save.mysteryBoxCollect10[5] + _root.save.mysteryBoxCollect10[6];
        if (tmp > 19876) {
          _root.save.pam = true;
        }
      }
      _root.save.ver = 704;
    }
    if (_root.save.ver < 705) {
      if (_root.save.botExp < 0) {
        _root.save.botExp = 0;
      }
      _root.save.ver = 705;
    }
    if (_root.save.ver < 706) {
      if (_root.kongregate_username == 'Mnchngrngs' && _root.save.careerLevel[13] == 100) {
        _root.save.careerLevel[13] = 0;
        _root.save.careerLevel[14] = 0;
        _root.save.careerLevel[15] = 0;
        _root.save.careerLevel[16] = 0;
        _root.save.arenaKommanderComplete = 12;
        _root.save.arenaSkillBook = 1240;
      }
    }
    if (_root.save.ver < 707) {
      i = 0;
      while (i <= 899) {
        _root.save.drawingBoardHex[i] = '000000';
        _root.save.drawingBoardAlp[i] = 0;
        ++i;
      }
      _root.save.ver = 707;
    }
    if (_root.save.ver < 708) {
      i = 900;
      while (i <= 1199) {
        _root.save.drawingBoardHex[i] = '000000';
        _root.save.drawingBoardAlp[i] = 0;
        ++i;
      }
      _root.save.ver = 708;
    }
    if (_root.save.ver < 711) {
      if (_root.save.arenaEventPoint[1] > 40000) {
        _root.save.arenaEventPoint[1] = Math.floor((_root.save.arenaEventPoint[1] - 40000) * 0.5) + 40000;
      }
      _root.save.ver = 711;
    }
    if (_root.save.ver < 712) {
      _root.save.buttonMultiplier *= 2;
      _root.save.ver = 712;
    }
    if (_root.save.ver < 713) {
      _root.save.collectionPointMax = _root.save.collectionPoint;
      _root.save.ver = 713;
    }
    if (_root.save.ver < 715) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 10) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 715;
    }
    if (_root.save.ver < 716) {
      if (_root.save.progStore > 1000) {
        _root.save.progStore = 100;
      }
      tmpProgStore = _root.save.progStore;
      tmpProgStoreB = 100;
      _root.save.progStore = 100;
      while (tmpProgStoreB < tmpProgStore) {
        tmpProgStoreB += Math.ceil((1000 - tmpProgStoreB) / 10);
        _root.save.progStore += 100;
      }
      _root.save.ver = 716;
    }
    if (_root.save.ver < 717) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 10;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(5 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 717;
    }
    if (_root.save.ver < 718) {
      if (_root.save.bestLevel >= 1250) {
        _root.save.botPill += 2;
      }
      _root.save.ver = 718;
    }
    if (_root.save.ver < 721) {
      _root.save.bugExp = 0;
      if (_root.save.level == 9001) {
        _root.save.bugExp = Math.floor(_root.save.currentExp * 0.99);
        _root.save.expLag += Math.floor(_root.save.currentExp * 0.99);
      }
      _root.save.ver = 721;
    }
    if (_root.save.ver < 726) {
      if (_root.save.fishCapacity == 1337) {
        _root.save.fishCapacity = 2500;
      } else {
        if (_root.save.fishCapacity == 1837) {
          _root.save.fishCapacity = 5000;
        } else {
          if (_root.save.fishCapacity == 2524) {
            _root.save.fishCapacity = 7500;
          } else {
            if (_root.save.fishCapacity == 3468) {
              _root.save.fishCapacity = 10000;
            } else {
              if (_root.save.fishCapacity == 4766) {
                _root.save.fishCapacity = 12500;
              } else {
                if (_root.save.fishCapacity == 6550) {
                  _root.save.fishCapacity = 15000;
                } else {
                  if (_root.save.fishCapacity == 9001) {
                    _root.save.fishCapacity = 17500;
                  }
                }
              }
            }
          }
        }
      }
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 1) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 2) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 11) {
          _root.save.progModuleName[i] = 'Pet Mana Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 726;
    }
    if (_root.save.ver < 728) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 1) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 2) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 11) {
          _root.save.progModuleName[i] = 'Pet Mana Module';
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 728;
    }
    if (_root.save.ver < 730) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 22) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 30) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 31 || _root.save.progModuleType[i] == 32) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 60;
          } else {
            _root.save.progModuleChance[i] = Math.round(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 33 && _root.save.progModuleType[i] <= 35) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 36 && _root.save.progModuleType[i] <= 39) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1600;
          } else {
            _root.save.progModuleChance[i] = Math.round(400 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
      _root.save.ver = 730;
    }
    if (_root.save.ver < 731) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Potion') {
          if (_root.save.inventoryName[i] == 'Small Power Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Small Master Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Small Reward Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Medium Power Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Medium Master Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Medium Reward Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Large Power Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Large Master Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Large Reward Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Power Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Master Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Reward Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Special Power Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Special Master Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Special Reward Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Loot Magnet') {
            _root.save.inventoryAttack[i] = 3600;
          }
          if (_root.save.inventoryName[i] == 'Monster Magnet') {
            _root.save.inventoryAttack[i] = 3600;
          }
          if (_root.save.inventoryName[i] == 'Air Bubble') {
            _root.save.inventoryAttack[i] = 1800;
          }
        }
        ++i;
      }
      _root.save.ver = 731;
    }
    if (_root.saveGlobal.latestVersion == 1787) {
      _root.saveGlobal.pl7 = true;
      _root.saveGlobal.pl8 = true;
    }
    if (_root.save.ver < 732) {
      _root.save.arenaChaosLeft = 15;
      _root.save.arenaChaosMax = 15;
      _root.save.ver = 732;
    }
    if (_root.save.ver < 733) {
      _root.save.mh = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Medal' && _root.save.inventoryEnhance[i] > 0) {
          if (_root.save.inventoryDesc[i] == 'Thank you for your donation and your continued support!') {
            _root.save.inventoryAttack[i] = 0;
            _root.save.mh = true;
          }
          if (_root.save.inventoryDesc[i] == 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!') {
            _root.save.inventoryAttack[i] = 0;
            _root.save.mh = true;
          }
        }
        ++i;
      }
      _root.save.ver = 733;
    }
    if (_root.save.ver < 735) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Pendant' && _root.save.inventoryName[i] == 'GIGA PENDANT') {
          _root.save.inventoryAttack[i] += _root.save.inventoryEnhance[i] * 75;
        }
        if (_root.save.inventorySubtype[i] == 'Earring' && _root.save.inventoryName[i] == 'GIGA EARRINGS') {
          _root.save.inventoryAttack[i] += _root.save.inventoryEnhance[i] * 75;
          j = 5000;
          while (j <= 7000) {
            if (_root.save.inventoryDesc[i].indexOf(_root.withComma(j)) != -1) {
              _root.save.inventoryAttack[i] -= Math.floor(j - 5000) / 5;
              _root.save.inventoryAttack[i] += Math.floor(j - 5000) / 2;
              j = 7001;
            }
            ++j;
          }
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA ENHANCER') {
          _root.save.inventoryAttack[i] = 125;
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA ENHANCER EX') {
          _root.save.inventoryAttack[i] = 150;
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA LIFE ROCK') {
          _root.save.inventoryAttack[i] = 2;
        }
        ++i;
      }
      if (_root.save.raidDungeon >= 4500) {
        _root.save.arenaChaosLeft += 7;
      }
      _root.save.ver = 735;
    }
    if (_root.save.ver < 736) {
      if (_root.save.bannedB >= 1) {
        if (_root.save.arenaAttack < 65000) {
          _root.save.arenaAttack = 65000;
        }
        if (_root.save.arenaDefense < 65000) {
          _root.save.arenaDefense = 65000;
        }
        if (_root.save.arenaMaxHealth < 650000) {
          _root.save.arenaMaxHealth = 650000;
        }
        if (_root.save.arenaMaxMana < 130000) {
          _root.save.arenaMaxMana = 130000;
        }
        if (_root.save.arenaAccuracy < 13000) {
          _root.save.arenaAccuracy = 13000;
        }
        if (_root.save.arenaEvasion < 13000) {
          _root.save.arenaEvasion = 13000;
        }
      }
    }
    if (_root.save.ver < 737) {
      if (_root.save.regretRem > 1) {
        _root.save.regretRem = 1;
      }
      _root.save.ver = 737;
    }
    if (_root.save.ver < 739) {
      if (_root.save.regretRem == 0) {
        _root.save.robaconExp += 10000000000.0;
      }
      _root.save.ver = 739;
    }
    if (_root.save.ver < 740) {
      i = 26;
      while (i <= 50) {
        _root.save.gardenSlotEXP[i] *= 2;
        ++i;
      }
      _root.save.ver = 740;
    }
    if (_root.save.ver < 741) {
      if (_root.saveid < 10 && _root.save.bestLevel >= 1250) {
        _root.save.botPill += 2;
      }
      _root.save.ver = 741;
    }
    if (_root.save.ver < 742) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 742;
    }
    if (_root.save.ver < 743) {
      i = 1;
      while (i <= 2500) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Hat' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Shirt' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Gloves' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Pants' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Shoes' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        ++i;
      }
      _root.save.ver = 743;
    }
    if (_root.save.ver < 744) {
      if (_root.save.lolProfit > 0) {
        _root.save.lolCapacity = _root.save.lolCapacity * 5 - 5;
      }
      if (_root.save.lolCapacity < 50) {
        _root.save.lolCapacity = 50;
      }
      if (_root.save.lolCapacity > 5000) {
        _root.save.lolCapacity = 5000;
      }
      _root.save.ver = 744;
    }
    if (_root.save.ver < 745) {
      i = 1;
      while (i <= 10) {
        if (_root.save.lolGems[i] >= 2000) {
          _root.save.lolProfit -= Math.ceil(_root.save.lolGems[i] * 750 * i);
          _root.save.lolGems[i] = Math.ceil(_root.save.lolGems[i] * 1.5);
        }
        ++i;
      }
      _root.save.ver = 745;
    }
    if (_root.save.ver < 746) {
      _root.save.arenaKommanderProgress = 0;
      _root.save.ver = 746;
    }
    if (_root.save.ver < 747) {
      _root.save.arenaChaosLeft = _root.save.arenaChaosMax;
      _root.save.ver = 747;
    }
    if (_root.save.ver < 748) {
      if (_root.save.banned < 1 && _root.save.bannedB < 1 && _root.save.arenaKommanderMonID >= 448) {
        _root.save.arenaKommanderSkip += 1;
      }
      _root.save.ver = 748;
    }
    if (_root.save.ver < 749) {
      if (_root.save.arenaLevel < 500 && _root.save.arenaKommanderMonID >= 443 && _root.save.arenaKommanderMonID <= 447) {
        _root.save.arenaKommanderSkip += 1;
      }
      _root.save.ver = 749;
    }
    if (_root.save.ver < 750) {
      _root.save.botPoint = Math.floor(_root.save.botPoint * 1.5);
      _root.save.ver = 750;
    }
    if (_root.save.ver < 760) {
      _root.save.arenaKommanderSkip = 2;
      _root.save.ver = 760;
    }
  }

  frame 6 {
    function addNewsType(typeID, feature, defaultImportance, defaultColor, sauceName) {
      _root.newsCount += 1;
      _root.newsID[_root.newsCount] = typeID;
      _root.newsFeature[typeID] = feature;
      _root.newsSauceName[_root.newsCount] = sauceName;
      if (typeID != 0 && isNaN(_root.saveGlobal.breakR[typeID])) {
        if (defaultImportance == 4) {
          _root.saveGlobal.breakTab1[typeID] = true;
          _root.saveGlobal.breakTab2[typeID] = true;
          _root.saveGlobal.breakTab3[typeID] = true;
          _root.saveGlobal.breakTab4[typeID] = true;
          _root.saveGlobal.breakAll[typeID] = true;
          _root.saveGlobal.breakFeature[typeID] = true;
        } else {
          if (defaultImportance == 3) {
            _root.saveGlobal.breakTab1[typeID] = true;
            _root.saveGlobal.breakTab2[typeID] = true;
            _root.saveGlobal.breakTab3[typeID] = true;
            _root.saveGlobal.breakTab4[typeID] = false;
            _root.saveGlobal.breakAll[typeID] = false;
            _root.saveGlobal.breakFeature[typeID] = true;
          } else {
            if (defaultImportance == 2) {
              _root.saveGlobal.breakTab1[typeID] = true;
              _root.saveGlobal.breakTab2[typeID] = true;
              _root.saveGlobal.breakTab3[typeID] = false;
              _root.saveGlobal.breakTab4[typeID] = false;
              _root.saveGlobal.breakAll[typeID] = false;
              _root.saveGlobal.breakFeature[typeID] = true;
            } else {
              if (defaultImportance == 1) {
                _root.saveGlobal.breakTab1[typeID] = true;
                _root.saveGlobal.breakTab2[typeID] = false;
                _root.saveGlobal.breakTab3[typeID] = false;
                _root.saveGlobal.breakTab4[typeID] = false;
                _root.saveGlobal.breakAll[typeID] = false;
                _root.saveGlobal.breakFeature[typeID] = false;
              } else {
                _root.saveGlobal.breakTab1[typeID] = false;
                _root.saveGlobal.breakTab2[typeID] = false;
                _root.saveGlobal.breakTab3[typeID] = false;
                _root.saveGlobal.breakTab4[typeID] = false;
                _root.saveGlobal.breakAll[typeID] = false;
                _root.saveGlobal.breakFeature[typeID] = false;
              }
            }
          }
        }
        if (feature == 0) {
          _root.saveGlobal.breakFeature[typeID] = false;
        }
        _root.saveGlobal.breakR[typeID] = Math.floor(defaultColor / 65536);
        _root.saveGlobal.breakG[typeID] = Math.floor((defaultColor - _root.saveGlobal.breakR[typeID] * 65536) / 256);
        _root.saveGlobal.breakB[typeID] = Math.floor(defaultColor - _root.saveGlobal.breakR[typeID] * 65536 - _root.saveGlobal.breakG[typeID] * 256);
      }
    }

    _root.newsCount = 0;
    _root.newsID = new Array();
    _root.newsFeature = new Array();
    _root.newsSauceName = new Array();
    addNewsType(0, 0, 0, 0, 'GENERAL');
    addNewsType(1, 0, 4, 16711680, 'System messages (recommended)');
    addNewsType(167, 0, 4, 10092441, 'EXP bar information');
    addNewsType(163, 0, 3, 16777215, 'When I gain White Coins');
    addNewsType(159, 0, 3, 13434624, 'Speedrun / Challenge Mode information');
    addNewsType(2, 0, 3, 16776960, 'When I level up');
    addNewsType(3, 0, 3, 16776960, 'When I earn an achievement');
    addNewsType(155, 0, 3, 13434879, 'When I gain Event Tokens');
    addNewsType(0, 0, 0, 0, 'PROGRESS BAR');
    addNewsType(4, 0, 1, 16768460, 'When I claim a reward');
    addNewsType(5, 0, 1, 16768460, 'When I claim multiple rewards');
    addNewsType(6, 0, 1, 16768460, 'When I gain free Boost');
    addNewsType(7, 0, 1, 16768460, 'When I gain additional login rewards');
    addNewsType(8, 0, 1, 16768460, 'When Epic Skill \'Double Progress\' activates');
    addNewsType(9, 0, 1, 16768460, 'When Epic Skill \'Boost Charger\' activates');
    addNewsType(10, 0, 1, 16768460, 'When Epic Skill \'Coin Collector\' activates');
    addNewsType(11, 0, 1, 16768460, 'When Epic Skill \'Battery Booster\' activates');
    addNewsType(12, 0, 1, 16768460, 'When Epic Skill \'Fanatical Fisher\' activates');
    addNewsType(13, 0, 1, 16768460, 'When Epic Skill \'Module Master\' activates');
    addNewsType(184, 0, 1, 16768460, 'When Epic Skill \'Cyborg Charger\' activates');
    addNewsType(15, 0, 2, 16776960, 'When I upgrade my Progress Bar Speed');
    addNewsType(0, 0, 0, 0, 'FEATURE SHOP');
    addNewsType(14, 0, 2, 16776960, 'When I buy a new feature');
    addNewsType(0, 0, 0, 0, 'GARDEN');
    addNewsType(18, 6, 2, 10092441, 'When I plant new trees');
    addNewsType(19, 6, 3, 10092441, 'When I harvest my trees');
    addNewsType(20, 6, 4, 16711680, 'When my trees expire');
    addNewsType(21, 6, 2, 10092441, 'When I find Randomfruit');
    addNewsType(22, 6, 2, 10092441, 'When I find seeds for Another Garden');
    addNewsType(23, 6, 2, 10092441, 'When I use (Mega) Fertilizers');
    addNewsType(172, 6, 2, 10092441, 'When I eat or sell Randomfruit');
    addNewsType(24, 6, 2, 16711680, 'When I expand my Garden');
    addNewsType(0, 0, 0, 0, 'BATTLE ARENA');
    addNewsType(25, 7, 3, 16776960, 'When my Rank increases');
    addNewsType(26, 7, 3, 16776960, 'When Robacon / Robroccoli\'s Rank increases');
    addNewsType(27, 7, 1, 16751001, 'When a non-boss monster appears');
    addNewsType(28, 7, 2, 16751103, 'When a boss monster appears');
    addNewsType(29, 7, 2, 16751001, 'When a monster is defeated');
    addNewsType(30, 7, 2, 16751001, 'When I receive Bestiary bonus');
    addNewsType(31, 7, 2, 16751001, 'When I receive Invisible Ally bonus');
    addNewsType(32, 7, 3, 16776960, 'When a Bestiary entry levels up');
    addNewsType(33, 7, 2, 13421772, 'When my Invisible Ally gains EXP');
    addNewsType(34, 7, 3, 16776960, 'When my Invisible Ally is mastered');
    addNewsType(35, 7, 3, 16776960, 'When I tame an Invisible Ally');
    addNewsType(36, 7, 2, 16764057, 'When I loot Superior Crafting Material');
    addNewsType(37, 7, 2, 16764057, 'When I loot Unobtainium');
    addNewsType(38, 7, 2, 16764057, 'When I loot Enhancer Fragments');
    addNewsType(39, 7, 2, 16764057, 'When I loot Chaotic Fragments of Chaos');
    addNewsType(40, 7, 2, 16764057, 'When I loot To-be-Nerfed Gems');
    addNewsType(41, 7, 2, 16764057, 'When I loot Bacon / Broccoli');
    addNewsType(42, 7, 2, 16764057, 'When I loot Crystals of Rarity');
    addNewsType(43, 7, 2, 16764057, 'When I loot Crystals of Ultimate Rarity');
    addNewsType(181, 7, 2, 16764057, 'When I loot Regular Boost Potions');
    addNewsType(182, 7, 2, 16764057, 'When I loot Mega Boost Potions');
    addNewsType(44, 7, 3, 16776960, 'When I loot a new Ring');
    addNewsType(45, 7, 2, 16764057, 'When I loot a Ring (replaced with Pixels)');
    addNewsType(46, 7, 3, 16776960, 'When I loot a Recipe');
    addNewsType(47, 7, 3, 16776960, 'When I loot a Skill Scroll or extra SP');
    addNewsType(48, 7, 3, 16776960, 'When I loot a Skill Book');
    addNewsType(49, 7, 3, 14535680, 'When I get a Weapon');
    addNewsType(50, 7, 3, 14535680, 'When I get an Armor');
    addNewsType(51, 7, 3, 14535680, 'When I get an Accessory');
    addNewsType(52, 7, 3, 14535680, 'When I get an Enhancer');
    addNewsType(53, 7, 3, 14535680, 'When I get a Potion');
    addNewsType(54, 7, 3, 14535680, 'When I get an Outfit');
    addNewsType(170, 7, 3, 14535680, 'When I get a Chip');
    addNewsType(55, 7, 3, 16711680, 'When a Weapon is deleted due to full inventory');
    addNewsType(56, 7, 3, 16711680, 'When an Armor is deleted due to full inventory');
    addNewsType(57, 7, 3, 16711680, 'When an Accessory is deleted due to full inventory');
    addNewsType(58, 7, 3, 16711680, 'When an Enhancer is deleted due to full inventory');
    addNewsType(59, 7, 3, 16711680, 'When a Potion is deleted due to full inventory');
    addNewsType(60, 7, 3, 16711680, 'When an Outfit is deleted due to full inventory');
    addNewsType(171, 7, 3, 16711680, 'When a Chip is deleted due to full inventory');
    addNewsType(61, 7, 2, 13434624, 'When I enhance an item');
    addNewsType(62, 7, 2, 13434624, 'When my equipment levels up');
    addNewsType(63, 7, 3, 16711680, 'When my equipment expires');
    addNewsType(64, 7, 2, 16776960, 'When I purchase additional raid entries');
    addNewsType(65, 7, 3, 16711680, 'When I get killed');
    addNewsType(168, 7, 3, 65535, 'When I throw To-be-Nerfed Gems');
    addNewsType(66, 7, 3, 65535, 'Other Battle Arena messages (recommended)');
    addNewsType(0, 0, 0, 0, 'BUTTON MACHINE');
    addNewsType(67, 8, 2, 13421721, 'When I get a Perfect click');
    addNewsType(68, 8, 2, 13421721, 'When the button breaks');
    addNewsType(69, 8, 3, 16776960, 'When I get an Explosion Crate from the Button');
    addNewsType(70, 8, 3, 16776960, 'When I get an Awesome Crate from the Button');
    addNewsType(71, 8, 3, 16776960, 'When I get a Chaos Crate from the Button');
    addNewsType(72, 8, 3, 16776960, 'When I get a Legendary Box from the Button');
    addNewsType(73, 8, 2, 13421721, 'When I repair the button');
    addNewsType(74, 8, 2, 16776960, 'When I buy items from the Button Machine Shop');
    addNewsType(0, 0, 0, 0, 'MONEY PRINTER');
    addNewsType(75, 9, 2, 16777164, 'When some Coins are printed');
    addNewsType(76, 9, 2, 65280, 'When some Green Coins are printed');
    addNewsType(77, 9, 2, 16776960, 'When I upgrade the Money Printer');
    addNewsType(156, 9, 3, 16711680, 'When Battery is low');
    addNewsType(157, 9, 4, 16711680, 'When Battery runs out');
    addNewsType(0, 0, 0, 0, 'ARCADE');
    addNewsType(78, 10, 2, 13421772, '[Pong] Hit');
    addNewsType(79, 10, 2, 15658734, '[Pong] Goal');
    addNewsType(80, 10, 2, 13421772, '[Avoidance] Avoided');
    addNewsType(81, 10, 2, 13421772, '[Math] Correct');
    addNewsType(82, 10, 2, 14540253, '[Math] Nice');
    addNewsType(83, 10, 2, 15658734, '[Math] Excellent');
    addNewsType(84, 10, 2, 13421772, '[Whack] Good');
    addNewsType(85, 10, 2, 14540253, '[Whack] Great');
    addNewsType(86, 10, 2, 15658734, '[Whack] Perfect');
    addNewsType(87, 10, 2, 15658734, '[Whack] Awesome');
    addNewsType(88, 10, 2, 13421772, '[Mind] EXP found');
    addNewsType(89, 10, 2, 15658734, '[Mind] Goal found');
    addNewsType(90, 10, 2, 13421772, '[Balance] Blocks destroyed');
    addNewsType(91, 10, 2, 14540253, '[Count] Stage cleared');
    addNewsType(92, 10, 2, 15658734, '[Count] Confidence bonus');
    addNewsType(93, 10, 2, 13421772, '[MMR] Good');
    addNewsType(94, 10, 2, 14540253, '[MMR] Great');
    addNewsType(95, 10, 2, 15658734, '[MMR] Perfect');
    addNewsType(96, 10, 2, 15658734, '[MMR] Fever bonus');
    addNewsType(97, 10, 3, 16777215, 'Final result');
    addNewsType(161, 10, 3, 13382400, 'When I gain Arcade 100k Medals');
    addNewsType(98, 10, 2, 16776960, 'When I buy items from the Arcade shop');
    addNewsType(0, 0, 0, 0, 'STADIUM');
    addNewsType(99, 11, 2, 10079487, 'When I use items');
    addNewsType(100, 11, 2, 8961006, 'When opponents use items');
    addNewsType(101, 11, 3, 13434879, 'When I KO opponent in Death Match');
    addNewsType(102, 11, 3, 12316398, 'When opponent KOs me in Death Match');
    addNewsType(103, 11, 3, 13434879, 'Final result');
    addNewsType(104, 11, 2, 16776960, 'When I buy items from the Stadium shop');
    addNewsType(0, 0, 0, 0, 'TUKKUNFCG');
    addNewsType(105, 12, 3, 65535, 'Final result');
    addNewsType(106, 12, 3, 16776960, 'When my FCG Level increases');
    addNewsType(0, 0, 0, 0, 'LOLMARKET');
    addNewsType(107, 13, 1, 16777113, 'When prices change');
    addNewsType(108, 13, 2, 16777113, 'When I purchase gems');
    addNewsType(109, 13, 2, 16777113, 'When I sell gems');
    addNewsType(110, 13, 3, 16776960, 'When LolMarket capacity increases');
    addNewsType(0, 0, 0, 0, 'AWESOME ADVENTURES');
    addNewsType(111, 14, 2, 65535, 'When I adventure');
    addNewsType(112, 14, 3, 65535, 'When I gain Energy');
    addNewsType(113, 14, 2, 65535, 'When my Reputation changes');
    addNewsType(114, 14, 2, 16776960, 'When I buy items from the Awesome Shop');
    addNewsType(0, 0, 0, 0, 'FISHING');
    addNewsType(115, 22, 2, 153, 'When I fail to catch something');
    addNewsType(116, 22, 2, 3355596, 'When I get a non-perfect catch');
    addNewsType(117, 22, 2, 6711039, 'When I get a perfect catch');
    addNewsType(162, 22, 3, 13369599, 'When I gain bonus LEGEND EXP');
    addNewsType(118, 22, 2, 10066431, 'When I gain Mastery');
    addNewsType(119, 22, 3, 16776960, 'When I open Treasure Boxes');
    addNewsType(120, 22, 2, 16776960, 'When I raise Skill or Bucket Capacity');
    addNewsType(0, 0, 0, 0, 'DRAGON OF WISDOM');
    addNewsType(121, 19, 1, 11184810, 'When I feed the Dragon of Wisdom');
    addNewsType(122, 19, 3, 16776960, 'When I receive Dragon Feeding Reward');
    addNewsType(123, 19, 3, 16776960, 'When I claim Level Up Reward');
    addNewsType(0, 0, 0, 0, 'MYSTERY BOXES');
    addNewsType(124, 17, 1, 10066329, 'When I open empty Gambler\'s Boxes or get a refund');
    addNewsType(164, 17, 3, 13421568, 'When I open Legendary Boxes');
    addNewsType(165, 17, 3, 13421568, 'When I open Attendance Boxes');
    addNewsType(166, 17, 3, 13421568, 'When I open Supply Crates');
    addNewsType(125, 17, 2, 16776960, 'When I receive a Common prize');
    addNewsType(126, 17, 3, 15658496, 'When I receive an Uncommon prize');
    addNewsType(127, 17, 3, 13421568, 'When I receive a Rare prize');
    addNewsType(183, 17, 3, 13369599, 'When I receive a Mega Boost Potion from Progress Boxes');
    addNewsType(0, 0, 0, 0, 'CARDS');
    addNewsType(128, 18, 2, 14548736, 'When I activate a Card');
    addNewsType(129, 18, 4, 16711680, 'When a Card is deactivated');
    addNewsType(130, 18, 2, 14548736, 'When I trade a Card for Legendary Boxes');
    addNewsType(0, 0, 0, 0, 'CAREER');
    addNewsType(131, 0, 2, 39423, 'When I gain \'Idler\' Career EXP');
    addNewsType(132, 6, 2, 39423, 'When I gain \'Gardener\' Career EXP');
    addNewsType(133, 7, 2, 39423, 'When I gain \'Fighter\' Career EXP');
    addNewsType(134, 7, 2, 39423, 'When I gain \'Item Maker\' Career EXP');
    addNewsType(135, 8, 2, 39423, 'When I gain \'Button Basher\' Career EXP');
    addNewsType(136, 10, 2, 39423, 'When I gain \'Arcade Player\' Career EXP');
    addNewsType(137, 11, 2, 39423, 'When I gain \'Racer\' Career EXP');
    addNewsType(138, 12, 2, 39423, 'When I gain \'Card Player\' Career EXP');
    addNewsType(139, 13, 2, 39423, 'When I gain \'Gem Trader\' Career EXP');
    addNewsType(140, 14, 2, 39423, 'When I gain \'Adventurer\' Career EXP');
    addNewsType(141, 0, 2, 39423, 'When I gain \'Pet Trainer\' Career EXP');
    addNewsType(142, 22, 2, 39423, 'When I gain \'Fisher\' Career EXP');
    addNewsType(143, 0, 1, 39423, 'When I receive Blessing Bonus');
    addNewsType(144, 0, 3, 16776960, 'When a Career levels up');
    addNewsType(145, 0, 4, 16711680, 'When a Career is deactivated');
    addNewsType(158, 0, 4, 16711680, 'When a Career runs out of blessing time');
    addNewsType(0, 0, 0, 0, 'PET');
    addNewsType(146, 0, 2, 16737792, 'When my Pet gains Fullness');
    addNewsType(147, 0, 2, 16737792, 'When my Pet gains Health');
    addNewsType(148, 0, 2, 16737792, 'When my Pet gains Mana');
    addNewsType(149, 0, 3, 13382400, 'When my Pet loses Fullness');
    addNewsType(150, 0, 3, 13382400, 'When my Pet loses Health');
    addNewsType(151, 0, 3, 16711680, 'When my Pet\'s Fullness is low');
    addNewsType(152, 0, 4, 16711680, 'When my Pet\'s Health is low');
    addNewsType(153, 0, 4, 16711680, 'When my Pet dies');
    addNewsType(154, 0, 3, 16776960, 'When I use my Pet\'s Mad Skillz');
    addNewsType(173, 0, 2, 16711680, 'Overfeeding warning');
    addNewsType(0, 0, 0, 0, 'SIMULATION CYBORG');
    addNewsType(174, 0, 3, 12303359, 'When you gain Cyborg Points');
    addNewsType(175, 0, 3, 12303359, 'When Cyborg finishes an action');
    addNewsType(176, 0, 4, 16711680, 'When Simulation Cyborg is paused');
    addNewsType(177, 0, 4, 16776960, 'When Simulation Cyborg continues working');
    addNewsType(178, 0, 4, 16711680, 'When Simulation Cyborg finishes working');
    addNewsType(179, 0, 2, 12303359, 'When Simulation Cyborg gains EXP');
    addNewsType(180, 0, 3, 16776960, 'When Simulation Cyborg levels up');
    addNewsType(0, 0, 0, 0, 'TECHNICAL LIGHTS');
    addNewsType(160, 0, 4, 13421823, 'Variable Tracking');
  }

  frame 7 {
    function verif(username, saveID, refCode) {
      if (_root.kongregate_username == username) {
        _root.verifyA = saveID;
        _root.verifyB = refCode;
      }
    }

    function addEvent(rating, year, month, date, eventName) {
      _root.eventRating[year][month][date] += rating;
      _root.eventList[year][month][date][0] += 1;
      _root.eventList[year][month][date].push(eventName);
    }

    function overrideEvent(year, month, date) {
      _root.eventRating[year][month][date] = 0;
      _root.eventList[year][month][date] = new Array();
      _root.eventList[year][month][date][0] = 0;
    }

    function displayEvent(year, month, date) {
      temp = '';
      i = 1;
      while (i <= _root.eventList[year][month][date][0]) {
        temp += '* ' + _root.eventList[year][month][date][i] + '\n';
        ++i;
      }
      return temp;
    }

    function addRedCoin(user, amount, reason) {
      if (_root.kongregate_username == user) {
        _root.contributorRC += amount;
        _root.rcEarnLog += '\n' + amount + ' Red Coins / Reason: ' + reason;
      }
    }

    function banhammer(user, reason) {
      if (_root.kongregate_username == user || user == '[everyone]') {
        _root.canPlay = false;
        _root.banReason += reason + '\n';
      }
    }

    _root.verifyA = -1;
    _root.verifyB = -1;
    verif('Enyoeris', 0, 114858107);
    verif('Rndom_Gy_159', 0, 186111787);
    verif('Stormseeker71', 0, 156434967);
    verif('Vidkid88', 0, 90837367);
    verif('Cyrenics', 0, 115905707);
    verif('DeamonElementia', 0, 102627127);
    verif('ExSane', 2, 193916967);
    verif('IlPadrino72', 0, 204503747);
    verif('Wikke', 0, 85040647);
    verif('Truzyxx', 1, 111615707);
    verif('lolepolman', 0, 92694807);
    verif('Mebbo', 1, 120636787);
    verif('emokid69', 0, 133339037);
    verif('BTlover', 0, 138602047);
    verif('topher556', 0, 154085287);
    verif('DJxJDx', 1, 121236617);
    verif('Preebs', 0, 124711627);
    verif('DragonJareth', 0, 146844287);
    verif('irainsupreme', 0, 149346127);
    verif('RebirthofJimmy', 0, 181795207);
    verif('Youryou', 0, 153239457);
    verif('Xfrogman43', 0, 199206707);
    verif('nafia1', 0, 154947397);
    verif('ildfugl', 1, 140313007);
    verif('Xomps', 0, 166238527);
    verif('ZahazaI', 0, 156945237);
    verif('ladyunicornejg', 1, 158455887);
    verif('GianniB5', 0, 143325487);
    verif('Kibs', 3, 168976207);
    verif('Sionyx', 1, 123011357);
    verif('tohrik', 0, 165595367);
    verif('Adamqs', 1, 186518557);
    verif('falcorn', 0, 153593447);
    verif('Dxb105', 0, 213443167);
    verif('Karl7772000', 0, 177078337);
    verif('b0terham', 0, 132152587);
    verif('kasisu1910', 0, 141733357);
    verif('figweb', 1, 166157747);
    verif('Hyssop', 0, 125042187);
    verif('cabbage42', 0, 153991087);
    verif('IlPadrino72', 3, 204503747);
    verif('adyman', 0, 225303557);
    verif('Thedem', 1, 168316967);
    verif('alberik', 0, 224303287);
    verif('Nageki', 3, 165638207);
    verif('ChampionofAiur', 0, 221247607);
    verif('Dragunlord13', 0, 238917757);
    verif('baaata', 0, 186818107);
    verif('Connor98master', 0, 239298087);
    verif('Kibs', 0, 168976207);
    verif('laguna4ever', 0, 254923207);
    verif('ForTexi', 0, 167817587);
    verif('Mfgdjyb', 0, 193387207);
    verif('MustardFTW', 0, 188922727);
    verif('Dave1004', 0, 179597327);
    verif('Jacob54321', 0, 199766707);
    verif('diegowned', 0, 209723107);
    verif('hawkcannon', 0, 238254567);
    verif('minttheman', 0, 246965127);
    verif('sprwalsh', 0, 184062067);
    verif('Di684haha', 3, 238437127);
    verif('Tuhats', 0, 167590507);
    verif('123x1111', 0, 192953607);
    verif('miller', 0, 213657537);
    verif('AirSalad', 0, 178724567);
    verif('johnlajoie', 1, 239823847);
    verif('Mrmoocowman', 0, 201012707);
    verif('ZahazaI', 1, 172824547);
    verif('Cify', 1, 157972507);
    verif('janvar', 0, 171371627);
    verif('lokodoko', 0, 193187557);
    verif('McGilroy', 1, 174030367);
    verif('stingrayjayz', 0, 223386667);
    verif('Soul_Reaper_25', 0, 223013287);
    verif('cgrain', 1, 165638207);
    verif('7g569d', 0, 227411387);
    verif('kloip', 0, 207798657);
    verif('paladari', 0, 220804487);
    _root.eventList = new Array();
    _root.eventRating = new Array();
    i = 0;
    while (i <= 9) {
      _root.eventList[i] = new Array();
      _root.eventRating[i] = new Array();
      j = 1;
      while (j <= 12) {
        _root.eventList[i][j] = new Array();
        _root.eventRating[i][j] = new Array();
        k = 1;
        while (k <= 31) {
          _root.eventList[i][j][k] = new Array();
          _root.eventRating[i][j][k] = 0;
          _root.eventList[i][j][k][0] = 1;
          _root.eventList[i][j][k][1] = 'Receive 10 Event Tokens every 5 minutes you play';
          ++k;
        }
        ++j;
      }
      ++i;
    }
    i = 0;
    while (i <= 9) {
      addEvent(3, i, 1, 1, 'Gain 100% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(3, i, 1, 2, 'Gain 100% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 2, 14, 'Gain 50% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(2, i, 2, 14, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(4, i, 5, 7, 'Gain 200% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(4, i, 5, 8, 'Gain 200% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 20, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 21, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 22, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 23, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(4, i, 12, 24, 'Gain 200% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(4, i, 12, 25, 'Gain 200% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 26, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 27, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 28, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 29, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 30, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(3, i, 12, 31, 'Gain 100% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
      addEvent(2, i, 12, 20, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 21, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 22, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 23, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 24, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 25, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 26, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 27, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 28, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 29, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 30, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(2, i, 12, 31, 'Gain 50% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
      addEvent(4, i, 1, 23, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 1, 31, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 2, 21, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 3, 19, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 3, 29, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 4, 17, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 4, 28, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 5, 15, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 5, 27, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 6, 13, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 6, 26, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 7, 11, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 7, 25, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 8, 9, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 8, 24, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 9, 7, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 9, 23, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 10, 5, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 10, 22, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 11, 3, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 11, 21, '2x Drop Rate in Battle Arena');
      addEvent(2, i, 12, 1, '1.5x Drop Rate in Battle Arena');
      addEvent(4, i, 12, 24, '2x Drop Rate in Battle Arena');
      addEvent(4, i, 2, 1, '4x Superior Crafting Material from loot drops in Battle Arena');
      addEvent(4, i, 3, 1, '4x Unobtainium from loot drops in Battle Arena');
      addEvent(4, i, 5, 1, '1.5x Career EXP gain');
      addEvent(4, i, 6, 1, '4x Coin from loot drops in Battle Arena');
      addEvent(4, i, 7, 1, '4x Green Coin from loot drops in Battle Arena');
      addEvent(4, i, 8, 1, '4x Blue Coin from loot drops in Battle Arena');
      addEvent(4, i, 9, 1, '4x Enhancer Fragment from loot drops in Battle Arena');
      addEvent(4, i, 10, 1, '4x Pixel from loot drops in Battle Arena');
      addEvent(4, i, 11, 1, '4x Crafting Material from loot drops in Battle Arena');
      addEvent(1, i, 1, 1, 'Receive Event Tokens by claiming rewards');
      addEvent(3, i, 1, 1, 'Daily Event Token limit is increased by 800');
      addEvent(1, i, 2, 14, 'Receive Event Tokens by killing boss monsters');
      addEvent(3, i, 2, 14, 'Daily Event Token limit is increased by 800');
      addEvent(1, i, 5, 7, 'Receive Event Tokens by claiming rewards');
      addEvent(3, i, 5, 7, 'Daily Event Token limit is increased by 800');
      addEvent(1, i, 5, 8, 'Receive Event Tokens by claiming rewards');
      addEvent(3, i, 5, 8, 'Daily Event Token limit is increased by 800');
      addEvent(1, i, 10, 30, 'Receive Event Tokens by killing undead monsters');
      addEvent(1, i, 10, 30, 'Daily Event Token limit is increased by 300');
      addEvent(1, i, 10, 31, 'Receive Event Tokens by killing undead monsters');
      addEvent(1, i, 10, 31, 'Daily Event Token limit is increased by 300');
      j = 1;
      while (j <= 12) {
        addEvent(1, i, j, 3, 'Progress Bar fills at full speed, even when Idle Mode is on');
        addEvent(1, i, j, 6, 'Wait time to harvest trees in Garden is reduced by 25%');
        addEvent(1, i, j, 6, 'Receive Event Tokens by harvesting trees');
        addEvent(1, i, j, 6, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 8, 'Gain 1.5x EXP from TukkunFCG');
        addEvent(1, i, j, 8, 'Receive Event Tokens by winning in TukkunFCG');
        addEvent(1, i, j, 8, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 12, 'Gain 1.5x EXP from Stadium');
        addEvent(1, i, j, 12, 'Receive Event Tokens by winning in Stadium');
        addEvent(1, i, j, 12, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 14, 'Gain 1.5x EXP from Fishing');
        addEvent(1, i, j, 14, 'Receive Event Tokens by fishing');
        addEvent(1, i, j, 14, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 20, 'Gain 1.5x EXP from Arcade');
        addEvent(1, i, j, 20, 'Receive Event Tokens by playing games in Arcade');
        addEvent(1, i, j, 20, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 24, 'Gain 1.5x EXP from Button Machine');
        addEvent(1, i, j, 24, 'Receive Event Tokens by pressing the Button Machine');
        addEvent(1, i, j, 24, 'Daily Event Token limit is increased by 300');
        addEvent(1, i, j, 28, 'Wait time for Adventure Energy is reduced by 25%');
        addEvent(1, i, j, 28, 'Receive Event Tokens by adventuring in Awesome Adventures');
        addEvent(1, i, j, 28, 'Daily Event Token limit is increased by 300');
        k = 1;
        while (k <= 31) {
          if (_root.eventRating[i][j][k] == 0) {
            if ((i + j + k) % 8 <= 4) {
              addEvent(1, i, j, k, 'Gain 25% more EXP from all sources except the Progress Bar, LolMarket and Awesome Adventures');
            } else {
              addEvent(1, i, j, k, 'Gain 25% more Coins from all sources except the Progress Bar, Garden, LolMarket and Fishing');
            }
          }
          if ((i + j + k) % 16 == 2) {
            addEvent(1, i, j, k, 'Gain 1.5x EXP from Secret Dungeon area in Battle Arena');
          }
          if ((i + j + k) % 16 == 6) {
            addEvent(1, i, j, k, 'Gain 1.5x EXP from The Corruption area in Battle Arena');
          }
          if ((i + j + k) % 16 == 10) {
            addEvent(1, i, j, k, 'Gain 1.5x EXP from Endless Dungeon area in Battle Arena');
          }
          if ((i + j + k) % 16 == 14) {
            addEvent(1, i, j, k, 'Gain 1.5x EXP from The Corruption area in Battle Arena');
          }
          ++k;
        }
        ++j;
      }
      ++i;
    }
    _root.todayEvent = 0;
    _root.autoUpdateTime = [0, 1354114800000.0, 1356034320000.0, Infinity];
    _root.challengeTime = [0, 1374788220000.0, 1390685820000.0, 1393364220000.0, 1398461820000.0, 1427319420000.0, 1469482620000.0, Infinity];
    _root.eventStartTime = [0, 1450810800000.0, 1458154800000.0, 1477335600000.0, Infinity];
    _root.eventEndTime = [0, 1451628000000.0, 1459404000000.0, 1478930400000.0, Infinity];
    _root.eventArmorName = ['', 'Festive', 'Choco', 'Lantern', ''];
    _root.eventArmorFrame = [0, 178, 179, 180, 0];
    _root.contributorRC = 0;
    _root.rcEarnLog = _root.kongregate_username + '\'s Red Coin earning log:';
    _root.banReason = '';
    _root.canPlay = true;
    banhammer('liooi', 'Using a bot to click the Button Machine way too much and destroying leaderboards - nearly 70% perfect clicks out of 15 million clicks.');
    banhammer('1000deathz', 'Ascending 19 times in 11 days and getting too much EXP and destroying leaderboards.');
    banhammer('baba1029', 'Having 225 million Garden EXP with less than 500 trees harvested and destroying leaderboards.');
    banhammer('pingpong1', 'Unreasonable EXP gain rate.');
    banhammer('emmett050', 'Unreasonable EXP gain rate.');
    banhammer('hho1', 'Totally legitimate scores... no.');
    banhammer('jksthe2nd', 'Reaching level 181 in TukkunFCG.');
    banhammer('fabiogunit', 'Reaching level 200 in TukkunFCG.');
    banhammer('lonestar1313', 'Destroying leaderboards. Many of them.');
    banhammer('darkaos', 'Clicking the Button Machine way too much.');
    banhammer('LODgunther', 'Ascending 1000 times.');
    banhammer('sharkyscape', 'Getting way too much EXP.');
    banhammer('Sallokin', 'Getting way too much EXP.');
    banhammer('soonzzx', 'Getting way too much EXP.');
    banhammer('J13H', 'Getting way too much EXP.');
    banhammer('maxxox', 'Getting way too much EXP.');
    banhammer('Gnomish', 'Getting way too much EXP.');
    banhammer('cifaela', 'Getting way too much EXP.');
    banhammer('kokokids', 'Getting way too much EXP.');
    banhammer('draster', 'Getting way too much Garden EXP.');
    banhammer('sharkyscape', 'Getting way too much Garden EXP.');
    banhammer('Sallokin', 'Getting way too much Garden EXP.');
    banhammer('Scithen', 'Getting way too much Garden EXP.');
    banhammer('Jiby', 'Leaderboard hacking.');
    banhammer('aetherdrom', 'Leaderboard hacking.');
    banhammer('LLSF', 'Leaderboard hacking.');
    banhammer('maredin', 'Leaderboard hacking.');
    banhammer('edgefei', 'Leaderboard hacking.');
    banhammer('RealFaker', 'Leaderboard hacking.');
    banhammer('bazke', 'Leaderboard hacking.');
    banhammer('celestior', 'Leaderboard hacking.');
    banhammer('draster', 'Killing way too many monsters.');
    banhammer('twiggy7711', 'Killing way too many monsters.');
    banhammer('MagicChopstick', 'Killing 41 million monsters, over 90% of which are bosses, while looting only 1 million items. Seriously, it\'s not funny.');
    banhammer('mikedp1', 'Impossible Arcade score.');
    banhammer('chksec', 'Impossible Arcade score.');
    banhammer('ZeoNFrosT', 'Impossible Arcade score.');
    banhammer('Sansuki', 'Reaching level 200 in TukkunFCG.');
    banhammer('masterzgar', 'Getting way too much LolMarket profit.');
    banhammer('SweeneyTodd91', 'Hacking to get impossible raid scores.');
    banhammer('mastermind_3000', 'Excessive hacking.');
    banhammer('tmls12', 'Rebirthing 243 million times.');
    banhammer('donkey4', 'Hacking.');
    banhammer('CristianFarF', 'Hacking.');
    addRedCoin('daf520', 2000, 'Completing Survey');
    addRedCoin('Techwarrior', 2000, 'Completing Survey');
    addRedCoin('holyvyse', 2000, 'Completing Survey');
    addRedCoin('Mattgo90', 2000, 'Completing Survey');
    addRedCoin('VuleJr', 2000, 'Completing Survey');
    addRedCoin('sblabla', 2000, 'Completing Survey');
    addRedCoin('meshwire', 2000, 'Completing Survey');
    addRedCoin('galonski64', 2000, 'Completing Survey');
    addRedCoin('Bench', 2000, 'Completing Survey');
    addRedCoin('Trickymist98', 2000, 'Completing Survey');
    addRedCoin('r6a3nky', 2000, 'Completing Survey');
    addRedCoin('Thysiazo', 2000, 'Completing Survey');
    addRedCoin('Toa_of_Pi', 2000, 'Completing Survey');
    addRedCoin('baseballin', 2000, 'Completing Survey');
    addRedCoin('Zorae', 2000, 'Completing Survey');
    addRedCoin('aguspal', 2000, 'Completing Survey');
    addRedCoin('tiktik', 2000, 'Completing Survey');
    addRedCoin('Skyt', 2000, 'Completing Survey');
    addRedCoin('alexwoody', 2000, 'Completing Survey');
    addRedCoin('TFG50', 2000, 'Completing Survey');
    addRedCoin('Hao368', 2000, 'Completing Survey');
    addRedCoin('Darkranboria', 2000, 'Completing Survey');
    addRedCoin('Aax5', 2000, 'Completing Survey');
    addRedCoin('Ketchupyoshi', 2000, 'Completing Survey');
    addRedCoin('Redjar978', 2000, 'Completing Survey');
    addRedCoin('jefeesdios', 2000, 'Completing Survey');
    addRedCoin('Aethereal', 2000, 'Completing Survey');
    addRedCoin('mrkeki1', 2000, 'Completing Survey');
    addRedCoin('Mephistic', 2000, 'Completing Survey');
    addRedCoin('frae2', 2000, 'Completing Survey');
    addRedCoin('EsotericaVirtue', 2000, 'Completing Survey');
    addRedCoin('scarp', 2000, 'Completing Survey');
    addRedCoin('Deathwing11', 2000, 'Completing Survey');
    addRedCoin('Gramexer', 2000, 'Completing Survey');
    addRedCoin('Feb2', 2000, 'Completing Survey');
    addRedCoin('Jip137', 2000, 'Completing Survey');
    addRedCoin('camperdave', 2000, 'Completing Survey');
    addRedCoin('Kralis', 2000, 'Completing Survey');
    addRedCoin('Luigi03', 2000, 'Completing Survey');
    addRedCoin('Picklebreath', 2000, 'Completing Survey');
    addRedCoin('slogsdon', 2000, 'Completing Survey');
    addRedCoin('Barbaleki', 2000, 'Completing Survey');
    addRedCoin('Xx1Zero1xX', 2000, 'Completing Survey');
    addRedCoin('a1choi', 2000, 'Completing Survey');
    addRedCoin('Huntragon', 2000, 'Completing Survey');
    addRedCoin('Midknight226', 2000, 'Completing Survey');
    addRedCoin('Enderjmu', 2000, 'Completing Survey');
    addRedCoin('Finnis21', 2000, 'Completing Survey');
    addRedCoin('Pokerhappy', 2000, 'Completing Survey');
    addRedCoin('Uoteau', 2000, 'Completing Survey');
    addRedCoin('Vigi', 2000, 'Completing Survey');
    addRedCoin('Tigerh318', 2000, 'Completing Survey');
    addRedCoin('Coolica', 2000, 'Completing Survey');
    addRedCoin('heWhoPwns', 2000, 'Completing Survey');
    addRedCoin('systempain', 2000, 'Completing Survey');
    addRedCoin('Tramp_Boy_2', 2000, 'Completing Survey');
    addRedCoin('mike2103', 2000, 'Completing Survey');
    addRedCoin('linusn', 2000, 'Completing Survey');
    addRedCoin('Bowshewicz', 2000, 'Completing Survey');
    addRedCoin('MrPidgey', 2000, 'Completing Survey');
    addRedCoin('xplodingpen3', 2000, 'Completing Survey');
    addRedCoin('Darthlord', 2000, 'Completing Survey');
    addRedCoin('Everyl', 2000, 'Completing Survey');
    addRedCoin('CoCollect', 2000, 'Completing Survey');
    addRedCoin('qlordz', 2000, 'Completing Survey');
    addRedCoin('Caps_Lock', 2000, 'Completing Survey');
    addRedCoin('Tonza0508', 2000, 'Completing Survey');
    addRedCoin('ChioreanTudor', 2000, 'Completing Survey');
    addRedCoin('Juski', 2000, 'Completing Survey');
    addRedCoin('richardlycn013', 2000, 'Completing Survey');
    addRedCoin('Pika2346', 2000, 'Completing Survey');
    addRedCoin('TrinityX', 2000, 'Completing Survey');
    addRedCoin('Bluji', 2000, 'Completing Survey');
    addRedCoin('Pimgd', 2000, 'Completing Survey');
    addRedCoin('Lordakin22', 2000, 'Completing Survey');
    addRedCoin('dch247', 2000, 'Completing Survey');
    addRedCoin('omoinoiadam', 2000, 'Completing Survey');
    addRedCoin('Salvator', 2000, 'Completing Survey');
    addRedCoin('Mebomb', 1400, 'Event Reward: Achievement Ideas');
    addRedCoin('skykingcst', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('TheBeast88', 800, 'Event Reward: Achievement Ideas');
    addRedCoin('Huntragon', 400, 'Event Reward: Achievement Ideas');
    addRedCoin('MiniMissile', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('arrggg', 400, 'Event Reward: Achievement Ideas');
    addRedCoin('Xx1Zero1xX', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('TotalMaverik', 1200, 'Event Reward: Achievement Ideas');
    addRedCoin('CoCollect', 800, 'Event Reward: Achievement Ideas');
    addRedCoin('JohnSteel', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('bladezor', 400, 'Event Reward: Achievement Ideas');
    addRedCoin('tuqui', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Yipiyuk', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Toudou1620', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('logon', 1000, 'Event Reward: Achievement Ideas');
    addRedCoin('Midknight226', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Jerot', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Skyt', 1000, 'Event Reward: Achievement Ideas');
    addRedCoin('Ketchupyoshi', 3200, 'Event Reward: Achievement Ideas');
    addRedCoin('MegaLamb', 1000, 'Event Reward: Achievement Ideas');
    addRedCoin('Gabeee', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Lordakin22', 400, 'Event Reward: Achievement Ideas');
    addRedCoin('coco3366az', 600, 'Event Reward: Achievement Ideas');
    addRedCoin('Darkruler2005', 1000, 'Event Reward: Achievement Ideas');
    addRedCoin('dragonewyn', 59000, 'Being awesome.');
    addRedCoin('SumYungGai', 500, 'Being awesome.');
    addRedCoin('Salvator', 1000, 'Being awesome.');
    addRedCoin('HeroicHero', 1500, 'Being awesome.');
    addRedCoin('Postronicman', 300, 'Being awesome.');
    addRedCoin('kirdaiht', 2000, 'Being awesome.');
    addRedCoin('ChioreanTudor', 2000, 'Being awesome.');
    addRedCoin('Toudou1620', 2000, 'Being awesome.');
    addRedCoin('Ryo_Sangnoir', 1500, 'Being awesome.');
    addRedCoin('Randomthought31', 2000, 'Being awesome.');
    addRedCoin('CTSG', 2000, 'Being awesome.');
    addRedCoin('truefire', 3000, 'Being awesome.');
    addRedCoin('Darkranboria', 2000, 'Being awesome.');
    addRedCoin('lobstershow', 30000, 'Being awesome.');
    addRedCoin('CoCollect', 40000, 'Being awesome.');
    addRedCoin('skykingcst', 2000, 'Being awesome.');
    addRedCoin('Dzonis', 800, 'Being awesome.');
    addRedCoin('SumYungGai', 4000, 'Art Contribution');
    addRedCoin('Johannus', 6000, 'Art Contribution');
    addRedCoin('Mike1108', 5000, 'Art Contribution');
    addRedCoin('meshwire', 4000, 'Art Contribution');
    addRedCoin('Dragonayzer', 3000, 'Art Contribution');
    addRedCoin('FkidsPR', 2000, 'Art Contribution');
    addRedCoin('mikemage', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('happyman12', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('MrManner', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('fa20', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('thaicoconut', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('ZAchaPi', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('The_BBoH', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('happyman12', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('tornado', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('Torgar', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('tiktik', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('Natamora', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('clanfish', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('commendertrent', 2000, 'Refund for Maximum Boost bug');
    addRedCoin('KittehLover', 4000, 'Bug Report: Dropping Max Boost');
    addRedCoin('Skyt', 5000, 'Bug Report: Infinity Boost');
    addRedCoin('Darkruler2005', 3000, 'Bug Report: Infinity Boost');
    addRedCoin('CoCollect', 4500, 'Useful suggestion');
    addRedCoin('Bluji', 3000, 'Bug Report: Undefined reward');
    addRedCoin('coldkick', 3000, 'Bug Report: Super Battery exploit');
    addRedCoin('liosfan', 700, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('jew4life520', 700, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('PokerHappy', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('SpectralFlame', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('Bench', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('7smartone7', 700, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('Meepoo', 700, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('KittehLover', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('RikuFrost', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('aguspal', 1000, 'Completing Survey: v1300 - Battle Arena / Arcade balancing');
    addRedCoin('badgecrasher', 1000, 'Never gonna give you up...');
    addRedCoin('Balrogon', 1000, 'Never gonna give you up...');
    addRedCoin('XJoschYZ', 1000, 'Never gonna give you up...');
    addRedCoin('HeroicHero', 3500, 'Art Contribution');
    addRedCoin('gameinsky', 5500, 'Technical Help');
    addRedCoin('macseber', 2500, 'Bug Report: False monster encounter');
    addRedCoin('player2010abc', 2000, 'Bug Report: False monster encounter');
    addRedCoin('masterman229', 2000, 'Bug Report: False monster encounter');
    addRedCoin('Ligarius', 3500, 'Bug Report: Cannot purchase Stadium');
    addRedCoin('marina32121', 2000, 'Bug Report: Unable to change title');
    addRedCoin('cyclops398', 2000, 'Bug Report: Unable to kill Grinning Colossus');
    addRedCoin('SpectralFlame', 1500, 'Bug Report: False \'No Knockback\' upgrades.');
    addRedCoin('Skyt', 1500, 'derp derp derp');
    addRedCoin('SpectralFlame', 1500, 'derp derp derp');
    addRedCoin('loli_slayer', 700, 'Bug Report: False skill book display');
    addRedCoin('gem85', 700, 'Bug Report: False monster name');
    addRedCoin('Makilio', 1500, 'Bug Report: False skill book drop');
    addRedCoin('Toa_of_Pi', 1500, 'Bug Report: Unlimited oxygen');
    addRedCoin('zamble', 1500, 'Useful suggestion');
    addRedCoin('SpectralFlame', 1500, 'Useful suggestion');
    addRedCoin('zamble', 1500, 'Useful suggestion');
    addRedCoin('loli_slayer', 1500, 'Useful suggestion');
    addRedCoin('SlasherX', 1500, 'Useful suggestion');
    addRedCoin('RebornStupidity', 1500, 'Account switching (SlasherX)');
    addRedCoin('SpectralFlame', 500, 'Blah.');
    addRedCoin('freist', 2000, 'Bug Report: Epic Skills can be upgraded over max level');
    addRedCoin('fooods', 1000, 'Useful suggestion');
    addRedCoin('Skyt', 1000, 'Useful suggestion');
    addRedCoin('marina32121', 500, 'Bug Report: Test Pet feed display');
    addRedCoin('sabbut', 900, '[Test Version] Bug Report: Typo in item description');
    addRedCoin('KittehLover', 900, '[Test Version] Bug Report: Konami Code not working');
    addRedCoin('Meepoo', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('elchesko', 900, 'Event Reward: Naming Contest #3');
    addRedCoin('Piscataway44', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('MrManner', 800, 'Event Reward: Naming Contest #3');
    addRedCoin('pewbe', 500, 'Event Reward: Naming Contest #3');
    addRedCoin('Pimgd', 500, 'Event Reward: Naming Contest #3');
    addRedCoin('wecl0me12', 500, 'Event Reward: Naming Contest #3');
    addRedCoin('Toa_of_Pi', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Laxaria', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('Mebomb', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Bench', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Bluji', 400, 'Event Reward: Naming Contest #3');
    addRedCoin('Norhede', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('SpectralFlame', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('Thystonius', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Blauw', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Vara', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('gem85', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('freist', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('cuspcham', 500, 'Event Reward: Naming Contest #3');
    addRedCoin('SirStopp', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('PlayerPimp', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('zeo123200', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('DuncmanG', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('awein999', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('sabbut', 800, 'Event Reward: Naming Contest #3');
    addRedCoin('Pokerhappy', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('liosfan', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('soultaker7777', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('missingno', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('marina32121', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('pinkluver296', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('highscore', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Angried', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('Terichan', 700, 'Event Reward: Naming Contest #3');
    addRedCoin('RikuFrost', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('XenorBlight', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('durfat', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Toudou1620', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('azurebalmung', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Postronicman', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('Stompy40', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('phyroxx', 600, 'Event Reward: Naming Contest #3');
    addRedCoin('lennonluiz0907', 400, 'Event Reward: Naming Contest #3');
    addRedCoin('fooods', 1000, 'Bug report: Mega Rampage doesn\'t work with ranged weapons');
    addRedCoin('loli_slayer', 1000, 'Bug report: Negative healing');
    addRedCoin('DuncmanG', 1000, 'Bug report: Monsters drop weapons on Easy Mode.');
    addRedCoin('lennonluiz0907', 500, 'Bug report: Cannot have 0 Pixels remaining');
    addRedCoin('Pimgd', 500, 'Bug report: False Battle Arena color display');
    addRedCoin('loli_slayer', 1000, 'Bug report: Idle Mode doesn\'t reward. [Bug fixed, was a rare bug which was caused by the bar having exactly 224.00 pixels in width.]');
    addRedCoin('Tukkun', 100000, 'Testing purposes.');
    addRedCoin('burningpee123', 1000, '[Test Version] Bug Report: Shop doesn\'t refresh');
    addRedCoin('Yamiro', 1000, '[Test Version] Bug Report: False Megaboss killcount');
    addRedCoin('Makilio', 1000, '[Test Version] Bug Report: \'Earn X achievements\' achievements don\'t work');
    addRedCoin('Richirdo', 500, '[Test Version] Bug Report: Cursor is invisible in pause screen.');
    addRedCoin('Bluji', 1000, '[Test Version] Bug Report: Broken pet hunger.');
    addRedCoin('7smartone7', 500, '[Test Version] Bug Report: False TukkunFCG display');
    addRedCoin('loli_slayer', 500, '[Test Version] Bug Report: NaN level for untouched savefiles');
    addRedCoin('Mebomb', 500, '[Test Version] Bug Report: Potion display');
    addRedCoin('loli_slayer', 500, '[Test Version] Bug Report: Cannot view certain shop items');
    addRedCoin('Makilio', 1000, '[Test Version] Bug Report: Shops in the Battle Arena cannot be seen.');
    addRedCoin('SpectralFlame', 2000, '[Test Version] Bug Report: Free access to Secret Lab');
    addRedCoin('Toa_of_Pi', 500, '[Test Version] Bug Report: Ability to access page 2 of Bonus Shop');
    addRedCoin('ForceofLight', 2000, '[Test Version] Bug Report: Undefined FCG card');
    addRedCoin('wecl0me12', 500, '[Test Version] Bug Report: TukkunFCG is a blank screen');
    addRedCoin('loli_slayer', 500, '[Test Version] Bug Report: Cannot access Money Printer');
    addRedCoin('gem85', 1000, '[Test Version] Bug Report: (Minor display bugs)');
    addRedCoin('SpectralFlame', 2000, '[Test Version] Bug Report: Free access to Time Machine');
    addRedCoin('SpectralFlame', 500, '[Test Version] Bug Report: False adventure event');
    addRedCoin('Bench', 1000, '[Test Version] Bug Report: Time Machine doesn\'t work');
    addRedCoin('XxCradx', 1000, '[Test Version] Bug Report: False popup in the TukkunFCG');
    addRedCoin('Darkranboria', 2000, 'Area Design: The Desert');
    addRedCoin('Freak40808', 2000, 'Area Design: Binary Battlefield');
    addRedCoin('Freak40808', 2000, 'Area Design: Safe Zone');
    addRedCoin('Freak40808', 2000, 'Area Design: Pirate Ship');
    addRedCoin('Freak40808', 2000, 'Area Design: Night Forest');
    addRedCoin('Gama11', 2750, 'Area Design: Ropeless Room');
    addRedCoin('Gama11', 2750, 'Area Design: Dark Portal');
    addRedCoin('hpmons', 2000, 'Area Design: Secret Beach');
    addRedCoin('megooshnish', 2000, 'Area Design: Prehistoric Area');
    addRedCoin('meshwire', 2000, 'Area Design: Volcano Peak');
    addRedCoin('meshwire', 2000, 'Area Design: Frosty Zone');
    addRedCoin('Mike1108', 7000, 'Area Design: 2012');
    addRedCoin('Skyt', 2000, 'Area Design: Dark Pyramid');
    addRedCoin('TARDIS', 2000, 'Area Design: The Sky');
    addRedCoin('TheSullen', 2000, 'Area Design: Training Zone');
    addRedCoin('TheSullen', 2000, 'Area Design: Deadlands');
    addRedCoin('TheSullen', 2000, 'Area Design: Mystic Forest');
    addRedCoin('TheSullen', 2000, 'Area Design: Dragon Cave');
    addRedCoin('Toudou1620', 2000, 'Area Design: Pirate Ship Interior');
    addRedCoin('UpsetFisherMAN', 3250, 'Area Design: The Beach');
    addRedCoin('WolfWarhead', 2000, 'Area Design: Scary Graveyard');
    addRedCoin('WolfWarhead', 2000, 'Area Design: Mystic Path');
    addRedCoin('napadan', 2000, 'Art Contribution');
    addRedCoin('Terichan', 1500, 'Useful suggestion');
    addRedCoin('Thegreywarden', 500, 'Useful suggestion');
    addRedCoin('Darcouth', 500, 'Useful suggestion');
    addRedCoin('Jesto', 1700, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('Bluji', 500, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('daf420', 400, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('sabbut', 500, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('Huntragon', 500, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('loli_slayer', 200, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('DragonArcherZ', 600, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('Mebomb', 400, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('wecl0me12', 500, 'Event Reward: Create Your Own Adventure!');
    addRedCoin('Skyt', 700, 'Bug report: \'undefined\' loot items');
    addRedCoin('ABlindOrphan', 1500, 'Art Contribution');
    addRedCoin('ABlindOrphan', 1500, 'Art Contribution');
    addRedCoin('TwoPlusTwo', 1500, 'Bug report: \'Attack Removal\' card works falsely');
    addRedCoin('felipe970421', 1500, 'Exploit report: Tab + Enter abuse to charge battery');
    addRedCoin('EinAnderer', 700, 'Bug report: Boost bars provide no info');
    addRedCoin('Boligao', 1500, 'Bug report: Invisible cursor in main menu');
    addRedCoin('a20365354', 1500, 'Bug report: TukkunFCG layer issue');
    addRedCoin('Prongs', 2000, 'Bug report: Save slot 3 is broken');
    addRedCoin('iwongames99', 2000, 'Bug report: Save slot 3 is broken');
    addRedCoin('max192', 1500, 'Bug report: Insta-Progress costs nothing');
    addRedCoin('Jesto', 3500, 'Exploit report: Free Insta-Progress and Insta-EXP');
    addRedCoin('Zelja', 3500, 'Exploit report: Pixel Bonus abuse in Dimensional Room');
    addRedCoin('ABlindOrphan', 3000, 'Area Design: Smiley Island');
    addRedCoin('aznpanda890', 2500, 'Bug report: NaN Pixel gain');
    addRedCoin('MerrimanLyon', 2000, 'Bug report: NaN Pixel gain');
    addRedCoin('tenco1', 700, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Smaland47', 700, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Kenaron', 700, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Sturmfeder', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('justinkal', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('missingno', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ChaosII7', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Motztante', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Vexsloth', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('jakxkidney', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('DragonArcherZ', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('figter2000', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('39kk9t', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('soultaker7777', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('SaintSpirit', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Tsunoflare', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('vincenthi135799', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Gamer4124', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Piscataway44', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Aurian', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('destroyer57345', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Rieffu', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('timhessel', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('39kk9t', 600, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('jurrin', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Purgexcross', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('straymaverick', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('adrian206', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('DavidMadsen', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('balrok', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('duudez', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('frae2', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Yupei', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('huadianz', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Hakaisha', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('iamevilman', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('shinki12345', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('nightmaren00', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Gamerdude247', 500, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Alamand', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('lackinglack1', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Killerkarnickel', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('epseudoo', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('aznpanda890', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Tigerbladedn', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('elkid', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ManXl', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('zeo123200', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('LokiGodOfFire', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('xdarkcodex', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Fasalrod', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('crazyphysicist', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('C4po', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('zerotg90', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('RikuFrost', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('rocxror', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Abinmorth', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('dahp', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Nator', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Sephirothfan', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('metax11', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('opex51', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('arklegru', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Mirodian', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('pika393', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Odenezen', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('hithere', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Qwertyuiopas', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Mindtruster', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('trofffim', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('JohnSmithBalls', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('drakethatsme', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('nickthemenace', 400, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('torcherboy10', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('iamnoone', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('person2348', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Quaznar', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('sh00td3ad', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Simpoink', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('abc12367659', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Olobaid', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('GregLazlo', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('spyrolvr96', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('AogT666', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Arcanmster', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('jeff7871', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('mmKALLL', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('cheese9999', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('pagboy', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('blakzer', 300, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('isomanic', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Woon1957', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('florian887', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('codyman1234', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('levak2', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Bluji', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('HolyFang', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Ryo_Sangnoir', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Squigglet', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('vjeff93', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('isomanic', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ddelorenzo', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('starhaunter', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('florrat', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('gagataz', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('kwek', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('logo2462', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('hyperhippy92', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('antibarba', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('sabbut', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('CANNONBALL56', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Althaleus', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ktrout42', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('xAngelx', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ddueber', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('James1011R', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('fakeandfailure', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('jakxkidney', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ForceofLight', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('MrSlap', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('kenneth2830', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('SFgame', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('shinki12345', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('not4u', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Bowshewicz', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('killaofgames280', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('zieger', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('jpalange', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('chippi', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('ildfugl', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('simpman', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Galanor', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('bunjun', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('HowlingHatake', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('mulquist', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Grungeking', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Flamerai', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Enderless', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Bench', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('accordingleaf', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('mentalman284', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('tsjak', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Lazarus', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('gshowfan199', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Kakerlake', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('deathangel20', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('TwoPlusTwo', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('Beeshrine09', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('seabird500', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('xxhenleaxx', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('xLightx', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('figter2000', 200, 'Event Reward: Submit Your TukkunFCG Decks!');
    addRedCoin('SW1134', 50, 'LOL');
    addRedCoin('Blackwaltz002', 3300, 'TukkunFCG Card Design');
    addRedCoin('James1011R', 1100, 'Bug Report: Negative damage causing weird ability (Note: Don\'t talk on the forums about this)');
    addRedCoin('pika393', 1100, 'Bug Report: TukkunFCG opponents giving wrong rewards');
    addRedCoin('Yupei', 200, 'Activity #1 Winner');
    addRedCoin('glfootballmlb21', 200, 'Activity #1 Winner');
    addRedCoin('Angried', 200, 'Activity #1 Winner');
    addRedCoin('Sorvius', -15000, 'Item \'Design\'');
    addRedCoin('Sallygwizz37', -60000, 'Item \'Design\'');
    addRedCoin('Sallygwizz37', -30000, 'Spamming in the forum');
    addRedCoin('OnlineHackers', -2000000, 'Misspelling \'subscribe\'');
    addRedCoin('TukkunIsLame', -4000000, 'Not remembering to hide the leaderboards in a certain Youtube video.');
    addRedCoin('skagkiller56', -1000000, 'Hacking promotion');
    addRedCoin('zammy99', -1000000, 'Hacking promotion');
    addRedCoin('pick_pocket_689', -1000000, 'Hacking promotion');
    addRedCoin('gr2mm', -1000000, 'Hacking promotion');
    addRedCoin('failure2d', -100000, 'Epic failure');
    addRedCoin('GigaDramon', -100000000, 'Epic failure');
    addRedCoin('i_am_king_2', -100000, 'Epic failure');
    addRedCoin('klipimong', -100000, 'Epic failure');
    addRedCoin('clickytaco', -100000, 'Epic failure');
    addRedCoin('supermario007', -100000, 'Epic failure');
    addRedCoin('gavin_rox_3', -100000, 'Epic failure');
    addRedCoin('BLOOD300', -10000000, 'Epic failure');
    addRedCoin('zildaa', -100000, 'Epic failure');
    addRedCoin('THE_BEST_HACKER', -100000, 'Epic failure');
    addRedCoin('osm70', -10000000, '');
    addRedCoin('epictrull', -10000000, '');
    addRedCoin('NobsiA', -10000000, 'Hacking and bragging about it in the forum');
    addRedCoin('Gama11', 2000, 'Area Design: Area 51');
    addRedCoin('Squigglet', 3000, 'Area Design: Coral Reef');
    addRedCoin('Axianamos', 4000, 'Area Design: Dark Pyramid');
    addRedCoin('zwander', 2000, 'Area Design: Dark Pyramid (+)');
    addRedCoin('Squigglet', 3000, 'Area Design: Deserted Alley');
    addRedCoin('uberuber22', 3000, 'Area Design: Destroyed Battlefield');
    addRedCoin('Randomthought31', 3000, 'Area Design: Dragon Cave');
    addRedCoin('DistinctEvil', 3000, 'Area Design: Evil Forest');
    addRedCoin('ManaMiyavi', 3000, 'Area Design: Exotic Canopy');
    addRedCoin('Timurlenk', 4000, 'Area Design: ???');
    addRedCoin('UpsetFisherMAN', 3000, 'Area Design: Forbidden Fortress');
    addRedCoin('DistinctEvil', 3000, 'Area Design: Gold Mine');
    addRedCoin('UpsetFisherMAN', 3000, 'Area Design: Hell');
    addRedCoin('BorisFreaman', 3000, 'Area Design: Modern Graveyard');
    addRedCoin('Randomthought31', 3000, 'Area Design: Mono Town');
    addRedCoin('Randomthought31', 3000, 'Area Design: Mystic Forest');
    addRedCoin('maadneet', 3000, 'Area Design: Near The \'??? Generator\'');
    addRedCoin('Randomthought31', 2000, 'Area Design: Night Forest');
    addRedCoin('ChaosII7', 4000, 'Area Design: Not Copyright Infringement');
    addRedCoin('MaxDragon', 3000, 'Area Design: Old Ruins');
    addRedCoin('Richirdo', 3000, 'Area Design: Old Ruins Entrance');
    addRedCoin('Gama11', 3000, 'Area Design: Pirate Ship Interior');
    addRedCoin('BIGTIPPER', 3000, 'Area Design: Polluted Sky');
    addRedCoin('ChaosII7', 4000, 'Area Design: Secret Lab');
    addRedCoin('AirSalad', 3000, 'Area Design: Sonic');
    addRedCoin('Squigglet', 3000, 'Area Design: Spooky Crypt');
    addRedCoin('Randomthought31', 2000, 'Area Design: Swamp Hop');
    addRedCoin('Randomthought31', 3000, 'Area Design: The Desert');
    addRedCoin('ChaosII7', 4000, 'Area Design: The Sky');
    addRedCoin('Randomthought31', 3000, 'Area Design: Whale Beach');
    addRedCoin('MaxDragon', 4000, 'Area Design: Ye Olde Pub');
    addRedCoin('zwander', 3000, 'Area Design: 3001 Wasteland');
    addRedCoin('Bluji', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('0Crapknocker0', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('sabbut', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('lyghtcrye', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('BIGTIPPER', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('InfernalSilence', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Andiiboi', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Wgurgh', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('LucasBurgel', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('hamstercrap', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Duckboii', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Piscataway44', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('metax11', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('xstinkweedx', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Psycroth', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('SvartRuskTroll', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Darkruler2005', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('jjjuu', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('dariofg', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('koozkie', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('nickthemenace', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('ChaosII7', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Eniamar', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Cerbius', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Arch_Gremlin', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Benzopyrene', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Mebomb', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Aurian', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('maadneet', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('macseber', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Rappoman', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Toa_of_Pi', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('TREZAtreza', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('zuton97', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('murgatroid99', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('TwoPlusTwo', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Asrial', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Odenezen', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('James1011R', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Angried', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('chevalerie94', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('richardlycn013', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Gama11', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Barrak', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('DarkDespair5', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('MiniMissile', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('eXoDoX', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('DistinctEvil', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('f1pokerspeed', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('TheGuardianAngel', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('starhaunter', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Spire115', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Sparloki', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('weslleyend', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('YYZ133', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Silencing', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('zandroid', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('IiroOnPerse', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('ManaMiyavi', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('MushroomHermit', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('rcktzr', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Deathborn668', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('markboy11', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('helloAAAAA', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Jojhy', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Sturmfeder', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Majildian', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Huntragon', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('tenco1', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Zox457', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('theyareclose', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Cakeofdoom', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('soultaker7777', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('slogsdon', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('wecl0me12', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('wiifreak20', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('destroyer57345', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('iopghj', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Truub', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('milleraus10', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Pika2346', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('JimmyTheSqealer', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Shorgun', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('tony526', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('hotdog911', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('bonecrusher1022', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Prongs', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('fireballzsss', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Motters', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('niky45', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('UpsetFisherMAN', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Keap12', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Miguelin1317', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('MadSniper', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('jonaxan', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('etmoonshade', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Supereert', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Mindtruster', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('evilnerd', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Yupei', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('felipe970421', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('michael222', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('somethingggg', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('duudez', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('simplymac', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('joel_d', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Puyoyoshi', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('pinguin333', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('santifrey', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Dataman', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('missingno', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('juckter', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Ligarius', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Ryo_Sangnoir', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('TheToaOfTaKoro', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('some123', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('CANNONBALL56', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('reedc1', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Fleet_Feet', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('KingKenzo', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('rankored', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Zerryie', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('XRRRX7331', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('sirmaiden', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Picklebreath', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Schivnorr', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('sorrydie10', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('celo747', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Sabin7', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('XxCradx', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Killerkarnickel', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('noobguy123456789', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('indy5000', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('as820802', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('iamnoone', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('gregjo', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('calvinjliao', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('sammy_dude10', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Kotose', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Backernater', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Hua9801', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('DarkJak92', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('PbookR', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Bowshewicz', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('jjw17', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('7smartone7', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('ElijahBeaudoin', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('ArcticTrident', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Squigglet', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Apathist', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('killaofgames280', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('tobykatt', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('mattl99', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('TheLostSoul622', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('accordingleaf', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('middaystars', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('redtom7', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('EsotericaVirtue', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('panikingdisco', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Randomthought31', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Thystonius', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('baloonatic', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Woon1957', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('Gems', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('toshikitsy', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('civilde', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('PersonOfInterest', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('frae2', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('bobertlyer', 200, 'Completing Survey: Arena Enhancement System');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Pre-explosion Armors are all hats');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Gambler’s box display error');
    addRedCoin('zieger', 500, '[Test Version] Bug Report: Can’t add cards to FCG');
    addRedCoin('wecl0me12', 500, '[Test Version] Bug Report: Healing a zombie duck after it dies still damages it');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Bonus rocks always work');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: In death match enemies are released from stun earlier than you');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Title do not auto-upgrade');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Data transfer broken');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Epic skills show double cost');
    addRedCoin('Psycroth', 500, '[Test Version] Bug Report: Rewards listed in Bestiary');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: Savefile transfer system freezes midway');
    addRedCoin('Zox457', 500, '[Test Version] Bug Report: Garden – Wrong expire time');
    addRedCoin('rcktzr', 500, '[Test Version] Bug Report: The quality settings all make it low quality.');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Max Boosts not decreasing properly');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: No way to remove bestiary bonus msg in breaking news');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: No Adventurer’s Trophy');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: Cannot attack with mouse in BA (Linux)');
    addRedCoin('gregjo', 500, '[Test Version] Bug Report: Mystery Shop Scrolling');
    addRedCoin('UpsetFisherMAN', 500, '[Test Version] Bug Report: Cannot purchase ranged weapons');
    addRedCoin('Slain087', 500, '[Test Version] Bug Report: Auto-Harvest card does not work');
    addRedCoin('RyGuy5357', 500, '[Test Version] Bug Report: bug report bug');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Monster doesn’t spawn after finishing the Pyramid Battle');
    addRedCoin('Majildian', 500, '[Test Version] Bug Report: Quick Attack ignores weapon range');
    addRedCoin('mariomaster5', 500, '[Test Version] Bug Report: Teleporting stadium charecters?');
    addRedCoin('ShadyKnight', 500, '[Test Version] Bug Report: Cannnot exit Dark Pyramid');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Dark Portal kill achievement');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Minor breaking news bug');
    addRedCoin('destroyer57345', 500, '[Test Version] Bug Report: No warning for 9001 pathz.');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Spelling when getting a reward from dragon');
    addRedCoin('RyGuy5357', 500, '[Test Version] Bug Report: Switching weapons');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Blood Claw special');
    addRedCoin('firecat6666', 500, '[Test Version] Bug Report: “tukkun fcg champion” quest bugged, also ant spray');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Rickroll’d does not transfer');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Achievement tracking that doesn’t transfer');
    addRedCoin('missingno', 500, '[Test Version] Bug Report: Nonworking armor bonus adder');
    addRedCoin('jerenator', 500, '[Test Version] Bug Report: Min. boosts half price');
    addRedCoin('Oddity', 500, '[Test Version] Bug Report: Pong: Extreme Wind expiring at wrong time causes slow ball');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Enhancing like crazy');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Dark portal kill achievement error');
    addRedCoin('gregjo', 500, '[Test Version] Bug Report: Cheater Achievement Reporting');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Breaking News, pixelated box');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Two Lolmarket master?');
    addRedCoin('dingetje50', 500, '[Test Version] Bug Report: Consecutive day bonus');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: FCG remaining cards counter goes negative');
    addRedCoin('gregjo', 500, '[Test Version] Bug Report: Boost Depletion Speed In Breaking News');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: Movement of bombs');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: Prehistoric mission');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Stadium item fight wins on impossible aceivement not reporting');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Tutorial Typing Error');
    addRedCoin('tenco1', 500, '[Test Version] Bug Report: Minor detail bug');
    addRedCoin('tenco1', 500, '[Test Version] Bug Report: (Another) minor detail bug');
    addRedCoin('Glooble', 500, '[Test Version] Bug Report: Cannot equip/unequip items');
    addRedCoin('ThinkInvisible', 500, '[Test Version] Bug Report: Careers button not working');
    addRedCoin('Krazycarn', 500, '[Test Version] Bug Report: Unable to Switch Equipment During Combat… without Combat!');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: Prehistoric time counter bug');
    addRedCoin('morfinista', 500, '[Test Version] Bug Report: BA: gear changing bug');
    addRedCoin('Uauf3000', 500, '[Test Version] Bug Report: TukkunFCG “???” Does not give cards');
    addRedCoin('gregjo', 500, '[Test Version] Bug Report: Can’t get out of Special Arena Mob Mission');
    addRedCoin('gergjo', 500, '[Test Version] Bug Report: BA Skill Reset Pixel Penalty');
    addRedCoin('wpolly', 500, '[Test Version] Bug Report: Souvenir transfer error');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Prehistoric Mision (I haven’t typed it wrong, you typed it.)');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Negative time? In awesome adventure.');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Sudden Death in Secret Lab?');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: Defend the generator mission / Secret lab DoT');
    addRedCoin('Bluji', 500, '[Test Version] Bug Report: ‘Crafting’ quest doesn’t work');
    addRedCoin('Sephirothfan', 500, '[Test Version] Bug Report: Tukkun FCG Deck Out?');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: Cannot enter defend mission');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: Pixle throw skill');
    addRedCoin('gregjo', 500, '[Test Version] Bug Report: Combo Breaking out of Pyramid');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: RHK not working properly');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Spraying ants by clicking on number doesn’t count for achievement');
    addRedCoin('duudez', 500, '[Test Version] Bug Report: Careres and enhancing');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Adventure energy timer bug');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Rofltrainer’s Secret?');
    addRedCoin('peleg97', 500, '[Test Version] Bug Report: Weaken, poison, blind and maybe stun skills bug');
    addRedCoin('Arcanmster', 500, '[Test Version] Bug Report: [Arena] Att/Def/HP/MP upgrade with pixels (minor)');
    addRedCoin('scarymania', 500, '[Test Version] Bug Report: prehistoric mission bug');
    addRedCoin('wecl0me12', 500, '[Test Version] Bug Report: secret lab kills me instantly');
    addRedCoin('UnlimitedBlades', 500, '[Test Version] Bug Report: Awesome Adventures Typo');
    addRedCoin('Aurian', 500, '[Test Version] Bug Report: Plot exp transfer incorrect');
    addRedCoin('Worst_master', 500, '[Test Version] Bug Report: Mutiple Premium Sprayer ');
    addRedCoin('Sturmfeder', 500, '[Test Version] Bug Report: Spelling Error in Options Menu');
    addRedCoin('Sturmfeder', 500, '[Test Version] Bug Report: Special Wand Attack Power');
    addRedCoin('gentleben24', 500, '[Test Version] Bug Report: Careers types give coins');
    addRedCoin('YukaTakeuchiFan', 500, 'Bug Report: Om Nom Nom cost');
    addRedCoin('qlordz', 500, 'Bug Report: No rings after version 1382');
    addRedCoin('silverknite1', 500, 'Bug Report: Cannot purchase explosion crate');
    addRedCoin('towerman100', 500, 'Bug Report: grinning colosus burning rope transfer');
    addRedCoin('ChaosII7', 1000, 'Bug Report: RoflTrainer’s Secret reward bug');
    addRedCoin('Thomadin', 1000, 'Bug Report: Blue Coins -> Pixels with Burned Rope');
    addRedCoin('wpolly', 500, 'Bug Report: FCG result screen bug');
    addRedCoin('joel_d', 1000, 'Bug Report: Join Kongregate screen');
    addRedCoin('Ryo_Sangnoir', 500, 'Bug Report: Bug sprayer lacks Breaking News');
    addRedCoin('pinguin333', 500, 'Bug Report: Typing smiley island password costs pixels');
    addRedCoin('qlordz', 500, 'Bug Report: Your item has been destroyed!undefined');
    addRedCoin('Arcanmster', 500, 'Bug Report: Achievement progress tracker graphical bug');
    addRedCoin('Sphoofle', 500, 'Bug Report: Added 1k Event Tokens Not Added');
    addRedCoin('silverknite1', 500, 'Bug Report: Gambler’s Box Gives… Undefined?');
    addRedCoin('Silencing', 500, 'Bug Report: Game Completion Time Displayed Incorrectly');
    addRedCoin('Silencing', 500, 'Bug Report: Scores Not Being Sent');
    addRedCoin('James1011R', 500, 'Bug Report: LOLMarket “both buy and sell values grayed out” Bug');
    addRedCoin('etmoonshade', 500, 'Bug Report: Battle Arena Dark Mage Wand Incorrect Type');
    addRedCoin('gregjo', 500, 'Bug Report: Title Editing (Minor)');
    addRedCoin('SynthesisAlpha', 1000, 'Bug Report: Switching files alters garden tree values.');
    addRedCoin('stingrayjayz', 500, 'Bug Report: Boxes quantity undefined.');
    addRedCoin('jetz0r', 500, 'Bug Report: Not Getting Crafting EXP for every enchant.');
    addRedCoin('Zakhep2', 1000, 'Bug Report: Safe hacking won’t work');
    addRedCoin('pinguin333', 500, 'Bug Report: smiley island now sets mana to 1');
    addRedCoin('Sturmfeder', 500, 'Bug Report: Buy/Sell All Information');
    addRedCoin('Sonic303', 500, 'Bug Report: pyramid area glitch');
    addRedCoin('DuncmanG', 500, 'Bug Report: LOLMarket Max Numbers don’t all update');
    addRedCoin('ManaMiyavi', 500, 'Bug Report: Auto-Harvest card');
    addRedCoin('YYZ133', 500, 'Bug Report: “MP Boost” Tier 4 skill incorrect description/effects');
    addRedCoin('Isfan', 500, 'Bug Report: Idlebot & Autohide backfire');
    addRedCoin('math_master', 500, 'Bug Report: Energy Charge is still white');
    addRedCoin('UnlimitedBlades', 1000, 'Bug Report: Money Printer Level 27?');
    addRedCoin('YYZ133', 1000, 'Bug Report: BA Post-explosion Special Wand “Power Attack” Skill Bug');
    addRedCoin('rockstip', 500, 'Bug Report: Adventuring Energy Loss');
    addRedCoin('wecl0me12', 500, 'Bug Report: Dying in prehistoric mission sometimes allows you to continue');
    addRedCoin('halemaster', 500, 'Bug Report: Legendary Boxes at NaN');
    addRedCoin('rockstip', 500, 'Bug Report: Hide Level, Exp, and Coins graphical bug');
    addRedCoin('dariofg', 500, 'Bug Report: Bug in “Too much lag!” screen');
    addRedCoin('somethingggg', 250, 'Bug Report: Very poor grammar.');
    addRedCoin('qlordz', 250, 'Bug Report: Push text off bottom of item description');
    addRedCoin('Arch_Gremlin', 500, 'Bug Report: Mission kommander mission');
    addRedCoin('Sturmfeder', 500, 'Bug Report: Quick Insta-Progress Buying');
    addRedCoin('naruto070797', 500, 'Bug Report: Wrong gamblers box description');
    addRedCoin('Mcflopidisss', 500, 'Bug Report: Version 1386 Relic');
    addRedCoin('offsides', 500, 'Bug Report: After Buying a new plot, incorrect garden points for next plot shown');
    addRedCoin('23skidoosh', 500, 'Bug Report: Pre-explosion Armour');
    addRedCoin('peleg97', 750, 'Bug Report: Double exp gain for item maker career');
    addRedCoin('ThinkInvisible', 500, 'Bug Report: TukkunFCG Level Fail');
    addRedCoin('Oddity', 500, 'Bug Report: v1388: Hit indicators no longer appear in Death Match');
    addRedCoin('math_master', 500, 'Bug Report: Safe Zone? That’s not the name anymore.');
    addRedCoin('Pimgd', 500, 'Bug Report: Combo remains when death by lab suffocation');
    addRedCoin('gregjo', 500, 'Bug Report: Double Exp For Item Making Career');
    addRedCoin('eat911', 500, 'Bug Report: Stadium text bug');
    addRedCoin('BewareOfElephant', 500, 'Bug Report: No hits in the BA');
    addRedCoin('23skidoosh', 3500, 'Exploit report: Infinate Red Coins');
    addRedCoin('Picklebreath', 250, 'Bug Report: Getting career exp twice in the stadium?');
    addRedCoin('DuncmanG', 250, 'Bug Report: Graphical glitch in prehistoric mission');
    addRedCoin('123x1111', 2500, 'Exploit report: Battle Arena and Tukkun FCG at the same time');
    addRedCoin('Flamewarden', 250, 'Bug Report: Lingering tooltip');
    addRedCoin('Arch_Gremlin', 500, 'Bug Report: EXP graph display');
    addRedCoin('DarkArmadaStudio', 250, 'Bug Report: [Stadium] Fastest Race Leaderboards');
    addRedCoin('qlordz', 500, 'Bug Report: Legendary hunter not changing');
    addRedCoin('etmoonshade', 500, 'Bug Report: Windowshade Mode Graphical Bug');
    addRedCoin('rockstip', 500, 'Bug Report: Battle Arena Item Graphical Bug');
    addRedCoin('peleg97', 500, 'Bug Report: Dying in the final rooms in the prehistoric mission leads to the next');
    addRedCoin('Motters', 500, 'Bug Report: No daily bonuses');
    addRedCoin('tijntje_7', 500, 'Bug Report: Pyramid damage numbers');
    addRedCoin('Qwertyuiopas', 500, 'Bug Report: Daily rewards: clicking a box twice');
    addRedCoin('Mindtruster', 500, 'Bug Report: Daily Bonus Screen');
    addRedCoin('DavidMadsen', 500, 'Bug Report: No Daily Bonus Screen');
    addRedCoin('AleXinoS', 250, 'Bug Report: Dragon made a grammar mistake! (Not at the part where it was intended)');
    addRedCoin('Slain087', 500, 'Bug Report: Battle Arena Dark Pyramid parse error');
    addRedCoin('darkraiders', 500, 'Bug Report: Heal give some extra damage and extra combo');
    addRedCoin('milleraus10', 750, 'Bug Report: New Daily Bonus Box');
    addRedCoin('Ryo_Sangnoir', 250, 'Bug Report: Arcade medal hovers stay when pressing space');
    addRedCoin('arcain', 500, 'Bug Report: Too many skill points');
    addRedCoin('Mindtruster', 750, 'Bug Report: TukkunFCG – PROFIT!!!!!');
    addRedCoin('Vitrebreaker', 500, 'Bug Report: Not dead in the prehistoric mission');
    addRedCoin('Motters', 500, 'Bug Report: New crafting UI shows wrong percentage for bonus adders');
    addRedCoin('Arcanmster', 250, 'Bug Report: Standby mode message is cut');
    addRedCoin('Thomadin', 500, 'Bug Report: Display Bug -> Enchanting with Armor Attackspeed Stone');
    addRedCoin('pinguin333', 500, 'Bug Report: crafting material used highscore');
    addRedCoin('ohnonooh', 750, 'Bug report: Career cost activation wrongly charged');
    addRedCoin('BanditEX', 250, 'Bug report: Arcade prize display error');
    addRedCoin('DaMaster9000', 250, 'Bug report: Spray Ants pop-up glitch');
    addRedCoin('notfromearth', 500, 'Bug report: blue coin rewards don’t add up correctely');
    addRedCoin('math_master', 250, 'Bug report: Holding left mouse button may move description');
    addRedCoin('BIGTIPPER', 250, 'Bug report: MegaBoss Lvls Vary');
    addRedCoin('nickthemenace', 250, 'Bug report: Red coin refund rate display too low');
    addRedCoin('ChaosII7', 250, 'Bug report: Status icons clinging');
    addRedCoin('Tama_Yoshi', 500, 'Bug report: Career time left glitch');
    addRedCoin('hyperhippy92', 500, 'Bug report: Career Time Depletion Bug');
    addRedCoin('Quizer', 500, 'Bug report: Forcing draws in TukkunFCG when decked out also causes poisoning');
    addRedCoin('DuncmanG', 250, 'Bug report: Ascend mouse-over Text Unclear');
    addRedCoin('sabbut', 500, 'Bug report: Doom Wizard heals himself over his maximum health');
    addRedCoin('SpudY2K', 500, 'Bug report: Flickering Battle Arena Mission Stats');
    addRedCoin('sabbut', 250, 'Bug report: Enhancing some weapons');
    addRedCoin('notfromearth', 500, 'Bug report: GC rewards from progress bar');
    addRedCoin('Aurian', 1500, 'Exploit report: Permanent Elite Temp. Max Boost');
    addRedCoin('ExSane', 750, 'Exploit report: Sword of Ascendant abusable in Tower of DOOOOOOM');
    addRedCoin('Selgald', 750, 'Exploit report: Lvl up wont stop');
    addRedCoin('RedSun383', 500, 'Bug report: The same arcade daily reward awarded twice at midnight');
    addRedCoin('madnesss', 500, 'Bug report: Double poisoning in TukkunFCG');
    addRedCoin('XxCradx', 500, 'Bug report: Stadium – Teleport Through Obstacles (Deathmatch)');
    addRedCoin('redrocketwestie', 500, 'Bug report: Lost/Glitched Achievements?');
    addRedCoin('ParaTheNoia', 500, 'Bug report: Weaken does not lower your damage in Secret Lab');
    addRedCoin('ArcanMster', 500, 'Bug report: Negative drowning damage');
    addRedCoin('wpolly', 500, 'Bug report: No “Spawn Rate” bonuses on weapons');
    addRedCoin('notfromearth', 500, 'Bug report: combo count in battle arena');
    addRedCoin('notfromearth', 500, 'Exploit report');
    addRedCoin('Majildian', 500, 'Bug report: Strange Machine gives the wrong adventure');
    addRedCoin('crazyphysicist', 500, 'Bug report: FCG: no Pet bonus');
    addRedCoin('Maciejas42', 500, 'Bug report: A little typo in AA');
    addRedCoin('ChaosII7', 500, 'Bug report: Dying instantly in the BA');
    addRedCoin('talenramel', 500, 'Bug report: BA death while in Menu');
    addRedCoin('stryph', 500, 'Bug report: Quests Tab Broken');
    addRedCoin('helbrid', 250, 'Bug report: instant achievements');
    addRedCoin('notfromearth', 250, 'Bug report: bestiary page 4 not available');
    addRedCoin('eragonpotter', 500, 'Bug report: LoLMarket Screen');
    addRedCoin('n0body123', 500, 'Bug report: First Battle Arena travel arrow in tutorial');
    addRedCoin('trisk22', 500, 'Bug report: Pet lost its level');
    addRedCoin('Ketchupyoshi', 500, 'Bug report: TukkunFCG pet bug');
    addRedCoin('ChaosII7', 6000, 'Item Design');
    addRedCoin('theyareclose', 6000, 'Item Design');
    addRedCoin('UpsetFisherMAN', 5250, 'Item Design');
    addRedCoin('olsfa', 500, 'Item Design');
    addRedCoin('ManaMiyavi', 4500, 'Item Design');
    addRedCoin('weslleyend', 6500, 'Item Design');
    addRedCoin('cabbawargod', 7000, 'Item Design');
    addRedCoin('blackcat2000', 4750, 'Item Design');
    addRedCoin('lucksz', 3750, 'Item Design');
    addRedCoin('blazez998', 3750, 'Item Design');
    addRedCoin('theyareclose', 3750, 'Item Design');
    addRedCoin('Khnum666', 3750, 'Item Design');
    addRedCoin('ChaosII7', 3750, 'Item Design');
    addRedCoin('Squigglet', 6500, 'Item Design');
    addRedCoin('Chaldon', 3750, 'Item Design');
    addRedCoin('endril', 6000, 'Item Design');
    addRedCoin('takumi152', 1000, 'Item Design');
    addRedCoin('RaceBandit', 2000, 'Item Design');
    addRedCoin('hyperhippy92', 1000, 'Item Design');
    addRedCoin('Pika2346', 1500, 'Item Design');
    addRedCoin('Chokladkakan', 4500, 'Item Design');
    addRedCoin('ipwnu1337', 2000, 'Item Design');
    addRedCoin('Manjies', 4500, 'Item Design');
    addRedCoin('Chokladkakan', 1500, 'Item Design');
    addRedCoin('Randomthought31', 1500, 'Item Design');
    addRedCoin('Harrs', 1500, 'Item Design');
    addRedCoin('bulletbarrage', 1500, 'Item Design');
    addRedCoin('Deilig', 3750, 'Item Design');
    addRedCoin('Sphoofle', 6500, 'Item Design');
    addRedCoin('Kalitrima', 4000, 'Item Design');
    addRedCoin('Axecutioner64', 750, 'Item Design');
    addRedCoin('Quizer', 1500, '');
    addRedCoin('Chatturgha', 3000, 'Item Design');
    addRedCoin('LucidCrux', 30000, 'Item Design');
    addRedCoin('LucidCrux', 70000, 'Item Design');
    addRedCoin('LucidCrux', 40000, 'Item Design');
    addRedCoin('LucidCrux', 40000, 'Item Design');
    addRedCoin('shinki12345', 30000, 'Item Design');
    addRedCoin('ChaosII7', 110000, 'Item Design');
    addRedCoin('ManaMiyavi', 3000, 'Item Design');
    addRedCoin('UpsetFisherMAN', 6000, 'Item Design');
    addRedCoin('wecl0me12', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('Pharrit', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('arit3', 600, 'Dragon of Wisdom Speeches');
    addRedCoin('Dudenator2', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('ChaosII7', 2000, 'Dragon of Wisdom Speeches');
    addRedCoin('Beeshrine09', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('GhoullyX', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('SvartRuskTroll', 600, 'Dragon of Wisdom Speeches');
    addRedCoin('als02', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('Darkringer', 2000, 'Dragon of Wisdom Speeches');
    addRedCoin('Cunari', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('102938475621', 600, 'Dragon of Wisdom Speeches');
    addRedCoin('AuburnAttack21', 2000, 'Dragon of Wisdom Speeches');
    addRedCoin('Mr27', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('poser2', 600, 'Dragon of Wisdom Speeches');
    addRedCoin('ForceofLight', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('ManaMiyavi', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('silux', 1500, 'Dragon of Wisdom Speeches');
    addRedCoin('wercooler', 1000, 'Dragon of Wisdom Speeches');
    addRedCoin('jxm1985', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('TheNeRD14', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('billybobfred', 2000, 'Dragon of Wisdom Speeches');
    addRedCoin('CAdamH', 300, 'Dragon of Wisdom Speeches');
    addRedCoin('LunaticNeko', 2000, 'Dragon of Wisdom Speeches');
    addRedCoin('toadvine', 2000, 'Area Design: Foodlandistan');
    addRedCoin('toadvine', 131700, 'Item Design');
    addRedCoin('AirSalad', 20, 'You win!');
    addRedCoin('TheChaosNinja', 2, 'Fine, here\'s a Red Coin for you. Or maybe two.');
    addRedCoin('Tukkun', 100000, 'Test');
    addRedCoin('PlazmaBurst2', -999999, 'PM Spamming');
  }

  frame 8 {
    function addNewCard(pil1, pil2, pil3, pil4, pil5, ene1, ene2, ene3, ene4, ene5, opil1, opil2, opil3, opil4, opil5, oene1, oene2, oene3, oene4, oene5, catk, cdef, chp, crec, matk, mdef, mhp, mrec, ocatk, ocdef, ochp, ocrec, omatk, omdef, omhp, omrec, draw, inflict, freeze, special, specialpow, atk, def, hp, upgraded, type, quanta, req, cost, name, desc, author) {
      var cardInfo = new Object();
      _root.cardid += 1;
      cardInfo.author = author;
      cardInfo.id = _root.cardid;
      cardInfo.upgraded = upgraded;
      cardInfo.type = type;
      cardInfo.quanta = quanta;
      cardInfo.req = req;
      cardInfo.name = name;
      cardInfo.desc = desc;
      cardInfo.atk = atk;
      cardInfo.def = def;
      cardInfo.hp = hp;
      cardInfo.catk = catk;
      cardInfo.cdef = cdef;
      cardInfo.chp = chp;
      cardInfo.crec = crec;
      cardInfo.matk = matk;
      cardInfo.mdef = mdef;
      cardInfo.mhp = mhp;
      cardInfo.mrec = mrec;
      cardInfo.ocatk = ocatk;
      cardInfo.ocdef = ocdef;
      cardInfo.ochp = ochp;
      cardInfo.ocrec = ocrec;
      cardInfo.omatk = omatk;
      cardInfo.omdef = omdef;
      cardInfo.omhp = omhp;
      cardInfo.omrec = omrec;
      cardInfo.draw = draw;
      cardInfo.inflict = inflict;
      cardInfo.special = special;
      cardInfo.specialpow = specialpow;
      cardInfo.cost = cost;
      i = 1;
      while (i <= 5) {
        cardInfo['pil' + i] = eval('pil' + i);
        cardInfo['opil' + i] = eval('opil' + i);
        cardInfo['ene' + i] = eval('ene' + i);
        cardInfo['oene' + i] = eval('oene' + i);
        ++i;
      }
      cardInfo.freeze = freeze;
      cardList.push(cardInfo);
    }

    function addNewDeck(deckname, deckArray) {
      var v3 = new Object();
      _root.deckid += 1;
      v3.deckname = deckname;
      i = 1;
      while (i <= 400) {
        v3['c' + i] = 0;
        ++i;
      }
      i = 0;
      while (i <= deckArray.length - 1) {
        v3['c' + deckArray[i + 1]] = deckArray[i];
        i += 2;
      }
      deckList.push(v3);
    }

    var cardList = [zeroItem];
    _root.cardid = 0;
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 1, 1, 0, 'Monster', 1, 1, 100, ' ', 'No, not a bug.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 2, 1, 1, 'Monster', 1, 1, 1000, ' ', 'No, not a bug.', '© Tukkun');
    addNewCard(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 1, 1, 50, 'White Generator', 'Get 1 white energy per turn.', '© Blackwaltz002');
    addNewCard(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 1, 0, 500, 'White Generator', 'Get 1 white energy per turn.', '© Blackwaltz002');
    addNewCard(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 2, 1, 50, 'Red Generator', 'Get 1 red energy per turn.', '© Blackwaltz002');
    addNewCard(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 2, 0, 500, 'Red Generator', 'Get 1 red energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 3, 1, 50, 'Yellow Generator', 'Get 1 yellow energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 3, 0, 500, 'Yellow Generator', 'Get 1 yellow energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 4, 1, 50, 'Green Generator', 'Get 1 green energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 4, 0, 500, 'Green Generator', 'Get 1 green energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 5, 1, 50, 'Blue Generator', 'Get 1 blue energy per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 5, 0, 500, 'Blue Generator', 'Get 1 blue energy per turn.', '© Blackwaltz002');
    addNewCard(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 0, '', 1, 8, 50, 'Rainbow Generator', 'Get 1 energy of each color per turn.', '© Blackwaltz002');
    addNewCard(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 1, 1, 1, '', 1, 7, 500, 'Rainbow Generator', 'Get 1 energy of each color per turn.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 1, 0, 50, 'Instant White', 'Get 4 white energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 1, 0, 500, 'Instant White', 'Get 5 white energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 2, 0, 50, 'Instant Red', 'Get 4 red energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 2, 0, 500, 'Instant Red', 'Get 5 red energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 3, 0, 50, 'Instant Yellow', 'Get 4 yellow energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 3, 0, 500, 'Instant Yellow', 'Get 5 yellow energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 0, 50, 'Instant Green', 'Get 4 green energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 0, 500, 'Instant Green', 'Get 5 green energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 5, 0, 50, 'Instant Blue', 'Get 4 blue energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 5, 0, 500, 'Instant Blue', 'Get 5 blue energy instantly.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 1, 0, 50, 'Energy Charge', 'Get 1 energy of each color instantly. Get 1 extra white energy.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 1, 0, 500, 'Energy Supercharge', 'Get 1 energy of each color instantly. Get 2 extra white energy.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 2, 0, 1, 2, 'Monster', 2, 0, 2000, 'Fire Sparkle', 'This monster prioritizes attacking enemy monster.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 3, 0, 1, 3, 'Monster', 2, 0, 20000, 'Fire Sparkle', 'This monster prioritizes attacking enemy monster.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 0, 1, 0, 'Monster', 2, 1, 100, 'Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 0, 1, 1, 'Monster', 2, 1, 1000, 'Elite Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 7, 0, 2, 0, 'Monster', 2, 3, 125, 'Red Snail', 'Get 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 7, 0, 2, 1, 'Monster', 2, 3, 1250, 'Fire Snail', 'Get 1 energy of card color per turn. Deal 1 poison damage to your opponent.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 6, 0, 2, 0, 'Monster', 2, 6, 150, 'Flying Eyeball', 'This monster prioritizes attacking enemy monster.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 10, 0, 3, 1, 'Monster', 2, 7, 1500, 'Dark Eyeball', 'This monster prioritizes attacking enemy monster.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 9, 0, 5, 0, 'Monster', 2, 6, 175, 'Red Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 11, 0, 5, 1, 'Monster', 2, 6, 1750, 'Red Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 0, 1, 0, 'Monster', 2, 7, 200, 'Crimson Cockatrice', 'You gain 4 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 9, 0, 1, 1, 'Monster', 2, 7, 2000, 'Crimson Cockatrice', 'You gain 4 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 2, 0, 0, 1, 0, 'Monster', 2, 11, 250, 'Flame Mosquito', 'Deals 2 poison damage per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 2, 0, 0, 1, 1, 'Monster', 2, 10, 2500, 'Flame Mosquito', 'Deals 2 poison damage per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthA', 2, 0, 0, 1, 0, 'Monster', 2, 7, 250, 'Imp', 'This monster gains 2 attack per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthA', 2, 4, 1, 1, 1, 'Monster', 2, 8, 2500, 'Elite Imp', 'This monster gains 2 attack per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 15, 0, 2, 0, 'Monster', 2, 12, 350, 'Fire Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 17, 0, 2, 1, 'Monster', 2, 12, 3500, 'Flame Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 11, 0, 2, 2, 'Monster', 2, 4, 1000, 'Fire Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 10, 0, 1, 3, 'Monster', 2, 0, 10000, 'Fire Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 1, 3, 1, 2, 'Monster', 3, 0, 2000, 'Light Sparkle', 'This monster takes physical damage dealt to you.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 2, 4, 1, 3, 'Monster', 3, 0, 20000, 'Light Sparkle', 'This monster takes physical damage dealt to you.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 4, 2, 0, 'Monster', 3, 1, 100, 'Yellow Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 5, 2, 1, 'Monster', 3, 1, 1000, 'Elite Yellow Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 5, 4, 2, 0, 'Monster', 3, 3, 125, 'Yellow Snail', 'Get 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 'Generator', 1, 5, 4, 2, 1, 'Monster', 3, 3, 1250, 'Golden Snail', 'Get 1 energy of card color per turn. Draw a card.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 2, 2, 22, 0, 'Monster', 3, 6, 150, 'Big Daddy', 'This monster takes physical damage dealt to you.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 3, 3, 27, 1, 'Monster', 3, 7, 1500, 'Big Daddy', 'This monster takes physical damage dealt to you.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 8, 5, 7, 0, 'Monster', 3, 6, 175, 'Yellow Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 9, 7, 7, 1, 'Monster', 3, 6, 1750, 'Yellow Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 59, 0, 0, 1, 0, 'Monster', 3, 4, 200, 'Cog', 'Turns into Clockwork Machine after 1 turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 60, 0, 0, 1, 1, 'Monster', 3, 4, 2000, 'Cog', 'Turns into Clockwork Machine after 1 turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Rebirth', 57, 6, 2, 1, 0, 'Monster', 3, 9, 250, 'Clockwork Machine', 'Turns into Cog when it dies.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Rebirth', 58, 7, 3, 1, 1, 'Monster', 3, 9, 2500, 'Clockwork Machine', 'Turns into Cog when it dies.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 12, 6, 5, 0, 'Monster', 3, 12, 350, 'Golden Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 13, 8, 5, 1, 'Monster', 3, 12, 3500, 'Light Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 8, 7, 4, 2, 'Monster', 3, 4, 1000, 'Light Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 7, 6, 4, 3, 'Monster', 3, 0, 10000, 'Light Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 4, 2, 'Monster', 4, 0, 2000, 'Nature Sparkle', 'You gain 5 HP.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 2, 0, 5, 3, 'Monster', 4, 0, 20000, 'Nature Sparkle', 'You gain 5 HP.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 0, 5, 0, 'Monster', 4, 1, 100, 'Green Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 0, 6, 1, 'Monster', 4, 1, 1000, 'Elite Green Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 4, 0, 8, 0, 'Monster', 4, 3, 125, 'Green Snail', 'Get 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 4, 0, 8, 1, 'Monster', 4, 3, 1250, 'Life Snail', 'Get 1 energy of card color per turn. You gain 1 HP per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 1, 0, 0, 2, 0, 'Monster', 4, 6, 150, 'Mosquito', 'This monster gains 1 HP and deals 1 poison damage per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 1, 1, 0, 4, 1, 'Monster', 4, 6, 1500, 'Mosquito', 'This monster gains 1 HP and deals 1 poison damage per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 6, 0, 11, 0, 'Monster', 4, 6, 175, 'Green Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 0, 13, 1, 'Monster', 4, 6, 1750, 'Green Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 1, 4, 0, 'Monster', 4, 4, 200, 'Cockatrice', 'You gain 1 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 2, 5, 1, 'Monster', 4, 5, 2000, 'Elite Cockatrice', 'You gain 2 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 6, 3, 5, 0, 'Monster', 4, 9, 250, 'Cockatrice King', 'You gain 3 attack. Draw a card.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 7, 4, 6, 1, 'Monster', 4, 9, 2500, 'Cockatrice King', 'You gain 3 attack. Draw a card.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Growth', 1, 5, 2, 1, 0, 'Monster', 4, 7, 250, 'Razor Mantis', 'This monster gains 1 attack, 1 defense and 1 HP per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Growth', 1, 7, 3, 1, 1, 'Monster', 4, 7, 2500, 'Razor Mantis', 'This monster gains 1 attack, 1 defense and 1 HP per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 11, 0, 13, 0, 'Monster', 4, 12, 350, 'Baby Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 12, 0, 15, 1, 'Monster', 4, 12, 3500, 'Forest Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 7, 1, 9, 2, 'Monster', 4, 4, 1000, 'Grass Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 6, 0, 9, 3, 'Monster', 4, 0, 10000, 'Grass Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, '', 0, 2, 0, 1, 2, 'Monster', 5, 0, 2000, 'Air Sparkle', 'Freeze enemy monster for 1 turn when summoned.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, '', 0, 3, 1, 1, 3, 'Monster', 5, 0, 20000, 'Air Sparkle', 'Freeze enemy monster for 1 turn when summoned.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 2, 4, 0, 'Monster', 5, 1, 100, 'Blue Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 2, 5, 1, 'Monster', 5, 1, 1000, 'Elite Blue Ant', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 1, 5, 2, 5, 0, 'Monster', 5, 3, 125, 'Blue Snail', 'Get 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 'Generator', 1, 5, 2, 5, 1, 'Monster', 5, 3, 1250, 'Sea Snail', 'Get 1 energy of card color per turn. Freeze enemy monster for 1 turn when summoned.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 11, 1, 0, 'Monster', 5, 6, 150, 'Crab', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 14, 1, 1, 'Monster', 5, 7, 1500, 'Elite Crab', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 9, 3, 4, 0, 'Monster', 5, 6, 175, 'Blue Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 10, 5, 4, 1, 'Monster', 5, 6, 1750, 'Blue Crawler', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, '', 0, 10, 2, 3, 0, 'Monster', 5, 10, 200, 'Arctic Crawler', 'Freeze enemy monster for 2 turns when summoned.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, '', 0, 12, 2, 3, 1, 'Monster', 5, 10, 2000, 'Arctic Crawler', 'Freeze enemy monster for 2 turns when summoned.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 12, 0, 4, 0, 'Monster', 5, 8, 250, 'Mini Magi', 'This monster enters the game poisoned. You gain 4 HP.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 14, 0, 4, 1, 'Monster', 5, 8, 2500, 'Mini Magi', 'This monster enters the game poisoned. You gain 6 HP.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 12, 2, 9, 0, 'Monster', 5, 12, 350, 'Blue Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 14, 2, 9, 1, 'Monster', 5, 12, 3500, 'Alien Dragon', '', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 9, 3, 4, 2, 'Monster', 5, 4, 1000, 'Water Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -1, 8, 3, 3, 3, 'Monster', 5, 0, 10000, 'Water Elemental', 'Consumes 1 energy of card color per turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 'Destroy', 0, 4, 0, 1, 0, '', 2, 8, 250, 'Explosion', 'Kill enemy monster. Opponent loses 6 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 'Destroy', 0, 4, 0, 1, 1, '', 2, 8, 2500, 'Huge Explosion', 'Kill enemy monster. Opponent loses 9 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 2, 3, 125, 'Fire Bolt', 'Opponent loses 10 HP.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 2, 3, 1250, 'Fire Bolt', 'Opponent loses 12 HP.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 2, 1, 125, 'Fire Arrow', 'Enemy monster is poisoned for 2 damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 2, 0, 1250, 'Fire Arrow', 'Enemy monster is poisoned for 2 damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Sacrifice', 0, 1, 1, 1, 0, '', 2, 9, 200, 'Perma-Monster', 'Destroy your monster. Gain stats equal to monster stats.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Sacrifice', 0, 1, 1, 1, 1, '', 2, 8, 2000, 'Perma-Monster', 'Destroy your monster. Gain stats equal to monster stats.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 2, 0, 1, 0, '', 2, 3, 125, 'Rage', 'Your monster gains 8 attack and loses 4 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 2, 0, 1, 1, '', 2, 3, 1250, 'Berserk', 'Your monster gains 9 attack and loses 4 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 2, 0, 1, 0, '', 2, 2, 125, 'Target Change', 'Your monster gains 2 attack and prioritizes attacking enemy monster.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'MonKill', 0, 2, 0, 1, 1, '', 2, 2, 1250, 'Target Change', 'Your monster gains 3 attack and prioritizes attacking enemy monster.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -11, 0, 0, 0, -1, 0, 0, 0, 0, '', 0, 2, 0, 2, 0, '', 2, 5, 200, 'Meteor Rain', 'Everything takes 1 damage. Your opponent loses 10 extra HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -16, 0, 0, 0, -1, 0, 0, 0, 0, '', 0, 2, 0, 2, 1, '', 2, 6, 2000, 'Meteor Rain', 'Everything takes 1 damage. Your opponent loses 15 extra HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthA', 4, 1, 0, 3, 0, '', 2, 6, 125, 'Final Strikes', 'Your monster gains 4 attack per turn but is poisoned for 2 damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthA', 5, 1, 0, 3, 1, '', 2, 6, 1250, 'Final Strikes', 'Your monster gains 5 attack per turn but is poisoned for 2 damage.', '© CoCollect');
    addNewCard(1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 2, 6, 150, 'Energy Upclash', 'Gain 1 Generator of each color except red.', '© CoCollect');
    addNewCard(1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 2, 6, 1500, 'Energy Upclash', 'Gain 1 Generator and 1 energy of each color except red.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, '', 0, 5, 0, 1, 2, '', 2, 22, 2000, 'Inferno', 'Deal 25 additional physical damage this turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, '', 0, 6, 0, 1, 3, '', 2, 25, 20000, 'Elite Inferno', 'Deal 35 additional physical damage this turn.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 'Destroy', 0, 3, 2, 1, 0, '', 3, 8, 250, 'Overkill', 'Kill enemy monster. Draw a card.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 'Destroy', 0, 3, 2, 1, 1, '', 3, 7, 2500, 'Overkill', 'Kill enemy monster. Draw a card.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, -2, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 3, 3, 125, 'Lightning', 'Opponent loses 4 HP. Enemy monster loses 2 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, -2, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 3, 3, 1250, 'Lightning', 'Opponent loses 6 HP. Enemy monster loses 2 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, -1, 0, 0, 0, 0, '', 0, 2, 0, 1, 0, '', 3, 1, 125, 'Thunderbolt', 'Both players lose 8 HP. Enemy monster loses 1 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, -2, 0, 0, 0, 0, '', 0, 2, 0, 1, 1, '', 3, 1, 1250, 'Thunderbolt', 'Both players lose 8 HP. Enemy monster loses 2 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, '', 0, 0, 1, 1, 0, '', 3, 4, 200, 'Time Warp', 'Draw 2 cards.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, '', 0, 0, 1, 1, 1, '', 3, 3, 2000, 'Time Warp', 'Draw 2 cards.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 3, 1, 125, 'Hide', 'Your monster gains 7 defense and loses 3 attack.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 3, 1, 1250, 'Hide', 'Your monster gains 8 defense and loses 2 attack.', '© Blackwaltz002');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 0, 0, 9, 0, '', 3, 2, 125, 'Lure', 'Your monster gains 3 defense and takes physical damage dealt to you.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Lure', 0, 0, 0, 9, 1, '', 3, 2, 1250, 'Lure', 'Your monster gains 5 defense and takes physical damage dealt to you.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 0, 1, 0, 1, 0, '', 3, 0, 125, 'Transform', 'Your monster turns into something else after 1 turn.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 0, 1, 0, 1, 1, '', 3, 0, 1250, 'Transform', 'Your monster turns into something else after 1 turn. You gain 1 defense.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 3, 2, 200, 'Weaken', 'Your opponent loses 1 attack. Enemy monster loses 5 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 3, 2, 2000, 'Weaken', 'Your opponent loses 2 attack. Enemy monster loses 6 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, '', 0, 0, 1, 1, 0, '', 3, 1, 150, 'Time Freeze', 'Freeze enemy monster for 1 turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, '', 0, 0, 1, 1, 1, '', 3, 0, 1500, 'Time Freeze', 'Freeze enemy monster for 1 turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, '', 0, 2, 3, 1, 2, '', 3, 15, 2000, 'Dream Book', 'Draw cards until your hand is full, one of which costs no energy.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, '', 0, 3, 3, 1, 3, '', 3, 13, 20000, 'Dream Book', 'Draw cards until your hand is full, one of which costs no energy.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Absorb', 0, 2, 0, 3, 0, '', 4, 8, 250, 'Twister', 'Kill enemy monster and absorb HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Absorb', 0, 2, 0, 3, 1, '', 4, 7, 2500, 'Twister', 'Kill enemy monster and absorb HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 3, 125, 'Magic Bolt', 'Opponent loses 7 HP. You gain 7 HP.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 3, 1250, 'Magic Bolt', 'Opponent loses 8 HP. You gain 8 HP.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 5, 125, 'Poison Arrow', 'Deal 2 poison damage to your opponent.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 6, 1250, 'Poison Arrow', 'Deal 3 poison damage to your opponent.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 5, 125, 'Heal', 'Gain 15 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 6, 1250, 'Greater Heal', 'Gain 20 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 5, 200, 'Regeneration', 'You gain 2 HP per turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 7, 2000, 'Regeneration', 'You gain 3 HP per turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 4, 4, 125, 'Blessing', 'Your monster gains 4 attack and 2 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 4, 4, 1250, 'Improved Blessing', 'Your monster gains 5 attack and 3 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Rebirth', 0, 0, 0, 1, 0, '', 4, 1, 125, 'Rebirth', 'Your monster turns into something else when it dies. You gain 2 HP.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Rebirth', 0, 0, 0, 1, 1, '', 4, 1, 1250, 'Rebirth', 'Your monster turns into something else when it dies. You gain 4 HP.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, -7, 0, 0, 0, 0, 0, '', 0, 0, 2, 1, 0, '', 4, 1, 125, 'Shield Break', 'Your opponent and enemy monster lose 7 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 0, 0, -8, 0, 0, 0, 0, 0, '', 0, 0, 2, 1, 1, '', 4, 1, 1250, 'Shield Break', 'Your opponent and enemy monster lose 8 defense.', '© CoCollect');
    addNewCard(-3, -3, -3, 0, -3, 0, 0, 0, 0, 0, -3, -3, -3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 2, 0, 1, 0, '', 4, 8, 200, 'Green World', 'Both players lose 3 Generators of each color except green.', '© CoCollect');
    addNewCard(-3, -3, -3, 0, -3, 0, 0, 0, 0, 0, -3, -3, -3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 2, 0, 1, 1, '', 4, 7, 2000, 'Green World', 'Both players lose 3 Generators of each color except green.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, -15, -15, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 4, 2, '', 4, 27, 2000, 'Energy Heal', 'Lose up to 15 energy of each color except green. Gain 45 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, -12, -12, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 4, 3, '', 4, 30, 20000, 'Energy Heal', 'Lose up to 12 energy of each color except green. Gain 50 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Absorb', 0, 3, 1, 1, 0, '', 5, 9, 250, 'Flood', 'Kill enemy monster and absorb HP. Gain 6 additional HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Absorb', 0, 3, 1, 1, 1, '', 5, 9, 2500, 'Flood', 'Kill enemy monster and absorb HP. Gain 9 additional HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 1, '', 0, 1, 0, 1, 0, '', 5, 3, 125, 'Ice Bolt', 'Enemy monster loses 2 HP and is frozen for 1 turn.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 1, '', 0, 1, 0, 1, 1, '', 5, 3, 1250, 'Ice Bolt', 'Enemy monster loses 3 HP and is frozen for 1 turn.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, '', 0, 1, 0, 1, 0, '', 5, 3, 125, 'Freeze', 'Freeze enemy monster for 3 turns.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, '', 0, 1, 0, 1, 1, '', 5, 3, 1250, 'Freeze', 'Freeze enemy monster for 4 turns.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'NoSkill', 0, 1, 0, 1, 0, '', 5, 1, 125, 'Forget', 'Enemy monster loses its special ability.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 'NoSkill', 0, 1, 0, 1, 1, '', 5, 1, 1250, 'Forget', 'Enemy monster loses 1 attack and its special ability.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Growth', 1, 1, 0, 1, 0, '', 5, 4, 200, 'Growth Power', 'Your monster gains 1 attack and 1 defense per turn.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Growth', 1, 1, 0, 1, 1, '', 5, 3, 2000, 'Growth Power', 'Your monster gains 1 attack and 1 defense per turn.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Mutate', 0, 1, 0, 1, 0, '', 5, 0, 125, 'Mutate', 'Turn your monster into something else.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Mutate', 0, 1, 0, 1, 1, '', 5, 0, 1250, 'Mutate', 'Turn your monster into something else. You gain 1 attack.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 3, 1, 0, 1, 0, '', 5, 1, 125, 'Energy Monster', 'Your monster gives 3 energy of monster color per turn and gains 1 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', 4, 1, 0, 1, 1, '', 5, 1, 1250, 'Energy Monster', 'Your monster gives 4 energy of monster color per turn and gains 2 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, -7, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 5, 3, 125, 'Monster Break', 'Enemy monster loses 8 attack and 7 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, -8, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 5, 3, 1250, 'Monster Break', 'Enemy monster loses 9 attack and 8 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 0, '', 5, 6, 200, 'Stat Wipeout', 'Both players lose 20 attack and defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 1, '', 5, 5, 2000, 'Stat Wipeout', 'Both players lose 20 attack and defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 2, '', 5, 16, 2000, 'Holy Symbol', 'Gain 18 HP, 3 attack and 3 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 1, 0, 1, 3, '', 5, 14, 20000, 'Holy Symbol', 'Gain 18 HP, 3 attack and 3 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 2, 5, 150, 'Powerup', 'You and your monster gain 3 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 2, 6, 1500, 'Powerup', 'You and your monster gain 4 attack.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -1, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 2, 2, 125, 'Flaming Arrow', 'Deal 1 poison damage to your opponent. Your opponent loses 3 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -1, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 2, 1, 1250, 'Flaming Arrow', 'Deal 1 poison damage to your opponent. Your opponent loses 3 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 3, 4, 150, 'Epicbolt', 'Everything takes 10 damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 3, 3, 1500, 'Epicbolt', 'Everything takes 10 damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 3, 2, 125, 'Defense Removal', 'You lose 35 defense. Opponent loses 20 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 3, 2, 1250, 'Defense Removal', 'You lose 35 defense. Opponent loses 30 defense.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 4, 3, 150, 'Monster Heal', 'Your monster gains 3 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 4, 4, 1500, 'Monster Heal', 'Your monster gains 5 HP.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 4, 1, 150, 'Match Delay', 'Both you and your opponent gain 2 HP per turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 4, 0, 1500, 'Match Delay', 'Both you and your opponent gain 2 HP per turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, -2, 0, 0, 0, 0, 'NoSkill', 0, 0, 0, 1, 0, '', 5, 5, 150, 'Blue Lightning', 'Your opponent loses 4 HP. Enemy monster loses 2 HP and its special ability.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, -2, 0, 0, 0, 0, 'NoSkill', 0, 0, 0, 1, 1, '', 5, 5, 1500, 'Blue Lightning', 'Your opponent loses 6 HP. Enemy monster loses 2 HP and its special ability.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, '', 0, 0, 0, 1, 0, '', 5, 6, 150, 'Permafreeze', 'Freeze enemy monster for 20 turns.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, '', 0, 0, 0, 1, 1, '', 5, 5, 1500, 'Permafreeze', 'Freeze enemy monster for 20 turns.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 9, 1, 0, 'Monster', 1, 6, 150, 'Invisible Zebra', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 6, 9, 1, 1, 'Monster', 1, 6, 1500, 'Invisible Zebra', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 9, 1, 7, 0, 'Monster', 1, 9, 200, 'Invisible Giraffe', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 10, 1, 9, 1, 'Monster', 1, 9, 2000, 'Invisible Giraffe', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 12, 9, 3, 0, 'Monster', 1, 13, 350, 'Invisible Dragon', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 14, 9, 3, 1, 'Monster', 1, 13, 3500, 'Invisible Dragon', '', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 1, 2, 250, 'Dagger', 'You gain 2 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 1, 3, 2500, 'Blade', 'You gain 4 attack.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, '', 0, 0, 0, 1, 0, '', 1, 7, 350, 'Silver Sword', 'You gain 4 attack. Deal 7 more damage the turn you play this.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, '', 0, 0, 0, 1, 1, '', 1, 8, 3500, 'Golden Sword', 'You gain 5 attack. Deal 10 more damage the turn you play this.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 2, '', 1, 10, 3000, 'Epic Sword', 'You gain 7 attack.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 3, '', 1, 11, 30000, 'Epic Sword', 'You gain 9 attack.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 1, 6, 150, 'Attack UP', 'Your monster gains 7 attack.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 1, 6, 1500, 'Attack UP', 'Your monster gains 8 attack.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 1, 6, 150, 'Defense UP', 'You gain 3 defense. Your monster gains 7 defense.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 1, 6, 1500, 'Defense UP', 'You gain 4 defense. Your monster gains 8 defense.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 2, 6, 350, 'Flaming Sword', 'You gain 3 attack. Deal 1 poison damage.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 2, 7, 3500, 'Flaming Sword', 'You gain 5 attack. Deal 1 poison damage.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 0, 1, 0, '', 3, 6, 350, 'Dagger of Time', 'You gain 2 attack. Draw a card.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 0, 1, 1, '', 3, 7, 3500, 'Blade of Time', 'You gain 4 attack. Draw a card.', '© lobstershow');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 4, 6, 350, 'Magic Wand', 'You gain 2 attack. Gain 1 HP per turn.', '© Parsee');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 4, 7, 3500, 'Magic Wand', 'You gain 4 attack. Gain 1 HP per turn.', '© Parsee');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, '', 0, 0, 0, 1, 0, '', 5, 6, 350, 'Frozen Sword', 'You gain 2 attack. Freeze enemy monster for 2 turns.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, '', 0, 0, 0, 1, 1, '', 5, 7, 3500, 'Frozen Sword', 'You gain 4 attack. Freeze enemy monster for 2 turns.', '© Chatturgha');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 1, 8, 0, 2, 0, 'Monster', 2, 5, 250, 'Red Hydra', 'This monster enters the game poisoned. Deals 1 poison damage per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Poison', 1, 8, 0, 3, 1, 'Monster', 2, 5, 2500, 'Red Hydra', 'This monster enters the game poisoned. Deals 1 poison damage per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 0, 9, 3, 3, 0, 'Monster', 3, 5, 250, 'Yellow Hydra', 'This monster turns into something else after 1 turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Transform', 0, 12, 3, 3, 1, 'Monster', 3, 5, 2500, 'Yellow Hydra', 'This monster turns into something else after 1 turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 5, 0, 5, 0, 'Monster', 4, 5, 250, 'Green Hydra', 'This monster gains 1 HP per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 0, 5, 1, 'Monster', 4, 5, 2500, 'Green Hydra', 'This monster gains 1 HP per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthD', 3, 5, 6, 1, 0, 'Monster', 5, 5, 250, 'Blue Hydra', 'This monster gains 3 defense per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'GrowthD', 3, 7, 6, 1, 1, 'Monster', 5, 5, 2500, 'Blue Hydra', 'This monster gains 3 defense per turn.', '© Pika2346');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -4, 14, 0, 1, 2, 'Monster', 1, 1, Infinity, 'Awesome Face', 'Consumes 4 energy of card color per turn. Poisoned.', 'Special Edition');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Generator', -4, 16, 0, 1, 3, 'Monster', 1, 1, Infinity, 'Awesome Face', 'Consumes 4 energy of card color per turn. Poisoned.', 'Special Edition');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Unfreeze', 0, 0, 0, 1, 2, '', 2, 1, 3000, 'Anti-Freeze', 'Your monster is no longer frozen.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Unfreeze', 0, 0, 0, 1, 3, '', 2, 0, 30000, 'Anti-Freeze', 'Your monster is no longer frozen.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Antidote', 0, 0, 0, 1, 2, '', 4, 2, 3000, 'Cure', 'Removes poison/regen status from yourself.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Antidote', 0, 0, 0, 1, 3, '', 4, 1, 30000, 'Cure', 'Removes poison/regen status from yourself.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Zombify', 0, 0, 0, 1, 2, '', 5, 9, 3000, 'Zombify', 'Your opponent loses half of its regen stat rounded down. Deal 2 poison damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Zombify', 0, 0, 0, 1, 3, '', 5, 8, 30000, 'Zombify', 'Your opponent loses half of its regen stat rounded down. Deal 2 poison damage.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, '', 0, 0, 0, 1, 2, '', 3, 2, 3000, 'Golden Arrow', 'Deal 10 additional physical damage this turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, '', 0, 0, 0, 1, 3, '', 3, 1, 30000, 'Golden Arrow', 'Deal 10 additional physical damage this turn.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 4, 2, 200, 'Poison Heal', 'Gain 30 HP. Deal 10 poison damage to yourself.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 4, 1, 2000, 'Poison Heal', 'Gain 30 HP. Deal 10 poison damage to yourself.', '© CoCollect');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 0, '', 2, 4, 200, 'Attack Removal', 'You lose 30 attack. Opponent loses 15 attack.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 0, 0, 1, 1, '', 2, 4, 2000, 'Attack Removal', 'You lose 30 attack. Opponent loses 25 attack.', '© Tukkun');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 1, 1, 2, '', 1, 25, Infinity, 'Code Fu', 'Search your mind for a card and add it to your hand.', 'Special Edition');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 1, 1, 3, '', 1, 22, Infinity, 'Code Fu', 'Search your mind for a card and add it to your hand.', 'Special Edition');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 1, 1, 2, '', 1, 4, Infinity, 'Mystery Card', 'Add a random upgraded card to your hand. That card costs no energy.', 'Special Edition');
    addNewCard(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, '', 0, 0, 1, 1, 3, '', 1, 3, Infinity, 'Mystery Card', 'Add a random upgraded card to your hand. That card costs no energy.', 'Special Edition');
    var deckList = [zeroItem];
    _root.deckid = 0;
    addNewDeck('Newbie', [2, 3, 5, 5, 5, 7, 5, 9, 5, 11, 1, 13, 2, 29, 1, 33, 1, 35, 2, 49, 1, 51, 1, 53, 1, 55, 2, 67, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 1, 105, 1, 109, 1, 125, 1, 129, 1, 147, 1, 149, 1, 167, 1, 175]);
    addNewDeck('Mirror Match', [4, 43, 2, 44, 2, 45, 1, 46, 4, 61, 2, 62, 2, 63, 1, 64, 4, 81, 2, 82, 2, 83, 1, 84, 4, 99, 2, 100, 2, 101, 1, 102, 1, 104, 2, 121, 1, 122, 1, 124, 2, 141, 1, 142, 1, 144, 2, 161, 1, 162, 1, 164, 2, 181, 1, 182, 2, 203, 1, 204, 2, 205, 1, 206, 2, 207, 1, 208, 2, 209, 1, 210, 2, 215, 1, 216, 2, 217, 1, 218, 2, 219, 1, 220, 2, 221, 1, 222, 2, 231, 1, 232, 2, 233, 1, 234, 2, 235, 1, 236, 2, 237, 1, 238, 2, 239, 1, 240, 2, 241, 1, 242, 2, 245, 1, 246, 2, 247, 1, 248]);
    addNewDeck('Level 3 (White)', [1, 1, 9, 3, 1, 13, 5, 15, 5, 25, 1, 109, 1, 123, 1, 147, 1, 195, 5, 199, 3, 201, 2, 203, 5, 205, 3, 207, 2, 209, 3, 211, 2, 213]);
    addNewDeck('Level 3 (Red)', [9, 5, 5, 17, 1, 27, 1, 29, 1, 31, 1, 33, 1, 35, 1, 37, 1, 39, 1, 41, 1, 43, 1, 45, 2, 103, 2, 105, 2, 107, 5, 109, 1, 111, 2, 113, 2, 115, 1, 117, 1, 121, 1, 183, 1, 185, 2, 215, 1, 223, 1, 233, 2, 243]);
    addNewDeck('Level 3 (Yellow)', [9, 7, 5, 19, 1, 47, 1, 49, 1, 51, 1, 53, 1, 55, 1, 57, 1, 59, 1, 61, 1, 63, 2, 123, 2, 125, 2, 127, 5, 129, 1, 131, 2, 133, 2, 135, 2, 137, 2, 139, 1, 141, 2, 187, 1, 189, 1, 217, 1, 225, 1, 239]);
    addNewDeck('Level 3 (Green)', [9, 9, 5, 21, 1, 65, 1, 67, 1, 69, 1, 71, 1, 73, 1, 75, 1, 77, 1, 79, 1, 81, 1, 83, 2, 143, 2, 145, 2, 147, 2, 149, 2, 151, 2, 153, 2, 155, 1, 157, 1, 159, 1, 161, 2, 191, 2, 193, 2, 219, 1, 227, 1, 235, 1, 241]);
    addNewDeck('Level 3 (Blue)', [9, 11, 5, 23, 1, 85, 1, 87, 1, 89, 1, 91, 1, 93, 1, 95, 1, 97, 1, 99, 1, 101, 2, 163, 2, 165, 2, 167, 2, 169, 2, 171, 2, 173, 2, 175, 2, 177, 2, 179, 1, 181, 2, 195, 2, 197, 2, 221, 1, 229, 1, 237]);
    addNewDeck('Level 4 (White)', [1, 2, 9, 4, 1, 14, 5, 16, 5, 26, 1, 110, 1, 124, 1, 148, 1, 196, 5, 200, 3, 202, 2, 204, 5, 206, 3, 208, 2, 210, 3, 212, 2, 214]);
    addNewDeck('Level 4 (Red)', [9, 6, 5, 18, 1, 28, 1, 30, 1, 32, 1, 34, 1, 36, 1, 38, 1, 40, 1, 42, 1, 44, 1, 46, 2, 104, 2, 106, 2, 108, 5, 110, 1, 112, 2, 114, 2, 116, 1, 118, 1, 122, 1, 184, 1, 186, 2, 216, 1, 224, 1, 234, 2, 244]);
    addNewDeck('Level 4 (Yellow)', [9, 8, 5, 20, 1, 48, 1, 50, 1, 52, 1, 54, 1, 56, 1, 58, 1, 60, 1, 62, 1, 64, 2, 124, 2, 126, 2, 128, 5, 130, 1, 132, 2, 134, 2, 136, 2, 138, 2, 140, 1, 142, 2, 188, 1, 190, 1, 218, 1, 226, 1, 240]);
    addNewDeck('Level 4 (Green)', [9, 10, 5, 22, 1, 66, 1, 68, 1, 70, 1, 72, 1, 74, 1, 76, 1, 78, 1, 80, 1, 82, 1, 84, 2, 144, 2, 146, 2, 148, 2, 150, 2, 152, 2, 154, 2, 156, 1, 158, 1, 160, 1, 162, 2, 192, 2, 194, 2, 220, 1, 228, 1, 236, 1, 242]);
    addNewDeck('Level 4 (Blue)', [9, 12, 5, 24, 1, 86, 1, 88, 1, 90, 1, 92, 1, 94, 1, 98, 1, 100, 1, 102, 2, 164, 2, 166, 2, 168, 2, 170, 2, 172, 2, 174, 2, 176, 2, 178, 2, 180, 1, 182, 2, 196, 2, 198, 2, 222, 1, 230, 1, 238]);
    addNewDeck('Meteor', [8, 18, 3, 104, 7, 106, 7, 116, 1, 122, 6, 130]);
    addNewDeck('Pyro', [10, 6, 7, 44, 2, 104, 7, 110, 2, 142, 7, 216]);
    addNewDeck('Fate', [2, 18, 7, 102, 4, 110, 5, 130, 5, 136, 4, 156, 7, 174, 1, 248]);
    addNewDeck('Immortal', [7, 6, 4, 12, 2, 44, 7, 92, 7, 110, 1, 124, 1, 144, 3, 184]);
    addNewDeck('Clockwork', [6, 6, 9, 20, 4, 60, 7, 110, 3, 128, 3, 130]);
    addNewDeck('Nightmare', [4, 6, 10, 8, 6, 116, 4, 126, 7, 130, 7, 142, 4, 190, 7, 218]);
    addNewDeck('Infinity', [9, 8, 5, 54, 3, 112, 1, 116, 7, 130, 7, 132, 7, 218, 1, 236]);
    addNewDeck('Morto', [5, 6, 7, 10, 2, 40, 3, 108, 7, 148, 7, 152, 5, 186, 7, 216, 2, 244]);
    addNewDeck('Pyria', [7, 18, 3, 20, 2, 46, 2, 64, 2, 84, 2, 102, 7, 110, 3, 126, 7, 130]);
    addNewDeck('Zeal', [12, 10, 1, 74, 3, 82, 3, 130, 4, 144, 7, 150, 7, 152, 1, 158, 3, 160, 4, 162, 4, 220, 1, 236]);
    addNewDeck('Final Snail', [4, 10, 10, 18, 7, 70, 7, 110, 7, 118, 2, 126, 7, 192, 1, 198]);
    addNewDeck('Frosty', [10, 12, 7, 96, 1, 164, 5, 166, 2, 168, 2, 180, 1, 196, 3, 198, 7, 222, 1, 236, 1, 238]);
    addNewDeck('Inferno', [16, 6, 7, 122, 7, 130, 1, 144, 3, 180, 1, 238]);
    addNewDeck('Disaster', [6, 6, 5, 12, 2, 100, 7, 116, 2, 122, 6, 126, 1, 128, 7, 130, 1, 164, 3, 180, 4, 196, 1, 238]);
    addNewDeck('Hygra', [6, 8, 2, 14, 3, 110, 2, 124, 7, 130, 1, 158, 4, 172, 7, 226, 7, 240]);
    addNewDeck('Magi', [5, 6, 3, 14, 7, 98, 1, 106, 3, 110, 7, 120, 1, 124, 5, 126, 7, 130, 2, 142, 2, 144, 5, 146, 2, 182, 2, 190, 1, 210, 7, 220]);
    addNewDeck('Naturage', [9, 10, 3, 74, 3, 82, 7, 112, 7, 130, 2, 144, 2, 146, 2, 160, 3, 180, 3, 212, 1, 238]);
    addNewDeck('Yolo', [6, 14, 7, 116, 5, 128, 7, 130, 3, 148, 2, 180, 2, 182, 7, 188, 3, 236, 1, 238, 7, 242, 2, 248]);
    addNewDeck('Regiment', [6, 6, 3, 26, 2, 78, 2, 98, 5, 110, 4, 130, 1, 190, 2, 200]);
    addNewDeck('Armoria', [3, 4, 3, 8, 7, 14, 7, 16, 5, 130, 5, 206, 7, 208, 3, 210, 5, 216, 5, 218, 5, 220, 5, 222]);
    addNewDeck('Arrowhell', [3, 10, 1, 42, 7, 108, 7, 130, 7, 148, 2, 180, 7, 186, 1, 236, 7, 240]);
    addNewDeck('Harmonia', [9, 14, 2, 44, 2, 62, 2, 82, 2, 100, 4, 110, 2, 122, 3, 124, 5, 130, 2, 142, 2, 150, 2, 162, 2, 172, 2, 180, 2, 182, 1, 190, 2, 198, 2, 218, 3, 232, 2, 236, 1, 238, 1, 244]);
    addNewDeck('Buffbot', [7, 14, 6, 16, 6, 18, 3, 20, 6, 22, 3, 42, 3, 54, 3, 80, 3, 92, 7, 110, 5, 130, 4, 154, 4, 184, 3, 192, 4, 212, 4, 214]);
    addNewDeck('Relentless', [7, 14, 3, 16, 2, 54, 1, 60, 2, 78, 1, 92, 1, 96, 1, 100, 7, 110, 1, 124, 1, 130, 2, 142, 1, 144, 2, 150, 1, 164, 1, 180, 2, 182, 2, 204, 2, 218, 1, 238, 1, 248]);
    addNewDeck('Toxic', [1, 14, 2, 16, 1, 18, 2, 20, 4, 22, 1, 108, 7, 130, 7, 148, 2, 166, 1, 180, 2, 192, 1, 210, 1, 216, 3, 224]);
    addNewDeck('Avatar', [7, 14, 2, 44, 3, 100, 2, 104, 5, 116, 7, 130, 6, 148, 1, 182, 3, 206, 2, 216, 5, 218, 3, 236, 3, 244]);
    addNewDeck('Toy Maker', [4, 20, 5, 60, 7, 130, 4, 144, 5, 180, 5, 184, 4, 212, 3, 234, 3, 236, 1, 238]);
    addNewDeck('Bahumut', [7, 22, 4, 82, 7, 112, 7, 130, 3, 164, 3, 234]);
    addNewDeck('Basilisk', [5, 14, 7, 78, 3, 112, 7, 130, 6, 182, 7, 184]);
    addNewDeck('Titan', [8, 14, 7, 92, 7, 110, 1, 124, 2, 126, 1, 128, 7, 130, 2, 150, 5, 152, 3, 182, 3, 208, 2, 210]);
    addNewDeck('Mana-Fountain', [8, 6, 4, 110, 7, 120, 7, 130, 3, 142, 7, 148, 7, 182, 5, 204, 3, 236, 1, 238]);
    addNewDeck('Dante', [17, 6, 4, 40, 4, 104, 7, 122, 7, 130, 1, 142, 3, 180]);
    addNewDeck('Hells Gate', [10, 6, 7, 42, 4, 104, 3, 122, 7, 130, 2, 150, 5, 180, 4, 184, 2, 212, 3, 236]);
    addNewDeck('Schizophrenia', [7, 4, 5, 16, 4, 18, 7, 110, 7, 130, 7, 204, 3, 236, 2, 246]);
    addNewDeck('Dragoon', [5, 82, 4, 112, 7, 142, 3, 158, 7, 182, 4, 184, 7, 232]);
    addNewDeck('Shinki', [4, 18, 9, 20, 4, 122, 6, 142, 1, 164, 2, 226, 1, 246]);
    addNewDeck('Devi', [7, 14, 3, 42, 2, 122, 2, 142, 7, 144, 4, 180, 5, 182, 2, 208, 2, 210, 5, 218]);
    addNewDeck('Benediction', [2, 122, 3, 124, 7, 130, 4, 180, 7, 192, 7, 232, 3, 236]);
    addNewDeck('Gaia', [6, 83, 5, 112, 3, 142, 4, 164, 4, 184, 6, 212, 2, 234]);
    addNewDeck('Messiah', [5, 12, 5, 116, 2, 122, 5, 142, 5, 152, 3, 164, 7, 182, 3, 204, 3, 236]);
    addNewDeck('Rainbow', [17, 14, 17, 16, 7, 116, 7, 122, 7, 130, 7, 142, 7, 148, 7, 152, 5, 180, 7, 182, 7, 218, 5, 246]);
    addNewDeck('Calamity', [20, 14, 5, 40, 7, 122, 3, 124, 7, 142, 6, 162, 5, 164, 5, 180, 7, 182]);
    addNewDeck('Chronos', [4, 60, 7, 116, 7, 128, 7, 130, 7, 150, 3, 182, 2, 188, 2, 236, 5, 244, 1, 246]);
    addNewDeck('Shiva', [5, 4, 7, 8, 7, 130, 2, 142, 2, 150, 3, 158, 7, 208, 5, 218, 7, 240]);
    addNewDeck('Ambiguity', [1, 14, 6, 26, 4, 148, 3, 216, 5, 226, 1, 246, 7, 248]);
    addNewDeck('Poseidon', [17, 12, 7, 94, 6, 100, 7, 130, 2, 142, 7, 164, 7, 180, 7, 182, 7, 184, 7, 212, 4, 236]);
    addNewDeck('Myriad', [2, 100, 7, 106, 1, 112, 7, 130, 4, 148, 1, 190, 3, 208]);
    addNewDeck('Momentum', [7, 14, 7, 78, 4, 110, 4, 112, 1, 124, 7, 130, 1, 142, 1, 144, 5, 182, 4, 184, 4, 212, 4, 218, 1, 238]);
    addNewDeck('LOLsnails', [5, 90, 2, 110, 2, 112, 7, 130, 5, 154, 1, 164, 2, 184, 5, 212]);
    addNewDeck('Apocalypse', [12, 8, 7, 116, 7, 130, 4, 142, 7, 188, 7, 218, 1, 238]);
    addNewDeck('Legion', [6, 16, 1, 82, 1, 100, 1, 122, 7, 130, 1, 190, 7, 208, 1, 238]);
    addNewDeck('Rampant', [7, 6, 7, 74, 3, 83, 5, 110, 7, 112, 7, 130, 2, 142, 2, 164, 7, 184, 2, 190, 7, 212]);
    addNewDeck('Blitz', [7, 106, 7, 130, 2, 180, 2, 192, 1, 196, 7, 232]);
    addNewDeck('Lernaean', [4, 4, 4, 8, 6, 156, 2, 166, 1, 198, 7, 212, 7, 226, 2, 244]);
    addNewDeck('Timmy', [13, 14, 5, 16, 9, 26, 7, 78, 7, 104, 7, 130, 7, 142, 2, 158, 7, 182, 7, 216, 7, 220, 5, 222, 2, 246]);
    addNewDeck('Mantodea', [10, 10, 5, 18, 7, 80, 7, 110, 5, 144, 5, 148, 5, 154, 3, 158, 3, 160, 5, 220]);
    addNewDeck('Tukkun', [7, 4, 7, 16, 10, 110, 1, 122, 5, 142, 1, 162, 2, 182, 3, 192, 12, 232, 1, 236, 1, 238, 7, 246, 7, 248]);
    addNewDeck('tenco1', [15, 10, 2, 12, 1, 22, 5, 71, 2, 144, 3, 147, 2, 148, 2, 149, 3, 150, 2, 151, 3, 152, 1, 160, 5, 180]);
    addNewDeck('tenco1', [1, 3, 5, 6, 5, 10, 5, 12, 5, 14, 10, 16, 20, 26, 7, 42, 7, 80, 7, 110, 7, 150, 7, 172, 7, 180, 7, 228]);
    addNewDeck('Sturmfeder', [10, 10, 3, 12, 4, 21, 5, 71, 1, 82, 1, 102, 2, 144, 5, 146, 4, 147, 2, 148, 3, 149, 2, 150, 5, 152, 3, 180]);
    addNewDeck('justinkal', [10, 4, 8, 14, 1, 33, 1, 52, 2, 53, 1, 56, 1, 60, 1, 71, 1, 78, 1, 90, 2, 91, 1, 94, 1, 100, 5, 110, 1, 116, 2, 125, 3, 130, 1, 142, 2, 147, 2, 150, 1, 151, 1, 166, 2, 168, 1, 172, 2, 204, 1, 207, 1, 221]);
    addNewDeck('missingno', [7, 6, 10, 8, 4, 18, 4, 20, 7, 58, 3, 60, 1, 104, 7, 110, 1, 116, 1, 124, 1, 126, 5, 130, 1, 183, 1, 194, 1, 216, 5, 218, 1, 232, 1, 236, 1, 244]);
    addNewDeck('ChaosII7', [5, 6, 8, 8, 1, 14, 2, 18, 3, 20, 1, 58, 5, 60, 7, 110, 1, 124, 7, 130, 1, 142, 2, 150, 1, 236, 1, 238]);
    addNewDeck('Motztante', [13, 6, 11, 8, 2, 38, 7, 54, 3, 104, 5, 110, 4, 118, 2, 120, 4, 124, 3, 132, 4, 152, 3, 180, 3, 184]);
    addNewDeck('Vexsloth', [4, 3, 2, 4, 4, 5, 3, 6, 5, 7, 2, 8, 1, 31, 1, 32, 1, 37, 1, 38, 1, 52, 1, 55, 1, 58, 2, 103, 1, 104, 1, 105, 1, 106, 2, 107, 1, 123, 1, 124, 1, 125, 2, 129, 2, 130, 1, 137, 1, 138, 1, 142, 4, 183, 1, 199, 1, 200, 1, 201, 1, 205, 1, 206, 2, 212, 2, 216, 2, 218, 1, 223, 1, 224, 2, 225, 1, 243]);
    addNewDeck('jakxkidney', [2, 3, 1, 4, 6, 5, 6, 6, 1, 13, 1, 14, 5, 17, 1, 33, 2, 35, 1, 36, 2, 44, 5, 105, 3, 109, 1, 125, 1, 129, 2, 147, 2, 149, 1, 175, 5, 183, 5, 185, 1, 199, 5, 215]);
    addNewDeck('DragonArcherZ', [10, 6, 5, 18, 3, 30, 2, 32, 2, 36, 3, 44, 3, 106, 3, 110, 2, 184, 2, 216]);
    addNewDeck('figter2000', [1, 6, 16, 10, 7, 12, 1, 44, 2, 78, 2, 82, 3, 100, 3, 110, 4, 130, 2, 144, 7, 148, 4, 150, 7, 152, 3, 164, 4, 180, 4, 182, 2, 186, 1, 236, 3, 244]);
    addNewDeck('39kk9t', [1, 3, 2, 4, 1, 5, 2, 6, 3, 7, 3, 10, 1, 11, 2, 12, 1, 13, 1, 14, 1, 16, 1, 18, 1, 33, 1, 39, 1, 41, 1, 53, 1, 58, 1, 63, 1, 64, 1, 71, 2, 80, 1, 105, 1, 109, 1, 116, 1, 125, 1, 129, 1, 130, 1, 132, 1, 144, 1, 147, 1, 149, 6, 151, 1, 152, 2, 154, 1, 166, 1, 167, 1, 172, 1, 175, 1, 184, 1, 188, 1, 206, 1, 212]);
    addNewDeck('soultaker7777', [9, 6, 1, 102, 7, 106, 7, 116, 1, 243, 1, 244]);
    addNewDeck('SaintSpirit', [8, 8, 8, 10, 4, 12, 2, 54, 2, 60, 2, 62, 2, 72, 2, 97, 2, 124, 4, 142, 2, 144, 4, 148, 3, 150, 3, 152, 4, 180, 4, 188, 2, 236, 2, 238]);
    addNewDeck('Tsunoflare', [3, 4, 12, 10, 3, 14, 3, 16, 10, 22, 1, 43, 1, 62, 4, 68, 1, 70, 2, 74, 1, 78, 1, 80, 1, 81, 1, 100, 1, 103, 3, 109, 2, 113, 2, 125, 3, 130, 5, 144, 5, 147, 4, 149, 2, 151, 3, 153, 1, 155, 1, 157, 1, 160, 3, 167, 2, 171, 3, 179, 1, 195, 1, 201, 3, 207, 1, 219, 2, 243]);
    addNewDeck('vincenthi135799', [14, 21, 2, 71, 3, 72, 5, 147, 5, 149, 2, 151]);
    addNewDeck('Gamer4124', [4, 3, 1, 4, 5, 5, 5, 7, 6, 9, 5, 11, 3, 13, 1, 15, 1, 17, 1, 19, 1, 22, 1, 23, 1, 25, 2, 29, 1, 33, 2, 35, 1, 49, 1, 51, 1, 53, 1, 55, 1, 62, 2, 67, 1, 69, 2, 71, 1, 73, 3, 87, 1, 89, 1, 91, 1, 93, 1, 105, 2, 109, 2, 124, 1, 125, 1, 129, 1, 130, 3, 147, 5, 149, 3, 151, 1, 153, 1, 167, 2, 171, 1, 180, 1, 181, 1, 183, 1, 202, 1, 203, 3, 207, 1, 209, 1, 211, 1, 215, 2, 217, 1, 236]);
    addNewDeck('Guest', [15, 8, 8, 10, 6, 124, 4, 130, 2, 142, 4, 148, 4, 152, 4, 180, 4, 218, 7, 232]);
    addNewDeck('Piscataway44', [9, 10, 8, 12, 2, 78, 2, 100, 1, 116, 3, 130, 5, 148, 5, 150, 4, 152, 4, 164, 4, 168, 5, 180, 1, 182, 2, 224]);
    addNewDeck('woto', [13, 10, 5, 14, 5, 71, 3, 116, 5, 130, 4, 144, 5, 148, 3, 150, 5, 152, 1, 162, 4, 180, 2, 198, 5, 224, 2, 236]);
    addNewDeck('destroyer57345', [6, 3, 6, 5, 7, 7, 7, 9, 7, 11, 2, 12, 1, 13, 1, 15, 2, 29, 1, 33, 1, 35, 1, 46, 2, 49, 1, 51, 1, 53, 1, 55, 2, 67, 1, 69, 1, 71, 1, 73, 2, 87, 2, 89, 1, 91, 1, 93, 1, 105, 1, 109, 1, 124, 1, 125, 1, 129, 3, 147, 4, 149, 1, 175, 1, 201]);
    addNewDeck('Rieffu', [17, 6, 7, 32, 2, 44, 2, 104, 3, 110, 1, 122, 4, 184, 4, 216]);
    addNewDeck('timhessel', [5, 4, 8, 6, 1, 32, 1, 42, 1, 58, 1, 92, 6, 110, 1, 124, 1, 138, 1, 148, 1, 151, 1, 158, 1, 172, 1, 182, 1, 184, 2, 200, 1, 204, 1, 211]);
    addNewDeck('timhessel', [8, 10, 1, 42, 1, 72, 1, 80, 1, 124, 1, 144, 1, 146, 2, 148, 2, 150, 4, 151, 1, 152, 1, 156, 1, 160, 1, 182, 1, 200, 1, 220]);
    addNewDeck('jurrin', [24, 5, 4, 35, 1, 36, 5, 37, 2, 41, 3, 43, 2, 44, 4, 109, 1, 121]);
    addNewDeck('PurgexCross', [4, 10, 4, 22, 1, 53, 1, 70, 2, 71, 1, 72, 1, 73, 1, 80, 1, 82, 1, 101, 1, 109, 1, 143, 3, 147, 2, 151, 1, 153]);
    addNewDeck('straymaverick', [21, 5, 5, 35, 7, 37, 2, 44, 3, 103, 2, 109, 1, 115, 1, 121, 1, 141, 5, 183, 2, 184, 5, 215, 2, 216, 3, 223]);
    addNewDeck('adrian206', [4, 4, 4, 6, 4, 8, 4, 10, 4, 12, 5, 14, 1, 26, 2, 29, 3, 30, 2, 33, 2, 34, 1, 35, 2, 49, 1, 51, 1, 53, 1, 54, 1, 55, 3, 60, 1, 61, 1, 62, 2, 67, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 3, 104, 2, 105, 1, 106, 1, 109, 2, 114, 1, 124, 1, 125, 3, 130, 5, 133, 1, 137, 1, 138, 2, 142, 3, 144, 4, 146, 2, 147, 1, 149, 3, 156, 1, 167, 3, 174, 1, 175, 1, 208, 1, 210]);
    addNewDeck('DavidMadsen', [13, 10, 3, 14, 5, 54, 4, 110, 2, 118, 2, 130, 1, 142, 4, 144, 5, 148, 5, 150, 5, 152, 5, 164, 5, 180, 1, 181, 1, 182, 5, 194, 1, 210, 1, 220, 5, 232, 1, 236, 1, 237, 1, 243, 4, 244]);
    addNewDeck('balrok', [5, 5, 1, 6, 3, 7, 2, 10, 2, 33, 2, 35, 1, 41, 2, 51, 1, 53, 1, 55, 1, 57, 1, 68, 2, 87, 1, 107, 4, 110, 1, 114, 1, 125, 2, 147, 5, 151, 1, 167, 2, 205, 1, 219]);
    addNewDeck('duudez', [2, 4, 1, 6, 1, 8, 3, 9, 1, 10, 4, 11, 2, 12, 8, 13, 2, 29, 1, 35, 1, 50, 1, 53, 1, 55, 1, 69, 1, 71, 1, 73, 1, 82, 1, 91, 1, 95, 1, 100, 2, 109, 1, 115, 1, 118, 4, 125, 1, 130, 1, 147, 1, 149, 1, 156, 1, 163, 1, 167, 1, 174, 1, 179, 1, 183]);
    addNewDeck('frae2', [20, 14, 8, 16, 2, 40, 2, 42, 1, 44, 3, 60, 6, 110, 5, 122, 5, 124, 5, 130, 1, 142, 3, 148, 2, 150, 5, 152, 3, 180, 1, 184, 2, 186, 5, 204, 7, 210, 2, 212, 1, 214, 3, 218, 1, 234, 2, 238, 5, 240]);
    addNewDeck('Yupei', [6, 3, 2, 4, 13, 9, 10, 10, 2, 21, 1, 71, 2, 75, 2, 77, 2, 79, 1, 81, 2, 109, 1, 123, 2, 143, 3, 147, 3, 149, 3, 151, 1, 152, 1, 153, 1, 184, 1, 199, 1, 200, 1, 202, 3, 205, 4, 207, 4, 219, 1, 220, 1, 236, 1, 238, 1, 240]);
    addNewDeck('Hakaisha', [5, 4, 5, 6, 12, 14, 5, 16, 2, 18, 1, 26, 2, 40, 1, 42, 2, 44, 3, 60, 5, 110, 5, 120, 1, 122, 2, 124, 5, 130, 1, 142, 2, 148, 2, 150, 5, 152, 5, 180, 3, 204, 2, 212, 1, 216, 5, 218, 6, 232, 1, 236, 1, 238, 5, 240, 5, 244]);
    addNewDeck('iamevilman', [11, 8, 4, 10, 4, 124, 4, 130, 1, 142, 4, 152, 4, 218]);
    addNewDeck('iamevilman', [10, 10, 3, 12, 4, 22, 4, 71, 1, 82, 3, 144, 4, 147, 2, 148, 3, 150, 4, 152, 3, 180]);
    addNewDeck('shinki12345', [10, 10, 3, 72, 2, 144, 5, 148, 4, 150, 7, 152, 2, 160, 3, 232, 1, 236, 3, 243]);
    addNewDeck('nightmaren00', [5, 3, 1, 4, 5, 5, 5, 7, 5, 9, 5, 11, 1, 12, 1, 13, 1, 33, 1, 35, 5, 43, 1, 53, 1, 55, 5, 71, 1, 73, 1, 82, 1, 91, 1, 93, 1, 105, 1, 109, 1, 125, 1, 129, 5, 148, 1, 149, 1, 151, 1, 167, 1, 175, 5, 185, 5, 207, 5, 215, 5, 221, 5, 223]);
    addNewDeck('Gamerdude247', [5, 8, 10, 10, 2, 12, 3, 20, 1, 22, 1, 60, 2, 72, 2, 124, 4, 130, 1, 144, 7, 148, 3, 150, 7, 152, 5, 180, 3, 218, 3, 220, 6, 232]);
    addNewDeck('Alamand', [14, 10, 1, 72, 5, 144, 7, 148, 7, 152, 5, 180, 7, 186, 4, 232]);
    addNewDeck('lackinglack1', [7, 4, 2, 6, 5, 10, 5, 14, 2, 44, 2, 72, 2, 78, 3, 82, 1, 104, 1, 106, 1, 110, 3, 144, 2, 146, 5, 148, 4, 150, 5, 152, 2, 164, 3, 168, 3, 184, 2, 204, 4, 209, 1, 212, 2, 216, 1, 218, 1, 220, 1, 222]);
    addNewDeck('Gamerdude247', [10, 8, 15, 10, 4, 12, 3, 20, 1, 22, 1, 24, 1, 60, 3, 72, 2, 124, 4, 130, 1, 144, 7, 148, 3, 150, 7, 152, 7, 180, 3, 218, 7, 220, 7, 232]);
    addNewDeck('Killerkarnickel', [7, 8, 9, 12, 4, 116, 5, 124, 5, 130, 4, 150, 1, 180, 7, 182, 5, 232, 2, 236, 2, 238]);
    addNewDeck('Kenaron', [3, 2, 1, 28, 4, 30, 1, 114, 1, 116, 7, 130, 4, 136, 2, 152, 4, 156, 2, 166, 1, 171, 3, 174, 2, 178, 1, 196, 4, 205, 2, 235]);
    addNewDeck('Kenaron', [3, 2, 1, 28, 4, 30, 2, 50, 1, 88, 2, 116, 7, 130, 4, 136, 3, 150, 4, 156, 2, 166, 3, 174, 2, 178, 1, 179, 3, 186, 4, 206, 2, 235, 1, 238]);
    addNewDeck('Kenaron', [3, 2, 4, 30, 1, 114, 1, 116, 7, 130, 4, 136, 2, 152, 4, 156, 1, 171, 1, 172, 2, 173, 3, 174, 2, 178, 1, 196, 4, 205, 1, 224, 1, 235]);
    addNewDeck('aznpanda890', [15, 6, 1, 17, 5, 18, 2, 34, 2, 36, 1, 38, 2, 40, 2, 42, 1, 104, 1, 106, 2, 110]);
    addNewDeck('lackinglack1', [6, 4, 5, 6, 10, 10, 5, 14, 2, 44, 2, 82, 4, 110, 5, 130, 4, 144, 6, 148, 5, 150, 6, 152, 4, 164, 4, 180, 1, 182, 3, 184, 2, 204, 4, 209, 1, 212, 3, 216, 1, 218, 1, 220, 1, 222, 5, 224, 3, 235, 3, 237]);
    addNewDeck('Tigerbladedn', [3, 3, 2, 4, 1, 5, 4, 6, 5, 7, 8, 9, 2, 10, 6, 11, 4, 12, 1, 13, 1, 32, 1, 33, 1, 35, 2, 42, 1, 53, 1, 55, 2, 58, 1, 70, 1, 73, 2, 78, 2, 80, 1, 93, 2, 95, 2, 98, 1, 105, 4, 109, 1, 118, 3, 124, 1, 125, 4, 129, 1, 147, 1, 149, 5, 152, 2, 154, 1, 167, 1, 175, 2, 183, 5, 218, 5, 220, 3, 221]);
    addNewDeck('elkid', [2, 5, 2, 6, 2, 7, 11, 9, 6, 10, 1, 13, 2, 33, 1, 38, 3, 40, 2, 44, 1, 53, 1, 55, 1, 57, 1, 60, 4, 71, 1, 73, 2, 105, 2, 109, 1, 113, 1, 125, 1, 130, 2, 143, 5, 148, 5, 149, 5, 151, 1, 152, 1, 164, 1, 167, 1, 198, 1, 210, 1, 215, 3, 216, 2, 220, 3, 243]);
    addNewDeck('ManXl', [8, 3, 2, 6, 2, 8, 4, 15, 2, 29, 5, 109, 4, 129, 6, 137, 1, 149, 2, 151, 4, 167, 4, 185, 4, 199, 3, 203, 7, 205, 4, 207]);
    addNewDeck('zeo123200', [5, 10, 10, 22, 4, 71, 1, 144, 3, 147, 4, 148, 5, 149, 2, 150, 2, 151, 5, 152, 1, 161, 2, 220, 1, 235]);
    addNewDeck('LokiGodOfFire', [20, 7, 3, 49, 1, 50, 3, 51, 1, 53, 4, 55, 1, 57, 1, 59, 1, 61, 4, 109, 4, 123, 7, 125, 4, 129, 1, 138, 3, 217, 1, 240]);
    addNewDeck('xdarkcodex', [33, 9, 1, 13, 2, 67, 1, 69, 5, 71, 3, 73, 6, 75, 6, 79, 1, 81, 1, 105, 1, 125, 1, 129, 4, 143, 2, 145, 1, 147, 1, 149, 3, 151, 1, 155, 4, 159, 1, 167, 1, 183]);
    addNewDeck('Fasalrod', [10, 4, 7, 8, 5, 10, 5, 14, 5, 110, 5, 116, 5, 124, 2, 125, 1, 142, 5, 148, 5, 152, 2, 165, 5, 180, 2, 199, 5, 204, 1, 207, 5, 218, 2, 232]);
    addNewDeck('crazyphysicist', [1, 14, 1, 28, 1, 46, 2, 108, 3, 130, 1, 150, 3, 156, 1, 158, 1, 166, 1, 178, 1, 180, 1, 192, 5, 232, 1, 236, 1, 238, 7, 240, 1, 244]);
    addNewDeck('C4po', [10, 4, 5, 6, 5, 10, 5, 13, 5, 110, 1, 150, 2, 151, 3, 152, 5, 199, 5, 203, 3, 207, 2, 211]);
    addNewDeck('zerotg90', [7, 5, 2, 6, 7, 9, 2, 10, 2, 29, 2, 31, 1, 33, 1, 35, 2, 40, 2, 42, 1, 43, 2, 67, 2, 69, 3, 71, 1, 73, 2, 79, 2, 82, 1, 105, 2, 109, 2, 147, 2, 149, 2, 151, 2, 183]);
    addNewDeck('RikuFrost', [3, 3, 3, 5, 3, 7, 3, 9, 3, 11, 2, 13, 2, 29, 1, 33, 1, 35, 2, 49, 1, 51, 1, 53, 2, 55, 1, 65, 2, 67, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 1, 105, 1, 109, 1, 125, 1, 129, 1, 133, 1, 147, 1, 149, 2, 167, 1, 175]);
    addNewDeck('rocxror', [7, 5, 10, 6, 5, 9, 2, 13, 2, 29, 1, 33, 1, 35, 1, 105, 1, 109, 3, 145, 1, 147, 5, 149, 1, 184]);
    addNewDeck('Abinmorth', [1, 1, 1, 3, 10, 4, 1, 5, 1, 191, 1, 200, 1, 203, 5, 204, 1, 208, 1, 209, 5, 212, 1, 227, 1, 232, 1, 243]);
    addNewDeck('dahp', [10, 12, 6, 24, 2, 94, 2, 96, 3, 100, 1, 149, 3, 163, 2, 167, 1, 175, 4, 222]);
    addNewDeck('Nator', [20, 8, 2, 60, 7, 124, 7, 130, 5, 150, 2, 190, 7, 218, 2, 236, 2, 238]);
    addNewDeck('metax11', [10, 6, 8, 8, 7, 58, 4, 104, 7, 110, 5, 124, 3, 180, 2, 218, 2, 235, 2, 240]);
    addNewDeck('opex51', [5, 3, 5, 5, 5, 7, 5, 9, 6, 11, 1, 13, 3, 15, 2, 17, 2, 29, 1, 31, 1, 33, 2, 35, 1, 44, 1, 46, 2, 49, 1, 51, 1, 53, 2, 55, 1, 61, 4, 67, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 1, 105, 1, 109, 1, 125, 1, 129, 1, 146, 1, 147, 1, 149, 1, 167, 1, 175, 1, 190, 1, 227]);
    addNewDeck('arklegru', [7, 8, 7, 10, 3, 14, 3, 20, 3, 22, 2, 54, 2, 55, 1, 59, 1, 62, 1, 71, 3, 78, 3, 91, 4, 109, 3, 124, 1, 126, 2, 130, 1, 134, 1, 138, 3, 144, 2, 148, 2, 150, 5, 152, 1, 159, 2, 167, 1, 204, 3, 218, 5, 220]);
    addNewDeck('Mirodian', [7, 14, 7, 26, 1, 44, 1, 54, 1, 60, 1, 80, 5, 110, 3, 124, 3, 130, 1, 142, 1, 146, 2, 148, 2, 150, 3, 152, 2, 154, 1, 164, 2, 180, 2, 182, 1, 184, 1, 204, 5, 218, 3, 220]);
    addNewDeck('pika393', [6, 10, 8, 12, 2, 20, 4, 100, 7, 130, 7, 152, 7, 180]);
    addNewDeck('Odenezen', [5, 5, 1, 6, 2, 8, 3, 9, 7, 10, 1, 12, 4, 17, 2, 19, 3, 21, 5, 71, 5, 79, 2, 81, 1, 82, 2, 91, 2, 103, 1, 104, 1, 105, 1, 109, 4, 110, 1, 125, 2, 130, 4, 147, 1, 148, 2, 149, 2, 151, 3, 152, 2, 157, 1, 159, 2, 160, 1, 167, 2, 171, 5, 193, 1, 195, 2, 217, 2, 218]);
    addNewDeck('hithere', [8, 6, 13, 8, 4, 60, 7, 110, 4, 130, 1, 142, 1, 204]);
    addNewDeck('Qwertyuiopas', [2, 4, 20, 10, 1, 13, 2, 14, 1, 70, 3, 71, 3, 74, 1, 76, 1, 77, 1, 91, 2, 110, 2, 130, 1, 143, 1, 144, 1, 145, 1, 146, 3, 147, 1, 148, 4, 149, 1, 150, 1, 151, 1, 152, 1, 154, 2, 156, 1, 158, 1, 160, 1, 171, 1, 174, 1, 183, 1, 192, 2, 194, 1, 209, 1, 216, 3, 218, 1, 220]);
    addNewDeck('Guest', [17, 9, 3, 22, 2, 67, 2, 69, 2, 70, 4, 71, 2, 73, 5, 150, 3, 151, 4, 152, 1, 159, 1, 161, 1, 167, 1, 175, 2, 191, 4, 192, 3, 219]);
    addNewDeck('trofffim', [7, 3, 5, 5, 5, 7, 6, 9, 5, 11, 1, 13, 1, 27, 2, 29, 1, 33, 1, 35, 2, 49, 1, 51, 2, 105, 1, 129, 1, 147, 1, 149, 1, 167, 1, 175, 5, 203]);
    addNewDeck('JohnSmithBalls', [4, 8, 10, 10, 2, 12, 1, 14, 2, 20, 2, 22, 3, 72, 2, 78, 1, 122, 5, 124, 5, 130, 1, 149, 3, 150, 7, 152, 1, 162, 1, 164, 4, 180, 1, 182, 5, 194]);
    addNewDeck('drakethatsme', [6, 6, 6, 8, 3, 12, 1, 15, 3, 18, 3, 20, 4, 23, 3, 59, 1, 91, 2, 92, 1, 99, 4, 109, 1, 110, 3, 124, 1, 130, 3, 184, 4, 191, 4, 218, 2, 231]);
    addNewDeck('nickthemenace', [16, 10, 1, 13, 1, 18, 1, 58, 1, 68, 2, 71, 2, 72, 1, 73, 1, 85, 1, 94, 1, 105, 2, 108, 1, 110, 1, 126, 2, 129, 1, 142, 2, 143, 3, 144, 2, 145, 5, 147, 2, 148, 6, 149, 1, 150, 2, 151, 1, 152, 1, 167, 1, 184, 2, 205, 3, 215, 2, 216, 1, 218, 1, 219, 1, 220]);
    addNewDeck('torcherboy10', [5, 3, 14, 5, 5, 7, 3, 9, 2, 10, 5, 11, 8, 13, 4, 17, 2, 29, 1, 33, 1, 35, 3, 39, 7, 43, 2, 49, 1, 51, 1, 53, 2, 67, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 4, 103, 1, 104, 1, 105, 7, 109, 1, 129, 1, 147, 1, 149, 1, 167, 1, 175, 2, 209, 3, 216]);
    addNewDeck('torcherboy10', [6, 3, 1, 4, 14, 5, 1, 7, 5, 9, 2, 10, 3, 11, 8, 13, 4, 17, 2, 29, 1, 33, 1, 35, 3, 39, 7, 43, 2, 67, 1, 69, 1, 71, 1, 73, 1, 91, 5, 103, 1, 104, 1, 105, 7, 109, 1, 129, 1, 147, 1, 148, 2, 149, 1, 151, 1, 167, 1, 175, 1, 182, 1, 197, 4, 209, 1, 211, 3, 216]);
    addNewDeck('figter2000', [2, 4, 11, 6, 5, 8, 2, 10, 2, 12, 2, 32, 1, 33, 1, 40, 1, 44, 1, 52, 4, 53, 1, 60, 2, 78, 2, 82, 3, 100, 1, 104, 6, 110, 3, 118, 5, 130, 1, 142, 2, 150, 2, 152, 4, 182, 2, 203, 3, 218, 1, 232, 1, 236]);
    addNewDeck('person2348', [1, 1, 5, 3, 1, 4, 5, 5, 7, 7, 7, 9, 4, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 17, 1, 19, 1, 21, 1, 23, 1, 25, 2, 29, 1, 31, 2, 33, 2, 35, 1, 41, 1, 43, 3, 49, 1, 51, 1, 53, 1, 55, 1, 57, 1, 59, 1, 62, 3, 67, 2, 69, 1, 71, 2, 73, 1, 77, 4, 87, 1, 89, 2, 91, 1, 93, 1, 96, 2, 105, 1, 107, 1, 109, 1, 119, 1, 120, 2, 125, 2, 129, 1, 131, 2, 135, 1, 137, 2, 147, 2, 149, 1, 167, 1, 173, 2, 175, 1, 188, 1, 201, 1, 218]);
    addNewDeck('iamnoone', [4, 6, 4, 18, 7, 102, 1, 108, 5, 110, 4, 130, 7, 156, 7, 186, 1, 232, 5, 240]);
    addNewDeck('Quaznar', [11, 6, 11, 8, 10, 10, 7, 40, 5, 53, 7, 130, 5, 148, 7, 152, 5, 180, 7, 194, 1, 198, 1, 217, 6, 218, 7, 224, 2, 236, 1, 238, 7, 244]);
    addNewDeck('sh00td3ad', [20, 5, 11, 17, 2, 35, 7, 37, 7, 43, 3, 105, 6, 109, 7, 183, 7, 215]);
    addNewDeck('Simpoink', [10, 5, 10, 11, 3, 13, 1, 18, 1, 23, 1, 27, 2, 29, 2, 33, 2, 35, 1, 39, 1, 41, 1, 43, 2, 87, 2, 89, 1, 91, 2, 93, 1, 95, 1, 97, 1, 98, 2, 99, 2, 103, 1, 105, 3, 109, 1, 111, 1, 113, 1, 115, 1, 117, 1, 167, 2, 171, 1, 173, 1, 180, 1, 201, 1, 204, 2, 207, 1, 211, 1, 215, 1, 221, 1, 223, 1, 229, 1, 233]);
    addNewDeck('abc12367659', [4, 3, 2, 5, 3, 7, 4, 9, 3, 11, 2, 13, 1, 20, 1, 29, 1, 35, 1, 49, 1, 53, 1, 55, 1, 67, 1, 69, 1, 71, 1, 73, 1, 79, 1, 82, 1, 87, 1, 89, 1, 91, 1, 93, 1, 105, 1, 125, 1, 129, 1, 147, 1, 149, 1, 167, 1, 172, 1, 175, 1, 204, 2, 211, 1, 212, 1, 223]);
    addNewDeck('Olobaid', [5, 4, 6, 6, 5, 8, 5, 10, 5, 12, 2, 14, 1, 35, 2, 43, 2, 44, 1, 53, 1, 55, 1, 73, 2, 80, 1, 89, 1, 93, 1, 104, 2, 130, 1, 147, 2, 148, 1, 149, 2, 150, 3, 152, 1, 167, 1, 172, 1, 175, 2, 191, 2, 202, 2, 205, 2, 206, 2, 237]);
    addNewDeck('GregLazlo', [3, 4, 4, 6, 4, 8, 3, 10, 3, 12, 2, 13, 1, 14, 2, 15, 1, 19, 1, 21, 1, 28, 1, 29, 1, 33, 1, 36, 2, 41, 1, 56, 2, 62, 1, 71, 1, 73, 2, 80, 1, 93, 1, 96, 2, 108, 4, 110, 1, 126, 2, 130, 1, 134, 1, 138, 1, 140, 1, 144, 1, 148, 2, 149, 2, 150, 1, 152, 1, 156, 2, 167, 1, 172, 3, 204, 1, 205, 1, 207, 1, 219, 1, 221]);
    addNewDeck('spyrolvr96', [2, 1, 1, 2, 7, 3, 1, 4, 7, 13, 5, 15, 1, 25, 1, 26, 1, 80, 1, 95, 1, 109, 3, 110, 1, 129, 1, 147, 1, 149, 1, 151, 1, 152, 1, 171, 1, 175, 3, 199, 1, 200, 3, 201, 1, 202, 3, 203, 1, 204, 3, 205, 1, 206, 2, 207, 1, 208, 2, 209, 3, 211, 1, 212, 3, 213, 1, 214, 1, 235, 1, 237]);
    addNewDeck('AogT666', [3, 4, 4, 6, 4, 8, 4, 10, 4, 12, 2, 44, 2, 62, 2, 82, 2, 100, 1, 104, 3, 110, 1, 124, 1, 144, 3, 148, 2, 150, 1, 152, 1, 163, 6, 180, 1, 186, 1, 204, 1, 208, 1, 212, 1, 218, 2, 235]);
    addNewDeck('Arcanmster', [8, 6, 8, 8, 1, 14, 1, 40, 2, 54, 4, 60, 1, 80, 2, 91, 5, 110, 1, 118, 1, 120, 3, 124, 4, 130, 2, 147, 3, 151, 1, 172, 1, 180, 1, 208, 2, 216, 2, 218, 2, 220, 1, 232, 1, 236, 3, 244]);
    addNewDeck('jeff7871', [2, 3, 1, 4, 1, 6, 7, 7, 6, 9, 4, 10, 1, 13, 5, 21, 1, 33, 1, 35, 1, 40, 1, 49, 1, 51, 1, 53, 1, 55, 2, 67, 2, 69, 1, 71, 1, 73, 2, 77, 1, 81, 2, 143, 1, 146, 1, 147, 1, 149, 1, 155, 1, 207, 1, 219]);
    addNewDeck('mmKALLL', [5, 4, 7, 6, 1, 43, 2, 91, 6, 110, 7, 130, 4, 184, 4, 204]);
    addNewDeck('cheese9999', [4, 3, 15, 5, 4, 7, 3, 9, 15, 11, 8, 13, 2, 15, 5, 17, 1, 19, 1, 21, 6, 23, 2, 49, 1, 51, 1, 53, 1, 55, 1, 59, 2, 61, 2, 67, 1, 69, 1, 71, 1, 73, 1, 80, 7, 91, 7, 109, 1, 123, 1, 125, 1, 129, 1, 144, 1, 147, 1, 149, 1, 151, 1, 211]);
    addNewDeck('pagboy', [5, 3, 5, 5, 2, 6, 2, 7, 8, 9, 2, 11, 1, 12, 1, 14, 6, 15, 1, 16, 1, 22, 1, 39, 5, 71, 5, 91, 1, 105, 2, 109, 1, 123, 1, 125, 5, 129, 1, 144, 5, 145, 2, 147, 2, 149, 3, 150, 2, 167, 1, 181, 1, 199, 1, 200, 1, 202, 1, 207, 1, 210, 2, 215, 5, 217, 5, 219, 1, 231, 1, 235, 1, 239, 1, 242]);
    addNewDeck('blakzer', [7, 1, 1, 2, 5, 3, 6, 5, 5, 7, 5, 9, 7, 11, 1, 13, 1, 16, 1, 25, 1, 26, 2, 29, 1, 33, 2, 35, 2, 37, 2, 49, 1, 51, 1, 53, 1, 55, 1, 69, 1, 71, 1, 73, 2, 87, 1, 89, 1, 91, 1, 93, 1, 105, 1, 109, 1, 125, 2, 129, 7, 147, 7, 149, 1, 167, 1, 175, 4, 205, 3, 206, 7, 207, 1, 211, 1, 213, 1, 217, 2, 223]);
    addNewDeck('isomanic', [6, 6, 6, 8, 3, 18, 3, 20, 1, 32, 1, 34, 1, 38, 1, 42, 1, 44, 2, 54, 2, 60, 1, 61, 2, 103, 3, 110, 1, 112, 1, 116, 2, 124, 2, 126, 3, 130, 1, 138, 2, 142, 2, 188, 1, 217, 1, 218, 1, 238]);
    addNewDeck('Sephirothfan', [2, 3, 2, 5, 2, 7, 2, 9, 2, 11, 1, 13, 2, 29, 1, 33, 1, 35, 1, 39, 1, 42, 1, 51, 1, 53, 1, 55, 1, 69, 1, 71, 2, 73, 1, 87, 1, 89, 2, 93, 1, 96, 2, 105, 1, 109, 1, 112, 1, 125, 1, 129, 1, 130, 1, 140, 1, 147, 1, 149, 1, 175, 2, 184, 1, 207, 2, 210, 2, 217]);
    addNewDeck('reorx8', [7, 6, 5, 40, 7, 140, 3, 150, 3, 180, 3, 212, 7, 244]);
    addNewDeck('reorx8', [11, 10, 4, 130, 5, 148, 6, 152, 7, 220]);
    addNewDeck('reorx8', [2, 16, 4, 28, 3, 126, 3, 180, 4, 212, 2, 236, 3, 242, 4, 244]);
    addNewDeck('reorx8', [4, 18, 6, 20, 2, 42, 7, 126, 7, 130, 2, 180, 3, 236, 7, 242, 6, 244]);
    addNewDeck('reorx8', [3, 14, 6, 26, 3, 92, 7, 110, 7, 130, 3, 152, 4, 232]);
    addNewDeck('reorx8', [4, 26, 4, 48, 5, 130, 5, 154, 3, 180, 3, 184, 6, 214]);
    addNewDeck('reorx8', [3, 14, 7, 26, 2, 42, 3, 126, 5, 130, 4, 152, 5, 180, 3, 212]);
    addNewDeck('reorx8', [6, 26, 5, 48, 7, 130, 5, 154, 4, 180, 2, 212, 5, 214]);
    addNewDeck('reorx8', [2, 6, 3, 14, 7, 26, 3, 92, 7, 110, 7, 130, 3, 152, 4, 232]);
    addNewDeck('reorx8', [12, 10, 2, 82, 7, 130, 7, 148, 5, 152, 3, 180, 7, 194, 3, 212, 4, 244]);
    addNewDeck('reorx8', [3, 26, 3, 42, 4, 130, 2, 152, 4, 170, 3, 180, 3, 212, 3, 244]);
    addNewDeck('reorx8', [4, 48, 5, 130, 4, 132, 2, 180, 3, 184, 3, 212, 7, 236, 2, 238, 7, 242]);
    addNewDeck('reorx8', [4, 6, 3, 20, 3, 60, 5, 110, 6, 236, 2, 238, 7, 242]);
    addNewDeck('reorx8', [5, 6, 2, 22, 4, 24, 4, 92, 7, 110, 4, 130, 3, 152, 3, 232]);
    addNewDeck('reorx8', [4, 26, 4, 48, 5, 130, 5, 154, 3, 180, 3, 184, 6, 214]);
    addNewDeck('reorx8', [10, 10, 5, 144, 7, 148, 3, 206, 2, 216, 2, 218, 7, 220, 2, 222]);
    addNewDeck('reorx8', [6, 18, 5, 24, 5, 110, 4, 130, 6, 198, 7, 232, 2, 238]);
    addNewDeck('reorx8', [5, 6, 4, 24, 3, 92, 7, 110, 4, 130, 2, 152, 5, 170, 4, 232]);
    addNewDeck('reorx8', [7, 10, 5, 20, 7, 126, 7, 130, 7, 148, 5, 152, 3, 180, 4, 244]);
    addNewDeck('reorx8', [12, 10, 3, 71, 5, 130, 7, 148, 7, 152, 3, 180, 3, 212, 4, 244]);
    addNewDeck('reorx8', [4, 26, 7, 206, 3, 216, 4, 218, 4, 222, 7, 236, 7, 242]);
    addNewDeck('reorx8', [4, 6, 9, 12, 2, 18, 7, 92, 7, 110, 7, 130, 2, 150, 2, 158, 4, 182, 3, 206]);
    addNewDeck('reorx8', [5, 22, 4, 24, 3, 82, 6, 112, 5, 126, 7, 180]);
    addNewDeck('reorx8', [8, 14, 13, 26, 3, 104, 4, 124, 7, 130, 2, 144, 7, 148, 2, 164, 7, 180, 7, 244]);
    addNewDeck('reorx8', [3, 26, 2, 42, 5, 130, 2, 166, 4, 212, 7, 236, 4, 242]);
    addNewDeck('reorx8', [5, 18, 7, 24, 7, 92, 5, 110, 7, 130, 1, 210, 7, 236, 7, 242]);
    addNewDeck('reorx8', [15, 14, 15, 16, 7, 116, 7, 122, 7, 130, 7, 142, 7, 150, 7, 182, 7, 196, 4, 246]);
    addNewDeck('Kongregate Username', [11, 12, 5, 130, 7, 182, 3, 214, 2, 216, 5, 236]);
    addNewDeck('Kongregate Username', [3, 14, 5, 26, 3, 42, 5, 130, 5, 152, 5, 180, 2, 212, 4, 244]);
    addNewDeck('Kongregate Username', [7, 18, 5, 110, 4, 130, 5, 232, 5, 236, 5, 242]);
    addNewDeck('Kongregate Username', [6, 12, 5, 80, 7, 130, 7, 182, 4, 214, 5, 236, 5, 242, 3, 244]);
    addNewDeck('Kongregate Username', [7, 22, 1, 26, 4, 130, 7, 144, 1, 164, 3, 206, 2, 216]);
    addNewDeck('Kongregate Username', [2, 4, 5, 8, 6, 20, 7, 26, 7, 54, 4, 108, 7, 130, 7, 132, 3, 142, 3, 154, 5, 180, 4, 194, 7, 212, 7, 214, 4, 244]);
    addNewDeck('Kongregate Username', [9, 14, 11, 26, 5, 44, 1, 82, 1, 100, 7, 130, 7, 140, 3, 142, 7, 152, 7, 168, 5, 198, 2, 204]);
    addNewDeck('Kongregate Username', [9, 26, 6, 28, 7, 130, 4, 152, 5, 180, 7, 212]);
    addNewDeck('Kongregate Username', [12, 10, 3, 116, 7, 130, 7, 148, 4, 150, 7, 152, 2, 166, 7, 170, 1, 180]);
    addNewDeck('Kongregate Username', [15, 12, 4, 100, 7, 130, 3, 152, 1, 158, 2, 172, 7, 182, 3, 212]);
    addNewDeck('Kongregate Username', [5, 26, 5, 28, 5, 130, 3, 154, 3, 180, 1, 184, 4, 194, 4, 212, 2, 244]);
    addNewDeck('Kongregate Username', [12, 14, 14, 26, 7, 116, 7, 126, 7, 130, 4, 142, 7, 148, 7, 150, 7, 182, 7, 236, 7, 242]);
    addNewDeck('Kongregate Username', [10, 10, 7, 126, 7, 148, 7, 152, 5, 180, 6, 244]);
    addNewDeck('Kongregate Username', [7, 14, 9, 26, 3, 40, 5, 124, 7, 130, 7, 140, 7, 152, 3, 180, 7, 198, 4, 244]);
    addNewDeck('Kongregate Username', [7, 10, 5, 28, 5, 130, 7, 152, 5, 154, 3, 180, 3, 212, 4, 244]);
    addNewDeck('Kongregate Username', [8, 26, 6, 28, 7, 130, 3, 152, 3, 180, 3, 184, 7, 212]);
    addNewDeck('Kongregate Username', [7, 10, 7, 126, 7, 148, 4, 152, 7, 166, 6, 244]);
    addNewDeck('Kongregate Username', [17, 12, 7, 130, 3, 144, 7, 168, 7, 182, 7, 198, 5, 214, 4, 222]);
    addNewDeck('Kongregate Username', [10, 6, 7, 44, 1, 96, 1, 104, 4, 124, 7, 130, 7, 144, 1, 164, 5, 180, 3, 194, 1, 202, 7, 212, 3, 244]);
    addNewDeck('Kongregate Username', [12, 14, 16, 26, 7, 116, 7, 122, 7, 126, 7, 130, 7, 142, 7, 152, 7, 182, 2, 246]);
    addNewDeck('Kongregate Username', [5, 26, 6, 28, 7, 130, 4, 154, 5, 180, 2, 184, 6, 194, 4, 212]);
    addNewDeck('Kongregate Username', [8, 6, 4, 40, 3, 152, 3, 214, 7, 244]);
    addNewDeck('Kongregate Username', [3, 42, 2, 124, 3, 166, 3, 180, 2, 212, 5, 236, 5, 242, 2, 244]);
    addNewDeck('Kongregate Username', [11, 12, 7, 130, 3, 152, 2, 158, 7, 182, 4, 214, 1, 216, 6, 222]);
    addNewDeck('Kongregate Username', [10, 10, 4, 130, 7, 152, 1, 210, 1, 216, 7, 220, 1, 222]);
    addNewDeck('Kongregate Username', [4, 26, 4, 42, 5, 130, 3, 154, 3, 180, 4, 212, 4, 236, 3, 242]);
    addNewDeck('Kongregate Username', [6, 10, 3, 54, 7, 152, 3, 172, 2, 180, 4, 194, 3, 212, 5, 244]);
    addNewDeck('Kongregate Username', [11, 14, 14, 26, 3, 60, 6, 104, 5, 124, 3, 130, 7, 148, 6, 150, 7, 152, 5, 164, 7, 168, 7, 180, 7, 198, 1, 236, 4, 244, 7, 246]);
    addNewDeck('Kongregate Username', [7, 26, 7, 28, 7, 130, 3, 152, 4, 180, 3, 194, 7, 212, 3, 244]);
    addNewDeck('Kongregate Username', [4, 28, 3, 126, 2, 154, 3, 180, 2, 212, 3, 236, 4, 242, 4, 244]);
    addNewDeck('Kongregate Username', [4, 8, 13, 14, 17, 26, 7, 40, 3, 72, 7, 130, 7, 142, 7, 152, 7, 182, 7, 194, 7, 218, 7, 220, 1, 246]);
    addNewDeck('Kongregate Username', [5, 6, 8, 26, 4, 40, 3, 72, 7, 130, 2, 150, 2, 182, 7, 214, 7, 244]);
    addNewDeck('Kongregate Username', [9, 12, 3, 100, 2, 112, 5, 130, 3, 150, 6, 166, 5, 180, 3, 212]);
    addNewDeck('Kongregate Username', [9, 14, 14, 26, 1, 62, 7, 78, 7, 110, 7, 130, 4, 142, 7, 182, 1, 204, 2, 214]);
    addNewDeck('Kongregate Username', [6, 10, 3, 42, 5, 130, 7, 152, 5, 180, 7, 194, 4, 244]);
    addNewDeck('Kongregate Username', [8, 14, 8, 26, 4, 40, 7, 130, 2, 142, 7, 152, 7, 180]);
    addNewDeck('Kongregate Username', [3, 26, 2, 42, 5, 130, 1, 166, 4, 212, 1, 234, 7, 236, 4, 242]);
    addNewDeck('Kongregate Username', [5, 6, 10, 14, 14, 26, 7, 116, 7, 122, 7, 130, 7, 142, 7, 150, 7, 182, 7, 196, 4, 246]);
    addNewDeck('Kongregate Username', [7, 6, 2, 16, 4, 40, 5, 140, 3, 150, 4, 180, 5, 212, 7, 244]);
    addNewDeck('Kongregate Username', [6, 18, 3, 86, 6, 110, 3, 124, 3, 144, 4, 198, 7, 232, 2, 238]);
    addNewDeck('Kongregate Username', [7, 5, 3, 25, 2, 77, 2, 97, 5, 109, 3, 129, 1, 189, 2, 199]);
    addNewDeck('Kongregate Username', [6, 6, 3, 26, 2, 78, 2, 98, 5, 110, 4, 130, 1, 190, 2, 200]);
    addNewDeck('Kongregate Username', [5, 20, 2, 106, 1, 128, 7, 130, 2, 146, 1, 196, 3, 232, 7, 240]);
  }

  frame 9 {
    function addNewAchievement(ID, name, desc, need, amnt, type, where, secret, redCoin) {
      _root.totalachievements += 1;
      if (secret == true) {
        _root.totalsachievements += 1;
      }
      _root.maxredcoin += redCoin;
      var v2 = new Object();
      v2.ID = ID;
      v2.name = name;
      v2.desc = desc;
      v2.need = need;
      v2.amnt = amnt;
      v2.type = type;
      v2.where = where;
      v2.secret = secret;
      v2.redCoin = redCoin;
      achList.push(v2);
    }

    function checkAchievements() {
      _root.awards = 0;
      _root.sawards = 0;
      _root.achRedCoin = 0;
      if (_root.saveid >= 10) {
        _root.save.achEarnTime[1150] = 99999999999.0;
        _root.save.achEarnTime[1151] = 99999999999.0;
        _root.save.achEarnTime[1152] = 99999999999.0;
        _root.save.achEarnTime[1153] = 99999999999.0;
        _root.save.achEarnTime[1154] = 99999999999.0;
        _root.save.achEarnTime[1155] = 99999999999.0;
        _root.save.achEarnTime[1156] = 99999999999.0;
        _root.save.achEarnTime[1157] = 99999999999.0;
        _root.save.achEarnTime[1158] = 99999999999.0;
        _root.save.achEarnTime[1159] = 99999999999.0;
        _root.save.achEarnTime[1160] = 99999999999.0;
        _root.save.achEarnTime[1161] = 99999999999.0;
        _root.save.achEarnTime[1162] = 99999999999.0;
        _root.save.achEarnTime[1163] = 99999999999.0;
        _root.save.achEarnTime[1164] = 99999999999.0;
        _root.save.achEarnTime[1165] = 99999999999.0;
        _root.save.achEarnTime[9035] = 99999999999.0;
      }
      i = 1;
      while (i <= _root.totalachievements) {
        if (_root.achList[i].where == 'save') {
          achCurrent = _root.save[_root.achList[i].need];
        } else {
          if (_root.achList[i].where == 'root') {
            achCurrent = _root[_root.achList[i].need];
          }
        }
        achRequired = _root.achList[i].amnt;
        if (!isNaN(achCurrent) && achCurrent >= achRequired && _root.achList[i].type == 'Max' || achCurrent <= achRequired && _root.achList[i].type == 'Min' || !isNaN(_root.save.achEarnTime[_root.achList[i].ID])) {
          if (isNaN(_root.save.achEarnTime[_root.achList[i].ID])) {
            _root.save.achEarnTime[_root.achList[i].ID] = _root.systemtimenow;
            if (_root.save.showBanner != false) {
              _root.accomplishPop.targetX = 10;
              _root.accomplishPop.count = 0;
              _root.accomplishPop.gotoAndStop(2);
              _root.accomplishPop.lolMessage.text = _root.achList[i].name;
              _root.accomplishPop.rcText.text = 'Progress Bar Reward: +' + _root.achList[i].redCoin / 100 + '%';
              _root.accomplishPop.countText.text = _root.save.maxAchievement + 1 + ' / ' + _root.totalachievements;
            }
            _root.dispNews(3, 'Achievement earned! [' + _root.achList[i].name + '] (' + (_root.save.maxAchievement + 1) + ' / ' + _root.totalachievements + ')');
            _root.newAchName = _root.achList[i].name;
            _root.newAchRedCoin = _root.achList[i].redCoin;
          }
          _root.awards += 1;
          if (_root.achList[i].secret == true) {
            _root.sawards += 1;
          }
          _root.achRedCoin += _root.achList[i].redCoin;
        }
        ++i;
      }
      if (_root.save.maxAchievement < _root.awards) {
        _root.save.maxAchievement = _root.awards;
      }
    }

    function addNewQuest(expired, eventQuest, dailyQuest, questID, questImage, reqLevel, reqQuest, reqQuestRank, questName, descA, descB, need, where, amnt1, amnt2, amnt3, amnt4, questToken, eventToken) {
      _root.totalMainQuest += 1;
      var v2 = new Object();
      v2.expired = expired;
      v2.eventQuest = eventQuest;
      v2.dailyQuest = dailyQuest;
      v2.questID = questID;
      v2.questImage = questImage;
      v2.reqLevel = reqLevel;
      v2.reqQuest = reqQuest;
      v2.reqQuestRank = reqQuestRank;
      v2.questName = questName;
      v2.descA = descA;
      v2.descB = descB;
      v2.need = need;
      v2.where = where;
      v2.amnt1 = amnt1;
      v2.amnt2 = amnt2;
      v2.amnt3 = amnt3;
      v2.amnt4 = amnt4;
      v2.questToken = questToken;
      v2.eventToken = eventToken;
      mainQuestList.push(v2);
    }

    function addRandomQuest(chance, difficulty, maxMult, reqLv, reward, rewardQuan, rewardBlueCoin, rewardToken, feature, type, subtype, need, descA, descB) {
      var v2 = new Object();
      v2.chance = chance;
      v2.difficulty = difficulty;
      v2.maxMult = maxMult;
      v2.reqLv = reqLv;
      v2.feature = feature;
      v2.type = type;
      v2.subtype = subtype;
      v2.need = need;
      v2.reward = reward;
      v2.rewardQuan = rewardQuan;
      v2.rewardBlueCoin = rewardBlueCoin;
      v2.rewardToken = rewardToken;
      v2.descA = descA;
      v2.descB = descB;
      questList.push(v2);
      _root.totalquest += 1;
    }

    _root.totalquest = 0;
    _root.totalNewQuest = 0;
    _root.totalMainQuest = 0;
    _root.totalachievements = 0;
    _root.totalsachievements = 0;
    _root.maxredcoin = 0;
    var achList = [zeroItem];
    var questList = [zeroItem];
    var mainQuestList = [zeroItem];
    var newAchList = [zeroItem];
    var newMainQuestList = [zeroItem];
    var questMap = new Array();
    var questHLink = new Array();
    var questVLink = new Array();
    i = 1;
    while (i <= 5) {
      questMap[i] = new Array();
      questHLink[i] = new Array();
      questVLink[i] = new Array();
      ++i;
    }
    addNewAchievement(1000, 'Graduated', 'Newbie Tasks', 'newbieProgress', 15, 'Max', 'save', false, 2000);
    addNewAchievement(1100, 'Newbie Anti-Idler', 'Level', 'bestLevel', 10, 'Max', 'save', false, 5);
    addNewAchievement(1101, 'Good Anti-Idler', 'Level', 'bestLevel', 20, 'Max', 'save', false, 5);
    addNewAchievement(1102, 'Better Anti-Idler', 'Level', 'bestLevel', 40, 'Max', 'save', false, 5);
    addNewAchievement(1103, 'Great Anti-Idler', 'Level', 'bestLevel', 70, 'Max', 'save', false, 10);
    addNewAchievement(1104, 'Skilled Anti-Idler', 'Level', 'bestLevel', 100, 'Max', 'save', false, 10);
    addNewAchievement(1105, 'Awesome Anti-Idler', 'Level', 'bestLevel', 150, 'Max', 'save', false, 10);
    addNewAchievement(1106, 'Expert Anti-Idler', 'Level', 'bestLevel', 200, 'Max', 'save', false, 15);
    addNewAchievement(1107, 'Bronze Trophy Anti-Idler', 'Level', 'bestLevel', 300, 'Max', 'save', false, 15);
    addNewAchievement(1108, 'Silver Trophy Anti-Idler', 'Level', 'bestLevel', 400, 'Max', 'save', false, 15);
    addNewAchievement(1109, 'Gold Trophy Anti-Idler', 'Level', 'bestLevel', 500, 'Max', 'save', false, 20);
    addNewAchievement(1110, 'Lifeless King', 'Level', 'bestLevel', 700, 'Max', 'save', false, 20);
    addNewAchievement(1111, 'Scoreboard Destroyer', 'Level', 'bestLevel', 1000, 'Max', 'save', false, 25);
    addNewAchievement(1112, 'Elite Anti-Idler', 'Level', 'bestLevel', 1337, 'Max', 'save', false, 25);
    addNewAchievement(1113, 'World\'s Best Anti-Idler', 'Level', 'bestLevel', 2000, 'Max', 'save', false, 30);
    addNewAchievement(1114, 'Better Than The Best', 'Level', 'bestLevel', 3000, 'Max', 'save', false, 30);
    addNewAchievement(1115, 'Isn\'t It Getting Boring?', 'Level', 'bestLevel', 4000, 'Max', 'save', false, 35);
    addNewAchievement(1116, 'The Game That Never Ends', 'Level', 'bestLevel', 5000, 'Max', 'save', false, 35);
    addNewAchievement(1117, 'Master Of The Universe', 'Level', 'bestLevel', 9001, 'Max', 'save', false, 50);
    addNewAchievement(1150, 'Welcome to Anti-Idle!', 'Times Played', 'totalPlays', 1, 'Max', 'save', false, 0);
    addNewAchievement(1151, 'Welcome Back', 'Times Played', 'totalPlays', 2, 'Max', 'save', false, 0);
    addNewAchievement(1152, 'Fifth Visit', 'Times Played', 'totalPlays', 5, 'Max', 'save', false, 0);
    addNewAchievement(1153, 'Revenue Generator', 'Times Played', 'totalPlays', 10, 'Max', 'save', false, 0);
    addNewAchievement(1154, 'Mad Refresher', 'Times Played', 'totalPlays', 20, 'Max', 'save', false, 0);
    addNewAchievement(1155, 'Test Drive', 'Total Play Time (sec)', 'totalPlayTime', 600, 'Max', 'save', false, 5);
    addNewAchievement(1156, 'Time Waster', 'Total Play Time (sec)', 'totalPlayTime', 5400, 'Max', 'save', false, 5);
    addNewAchievement(1157, 'Time Killer', 'Total Play Time (sec)', 'totalPlayTime', 18000, 'Max', 'save', false, 5);
    addNewAchievement(1158, 'Day Splitter', 'Total Play Time (sec)', 'totalPlayTime', 86400, 'Max', 'save', false, 5);
    addNewAchievement(1159, 'I Like Bad Games', 'Total Play Time (sec)', 'totalPlayTime', 259200, 'Max', 'save', false, 10);
    addNewAchievement(1160, 'Week Splitter', 'Total Play Time (sec)', 'totalPlayTime', 604800, 'Max', 'save', false, 10);
    addNewAchievement(1161, 'Time Badly Spent', 'Total Play Time (sec)', 'totalPlayTime', 2419200, 'Max', 'save', false, 15);
    addNewAchievement(1162, 'Worst Hour Ever', 'Session Play Time (sec)', 'longestSession', 3600, 'Max', 'save', false, 5);
    addNewAchievement(1163, 'Anti-Refresher', 'Session Play Time (sec)', 'longestSession', 7200, 'Max', 'save', false, 5);
    addNewAchievement(1164, 'Anti-Rester', 'Session Play Time (sec)', 'longestSession', 10800, 'Max', 'save', false, 5);
    addNewAchievement(1165, 'Anti-Life', 'Session Play Time (sec)', 'longestSession', 14400, 'Max', 'save', false, 10);
    addNewAchievement(1166, 'This Screen is Boring', 'Stat Views', 'viewStat', 1, 'Max', 'save', false, 5);
    addNewAchievement(1167, 'More Tasks, YAY!', 'Quest Views', 'viewQuest', 1, 'Max', 'save', false, 5);
    addNewAchievement(1168, 'Customizer', 'Option Views', 'viewOption', 1, 'Max', 'save', false, 5);
    addNewAchievement(1169, 'This is An Achievement', 'Achievement Views', 'viewAchievement', 1, 'Max', 'save', false, 5);
    addNewAchievement(1170, 'Another Achievement', 'Achievement Views', 'viewAchievement', 10, 'Max', 'save', false, 5);
    addNewAchievement(1171, 'Another Another Achievement', 'Achievement Views', 'viewAchievement', 50, 'Max', 'save', false, 5);
    addNewAchievement(1172, 'Achievement Addict', 'Achievement Views', 'viewAchievement', 250, 'Max', 'save', false, 10);
    addNewAchievement(1173, 'Safe Mode', 'Manual Save', 'manualSave', 1, 'Max', 'save', false, 5);
    addNewAchievement(1174, 'Just In Case...', 'Manual Save', 'manualSave', 100, 'Max', 'save', false, 10);
    addNewAchievement(1175, 'Ignorant', 'Mute', 'totalMute', 1, 'Max', 'save', false, 5);
    addNewAchievement(1176, '\'no unmute button 1/5\'', 'Mute', 'totalMute', 100, 'Max', 'save', false, 10);
    addNewAchievement(1180, 'First Quests', 'Random Quests Completed', 'questTotal', 5, 'Max', 'save', false, 5);
    addNewAchievement(1181, 'Beginner Quester', 'Random Quests Completed', 'questTotal', 10, 'Max', 'save', false, 5);
    addNewAchievement(1182, 'Quester', 'Random Quests Completed', 'questTotal', 25, 'Max', 'save', false, 10);
    addNewAchievement(1183, 'Quest Specialist', 'Random Quests Completed', 'questTotal', 50, 'Max', 'save', false, 10);
    addNewAchievement(1184, 'Quest Maniac', 'Random Quests Completed', 'questTotal', 100, 'Max', 'save', false, 15);
    addNewAchievement(1185, 'Quest Master', 'Random Quests Completed', 'questTotal', 250, 'Max', 'save', false, 15);
    addNewAchievement(1186, 'Epic Quester', 'Random Quests Completed', 'questTotal', 500, 'Max', 'save', false, 20);
    addNewAchievement(1190, 'lrn2spray', 'Ants Sprayed', 'antsSprayed', 1, 'Max', 'save', false, 10);
    addNewAchievement(1191, 'Boost Saver', 'Ants Sprayed', 'antsSprayed', 250, 'Max', 'save', false, 10);
    addNewAchievement(1192, 'Pest Hunter', 'Ants Sprayed', 'antsSprayed', 1000, 'Max', 'save', false, 10);
    addNewAchievement(1193, 'Ant Hater', 'Ants Sprayed', 'antsSprayed', 5000, 'Max', 'save', false, 10);
    addNewAchievement(1194, 'Ant Killer', 'Ants Sprayed', 'antsSprayed', 25000, 'Max', 'save', false, 15);
    addNewAchievement(1195, 'Ant Destroyer', 'Ants Sprayed', 'antsSprayed', 100000, 'Max', 'save', false, 15);
    addNewAchievement(1196, 'i-Idle: The Game', 'Ants Sprayed', 'antsSprayed', 500000, 'Max', 'save', false, 20);
    addNewAchievement(1200, 'High Roller', 'Unspent Coins', 'coinMax', 50000, 'Max', 'save', false, 5);
    addNewAchievement(1201, 'New Digit Unlocked!', 'Unspent Coins', 'coinMax', 100000, 'Max', 'save', false, 5);
    addNewAchievement(1202, 'Money Saver', 'Unspent Coins', 'coinMax', 250000, 'Max', 'save', false, 5);
    addNewAchievement(1203, 'Money Keeper', 'Unspent Coins', 'coinMax', 500000, 'Max', 'save', false, 5);
    addNewAchievement(1204, 'Millionaire', 'Unspent Coins', 'coinMax', 1000000, 'Max', 'save', false, 10);
    addNewAchievement(1205, 'Coin Collector', 'Unspent Coins', 'coinMax', 2500000, 'Max', 'save', false, 10);
    addNewAchievement(1206, 'Richman', 'Unspent Coins', 'coinMax', 5000000, 'Max', 'save', false, 10);
    addNewAchievement(1207, 'That\'s With Seven Zeros!', 'Unspent Coins', 'coinMax', 10000000, 'Max', 'save', false, 10);
    addNewAchievement(1208, 'Too Much To Spend', 'Unspent Coins', 'coinMax', 25000000, 'Max', 'save', false, 15);
    addNewAchievement(1209, 'Overcoins', 'Unspent Coins', 'coinMax', 50000000, 'Max', 'save', false, 15);
    addNewAchievement(1210, 'Coin Gates', 'Unspent Coins', 'coinMax', 250000000, 'Max', 'save', false, 15);
    addNewAchievement(1211, 'Billionaire', 'Unspent Coins', 'coinMax', 1000000000, 'Max', 'save', false, 15);
    addNewAchievement(1212, 'God of Gold', 'Unspent Coins', 'coinMax', 10000000000.0, 'Max', 'save', false, 20);
    addNewAchievement(1213, 'Mountain of Coins', 'Unspent Coins', 'coinMax', 100000000000.0, 'Max', 'save', false, 25);
    addNewAchievement(1300, 'First Green Coins', 'Unspent Green Coins', 'greenCoinMax', 2500, 'Max', 'save', false, 5);
    addNewAchievement(1301, 'Green Coin Saver', 'Unspent Green Coins', 'greenCoinMax', 10000, 'Max', 'save', false, 5);
    addNewAchievement(1302, 'Green Coin Keeper', 'Unspent Green Coins', 'greenCoinMax', 25000, 'Max', 'save', false, 5);
    addNewAchievement(1303, 'Green Coin Collector', 'Unspent Green Coins', 'greenCoinMax', 50000, 'Max', 'save', false, 5);
    addNewAchievement(1304, 'Green Coin Hoarder', 'Unspent Green Coins', 'greenCoinMax', 100000, 'Max', 'save', false, 10);
    addNewAchievement(1305, 'Green Coin Enthusiast', 'Unspent Green Coins', 'greenCoinMax', 250000, 'Max', 'save', false, 10);
    addNewAchievement(1306, 'True Millionaire', 'Unspent Green Coins', 'greenCoinMax', 1000000, 'Max', 'save', false, 10);
    addNewAchievement(1307, 'Green Coin Master', 'Unspent Green Coins', 'greenCoinMax', 2500000, 'Max', 'save', false, 10);
    addNewAchievement(1308, 'Green Coin Grand Master', 'Unspent Green Coins', 'greenCoinMax', 5000000, 'Max', 'save', false, 15);
    addNewAchievement(1309, 'Limit Breaker', 'Unspent Green Coins', 'greenCoinMax', 10000000, 'Max', 'save', false, 15);
    addNewAchievement(1310, 'Coins Painted Green', 'Unspent Green Coins', 'greenCoinMax', 25000000, 'Max', 'save', false, 15);
    addNewAchievement(1311, 'What\'s Special About These?', 'Unspent Green Coins', 'greenCoinMax', 50000000, 'Max', 'save', false, 20);
    addNewAchievement(1400, 'First Blue Coins', 'Unspent Blue Coins', 'blueCoinMax', 100, 'Max', 'save', false, 5);
    addNewAchievement(1401, 'Enough For Nothing', 'Unspent Blue Coins', 'blueCoinMax', 250, 'Max', 'save', false, 5);
    addNewAchievement(1402, 'Blue Coin Saver', 'Unspent Blue Coins', 'blueCoinMax', 500, 'Max', 'save', false, 5);
    addNewAchievement(1403, 'Blue Coin Keeper', 'Unspent Blue Coins', 'blueCoinMax', 1000, 'Max', 'save', false, 5);
    addNewAchievement(1404, 'Blue Coin Collector', 'Unspent Blue Coins', 'blueCoinMax', 2500, 'Max', 'save', false, 10);
    addNewAchievement(1405, 'Blue Coin Hoarder', 'Unspent Blue Coins', 'blueCoinMax', 5000, 'Max', 'save', false, 10);
    addNewAchievement(1406, 'Blue Coin Enthusiast', 'Unspent Blue Coins', 'blueCoinMax', 10000, 'Max', 'save', false, 10);
    addNewAchievement(1407, 'Blue Coin Master', 'Unspent Blue Coins', 'blueCoinMax', 25000, 'Max', 'save', false, 10);
    addNewAchievement(1408, 'Blue Coin Grand Master', 'Unspent Blue Coins', 'blueCoinMax', 50000, 'Max', 'save', false, 15);
    addNewAchievement(1409, 'Anti-Spender', 'Unspent Blue Coins', 'blueCoinMax', 100000, 'Max', 'save', false, 15);
    addNewAchievement(1410, 'Feeling Rich', 'Unspent Blue Coins', 'blueCoinMax', 250000, 'Max', 'save', false, 15);
    addNewAchievement(1411, 'Over-Sadist', 'Unspent Blue Coins', 'blueCoinMax', 500000, 'Max', 'save', false, 20);
    addNewAchievement(1500, 'First Rewards', 'Total Rewards', 'rewardClaim', 50, 'Max', 'save', false, 5);
    addNewAchievement(1501, 'More Rewards', 'Total Rewards', 'rewardClaim', 250, 'Max', 'save', false, 5);
    addNewAchievement(1502, 'Moar Rewards', 'Total Rewards', 'rewardClaim', 500, 'Max', 'save', false, 5);
    addNewAchievement(1503, 'Even More Rewards', 'Total Rewards', 'rewardClaim', 1000, 'Max', 'save', false, 5);
    addNewAchievement(1504, 'Reward Claimer', 'Total Rewards', 'rewardClaim', 2500, 'Max', 'save', false, 10);
    addNewAchievement(1505, 'Reward Collector', 'Total Rewards', 'rewardClaim', 5000, 'Max', 'save', false, 10);
    addNewAchievement(1506, 'Reward Hoarder', 'Total Rewards', 'rewardClaim', 10000, 'Max', 'save', false, 10);
    addNewAchievement(1507, 'Reward Specialist', 'Total Rewards', 'rewardClaim', 25000, 'Max', 'save', false, 10);
    addNewAchievement(1508, 'Reward Addict', 'Total Rewards', 'rewardClaim', 50000, 'Max', 'save', false, 15);
    addNewAchievement(1509, 'Reward Enthusiast', 'Total Rewards', 'rewardClaim', 100000, 'Max', 'save', false, 15);
    addNewAchievement(1510, 'Reward Maniac', 'Total Rewards', 'rewardClaim', 250000, 'Max', 'save', false, 15);
    addNewAchievement(1511, 'Reward Master', 'Total Rewards', 'rewardClaim', 500000, 'Max', 'save', false, 15);
    addNewAchievement(1512, 'Reward Grand Master', 'Total Rewards', 'rewardClaim', 1000000, 'Max', 'save', false, 20);
    addNewAchievement(1513, 'Reward Psychopath', 'Total Rewards', 'rewardClaim', 2500000, 'Max', 'save', false, 25);
    addNewAchievement(1600, 'Tutorial Complete!', 'Anti-Idle Rewards', 'rewardClaimManual', 5, 'Max', 'save', false, 10);
    addNewAchievement(1601, 'Getting The Idea', 'Anti-Idle Rewards', 'rewardClaimManual', 50, 'Max', 'save', false, 10);
    addNewAchievement(1602, 'Junior Mouse Mover', 'Anti-Idle Rewards', 'rewardClaimManual', 100, 'Max', 'save', false, 10);
    addNewAchievement(1603, 'Mouse Mover', 'Anti-Idle Rewards', 'rewardClaimManual', 250, 'Max', 'save', false, 10);
    addNewAchievement(1604, 'Anti-IdleMode', 'Anti-Idle Rewards', 'rewardClaimManual', 500, 'Max', 'save', false, 15);
    addNewAchievement(1605, 'Actually Playing', 'Anti-Idle Rewards', 'rewardClaimManual', 1000, 'Max', 'save', false, 15);
    addNewAchievement(1606, 'True Anti-Idler', 'Anti-Idle Rewards', 'rewardClaimManual', 2500, 'Max', 'save', false, 15);
    addNewAchievement(1607, 'The Meaning of Anti-Idle', 'Anti-Idle Rewards', 'rewardClaimManual', 4200, 'Max', 'save', false, 15);
    addNewAchievement(1608, 'God of Anti-Idle', 'Anti-Idle Rewards', 'rewardClaimManual', 10000, 'Max', 'save', false, 20);
    addNewAchievement(1609, 'Idle Mode Exists?', 'Anti-Idle Rewards', 'rewardClaimManual', 25000, 'Max', 'save', false, 20);
    addNewAchievement(1610, 'Anti-Idle Maniac', 'Anti-Idle Rewards', 'rewardClaimManual', 50000, 'Max', 'save', false, 20);
    addNewAchievement(1611, 'Anti-Idle Master', 'Anti-Idle Rewards', 'rewardClaimManual', 100000, 'Max', 'save', false, 20);
    addNewAchievement(1612, 'Anti-Idle Grand Master', 'Anti-Idle Rewards', 'rewardClaimManual', 250000, 'Max', 'save', false, 25);
    addNewAchievement(1613, 'Unbelievable Statistic', 'Anti-Idle Rewards', 'rewardClaimManual', 500000, 'Max', 'save', false, 30);
    addNewAchievement(1700, 'Idle Mode GET!', 'Idle Rewards', 'rewardClaimAuto', 5, 'Max', 'save', false, 5);
    addNewAchievement(1701, 'ZOMG ANOTHER IDLE GAEM!?', 'Idle Rewards', 'rewardClaimAuto', 50, 'Max', 'save', false, 5);
    addNewAchievement(1702, 'Automatic Player', 'Idle Rewards', 'rewardClaimAuto', 100, 'Max', 'save', false, 5);
    addNewAchievement(1703, 'True Automatic Player', 'Idle Rewards', 'rewardClaimAuto', 250, 'Max', 'save', false, 5);
    addNewAchievement(1704, 'Idle Mode User', 'Idle Rewards', 'rewardClaimAuto', 500, 'Max', 'save', false, 10);
    addNewAchievement(1705, 'Idle Mode Abuser', 'Idle Rewards', 'rewardClaimAuto', 1000, 'Max', 'save', false, 10);
    addNewAchievement(1706, 'Robot Abuser', 'Idle Rewards', 'rewardClaimAuto', 2500, 'Max', 'save', false, 10);
    addNewAchievement(1707, 'Worst Idle Game Ever!', 'Idle Rewards', 'rewardClaimAuto', 5000, 'Max', 'save', false, 10);
    addNewAchievement(1708, 'God of Idle', 'Idle Rewards', 'rewardClaimAuto', 10000, 'Max', 'save', false, 15);
    addNewAchievement(1709, 'Lazy Player', 'Idle Rewards', 'rewardClaimAuto', 25000, 'Max', 'save', false, 15);
    addNewAchievement(1710, 'Idle Mode Maniac', 'Idle Rewards', 'rewardClaimAuto', 50000, 'Max', 'save', false, 15);
    addNewAchievement(1711, 'Idle Mode Master', 'Idle Rewards', 'rewardClaimAuto', 100000, 'Max', 'save', false, 15);
    addNewAchievement(1712, 'Idle Mode Grand Master', 'Idle Rewards', 'rewardClaimAuto', 250000, 'Max', 'save', false, 20);
    addNewAchievement(1713, 'I Didn\'t Even Know', 'Idle Rewards', 'rewardClaimAuto', 500000, 'Max', 'save', false, 25);
    addNewAchievement(1800, 'Faster', '% Anti-Idle Mode Speed', 'progSpeedManual', 130, 'Max', 'save', false, 5);
    addNewAchievement(1801, 'Even Faster', '% Anti-Idle Mode Speed', 'progSpeedManual', 160, 'Max', 'save', false, 5);
    addNewAchievement(1802, 'Anti-Idle Mode Madness', '% Anti-Idle Mode Speed', 'progSpeedManual', 200, 'Max', 'save', false, 10);
    addNewAchievement(1803, 'The Old Noob Days...', '% Anti-Idle Mode Speed', 'progSpeedManual', 300, 'Max', 'save', false, 15);
    addNewAchievement(1850, 'It\'s Still Slow!', '% Idle Mode Speed', 'progSpeedAuto', 50, 'Max', 'save', false, 5);
    addNewAchievement(1851, 'Idle Mode Madness', '% Idle Mode Speed', 'progSpeedAuto', 100, 'Max', 'save', false, 5);
    addNewAchievement(1852, 'More Idle Advantage!', '% Idle Mode Speed', 'progSpeedAuto', 150, 'Max', 'save', false, 10);
    addNewAchievement(1910, '550% Boost GET!', '% Maximum Boost', 'boostMax', 550, 'Max', 'root', false, 5);
    addNewAchievement(1900, '600% Boost GET!', '% Maximum Boost', 'boostMax', 600, 'Max', 'root', false, 5);
    addNewAchievement(1911, '650% Boost GET!', '% Maximum Boost', 'boostMax', 650, 'Max', 'root', false, 5);
    addNewAchievement(1901, '700% Boost GET!', '% Maximum Boost', 'boostMax', 700, 'Max', 'root', false, 5);
    addNewAchievement(1912, '750% Boost GET!', '% Maximum Boost', 'boostMax', 750, 'Max', 'root', false, 5);
    addNewAchievement(1902, '800% Boost GET!', '% Maximum Boost', 'boostMax', 800, 'Max', 'root', false, 5);
    addNewAchievement(1913, '850% Boost GET!', '% Maximum Boost', 'boostMax', 850, 'Max', 'root', false, 10);
    addNewAchievement(1903, '900% Boost GET!', '% Maximum Boost', 'boostMax', 900, 'Max', 'root', false, 10);
    addNewAchievement(1904, '1000% Boost GET!', '% Maximum Boost', 'boostMax', 1000, 'Max', 'root', false, 15);
    addNewAchievement(1905, '1100% Boost GET!', '% Maximum Boost', 'boostMax', 1100, 'Max', 'root', false, 15);
    addNewAchievement(1906, '1200% Boost GET!', '% Maximum Boost', 'boostMax', 1200, 'Max', 'root', false, 20);
    addNewAchievement(1907, '1300% Boost GET!', '% Maximum Boost', 'boostMax', 1300, 'Max', 'root', false, 20);
    addNewAchievement(1908, '1400% Boost GET!', '% Maximum Boost', 'boostMax', 1400, 'Max', 'root', false, 20);
    addNewAchievement(1909, '1500% Boost GET!', '% Maximum Boost', 'boostMax', 1500, 'Max', 'root', false, 20);
    addNewAchievement(1970, 'What is This?', '% Progress Bar Capacity', 'progStore', 200, 'Max', 'save', false, 10);
    addNewAchievement(1971, 'Noticeable Difference', '% Progress Bar Capacity', 'progStore', 400, 'Max', 'save', false, 10);
    addNewAchievement(1972, 'Progress Saver', '% Progress Bar Capacity', 'progStore', 700, 'Max', 'save', false, 15);
    addNewAchievement(1973, 'Progress Keeper', '% Progress Bar Capacity', 'progStore', 1000, 'Max', 'save', false, 15);
    addNewAchievement(1974, 'Progress Master', '% Progress Bar Capacity', 'progStore', 2000, 'Max', 'save', false, 20);
    addNewAchievement(1975, 'Progress Grand Master', '% Progress Bar Capacity', 'progStore', 3000, 'Max', 'save', false, 20);
    addNewAchievement(1976, 'Ultimate Progress Holder', '% Progress Bar Capacity', 'progStore', 5000, 'Max', 'save', false, 50);
    addNewAchievement(2000, 'Boost Generated!', '% Boost Gained', 'boostPurchased', 300, 'Max', 'save', false, 5);
    addNewAchievement(2001, 'Boost User', '% Boost Gained', 'boostPurchased', 1000, 'Max', 'save', false, 5);
    addNewAchievement(2002, 'Boost Lover', '% Boost Gained', 'boostPurchased', 3000, 'Max', 'save', false, 5);
    addNewAchievement(2003, 'Boost Master', '% Boost Gained', 'boostPurchased', 10000, 'Max', 'save', false, 5);
    addNewAchievement(2004, 'Boost Grand Master', '% Boost Gained', 'boostPurchased', 30000, 'Max', 'save', false, 10);
    addNewAchievement(2005, 'Boost King', '% Boost Gained', 'boostPurchased', 100000, 'Max', 'save', false, 10);
    addNewAchievement(2006, 'Power Leveler', '% Boost Gained', 'boostPurchased', 300000, 'Max', 'save', false, 15);
    addNewAchievement(2100, 'This is Called \'Harvest\'', 'Tree Harvests', 'harvestCount', 1, 'Max', 'save', false, 5);
    addNewAchievement(2101, 'Another Harvest', 'Tree Harvests', 'harvestCount', 2, 'Max', 'save', false, 5);
    addNewAchievement(2102, 'Yay Garden!', 'Tree Harvests', 'harvestCount', 5, 'Max', 'save', false, 5);
    addNewAchievement(2103, 'First Trees', 'Tree Harvests', 'harvestCount', 10, 'Max', 'save', false, 5);
    addNewAchievement(2104, 'Tree Hugger', 'Tree Harvests', 'harvestCount', 50, 'Max', 'save', false, 10);
    addNewAchievement(2105, 'Tree Lover', 'Tree Harvests', 'harvestCount', 250, 'Max', 'save', false, 10);
    addNewAchievement(2106, 'Green Thumb', 'Tree Harvests', 'harvestCount', 1000, 'Max', 'save', false, 10);
    addNewAchievement(2107, '*insert tree color* Thumb', 'Tree Harvests', 'harvestCount', 2500, 'Max', 'save', false, 10);
    addNewAchievement(2108, 'Super Farmer', 'Tree Harvests', 'harvestCount', 5000, 'Max', 'save', false, 15);
    addNewAchievement(2109, 'Garden Madness', 'Tree Harvests', 'harvestCount', 10000, 'Max', 'save', false, 15);
    addNewAchievement(2110, 'Garden King', 'Tree Harvests', 'harvestCount', 25000, 'Max', 'save', false, 20);
    addNewAchievement(2111, '\'need autoharvest 1/5\'', 'Tree Harvests', 'harvestCount', 50000, 'Max', 'save', false, 25);
    addNewAchievement(2200, 'Early Income', 'Tree Income', 'harvestCoin', 50000, 'Max', 'save', false, 5);
    addNewAchievement(2201, 'Tree Harvester', 'Tree Income', 'harvestCoin', 250000, 'Max', 'save', false, 5);
    addNewAchievement(2202, 'Coin Harvester', 'Tree Income', 'harvestCoin', 1000000, 'Max', 'save', false, 5);
    addNewAchievement(2203, 'Expert Farmer', 'Tree Income', 'harvestCoin', 5000000, 'Max', 'save', false, 5);
    addNewAchievement(2204, 'Late Income', 'Tree Income', 'harvestCoin', 25000000, 'Max', 'save', false, 10);
    addNewAchievement(2205, 'Corny Trees', 'Tree Income', 'harvestCoin', 100000000, 'Max', 'save', false, 10);
    addNewAchievement(2206, 'Coiny Trees', 'Tree Income', 'harvestCoin', 500000000, 'Max', 'save', false, 10);
    addNewAchievement(2207, 'Diligent Farmer', 'Tree Income', 'harvestCoin', 2500000000.0, 'Max', 'save', false, 10);
    addNewAchievement(2208, 'Famous Farmer', 'Tree Income', 'harvestCoin', 5000000000.0, 'Max', 'save', false, 15);
    addNewAchievement(2209, 'No Need For Crops', 'Tree Income', 'harvestCoin', 10000000000.0, 'Max', 'save', false, 15);
    addNewAchievement(2210, 'Achievement Harvester', 'Tree Income', 'harvestCoin', 25000000000.0, 'Max', 'save', false, 20);
    addNewAchievement(2211, 'Master Harvester', 'Tree Income', 'harvestCoin', 50000000000.0, 'Max', 'save', false, 25);
    addNewAchievement(2300, 'It\'s Now a \'Garden\'', 'Garden Plots', 'gardenCapacity', 2, 'Max', 'save', false, 5);
    addNewAchievement(2301, 'More Trees', 'Garden Plots', 'gardenCapacity', 5, 'Max', 'save', false, 5);
    addNewAchievement(2302, 'Even More Trees', 'Garden Plots', 'gardenCapacity', 10, 'Max', 'save', false, 5);
    addNewAchievement(2303, 'Large Garden', 'Garden Plots', 'gardenCapacity', 15, 'Max', 'save', false, 10);
    addNewAchievement(2304, 'Huge Garden', 'Garden Plots', 'gardenCapacity', 20, 'Max', 'save', false, 10);
    addNewAchievement(2305, 'Garden Unlocked!', 'Garden Plots', 'gardenCapacity', 25, 'Max', 'save', false, 15);
    addNewAchievement(2400, 'Newbie Gardener', 'Garden EXP', 'gardenEXP', 50, 'Max', 'save', false, 5);
    addNewAchievement(2401, 'Gardener', 'Garden EXP', 'gardenEXP', 250, 'Max', 'save', false, 5);
    addNewAchievement(2402, 'Awesome Gardener', 'Garden EXP', 'gardenEXP', 1000, 'Max', 'save', false, 5);
    addNewAchievement(2403, 'Super Gardener', 'Garden EXP', 'gardenEXP', 10000, 'Max', 'save', false, 10);
    addNewAchievement(2404, 'Epic Gardener', 'Garden EXP', 'gardenEXP', 100000, 'Max', 'save', false, 10);
    addNewAchievement(2405, 'Ultimate Gardener', 'Garden EXP', 'gardenEXP', 1000000, 'Max', 'save', false, 20);
    addNewAchievement(2500, 'First Garden Points', 'Unspent Garden Points', 'gardenPointMax', 100, 'Max', 'save', false, 5);
    addNewAchievement(2501, 'More Garden Points', 'Unspent Garden Points', 'gardenPointMax', 500, 'Max', 'save', false, 5);
    addNewAchievement(2502, 'Garden Point Saver', 'Unspent Garden Points', 'gardenPointMax', 2500, 'Max', 'save', false, 5);
    addNewAchievement(2503, 'Garden Point Keeper', 'Unspent Garden Points', 'gardenPointMax', 10000, 'Max', 'save', false, 10);
    addNewAchievement(2504, 'Garden Point Hoarder', 'Unspent Garden Points', 'gardenPointMax', 50000, 'Max', 'save', false, 10);
    addNewAchievement(2505, 'Garden Master', 'Unspent Garden Points', 'gardenPointMax', 250000, 'Max', 'save', false, 15);
    addNewAchievement(2550, 'Newbie Fighter', 'Arena Rank', 'arenaLevel', 10, 'Max', 'save', false, 5);
    addNewAchievement(2551, 'Fighter', 'Arena Rank', 'arenaLevel', 30, 'Max', 'save', false, 10);
    addNewAchievement(2552, 'Veteran Fighter', 'Arena Rank', 'arenaLevel', 70, 'Max', 'save', false, 15);
    addNewAchievement(2553, 'Heroic Fighter', 'Arena Rank', 'arenaLevel', 120, 'Max', 'save', false, 20);
    addNewAchievement(2554, 'Elite Fighter', 'Arena Rank', 'arenaLevel', 180, 'Max', 'save', false, 25);
    addNewAchievement(2555, 'Master Fighter', 'Arena Rank', 'arenaLevel', 250, 'Max', 'save', false, 30);
    addNewAchievement(2556, 'Ultimate Fighter', 'Arena Rank', 'arenaLevel', 350, 'Max', 'save', false, 35);
    addNewAchievement(2599, 'First Kill', 'Monster Kills', 'arenaKill', 1, 'Max', 'save', false, 5);
    addNewAchievement(2600, 'New to Arena', 'Monster Kills', 'arenaKill', 50, 'Max', 'save', false, 5);
    addNewAchievement(2601, 'First Invisible Blood', 'Monster Kills', 'arenaKill', 100, 'Max', 'save', false, 5);
    addNewAchievement(2602, 'Death to Monsters', 'Monster Kills', 'arenaKill', 250, 'Max', 'save', false, 5);
    addNewAchievement(2603, 'Ouch!', 'Monster Kills', 'arenaKill', 500, 'Max', 'save', false, 5);
    addNewAchievement(2604, 'Owie!!', 'Monster Kills', 'arenaKill', 1000, 'Max', 'save', false, 10);
    addNewAchievement(2605, 'Arghhhhhhh...', 'Monster Kills', 'arenaKill', 2500, 'Max', 'save', false, 10);
    addNewAchievement(2606, 'Monster Slayer', 'Monster Kills', 'arenaKill', 5000, 'Max', 'save', false, 10);
    addNewAchievement(2607, 'Pain', 'Monster Kills', 'arenaKill', 10000, 'Max', 'save', false, 10);
    addNewAchievement(2608, 'Painmaster', 'Monster Kills', 'arenaKill', 25000, 'Max', 'save', false, 15);
    addNewAchievement(2609, 'Destroyer of Pixels', 'Monster Kills', 'arenaKill', 50000, 'Max', 'save', false, 15);
    addNewAchievement(2610, 'That\'s Not Too Many!', 'Monster Kills', 'arenaKill', 100000, 'Max', 'save', false, 15);
    addNewAchievement(2611, 'Battle Arena Addict', 'Monster Kills', 'arenaKill', 250000, 'Max', 'save', false, 15);
    addNewAchievement(2612, 'Battle Arena Conqueror', 'Monster Kills', 'arenaKill', 500000, 'Max', 'save', false, 20);
    addNewAchievement(2630, 'Newbie Hunter', 'Monster Kills (non-weak)', 'arenaKillWhite', 25, 'Max', 'save', false, 5);
    addNewAchievement(2631, 'Novice Hunter', 'Monster Kills (non-weak)', 'arenaKillWhite', 100, 'Max', 'save', false, 5);
    addNewAchievement(2632, 'Trainee', 'Monster Kills (non-weak)', 'arenaKillWhite', 500, 'Max', 'save', false, 5);
    addNewAchievement(2633, 'Still In Training', 'Monster Kills (non-weak)', 'arenaKillWhite', 2500, 'Max', 'save', false, 5);
    addNewAchievement(2634, 'True Hunter', 'Monster Kills (non-weak)', 'arenaKillWhite', 10000, 'Max', 'save', false, 10);
    addNewAchievement(2635, 'Platinum Hero', 'Monster Kills (non-weak)', 'arenaKillWhite', 50000, 'Max', 'save', false, 10);
    addNewAchievement(2636, 'Overgrind', 'Monster Kills (non-weak)', 'arenaKillWhite', 250000, 'Max', 'save', false, 15);
    addNewAchievement(2660, 'It\'s Dangerous!', 'Monster Kills (strong)', 'arenaKillRed', 10, 'Max', 'save', false, 5);
    addNewAchievement(2661, 'That Was Hard!', 'Monster Kills (strong)', 'arenaKillRed', 50, 'Max', 'save', false, 5);
    addNewAchievement(2662, 'Risktaker', 'Monster Kills (strong)', 'arenaKillRed', 250, 'Max', 'save', false, 5);
    addNewAchievement(2663, 'Potion Burner', 'Monster Kills (strong)', 'arenaKillRed', 1000, 'Max', 'save', false, 5);
    addNewAchievement(2664, 'They Aren\'t That Strong!', 'Monster Kills (strong)', 'arenaKillRed', 5000, 'Max', 'save', false, 10);
    addNewAchievement(2665, 'Amazing Hunter', 'Monster Kills (strong)', 'arenaKillRed', 25000, 'Max', 'save', false, 10);
    addNewAchievement(2666, 'Legendary Hunter', 'Monster Kills (strong)', 'arenaKillRed', 100000, 'Max', 'save', false, 15);
    addNewAchievement(2690, 'First Bosses', 'Boss Kills', 'arenaKillPurple', 5, 'Max', 'save', false, 5);
    addNewAchievement(2691, 'More Bosses', 'Boss Kills', 'arenaKillPurple', 25, 'Max', 'save', false, 5);
    addNewAchievement(2692, 'Even More Bosses', 'Boss Kills', 'arenaKillPurple', 100, 'Max', 'save', false, 5);
    addNewAchievement(2693, 'Boss Hunter', 'Boss Kills', 'arenaKillPurple', 500, 'Max', 'save', false, 5);
    addNewAchievement(2694, 'Boss Killer', 'Boss Kills', 'arenaKillPurple', 2500, 'Max', 'save', false, 10);
    addNewAchievement(2695, 'Boss Slayer', 'Boss Kills', 'arenaKillPurple', 10000, 'Max', 'save', false, 10);
    addNewAchievement(2696, 'Purple Power', 'Boss Kills', 'arenaKillPurple', 50000, 'Max', 'save', false, 15);
    addNewAchievement(2640, 'First Rare Monster', 'Rare Monster Kills', 'arenaKillRare', 1, 'Max', 'save', false, 5);
    addNewAchievement(2641, 'More Rare Monsters', 'Rare Monster Kills', 'arenaKillRare', 5, 'Max', 'save', false, 5);
    addNewAchievement(2642, 'Even More Rare Monsters', 'Rare Monster Kills', 'arenaKillRare', 25, 'Max', 'save', false, 5);
    addNewAchievement(2643, 'Rare Monster Hunter', 'Rare Monster Kills', 'arenaKillRare', 100, 'Max', 'save', false, 5);
    addNewAchievement(2644, 'Rare Monster Killer', 'Rare Monster Kills', 'arenaKillRare', 500, 'Max', 'save', false, 10);
    addNewAchievement(2645, 'Rare Monster Slayer', 'Rare Monster Kills', 'arenaKillRare', 2500, 'Max', 'save', false, 10);
    addNewAchievement(2646, 'Rare Monster Master', 'Rare Monster Kills', 'arenaKillRare', 10000, 'Max', 'save', false, 15);
    addNewAchievement(2700, 'Stronger', 'Max Damage Dealt', 'arenaMaxDamage', 500, 'Max', 'save', false, 5);
    addNewAchievement(2701, 'Even Stronger', 'Max Damage Dealt', 'arenaMaxDamage', 2500, 'Max', 'save', false, 5);
    addNewAchievement(2702, 'IT\'S OVER 9000!!!', 'Max Damage Dealt', 'arenaMaxDamage', 9001, 'Max', 'save', false, 5);
    addNewAchievement(2703, 'Barbarian', 'Max Damage Dealt', 'arenaMaxDamage', 100000, 'Max', 'save', false, 5);
    addNewAchievement(2704, 'Powerful Hero', 'Max Damage Dealt', 'arenaMaxDamage', 2000000, 'Max', 'save', false, 10);
    addNewAchievement(2705, 'Slayer', 'Max Damage Dealt', 'arenaMaxDamage', 50000000, 'Max', 'save', false, 10);
    addNewAchievement(2706, 'Master Slayer', 'Max Damage Dealt', 'arenaMaxDamage', 1000000000, 'Max', 'save', false, 15);
    addNewAchievement(2800, 'First Attack', 'Max Combo', 'arenaMaxCombo', 1, 'Max', 'save', false, 5);
    addNewAchievement(2801, 'What\'s a Combo?', 'Max Combo', 'arenaMaxCombo', 100, 'Max', 'save', false, 5);
    addNewAchievement(2802, 'Can\'t Touch This!', 'Max Combo', 'arenaMaxCombo', 250, 'Max', 'save', false, 5);
    addNewAchievement(2803, 'Good Combo!', 'Max Combo', 'arenaMaxCombo', 500, 'Max', 'save', false, 5);
    addNewAchievement(2804, 'Nice Combo!', 'Max Combo', 'arenaMaxCombo', 1000, 'Max', 'save', false, 10);
    addNewAchievement(2805, 'Amazing Combo!', 'Max Combo', 'arenaMaxCombo', 2500, 'Max', 'save', false, 10);
    addNewAchievement(2806, 'Combo Maniac', 'Max Combo', 'arenaMaxCombo', 5000, 'Max', 'save', false, 15);
    addNewAchievement(2900, 'Pixel? Coins?', 'Unspent Pixels', 'arenaPixelMax', 10000, 'Max', 'save', false, 5);
    addNewAchievement(2901, 'Pixel Saver', 'Unspent Pixels', 'arenaPixelMax', 50000, 'Max', 'save', false, 5);
    addNewAchievement(2902, 'Pixel Collector', 'Unspent Pixels', 'arenaPixelMax', 250000, 'Max', 'save', false, 5);
    addNewAchievement(2903, 'A Lot of Pixels', 'Unspent Pixels', 'arenaPixelMax', 1000000, 'Max', 'save', false, 5);
    addNewAchievement(2904, 'Pixel Hoarder', 'Unspent Pixels', 'arenaPixelMax', 5000000, 'Max', 'save', false, 10);
    addNewAchievement(2905, 'Pixel Enthusiast', 'Unspent Pixels', 'arenaPixelMax', 25000000, 'Max', 'save', false, 10);
    addNewAchievement(2906, 'Pixel King', 'Unspent Pixels', 'arenaPixelMax', 100000000, 'Max', 'save', false, 15);
    addNewAchievement(3000, 'First Material', 'Unused Crafting Material', 'arenaCraftMax', 10000, 'Max', 'save', false, 10);
    addNewAchievement(3001, 'Material Saver', 'Unused Crafting Material', 'arenaCraftMax', 50000, 'Max', 'save', false, 10);
    addNewAchievement(3002, 'Material Collector', 'Unused Crafting Material', 'arenaCraftMax', 250000, 'Max', 'save', false, 10);
    addNewAchievement(3003, 'Material Hoarder', 'Unused Crafting Material', 'arenaCraftMax', 1000000, 'Max', 'save', false, 10);
    addNewAchievement(3004, 'Material Enthusiast', 'Unused Crafting Material', 'arenaCraftMax', 5000000, 'Max', 'save', false, 15);
    addNewAchievement(3005, 'Blacksmith', 'Unused Crafting Material', 'arenaCraftMax', 25000000, 'Max', 'save', false, 15);
    addNewAchievement(3006, 'Battle Arena Inc.', 'Unused Crafting Material', 'arenaCraftMax', 100000000, 'Max', 'save', false, 20);
    addNewAchievement(3100, 'First Loots', 'Loots', 'arenaLoot', 500, 'Max', 'save', false, 10);
    addNewAchievement(3101, 'Junior Looter', 'Loots', 'arenaLoot', 1000, 'Max', 'save', false, 10);
    addNewAchievement(3102, 'Looter', 'Loots', 'arenaLoot', 2500, 'Max', 'save', false, 15);
    addNewAchievement(3103, 'Senior Looter', 'Loots', 'arenaLoot', 5000, 'Max', 'save', false, 15);
    addNewAchievement(3104, 'Reward For Being Active', 'Loots', 'arenaLoot', 10000, 'Max', 'save', false, 20);
    addNewAchievement(3105, 'Loot Enthusiast', 'Loots', 'arenaLoot', 25000, 'Max', 'save', false, 20);
    addNewAchievement(3106, 'Master of Looting', 'Loots', 'arenaLoot', 50000, 'Max', 'save', false, 25);
    addNewAchievement(3200, 'Healthy Hunter', 'Base MaxHP', 'arenaMaxHealth', 650000, 'Max', 'save', false, 30);
    addNewAchievement(3201, 'Spellcaster', 'Base MaxMP', 'arenaMaxMana', 130000, 'Max', 'save', false, 30);
    addNewAchievement(3202, 'Powerful', 'Base Attack', 'arenaAttack', 65000, 'Max', 'save', false, 30);
    addNewAchievement(3203, 'Defensive', 'Base Defense', 'arenaDefense', 65000, 'Max', 'save', false, 30);
    addNewAchievement(3204, 'Accurate', 'Base Accuracy', 'arenaAccuracy', 6500, 'Max', 'save', false, 30);
    addNewAchievement(3205, 'Evasive', 'Base Evasion', 'arenaEvasion', 6500, 'Max', 'save', false, 30);
    addNewAchievement(3206, 'Enhancement King', 'Items Enhanced to +10', 'arenaMaxEnhance', 10, 'Max', 'save', false, 30);
    addNewAchievement(3300, 'Mission Complete!', 'Missions Completed', 'arenaMission', 1, 'Max', 'save', false, 5);
    addNewAchievement(3301, 'Mission Kommander\'s Helper', 'Mission Kommander\'s Mission', 'arenaKommanderComplete', 1, 'Max', 'save', false, 5);
    addNewAchievement(3302, 'Mission Kommander\'s Successor', 'Mission Kommander\'s Mission', 'arenaKommanderComplete', 25, 'Max', 'save', false, 10);
    addNewAchievement(3303, 'Lab Defender', 'Defend Mission', 'arenaDefendComplete', 1, 'Max', 'save', false, 10);
    addNewAchievement(3304, 'The Future\'s Protector', 'Defend Mission', 'arenaDefendComplete', 25, 'Max', 'save', false, 15);
    addNewAchievement(3305, 'Alien Destroyer', 'Prehistoric Mission', 'arenaPrehistoricComplete', 1, 'Max', 'save', false, 15);
    addNewAchievement(3306, 'The Past\'s Protector', 'Prehistoric Mission', 'arenaPrehistoricComplete', 25, 'Max', 'save', false, 20);
    addNewAchievement(3400, 'What\'s a Bestiary?', 'Bestiary Level', 'bestiaryLevel', 100, 'Max', 'root', false, 5);
    addNewAchievement(3401, 'Stamp Collector', 'Bestiary Level', 'bestiaryLevel', 200, 'Max', 'root', false, 5);
    addNewAchievement(3402, 'Monster Collector', 'Bestiary Level', 'bestiaryLevel', 300, 'Max', 'root', false, 10);
    addNewAchievement(3403, 'Dr. Monster', 'Bestiary Level', 'bestiaryLevel', 400, 'Max', 'root', false, 10);
    addNewAchievement(3404, 'Monster Expert', 'Bestiary Level', 'bestiaryLevel', 500, 'Max', 'root', false, 15);
    addNewAchievement(3405, 'Variety Killer', 'Bestiary Level', 'bestiaryLevel', 625, 'Max', 'root', false, 15);
    addNewAchievement(3406, 'Knowledgeable Fighter', 'Bestiary Level', 'bestiaryLevel', 750, 'Max', 'root', false, 20);
    addNewAchievement(3407, 'Information Addict', 'Bestiary Level', 'bestiaryLevel', 875, 'Max', 'root', false, 20);
    addNewAchievement(3408, 'Everything Killer', 'Bestiary Level', 'bestiaryLevel', 1000, 'Max', 'root', false, 25);
    addNewAchievement(3409, 'Master Explorer', 'Bestiary Level', 'bestiaryLevel', 1150, 'Max', 'root', false, 25);
    addNewAchievement(3410, 'Master Researcher', 'Bestiary Level', 'bestiaryLevel', 1300, 'Max', 'root', false, 30);
    addNewAchievement(3411, 'Bestiary Master', 'Bestiary Level', 'bestiaryLevel', 1500, 'Max', 'root', false, 50);
    addNewAchievement(3500, 'Beginner Training Zone Master', 'Area Kills', 'zoneKill1', 500, 'Max', 'root', false, 10);
    addNewAchievement(3501, 'Advanced Training Zone Master', 'Area Kills', 'zoneKill2', 1000, 'Max', 'root', false, 10);
    addNewAchievement(3502, 'Mystic Forest Master', 'Area Kills', 'zoneKill3', 1000, 'Max', 'root', false, 10);
    addNewAchievement(3503, 'Night Forest Master', 'Area Kills', 'zoneKill4', 2500, 'Max', 'root', false, 15);
    addNewAchievement(3504, 'Sky Master', 'Area Kills', 'zoneKill5', 2500, 'Max', 'root', false, 15);
    addNewAchievement(3505, 'Deadlands Master', 'Area Kills', 'zoneKill6', 5000, 'Max', 'root', false, 15);
    addNewAchievement(3506, 'Desert Master', 'Area Kills', 'zoneKill8', 5000, 'Max', 'root', false, 15);
    addNewAchievement(3507, 'Beach Master', 'Area Kills', 'zoneKill9', 10000, 'Max', 'root', false, 20);
    addNewAchievement(3508, 'Binary Battlefield Master', 'Area Kills', 'zoneKill10', 10000, 'Max', 'root', false, 20);
    addNewAchievement(3509, 'Dragon Cave Master', 'Area Kills', 'zoneKill11', 25000, 'Max', 'root', false, 20);
    addNewAchievement(3510, 'Pirate Ship Master', 'Area Kills', 'zoneKill12', 25000, 'Max', 'root', false, 20);
    addNewAchievement(3511, 'Triangle Land Master', 'Area Kills', 'zoneKill13', 50000, 'Max', 'root', false, 25);
    addNewAchievement(3512, 'Polluted Sky Master', 'Area Kills', 'zoneKill15', 2500, 'Max', 'root', false, 15);
    addNewAchievement(3513, 'Secret Beach Master', 'Area Kills', 'zoneKill16', 5000, 'Max', 'root', false, 20);
    addNewAchievement(3514, 'Scary Graveyard Master', 'Area Kills', 'zoneKill17', 5000, 'Max', 'root', false, 20);
    addNewAchievement(3515, 'Dark Portal Master', 'Area Kills', 'zoneKill18', 1000, 'Max', 'root', false, 20);
    addNewAchievement(3516, 'Dark Pyramid Master', 'Area Kills', 'zoneKill20', 10000, 'Max', 'root', false, 20);
    addNewAchievement(3517, 'Secret Lab Master', 'Area Kills', 'zoneKill25', 500, 'Max', 'root', false, 20);
    addNewAchievement(3518, 'Volcano Peak Master', 'Area Kills', 'zoneKill26', 5000, 'Max', 'root', false, 20);
    addNewAchievement(3519, 'Frosty Zone Master', 'Area Kills', 'zoneKill27', 5000, 'Max', 'root', false, 20);
    addNewAchievement(3520, 'Ship Interior Master', 'Area Kills', 'zoneKill28', 25000, 'Max', 'root', false, 25);
    addNewAchievement(3521, 'The Special Arena Master', 'Area Kills', 'zoneKill29', 500, 'Max', 'root', false, 25);
    addNewAchievement(3522, 'Prehistoric Area Master', 'Area Kills', 'zoneKill30', 10000, 'Max', 'root', false, 20);
    addNewAchievement(3600, 'Button Machine GET!', 'Button Presses', 'buttonPress', 500, 'Max', 'save', false, 5);
    addNewAchievement(3601, 'Button Presser', 'Button Presses', 'buttonPress', 1000, 'Max', 'save', false, 5);
    addNewAchievement(3602, 'Button Masher', 'Button Presses', 'buttonPress', 2500, 'Max', 'save', false, 5);
    addNewAchievement(3603, 'Button M4sh3r', 'Button Presses', 'buttonPress', 5000, 'Max', 'save', false, 5);
    addNewAchievement(3604, 'Mouse Masher', 'Button Presses', 'buttonPress', 10000, 'Max', 'save', false, 10);
    addNewAchievement(3605, 'Bored Machine', 'Button Presses', 'buttonPress', 25000, 'Max', 'save', false, 10);
    addNewAchievement(3606, 'Button Mashine', 'Button Presses', 'buttonPress', 50000, 'Max', 'save', false, 15);
    addNewAchievement(3700, 'Perfect Click!', 'Perfect Clicks', 'buttonPerfect', 1, 'Max', 'save', false, 10);
    addNewAchievement(3701, 'Another Perfect Click', 'Perfect Clicks', 'buttonPerfect', 2, 'Max', 'save', false, 10);
    addNewAchievement(3702, 'Yet Another Perfect Click', 'Perfect Clicks', 'buttonPerfect', 5, 'Max', 'save', false, 10);
    addNewAchievement(3703, 'Accurate Clicker', 'Perfect Clicks', 'buttonPerfect', 25, 'Max', 'save', false, 10);
    addNewAchievement(3704, 'More Accurate Clicker', 'Perfect Clicks', 'buttonPerfect', 50, 'Max', 'save', false, 15);
    addNewAchievement(3705, 'Perfect Clicker', 'Perfect Clicks', 'buttonPerfect', 100, 'Max', 'save', false, 15);
    addNewAchievement(3706, 'Pixel Perfect', 'Perfect Clicks', 'buttonPerfect', 250, 'Max', 'save', false, 20);
    addNewAchievement(3800, 'Button Breaker', 'Button Breaks', 'buttonBreak', 1, 'Max', 'save', false, 5);
    addNewAchievement(3801, 'Button Killer', 'Button Breaks', 'buttonBreak', 2, 'Max', 'save', false, 5);
    addNewAchievement(3802, 'Button Destroyer', 'Button Breaks', 'buttonBreak', 5, 'Max', 'save', false, 5);
    addNewAchievement(3803, 'Mouse Breaker', 'Button Breaks', 'buttonBreak', 10, 'Max', 'save', false, 5);
    addNewAchievement(3804, 'Mouse Destroyer', 'Button Breaks', 'buttonBreak', 25, 'Max', 'save', false, 10);
    addNewAchievement(3805, 'Warning Ignorer', 'Button Breaks', 'buttonBreak', 50, 'Max', 'save', false, 10);
    addNewAchievement(3806, 'Button Hater', 'Button Breaks', 'buttonBreak', 100, 'Max', 'save', false, 15);
    addNewAchievement(3900, '100 Hit Combo!', 'Max Hit Combo', 'buttonMaxCombo', 100, 'Max', 'save', false, 10);
    addNewAchievement(3901, 'Doing It Right', 'Max Hit Combo', 'buttonMaxCombo', 250, 'Max', 'save', false, 10);
    addNewAchievement(3902, 'Fast Clicker', 'Max Hit Combo', 'buttonMaxCombo', 500, 'Max', 'save', false, 10);
    addNewAchievement(3903, 'Faster Clicker', 'Max Hit Combo', 'buttonMaxCombo', 1000, 'Max', 'save', false, 10);
    addNewAchievement(3904, 'Ultimate Clicker', 'Max Hit Combo', 'buttonMaxCombo', 2500, 'Max', 'save', false, 15);
    addNewAchievement(3905, 'Combo Master', 'Max Hit Combo', 'buttonMaxCombo', 5000, 'Max', 'save', false, 15);
    addNewAchievement(3906, 'Finger Breaker', 'Max Hit Combo', 'buttonMaxCombo', 10000, 'Max', 'save', false, 20);
    addNewAchievement(4000, 'Printer Upgraded!', 'Money Printer Level', 'printerLevel', 2, 'Max', 'save', false, 5);
    addNewAchievement(4001, 'Illegal Upgrades', 'Money Printer Level', 'printerLevel', 5, 'Max', 'save', false, 5);
    addNewAchievement(4002, 'Extremely Illegal', 'Money Printer Level', 'printerLevel', 10, 'Max', 'save', false, 5);
    addNewAchievement(4003, 'Coins Spent For More Coins', 'Money Printer Level', 'printerLevel', 25, 'Max', 'save', false, 10);
    addNewAchievement(4004, 'It\'s Worth Upgrading!', 'Money Printer Level', 'printerLevel', 50, 'Max', 'save', false, 10);
    addNewAchievement(4005, 'Max Upgrader (or maybe not)', 'Money Printer Level', 'printerLevel', 100, 'Max', 'save', false, 15);
    addNewAchievement(4100, 'First Illegal Money', 'Illegal Coins (Million)', 'totalPrinterMillion', 1, 'Max', 'save', false, 5);
    addNewAchievement(4101, 'It Prints... Coins?', 'Illegal Coins (Million)', 'totalPrinterMillion', 2, 'Max', 'save', false, 5);
    addNewAchievement(4102, 'It Prints Money!', 'Illegal Coins (Million)', 'totalPrinterMillion', 5, 'Max', 'save', false, 5);
    addNewAchievement(4103, 'Going Illegal', 'Illegal Coins (Million)', 'totalPrinterMillion', 10, 'Max', 'save', false, 5);
    addNewAchievement(4104, 'More Illegal Money', 'Illegal Coins (Million)', 'totalPrinterMillion', 25, 'Max', 'save', false, 10);
    addNewAchievement(4105, 'Even More Illegal Money', 'Illegal Coins (Million)', 'totalPrinterMillion', 50, 'Max', 'save', false, 10);
    addNewAchievement(4106, 'A Lot of Illegal Money', 'Illegal Coins (Million)', 'totalPrinterMillion', 100, 'Max', 'save', false, 10);
    addNewAchievement(4107, '\'This is illegal, you know\'', 'Illegal Coins (Million)', 'totalPrinterMillion', 250, 'Max', 'save', false, 15);
    addNewAchievement(4200, 'Battery Charged!', 'Battery Charges', 'totalPrinterCharge', 250, 'Max', 'save', false, 5);
    addNewAchievement(4201, 'First Charges', 'Battery Charges', 'totalPrinterCharge', 500, 'Max', 'save', false, 5);
    addNewAchievement(4202, 'Battery Charger', 'Battery Charges', 'totalPrinterCharge', 1000, 'Max', 'save', false, 5);
    addNewAchievement(4203, 'Printer User', 'Battery Charges', 'totalPrinterCharge', 2500, 'Max', 'save', false, 5);
    addNewAchievement(4204, 'Haven\'t Forgotten', 'Battery Charges', 'totalPrinterCharge', 5000, 'Max', 'save', false, 10);
    addNewAchievement(4205, 'Battery Supercharged!', 'Battery Charges', 'totalPrinterCharge', 10000, 'Max', 'save', false, 10);
    addNewAchievement(4206, 'Chargin\' Mah Battery', 'Battery Charges', 'totalPrinterCharge', 25000, 'Max', 'save', false, 15);
    addNewAchievement(4300, 'Pong Newbie', 'Pong High Score', 'highPong', 200000, 'Max', 'save', false, 5);
    addNewAchievement(4301, 'Pongregate', 'Pong High Score', 'highPong', 275000, 'Max', 'save', false, 10);
    addNewAchievement(4302, 'Pwngregate', 'Pong High Score', 'highPong', 375000, 'Max', 'save', false, 15);
    addNewAchievement(4303, 'Pwn-greg-ate', 'Pong High Score', 'highPong', 500000, 'Max', 'save', false, 20);
    addNewAchievement(4350, 'Pong Player', 'Pong Total Score', 'totalPong', 1000000, 'Max', 'save', false, 5);
    addNewAchievement(4351, 'Pong Lover', 'Pong Total Score', 'totalPong', 2500000, 'Max', 'save', false, 5);
    addNewAchievement(4352, 'Pong-a-Lot', 'Pong Total Score', 'totalPong', 5000000, 'Max', 'save', false, 10);
    addNewAchievement(4400, 'Newbie Avoider', 'Avoidance High Score', 'highAvoidance', 125000, 'Max', 'save', false, 5);
    addNewAchievement(4401, 'Good Avoider', 'Avoidance High Score', 'highAvoidance', 175000, 'Max', 'save', false, 10);
    addNewAchievement(4402, 'Amazing Avoider', 'Avoidance High Score', 'highAvoidance', 250000, 'Max', 'save', false, 15);
    addNewAchievement(4403, 'Master Avoider', 'Avoidance High Score', 'highAvoidance', 350000, 'Max', 'save', false, 20);
    addNewAchievement(4450, 'Avoidance Player', 'Avoidance Total Score', 'totalAvoidance', 750000, 'Max', 'save', false, 5);
    addNewAchievement(4451, 'Avoidance Lover', 'Avoidance Total Score', 'totalAvoidance', 1500000, 'Max', 'save', false, 5);
    addNewAchievement(4452, 'Just Avoid', 'Avoidance Total Score', 'totalAvoidance', 3000000, 'Max', 'save', false, 10);
    addNewAchievement(4500, 'Math Solver', 'Math High Score', 'highMath', 75000, 'Max', 'save', false, 5);
    addNewAchievement(4501, 'Math Master', 'Math High Score', 'highMath', 125000, 'Max', 'save', false, 10);
    addNewAchievement(4502, 'Alternative Calculator', 'Math High Score', 'highMath', 200000, 'Max', 'save', false, 15);
    addNewAchievement(4503, 'Lower The Requirements!', 'Math High Score', 'highMath', 300000, 'Max', 'save', false, 20);
    addNewAchievement(4550, 'Math Master Player', 'Math Total Score', 'totalMath', 1000000, 'Max', 'save', false, 5);
    addNewAchievement(4551, 'Math Master Lover', 'Math Total Score', 'totalMath', 2500000, 'Max', 'save', false, 5);
    addNewAchievement(4552, 'Math Like Mad', 'Math Total Score', 'totalMath', 5000000, 'Max', 'save', false, 10);
    addNewAchievement(4600, 'Mole Whacker', 'Whack-a-greg High Score', 'highWhack', 600000, 'Max', 'save', false, 5);
    addNewAchievement(4601, 'Greg Whacker', 'Whack-a-greg High Score', 'highWhack', 900000, 'Max', 'save', false, 10);
    addNewAchievement(4602, 'Quick Reaction', 'Whack-a-greg High Score', 'highWhack', 1200000, 'Max', 'save', false, 15);
    addNewAchievement(4603, 'Greg Destroyer', 'Whack-a-greg High Score', 'highWhack', 1500000, 'Max', 'save', false, 20);
    addNewAchievement(4650, 'Whack-a-greg Player', 'Whack-a-greg Total Score', 'totalWhack', 3000000, 'Max', 'save', false, 5);
    addNewAchievement(4651, 'Whack-a-greg Lover', 'Whack-a-greg Total Score', 'totalWhack', 7500000, 'Max', 'save', false, 5);
    addNewAchievement(4652, 'Greg Clicker', 'Whack-a-greg Total Score', 'totalWhack', 15000000, 'Max', 'save', false, 10);
    addNewAchievement(4700, 'What Are These Numbers?', 'MindSweeper High Score', 'highMind', 350000, 'Max', 'save', false, 5);
    addNewAchievement(4701, 'That\'s How You Play It', 'MindSweeper High Score', 'highMind', 450000, 'Max', 'save', false, 10);
    addNewAchievement(4702, 'Goal Hunter', 'MindSweeper High Score', 'highMind', 600000, 'Max', 'save', false, 15);
    addNewAchievement(4703, 'Mind Destroyer', 'MindSweeper High Score', 'highMind', 800000, 'Max', 'save', false, 20);
    addNewAchievement(4750, 'MindSweeper Player', 'MindSweeper Total Score', 'totalMind', 1000000, 'Max', 'save', false, 5);
    addNewAchievement(4751, 'MindSweeper Lover', 'MindSweeper Total Score', 'totalMind', 2500000, 'Max', 'save', false, 5);
    addNewAchievement(4752, 'Square Clicker', 'MindSweeper Total Score', 'totalMind', 5000000, 'Max', 'save', false, 10);
    addNewAchievement(4770, 'Balance Newbie', 'Balance 3 High Score', 'highBalance', 300000, 'Max', 'save', false, 5);
    addNewAchievement(4771, 'Block Dropper', 'Balance 3 High Score', 'highBalance', 500000, 'Max', 'save', false, 10);
    addNewAchievement(4772, 'Balance Master', 'Balance 3 High Score', 'highBalance', 800000, 'Max', 'save', false, 15);
    addNewAchievement(4773, 'Perfect Harmony', 'Balance 3 High Score', 'highBalance', 1200000, 'Max', 'save', false, 20);
    addNewAchievement(4780, 'Balance 3 Player', 'Balance 3 Total Score', 'totalBalance', 2000000, 'Max', 'save', false, 5);
    addNewAchievement(4781, 'Balance 3 Lover', 'Balance 3 Total Score', 'totalBalance', 5000000, 'Max', 'save', false, 5);
    addNewAchievement(4782, 'Block Destroyer', 'Balance 3 Total Score', 'totalBalance', 10000000, 'Max', 'save', false, 10);
    addNewAchievement(4800, 'Finally Won', 'Simple Race Wins', 'stadiumRace', 1, 'Max', 'save', false, 5);
    addNewAchievement(4801, 'Newbie Racer', 'Simple Race Wins', 'stadiumRace', 10, 'Max', 'save', false, 5);
    addNewAchievement(4802, 'Diligent Racer', 'Simple Race Wins', 'stadiumRace', 50, 'Max', 'save', false, 10);
    addNewAchievement(4810, 'Stadium Hero', 'Simple Race Wins (Impossible)', 'stadiumImpossibleRace', 1, 'Max', 'save', false, 50);
    addNewAchievement(4820, 'Item User', 'Item Fight Wins', 'stadiumItem', 1, 'Max', 'save', false, 5);
    addNewAchievement(4821, 'Item Racer', 'Item Fight Wins', 'stadiumItem', 10, 'Max', 'save', false, 5);
    addNewAchievement(4822, 'Diligent Racer (Again!)', 'Item Fight Wins', 'stadiumItem', 50, 'Max', 'save', false, 10);
    addNewAchievement(4830, 'Stadium Superstar', 'Item Fight Wins (Impossible)', 'stadiumImpossibleItem', 1, 'Max', 'save', false, 50);
    addNewAchievement(4840, 'Death Match Winner', 'Death Match Wins', 'stadiumDeathMatch', 1, 'Max', 'save', false, 5);
    addNewAchievement(4841, 'Death Match Expert', 'Death Match Wins', 'stadiumDeathMatch', 2, 'Max', 'save', false, 5);
    addNewAchievement(4842, 'Death Match Pro', 'Death Match Wins', 'stadiumDeathMatch', 4, 'Max', 'save', false, 10);
    addNewAchievement(4843, 'Death Match Master', 'Death Match Wins', 'stadiumDeathMatch', 7, 'Max', 'save', false, 15);
    addNewAchievement(4850, 'Keybasher', 'Highest PWNts', 'stadiumBestDeathMatch', 400, 'Max', 'save', false, 5);
    addNewAchievement(4851, 'Troublemaker', 'Highest PWNts', 'stadiumBestDeathMatch', 500, 'Max', 'save', false, 10);
    addNewAchievement(4852, 'Ultimate PWNer', 'Highest PWNts', 'stadiumBestDeathMatch', 600, 'Max', 'save', false, 15);
    addNewAchievement(4853, 'iPwn', 'Highest PWNts', 'stadiumBestDeathMatch', 700, 'Max', 'save', false, 20);
    addNewAchievement(4860, 'Good Start', 'Best Race Time (ms)', 'stadiumBestTime', 13500, 'Min', 'save', false, 5);
    addNewAchievement(4861, 'Great Start', 'Best Race Time (ms)', 'stadiumBestTime', 12000, 'Min', 'save', false, 5);
    addNewAchievement(4862, 'Not a Start', 'Best Race Time (ms)', 'stadiumBestTime', 10500, 'Min', 'save', false, 10);
    addNewAchievement(4863, 'Awesome Speed', 'Best Race Time (ms)', 'stadiumBestTime', 9000, 'Min', 'save', false, 15);
    addNewAchievement(4864, 'Speed Runner', 'Best Race Time (ms)', 'stadiumBestTime', 7500, 'Min', 'save', false, 20);
    addNewAchievement(4870, 'Beginner\'s Luck', 'Correct Bets', 'stadiumBetCorrect', 1, 'Max', 'save', false, 5);
    addNewAchievement(4871, 'Better Bettor', 'Correct Bets', 'stadiumBetCorrect', 10, 'Max', 'save', false, 10);
    addNewAchievement(4880, 'Lucky Money', 'Bet Winnings (Coins)', 'stadiumBetWinningCoin', 5000000, 'Max', 'save', false, 5);
    addNewAchievement(4881, 'Big Winnings', 'Bet Winnings (Coins)', 'stadiumBetWinningCoin', 100000000, 'Max', 'save', false, 10);
    addNewAchievement(4890, 'Future Teller', 'Bet Winnings (Tokens)', 'stadiumBetWinningToken', 250, 'Max', 'save', false, 5);
    addNewAchievement(4891, 'Lucky Star', 'Bet Winnings (Tokens)', 'stadiumBetWinningToken', 5000, 'Max', 'save', false, 10);
    addNewAchievement(4900, 'Energetic Racer', 'Stadium Max Energy', 'stadiumEnergy', 50, 'Max', 'save', false, 10);
    addNewAchievement(4910, 'Quick Runner', 'Stadium Accel', 'stadiumAccel', 50, 'Max', 'save', false, 10);
    addNewAchievement(4920, 'Speed of Light', 'Stadium Max Speed', 'stadiumMaxSpeed', 50, 'Max', 'save', false, 10);
    addNewAchievement(4930, 'Decent Starter', 'Stadium Starting Speed', 'stadiumStartSpeed', 50, 'Max', 'save', false, 10);
    addNewAchievement(4940, 'Dash Master', 'Stadium Dash', 'stadiumDash', 50, 'Max', 'save', false, 10);
    addNewAchievement(4950, 'Reach For The Stars', 'Stadium Jump', 'stadiumJump', 50, 'Max', 'save', false, 10);
    addNewAchievement(4960, 'Shifter', 'Stadium Boost', 'stadiumBoost', 50, 'Max', 'save', false, 10);
    addNewAchievement(4970, 'Rewarded Racer', 'Stadium Reward', 'stadiumReward', 50, 'Max', 'save', false, 10);
    addNewAchievement(5000, 'TukkunFCG Novice', 'TukkunFCG Level', 'fcgLevel', 2, 'Max', 'save', false, 5);
    addNewAchievement(5001, 'TukkunFCG Trainee', 'TukkunFCG Level', 'fcgLevel', 5, 'Max', 'save', false, 5);
    addNewAchievement(5002, 'TukkunFCG Player', 'TukkunFCG Level', 'fcgLevel', 8, 'Max', 'save', false, 10);
    addNewAchievement(5003, 'TukkunFCG Expert', 'TukkunFCG Level', 'fcgLevel', 11, 'Max', 'save', false, 10);
    addNewAchievement(5004, 'TukkunFCG Enthusiast', 'TukkunFCG Level', 'fcgLevel', 14, 'Max', 'save', false, 15);
    addNewAchievement(5005, 'TukkunFCG Master', 'TukkunFCG Level', 'fcgLevel', 17, 'Max', 'save', false, 15);
    addNewAchievement(5006, 'TukkunFCG Grand Master', 'TukkunFCG Level', 'fcgLevel', 20, 'Max', 'save', false, 25);
    addNewAchievement(5100, 'Learning to Play', 'TukkunFCG Wins', 'fcgWin', 1, 'Max', 'save', false, 5);
    addNewAchievement(5101, 'Learning to Win', 'TukkunFCG Wins', 'fcgWin', 2, 'Max', 'save', false, 5);
    addNewAchievement(5102, 'Getting Better', 'TukkunFCG Wins', 'fcgWin', 5, 'Max', 'save', false, 5);
    addNewAchievement(5103, 'Card Specialist', 'TukkunFCG Wins', 'fcgWin', 10, 'Max', 'save', false, 5);
    addNewAchievement(5104, 'Cardmaster', 'TukkunFCG Wins', 'fcgWin', 25, 'Max', 'save', false, 10);
    addNewAchievement(5105, 'Skillful TukkunFCG Player', 'TukkunFCG Wins', 'fcgWin', 50, 'Max', 'save', false, 10);
    addNewAchievement(5106, 'A Winner is You', 'TukkunFCG Wins', 'fcgWin', 100, 'Max', 'save', false, 15);
    addNewAchievement(5206, 'Level 1 Master', 'TukkunFCG Level 1 Wins', 'fcgLevel1', 10, 'Max', 'save', false, 5);
    addNewAchievement(5200, 'Level 2 Master', 'TukkunFCG Level 2 Wins', 'fcgLevel2', 10, 'Max', 'save', false, 5);
    addNewAchievement(5201, 'Level 3 Master', 'TukkunFCG Level 3 Wins', 'fcgLevel3', 10, 'Max', 'save', false, 10);
    addNewAchievement(5202, 'Level 4 Master', 'TukkunFCG Level 4 Wins', 'fcgLevel4', 10, 'Max', 'save', false, 10);
    addNewAchievement(5203, 'Kongrebasher', 'TukkunFCG Level 5 Wins', 'fcgLevel5', 10, 'Max', 'save', false, 15);
    addNewAchievement(5204, 'Level 6 Master', 'TukkunFCG Level 6 Wins', 'fcgLevel6', 10, 'Max', 'save', false, 15);
    addNewAchievement(5205, 'Level 7 Master', 'TukkunFCG Level 7 Wins', 'fcgLevel7', 10, 'Max', 'save', false, 20);
    addNewAchievement(5300, 'Profit!', 'LolMarket Profit', 'lolMaxProfit', 5000, 'Max', 'save', false, 5);
    addNewAchievement(5301, 'More Profit!', 'LolMarket Profit', 'lolMaxProfit', 25000, 'Max', 'save', false, 5);
    addNewAchievement(5302, 'Even More Profit!', 'LolMarket Profit', 'lolMaxProfit', 100000, 'Max', 'save', false, 10);
    addNewAchievement(5303, 'Gem Trader', 'LolMarket Profit', 'lolMaxProfit', 500000, 'Max', 'save', false, 10);
    addNewAchievement(5304, 'LolMarket Master', 'LolMarket Profit', 'lolMaxProfit', 2500000, 'Max', 'save', false, 15);
    addNewAchievement(5305, 'LolMarket Grand Master', 'LolMarket Profit', 'lolMaxProfit', 10000000, 'Max', 'save', false, 15);
    addNewAchievement(5306, '\'higher gc cap plz\'', 'LolMarket Profit', 'lolMaxProfit', 50000000, 'Max', 'save', false, 25);
    addNewAchievement(5400, 'Newbie Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 25, 'Max', 'save', false, 5);
    addNewAchievement(5401, 'Junior Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 50, 'Max', 'save', false, 5);
    addNewAchievement(5402, 'Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 100, 'Max', 'save', false, 10);
    addNewAchievement(5403, 'Diligent Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 250, 'Max', 'save', false, 10);
    addNewAchievement(5404, 'Famous Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 500, 'Max', 'save', false, 15);
    addNewAchievement(5405, 'Master Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 1000, 'Max', 'save', false, 15);
    addNewAchievement(5406, 'Epic Adventurer', 'Adventure Reputation', 'awesomeMaxReputation', 5000, 'Max', 'save', false, 25);
    addNewAchievement(5601, 'Fishing Newbie', 'Fishing Skill', 'fishLevel', 2, 'Max', 'save', false, 5);
    addNewAchievement(5602, 'Fishing Novice', 'Fishing Skill', 'fishLevel', 3, 'Max', 'save', false, 10);
    addNewAchievement(5603, 'Fishing Expert', 'Fishing Skill', 'fishLevel', 5, 'Max', 'save', false, 15);
    addNewAchievement(5604, 'Fishing Master', 'Fishing Skill', 'fishLevel', 10, 'Max', 'save', false, 20);
    addNewAchievement(5605, 'Fishing Grand Master', 'Fishing Skill', 'fishLevel', 15, 'Max', 'save', false, 25);
    addNewAchievement(5606, 'Fishing King', 'Fishing Skill', 'fishLevel', 20, 'Max', 'save', false, 30);
    addNewAchievement(5651, 'Fish Catcher', 'Fishing Catches', 'fishTotal', 50, 'Max', 'save', false, 5);
    addNewAchievement(5652, 'Diligent Fish Catcher', 'Fishing Catches', 'fishTotal', 500, 'Max', 'save', false, 15);
    addNewAchievement(5653, 'Famous Fish Catcher', 'Fishing Catches', 'fishTotal', 5000, 'Max', 'save', false, 30);
    addNewAchievement(5701, 'Perfect Catcher', 'Fishing Perfect Catches', 'fishPerfect', 20, 'Max', 'save', false, 10);
    addNewAchievement(5702, 'Elite Perfect Catcher', 'Fishing Perfect Catches', 'fishPerfect', 200, 'Max', 'save', false, 20);
    addNewAchievement(5703, 'Master Perfect Catcher', 'Fishing Perfect Catches', 'fishPerfect', 2000, 'Max', 'save', false, 40);
    addNewAchievement(5751, 'Lucky Streak', 'Fishing Perfect Streak', 'fishBestStreak', 10, 'Max', 'save', false, 25);
    addNewAchievement(5752, 'Godly Streak', 'Fishing Perfect Streak', 'fishBestStreak', 20, 'Max', 'save', false, 50);
    addNewAchievement(5501, 'Pet Feeder', 'Pet Level', 'petBestLevel', 25, 'Max', 'save', false, 20);
    addNewAchievement(5502, 'Pet Trainer', 'Pet Level', 'petBestLevel', 50, 'Max', 'save', false, 30);
    addNewAchievement(5503, 'Pet Lover', 'Pet Level', 'petBestLevel', 75, 'Max', 'save', false, 40);
    addNewAchievement(5504, 'Pet Master', 'Pet Level', 'petBestLevel', 100, 'Max', 'save', false, 50);
    addNewAchievement(5801, 'First Career', 'Total Career Level', 'totalCareerLevel', 1, 'Max', 'root', false, 5);
    addNewAchievement(5802, 'Career Newbie', 'Total Career Level', 'totalCareerLevel', 200, 'Max', 'root', false, 20);
    addNewAchievement(5803, 'Career User', 'Total Career Level', 'totalCareerLevel', 400, 'Max', 'root', false, 30);
    addNewAchievement(5804, 'Career Maniac', 'Total Career Level', 'totalCareerLevel', 600, 'Max', 'root', false, 40);
    addNewAchievement(5805, 'Career Master', 'Total Career Level', 'totalCareerLevel', 800, 'Max', 'root', false, 50);
    addNewAchievement(8000, '10th Achievement', 'Achievements', 'maxAchievement', 9, 'Max', 'save', false, 5);
    addNewAchievement(8001, '20th Achievement', 'Achievements', 'maxAchievement', 19, 'Max', 'save', false, 5);
    addNewAchievement(8002, '30th Achievement', 'Achievements', 'maxAchievement', 29, 'Max', 'save', false, 5);
    addNewAchievement(8003, '40th Achievement', 'Achievements', 'maxAchievement', 39, 'Max', 'save', false, 5);
    addNewAchievement(8004, '50th Achievement', 'Achievements', 'maxAchievement', 49, 'Max', 'save', false, 5);
    addNewAchievement(8005, '60th Achievement', 'Achievements', 'maxAchievement', 59, 'Max', 'save', false, 5);
    addNewAchievement(8006, '70th Achievement', 'Achievements', 'maxAchievement', 69, 'Max', 'save', false, 5);
    addNewAchievement(8007, '80th Achievement', 'Achievements', 'maxAchievement', 79, 'Max', 'save', false, 5);
    addNewAchievement(8008, '90th Achievement', 'Achievements', 'maxAchievement', 89, 'Max', 'save', false, 5);
    addNewAchievement(8009, '100th Achievement', 'Achievements', 'maxAchievement', 99, 'Max', 'save', false, 5);
    addNewAchievement(8010, '110th Achievement', 'Achievements', 'maxAchievement', 109, 'Max', 'save', false, 10);
    addNewAchievement(8011, '120th Achievement', 'Achievements', 'maxAchievement', 119, 'Max', 'save', false, 10);
    addNewAchievement(8012, '130th Achievement', 'Achievements', 'maxAchievement', 129, 'Max', 'save', false, 10);
    addNewAchievement(8013, '140th Achievement', 'Achievements', 'maxAchievement', 139, 'Max', 'save', false, 10);
    addNewAchievement(8014, '150th Achievement', 'Achievements', 'maxAchievement', 149, 'Max', 'save', false, 10);
    addNewAchievement(8015, '160th Achievement', 'Achievements', 'maxAchievement', 159, 'Max', 'save', false, 10);
    addNewAchievement(8016, '170th Achievement', 'Achievements', 'maxAchievement', 169, 'Max', 'save', false, 10);
    addNewAchievement(8017, '180th Achievement', 'Achievements', 'maxAchievement', 179, 'Max', 'save', false, 10);
    addNewAchievement(8018, '190th Achievement', 'Achievements', 'maxAchievement', 189, 'Max', 'save', false, 10);
    addNewAchievement(8019, '200th Achievement', 'Achievements', 'maxAchievement', 199, 'Max', 'save', false, 10);
    addNewAchievement(8020, '210th Achievement', 'Achievements', 'maxAchievement', 209, 'Max', 'save', false, 15);
    addNewAchievement(8021, '220th Achievement', 'Achievements', 'maxAchievement', 219, 'Max', 'save', false, 15);
    addNewAchievement(8022, '230th Achievement', 'Achievements', 'maxAchievement', 229, 'Max', 'save', false, 15);
    addNewAchievement(8023, '240th Achievement', 'Achievements', 'maxAchievement', 239, 'Max', 'save', false, 15);
    addNewAchievement(8024, '250th Achievement', 'Achievements', 'maxAchievement', 249, 'Max', 'save', false, 15);
    addNewAchievement(8025, '260th Achievement', 'Achievements', 'maxAchievement', 259, 'Max', 'save', false, 15);
    addNewAchievement(8026, '270th Achievement', 'Achievements', 'maxAchievement', 269, 'Max', 'save', false, 15);
    addNewAchievement(8027, '280th Achievement', 'Achievements', 'maxAchievement', 279, 'Max', 'save', false, 15);
    addNewAchievement(8028, '290th Achievement', 'Achievements', 'maxAchievement', 289, 'Max', 'save', false, 15);
    addNewAchievement(8029, '300th Achievement', 'Achievements', 'maxAchievement', 299, 'Max', 'save', false, 15);
    addNewAchievement(8030, '310th Achievement', 'Achievements', 'maxAchievement', 309, 'Max', 'save', false, 20);
    addNewAchievement(8031, '320th Achievement', 'Achievements', 'maxAchievement', 319, 'Max', 'save', false, 20);
    addNewAchievement(8032, '330th Achievement', 'Achievements', 'maxAchievement', 329, 'Max', 'save', false, 20);
    addNewAchievement(8033, '340th Achievement', 'Achievements', 'maxAchievement', 339, 'Max', 'save', false, 20);
    addNewAchievement(8034, '350th Achievement', 'Achievements', 'maxAchievement', 349, 'Max', 'save', false, 20);
    addNewAchievement(8035, '360th Achievement', 'Achievements', 'maxAchievement', 359, 'Max', 'save', false, 20);
    addNewAchievement(8036, '370th Achievement', 'Achievements', 'maxAchievement', 369, 'Max', 'save', false, 20);
    addNewAchievement(8037, '380th Achievement', 'Achievements', 'maxAchievement', 379, 'Max', 'save', false, 20);
    addNewAchievement(8038, '390th Achievement', 'Achievements', 'maxAchievement', 389, 'Max', 'save', false, 20);
    addNewAchievement(8039, '400th Achievement', 'Achievements', 'maxAchievement', 399, 'Max', 'save', false, 20);
    addNewAchievement(8040, '410th Achievement', 'Achievements', 'maxAchievement', 409, 'Max', 'save', false, 25);
    addNewAchievement(8041, '420th Achievement', 'Achievements', 'maxAchievement', 419, 'Max', 'save', false, 25);
    addNewAchievement(8042, '430th Achievement', 'Achievements', 'maxAchievement', 429, 'Max', 'save', false, 25);
    addNewAchievement(8043, '440th Achievement', 'Achievements', 'maxAchievement', 439, 'Max', 'save', false, 25);
    addNewAchievement(8044, '450th Achievement', 'Achievements', 'maxAchievement', 449, 'Max', 'save', false, 25);
    addNewAchievement(8045, '460th Achievement', 'Achievements', 'maxAchievement', 459, 'Max', 'save', false, 25);
    addNewAchievement(8046, '470th Achievement', 'Achievements', 'maxAchievement', 469, 'Max', 'save', false, 25);
    addNewAchievement(8047, '480th Achievement', 'Achievements', 'maxAchievement', 479, 'Max', 'save', false, 25);
    addNewAchievement(8048, '490th Achievement', 'Achievements', 'maxAchievement', 489, 'Max', 'save', false, 25);
    addNewAchievement(8049, '500th Achievement', 'Achievements', 'maxAchievement', 499, 'Max', 'save', false, 25);
    addNewAchievement(8050, '510th Achievement', 'Achievements', 'maxAchievement', 509, 'Max', 'save', false, 30);
    addNewAchievement(8051, '520th Achievement', 'Achievements', 'maxAchievement', 519, 'Max', 'save', false, 30);
    addNewAchievement(8052, '530th Achievement', 'Achievements', 'maxAchievement', 529, 'Max', 'save', false, 30);
    addNewAchievement(8053, '540th Achievement', 'Achievements', 'maxAchievement', 539, 'Max', 'save', false, 30);
    addNewAchievement(8054, '550th Achievement', 'Achievements', 'maxAchievement', 549, 'Max', 'save', false, 30);
    addNewAchievement(8055, '560th Achievement', 'Achievements', 'maxAchievement', 559, 'Max', 'save', false, 30);
    addNewAchievement(8056, '570th Achievement', 'Achievements', 'maxAchievement', 569, 'Max', 'save', false, 30);
    addNewAchievement(8057, '580th Achievement', 'Achievements', 'maxAchievement', 579, 'Max', 'save', false, 30);
    addNewAchievement(8058, '590th Achievement', 'Achievements', 'maxAchievement', 589, 'Max', 'save', false, 30);
    addNewAchievement(8059, '600th Achievement', 'Achievements', 'maxAchievement', 599, 'Max', 'save', false, 30);
    addNewAchievement(9000, 'Cheater', '< Secret Achievement >', 'cheat', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9001, 'Knowledge is Power', '< Secret Achievement >', 'knowledge', 1337, 'Max', 'save', true, 15);
    addNewAchievement(9002, 'Lost Again', '< Secret Achievement >', 'theGame', 2, 'Max', 'save', true, 10);
    addNewAchievement(9003, 'EXPerienced', '< Secret Achievement >', 'experienced', 50, 'Max', 'save', true, 5);
    addNewAchievement(9004, 'YOU\'RE DOING IT WRONG', '< Secret Achievement >', 'doingItWrong', 1800, 'Max', 'save', true, 15);
    addNewAchievement(9005, 'Patience is a Virtue', '< Secret Achievement >', 'virtue', 50, 'Max', 'save', true, 5);
    addNewAchievement(9007, 'Yay, Credits!', '< Secret Achievement >', 'support', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9008, 'Walked Through', '< Secret Achievement >', 'walkthru', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9009, 'Destroyer of Forests', '< Secret Achievement >', 'forestDestroyer', 50, 'Max', 'save', true, 10);
    addNewAchievement(9010, 'Greedy', '< Secret Achievement >', 'greed', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9011, 'LOL BUG?', '< Secret Achievement >', 'lolBug', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9012, 'Perfectionist', '< Secret Achievement >', 'perfectionist', 3, 'Max', 'save', true, 15);
    addNewAchievement(9013, 'Immortality', '< Secret Achievement >', 'immortality', 100, 'Max', 'save', true, 10);
    addNewAchievement(9014, 'Survivor', '< Secret Achievement >', 'survivor', 1337, 'Max', 'save', true, 20);
    addNewAchievement(9015, 'Failproof', '< Secret Achievement >', 'failproof', 1337, 'Max', 'save', true, 10);
    addNewAchievement(9016, '\'I Ain\'t Afraid of No Ghosts!\'', '< Secret Achievement >', 'randomGhost', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9017, 'Serious Business', '< Secret Achievement >', 'seriousBusiness', 50, 'Max', 'save', true, 5);
    addNewAchievement(9018, 'Now It\'s Useless!', '< Secret Achievement >', 'nowUseless', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9019, 'Necronomnomnomiconquerer', '< Secret Achievement >', 'fcgLevel7', 21, 'Max', 'save', true, 15);
    addNewAchievement(9020, 'Still Doing It?', '< Secret Achievement >', 'buttonPress', 102400, 'Max', 'save', true, 10);
    addNewAchievement(9021, 'Now You\'re A Hero', '< Secret Achievement >', 'zoneKill14', 1, 'Max', 'root', true, 10);
    addNewAchievement(9022, 'Max Combo!', '< Secret Achievement >', 'arenaMaxCombo', 9999, 'Max', 'save', true, 15);
    addNewAchievement(9023, 'Secret Title Changer', '< Secret Achievement >', 'mbma', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9024, 'This One is Obvious', '< Secret Achievement >', 'zoneKill21', 1337, 'Max', 'root', true, 15);
    addNewAchievement(9025, 'RickRoll\'d', '< Secret Achievement >', 'rick', 1337, 'Max', 'save', true, 15);
    addNewAchievement(9026, 'Nightmare', '< Secret Achievement >', 'nightmare', 1337, 'Max', 'save', true, 10);
    addNewAchievement(9027, 'Level 11 Reached!', '< Secret Achievement >', 'fcgLevel', 11, 'Max', 'save', true, 15);
    addNewAchievement(9028, 'Helpful', '< Secret Achievement >', 'arenaMission', 100, 'Max', 'save', true, 15);
    addNewAchievement(9029, 'No Help For You', '< Secret Achievement >', 'noHelp', 1337, 'Max', 'save', true, 10);
    addNewAchievement(9030, 'Wrong Game?', '< Secret Achievement >', 'aceFinish', 1337, 'Max', 'save', true, 10);
    addNewAchievement(9031, 'Chuck Norris', '< Secret Achievement >', 'chuckNorris', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9032, 'Pacifist', '< Secret Achievement >', 'pacifist', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9033, 'No Death', '< Secret Achievement >', 'noDeath', 1337, 'Max', 'save', true, 10);
    addNewAchievement(9034, 'Wake Up', '< Secret Achievement >', 'wakeUp', 1337, 'Max', 'save', true, 5);
    addNewAchievement(9035, 'Ascended', '< Secret Achievement >', 'banned', 1, 'Max', 'save', true, 30);
    addNewAchievement(9036, 'Rebirthed', '< Secret Achievement >', 'bannedB', 1, 'Max', 'save', true, 25);
    addNewQuest(false, false, true, 1, 201, 1, 0, 0, 'Attendance Gift', 'Play Anti-Idle: The Game for ', ' consecutive days!', 'consecutiveDays', 'save', 2, 10, 50, 100, 5, 5);
    addNewQuest(false, false, true, 2, 201, 1, 0, 0, 'Level Up Gift', 'Reach level ', '.', 'bestLevel', 'save', 2, 1000, 5000, 9001, 5, 5);
    addNewQuest(false, false, true, 3, 201, 1, 510, 1, 'Ascension Gift', 'Ascend ', ' time(s).', 'banned', 'save', 1, 2, 3, 4, 5, 5);
    addNewQuest(false, false, true, 11, 202, 35, 350, 1, 'Press the Button!', 'Press the Button Machine ', ' times today.', 'buttonPressToday', 'save', 500, 2500, 10000, 50000, 5, 5);
    addNewQuest(false, false, true, 12, 203, 50, 360, 1, 'Dragon Buffet', 'Feed the Dragon of Wisdom ', ' times today.', 'feedToday', 'save', 50, 150, 300, 500, 5, 5);
    addNewQuest(false, false, true, 17, 204, 80, 0, 0, 'Arcade!', 'Reach ', '% of Gold score in the Arcade today.', 'arcadeTodayPercent', 'save', 40, 70, 100, 130, 10, 10);
    addNewQuest(false, false, true, 13, 205, 180, 392, 1, 'Death Match!', 'Achieve a high score of ', ' PWNts in Death Match today.', 'stadiumTodayDeathMatch', 'save', 400, 600, 800, 1000, 10, 10);
    addNewQuest(false, false, true, 14, 206, 750, 490, 1, 'Fishing!', 'Gain ', ' score in Fishing today.', 'fishScoreToday', 'save', 500000, 2500000, 10000000, 50000000, 10, 10);
    addNewQuest(false, false, true, 15, 207, 1000, 313, 1, 'Corruption Cleansing', 'Defeat ', ' monsters in The Corruption today.', 'arenaCorruptToday', 'save', 100, 500, 1250, 2500, 10, 10);
    addNewQuest(false, false, true, 16, 208, 25, 315, 1, 'Spooky Crypt', 'Reach a high score of ', ' in Spooky Crypt today.', 'arenaSpookyToday', 'save', 200, 500, 1000, 2000, 10, 10);
    addNewQuest(false, false, false, 101, 2, 1, 0, 0, '[Level] Level Up!', 'Reach level ', '.', 'bestLevel', 'save', 50, 150, 300, 500, 50, 0);
    addNewQuest(false, false, false, 102, 2, 1, 101, 4, '[Level] Level Up More!', 'Reach level ', '.', 'bestLevel', 'save', 1500, 3500, 6000, 9001, 1000, 0);
    addNewQuest(false, false, false, 110, 3, 1, 0, 0, '[Achievement] Achievements!', 'Earn a total of ', ' Achievements.', 'maxAchievement', 'save', 100, 400, 550, 630, 2500, 0);
    addNewQuest(false, false, false, 120, 4, 1, 0, 0, '[Quest] C-Rank', 'Get C-Rank or higher on ', ' quests (daily quests and event quests excluded).', 'mainQuestC', 'save', 30, 60, 90, 120, 500, 0);
    addNewQuest(false, false, false, 121, 4, 1, 120, 1, '[Quest] B-Rank', 'Get B-Rank or higher on ', ' quests (daily quests and event quests excluded).', 'mainQuestB', 'save', 30, 60, 90, 120, 1000, 0);
    addNewQuest(false, false, false, 122, 4, 1, 121, 1, '[Quest] A-Rank', 'Get A-Rank or higher on ', ' quests (daily quests and event quests excluded).', 'mainQuestA', 'save', 30, 60, 90, 120, 2000, 0);
    addNewQuest(false, false, false, 123, 4, 1, 122, 1, '[Quest] S-Rank', 'Get S-Rank on ', ' quests (daily quests and event quests excluded).', 'mainQuestS', 'save', 30, 60, 90, 120, 4000, 0);
    addNewQuest(false, false, false, 124, 5, 1, 0, 0, '[Quest] Random Quests', 'Complete a total of ', ' Random Quests.', 'questTotal', 'save', 20, 100, 500, 2500, 2000, 0);
    addNewQuest(false, false, false, 130, 6, 1, 0, 0, '[Money] Coins', 'Save up a total of ', ' Coins.', 'coinMax', 'save', 100000, 15000000, 7500000000.0, 999999999999.0, 250, 0);
    addNewQuest(false, false, false, 131, 7, 1, 0, 0, '[Money] Green Coins', 'Save up a total of ', ' Green Coins.', 'greenCoinMax', 'save', 3000, 250000, 10000000, 999999999, 250, 0);
    addNewQuest(false, false, false, 132, 8, 1, 0, 0, '[Money] Blue Coins', 'Save up a total of ', ' Blue Coins.', 'blueCoinMax', 'save', 300, 7500, 50000, 999999, 500, 0);
    addNewQuest(false, false, false, 140, 9, 1, 0, 0, '[Progress] Claim Rewards!', 'Claim ', ' rewards from the Progress Bar.', 'rewardClaim', 'save', 15, 1500, 75000, 1500000, 100, 0);
    addNewQuest(false, false, false, 141, 10, 1, 0, 0, '[Progress] Idle Mode', 'Claim ', ' rewards from the Progress Bar when Idle Mode is ON.', 'rewardClaimAuto', 'save', 5, 750, 37500, 750000, 100, 0);
    addNewQuest(false, false, false, 142, 11, 1, 141, 1, '[Progress] Idle Mode Speed', 'Visit the Feature Shop and upgrade Idle Mode Speed to ', '%.', 'progSpeedAuto', 'save', 31, 100, 125, 150, 50, 0);
    addNewQuest(false, false, false, 145, 12, 1, 0, 0, '[Mystery Box] Open Boxes', 'Open ', ' Legendary Boxes.', 'legendaryBoxOpened', 'save', 5, 50, 500, 5000, 250, 0);
    addNewQuest(false, false, false, 150, 13, 4, 0, 0, '[Boost] Boost!', 'Gain a total of ', '% Boost.', 'boostPurchased', 'save', 400, 10000, 100000, 1000000, 50, 0);
    addNewQuest(false, false, false, 151, 14, 4, 150, 1, '[Boost] Maximum Boost', 'Raise your Max Boost to ', '%.', 'boostMax', 'root', 501, 1000, 1500, 2000, 500, 0);
    addNewQuest(false, false, false, 160, 16, 12, 0, 0, '[Garden] Harvest Trees!', 'Harvest trees in the Garden and reach ', ' Garden EXP.', 'gardenEXP', 'save', 25, 10000, 400000, 16000000, 500, 0);
    addNewQuest(false, false, false, 161, 17, 12, 160, 1, '[Garden] Garden Expansion', 'Expand your Garden to ', ' plots.', 'gardenCapacity', 'save', 2, 10, 25, 50, 100, 0);
    addNewQuest(false, false, false, 162, 18, 12, 161, 3, '[Garden] Another Garden', 'Breed a total of ', ' seeds in Another Garden.', 'gardenBreedTotal', 'save', 20, 500, 5000, 50000, 100, 0);
    addNewQuest(false, false, false, 170, 19, 25, 0, 0, '[Arena] Kill Everything!', 'Defeat ', ' monsters in the Battle Arena.', 'arenaKill', 'save', 50, 10000, 200000, 4000000, 50, 0);
    addNewQuest(false, false, false, 171, 20, 25, 170, 1, '[Arena] Powerful Monsters', 'Defeat ', ' red-named monsters or bosses in the Battle Arena.', 'arenaKillRed', 'save', 25, 5000, 100000, 2000000, 50, 0);
    addNewQuest(false, false, false, 172, 21, 25, 170, 1, '[Arena] Boss Hunt', 'Defeat ', ' boss monsters in the Battle Arena.', 'arenaKillPurple', 'save', 10, 1000, 25000, 500000, 50, 0);
    addNewQuest(false, false, false, 173, 22, 25, 170, 1, '[Arena] Rare Monsters', 'Defeat ', ' rare monsters in the Battle Arena.', 'arenaKillRare', 'save', 5, 500, 10000, 250000, 50, 0);
    addNewQuest(false, false, false, 174, 23, 25, 173, 1, '[Arena] Epic Monsters', 'Defeat ', ' epic monsters in the Battle Arena.', 'arenaKillEpic', 'save', 2, 100, 2500, 50000, 100, 0);
    addNewQuest(false, false, false, 180, 24, 25, 170, 1, '[Arena] Loot', 'Collect a total of ', ' loot drops in the Battle Arena.', 'arenaLoot', 'save', 50, 2500, 50000, 1000000, 100, 0);
    addNewQuest(false, false, false, 190, 25, 25, 170, 1, '[Arena] Combo', 'Reach a Combo of ', ' in the Battle Arena.', 'arenaMaxCombo', 'save', 100, 500, 2500, 9999, 25, 0);
    addNewQuest(false, false, false, 200, 26, 25, 170, 1, '[Arena] Rank Up!', 'Reach a Rank of ', ' in the Battle Arena.', 'arenaLevel', 'save', 10, 30, 70, 120, 25, 0);
    addNewQuest(false, false, false, 201, 26, 25, 200, 4, '[Arena] Rank Up More!', 'Reach a Rank of ', ' in the Battle Arena.', 'arenaLevel', 'save', 180, 250, 350, 500, 250, 0);
    addNewQuest(false, false, false, 210, 27, 25, 170, 1, '[Arena] Skills!', 'Spend a total of ', ' Skill Points in the Battle Arena.', 'arenaTotalSP', 'save', 28, 1120, 7500, 9000, 100, 0);
    addNewQuest(false, false, false, 211, 28, 25, 201, 4, '[Arena] Extra SP', 'Collect extra Skill Points from monsters ', ' times.', 'arenaUltimateSP', 'save', 5, 50, 100, 150, 100, 0);
    addNewQuest(false, false, false, 212, 29, 25, 210, 2, '[Arena] Skill Books', 'Collect a total of ', ' Skill Books in the Battle Arena.', 'arenaSkillBook', 'save', 10, 500, 1000, 1240, 500, 0);
    addNewQuest(false, false, false, 220, 30, 25, 200, 1, '[Arena] Crafting!', 'Use a total of ', ' Crafting Material to craft items.', 'arenaCraftUsed', 'save', 1000, 2000000, 50000000, 1000000000, 50, 0);
    addNewQuest(false, false, false, 230, 31, 25, 220, 1, '[Arena] Item Enhancement', 'Enhance ', ' items to +10.', 'arenaMaxEnhance', 'save', 2, 10, 25, 100, 50, 0);
    addNewQuest(false, false, false, 240, 32, 25, 200, 1, '[Arena] Stat Upgrade!', 'Increase your base Attack Power to ', '.', 'arenaAttack', 'save', 500, 25000, 65000, 90000, 50, 0);
    addNewQuest(false, false, false, 250, 33, 25, 200, 1, '[Arena] Rings', 'Have a total of ', ' different Rings at the same time.', 'totalRing', 'root', 4, 14, 16, 22, 25, 0);
    addNewQuest(false, false, false, 260, 34, 25, 200, 2, '[Arena] Bestiary', 'Reach a total Bestiary Level of ', ' in the Battle Arena.', 'bestiaryLevel', 'root', 250, 750, 1500, 2000, 500, 0);
    addNewQuest(false, false, false, 270, 35, 25, 200, 2, '[Arena] Invisible Ally <1>', 'Tame a total of ', ' Invisible Allies.', 'totalAllyTamed', 'root', 10, 150, 300, 500, 250, 0);
    addNewQuest(false, false, false, 271, 36, 25, 270, 1, '[Arena] Invisible Ally <2>', 'Master a total of ', ' Invisible Allies.', 'totalAllyMastered', 'root', 10, 150, 300, 500, 500, 0);
    addNewQuest(false, false, false, 280, 37, 25, 200, 2, '[Arena] Robacon', 'Have a Rank ', ' Robacon.', 'robaconLevel', 'save', 50, 200, 350, 500, 250, 0);
    addNewQuest(false, false, false, 300, 38, 25, 170, 1, '[Arena] Mission Kommander', 'Finish Mission Kommander\'s mission ', ' times.', 'arenaKommanderComplete', 'save', 2, 25, 150, 500, 100, 0);
    addNewQuest(false, false, false, 301, 39, 25, 200, 3, '[Arena] Defend Mission', 'Reach a high score of ', ' in Defend Mission.', 'raidDefend', 'save', 60000, 150000, 240000, 300000, 100, 0);
    addNewQuest(false, false, false, 302, 40, 25, 200, 3, '[Arena] Prehistoric Mission', 'Reach a high score of ', ' in Prehistoric Mission.', 'raidPrehistoric', 'save', 240000, 480000, 540000, 600000, 100, 0);
    addNewQuest(false, false, false, 310, 41, 25, 200, 1, '[Arena] Epic Pyramid Battle', 'Reach a high score of ', ' in Dark Pyramid.', 'raidPyramid', 'save', 250000, 1000000, 5000000, 25000000, 100, 0);
    addNewQuest(false, false, false, 311, 42, 25, 200, 4, '[Arena] The New Boss', 'Reach a high score of ', ' in The Special Arena.', 'raidMegaboss', 'save', 180000, 315000, 410000, 460000, 250, 0);
    addNewQuest(false, false, false, 312, 43, 25, 311, 1, '[Arena] The Revenge', 'Reach round ', ' in THE MEGABOSS\'s Revenge.', 'arenaRevengeScore', 'save', 10, 30, 60, 100, 250, 0);
    addNewQuest(false, false, false, 313, 44, 1000, 170, 1, '[Arena] The Corruption', 'Encounter a Lv. ', ' monster in The Corruption. (Level is based on Casual)', 'arenaCorruptScore', 'save', 2000, 4000, 6000, 8000, 250, 0);
    addNewQuest(false, false, false, 314, 45, 25, 201, 1, '[Arena] Tower of DOOOOOOM', 'Reach a high score of ', ' in Tower of DOOOOOOM.', 'raidTower', 'save', 1000000000, 5000000000.0, 10000000000.0, 15000000000.0, 250, 0);
    addNewQuest(false, false, false, 315, 46, 25, 201, 1, '[Arena] Spooky Crypt', 'Reach a high score of ', ' in Spooky Crypt.', 'arenaSpookyScore', 'save', 200, 500, 1000, 2000, 250, 0);
    addNewQuest(false, false, false, 316, 47, 25, 201, 2, '[Arena] Secret Dungeon', 'Reach a high score of ', ' in Secret Dungeon.', 'raidDungeon', 'save', 1100, 1800, 2500, 3200, 500, 0);
    addNewQuest(false, false, false, 317, 121, 25, 201, 2, '[Arena] Endless Dungeon', 'Reach floor ', ' in Endless Dungeon.', 'raidEndless', 'save', 2, 10, 20, 30, 500, 0);
    addNewQuest(false, false, false, 320, 48, 25, 200, 1, '[Arena] Polluted Sky', 'Defeat ', ' monsters in Polluted Sky.', 'zoneKill15', 'root', 200, 1000, 5000, 25000, 25, 0);
    addNewQuest(false, false, false, 321, 49, 25, 200, 1, '[Arena] Secret Beach', 'Defeat ', ' monsters in Secret Beach.', 'zoneKill16', 'root', 500, 2000, 10000, 50000, 25, 0);
    addNewQuest(false, false, false, 322, 50, 25, 200, 2, '[Arena] Scary Graveyard', 'Defeat ', ' monsters in Scary Graveyard.', 'zoneKill17', 'root', 100, 500, 2500, 10000, 25, 0);
    addNewQuest(false, false, false, 323, 51, 25, 200, 2, '[Arena] Mystic Path', 'Defeat ', ' monsters in Mystic Path.', 'zoneKill21', 'root', 50, 200, 1000, 5000, 25, 0);
    addNewQuest(false, false, false, 324, 52, 25, 200, 3, '[Arena] Volcano Peak', 'Defeat ', ' monsters in Volcano Peak.', 'zoneKill26', 'root', 50, 200, 1000, 5000, 25, 0);
    addNewQuest(false, false, false, 325, 53, 25, 200, 3, '[Arena] Frosty Zone', 'Defeat ', ' monsters in Frosty Zone.', 'zoneKill27', 'root', 50, 200, 1000, 5000, 25, 0);
    addNewQuest(false, false, false, 326, 54, 25, 200, 3, '[Arena] Advanced Training', 'Defeat ', ' Treasure Hunters in Pirate Ship Interior.', 'treasureHunterKill', 'root', 10, 100, 1000, 10000, 50, 0);
    addNewQuest(false, false, false, 327, 55, 25, 200, 4, '[Arena] The Guardian', 'Defeat ', ' monsters in Dark Portal.', 'zoneKill18', 'root', 50, 200, 1000, 5000, 50, 0);
    addNewQuest(false, false, false, 328, 56, 25, 326, 3, '[Arena] Rofltrainer\'s Secret', 'Find ', ' Roflhunter\'s Pendants.', 'roflPendant', 'save', 2, 10, 60, 200, 100, 0);
    addNewQuest(false, false, false, 330, 58, 25, 201, 2, '[Arena] Copy, Right?', 'Defeat ', ' monsters in Not Copyright Infringement.', 'zoneKill49', 'root', 5000, 20000, 100000, 500000, 100, 0);
    addNewQuest(false, false, false, 331, 59, 25, 330, 1, '[Arena] Censorship', 'Defeat ', ' monsters in Censor Ship.', 'zoneKill57', 'root', 2500, 10000, 50000, 250000, 100, 0);
    addNewQuest(false, false, false, 332, 60, 1000, 201, 2, '[Arena] Corrupt... oh wait', 'Defeat Corrupted Giant Treeman ', ' times.', 'zoneKill59', 'root', 2, 5, 15, 50, 250, 0);
    addNewQuest(false, false, false, 340, 61, 25, 200, 2, '[Arena] Mining', 'Defeat ', ' Secret Crystals.', 'crystalKill', 'root', 25, 250, 2500, 25000, 100, 0);
    addNewQuest(false, false, false, 329, 57, 25, 201, 4, '[Arena] Abandoned Lab', 'Defeat ', ' monsters in Abandoned Lab.', 'zoneKill61', 'root', 50, 100, 150, 200, 100, 0);
    addNewQuest(false, false, false, 345, 121, 25, 201, 4, '[Arena] Rebirth!', 'Rebirth ', ' time(s).', 'bannedB', 'save', 1, 5, 20, 50, 2500, 0);
    addNewQuest(false, false, false, 350, 62, 40, 0, 0, '[Button] Click the Button!', 'Press the Button Machine ', ' times.', 'buttonPress', 'save', 100, 1000, 10000, 100000, 100, 0);
    addNewQuest(false, false, false, 351, 63, 40, 350, 1, '[Button] Perfect Clicks!', 'Get ', ' PERFECT clicks!', 'buttonPerfect', 'save', 5, 50, 500, 5000, 250, 0);
    addNewQuest(false, false, false, 352, 64, 40, 351, 2, '[Button] Button Upgrade', 'Purchase ', '% additional multiplier in Button Machine shop.', 'buttonMultiplier', 'save', 2, 10, 50, 200, 500, 0);
    addNewQuest(false, false, false, 370, 67, 40, 0, 0, '[Printer] Battery Charge', 'Charge a total of ', ' Battery Power.', 'totalPrinterCharge', 'save', 100, 2500, 50000, 1000000, 100, 0);
    addNewQuest(false, false, false, 371, 68, 40, 0, 0, '[Printer] More Illegal Money!', 'Upgrade the Money Printer to level ', '.', 'printerLevel', 'save', 3, 10, 30, 100, 100, 0);
    addNewQuest(false, false, false, 360, 65, 50, 0, 0, '[Dragon] Knowledge is Power', 'Feed the Dragon of Wisdom ', ' times.', 'feedTotal', 'save', 200, 1000, 5000, 25000, 500, 0);
    addNewQuest(false, false, false, 361, 66, 50, 0, 0, '[Dragon] Dragon Boost!', 'Gain a total of ', '% Dragon Boost.', 'boostZebra', 'save', 10, 50, 150, 300, 500, 0);
    addNewQuest(false, false, false, 389, 69, 80, 0, 0, '[Arcade] Daily Prize', 'Get ', ' Blue Coins from Daily Prize in Arcade in a single day.', 'arcadeHighTrade', 'save', 100, 500, 2000, 15000, 1000, 0);
    addNewQuest(false, false, false, 380, 70, 80, 0, 0, '[Arcade] Pong', 'Get a high score of ', ' in Pong.', 'highPong', 'save', 300000, 700000, 1500000, 3000000, 100, 0);
    addNewQuest(false, false, false, 381, 71, 80, 0, 0, '[Arcade] Ultimate Avoidance', 'Get a high score of ', ' in Ultimate Avoidance.', 'highAvoidance', 'save', 200000, 400000, 600000, 900000, 100, 0);
    addNewQuest(false, false, false, 382, 72, 80, 0, 0, '[Arcade] Math Master', 'Get a high score of ', ' in Math Master.', 'highMath', 'save', 150000, 350000, 700000, 1500000, 100, 0);
    addNewQuest(false, false, false, 383, 73, 80, 0, 0, '[Arcade] Whack-a-greg', 'Get a high score of ', ' in Whack-a-greg.', 'highWhack', 'save', 1000000, 1500000, 1900000, 2250000, 100, 0);
    addNewQuest(false, false, false, 386, 74, 80, 0, 0, '[Arcade] Triangle Count', 'Get a high score of ', ' in Triangle Count.', 'highCount', 'save', 900000, 2000000, 3500000, 5400000, 100, 0);
    addNewQuest(false, false, false, 384, 75, 80, 0, 0, '[Arcade] MindSweeper', 'Get a high score of ', ' in MindSweeper.', 'highMind', 'save', 400000, 1000000, 1500000, 2000000, 250, 0);
    addNewQuest(false, false, false, 385, 76, 80, 0, 0, '[Arcade] Balance 3', 'Get a high score of ', ' in Balance 3.', 'highBalance', 'save', 600000, 1500000, 2500000, 4000000, 250, 0);
    addNewQuest(false, false, false, 390, 77, 180, 0, 0, '[Stadium] Simple Race', 'Win Simple Race ', ' times.', 'stadiumRace', 'save', 2, 25, 150, 500, 100, 0);
    addNewQuest(false, false, false, 391, 78, 180, 0, 0, '[Stadium] Item Fight', 'Win Item Fight ', ' times.', 'stadiumItem', 'save', 2, 25, 150, 500, 100, 0);
    addNewQuest(false, false, false, 392, 79, 180, 0, 0, '[Stadium] Death Match', 'Win Death Match ', ' times.', 'stadiumDeathMatch', 'save', 2, 5, 10, 25, 250, 0);
    addNewQuest(false, false, false, 393, 80, 180, 0, 0, '[Stadium] Bet', 'Win ', ' bets in Stadium.', 'stadiumBetCorrect', 'save', 2, 5, 15, 50, 50, 0);
    addNewQuest(false, false, false, 394, 81, 180, 0, 0, '[Stadium] Upgrade!', 'Upgrade your Stadium abilities ', ' times.', 'stadiumAbilityCost', 'save', 50, 100, 200, 400, 100, 0);
    addNewQuest(false, false, false, 400, 82, 300, 0, 0, '[TukkunFCG] TukkunFCG!', 'Reach level ', ' in TukkunFCG.', 'fcgLevel', 'save', 3, 16, 31, 51, 1000, 0);
    addNewQuest(false, false, false, 401, 83, 300, 0, 0, '[TukkunFCG] Lv. 0 Opponent', 'Beat level 0 opponent ', ' times in TukkunFCG.', 'fcgLevel0', 'save', 2, 5, 10, 25, 25, 0);
    addNewQuest(false, false, false, 402, 84, 300, 0, 0, '[TukkunFCG] Lv. 1 Opponent', 'Beat level 1 opponent ', ' times in TukkunFCG.', 'fcgLevel1', 'save', 2, 5, 10, 25, 25, 0);
    addNewQuest(false, false, false, 403, 85, 300, 0, 0, '[TukkunFCG] Lv. 2 Opponent', 'Beat level 2 opponent ', ' times in TukkunFCG.', 'fcgLevel2', 'save', 2, 5, 10, 25, 25, 0);
    addNewQuest(false, false, false, 404, 86, 300, 400, 1, '[TukkunFCG] Lv. 3 Opponent', 'Get a win streak of ', ' against level 3 opponent in TukkunFCG.', 'fcgMaxStreak3', 'save', 2, 5, 10, 20, 50, 0);
    addNewQuest(false, false, false, 405, 87, 300, 400, 1, '[TukkunFCG] Lv. 4 Opponent', 'Get a win streak of ', ' against level 4 opponent in TukkunFCG.', 'fcgMaxStreak4', 'save', 2, 5, 10, 20, 50, 0);
    addNewQuest(false, false, false, 406, 88, 300, 400, 1, '[TukkunFCG] Kong Battle!', 'Beat level 5 opponent ', ' times in TukkunFCG.', 'fcgLevel5', 'save', 2, 10, 60, 200, 100, 0);
    addNewQuest(false, false, false, 407, 89, 300, 400, 1, '[TukkunFCG] Lv. 6 Opponent', 'Get a win streak of ', ' against level 6 opponent in TukkunFCG.', 'fcgMaxStreak6', 'save', 2, 5, 10, 20, 100, 0);
    addNewQuest(false, false, false, 408, 90, 300, 400, 1, '[TukkunFCG] Lv. 7 Opponent', 'Beat level 7 opponent ', ' times in TukkunFCG.', 'fcgLevel7', 'save', 2, 10, 60, 200, 250, 0);
    addNewQuest(false, false, false, 409, 91, 300, 400, 1, '[TukkunFCG] Lv. 8 Opponent', 'Get a win streak of ', ' against level 8 opponent in TukkunFCG.', 'fcgMaxStreak8', 'save', 2, 5, 10, 20, 250, 0);
    addNewQuest(false, false, false, 410, 92, 300, 400, 1, '[TukkunFCG] Lv. 9 Opponent', 'Defeat ', ' Legendary Monsters in TukkunFCG.', 'fcgLegendCount', 'save', 2, 5, 10, 25, 500, 0);
    addNewQuest(false, false, false, 411, 93, 300, 400, 1, '[TukkunFCG] Lv. 10 Opponent', 'Beat level 10 opponent ', ' times in TukkunFCG.', 'fcgLevel10', 'save', 2, 10, 60, 200, 500, 0);
    addNewQuest(false, false, false, 420, 94, 250, 0, 0, '[Ants] Spray Ants!', 'Spray a total of ', ' ants!', 'antsSprayed', 'save', 100, 2500, 50000, 1000000, 250, 0);
    addNewQuest(false, false, false, 430, 95, 400, 0, 0, '[LolMarket] ???', 'Gain a total of ', ' Profit in LolMarket', 'lolMaxProfit', 'save', 942961, 15948841, 160540736, 2500000000.0, 2500, 0);
    addNewQuest(false, false, false, 440, 96, 500, 0, 0, '[Adventures] Reputation', 'Reach ', ' Reputation in Awesome Adventures.', 'awesomeMaxReputation', 'save', 100, 1000, 10000, 100000, 1000, 0);
    addNewQuest(false, false, false, 445, 97, 500, 131, 2, '[Adventures] Bar Extension', 'Extend your Progress Bar Capacity to ', '%.', 'progStore', 'save', 200, 500, 2000, 5000, 1000, 0);
    addNewQuest(false, false, false, 450, 98, 1000, 0, 0, '[Epic Skills] Epic Ripoffs?', 'Reach a total Epic Skill level of ', '.', 'totalEpicSkill', 'root', 20, 60, 120, 132, 500, 0);
    addNewQuest(false, false, false, 460, 99, 700, 0, 0, '[Career] Career Introduction', 'Reach a total Career level of ', '.', 'totalCareerLevel', 'root', 100, 500, 1000, 1200, 500, 0);
    addNewQuest(false, false, false, 470, 100, 700, 460, 1, '[Career] Idler', 'Reach Lv. ', ' Idler Career.', 'careerLevel1', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 471, 101, 700, 460, 1, '[Career] Gardener', 'Reach Lv. ', ' Gardener Career.', 'careerLevel2', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 472, 102, 700, 460, 1, '[Career] Fighter', 'Reach Lv. ', ' Fighter Career.', 'careerLevel3', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 473, 103, 700, 460, 1, '[Career] Item Maker', 'Reach Lv. ', ' Item Maker Career.', 'careerLevel4', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 474, 104, 700, 460, 1, '[Career] Button Basher', 'Reach Lv. ', ' Button Basher Career.', 'careerLevel5', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 475, 105, 700, 460, 1, '[Career] Arcade Player', 'Reach Lv. ', ' Arcade Player Career.', 'careerLevel6', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 476, 106, 700, 460, 1, '[Career] Racer', 'Reach Lv. ', ' Racer Career.', 'careerLevel7', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 477, 107, 700, 460, 1, '[Career] Card Player', 'Reach Lv. ', ' Card Player Career.', 'careerLevel8', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 478, 108, 700, 460, 1, '[Career] Gem Trader', 'Reach Lv. ', ' Gem Trader Career.', 'careerLevel9', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 479, 109, 700, 460, 1, '[Career] Adventurer', 'Reach Lv. ', ' Adventurer Career.', 'careerLevel10', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 480, 110, 900, 460, 1, '[Career] Pet Trainer', 'Reach Lv. ', ' Pet Trainer Career.', 'careerLevel11', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 481, 111, 750, 460, 1, '[Career] Fisher', 'Reach Lv. ', ' Fisher Career.', 'careerLevel12', 'root', 10, 30, 60, 100, 100, 0);
    addNewQuest(false, false, false, 490, 112, 750, 0, 0, '[Fishing] Fishing GET!', 'Catch a total of ', ' items in Fishing.', 'fishTotal', 'save', 100, 1000, 5000, 25000, 100, 0);
    addNewQuest(false, false, false, 491, 113, 750, 490, 1, '[Fishing] Perfect Catches', 'Get ', ' PERFECT catches in Fishing.', 'fishPerfect', 'save', 50, 500, 2500, 10000, 250, 0);
    addNewQuest(false, false, false, 492, 114, 750, 490, 1, '[Fishing] Skill Up!', 'Reach Fishing Skill ', '.', 'fishLevel', 'save', 4, 10, 20, 30, 500, 0);
    addNewQuest(false, false, false, 493, 115, 750, 490, 1, '[Fishing] Bucket Upgrade', 'Upgrade your Bucket Capacity to ', '.', 'fishCapacity', 'save', 5000, 7500, 12500, 17500, 50, 0);
    addNewQuest(false, false, false, 500, 116, 900, 0, 0, '[Pet] Raise a Pet!', 'Raise a Pet to Lv. ', '.', 'petBestLevel', 'save', 10, 30, 60, 100, 500, 0);
    addNewQuest(false, false, false, 600, 117, 1000, 0, 0, '[Business] Go to Work!', 'Gain a total of ', ' Career EXP from Business.', 'businessTotal', 'save', 1000, 25000, 500000, 10000000, 500, 0);
    addNewQuest(false, false, false, 510, 118, 9000, 0, 0, '[Ascend] Ascend!', 'Ascend ', ' time(s).', 'banned', 'save', 1, 5, 20, 50, 2500, 0);
    addNewQuest(false, false, false, 511, 119, 9000, 510, 2, '[Ascend] Hard Ascension', 'Ascend on Hard or Impossible difficulty ', ' time(s).', 'bannedHard', 'save', 1, 5, 10, 25, 2500, 0);
    addNewQuest(false, false, false, 512, 120, 9000, 510, 2, '[Ascend] Impossible Ascension', 'Ascend on Impossible difficulty ', ' time(s).', 'bannedImpossible', 'save', 1, 2, 5, 10, 2500, 0);
    addRandomQuest(1, 1, 2, 1, 'Progress Box', 4, 25, 25, 'Main', 'Claim Reward', 'Any', 100, 'Claim', 'rewards from the Progress Bar.');
    addRandomQuest(0.9, 2, 3, 1, 'Progress Box', 6, 50, 50, 'Main', 'Claim Reward', 'Any', 500, 'Claim', 'rewards from the Progress Bar.');
    addRandomQuest(0.8, 3, 4, 1, 'Progress Box', 8, 100, 100, 'Main', 'Claim Reward', 'Any', 2500, 'Claim', 'rewards from the Progress Bar.');
    addRandomQuest(1, 1, 2, 1, 'Progress Box', 6, 50, 25, 'Main', 'Claim Reward', 'No Idle Mode', 50, 'Claim', 'rewards without Idle Mode.');
    addRandomQuest(0.9, 2, 3, 1, 'Progress Box', 8, 100, 50, 'Main', 'Claim Reward', 'No Idle Mode', 250, 'Claim', 'rewards without Idle Mode.');
    addRandomQuest(0.8, 3, 4, 1, 'Progress Box', 10, 200, 100, 'Main', 'Claim Reward', 'No Idle Mode', 1250, 'Claim', 'rewards without Idle Mode.');
    addRandomQuest(0.2, 2, 2, 50, 'Legendary Box', 1, 50, 50, 'Main', 'Dragon of Wisdom', 'Feed', 10, 'Feed the Dragon of Wisdom', 'times.');
    addRandomQuest(0.1, 3, 3, 50, 'Legendary Box', 2, 100, 100, 'Main', 'Dragon of Wisdom', 'Feed', 50, 'Feed the Dragon of Wisdom', 'times.');
    addRandomQuest(1, 1, 2, 12, 'Fertilizer', 2, 50, 25, 'Garden', 'Harvest', 'Any', 25, 'Harvest from trees', 'times.');
    addRandomQuest(0.9, 2, 3, 12, 'Fertilizer', 3, 100, 50, 'Garden', 'Harvest', 'Any', 100, 'Harvest from trees', 'times.');
    addRandomQuest(0.8, 3, 4, 12, 'Fertilizer', 4, 200, 100, 'Garden', 'Harvest', 'Any', 500, 'Harvest from trees', 'times.');
    addRandomQuest(0.4, 2, 2, 12, 'Fertilizer', 3, 100, 50, 'Garden', 'Harvest', 'Free Tree', 50, 'Harvest from Free Trees', 'times.');
    addRandomQuest(0.3, 3, 3, 12, 'Fertilizer', 4, 200, 100, 'Garden', 'Harvest', 'Free Tree', 250, 'Harvest from Free Trees', 'times.');
    addRandomQuest(0.4, 2, 2, 12, 'Fertilizer', 3, 100, 50, 'Garden', 'Harvest', 'Blue Tree', 25, 'Harvest from Blue Trees', 'times.');
    addRandomQuest(0.3, 3, 3, 12, 'Fertilizer', 4, 200, 100, 'Garden', 'Harvest', 'Blue Tree', 100, 'Harvest from Blue Trees', 'times.');
    addRandomQuest(0.3, 2, 2, 12, 'Fertilizer', 3, 100, 50, 'Garden', 'Harvest', 'Pink Tree', 10, 'Harvest from Pink Trees', 'times.');
    addRandomQuest(0.2, 3, 3, 12, 'Fertilizer', 4, 200, 100, 'Garden', 'Harvest', 'Pink Tree', 50, 'Harvest from Pink Trees', 'times.');
    addRandomQuest(0.2, 3, 3, 250, 'Fertilizer', 4, 200, 100, 'Garden', 'Harvest', 'Green Tree', 25, 'Harvest from Green Trees', 'times.');
    addRandomQuest(0.1, 3, 4, 250, 'Fertilizer', 5, 300, 150, 'Garden', 'Harvest', 'Lime Tree', 10, 'Harvest from Lime Trees', 'times.');
    addRandomQuest(0.1, 4, 5, 250, 'Fertilizer', 6, 400, 200, 'Garden', 'Harvest', 'Yellow Tree', 5, 'Harvest from Yellow Trees', 'times.');
    addRandomQuest(0.1, 4, 5, 2000, 'Mega Fertilizer', 2, 600, 300, 'Garden', 'Harvest', 'Red Tree', 25, 'Harvest from Red Trees', 'times.');
    addRandomQuest(0.1, 4, 5, 2000, 'Mega Fertilizer', 3, 800, 400, 'Garden', 'Harvest', 'Black Tree', 10, 'Harvest from Black Trees', 'times.');
    addRandomQuest(0.4, 3, 3, 2000, 'Mega Fertilizer', 1, 300, 100, 'Garden', 'Harvest', 'Another Garden Tree', 50, 'Harvest from trees in Another Garden', 'times.');
    addRandomQuest(0.3, 4, 4, 2000, 'Mega Fertilizer', 2, 600, 200, 'Garden', 'Harvest', 'Another Garden Tree', 250, 'Harvest from trees in Another Garden', 'times.');
    addRandomQuest(0.3, 3, 3, 2000, 'Mega Fertilizer', 1, 300, 150, 'Garden', 'Breed', 'Ant', 25, 'Get', 'Seeds from breeding in Another Garden.');
    addRandomQuest(0.2, 4, 4, 2000, 'Mega Fertilizer', 2, 600, 300, 'Garden', 'Breed', 'Ant', 100, 'Get', 'Seeds from breeding in Another Garden.');
    addRandomQuest(1, 1, 2, 25, 'Superior Crafting Material', 10, 25, 25, 'Battle Arena', 'Kill', 'Any', 250, 'Kill', 'monsters in Battle Arena.');
    addRandomQuest(0.9, 2, 3, 25, 'Superior Crafting Material', 25, 50, 50, 'Battle Arena', 'Kill', 'Any', 1000, 'Kill', 'monsters in Battle Arena.');
    addRandomQuest(0.8, 3, 4, 25, 'Superior Crafting Material', 50, 100, 100, 'Battle Arena', 'Kill', 'Any', 5000, 'Kill', 'monsters in Battle Arena.');
    addRandomQuest(1, 1, 2, 25, 'Superior Crafting Material', 25, 50, 25, 'Battle Arena', 'Kill', 'Non-Weak', 100, 'Kill', 'monsters in Battle Arena. Yellow-named monsters do not count.');
    addRandomQuest(0.9, 2, 3, 25, 'Superior Crafting Material', 50, 100, 50, 'Battle Arena', 'Kill', 'Non-Weak', 500, 'Kill', 'monsters in Battle Arena. Yellow-named monsters do not count.');
    addRandomQuest(0.8, 3, 4, 25, 'Superior Crafting Material', 100, 200, 100, 'Battle Arena', 'Kill', 'Non-Weak', 2500, 'Kill', 'monsters in Battle Arena. Yellow-named monsters do not count.');
    addRandomQuest(1, 2, 2, 250, 'Superior Crafting Material', 50, 100, 50, 'Battle Arena', 'Kill', 'Strong', 100, 'Kill', 'monsters in Battle Arena. Only red-named monsters and bosses count.');
    addRandomQuest(0.9, 3, 3, 250, 'Superior Crafting Material', 100, 200, 100, 'Battle Arena', 'Kill', 'Strong', 500, 'Kill', 'monsters in Battle Arena. Only red-named monsters and bosses count.');
    addRandomQuest(0.8, 4, 4, 250, 'Superior Crafting Material', 250, 400, 200, 'Battle Arena', 'Kill', 'Strong', 2500, 'Kill', 'monsters in Battle Arena. Only red-named monsters and bosses count.');
    addRandomQuest(1, 2, 2, 250, 'Unobtainium', 10, 150, 50, 'Battle Arena', 'Kill', 'Boss', 50, 'Kill', 'boss monsters in Battle Arena.');
    addRandomQuest(0.9, 3, 3, 250, 'Unobtainium', 25, 300, 100, 'Battle Arena', 'Kill', 'Boss', 250, 'Kill', 'boss monsters in Battle Arena.');
    addRandomQuest(0.8, 4, 4, 250, 'Unobtainium', 50, 600, 200, 'Battle Arena', 'Kill', 'Boss', 1000, 'Kill', 'boss monsters in Battle Arena.');
    addRandomQuest(0.5, 2, 2, 250, 'Crystal of Rarity', 5, 150, 75, 'Battle Arena', 'Kill', 'Rare', 25, 'Kill', 'rare monsters in Battle Arena.');
    addRandomQuest(0.4, 3, 3, 250, 'Crystal of Rarity', 10, 300, 150, 'Battle Arena', 'Kill', 'Rare', 100, 'Kill', 'rare monsters in Battle Arena.');
    addRandomQuest(0.5, 3, 2, 250, 'Crystal of Ultimate Rarity', 5, 450, 150, 'Battle Arena', 'Kill', 'Epic', 25, 'Kill', 'epic monsters in Battle Arena.');
    addRandomQuest(0.4, 4, 3, 250, 'Crystal of Ultimate Rarity', 10, 900, 300, 'Battle Arena', 'Kill', 'Epic', 100, 'Kill', 'epic monsters in Battle Arena.');
    addRandomQuest(0.2, 2, 3, 1000, 'Crystal of Rarity', 10, 100, 50, 'Battle Arena', 'Kill', 'Pyramid', 1000, 'Kill', 'monsters in Dark Pyramid area.');
    addRandomQuest(0.2, 2, 3, 1000, 'Crystal of Rarity', 10, 150, 75, 'Battle Arena', 'Kill', 'Alien', 100, 'Kill', 'aliens in year 9001 or Prehistoric Mission.');
    addRandomQuest(0.1, 3, 4, 1000, 'Crystal of Rarity', 20, 200, 100, 'Battle Arena', 'Kill', 'The Corruption', 100, 'Kill', 'monsters in The Corruption area.');
    addRandomQuest(0.3, 1, 2, 25, 'Crystal of Rarity', 4, 60, 30, 'Battle Arena', 'Kill', 'Master Dummy', 5, 'Defeat [Master Dummy]', 'times.');
    addRandomQuest(0.3, 1, 2, 75, 'Crystal of Rarity', 6, 80, 40, 'Battle Arena', 'Kill', 'Forest Spirit', 5, 'Defeat [Forest Spirit]', 'times.');
    addRandomQuest(0.3, 2, 3, 150, 'Crystal of Rarity', 8, 100, 50, 'Battle Arena', 'Kill', 'Air Spirit', 10, 'Defeat [Air Spirit]', 'times.');
    addRandomQuest(0.3, 2, 3, 325, 'Crystal of Rarity', 10, 120, 60, 'Battle Arena', 'Kill', 'Sand Giant', 10, 'Defeat [Sand Giant]', 'times.');
    addRandomQuest(0.3, 2, 3, 550, 'Crystal of Rarity', 12, 140, 70, 'Battle Arena', 'Kill', 'Water Spirit', 10, 'Defeat [Water Spirit]', 'times.');
    addRandomQuest(0.3, 2, 3, 900, 'Crystal of Rarity', 14, 160, 80, 'Battle Arena', 'Kill', 'Robo Spirit', 10, 'Defeat [Robo Spirit]', 'times.');
    addRandomQuest(0.3, 2, 3, 1250, 'Crystal of Rarity', 16, 180, 90, 'Battle Arena', 'Kill', 'Bloodsurfer', 10, 'Defeat [Bloodsurfer]', 'times.');
    addRandomQuest(0.3, 3, 4, 2000, 'Crystal of Rarity', 18, 240, 120, 'Battle Arena', 'Kill', 'Dark Mage', 25, 'Defeat [Dark Mage]', 'times.');
    addRandomQuest(0.3, 3, 4, 3500, 'Crystal of Rarity', 20, 300, 150, 'Battle Arena', 'Kill', 'Super Triangle', 25, 'Defeat [Super Triangle]', 'times.');
    addRandomQuest(0.2, 3, 1, 1500, 'Crystal of Ultimate Rarity', 8, 400, 100, 'Battle Arena', 'Kill', 'Alien Secret Box', 2, 'Defeat [Alien Secret Box] in Defend Mission', 'times.');
    addRandomQuest(0.2, 3, 2, 2000, 'Crystal of Ultimate Rarity', 10, 500, 125, 'Battle Arena', 'Kill', 'Final Alien', 2, 'Defeat [Final Alien] in Prehistoric Mission', 'times.');
    addRandomQuest(0.2, 3, 3, 3000, 'Crystal of Ultimate Rarity', 12, 600, 150, 'Battle Arena', 'Kill', 'THE MEGABOSS', 5, 'Defeat [THE MEGABOSS] in The Special Arena', 'times.');
    addRandomQuest(0.2, 3, 4, 4000, 'Crystal of Ultimate Rarity', 14, 700, 175, 'Battle Arena', 'Kill', 'Boss of DOOOOOOM', 2, 'Defeat [Boss of DOOOOOOM] in Tower of DOOOOOOM', 'times.');
    addRandomQuest(0.2, 4, 5, 5000, 'Crystal of Ultimate Rarity', 16, 800, 200, 'Battle Arena', 'Kill', 'Chuck Norris', 2, 'Defeat [Chuck Norris] in 2012: Ye Olde Pub', 'times.');
    addRandomQuest(0.2, 4, 5, 6000, 'Crystal of Ultimate Rarity', 20, 1000, 250, 'Battle Arena', 'Kill', 'CHAOS', 5, 'Defeat [CHAOS] in Final Chamber', 'times.');
    addRandomQuest(1, 1, 2, 25, 'Mystery Enhancer', 2, 50, 25, 'Battle Arena', 'Loot', 'Any', 100, 'Collect', 'loot drops in Battle Arena.');
    addRandomQuest(0.9, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Any', 500, 'Collect', 'loot drops in Battle Arena.');
    addRandomQuest(0.8, 3, 4, 25, 'Mystery Enhancer', 5, 200, 100, 'Battle Arena', 'Loot', 'Any', 2500, 'Collect', 'loot drops in Battle Arena.');
    addRandomQuest(0.5, 1, 2, 25, 'Mystery Enhancer', 2, 80, 40, 'Battle Arena', 'Loot', 'Coin', 50, 'Collect', 'Coin loot drops in Battle Arena.');
    addRandomQuest(0.5, 1, 2, 25, 'Mystery Enhancer', 2, 80, 40, 'Battle Arena', 'Loot', 'Green Coin', 50, 'Collect', 'Green Coin loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Blue Coin', 10, 'Collect', 'Blue Coin loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Stat Increase', 50, 'Collect', 'Stat Increase loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Boost', 50, 'Collect', 'Boost loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Pixel', 50, 'Collect', 'Pixel loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 3, 100, 50, 'Battle Arena', 'Loot', 'Crafting Material', 25, 'Collect', 'Crafting Material loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 4, 150, 75, 'Battle Arena', 'Loot', 'Enhancer Fragment', 25, 'Collect', 'Enhancer Fragment loot drops in Battle Arena.');
    addRandomQuest(0.5, 2, 3, 25, 'Mystery Enhancer', 4, 150, 75, 'Battle Arena', 'Loot', 'Superior Crafting Material', 10, 'Collect', 'Superior Crafting Material loot drops in Battle Arena.');
    addRandomQuest(0.4, 3, 4, 250, 'Mystery Enhancer', 5, 200, 100, 'Battle Arena', 'Loot', 'Unobtainium', 10, 'Collect', 'Unobtainium loot drops in Battle Arena.');
    addRandomQuest(0.4, 3, 4, 250, 'Mystery Enhancer', 6, 300, 150, 'Battle Arena', 'Loot', 'To-be-Nerfed Gem', 100, 'Collect', 'To-be-Nerfed Gem loot drops in Battle Arena.');
    addRandomQuest(0.4, 3, 4, 250, 'Mystery Enhancer', 6, 300, 150, 'Battle Arena', 'Loot', 'Crystal of Rarity', 10, 'Collect', 'Crystal of Rarity loot drops in Battle Arena.');
    addRandomQuest(0.3, 4, 5, 250, 'Mystery Enhancer', 8, 400, 200, 'Battle Arena', 'Loot', 'Crystal of Ultimate Rarity', 10, 'Collect', 'Crystal of Ultimate Rarity loot drops in Battle Arena.');
    addRandomQuest(0.3, 4, 5, 5000, 'Mystery Enhancer', 8, 400, 200, 'Battle Arena', 'Loot', 'Chaotic Fragment of Chaos', 25, 'Collect', 'Chaotic Fragment of Chaos loot drops in Battle Arena.');
    addRandomQuest(1, 3, 1, 2500, 'Mystery Enhancer', 6, 300, 100, 'Battle Arena', 'Loot', 'Roflhunter\'s Ring', 1, 'Roflhunter has lost', 'very valuable ring on some sort of island! Find it!');
    addRandomQuest(1, 1, 1, 25, 'Mystery Enhancer', 1, 25, 25, 'Battle Arena', 'Enhance', 'Success', 3, 'Use', 'Enhancers in Battle Arena.');
    addRandomQuest(1, 3, 1, 2500, 'Pirate Sword', 1, 300, 100, 'Battle Arena', 'Special', 'Treasure Map Piece', 4, 'Apparently, the pirates are hiding Treasure Map Pieces somewhere... Find', 'of them!');
    addRandomQuest(0.3, 3, 1, 3000, 'Pixelated Mystery Box', 2, 200, 100, 'Battle Arena', 'Special', 'Spooky Crypt Score', 500, 'Reach a kill streak of', 'in Spooky Crypt.');
    addRandomQuest(0.3, 3, 1, 4000, 'Pixelated Mystery Box', 3, 300, 150, 'Battle Arena', 'Special', 'Spooky Crypt Score', 1000, 'Reach a kill streak of', 'in Spooky Crypt.');
    addRandomQuest(0.3, 4, 1, 5000, 'Pixelated Mystery Box', 4, 400, 200, 'Battle Arena', 'Special', 'Spooky Crypt Score', 2500, 'Reach a kill streak of', 'in Spooky Crypt.');
    addRandomQuest(0.3, 4, 1, 6000, 'Pixelated Mystery Box', 6, 600, 300, 'Battle Arena', 'Special', 'Spooky Crypt Score', 5000, 'Reach a kill streak of', 'in Spooky Crypt.');
    addRandomQuest(0.3, 3, 1, 5000, 'Pixelated Mystery Box', 3, 300, 100, 'Battle Arena', 'Special', 'Secret Dungeon Score', 1400, 'Clear the Secret Dungeon with a score of', 'or higher.');
    addRandomQuest(0.3, 3, 1, 6000, 'Pixelated Mystery Box', 4, 450, 150, 'Battle Arena', 'Special', 'Secret Dungeon Score', 2100, 'Clear the Secret Dungeon with a score of', 'or higher.');
    addRandomQuest(0.3, 4, 1, 7000, 'Pixelated Mystery Box', 6, 600, 200, 'Battle Arena', 'Special', 'Secret Dungeon Score', 2800, 'Clear the Secret Dungeon with a score of', 'or higher.');
    addRandomQuest(0.2, 4, 1, 8000, 'Pixelated Mystery Box', 9, 900, 300, 'Battle Arena', 'Special', 'Secret Dungeon Score', 3500, 'Clear the Secret Dungeon with a score of', 'or higher.');
    addRandomQuest(0.2, 4, 1, 9000, 'Pixelated Mystery Box', 15, 1500, 500, 'Battle Arena', 'Special', 'Secret Dungeon Score', 4200, 'Clear the Secret Dungeon with a score of', 'or higher.');
    addRandomQuest(0.2, 3, 1, 5000, 'Pixelated Mystery Box', 6, 600, 150, 'Battle Arena', 'Special', 'Triangle Hideout Score', 50, 'Reach a kill streak of', 'in Triangle Hideout.');
    addRandomQuest(0.2, 4, 1, 6000, 'Pixelated Mystery Box', 8, 800, 200, 'Battle Arena', 'Special', 'Triangle Hideout Score', 100, 'Reach a kill streak of', 'in Triangle Hideout.');
    addRandomQuest(0.2, 4, 1, 7000, 'Pixelated Mystery Box', 12, 1200, 300, 'Battle Arena', 'Special', 'Triangle Hideout Score', 250, 'Reach a kill streak of', 'in Triangle Hideout.');
    addRandomQuest(0.2, 4, 1, 8000, 'Pixelated Mystery Box', 20, 2000, 500, 'Battle Arena', 'Special', 'Triangle Hideout Score', 500, 'Reach a kill streak of', 'in Triangle Hideout.');
    addRandomQuest(0.04, 3, 1, 5000, 'Pixelated Mystery Box', 4, 400, 100, 'Battle Arena', 'Special', 'MB\'s Revenge Score', 50, 'Reach a kill streak of', 'in THE MEGABOSS\'s Revenge.');
    addRandomQuest(0.04, 3, 1, 6000, 'Pixelated Mystery Box', 6, 600, 150, 'Battle Arena', 'Special', 'MB\'s Revenge Score', 100, 'Reach a kill streak of', 'in THE MEGABOSS\'s Revenge.');
    addRandomQuest(0.04, 4, 1, 7000, 'Pixelated Mystery Box', 8, 800, 200, 'Battle Arena', 'Special', 'MB\'s Revenge Score', 250, 'Reach a kill streak of', 'in THE MEGABOSS\'s Revenge.');
    addRandomQuest(0.5, 1, 2, 25, 'Medium Buff Potion', 1, 25, 25, 'Battle Arena', 'Use Skill', 'Basic Attack', 250, 'Use Basic Attack skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 1, 2, 50, 'Medium Buff Potion', 1, 30, 30, 'Battle Arena', 'Use Skill', 'Heal', 250, 'Use Heal skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 1, 2, 50, 'Medium Buff Potion', 1, 30, 30, 'Battle Arena', 'Use Skill', 'Quick Attack', 500, 'Use Quick Attack skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 1, 2, 250, 'Medium Buff Potion', 1, 40, 40, 'Battle Arena', 'Use Skill', 'Power Attack', 250, 'Use Power Attack skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 2, 2, 750, 'Medium Buff Potion', 2, 50, 50, 'Battle Arena', 'Use Skill', 'Super Knockback', 100, 'Use Specialized Skill skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 2, 2, 1500, 'Medium Buff Potion', 2, 75, 75, 'Battle Arena', 'Use Skill', 'Combo Strike', 10, 'Use Combo Strike skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 2, 2, 50, 'Large Buff Potion', 1, 75, 75, 'Battle Arena', 'Use Skill', 'Pixel Throw', 10, 'Use Pixel Throw skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 3, 2, 2000, 'Large Buff Potion', 1, 100, 100, 'Battle Arena', 'Use Skill', 'OM NOM NOM', 5, 'Use OM NOM NOM skill', 'times in Battle Arena.');
    addRandomQuest(0.5, 4, 2, 5000, 'Large Buff Potion', 2, 200, 200, 'Battle Arena', 'Use Skill', 'Roundhouse Kick', 2, 'Use Roundhouse Kick skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 2, 2, 250, 'Medium Buff Potion', 2, 50, 50, 'Battle Arena', 'Use Skill', 'Double Attack', 10, 'Equip a Spirit weapon and use Double Attack skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 2, 2, 250, 'Medium Buff Potion', 2, 60, 60, 'Battle Arena', 'Use Skill', 'Critical Strike', 10, 'Equip a Spirit weapon and use Critical Strike skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 2, 2, 750, 'Medium Buff Potion', 3, 80, 80, 'Battle Arena', 'Use Skill', 'Chaos', 10, 'Equip a Spirit weapon and use Chaos skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 3, 2, 1500, 'Medium Buff Potion', 3, 100, 100, 'Battle Arena', 'Use Skill', 'Instant Kill', 10, 'Equip a Spirit weapon and use Overkill skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 3, 2, 500, 'Large Buff Potion', 2, 120, 120, 'Battle Arena', 'Use Skill', 'Enrage', 2, 'Equip a Spirit weapon and use Enrage skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 3, 2, 1000, 'Large Buff Potion', 2, 150, 150, 'Battle Arena', 'Use Skill', 'Elemental Boost', 2, 'Equip a Spirit weapon and use Elemental Boost skill', 'times in Battle Arena.');
    addRandomQuest(0.4, 4, 2, 2500, 'Large Buff Potion', 3, 200, 200, 'Battle Arena', 'Use Skill', 'Invincibility', 2, 'Equip a Spirit weapon and use Invincibility skill', 'times in Battle Arena.');
    addRandomQuest(1, 1, 2, 35, 'Explosion Crate', 2, 50, 25, 'Button Machine', 'Press', 'Any', 250, 'Click the Button Machine', 'times.');
    addRandomQuest(0.9, 2, 3, 35, 'Explosion Crate', 4, 100, 50, 'Button Machine', 'Press', 'Any', 1000, 'Click the Button Machine', 'times.');
    addRandomQuest(0.9, 2, 3, 35, 'Awesome Crate', 2, 100, 50, 'Button Machine', 'Press', 'Great', 100, 'Get', 'GREAT or better clicks in Button Machine.');
    addRandomQuest(0.8, 3, 4, 35, 'Awesome Crate', 4, 200, 100, 'Button Machine', 'Press', 'Great', 500, 'Get', 'GREAT or better clicks in Button Machine.');
    addRandomQuest(0.8, 3, 4, 35, 'Chaos Crate', 2, 200, 100, 'Button Machine', 'Press', 'Excellent', 100, 'Get', 'EXCELLENT or better clicks in Button Machine.');
    addRandomQuest(0.7, 4, 5, 35, 'Chaos Crate', 4, 400, 200, 'Button Machine', 'Press', 'Excellent', 500, 'Get', 'EXCELLENT or better clicks in Button Machine.');
    addRandomQuest(0.7, 4, 5, 35, 'Legendary Box', 1, 600, 300, 'Button Machine', 'Press', 'Perfect', 200, 'Get', 'PERFECT clicks in Button Machine.');
    addRandomQuest(1, 1, 2, 45, 'Awesome Crate', 2, 25, 25, 'Money Printer', 'Print', 'Any', 100, 'Print money', 'times.');
    addRandomQuest(0.9, 2, 3, 45, 'Chaos Crate', 2, 50, 50, 'Money Printer', 'Print', 'Any', 500, 'Print money', 'times.');
    addRandomQuest(0.8, 3, 4, 45, 'Gambler\'s Box', 5, 100, 100, 'Money Printer', 'Print', 'Critical', 20, 'Get', 'CRITICAL prints in Money Printer.');
    addRandomQuest(0.6, 1, 1, 80, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Pong', 'High Score', 200000, 'Achieve a high score of', 'in Pong.');
    addRandomQuest(0.5, 2, 1, 80, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Pong', 'High Score', 500000, 'Achieve a high score of', 'in Pong.');
    addRandomQuest(0.4, 3, 1, 80, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Pong', 'High Score', 1500000, 'Achieve a high score of', 'in Pong.');
    addRandomQuest(0.3, 4, 1, 80, 'Legendary Box', 1, 800, 200, 'Arcade', 'Pong', 'High Score', 2500000, 'Achieve a high score of', 'in Pong.');
    addRandomQuest(0.6, 1, 1, 80, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Ultimate Avoidance', 'High Score', 150000, 'Achieve a high score of', 'in Ultimate Avoidance.');
    addRandomQuest(0.5, 2, 1, 80, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Ultimate Avoidance', 'High Score', 300000, 'Achieve a high score of', 'in Ultimate Avoidance.');
    addRandomQuest(0.4, 3, 1, 80, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Ultimate Avoidance', 'High Score', 500000, 'Achieve a high score of', 'in Ultimate Avoidance.');
    addRandomQuest(0.3, 4, 1, 80, 'Legendary Box', 1, 800, 200, 'Arcade', 'Ultimate Avoidance', 'High Score', 750000, 'Achieve a high score of', 'in Ultimate Avoidance.');
    addRandomQuest(0.6, 1, 1, 80, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Math Master', 'High Score', 100000, 'Achieve a high score of', 'in Math Master.');
    addRandomQuest(0.5, 2, 1, 80, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Math Master', 'High Score', 250000, 'Achieve a high score of', 'in Math Master.');
    addRandomQuest(0.4, 3, 1, 80, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Math Master', 'High Score', 500000, 'Achieve a high score of', 'in Math Master.');
    addRandomQuest(0.3, 4, 1, 80, 'Legendary Box', 1, 800, 200, 'Arcade', 'Math Master', 'High Score', 1250000, 'Achieve a high score of', 'in Math Master.');
    addRandomQuest(0.6, 1, 1, 80, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Whack-a-greg', 'High Score', 800000, 'Achieve a high score of', 'in Whack-a-greg.');
    addRandomQuest(0.5, 2, 1, 80, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Whack-a-greg', 'High Score', 1300000, 'Achieve a high score of', 'in Whack-a-greg.');
    addRandomQuest(0.4, 3, 1, 80, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Whack-a-greg', 'High Score', 1750000, 'Achieve a high score of', 'in Whack-a-greg.');
    addRandomQuest(0.3, 4, 1, 80, 'Legendary Box', 1, 800, 200, 'Arcade', 'Whack-a-greg', 'High Score', 2100000, 'Achieve a high score of', 'in Whack-a-greg.');
    addRandomQuest(0.6, 1, 1, 300, 'Explosion Crate', 2, 100, 25, 'Arcade', 'MindSweeper', 'High Score', 300000, 'Achieve a high score of', 'in MindSweeper.');
    addRandomQuest(0.5, 2, 1, 300, 'Awesome Crate', 2, 200, 50, 'Arcade', 'MindSweeper', 'High Score', 800000, 'Achieve a high score of', 'in MindSweeper.');
    addRandomQuest(0.4, 3, 1, 300, 'Chaos Crate', 2, 400, 100, 'Arcade', 'MindSweeper', 'High Score', 1200000, 'Achieve a high score of', 'in MindSweeper.');
    addRandomQuest(0.3, 4, 1, 300, 'Legendary Box', 1, 800, 200, 'Arcade', 'MindSweeper', 'High Score', 1700000, 'Achieve a high score of', 'in MindSweeper.');
    addRandomQuest(0.6, 1, 1, 300, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Balance 3', 'High Score', 400000, 'Achieve a high score of', 'in Balance 3.');
    addRandomQuest(0.5, 2, 1, 300, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Balance 3', 'High Score', 1000000, 'Achieve a high score of', 'in Balance 3.');
    addRandomQuest(0.4, 3, 1, 300, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Balance 3', 'High Score', 2000000, 'Achieve a high score of', 'in Balance 3.');
    addRandomQuest(0.3, 4, 1, 300, 'Legendary Box', 1, 800, 200, 'Arcade', 'Balance 3', 'High Score', 3500000, 'Achieve a high score of', 'in Balance 3.');
    addRandomQuest(0.6, 1, 1, 300, 'Explosion Crate', 2, 100, 25, 'Arcade', 'Triangle Count', 'High Score', 800000, 'Achieve a high score of', 'in Triangle Count.');
    addRandomQuest(0.5, 2, 1, 300, 'Awesome Crate', 2, 200, 50, 'Arcade', 'Triangle Count', 'High Score', 1800000, 'Achieve a high score of', 'in Triangle Count.');
    addRandomQuest(0.4, 3, 1, 300, 'Chaos Crate', 2, 400, 100, 'Arcade', 'Triangle Count', 'High Score', 3200000, 'Achieve a high score of', 'in Triangle Count.');
    addRandomQuest(0.3, 4, 1, 300, 'Legendary Box', 1, 800, 200, 'Arcade', 'Triangle Count', 'High Score', 5500000, 'Achieve a high score of', 'in Triangle Count.');
    addRandomQuest(0.7, 2, 2, 80, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Pong', 'Total Score', 2000000, 'Achieve a total score of', 'in Pong.');
    addRandomQuest(0.7, 2, 2, 80, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Ultimate Avoidance', 'Total Score', 1200000, 'Achieve a total score of', 'in Ultimate Avoidance.');
    addRandomQuest(0.7, 2, 2, 80, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Math Master', 'Total Score', 1000000, 'Achieve a total score of', 'in Math Master.');
    addRandomQuest(0.7, 2, 2, 80, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Whack-a-greg', 'Total Score', 5500000, 'Achieve a total score of', 'in Whack-a-greg.');
    addRandomQuest(0.7, 2, 2, 300, 'Explosion Crate', 4, 100, 50, 'Arcade', 'MindSweeper', 'Total Score', 3200000, 'Achieve a total score of', 'in MindSweeper.');
    addRandomQuest(0.7, 2, 2, 300, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Balance 3', 'Total Score', 6000000, 'Achieve a total score of', 'in Balance 3.');
    addRandomQuest(0.7, 2, 2, 300, 'Explosion Crate', 4, 100, 50, 'Arcade', 'Triangle Count', 'Total Score', 9000000, 'Achieve a total score of', 'in Triangle Count.');
    addRandomQuest(1, 1, 2, 180, 'Explosion Crate', 2, 100, 25, 'Stadium', 'Simple Race', 'Easy', 4, 'Win Simple Race', 'times on any difficulty.');
    addRandomQuest(0.9, 2, 3, 300, 'Awesome Crate', 2, 200, 50, 'Stadium', 'Simple Race', 'Medium', 8, 'Win Simple Race', 'times on Medium difficulty or higher.');
    addRandomQuest(0.8, 3, 4, 600, 'Chaos Crate', 2, 400, 100, 'Stadium', 'Simple Race', 'Hard', 12, 'Win Simple Race', 'times on Hard difficulty or higher.');
    addRandomQuest(0.7, 4, 5, 1000, 'Legendary Box', 1, 800, 200, 'Stadium', 'Simple Race', 'Impossible', 16, 'Win Simple Race', 'times on Impossible difficulty.');
    addRandomQuest(1, 1, 2, 180, 'Explosion Crate', 2, 150, 35, 'Stadium', 'Item Fight', 'Easy', 4, 'Win Item Fight', 'times on any difficulty.');
    addRandomQuest(0.9, 2, 3, 300, 'Awesome Crate', 2, 300, 75, 'Stadium', 'Item Fight', 'Medium', 8, 'Win Item Fight', 'times on Medium difficulty or higher.');
    addRandomQuest(0.8, 3, 4, 600, 'Chaos Crate', 2, 600, 150, 'Stadium', 'Item Fight', 'Hard', 12, 'Win Item Fight', 'times on Hard difficulty or higher.');
    addRandomQuest(0.7, 4, 5, 1000, 'Legendary Box', 1, 1200, 300, 'Stadium', 'Item Fight', 'Impossible', 16, 'Win Item Fight', 'times on Impossible difficulty.');
    addRandomQuest(0.5, 1, 2, 180, 'Explosion Crate', 1, 50, 25, 'Stadium', 'Use Item', 'Any', 25, 'Use', 'items in Stadium.');
    addRandomQuest(0.1, 3, 1, 180, 'Legendary Box', 1, 500, 100, 'Stadium', 'Death Match', 'Win', 1, 'Win Death Match', 'time.');
    addRandomQuest(0.05, 4, 1, 180, 'Legendary Box', 2, 1000, 200, 'Stadium', 'Death Match', 'Win', 2, 'Win Death Match', 'times.');
    addRandomQuest(0.1, 3, 1, 180, 'Legendary Box', 1, 500, 100, 'Stadium', 'Death Match', 'KO', 4, 'Score a total of', 'KOs in Death Match.');
    addRandomQuest(0.05, 4, 1, 180, 'Legendary Box', 2, 1000, 200, 'Stadium', 'Death Match', 'KO', 10, 'Score a total of', 'KOs in Death Match.');
    addRandomQuest(0.03, 2, 1, 180, 'Awesome Crate', 4, 250, 50, 'Stadium', 'Death Match', 'PWNt', 300, 'Score', 'PWNts in a single game of Death Match.');
    addRandomQuest(0.03, 2, 1, 180, 'Awesome Crate', 6, 375, 75, 'Stadium', 'Death Match', 'PWNt', 450, 'Score', 'PWNts in a single game of Death Match.');
    addRandomQuest(0.03, 3, 1, 180, 'Chaos Crate', 6, 500, 100, 'Stadium', 'Death Match', 'PWNt', 600, 'Score', 'PWNts in a single game of Death Match.');
    addRandomQuest(0.03, 3, 1, 180, 'Chaos Crate', 8, 750, 150, 'Stadium', 'Death Match', 'PWNt', 750, 'Score', 'PWNts in a single game of Death Match.');
    addRandomQuest(0.03, 4, 1, 180, 'Legendary Box', 2, 1000, 200, 'Stadium', 'Death Match', 'PWNt', 900, 'Score', 'PWNts in a single game of Death Match.');
    addRandomQuest(0.5, 1, 2, 180, 'Gambler\'s Box', 2, 50, 25, 'Stadium', 'Bet', 'Win', 2, 'Win', 'Bets in Stadium.');
    addRandomQuest(1, 1, 2, 300, 'Explosion Crate', 2, 100, 25, 'TukkunFCG', 'Win', 'Any', 5, 'Win', 'battles in TukkunFCG.');
    addRandomQuest(1, 1, 2, 300, 'Explosion Crate', 3, 150, 35, 'TukkunFCG', 'Win', 'Level 2', 5, 'Win', 'battles against Level 2 or higher opponents in TukkunFCG.');
    addRandomQuest(0.9, 2, 3, 300, 'Awesome Crate', 3, 200, 50, 'TukkunFCG', 'Win', 'Level 3', 5, 'Win', 'battles against Level 3 or higher opponents in TukkunFCG.');
    addRandomQuest(0.9, 2, 3, 300, 'Awesome Crate', 4, 300, 75, 'TukkunFCG', 'Win', 'Level 4', 5, 'Win', 'battles against Level 4 or higher opponents in TukkunFCG.');
    addRandomQuest(0.8, 3, 4, 500, 'Chaos Crate', 4, 400, 100, 'TukkunFCG', 'Win', 'Level 6', 5, 'Win', 'battles against Level 6 or higher opponents in TukkunFCG.');
    addRandomQuest(0.8, 3, 4, 700, 'Chaos Crate', 5, 600, 150, 'TukkunFCG', 'Win', 'Level 7', 5, 'Win', 'battles against Level 7 or higher opponents in TukkunFCG.');
    addRandomQuest(0.7, 4, 5, 1000, 'Legendary Box', 1, 800, 200, 'TukkunFCG', 'Win', 'Level 8', 5, 'Win', 'battles against Level 8 or higher opponents in TukkunFCG.');
    addRandomQuest(0.7, 4, 5, 1000, 'Legendary Box', 2, 2000, 500, 'TukkunFCG', 'Win', 'Level 10', 5, 'Win', 'battles against Level 10 opponents in TukkunFCG.');
    addRandomQuest(0.8, 1, 2, 400, 'Explosion Crate', 4, 50, 25, 'LolMarket', 'Sell', '0.5k Profit', 50, 'Sell', 'gems with 500 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.7, 2, 3, 600, 'Awesome Crate', 4, 100, 50, 'LolMarket', 'Sell', '1.0k Profit', 250, 'Sell', 'gems with 1,000 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.6, 2, 3, 800, 'Awesome Crate', 6, 150, 75, 'LolMarket', 'Sell', '1.5k Profit', 250, 'Sell', 'gems with 1,500 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.5, 3, 4, 1000, 'Chaos Crate', 6, 200, 100, 'LolMarket', 'Sell', '2.0k Profit', 1000, 'Sell', 'gems with 2,000 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.4, 3, 4, 1200, 'Chaos Crate', 8, 300, 150, 'LolMarket', 'Sell', '2.5k Profit', 1000, 'Sell', 'gems with 2,500 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.3, 4, 5, 1400, 'Legendary Box', 2, 400, 200, 'LolMarket', 'Sell', '3.0k Profit', 5000, 'Sell', 'gems with 3,000 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.2, 4, 5, 1600, 'Legendary Box', 3, 500, 250, 'LolMarket', 'Sell', '3.5k Profit', 5000, 'Sell', 'gems with 3,500 Profit per gem or higher in LolMarket.');
    addRandomQuest(0.1, 4, 5, 1800, 'Legendary Box', 4, 600, 300, 'LolMarket', 'Sell', '4.0k Profit', 5000, 'Sell', 'gems with 4,000 Profit per gem or higher in LolMarket.');
    addRandomQuest(1, 1, 2, 500, 'Energy Refill', 2, 50, 25, 'Awesome Adventures', 'Adventure', 'Any', 25, 'Adventure', 'times.');
    addRandomQuest(1, 2, 3, 500, 'Energy Refill', 3, 100, 50, 'Awesome Adventures', 'Adventure', 'Any', 100, 'Adventure', 'times.');
    addRandomQuest(0.8, 2, 3, 500, 'Energy Refill', 3, 100, 50, 'Awesome Adventures', 'Adventure', 'Town', 50, 'Adventure in Town', 'times.');
    addRandomQuest(0.8, 2, 3, 500, 'Energy Refill', 3, 100, 50, 'Awesome Adventures', 'Adventure', 'Untitled Zone', 50, 'Adventure in Untitled Zone', 'times.');
    addRandomQuest(0.8, 2, 3, 500, 'Energy Refill', 3, 100, 50, 'Awesome Adventures', 'Adventure', 'Titled Zone', 50, 'Adventure in Titled Zone', 'times.');
    addRandomQuest(1, 3, 2, 500, 'Energy Refill', 5, 200, 100, 'Awesome Adventures', 'Adventure Item', 'Grammar Pill', 5, 'impr00v ur grammer by takeing', 'grammer pillz!!!1!1');
    addRandomQuest(1, 1, 2, 750, 'Regular Energy Drink', 2, 50, 25, 'Fishing', 'Result', 'Success', 10, 'Get', 'catches in Fishing.');
    addRandomQuest(0.9, 2, 3, 750, 'Regular Energy Drink', 4, 100, 50, 'Fishing', 'Result', 'Success', 50, 'Get', 'catches in Fishing.');
    addRandomQuest(1, 1, 2, 750, 'Regular Pet Food', 2, 100, 25, 'Fishing', 'Result', 'Perfect', 5, 'Get', 'PERFECT catches in Fishing.');
    addRandomQuest(0.9, 2, 3, 750, 'Regular Pet Food', 4, 200, 50, 'Fishing', 'Result', 'Perfect', 25, 'Get', 'PERFECT catches in Fishing.');
    addRandomQuest(1, 1, 1, 750, 'Regular Pet Food', 2, 100, 25, 'Fishing', 'Result', 'Perfect Streak', 3, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.5, 2, 1, 750, 'Regular Pet Food', 3, 200, 50, 'Fishing', 'Result', 'Perfect Streak', 6, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.3, 2, 1, 750, 'Regular Pet Food', 4, 300, 75, 'Fishing', 'Result', 'Perfect Streak', 10, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.3, 3, 1, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Result', 'Perfect Streak', 15, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.2, 3, 1, 750, 'Elite Pet Food', 4, 600, 150, 'Fishing', 'Result', 'Perfect Streak', 20, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.2, 4, 1, 750, 'Elite Pet Food', 5, 800, 200, 'Fishing', 'Result', 'Perfect Streak', 25, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.1, 4, 1, 750, 'Legendary Box', 4, 1200, 300, 'Fishing', 'Result', 'Perfect Streak', 30, 'Get a PERFECT streak of', 'in Fishing.');
    addRandomQuest(0.5, 2, 3, 750, 'Elite Energy Drink', 1, 100, 50, 'Fishing', 'Junk', 'Any', 25, 'Catch', 'junk items in Fishing.');
    addRandomQuest(0.4, 2, 3, 1000, 'Elite Energy Drink', 2, 150, 75, 'Fishing', 'Junk', 'Lv. 5+', 25, 'Catch', 'Lv. 5+ junk items in Fishing.');
    addRandomQuest(0.4, 3, 4, 2500, 'Elite Energy Drink', 3, 200, 100, 'Fishing', 'Junk', 'Lv. 10+', 25, 'Catch', 'Lv. 10+ junk items in Fishing.');
    addRandomQuest(0.3, 3, 4, 5000, 'Elite Energy Drink', 4, 300, 150, 'Fishing', 'Junk', 'Lv. 20+', 25, 'Catch', 'Lv. 20+ junk items in Fishing.');
    addRandomQuest(0.3, 4, 5, 8000, 'Elite Energy Drink', 5, 400, 200, 'Fishing', 'Junk', 'Lv. 30', 25, 'Catch', 'Lv. 30 junk items in Fishing.');
    addRandomQuest(0.5, 2, 3, 750, 'Elite Energy Drink', 1, 100, 50, 'Fishing', 'Fish', 'Any', 10, 'Catch', 'fish in Fishing. Junk and special items don\'t count.');
    addRandomQuest(0.4, 2, 3, 1000, 'Elite Energy Drink', 2, 150, 75, 'Fishing', 'Fish', 'Lv. 5+', 10, 'Catch', 'Lv. 5+ fish in Fishing. Junk items don\'t count.');
    addRandomQuest(0.4, 3, 4, 2500, 'Elite Energy Drink', 3, 200, 100, 'Fishing', 'Fish', 'Lv. 10+', 10, 'Catch', 'Lv. 10+ fish in Fishing. Junk items don\'t count.');
    addRandomQuest(0.3, 3, 4, 5000, 'Elite Energy Drink', 4, 300, 150, 'Fishing', 'Fish', 'Lv. 20+', 10, 'Catch', 'Lv. 20+ fish in Fishing. Junk items don\'t count.');
    addRandomQuest(0.3, 4, 5, 8000, 'Elite Energy Drink', 5, 400, 200, 'Fishing', 'Fish', 'Lv. 30', 10, 'Catch', 'Lv. 30 fish in Fishing. Junk items don\'t count.');
    addRandomQuest(0.3, 2, 2, 750, 'Elite Pet Food', 2, 200, 50, 'Fishing', 'Special Item', 'Any', 5, 'Catch', 'special items in Fishing. Junk items don\'t count.');
    addRandomQuest(0.2, 3, 2, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Treasure Box', 2, 'Catch', 'Treasure Boxes in Fishing.');
    addRandomQuest(0.2, 3, 2, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Key', 2, 'Catch', 'Keys in Fishing.');
    addRandomQuest(0.2, 3, 2, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Energy Drink', 3, 'Catch', 'Energy Drink in Fishing.');
    addRandomQuest(0.2, 3, 2, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Pet Food', 3, 'Catch', 'Pet Food in Fishing.');
    addRandomQuest(0.1, 3, 1, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Energy Refill', 2, 'Catch', 'Energy Refills in Fishing.');
    addRandomQuest(0.1, 3, 1, 2000, 'Elite Pet Food', 4, 600, 150, 'Fishing', 'Special Item', 'Fertilizer', 2, 'Catch', 'Fertilizers in Fishing.\n(Fishing Skill 10+ is required)');
    addRandomQuest(0.1, 4, 1, 4000, 'Elite Pet Food', 5, 800, 200, 'Fishing', 'Special Item', 'Mega Fertilizer', 2, 'Catch', 'Mega Fertilizers in Fishing.\n(Fishing Skill 20+ is required)');
    addRandomQuest(0.1, 3, 1, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Mystery Box', 2, 'Catch', 'Mystery Boxes in Fishing.');
    addRandomQuest(0.05, 3, 1, 750, 'Elite Pet Food', 3, 400, 100, 'Fishing', 'Special Item', 'Explosion Crate', 2, 'Catch', 'Explosion Crates in Fishing.');
    addRandomQuest(0.05, 3, 1, 2000, 'Elite Pet Food', 4, 600, 150, 'Fishing', 'Special Item', 'Awesome Crate', 2, 'Catch', 'Awesome Crates in Fishing.\n(Fishing Skill 10+ is required)');
    addRandomQuest(0.05, 4, 1, 4000, 'Elite Pet Food', 5, 800, 200, 'Fishing', 'Special Item', 'Chaos Crate', 2, 'Catch', 'Chaos Crates in Fishing.\n(Fishing Skill 20+ is required)');
    addRandomQuest(0.05, 4, 1, 7000, 'Elite Pet Food', 6, 1200, 300, 'Fishing', 'Special Item', 'Legendary Box', 2, 'Catch', 'Legendary Boxes in Fishing.\n(Fishing Skill 30+ is required)');
    addRandomQuest(1, 1, 2, 700, 'Random Career Potion', 1, 50, 25, 'Career', 'Career EXP', 'Any', 5000, 'Gain a total of', 'Career EXP.');
    addRandomQuest(1, 2, 3, 700, 'Random Career Potion', 2, 100, 50, 'Career', 'Career EXP', 'Any', 25000, 'Gain a total of', 'Career EXP.');
    addRandomQuest(1, 3, 4, 700, 'Random Career Potion', 4, 200, 100, 'Career', 'Career EXP', 'Any', 100000, 'Gain a total of', 'Career EXP.');
    addRandomQuest(1, 4, 5, 700, 'Mega Career Potion', 1, 400, 200, 'Career', 'Career EXP', 'Any', 500000, 'Gain a total of', 'Career EXP.');
    addRandomQuest(0.7, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 1', 25000, 'Gain', '\'Idler\' Career EXP.');
    addRandomQuest(0.7, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 2', 25000, 'Gain', '\'Gardener\' Career EXP.');
    addRandomQuest(0.7, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 3', 25000, 'Gain', '\'Fighter\' Career EXP.');
    addRandomQuest(0.7, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 4', 25000, 'Gain', '\'Item Maker\' Career EXP.');
    addRandomQuest(0.5, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 5', 25000, 'Gain', '\'Button Basher\' Career EXP.');
    addRandomQuest(0.5, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 6', 25000, 'Gain', '\'Arcade Player\' Career EXP.');
    addRandomQuest(0.5, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 7', 25000, 'Gain', '\'Racer\' Career EXP.');
    addRandomQuest(0.5, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 8', 25000, 'Gain', '\'Card Player\' Career EXP.');
    addRandomQuest(0.3, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 9', 25000, 'Gain', '\'Gem Trader\' Career EXP.');
    addRandomQuest(0.3, 3, 4, 700, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 10', 25000, 'Gain', '\'Adventurer\' Career EXP.');
    addRandomQuest(0.3, 3, 4, 900, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 11', 25000, 'Gain', '\'Pet Trainer\' Career EXP.');
    addRandomQuest(0.3, 3, 4, 750, 'Random Career Potion', 3, 200, 100, 'Career', 'Career EXP', 'Career 12', 25000, 'Gain', '\'Fisher\' Career EXP.');
    addRandomQuest(1, 3, 1, 2000, 'Legendary Box', 1, 300, 150, 'Pet', 'Mad Skillz', 'Mystery Effect', 2, 'Use your Pet\'s Mystery Effect', 'times.');
    addRandomQuest(1, 4, 2, 2000, 'Legendary Box', 2, 400, 200, 'Pet', 'Mad Skillz', 'Mystery Effect', 5, 'Use your Pet\'s Mystery Effect', 'times.');
  }

  frame 10 {
    function addFish(fishCate, fishLevel, fishSpeed, fishSpec, fishFatigue, fishExp, fishAExp, fullness, fatigueRestore, coin, material) {
      var v1 = new Object();
      v1.fishCate = fishCate;
      v1.fishLevel = fishLevel;
      v1.fishSpeed = fishSpeed;
      v1.fishSpec = fishSpec;
      v1.fishFatigue = fishFatigue;
      v1.fishExp = fishExp;
      v1.fishAExp = fishAExp;
      v1.fullness = fullness;
      v1.fatigue = fatigueRestore;
      v1.coin = coin;
      v1.material = material;
      fishArray.push(v1);
    }

    fishArray = [zeroItem];
    addFish('Treasure', 'Bronze', 10, 'Manual+', 400, 600, 60000, 0, 0, 100000, 100000);
    addFish('Treasure', 'Silver', 10, 'Manual+', 400, 900, 90000, 0, 0, 500000, 500000);
    addFish('Treasure', 'Golden', 10, 'Manual+', 400, 1200, 120000, 0, 0, 2000000, 2000000);
    addFish('Key', 'Bronze', 10, 'Manual', 200, 300, 30000, 0, 0, 50000, 50000);
    addFish('Key', 'Silver', 10, 'Manual', 200, 450, 45000, 0, 0, 250000, 250000);
    addFish('Key', 'Golden', 10, 'Manual', 200, 600, 60000, 0, 0, 1000000, 1000000);
    addFish('Energy Drink', 'Regular', 20, 'Manual', 100, 200, 20000, 0, 500, 125000, 0);
    addFish('Energy Drink', 'Elite', 20, 'Manual+', 100, 300, 30000, 0, 750, 500000, 0);
    addFish('Pet Food', 'Regular', 20, 'Manual', 100, 200, 20000, 20, 0, 125000, 0);
    addFish('Pet Food', 'Elite', 20, 'Manual+', 100, 300, 30000, 30, 0, 500000, 0);
    addFish('Junk', 1, 30, '', 30, 22, 2000, 0, 0, 0, 5000);
    addFish('Junk', 2, 30, '', 30, 24, 2100, 0, 0, 0, 10000);
    addFish('Junk', 3, 30, '', 30, 26, 2200, 0, 0, 0, 15000);
    addFish('Junk', 4, 30, '', 30, 28, 2300, 0, 0, 0, 20000);
    addFish('Junk', 5, 30, '', 30, 30, 2400, 0, 0, 0, 25000);
    addFish('Junk', 6, 30, '', 30, 32, 2500, 0, 0, 0, 30000);
    addFish('Junk', 7, 30, '', 30, 34, 2600, 0, 0, 0, 35000);
    addFish('Junk', 8, 30, '', 30, 36, 2700, 0, 0, 5000, 40000);
    addFish('Junk', 9, 30, '', 36, 42, 3360, 0, 0, 15000, 45000);
    addFish('Junk', 10, 30, '', 36, 44, 3480, 0, 0, 25000, 50000);
    addFish('Junk', 12, 30, '', 36, 46, 3600, 0, 0, 35000, 70000);
    addFish('Junk', 14, 30, '', 42, 54, 4340, 0, 0, 45000, 90000);
    addFish('Junk', 16, 30, '', 42, 56, 4480, 0, 0, 55000, 110000);
    addFish('Junk', 18, 30, '', 42, 58, 4620, 0, 0, 65000, 130000);
    addFish('Junk', 20, 30, '', 48, 68, 5440, 0, 0, 75000, 150000);
    addFish('Junk', 22, 30, '', 48, 70, 5600, 0, 0, 100000, 200000);
    addFish('Junk', 24, 30, '', 48, 72, 5760, 0, 0, 125000, 250000);
    addFish('Junk', 26, 30, '', 54, 84, 6660, 0, 0, 150000, 300000);
    addFish('Junk', 28, 30, '', 54, 86, 6840, 0, 0, 175000, 350000);
    addFish('Junk', 30, 30, '', 60, 100, 7800, 0, 0, 200000, 400000);
    addFish('Fish', 1, 40, '', 50, 44, 4000, 0, 2, 5000, 0);
    addFish('Fish', 2, 40, '', 50, 48, 4200, 0, 3, 10000, 0);
    addFish('Fish', 3, 40, '', 50, 52, 4400, 0, 4, 15000, 0);
    addFish('Fish', 4, 40, '', 50, 56, 4600, 0, 5, 20000, 0);
    addFish('Fish', 5, 40, '', 50, 60, 4800, 0, 6, 25000, 0);
    addFish('Fish', 6, 40, '', 50, 64, 5000, 0, 7, 30000, 0);
    addFish('Fish', 7, 40, '', 50, 68, 5200, 0, 8, 35000, 0);
    addFish('Fish', 8, 40, '', 50, 72, 5400, 1, 9, 40000, 0);
    addFish('Fish', 9, 40, '', 60, 84, 6720, 1, 10, 45000, 0);
    addFish('Fish', 10, 40, '', 60, 88, 6960, 1, 11, 50000, 0);
    addFish('Fish', 12, 40, '', 60, 92, 7200, 1, 12, 70000, 0);
    addFish('Fish', 14, 40, '', 70, 108, 8680, 1, 13, 90000, 0);
    addFish('Fish', 16, 40, '', 70, 112, 8960, 1, 14, 110000, 0);
    addFish('Fish', 18, 40, '', 70, 116, 9240, 1, 15, 130000, 0);
    addFish('Fish', 20, 40, '', 80, 136, 10880, 1, 16, 150000, 0);
    addFish('Fish', 22, 40, '', 80, 140, 11200, 1, 17, 200000, 0);
    addFish('Fish', 24, 40, '', 80, 144, 11520, 1, 18, 250000, 0);
    addFish('Fish', 26, 40, '', 90, 168, 13320, 1, 19, 300000, 0);
    addFish('Fish', 28, 40, '', 90, 172, 13680, 1, 20, 350000, 0);
    addFish('Fish', 30, 40, '', 100, 200, 15600, 2, 40, 400000, 0);
    addFish('', '', 20, '', 0, 0, 0, 0, 0, 0, 0);
    addFish('Energy Refill', '', 20, 'Manual', 100, 240, 24000, 0, 0, 0, 0);
    addFish('Fertilizer', '', 20, 'Manual', 100, 300, 30000, 0, 0, 0, 0);
    addFish('Mega Fertilizer', '', 20, 'Manual+', 100, 360, 36000, 0, 0, 0, 0);
    addFish('Explosion Crate', '', 20, 'Manual', 200, 400, 40000, 0, 0, 0, 0);
    addFish('Awesome Crate', '', 20, 'Manual', 200, 500, 50000, 0, 0, 0, 0);
    addFish('Chaos Crate', '', 20, 'Manual', 200, 600, 60000, 0, 0, 0, 0);
    addFish('Legendary Box', '', 20, 'Manual+', 200, 700, 70000, 0, 0, 0, 0);
    addFish('White Coin', '', 20, 'Manual', 50, 100, 10000, 0, 0, 0, 0);
    addFish('Boost Potion', '', 20, 'Manual', 200, 300, 30000, 0, 0, 0, 0);
    addFish('Mega Boost Potion', '', 20, 'Manual+', 200, 400, 40000, 0, 0, 0, 0);
  }

  frame 11 {
    function loadKongpanion() {
      trace('LOADING KONGPANIONS...');
      _root.kpaName = [zeroItem];
      _root.kpaSeed = [zeroItem];
      _root.kpaOwned = [zeroItem];
      _root.kpaShiny = [zeroItem];
      _root.kpaCount = 0;
      _root.suc1 = false;
      _root.suc2 = false;
      kpa = new LoadVars();
      kpa.onData = function (src) {
        _root.suc1 = true;
        src2 = src.split('{');
        src3 = new Array();
        if (isNaN(src2.length) || src2.length > 99999) {
          trace('ERROR');
        } else {
          trace('\nKONGPANION LIST LOADED! (' + (src2.length - 2) + ')');
          i = 0;
          while (i < src2.length) {
            src3 = src2[i].split(',"');
            if (src3[0].indexOf('name":') != -1) {
              tempID = -1;
              j = 1;
              while (j < src3.length) {
                if (src3[j].indexOf('id":') == 0) {
                  tempID = src3[j].substring(4, src3[j].length - 2);
                  tempID *= 1;
                }
                ++j;
              }
              if (tempID >= 1 && tempID <= 4500) {
                if (_root.kpaCount < tempID) {
                  _root.kpaCount = tempID;
                }
                _root.kpaName[tempID] = src3[0].substring(8, src3[0].length - 1);
                if (tempID == 114) {
                  _root.kpaName[tempID] = 'Felicette';
                }
                _root.kpaSeed[tempID] = _root.getKpaValue(kpaName[tempID]);
                _root.enemyList[500 + tempID].name = kpaName[tempID];
                if (_root.kpaSeed[tempID] % 5 == 0) {
                  _root.enemyList[500 + tempID].allyPassive1 = 'Spawn Rate';
                  _root.enemyList[500 + tempID].allyPassive1X = 2;
                }
                if (_root.kpaSeed[tempID] % 4 == 0) {
                  _root.enemyList[500 + tempID].allyPassive1 = 'Coin';
                  _root.enemyList[500 + tempID].allyPassive1X = 10;
                } else {
                  if (_root.kpaSeed[tempID] % 3 == 0) {
                    _root.enemyList[500 + tempID].allyPassive1 = 'Drop Rate';
                    _root.enemyList[500 + tempID].allyPassive1X = 10;
                  } else {
                    if (_root.kpaSeed[tempID] % 2 == 0) {
                      _root.enemyList[500 + tempID].allyPassive1 = 'EXP';
                      _root.enemyList[500 + tempID].allyPassive1X = 10;
                    } else {
                      _root.enemyList[500 + tempID].allyPassive1 = 'Pixel';
                      _root.enemyList[500 + tempID].allyPassive1X = 10;
                    }
                  }
                }
                if (_root.kpaSeed[tempID] % 19 == 0) {
                  _root.enemyList[500 + tempID].allyPassive2 = 'Boss Damage';
                  _root.enemyList[500 + tempID].allyPassive2X = 10;
                } else {
                  if (_root.kpaSeed[tempID] % 17 == 0) {
                    _root.enemyList[500 + tempID].allyPassive2 = 'Non-Boss Damage';
                    _root.enemyList[500 + tempID].allyPassive2X = 10;
                  } else {
                    if (_root.kpaSeed[tempID] % 13 == 0) {
                      _root.enemyList[500 + tempID].allyPassive2 = 'Negate Effect';
                      _root.enemyList[500 + tempID].allyPassive2X = 10;
                    } else {
                      if (_root.kpaSeed[tempID] % 11 == 0) {
                        _root.enemyList[500 + tempID].allyPassive2 = 'Potion Efficiency';
                        _root.enemyList[500 + tempID].allyPassive2X = 50;
                      } else {
                        if (_root.kpaSeed[tempID] % 7 == 0) {
                          _root.enemyList[500 + tempID].allyPassive2 = 'Hit Chance';
                          _root.enemyList[500 + tempID].allyPassive2X = 10;
                        } else {
                          if (_root.kpaSeed[tempID] % 6 == 0) {
                            _root.enemyList[500 + tempID].allyPassive2 = 'Dodge Chance';
                            _root.enemyList[500 + tempID].allyPassive2X = 10;
                          } else {
                            if (_root.kpaSeed[tempID] % 4 == 0) {
                              _root.enemyList[500 + tempID].allyPassive2 = 'Mastery';
                              _root.enemyList[500 + tempID].allyPassive2X = 10;
                            } else {
                              _root.enemyList[500 + tempID].allyPassive2 = 'Damage';
                              _root.enemyList[500 + tempID].allyPassive2X = 6;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if ((_root.kpaSeed[tempID] + tempID) % 2 == 0) {
                  _root.enemyList[500 + tempID].allyPassive1X *= 2;
                } else {
                  _root.enemyList[500 + tempID].allyPassive2X *= 2;
                }
                if (_root.kpaSeed[tempID] % 19 == 3) {
                  _root.enemyList[500 + tempID].allyPassive3 = 'MaxHP %';
                  _root.enemyList[500 + tempID].allyPassive3X = 25;
                } else {
                  if (_root.kpaSeed[tempID] % 17 == 3) {
                    _root.enemyList[500 + tempID].allyPassive3 = 'MaxMP %';
                    _root.enemyList[500 + tempID].allyPassive3X = 25;
                  } else {
                    if (_root.kpaSeed[tempID] % 13 == 3) {
                      _root.enemyList[500 + tempID].allyPassive3 = 'Accuracy %';
                      _root.enemyList[500 + tempID].allyPassive3X = 25;
                    } else {
                      if (_root.kpaSeed[tempID] % 11 == 3) {
                        _root.enemyList[500 + tempID].allyPassive3 = 'Evasion %';
                        _root.enemyList[500 + tempID].allyPassive3X = 25;
                      } else {
                        if (_root.kpaSeed[tempID] % 7 == 3) {
                          _root.enemyList[500 + tempID].allyPassive3 = 'Attack %';
                          _root.enemyList[500 + tempID].allyPassive3X = 25;
                        } else {
                          if (_root.kpaSeed[tempID] % 5 == 3) {
                            _root.enemyList[500 + tempID].allyPassive3 = 'Defense %';
                            _root.enemyList[500 + tempID].allyPassive3X = 25;
                          } else {
                            _root.enemyList[500 + tempID].allyPassive3 = 'Reward';
                            _root.enemyList[500 + tempID].allyPassive3X = 5;
                          }
                        }
                      }
                    }
                  }
                }
                if (_root.kpaSeed[tempID] % 3 == 0) {
                  _root.enemyList[500 + tempID].allyActive1 = 'Attack: Weaken';
                } else {
                  if (_root.kpaSeed[tempID] % 3 == 1) {
                    _root.enemyList[500 + tempID].allyActive1 = 'Attack: Blind';
                  }
                }
                if (_root.kpaSeed[tempID] % 5 == 0) {
                  _root.enemyList[500 + tempID].allyActive2 = 'Buff: Power';
                } else {
                  if (_root.kpaSeed[tempID] % 5 == 1) {
                    _root.enemyList[500 + tempID].allyActive2 = 'Buff: Master';
                  } else {
                    if (_root.kpaSeed[tempID] % 5 == 2) {
                      _root.enemyList[500 + tempID].allyActive2 = 'Buff: Enrage';
                      _root.enemyList[500 + tempID].allyActive2X = 30;
                    } else {
                      if (_root.kpaSeed[tempID] % 5 == 3) {
                        _root.enemyList[500 + tempID].allyActive2 = 'Buff: Elemental Boost';
                        _root.enemyList[500 + tempID].allyActive2X = 30;
                      }
                    }
                  }
                }
                if (_root.kpaSeed[tempID] % 4 == 0) {
                  _root.enemyList[500 + tempID].allyActive1Z = 20;
                } else {
                  if (_root.kpaSeed[tempID] % 4 == 1) {
                    _root.enemyList[500 + tempID].allyActive2Z = 60;
                  } else {
                    if (_root.kpaSeed[tempID] % 4 == 2) {
                      _root.enemyList[500 + tempID].allyActive3Z = 120;
                    } else {
                      if (_root.kpaSeed[tempID] % 4 == 3) {
                        _root.enemyList[500 + tempID].allyActive1Z = 25;
                        _root.enemyList[500 + tempID].allyActive2Z = 65;
                        _root.enemyList[500 + tempID].allyActive3Z = 125;
                      }
                    }
                  }
                }
              }
            }
            ++i;
          }
          if (_root.kpaChip != true && _root.kongregate_username != 'Guest') {
            _root.kpaChip = true;
            i = 1;
            while (i <= _root.kpaCount - 4) {
              if (_root.kpaName[i] != undefined) {
                _root.addArenaCraftChip(16, 1, 1, 'Monster Chip (Kongpanion)', 2, 500 + i, 0, 0, 106, 0, Infinity, 499999999, 499999999, 499, 14999, 'Monster Chip K-' + (500 + i));
              }
              ++i;
            }
          }
        }
      };

      kpa.load('http://api.kongregate.com/api/kongpanions/index/');
      kpau = new LoadVars();
      kpau.onData = function (srcu) {
        _root.suc2 = true;
        srcu2 = srcu.split('{');
        srcu3 = new Array();
        if (isNaN(srcu2.length) || srcu2.length > 99999) {
          trace('ERROR');
        } else {
          trace('\nPLAYER KONGPANION LIST LOADED! (' + (srcu2.length - 2) + ')');
          i = 0;
          while (i < srcu2.length) {
            srcu3 = srcu2[i].split(',"');
            if (srcu3[0].indexOf('name":') != -1) {
              tempShiny = false;
              tempID = -1;
              j = 1;
              while (j < srcu3.length) {
                if (srcu3[j].indexOf('id":') == 0) {
                  tempID = srcu3[j].substring(4, srcu3[j].length - 2);
                  tempID *= 1;
                  if (tempID >= 1 && tempID <= 4500) {
                    _root.kpaOwned[tempID] = true;
                  }
                }
                ++j;
              }
              if (tempID >= 1 && tempID <= 4500) {
                j = 1;
                while (j < srcu3.length) {
                  if (srcu3[j].indexOf('shiny":') == 0) {
                    tempB = srcu3[j].substring(7, srcu3[j].length);
                    if (tempB == 'true') {
                      _root.kpaShiny[tempID] = true;
                    }
                  }
                  ++j;
                }
              }
            }
            ++i;
          }
        }
      };

      ku = _root.kongregate_username;
      if (ku == undefined) {
        ku = 'Tukkun';
      }
      kpau.load('http://api.kongregate.com/api/kongpanions.json?username=' + ku);
    }

    function selectSavefile(sid) {
      if (sid <= 4) {
        _root.saveid = sid;
        _root.gotoAndStop(19);
      } else {
        if (sid == 5) {
          _root.challengeMode.gotoAndStop(2);
        }
      }
    }

    stop();
    _root.actualKpaCount = 0;
    _root.actualShinyKpaCount = 0;
    loadKongpanion();
    testVersion = false;
    if (testVersion == true) {
      _root.save.noobMode = true;
      _root.saveGlobal.adminMode = 'àoicuẳiocnpưeaoùiycnăeoipdfnùióanủeưc';
    }
    if (_root.saveGlobal.adminMode == 'àoicuẳiocnpưeaoùiycnăeoipdfnùióanủeưc') {
      _root.adminMode = true;
    }
    if (_root.save.noobMode == true) {
      _root.adminMode = true;
    }
    onEnterFrame = null;
    tb1.text = _root.saveGlobal.playTime[0];
    tb2.text = _root.saveGlobal.curLevel[0];
    tb3.text = _root.saveGlobal.ascCount[0];
    tb4.text = _root.saveGlobal.playTime[1];
    tb5.text = _root.saveGlobal.curLevel[1];
    tb6.text = _root.saveGlobal.ascCount[1];
    tb7.text = _root.saveGlobal.playTime[2];
    tb8.text = _root.saveGlobal.curLevel[2];
    tb9.text = _root.saveGlobal.ascCount[2];
    tb10.text = _root.saveGlobal.playTime[3];
    tb11.text = _root.saveGlobal.curLevel[3];
    tb12.text = _root.saveGlobal.ascCount[3];
    chalCount = 0;
    i = 1;
    while (i <= 6) {
      if (!isNaN(_root.saveGlobal.challengeTime[i])) {
        chalCount += 1;
      }
      ++i;
    }
    tb13.text = chalCount + ' / 6 completed';
    if (_root.autoStart == true && _root.saveGlobal.skipMenu == true) {
      _root.selectSavefile(_root.saveGlobal.selectedSave);
      _root.autoStart = false;
    }
  }

  movieClip 2284  {
  }

  movieClip 2287  {
  }

  instance of movieClip 2287  {

    onClipEvent (load) {
      glow1 = new flash.filters.GlowFilter(random(16777216), 70, 10, 10, 2, 1, false, false);
      glow2 = new flash.filters.GlowFilter(random(16777216), 40, 5, 5, 1, 1, false, false);
      dropShadow = new flash.filters.DropShadowFilter(10, 270, 39423, 100, 5, 5, 1, 1, false, false, false);
      filters = [glow1, glow2, dropShadow];
    }
  }

  instance of movieClip 1552  {

    onClipEvent (release) {
      _parent.notice.gotoAndStop(2);
    }
  }

  instance of movieClip 1552  {

    onClipEvent (release) {
      _parent.notice.gotoAndStop(3);
    }
  }

  instance of movieClip 1552  {

    onClipEvent (release) {
      _parent.notice.gotoAndStop(4);
    }
  }

  instance of movieClip 1552  {

    onClipEvent (release) {
      getURL('http://tukkun.webs.com/', '_blank');
    }
  }

  instance of movieClip 1552  {

    onClipEvent (release) {
      getURL('http://tukkun.webs.com/donate.htm', '_blank');
    }
  }

  movieClip 2323  {
  }

  movieClip 2326  {
  }

  instance of movieClip 2326  {

    onClipEvent (load) {
      function checkFrame() {
        if (_root.saveGlobal.selectedSave == 0) {
          gotoAndStop(1);
        } else {
          if (_xmouse >= 0 && _xmouse < 120 && _ymouse >= 0 && _ymouse < 80) {
            gotoAndStop(3);
          } else {
            gotoAndStop(2);
          }
        }
      }

      checkFrame();
    }

    onClipEvent (enterFrame) {
      checkFrame();
    }

    onClipEvent (release) {
      if (_root.saveGlobal.selectedSave != 0) {
        _root.saveGlobal.selectedSave = 0;
      } else {
        _root.selectSavefile(_root.saveGlobal.selectedSave);
      }
    }
  }

  instance of movieClip 2326  {

    onClipEvent (load) {
      function checkFrame() {
        if (_root.saveGlobal.selectedSave == 1) {
          gotoAndStop(1);
        } else {
          if (_xmouse >= 0 && _xmouse < 120 && _ymouse >= 0 && _ymouse < 80) {
            gotoAndStop(3);
          } else {
            gotoAndStop(2);
          }
        }
      }

      checkFrame();
    }

    onClipEvent (enterFrame) {
      checkFrame();
    }

    onClipEvent (release) {
      if (_root.saveGlobal.selectedSave != 1) {
        _root.saveGlobal.selectedSave = 1;
      } else {
        _root.selectSavefile(_root.saveGlobal.selectedSave);
      }
    }
  }

  instance of movieClip 2326  {

    onClipEvent (load) {
      function checkFrame() {
        if (_root.saveGlobal.selectedSave == 2) {
          gotoAndStop(1);
        } else {
          if (_xmouse >= 0 && _xmouse < 120 && _ymouse >= 0 && _ymouse < 80) {
            gotoAndStop(3);
          } else {
            if (_root.saveGlobal.selectedSave == 4) {
              gotoAndStop(4);
            } else {
              gotoAndStop(2);
            }
          }
        }
      }

      checkFrame();
    }

    onClipEvent (enterFrame) {
      checkFrame();
    }

    onClipEvent (release) {
      if (Key.isDown(17)) {
        if (_root.saveGlobal.selectedSave != 4) {
          _root.saveGlobal.selectedSave = 4;
        } else {
          _root.selectSavefile(_root.saveGlobal.selectedSave);
        }
      } else {
        if (_root.saveGlobal.selectedSave != 2) {
          _root.saveGlobal.selectedSave = 2;
        } else {
          _root.selectSavefile(_root.saveGlobal.selectedSave);
        }
      }
    }
  }

  instance of movieClip 2326  {

    onClipEvent (load) {
      function checkFrame() {
        if (_root.saveGlobal.selectedSave == 3) {
          gotoAndStop(1);
        } else {
          if (_xmouse >= 0 && _xmouse < 120 && _ymouse >= 0 && _ymouse < 80) {
            gotoAndStop(3);
          } else {
            gotoAndStop(2);
          }
        }
      }

      checkFrame();
    }

    onClipEvent (enterFrame) {
      checkFrame();
    }

    onClipEvent (release) {
      if (_root.saveGlobal.selectedSave != 3) {
        _root.saveGlobal.selectedSave = 3;
      } else {
        _root.selectSavefile(_root.saveGlobal.selectedSave);
      }
    }
  }

  instance of movieClip 2326  {

    onClipEvent (load) {
      function checkFrame() {
        if (_root.saveGlobal.challengeUnlocked != true) {
          gotoAndStop(5);
        } else {
          if (_root.saveGlobal.selectedSave == 5) {
            gotoAndStop(1);
          } else {
            if (_xmouse >= 0 && _xmouse < 120 && _ymouse >= 0 && _ymouse < 80) {
              gotoAndStop(3);
            } else {
              gotoAndStop(2);
            }
          }
        }
      }

      checkFrame();
    }

    onClipEvent (enterFrame) {
      checkFrame();
    }

    onClipEvent (release) {
      if (_root.saveGlobal.challengeUnlocked == true) {
        if (_root.saveGlobal.selectedSave != 5) {
          _root.saveGlobal.selectedSave = 5;
        } else {
          _root.selectSavefile(_root.saveGlobal.selectedSave);
        }
      }
    }
  }

  movieClip 2327  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onPress = function () {
        gotoAndStop(3);
      };

      onDragOver = onPress;
      onDragOut = onRollOut;
      onReleaseOutside = onRollOut;
    }
  }

  instance of movieClip 2327  {

    onClipEvent (release) {
      _root.selectSavefile(_root.saveGlobal.selectedSave);
    }
  }

  movieClip 2329  {
  }

  movieClip 2354  {

    frame 1 {
      stop();
    }

    frame 2 {
      helpText.text = '';
    }

    instance of movieClip 2329  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        ranNum = random(90) + 10;
        helpName = 'tmp' + _root.todayCode + '_' + ranNum;
        _root.help_so = SharedObject.getLocal(helpName, '/');
        _root.help_so.data.emp = '';
        _root.help_so.flush();
        _parent.helpText.text = 'A file called ' + helpName + '.sol has been added to the savefile-containing folder.';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        getURL('http://www.kongregate.com/forums/60-anti-idle-the-game/topics/413025-refund-code', '_blank');
      }
    }

    frame 4 {
      nameText.text = _root.kongregate_username;
      if (_root.kongregate_username == 'Guest') {
        nameText.text = 'You';
      }
      _root.viewCredits = true;
    }
  }

  movieClip 2363  {

    frame 1 {
      function checkTime() {
        _root.systemclock = new Date();
        _root.systemtimenow = _root.systemclock.getTime();
        _root.dow = _root.systemclock.getDay();
        cheattest = _root.systemtimenow - _root.recenttime;
        if (cheattest > 500000) {
          i = 1;
          while (i <= _root.save.gardenCapacity) {
            if (_root.save.gardenTrees[i] != 0 && _root.save.gardenTrees[i] != undefined) {
              _root.save.gardenPurchaseTime[i] += cheattest;
              _root.save.gardenRecentTime[i] += cheattest;
            }
            ++i;
          }
          _root.dispNews(1, 'Error: System clock change detected (' + cheattest + ').', 16711680, 9001);
        }
        _root.recenttime = _root.systemtimenow;
        _root.clock_year = _root.systemclock.getYear() + 1900;
        _root.clock_month = _root.systemclock.getMonth() + 1;
        _root.clock_monthID = _root.clock_year * 100 + _root.clock_month;
        _root.clock_date = _root.systemclock.getDate();
        if (_root.shinyWeekTmp == 0 && _root.clock_year == 2015 && _root.clock_month == 1) {
          _root.shinyWeekTmp = _root.clock_date;
        }
        if (_root.shinyWeek2Tmp == 0 && _root.clock_year == 2015 && _root.clock_month == 3) {
          _root.shinyWeek2Tmp = _root.clock_date;
        }
        _root.clock_hour = _root.systemclock.getHours();
        _root.clock_min = _root.systemclock.getMinutes();
        _root.clock_sec = _root.systemclock.getSeconds();
        _root.todayCode = _root.clock_year * 10000 + _root.clock_month * 100 + _root.clock_date;
        _root.max_date = 31;
        if (_root.clock_month == 4 || _root.clock_month == 6 || _root.clock_month == 9 || _root.clock_month == 11) {
          _root.max_date = 30;
        }
        if (_root.clock_month == 2) {
          _root.max_date = 28;
          if (_root.clock_year % 4 == 0 && _root.clock_year % 100 != 0 || _root.clock_year % 400 == 0) {
            _root.max_date = 29;
          }
        }
        if (isNaN(_root.refresh_year) || _root.refresh_year == 0) {
          _root.refresh_year = _root.clock_year;
          _root.refresh_month = _root.clock_month;
          _root.refresh_date = _root.clock_date;
          _root.refresh_max_date = _root.max_date;
        }
        _root.eventName = 'Attendance';
        _root.eventMaxToken = 200;
        _root.todayEvent = _root.eventList[_root.clock_year % 10][_root.clock_month][_root.clock_date][0];
        _root.idlerAppreciate = false;
        if (_root.saveid > 4) {
          _root.todayEvent = 0;
        }
        if (_root.save.hyperDay[1] == _root.todayCode || _root.save.hyperDay[2] == _root.todayCode) {
          _root.todayEvent = 0;
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Daily Event Token limit is increased by 300') {
            _root.eventMaxToken += 300;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Daily Event Token limit is increased by 800') {
            _root.eventMaxToken += 800;
          }
          if (_root.eventList[yy][mm][dd][i] == 'Progress Bar fills at full speed, even when Idle Mode is on') {
            _root.idlerAppreciate = true;
          }
          ++i;
        }
        if (_root.saveid >= 20) {
          _root.eventName = 'Challenge Mode';
          _root.eventMaxToken = 0;
        } else {
          if (_root.saveid >= 10) {
            _root.eventName = 'Speedrun';
            _root.eventMaxToken = 0;
          }
        }
        if (_root.dow == 0) {
          _root.daydisplay = 'Sunday';
        }
        if (_root.dow == 1) {
          _root.daydisplay = 'Monday';
        }
        if (_root.dow == 2) {
          _root.daydisplay = 'Tuesday';
        }
        if (_root.dow == 3) {
          _root.daydisplay = 'Wednesday';
        }
        if (_root.dow == 4) {
          _root.daydisplay = 'Thursday';
        }
        if (_root.dow == 5) {
          _root.daydisplay = 'Friday';
        }
        if (_root.dow == 6) {
          _root.daydisplay = 'Saturday';
        }
        if (_root.questid > _root.save.questid) {
          _root.save.quest_date = _root.clock_date;
        }
        if (_root.clock_sec < 10) {
          _root.clock_sec = '0' + _root.clock_sec;
        }
        if (_root.clock_min < 10) {
          _root.clock_min = '0' + _root.clock_min;
        }
        if (_root.clock_hour < 10) {
          _root.clock_hour = '0' + _root.clock_hour;
        }
        if (_root.clock_date < 10) {
          _root.clock_date = '0' + _root.clock_date;
        }
        if (_root.clock_month < 10) {
          _root.clock_month = '0' + _root.clock_month;
        }
        _root.clock_display = _root.clock_hour + ':' + _root.clock_min + ':' + _root.clock_sec;
        _root.clock_display2 = _root.clock_year + '-' + _root.clock_month + '-' + _root.clock_date + ' ' + _root.clock_hour + ':' + _root.clock_min;
        _root.clock_year = _root.systemclock.getYear() + 1900;
        _root.clock_month = _root.systemclock.getMonth() + 1;
        _root.clock_date = _root.systemclock.getDate();
        _root.clock_hour = _root.systemclock.getHours();
        _root.clock_min = _root.systemclock.getMinutes();
        _root.clock_sec = _root.systemclock.getSeconds();
        _root.todayCode = _root.clock_year * 10000 + _root.clock_month * 100 + _root.clock_date;
        tempLegend = 13 + Math.floor(Math.floor(_root.systemtimenow / 86400000) * 13 % 56);
        if (_root.save.fcgLegendDeck != tempLegend) {
          _root.save.fcgLegendDeck = tempLegend;
          _root.save.fcgLegendLife = 10;
        }
        if (_root._currentframe == 13) {
          if (_root.todayCode != _root.save.todayCode2) {
            i = 1;
            while (i <= 7) {
              _root.save.expGraph[i - 1] = _root.save.expGraph[i];
              _root.save.expGraph2[i - 1] = _root.save.expGraph2[i];
              ++i;
            }
            i = 0;
            while (i <= 40) {
              _root.save.expSauce[i] = 0;
              _root.save.coinSauce[i] = 0;
              ++i;
            }
            _root.save.expGraph[7] = 0;
            _root.save.expGraph2[7] = 0;
            _root.save.todayCode2 = _root.todayCode;
          }
          if (_root.todayCode != _root.save.todayCode && (_root.cursoridle < 5 || _root.clock_hour >= 9) && sessionDaily < _root.thisSession / 86400 + 2 && _root.saveid < 10 || _root.anotherDay == true) {
            if (_root.anotherDay != true) {
              sessionDaily += 1;
            }
            if (_root.save.curBanRefID != _root.clock_monthID) {
              _root.save.curBanRefID = _root.clock_monthID;
              _root.save.whiteCoin += _root.save.remStupidity * 10;
              _root.save.remStupidity = _root.save.totalStupidity;
              _root.save.arenaSampleCraft = 3;
              _root.save.hyperDayRem = 3;
              _root.save.regretRem = 1;
            }
            if (_root.clock_date == '01' || _root.todayCode - _root.save.todayCode == 1 || _root.anotherDay == true) {
              _root.save.consecutiveDays += 1;
              if (_root.save.maxConsecutiveDays < _root.save.consecutiveDays) {
                _root.save.maxConsecutiveDays = _root.save.consecutiveDays;
              }
            } else {
              _root.save.consecutiveDays = 1;
            }
            if (_root.save.bestLevel >= 7) {
              _root.save.dailyPending = true;
              _root.dailyBonusButton.gotoAndStop(2);
            }
            _root.save.todayCode = _root.todayCode;
            if (_root.anotherDay != true) {
              _root.save.eventTokenToday = 0;
              _root.save.progBoxToday = 0;
            }
            _root.save.kanaReceived1 = false;
            _root.save.kanaReceived2 = false;
            _root.restockModule(0);
            i = 1;
            while (i <= 50) {
              _root.save.specialStock[i] = 0;
              ++i;
            }
            i = 1;
            while (i <= 34) {
              if (Math.random() < 0.6) {
                _root.save.specialStock[i] = random(21) + 5;
              }
              if (_root.saveid >= 20) {
                _root.save.specialStock[i] = 5;
              }
              ++i;
            }
            _root.save.specialStock[1] = 1;
            _root.save.specialStock[2] = 5;
            _root.save.specialStock[27] = 1;
            _root.save.specialStock[28] = 1;
            _root.save.specialStock[29] = 1;
            _root.save.specialStock[30] = 1;
            if (_root.save.petHealth > 0) {
              _root.save.specialStock[31] = 1;
            } else {
              _root.save.specialStock[31] = 0;
            }
            if (_root.save.totalStupidity >= 150) {
              _root.save.specialStock[35] = 1;
            } else {
              _root.save.specialStock[35] = 0;
            }
            i = 1;
            while (i <= 100) {
              if (_root.save.mainQuestRank[i] != undefined) {
                delete _root.save.mainQuestRank[i];
              }
              ++i;
            }
            _root.save.arenaKommanderSkip = 2;
            _root.save.permaBanRes = 1;
            _root.save.arenaCorruptToday = 0;
            _root.save.arenaBonusChange = 50;
            _root.save.arenaNerfCount = 0;
            _root.save.arenaNerfNext = 1000;
            _root.save.battleDaily = false;
            _root.save.buttonPressToday = 0;
            _root.save.arcadeTodayPercent = 0;
            _root.save.todayHighPong = 0;
            _root.save.todayHighAvoidance = 0;
            _root.save.todayHighMath = 0;
            _root.save.todayHighWhack = 0;
            _root.save.todayHighMind = 0;
            _root.save.todayHighBalance = 0;
            _root.save.todayHighCount = 0;
            _root.save.todayParPong = Math.floor(14000 + Math.random() * 7000) * 100;
            _root.save.todayParAvoidance = Math.floor(5000 + Math.random() * 2500) * 100;
            _root.save.todayParMath = Math.floor(10000 + Math.random() * 5000) * 100;
            _root.save.todayParWhack = Math.floor(15000 + Math.random() * 7500) * 100;
            _root.save.todayParMind = Math.floor(20000 + Math.random() * 10000) * 100;
            _root.save.todayParBalance = Math.floor(28000 + Math.random() * 14000) * 100;
            _root.save.todayParCount = Math.floor(600 + Math.random() * 300) * 10000;
            _root.save.arcadeTradeIn = false;
            _root.save.arcadeBuyCount = 0;
            _root.save.arenaSpookyToday = 0;
            _root.save.arenaTriangleToday = 0;
            _root.save.apocSecretKill = 0;
            _root.save.strangeBoxKill = 0;
            _root.save.triangleLandKill = 0;
            _root.save.triangleShoot = 0;
            _root.save.wcDropToday = 0;
            _root.save.stadiumTodayDeathMatch = 0;
            _root.save.petFullnessRestore = 3;
            _root.save.petHealthRestore = 3;
            _root.save.feedToday = 0;
            _root.save.deathMatchEntry = 1;
            _root.save.arenaChaosLeft = _root.save.arenaChaosMax;
            _root.save.arenaUniqueStock = 1;
            _root.save.questToday = 0;
            _root.save.questSkipToday = 0;
            _root.save.questInstaToday = 0;
            _root.save.fishMilestoneToday = 0;
            _root.save.awesomeBless = 250;
            if (_root.anotherDay != true) {
              if (_root.save.fishLevel >= 31) {
                _root.save.fishLevel -= 1;
              }
            }
            if (_root.save.careerLevel[7] >= 100) {
              _root.save.deathMatchEntry = 3;
            }
            _root.save.arenaPyramidCraftT = 0;
            _root.save.arenaMegabossCraftT = 0;
            _root.save.arenaCorruptionCraftT = 0;
            _root.save.arenaRevengeCraftT = 0;
            _root.save.arenaEndlessCraftT = 0;
            _root.save.arenaMaxEntry = 10;
            _root.save.arenaPyramidEntry = _root.save.arenaMaxEntry;
            _root.save.arenaMegabossEntry = _root.save.arenaMaxEntry;
            _root.save.arenaCorruptionEntry = _root.save.arenaMaxEntry;
            _root.save.arenaRevengeEntry = _root.save.arenaMaxEntry;
            _root.save.arenaEndlessEntry = 1;
            _root.save.fcgPack1 = 1;
            _root.save.fcgPack1Cost = 0;
            _root.save.fcgPack2 = 1;
            _root.save.fcgPack2Cost = 0;
            _root.save.fcgPack3 = 1;
            _root.save.fcgPack3Cost = 0;
            _root.save.fcgPack4 = 1;
            _root.save.fcgPack4Cost = 0;
            _root.save.fcgPack5 = 1;
            _root.save.fcgPack5Cost = 0;
            _root.save.robaconBacon += 15;
            _root.save.freeBacon1 += 15;
            _root.save.freeBacon2 += 30;
            if (_root.save.freeBacon1 > 150) {
              _root.save.freeBacon1 = 150;
            }
            if (_root.save.freeBacon2 > 300) {
              _root.save.freeBacon2 = 300;
            }
            _root.save.arcadeToken = 25;
            if (_root.save.careerLevel[6] >= 100 && _root.save.arcadeToken < 75) {
              _root.save.arcadeToken = 75;
            }
            _root.save.fishFatigue = 0;
            _root.save.fishScoreToday = 0;
            _root.save.fishPetFishCooldown = 50;
            _root.save.fishPetFoodCooldown = 3;
            _root.save.fishFoodCooldown = 100;
            _root.save.fishDrinkCooldown = 5;
            _root.save.boostAutoToday = 0;
            _root.anotherDay = false;
          }
        }
      }

      _root.eventName = '';
      sessionDaily = 0;
      _root.shinyWeekTmp = 0;
      _root.shinyWeek2Tmp = 0;
      var startTime = getTimer();
      var numFrames = 0;
      var recentSetting = 40;
      var recentNumFrames = 0;
      var recentStartTime = startTime;
      if (isNaN(_root.fps)) {
        _root.fps = 50;
      }
      upNumber.text = _root.withComma(_root.upnumber);
      if (_root.saveGlobal.latestVersion != _root.upnumber) {
        if (_root.saveGlobal.latestVersion <= 1502) {
          _root.saveGlobal.returning1 = true;
        }
        _root.saveGlobal.latestVersion = _root.upnumber;
        upNumber.textColor = 16776960;
      }
      flashNumber.text = _root.flashVer;
      checkTime();
      onEnterFrame = function () {
        if (_root.house.mainArcade._currentframe == 26) {
          recentSetting = 2;
        } else {
          recentSetting = 40;
        }
        ++numFrames;
        var v2 = getTimer();
        elapsedSeconds = (v2 - startTime) / 1000;
        actualFPS = numFrames / elapsedSeconds;
        ++recentNumFrames;
        if (recentNumFrames >= recentSetting) {
          var v3 = (v2 - recentStartTime) / 1000;
          recentFPSoutput = recentNumFrames / v3;
          recentStartTime = v2;
          recentNumFrames = 0;
          fpsDisplay.text = Math.ceil(recentFPSoutput);
          timeDisplay.text = _root.clock_display2;
          if (recentFPSoutput > 30) {
            fpsDisplay.textColor = 65280;
          } else {
            if (recentFPSoutput > 20) {
              fpsDisplay.textColor = 16776960;
            } else {
              fpsDisplay.textColor = 16711680;
            }
          }
          delay = 0;
          checkTime();
        }
        _root.fpsnoround = recentFPSoutput;
        _root.fps = Math.ceil(recentFPSoutput);
        if (_root.fps < 5) {
          _root.fps = 5;
        }
        if (_root.house.mainArcade._currentframe == 26 && _root.fps < 30) {
          _root.fps = 30;
        }
        if (isNaN(_root.fps)) {
          _root.fps = 50;
        }
      };

    }
  }

  movieClip 2367  {
  }

  // unknown tag 88 length 65

  // unknown tag 88 length 285

  movieClip 2408  {

    instance of movieClip 2367  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
      }
    }
  }

  movieClip 2425  {
  }

  movieClip 2427  {
  }

  movieClip 2453  {

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.questToken >= _parent.costQ && _root.save.au < _parent._parent.auView) {
          _root.save.questToken -= _parent.costQ;
          _root.save.au = _parent._parent.auView;
          _root.showPopup('Unlocked', 'You have gained early access to this update. You may need to refresh the game for some changes to take effect.');
        } else {
          _root.showPopup('Error', 'You don\'t have enough Quest Tokens.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.eventToken >= _parent.costE && _root.save.au < _parent._parent.auView) {
          _root.save.eventToken -= _parent.costE;
          _root.save.au = _parent._parent.auView;
          _root.showPopup('Unlocked', 'You have gained early access to this update. You may need to refresh the game for some changes to take effect.');
        } else {
          _root.showPopup('Error', 'You don\'t have enough Event Tokens.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.challengeDeadline = _root.challengeTime[_parent._parent.auView];
        _root.saveid = 20 + _parent._parent.auView;
        _root.gotoAndStop(19);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.challengeDeadline = 0;
        _root.saveid = 10;
        _root.gotoAndStop(19);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.challengeDeadline = 0;
        _root.saveid = 11;
        _root.gotoAndStop(19);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.challengeDeadline = 0;
        _root.saveid = 12;
        _root.gotoAndStop(19);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.challengeDeadline = 0;
        _root.saveid = 13;
        _root.gotoAndStop(19);
      }
    }
  }

  movieClip 2455  {
  }

  button 2456 {

    on (release) {
      gotoAndStop(1);
    }
  }

  // unknown tag 88 length 44

  movieClip 2462  {
  }

  movieClip 2466  {
  }

  movieClip 2470  {
  }

  movieClip 2471  {
  }

  movieClip 2474  {
  }

  // unknown tag 88 length 44

  movieClip 2550  {

    frame 1 {
      stop();
      challengeName = 'Untitled Challenge';
      challengeDesc = 'This is a challenge!';
      challengeObjective = 'Reach level 5,000';
      challengeRule1 = '';
      challengeRule2 = '';
      challengeRule3 = '';
      challengeRule4 = '';
      challengeRule5 = '';
      challengeRule6 = '';
      challengeRule7 = '';
      challengeRule8 = '';
      challengeRule9 = '';
      challengeRule10 = '';
      challengeRule11 = '';
      challengeMedalName = '';
      challengeSkinName = '';
      challengeSkinColor = '';
      challengeEyeColor = '';
    }

    frame 2 {
      if (_root.kongregate_username != 'Guest') {
        gotoAndStop(3);
      }
    }

    instance of movieClip 2474  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }

      onClipEvent (keyPress '<Space>') {
        _parent.nextFrame();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.prevFrame();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.nextFrame();
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent.challengeObjective != '' && _parent.challengeRule1 != '' && _parent.challengeRule2 != '') {
          _parent.nextFrame();
        } else {
          _root.showPopup('Error', 'Please make sure you have filled in all required boxes.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent.challengeDesc != 'This is a challenge!' && _parent.challengeDesc != '' && _parent.challengeName != 'Untitled Challenge' && _parent.challengeName != '') {
          _parent.nextFrame();
        } else {
          _root.showPopup('Error', 'Please make sure you have filled in all required boxes. Also, you cannot use the default challenge name and description.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent.challengeMedalName != '' && _parent.challengeSkinColor != '' && _parent.challengeEyeColor != '') {
          skinColorValid = false;
          eyeColorValid = false;
          if (_parent.challengeSkinColor.indexOf('#') != -1) {
            if (_parent.challengeSkinColor.length == 7) {
              skinColorValid = true;
            }
          }
          if (_parent.challengeSkinColor.indexOf('/') != -1) {
            if (_parent.challengeSkinColor.length >= 5) {
              skinColorValid = true;
            }
          }
          if (_parent.challengeEyeColor.indexOf('#') != -1) {
            if (_parent.challengeEyeColor.length == 7) {
              eyeColorValid = true;
            }
          }
          if (_parent.challengeEyeColor.indexOf('/') != -1) {
            if (_parent.challengeEyeColor.length >= 5) {
              eyeColorValid = true;
            }
          }
          if (skinColorValid == true && eyeColorValid == true) {
            _parent.nextFrame();
          } else {
            _root.showPopup('Error', 'Invalid color. Please check again.');
          }
        } else {
          _root.showPopup('Error', 'Please make sure you have filled in all required boxes.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.clipContent = '<big>' + _parent.challengeName + '</big>\n\n' + _parent.challengeDesc + '\n\n_____\n';
        _root.clipContent += '\n\n*Objective:* ' + _parent.challengeObjective;
        _root.clipContent += '\n\n*Rules:*\n\n<pre>';
        k = 0;
        i = 1;
        while (i <= 11) {
          if (_parent['challengeRule' + i] != '') {
            k += 1;
            _root.clipContent += '\n' + k + '. ' + _parent['challengeRule' + i];
          }
          ++i;
        }
        _root.clipContent += '</pre>\n\n*Rewards:*';
        _root.clipContent += '\n* Medal Name: *' + _parent.challengeMedalName + '*';
        _root.clipContent += '\n* Skin Color: *' + _parent.challengeSkinColor + '*';
        _root.clipContent += '\n* Eye Color: *' + _parent.challengeEyeColor + '*';
        System.setClipboard(_root.clipContent);
        getURL('http://www.kongregate.com/forums/60/topics/341209', '_blank');
      }
    }
  }

  movieClip 2551  {

    frame 1 {
      stop();
    }

    frame 2 {
      function checkTimeX() {
        _root.systemclock = new Date();
        _root.systemtimenow = _root.systemclock.getTime();
      }

      checkTimeX();
      auView = 0;
      for (;;) {
        if (!(_root.systemtimenow > _root.challengeTime[auView] && auView < _root.challengeTime.length - 2)) break;
        auView += 1;
      }
      onEnterFrame = function () {
        checkTimeX();
      };

    }

    instance of movieClip 2408  {

      onClipEvent (enterFrame) {
        gotoAndStop(_parent.auView + 2);
      }
    }

    instance of movieClip 2453  {

      onClipEvent (enterFrame) {
        if (_parent.auView == 0) {
          gotoAndStop(7);
        } else {
          if (_parent.auView == _root.challengeTime.length - 1 || _parent.auView == -1) {
            gotoAndStop(6);
          } else {
            if (_root.systemtimenow > _root.challengeTime[_parent.auView]) {
              gotoAndStop(5);
            } else {
              if (_root.challengeTime[_parent.auView] != Infinity && _root.systemtimenow > _root.challengeTime[_parent.auView - 1] || _root.kongregate_username == 'Kongregate Username') {
                gotoAndStop(4);
                timeLeft = (_root.challengeTime[_parent.auView] - _root.systemtimenow) / 1000;
                elapsed_days = Math.floor(timeLeft / 86400);
                remaining = timeLeft - elapsed_days * 86400;
                elapsed_hours = Math.floor(remaining / 3600);
                remaining -= elapsed_hours * 3600;
                elapsed_minutes = Math.floor(remaining / 60);
                remaining -= elapsed_minutes * 60;
                elapsed_seconds = Math.floor(remaining / 1);
                remaining -= elapsed_seconds * 1;
                c1Text.text = Math.floor(elapsed_days / 10);
                c2Text.text = elapsed_days % 10;
                c3Text.text = Math.floor(elapsed_hours / 10);
                c4Text.text = elapsed_hours % 10;
                c5Text.text = Math.floor(elapsed_minutes / 10);
                c6Text.text = elapsed_minutes % 10;
                c7Text.text = Math.floor(elapsed_seconds / 10);
                c8Text.text = elapsed_seconds % 10;
                costQ = elapsed_days * 20000 + 250000;
                costE = elapsed_days * 2000 + 25000;
                if (costQ < 0) {
                  costQ = 0;
                }
                if (costE < 0) {
                  costE = 0;
                }
                costQText.text = _root.withComma(costQ);
                costEText.text = _root.withComma(costE);
              } else {
                gotoAndStop(1);
              }
            }
          }
        }
      }
    }

    instance of movieClip 2455  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.auView > 0) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release, keyPress '<Left>') {
        if (_parent.auView > 0) {
          _parent.auView -= 1;
        }
      }
    }

    instance of movieClip 2455  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.auView < _root.challengeTime.length - 2) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release, keyPress '<Right>') {
        if (_parent.auView < _root.challengeTime.length - 2) {
          _parent.auView += 1;
        }
      }
    }

    instance of movieClip 2471  {

      onClipEvent (load) {
        gotoAndStop(4);
      }

      onClipEvent (enterFrame) {
        if (!isNaN(_root.saveGlobal.challengeTime[_parent.auView])) {
          if (_parent.auView == 0) {
            gotoAndStop(3);
          } else {
            if (_root.saveGlobal.challengePerfect[_parent.auView] == true) {
              gotoAndStop(2);
            } else {
              gotoAndStop(1);
            }
          }
          elapsed_days = Math.floor(_root.saveGlobal.challengeTime[_parent.auView] / 86400);
          remaining = _root.saveGlobal.challengeTime[_parent.auView] - elapsed_days * 86400;
          elapsed_hours = Math.floor(remaining / 3600);
          remaining -= elapsed_hours * 3600;
          elapsed_minutes = Math.floor(remaining / 60);
          remaining -= elapsed_minutes * 60;
          elapsed_seconds = Math.floor(remaining / 1);
          remaining -= elapsed_seconds * 1;
          if (elapsed_hours < 10) {
            elapsed_hours = '0' + elapsed_hours;
          }
          if (elapsed_minutes < 10) {
            elapsed_minutes = '0' + elapsed_minutes;
          }
          if (elapsed_seconds < 10) {
            elapsed_seconds = '0' + elapsed_seconds;
          }
          if (elapsed_days >= 100) {
            clearInside.timeDisp.text = '-------------';
          } else {
            clearInside.timeDisp.text = elapsed_days + 'd + ' + elapsed_hours + ':' + elapsed_minutes + ':' + elapsed_seconds;
          }
        } else {
          gotoAndStop(4);
        }
      }
    }
  }

  movieClip 2552  {
  }

  movieClip 2558  {

    frame 1 {
      stop();
    }

    instance of movieClip 2552  {

      onClipEvent (release, keyPress '<Escape>') {
        _parent.gotoAndStop(1);
      }
    }
  }

  instance of movieClip 1552  {

    onClipEvent (rollOver, dragOver) {
      _root.actiondescription = '<b><font color=\'#FFFF00\'>Join the Discussion!</font></b>\nDid you know that Anti-Idle: The Game has a whole FORUM on Kongregate? Click this button to visit it now! (Opens in a new tab)\n\nEveryone can view the forums, but a Kongregate account is required to post.';
    }

    onClipEvent (rollOut, dragOut) {
      _root.actiondescription = '';
    }

    onClipEvent (release) {
      getURL('http://www.kongregate.com/forums/60', '_blank');
    }
  }

  instance of movieClip 1552  {

    onClipEvent (rollOver, dragOver) {
      _root.actiondescription = '<b><font color=\'#FFFF00\'>FAQ - Need Help?</font></b>\nIf you need help, don\'t forget to check out the FAQ! (Opens in a new tab)\nYou can also ask your own stupid questions here.\n\nOh, and \'FAQ\' stands for \'Frequently Asked Questions\', just so you know.';
    }

    onClipEvent (rollOut, dragOut) {
      _root.actiondescription = '';
    }

    onClipEvent (release) {
      getURL('http://www.kongregate.com/forums/60-anti-idle-the-game/topics/166284-faq', '_blank');
    }
  }

  frame 12 {
    function addSaveVar(varName, varValue) {
      if (_root.save[varName] == undefined || isNaN(_root.save[varName]) && !isNaN(varValue) && _root.saveid != -1) {
        _root.save[varName] = varValue;
      }
    }

    function addNewsType(typeID, feature, defaultImportance, defaultColor, sauceName) {
      _root.newsCount += 1;
      _root.newsID[_root.newsCount] = typeID;
      _root.newsFeature[typeID] = feature;
      _root.newsSauceName[_root.newsCount] = sauceName;
      if (typeID != 0 && isNaN(_root.saveGlobal.breakR[typeID])) {
        if (defaultImportance == 4) {
          _root.saveGlobal.breakTab1[typeID] = true;
          _root.saveGlobal.breakTab2[typeID] = true;
          _root.saveGlobal.breakTab3[typeID] = true;
          _root.saveGlobal.breakTab4[typeID] = true;
          _root.saveGlobal.breakAll[typeID] = true;
          _root.saveGlobal.breakFeature[typeID] = true;
        } else {
          if (defaultImportance == 3) {
            _root.saveGlobal.breakTab1[typeID] = true;
            _root.saveGlobal.breakTab2[typeID] = true;
            _root.saveGlobal.breakTab3[typeID] = true;
            _root.saveGlobal.breakTab4[typeID] = false;
            _root.saveGlobal.breakAll[typeID] = false;
            _root.saveGlobal.breakFeature[typeID] = true;
          } else {
            if (defaultImportance == 2) {
              _root.saveGlobal.breakTab1[typeID] = true;
              _root.saveGlobal.breakTab2[typeID] = true;
              _root.saveGlobal.breakTab3[typeID] = false;
              _root.saveGlobal.breakTab4[typeID] = false;
              _root.saveGlobal.breakAll[typeID] = false;
              _root.saveGlobal.breakFeature[typeID] = true;
            } else {
              if (defaultImportance == 1) {
                _root.saveGlobal.breakTab1[typeID] = true;
                _root.saveGlobal.breakTab2[typeID] = false;
                _root.saveGlobal.breakTab3[typeID] = false;
                _root.saveGlobal.breakTab4[typeID] = false;
                _root.saveGlobal.breakAll[typeID] = false;
                _root.saveGlobal.breakFeature[typeID] = false;
              } else {
                _root.saveGlobal.breakTab1[typeID] = false;
                _root.saveGlobal.breakTab2[typeID] = false;
                _root.saveGlobal.breakTab3[typeID] = false;
                _root.saveGlobal.breakTab4[typeID] = false;
                _root.saveGlobal.breakAll[typeID] = false;
                _root.saveGlobal.breakFeature[typeID] = false;
              }
            }
          }
        }
        if (feature == 0) {
          _root.saveGlobal.breakFeature[typeID] = false;
        }
        _root.saveGlobal.breakR[typeID] = Math.floor(defaultColor / 65536);
        _root.saveGlobal.breakG[typeID] = Math.floor((defaultColor - _root.saveGlobal.breakR[typeID] * 65536) / 256);
        _root.saveGlobal.breakB[typeID] = Math.floor(defaultColor - _root.saveGlobal.breakR[typeID] * 65536 - _root.saveGlobal.breakG[typeID] * 256);
      }
    }

    _root.autoBanned = 0;
    _root.systemclock = new Date();
    _root.systemtimenow = _root.systemclock.getTime();
    var globalSetting = SharedObject.getLocal('ATG_Global', '/');
    var my_so = SharedObject.getLocal('antiIdle_file0', '/');
    var another_so = SharedObject.getLocal('antiIdle_temp', '/');
    if (isNaN(_root.saveid)) {
      _root.saveid = -1;
    }
    if (_root.saveid == 0) {
      var my_so = SharedObject.getLocal('antiIdle_file0', '/');
    }
    if (_root.saveid == 1) {
      var my_so = SharedObject.getLocal('antiIdle_file1', '/');
    }
    if (_root.saveid == 2) {
      var my_so = SharedObject.getLocal('antiIdle_file2', '/');
    }
    if (_root.saveid == 3) {
      var my_so = SharedObject.getLocal('antiIdle_file3', '/');
    }
    if (_root.saveid == 4) {
      var my_so = SharedObject.getLocal('antiIdle_file4', '/');
    }
    if (_root.saveid == 10) {
      var my_so = SharedObject.getLocal('antiIdle_file10', '/');
    }
    if (_root.saveid == 11) {
      var my_so = SharedObject.getLocal('antiIdle_file11', '/');
    }
    if (_root.saveid == 12) {
      var my_so = SharedObject.getLocal('antiIdle_file12', '/');
    }
    if (_root.saveid == 13) {
      var my_so = SharedObject.getLocal('antiIdle_file13', '/');
    }
    if (_root.saveid >= 20) {
      var my_so = SharedObject.getLocal('antiIdle_file' + _root.saveid, '/');
    }
    if (_root.craftTool == true) {
      var my_so = SharedObject.getLocal('tukkun_craftSim', '/');
    }
    var save = _root.my_so.data;
    var saveGlobal = _root.globalSetting.data;
    if (_root.saveGlobal.graphicQuality == undefined) {
      _root.saveGlobal.graphicQuality = 'HIGH';
      _root.saveGlobal.keyboardLayout = 'qwerty';
    }
    if (_root.saveGlobal.showTitle == undefined) {
      _root.saveGlobal.showTitle = true;
    }
    if (_root.saveGlobal.aurianMode == undefined) {
      _root.saveGlobal.aurianMode = false;
    }
    if (isNaN(_root.saveGlobal.latestVersion)) {
      _root.saveGlobal.latestVersion = 1380;
    }
    if (_root.saveGlobal.speedrunUnlock0 == undefined) {
      _root.saveGlobal.speedrunUnlock0 = false;
      _root.saveGlobal.speedrunUnlock1 = false;
      _root.saveGlobal.speedrunUnlock2 = false;
      _root.saveGlobal.speedrunUnlock3 = false;
    }
    if (_root.saveGlobal.challengePerfect == undefined) {
      _root.saveGlobal.challengeTime = new Array();
      _root.saveGlobal.challengeAttempted = new Array();
      _root.saveGlobal.challengePerfect = new Array();
    }
    if (_root.saveGlobal.breakTab1 == undefined) {
      _root.saveGlobal.breakTab1 = new Array();
      _root.saveGlobal.breakTab2 = new Array();
      _root.saveGlobal.breakTab3 = new Array();
      _root.saveGlobal.breakTab4 = new Array();
      _root.saveGlobal.breakAll = new Array();
      _root.saveGlobal.breakFeature = new Array();
      _root.saveGlobal.breakR = new Array();
      _root.saveGlobal.breakG = new Array();
      _root.saveGlobal.breakB = new Array();
    }
    if (_root.saveGlobal.adminMode == undefined) {
      _root.saveGlobal.adminMode = '';
    }
    if (_root.saveGlobal.defTab == undefined) {
      _root.saveGlobal.defTab = 2;
    }
    if (_root.saveGlobal.selectedSave == undefined) {
      _root.saveGlobal.selectedSave = 0;
      _root.saveGlobal.playTime = ['?', '?', '?', '?'];
      _root.saveGlobal.curLevel = ['', '', '', ''];
      _root.saveGlobal.ascCount = ['', '', '', ''];
    }
    if (_root.saveGlobal.skipMenu == undefined) {
      _root.saveGlobal.skipMenu = false;
    }
    if (_root.saveid <= 3) {
      if (_root.save.dbExp > 100 || _root.save.dbCoin > 100 || _root.save.dbGreenCoin > 100 || _root.save.dbBlueCoin > 100) {
        if (_root.save.safeHacking == false && _root.save.submitScore == true) {
          _root.my_so.clear();
          _root.gotoAndStop(1);
        }
      }
    }
    if (_root.saveid < 10 || _root.saveid >= 20) {
      addSaveVar('lockedFile', false);
    } else {
      addSaveVar('lockedFile', true);
    }
    addSaveVar('pleaseRead', 'If you wish to hack, please turn Safe Hacking Mode on by changing the safeHacking variable to true (ticking the box in .sol Editor).');
    addSaveVar('safeHacking', false);
    if (_root.saveid < 20) {
      addSaveVar('submitScore', false);
      addSaveVar('submitScoreConfirm', false);
    } else {
      addSaveVar('submitScore', false);
      addSaveVar('submitScoreConfirm', true);
    }
    addSaveVar('refundReceived', false);
    addSaveVar('refundCooldown', 0);
    addSaveVar('refundTier', 0);
    addSaveVar('refundCode', 0);
    addSaveVar('noobMode', false);
    addSaveVar('offlineProgress', false);
    addSaveVar('offlineProgressFirst', false);
    addSaveVar('offlineProgressPromo', false);
    addSaveVar('gOldAscension', false);
    addSaveVar('gDifficulty', 1);
    addSaveVar('newbieSupport', 0);
    addSaveVar('bankCoin', 0);
    addSaveVar('bankGreenCoin', 0);
    addSaveVar('bankBlueCoin', 0);
    addSaveVar('bankGardenFruit', 0);
    addSaveVar('bankGardenPoint', 0);
    addSaveVar('bankArenaPixel', 0);
    addSaveVar('bankArenaCraft', 0);
    addSaveVar('dbExp', 100);
    addSaveVar('dbCoin', 100);
    addSaveVar('dbGreenCoin', 100);
    addSaveVar('dbBlueCoin', 100);
    addSaveVar('todayCode', 0);
    addSaveVar('consecutiveDays', 1);
    addSaveVar('maxConsecutiveDays', 1);
    addSaveVar('dailyPending', false);
    addSaveVar('restTime', 0);
    addSaveVar('restEfficiency', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('doubleExpTime', 0);
    addSaveVar('doubleCoinTime', 0);
    addSaveVar('rewardBotTime', 0);
    addSaveVar('autoHarvestTime', 0);
    addSaveVar('eliteButtonTime', 0);
    addSaveVar('batteryChargerTime', 0);
    addSaveVar('stadiumProTime', 0);
    addSaveVar('powerUserTime', 0);
    addSaveVar('demandMasterTime', 0);
    addSaveVar('quickAdventuresTime', 0);
    addSaveVar('eliteFisherTime', 0);
    addSaveVar('noAntsTime', 0);
    addSaveVar('doubleQuestTime', 0);
    addSaveVar('totalPlays', 0);
    addSaveVar('firstPlayed', _root.systemtimenow);
    addSaveVar('lastPlayed', _root.systemtimenow);
    addSaveVar('totalPlayTime', 0);
    addSaveVar('ascendPlayTime', 0);
    addSaveVar('longestSession', 0);
    addSaveVar('longestQuit', 0);
    addSaveVar('mainStatPage', 1);
    addSaveVar('challengeAttempted', [false]);
    addSaveVar('challengeClear', [false]);
    addSaveVar('challengePerfect', [false]);
    addSaveVar('expGraph', [0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expGraph2', [0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expSauce', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('coinSauce', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('expSauceAsc', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('viewStat', 0);
    addSaveVar('viewAchievement', 0);
    addSaveVar('viewEvent', 0);
    addSaveVar('viewQuest', 0);
    addSaveVar('viewOption', 0);
    addSaveVar('manualSave', 0);
    addSaveVar('totalMute', 0);
    addSaveVar('newbieProgress', 0);
    addSaveVar('maxAchievement', 0);
    addSaveVar('trackachnum', 0);
    addSaveVar('userTitle', 'Welcome to Anti-Idle!');
    addSaveVar('achEarnTime', new Array());
    addSaveVar('mainQuestRank', new Array());
    addSaveVar('mainQuestC', 0);
    addSaveVar('mainQuestB', 0);
    addSaveVar('mainQuestA', 0);
    addSaveVar('mainQuestS', 0);
    addSaveVar('mainQuestCount', 0);
    addSaveVar('questDifficulty', 5);
    addSaveVar('questFeature', 'Main');
    addSaveVar('questType', 'Level Up');
    addSaveVar('questSubtype', 'Any');
    addSaveVar('questNeed', 100);
    addSaveVar('questCurrent', 1);
    addSaveVar('questReward', 'Legendary Box');
    addSaveVar('questRewardQuan', 1);
    addSaveVar('questRewardBlueCoin', 1000);
    addSaveVar('questRewardToken', 1000);
    addSaveVar('questBot', 0);
    addSaveVar('questCount', 0);
    addSaveVar('questRecord', 0);
    addSaveVar('questTotal', 0);
    addSaveVar('questToday', 0);
    addSaveVar('questSkipToday', 0);
    addSaveVar('questInstaToday', 0);
    addSaveVar('questStreak', 0);
    addSaveVar('questDescA', 'Reach level');
    addSaveVar('questDescB', 'to unlock other quests. An alternative way is to forfeit this quest.');
    addSaveVar('questTargetDiff', 15);
    addSaveVar('shinyToken', 0);
    addSaveVar('questToken', 0);
    addSaveVar('eventToken', 0);
    addSaveVar('eventTokenToday', 0);
    addSaveVar('hyperDay', [0, 0, 0]);
    addSaveVar('hyperDayDel', 2);
    addSaveVar('hyperDayRem', 3);
    addSaveVar('hyperDayCount', 0);
    addSaveVar('regretRem', 1);
    addSaveVar('arenaSampleCraft', 3);
    addSaveVar('specialShopVisit', 0);
    addSaveVar('featureSpecialShop', false);
    addSaveVar('specialStock', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('bestLevel', 1);
    addSaveVar('level', 1);
    addSaveVar('cursornum', 1);
    addSaveVar('bgNum', 8);
    addSaveVar('currentExp', 0);
    addSaveVar('totalExp', 0);
    addSaveVar('bestExp', 0);
    addSaveVar('expLag', 0);
    addSaveVar('coinLag', 0);
    addSaveVar('expFrame', 0);
    addSaveVar('coinFrame', 0);
    addSaveVar('greenCoinFrame', 0);
    addSaveVar('blueCoinFrame', 0);
    addSaveVar('dt', 0);
    addSaveVar('coin', 10000);
    addSaveVar('greenCoin', 0);
    addSaveVar('blueCoin', 0);
    addSaveVar('whiteCoin', 0);
    addSaveVar('whiteCoinRefund', 0);
    addSaveVar('whiteCoinRefundTotal', 0);
    addSaveVar('coinMax', 10000);
    addSaveVar('greenCoinMax', 0);
    addSaveVar('blueCoinMax', 0);
    addSaveVar('whiteCoinMax', 0);
    addSaveVar('coinOvercap', 0);
    addSaveVar('greenCoinOvercap', 0);
    addSaveVar('blueCoinOvercap', 0);
    addSaveVar('redCoinSpent', 0);
    addSaveVar('wcDropToday', 0);
    addSaveVar('rewardClaim', 0);
    addSaveVar('rewardClaimAuto', 0);
    addSaveVar('rewardClaimManual', 0);
    addSaveVar('progFirstRestock', false);
    addSaveVar('progTutorial', false);
    addSaveVar('restTutorial', false);
    addSaveVar('progSpeedAuto', 30);
    addSaveVar('progSpeedManual', 100);
    addSaveVar('progModuleName
    addSaveVar('progModuleTier', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleSize', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleShiny', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleType', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleChance', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleEffect', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleCost', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progModuleScroll', 0);
    addSaveVar('progModuleSlot', 30);
    addSaveVar('progStore', 100);
    addSaveVar('megaBoostPotion', 0);
    addSaveVar('boostPotion', 0);
    addSaveVar('boostFreeze', 0);
    addSaveVar('boost', 100);
    addSaveVar('boostProg', 100);
    addSaveVar('boostExp', 100);
    addSaveVar('boostCoin', 100);
    addSaveVar('boostMax', 500);
    addSaveVar('boostMin', 100);
    addSaveVar('boostPremium', 0);
    addSaveVar('boostZebra', 0);
    addSaveVar('boostTemp', 0);
    addSaveVar('boostPurchased', 0);
    addSaveVar('ants', 100);
    addSaveVar('speedRun9001', 2147483647);
    addSaveVar('speedRun9002', 2147483647);
    addSaveVar('speedRunAscend', 2147483647);
    addSaveVar('speedRunAscendHard', 2147483647);
    addSaveVar('speedRunAscendImpossible', 2147483647);
    addSaveVar('count9002', 0);
    addSaveVar('speedRunMode1000', 2147483647);
    addSaveVar('speedRunMode2000', 2147483647);
    addSaveVar('speedRunMode3000', 2147483647);
    addSaveVar('speedRunMode4000', 2147483647);
    addSaveVar('speedRunMode5000', 2147483647);
    addSaveVar('speedRunMode6000', 2147483647);
    addSaveVar('speedRunMode7000', 2147483647);
    addSaveVar('speedRunMode8000', 2147483647);
    addSaveVar('speedRunMode9000', 2147483647);
    addSaveVar('speedRunMode9001', 2147483647);
    addSaveVar('speedRunClear', 0);
    addSaveVar('speedRunScore', 0);
    addSaveVar('speedRunCoin', 0);
    addSaveVar('speedRunTotalCoin', 0);
    addSaveVar('speedRunNextDay', 1440);
    addSaveVar('petExist', 0);
    addSaveVar('petName', '');
    addSaveVar('petBestLevel', 0);
    addSaveVar('petFullness', 0);
    addSaveVar('petHealth', 0);
    addSaveVar('petMana', 0);
    addSaveVar('petStat', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('petFullnessRestore', 1);
    addSaveVar('petHealthRestore', 1);
    addSaveVar('deadPetName', '');
    addSaveVar('deadPetStat', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('botLevel', 1);
    addSaveVar('botExp', 0);
    addSaveVar('botEnergy', 14400);
    addSaveVar('botPoint', 1000);
    addSaveVar('botOp', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('botActive', false);
    addSaveVar('botCurrentOp', 0);
    addSaveVar('botCurrentOpNum', 0);
    addSaveVar('botCurrentOpMax', 0);
    addSaveVar('botCurrentOpTime', 0);
    addSaveVar('botPill', 0);
    addSaveVar('botPillCrafted', 0);
    addSaveVar('botPillUsed', 0);
    addSaveVar('banned', 0);
    addSaveVar('bannedHard', 0);
    addSaveVar('bannedImpossible', 0);
    addSaveVar('banned1662', 0);
    addSaveVar('bannedB', 0);
    addSaveVar('idleMode', false);
    addSaveVar('boostAuto', false);
    addSaveVar('boostAutoPct', 100);
    addSaveVar('boostAutoCondition', 4);
    addSaveVar('boostAutoMax', 150);
    addSaveVar('boostAutoToday', 0);
    addSaveVar('newHouseStick', 0);
    addSaveVar('newHouseHead', 0);
    addSaveVar('newHouseEyes', 0);
    addSaveVar('newHouseMouth', 0);
    addSaveVar('newHouseHat', 0);
    addSaveVar('newHouseGlasses', 0);
    addSaveVar('newHouseShirt', 0);
    addSaveVar('newHouseLeftHand', 0);
    addSaveVar('newHouseRightHand', 0);
    addSaveVar('newHousePants', 0);
    addSaveVar('newHouseShoes', 0);
    addSaveVar('newHouseFloor', 0);
    addSaveVar('newHouseWall', 0);
    addSaveVar('newHouseWindow', 0);
    addSaveVar('newHouseWallObject', 0);
    addSaveVar('newHouseDesk', 0);
    addSaveVar('newHouseDeskObject', 0);
    addSaveVar('newHouseBackObject', 0);
    addSaveVar('newHouseFrontObject', 0);
    addSaveVar('newHousePet', 0);
    addSaveVar('newHouseCover', 0);
    addSaveVar('newHouseUStick', [1]);
    addSaveVar('newHouseUHead', [1]);
    addSaveVar('newHouseUEyes', [1]);
    addSaveVar('newHouseUMouth', [1]);
    addSaveVar('newHouseUHat', [1]);
    addSaveVar('newHouseUGlasses', [1]);
    addSaveVar('newHouseUShirt', [1]);
    addSaveVar('newHouseULeftHand', [1]);
    addSaveVar('newHouseURightHand', [1]);
    addSaveVar('newHouseUPants', [1]);
    addSaveVar('newHouseUShoes', [1]);
    addSaveVar('newHouseUFloor', [1]);
    addSaveVar('newHouseUWall', [1]);
    addSaveVar('newHouseUWindow', [1]);
    addSaveVar('newHouseUWallObject', [1]);
    addSaveVar('newHouseUDesk', [1]);
    addSaveVar('newHouseUDeskObject', [1]);
    addSaveVar('newHouseUBackObject', [1]);
    addSaveVar('newHouseUFrontObject', [1]);
    addSaveVar('newHouseUPet', [1]);
    addSaveVar('newHouseUCover', [1]);
    addSaveVar('newHouseXWindow', 220);
    addSaveVar('newHouseXWallObject', 400);
    addSaveVar('newHouseXDesk', 180);
    addSaveVar('newHouseXBackObject', 195);
    addSaveVar('newHouseXFrontObject', 0);
    addSaveVar('newHouseXPet', 350);
    addSaveVar('newHouseXStickman', 80);
    addSaveVar('houseRoom1', false);
    addSaveVar('houseRoom2', false);
    addSaveVar('houseRoom3', false);
    addSaveVar('houseWood', 0);
    addSaveVar('houseBrick', 0);
    addSaveVar('houseNail', 0);
    addSaveVar('housePaint', 0);
    addSaveVar('houseMagicRock', 0);
    addSaveVar('houseWhiteCoin', 0);
    addSaveVar('houseWhiteCoinMax', 0);
    addSaveVar('houseActivityCrystal', 0);
    addSaveVar('houseActivityCrystalToday', 0);
    addSaveVar('houseActivityCrystalMax', 0);
    addSaveVar('houseAchievementCrystal', 0);
    addSaveVar('houseQuestCrystal', 0);
    addSaveVar('houseAscensionCrystal', 0);
    addSaveVar('houseFloorUnlocked', [0, 1]);
    addSaveVar('houseWallUnlocked', [0, 1]);
    addSaveVar('houseObjectUnlocked', [0, 1]);
    addSaveVar('houseSkinUnlocked', [0, 1]);
    addSaveVar('houseBorderUnlocked', [0, 1]);
    addSaveVar('houseHatUnlocked', [0, 1]);
    addSaveVar('houseLeftEyeUnlocked', [0, 1]);
    addSaveVar('houseRightEyeUnlocked', [0, 1]);
    addSaveVar('houseGlassesUnlocked', [0, 1]);
    addSaveVar('houseMouthUnlocked', [0, 1]);
    addSaveVar('houseShirtUnlocked', [0, 1]);
    addSaveVar('houseLeftHandUnlocked', [0, 1]);
    addSaveVar('houseRightHandUnlocked', [0, 1]);
    addSaveVar('housePantsUnlocked', [0, 1]);
    addSaveVar('houseLeftFootUnlocked', [0, 1]);
    addSaveVar('houseRightFootUnlocked', [0, 1]);
    addSaveVar('houseVer', 0);
    addSaveVar('houseFloor', 1);
    addSaveVar('houseWall', 1);
    addSaveVar('houseObject', 1);
    addSaveVar('houseSkin', 1);
    addSaveVar('houseBorder', 1);
    addSaveVar('houseHat', 1);
    addSaveVar('houseLeftEye', 1);
    addSaveVar('houseRightEye', 1);
    addSaveVar('houseGlasses', 1);
    addSaveVar('houseMouth', 1);
    addSaveVar('houseShirt', 1);
    addSaveVar('houseLeftHand', 1);
    addSaveVar('houseRightHand', 1);
    addSaveVar('housePants', 1);
    addSaveVar('houseLeftFoot', 1);
    addSaveVar('houseRightFoot', 1);
    addSaveVar('houseX1', 100);
    addSaveVar('houseY1', 60);
    addSaveVar('houseX2', 180);
    addSaveVar('houseY2', 280);
    addSaveVar('houseX3', 230);
    addSaveVar('houseY3', 250);
    addSaveVar('houseBestThrow1', 0);
    addSaveVar('houseBestThrow2', 0);
    addSaveVar('houseFurniture1', false);
    addSaveVar('houseFurniture2', false);
    addSaveVar('houseFurniture3', false);
    addSaveVar('houseFurniture4', false);
    addSaveVar('houseFurniture5', false);
    addSaveVar('houseFurniture6', false);
    addSaveVar('houseFurniture7', false);
    addSaveVar('houseFurniture8', false);
    addSaveVar('houseFurniture9', false);
    addSaveVar('houseFurniture10', false);
    addSaveVar('houseFurniture11', false);
    addSaveVar('featureIdleMode', false);
    addSaveVar('featureBoostGen', false);
    addSaveVar('featureBoostAuto', false);
    addSaveVar('featureGarden', false);
    addSaveVar('featureBattleArena', false);
    addSaveVar('featureButtonMachine', false);
    addSaveVar('featureMoneyPrinter', false);
    addSaveVar('featureMysteryShop', false);
    addSaveVar('featureArcade', false);
    addSaveVar('featureStadium', false);
    addSaveVar('featureAutoSprayer', false);
    addSaveVar('featureEpicLicense', false);
    addSaveVar('featureTukkunFCG', false);
    addSaveVar('featureLolMarket', false);
    addSaveVar('featureAwesomeAdventures', false);
    addSaveVar('featureFishing', false);
    addSaveVar('featureSeppuku', false);
    addSaveVar('featureInstantWin', false);
    addSaveVar('featureTechnicalLight', false);
    addSaveVar('featureMiniGarden', false);
    addSaveVar('featureBestiary', false);
    addSaveVar('featureTravelingTicket', false);
    addSaveVar('featureSuperBattery', false);
    addSaveVar('featureArcadePack', false);
    addSaveVar('featureManualSprayer', false);
    addSaveVar('featureSpecialSprayer', false);
    addSaveVar('featureDoomSprayer', false);
    addSaveVar('featureEnergyToolbar', false);
    addSaveVar('featureCardToolbar', false);
    addSaveVar('featurePetFeedBar', false);
    addSaveVar('featurePremiumSprayer', false);
    addSaveVar('featureTitleEditor', false);
    addSaveVar('featureSecretShop', false);
    addSaveVar('featureNewHouse', false);
    addSaveVar('featureFactory', false);
    addSaveVar('serviceOfflineGrind', false);
    addSaveVar('serviceRewardBot', false);
    addSaveVar('serviceAutoHarvest', false);
    addSaveVar('serviceEliteButton', false);
    addSaveVar('serviceBatteryCharger', false);
    addSaveVar('serviceStadiumPro', false);
    addSaveVar('serviceFCGPowerUser', false);
    addSaveVar('serviceDemandMaster', false);
    addSaveVar('serviceQuickAdventures', false);
    addSaveVar('serviceDoubleQuest', false);
    addSaveVar('serviceNoAnts', false);
    addSaveVar('bgred', 30);
    addSaveVar('bggreen', 25);
    addSaveVar('bgblue', 20);
    addSaveVar('titlered', 255);
    addSaveVar('titlegreen', 255);
    addSaveVar('titleblue', 255);
    addSaveVar('ripoffCard', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('aprilFoolsBest', 0);
    addSaveVar('progBoxCount', 0);
    addSaveVar('progBoxToday', 0);
    addSaveVar('legendaryBoxOpened', 0);
    addSaveVar('supplyCrateOpened', 0);
    addSaveVar('explosionCrateOpened', 0);
    addSaveVar('awesomeCrateOpened', 0);
    addSaveVar('chaosCrateOpened', 0);
    addSaveVar('apocalypseCrateOpened', 0);
    addSaveVar('pixelatedMysteryBoxOpened', 0);
    addSaveVar('mysteryBox', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('mysteryBoxCollect1', new Array());
    addSaveVar('mysteryBoxCollect2', new Array());
    addSaveVar('mysteryBoxCollect3', new Array());
    addSaveVar('mysteryBoxCollect4', new Array());
    addSaveVar('mysteryBoxCollect5', new Array());
    addSaveVar('mysteryBoxCollect6', new Array());
    addSaveVar('mysteryBoxCollect7', new Array());
    addSaveVar('mysteryBoxCollect8', new Array());
    addSaveVar('mysteryBoxCollect9', new Array());
    addSaveVar('mysteryBoxCollect10', new Array());
    addSaveVar('mysteryBoxCollect9001', new Array());
    addSaveVar('mysteryBoxBan1', new Array());
    addSaveVar('mysteryBoxBan2', new Array());
    addSaveVar('mysteryBoxBan3', new Array());
    addSaveVar('mysteryBoxBan4', new Array());
    addSaveVar('mysteryBoxBan5', new Array());
    addSaveVar('mysteryBoxBan6', new Array());
    addSaveVar('mysteryBoxBan7', new Array());
    addSaveVar('mysteryBoxBan8', new Array());
    addSaveVar('mysteryBoxBan9', new Array());
    addSaveVar('mysteryBoxBan10', new Array());
    addSaveVar('harvestCount', 0);
    addSaveVar('harvestCoin', 0);
    addSaveVar('harvestMillion', 0);
    addSaveVar('gardenFertilizer', 5);
    addSaveVar('gardenMegaFertilizer', 1);
    addSaveVar('gardenFertilizerAllow', 0);
    addSaveVar('gardenPoint', 0);
    addSaveVar('gardenPointMax', 0);
    addSaveVar('gardenCapacity', 1);
    addSaveVar('gardenEXP', 0);
    addSaveVar('gardenSlotEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenTrees', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenMastery', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('gardenSeed', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('aagStat1', 50);
    addSaveVar('aagStat2', 50);
    addSaveVar('aagStat3', 50);
    addSaveVar('aagStat4', 50);
    addSaveVar('gardenBreed0', 0);
    addSaveVar('gardenBreed1', 0);
    addSaveVar('gardenBreedReward', 0);
    addSaveVar('gardenBreedRewardC', 0);
    addSaveVar('gardenResearch', 0);
    addSaveVar('gardenBreedTotal', 0);
    addSaveVar('gardenFruit', 0);
    addSaveVar('gardenFruitMax', 0);
    addSaveVar('gardenFullness', 0);
    addSaveVar('gardenHarvestTime', new Array());
    addSaveVar('gardenRecentTime', new Array());
    addSaveVar('gardenExpiryTime', new Array());
    addSaveVar('gardenPurchaseTime', new Array());
    addSaveVar('gardenHarvestValue', new Array());
    addSaveVar('gardenTreeExp', new Array());
    addSaveVar('gardenTreeFertilize', new Array());
    addSaveVar('gardenTreeModuleProc', new Array());
    if (isNaN(_root.save.gardenSlotEXP[1])) {
      _root.save.gardenSlotEXP = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (isNaN(_root.save.gardenTrees[1])) {
      _root.save.gardenTrees = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    if (isNaN(_root.save.gardenTrees[50])) {
      i = 26;
      while (i <= 50) {
        _root.save.gardenSlotEXP[i] = 0;
        _root.save.gardenTrees[i] = 0;
        ++i;
      }
      i = 26;
      while (i <= 100) {
        _root.save.gardenMastery[i] = 0;
        ++i;
      }
    }
    addSaveVar('arenaTutorial', 0);
    addSaveVar('arenaBonusPreference1', 'None');
    addSaveVar('arenaBonusPreference2', 'None');
    addSaveVar('arenaAbilityPreference1', 'None');
    addSaveVar('arenaAbilityPreference2', 'None');
    addSaveVar('arenaAbilityPreference3', 'None');
    addSaveVar('arenaMoreBonusPreference1', 'None');
    addSaveVar('arenaMoreBonusPreference2', 'None');
    addSaveVar('filterPref1t', 1);
    addSaveVar('filterPref2t', 9999);
    addSaveVar('filterPref3t', 1);
    addSaveVar('filterPref4t', 9001);
    addSaveVar('filterPref5t', 'Reward');
    addSaveVar('filterPref6t', 'Attack: Regular');
    addSaveVar('filterPref7t', 'Dummy');
    addSaveVar('filterPref8t', 0);
    addSaveVar('filterPref9t', 15);
    addSaveVar('filterPref1c', false);
    addSaveVar('filterPref2c', false);
    addSaveVar('filterPref3c', false);
    addSaveVar('filterPref4c', false);
    addSaveVar('filterPref5c', false);
    addSaveVar('filterPref6c', false);
    addSaveVar('filterPref7c', false);
    addSaveVar('filterPref8c', false);
    addSaveVar('filterPref9c', false);
    addSaveVar('filterPref10c', false);
    addSaveVar('filterPref11c', false);
    addSaveVar('filterPref12c', false);
    addSaveVar('filterPref13c', false);
    addSaveVar('collectionPoint', 0);
    addSaveVar('collectionPointMax', 0);
    addSaveVar('battlePoint', 0);
    addSaveVar('battleReward', 0);
    addSaveVar('battleDaily', false);
    addSaveVar('arenaLoot', 0);
    addSaveVar('arenaPixel', 0);
    addSaveVar('arenaPixelMax', 0);
    addSaveVar('arenaCraft', 0);
    addSaveVar('arenaCraftMax', 0);
    addSaveVar('arenaMaxDamage', 0);
    addSaveVar('arenaBacon', 0);
    addSaveVar('freeBacon1', 25);
    addSaveVar('freeBacon2', 50);
    addSaveVar('robaconLevel', 1);
    addSaveVar('robaconExp', 0);
    addSaveVar('robaconExpTotal', 0);
    addSaveVar('robaconSP', 0);
    addSaveVar('robaconBacon', 100);
    addSaveVar('vegetarianMode', false);
    addSaveVar('arenaBuffDuration', 0);
    addSaveVar('arenaBuffType', 0);
    addSaveVar('arenaWeapon', 1);
    addSaveVar('arenaSubWeapon', 0);
    addSaveVar('arenaHat', 101);
    addSaveVar('arenaShirt', 102);
    addSaveVar('arenaGloves', 103);
    addSaveVar('arenaPants', 104);
    addSaveVar('arenaShoes', 105);
    addSaveVar('arenaMedal', 0);
    addSaveVar('arenaPendant', 0);
    addSaveVar('arenaEarring', 0);
    addSaveVar('arenaTrinket', 0);
    addSaveVar('arenaSkin', 0);
    addSaveVar('arenaOutfitHat', 0);
    addSaveVar('arenaOutfitShirt', 0);
    addSaveVar('arenaOutfitGloves', 0);
    addSaveVar('arenaOutfitPants', 0);
    addSaveVar('arenaOutfitShoes', 0);
    addSaveVar('arenaOutfitSkin', 0);
    addSaveVar('arenaOutfitEarring', 0);
    addSaveVar('arenaOutfitMedal', 0);
    addSaveVar('arenaOutfitWeapon', 0);
    addSaveVar('arenaRing', 0);
    addSaveVar('arenaRingOwned', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaCrystal1', 0);
    addSaveVar('arenaCrystal2', 0);
    addSaveVar('roflRing', 0);
    addSaveVar('roflPendant', 0);
    addSaveVar('medalColor', 3);
    addSaveVar('disableDrawing', false);
    addSaveVar('disableManaEffect', false);
    addSaveVar('visibleRing', true);
    addSaveVar('drawingBoardHex', new Array());
    addSaveVar('drawingBoardAlp', new Array());
    addSaveVar('arenaPotion', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaFilter', 'Item Name 1,Item Name 2');
    addSaveVar('arenaEvent', 0);
    addSaveVar('arenaEventPoint', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaEventReward', new Array());
    addSaveVar('arenaEventKey', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaLevel', 1);
    addSaveVar('arenaExp', 0);
    addSaveVar('arenaExpTotal', 0);
    addSaveVar('arenaExpExcess', 0);
    addSaveVar('arenaSP', 20);
    addSaveVar('arenaUltimateSP', 0);
    addSaveVar('arenaSkill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaSkillMax', [0, 30, 30, 30, 30, 10, 1, 1, 1, 10, 10, 20, 20, 30, 30, 30, 20, 0, 30, 10, 30, 10, 30, 30, 10, 30, 1, 10, 10, 20, 30, 10, 30, 30, 50, 50, 30, 10, 30, 10, 20, 10, 20, 10, 20, 30, 0, 0, 0, 1, 30, 10, 10, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.arenaSkill[101])) {
      _root.save.arenaSkill[101] = 0;
      _root.save.arenaSkill[102] = 0;
      _root.save.arenaSkill[103] = 0;
    }
    if (isNaN(_root.save.arenaSkill[104])) {
      _root.save.arenaSkill[104] = 0;
      _root.save.arenaSkill[105] = 0;
      _root.save.arenaSkill[106] = 0;
    }
    addSaveVar('arenaTotalSkill', 0);
    addSaveVar('arenaTotalSP', 0);
    addSaveVar('arenaSkillBook', 0);
    addSaveVar('arenaHealth', 2500);
    addSaveVar('arenaMaxHealth', 2500);
    addSaveVar('arenaMana', 1000);
    addSaveVar('arenaMaxMana', 1000);
    addSaveVar('arenaSpirit', 0);
    addSaveVar('arenaFury', 0);
    addSaveVar('arenaAttack', 100);
    addSaveVar('arenaDefense', 100);
    addSaveVar('arenaAccuracy', 100);
    addSaveVar('arenaEvasion', 100);
    addSaveVar('arenaOxygenPenalty', 0);
    addSaveVar('arenaRage', 0);
    addSaveVar('arenaManaPower', false);
    addSaveVar('arenaMission', 0);
    addSaveVar('arenaKommanderProgress', 0);
    addSaveVar('arenaKommanderMonID', 2);
    addSaveVar('arenaKommanderMonCount', 5);
    addSaveVar('arenaKommanderProgBox', 5);
    addSaveVar('arenaKommanderPixBox', 5);
    addSaveVar('arenaKommanderProof', 5);
    addSaveVar('arenaKommanderSkip', 2);
    addSaveVar('arenaMaxEntry', 10);
    addSaveVar('arenaPyramidEntry', 10);
    addSaveVar('arenaMegabossEntry', 10);
    addSaveVar('arenaCorruptionEntry', 10);
    addSaveVar('arenaRevengeEntry', 10);
    addSaveVar('arenaEndlessEntry', 1);
    addSaveVar('arenaBonusChange', 100);
    addSaveVar('arenaKommanderComplete', 0);
    addSaveVar('arenaDefendComplete', 0);
    addSaveVar('arenaPrehistoricComplete', 0);
    addSaveVar('arenaProofTraining', 0);
    addSaveVar('arenaProofMission', 0);
    addSaveVar('arenaSuperiorCraft', 0);
    addSaveVar('arenaUnobtainium', 0);
    addSaveVar('arenaKill', 0);
    addSaveVar('arenaKillWhite', 0);
    addSaveVar('arenaKillRed', 0);
    addSaveVar('arenaKillPurple', 0);
    addSaveVar('arenaKillRare', 0);
    addSaveVar('arenaKillEpic', 0);
    addSaveVar('arenaDeath', 0);
    addSaveVar('arenaMaxEnhance', 0);
    addSaveVar('arenaFreeReset', 0);
    addSaveVar('arenaDiscoverAlley', false);
    addSaveVar('arenaDiscoverSmiley', false);
    addSaveVar('arenaDiscoverPokayman', false);
    addSaveVar('pokayCD', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('pokaystopCount', 0);
    addSaveVar('arenaCorruptScore', 0);
    addSaveVar('arenaCorruptToday', 0);
    addSaveVar('arenaCorruptHealth', 50);
    addSaveVar('arenaCorruptAttack', 50);
    addSaveVar('arenaCorruptDefense', 50);
    addSaveVar('arenaCorruptAccuracy', 50);
    addSaveVar('arenaCorruptEvasion', 50);
    addSaveVar('arenaZone', 0);
    addSaveVar('arenaZoneOrig', 0);
    addSaveVar('arenaMaxCombo', 0);
    addSaveVar('arenaBestiary', new Array());
    addSaveVar('arenaBestiaryExtra', new Array());
    addSaveVar('arenaBestiaryUlt1', new Array());
    addSaveVar('arenaBestiaryUlt2', new Array());
    addSaveVar('arenaBestiaryUlt3', new Array());
    addSaveVar('arenaBestiaryUlt1V', new Array());
    addSaveVar('arenaBestiaryUlt2V', new Array());
    addSaveVar('arenaBestiaryUlt3V', new Array());
    addSaveVar('arenaBestiaryUlt1F', new Array());
    addSaveVar('arenaBestiaryUlt2F', new Array());
    addSaveVar('arenaBestiaryUlt3F', new Array());
    addSaveVar('arenaZoneFound', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaZoneKill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('arenaAllyEXP', new Array());
    addSaveVar('arenaAllyUpgrade', new Array());
    addSaveVar('arenaAllyFavorite', new Array());
    addSaveVar('arenaAlly', 0);
    addSaveVar('autoFight', false);
    addSaveVar('arenaHardcore', false);
    addSaveVar('arenaTurnBased', false);
    addSaveVar('recipeLevel', 0);
    addSaveVar('secretRecipeLevel', 0);
    addSaveVar('inventoryGuard', [false]);
    addSaveVar('inventoryExist', [0]);
    addSaveVar('inventorySet', [0]);
    addSaveVar('inventoryName', ['No Item']);
    addSaveVar('inventoryDesc', ['']);
    addSaveVar('inventoryReqRank', [1]);
    addSaveVar('inventoryLevel', [1]);
    addSaveVar('inventoryMaxLevel', [1]);
    addSaveVar('inventoryExp', [0]);
    addSaveVar('inventoryExpTNL', [0]);
    addSaveVar('inventoryEnhance', [0]);
    addSaveVar('inventoryBonusPow', [0]);
    addSaveVar('inventoryType', ['Any']);
    addSaveVar('inventorySubtype', ['Any']);
    addSaveVar('inventoryFrame', [0]);
    addSaveVar('inventoryRange', [false]);
    addSaveVar('inventoryAttack', [0]);
    addSaveVar('inventorySpeed', [0]);
    addSaveVar('inventoryDefense', [0]);
    addSaveVar('inventoryBonus', ['']);
    addSaveVar('inventoryAbility', ['']);
    addSaveVar('inventoryMoreBonus', ['']);
    addSaveVar('inventorySell', [0]);
    addSaveVar('inventoryExpiry', [Infinity]);
    addSaveVar('inventoryObtainTime', [0]);
    addSaveVar('inventoryNoBonus', [false]);
    addSaveVar('inventoryNoRecycle', [false]);
    addSaveVar('inventoryNoFuse', [false]);
    addSaveVar('inventoryNoUnique', [false]);
    addSaveVar('inventorySpirit', [false]);
    addSaveVar('inventoryCrit', [0]);
    addSaveVar('inventoryDexterity', [0]);
    addSaveVar('inventoryHealth', [0]);
    addSaveVar('inventoryUnob', [0]);
    addSaveVar('buttonGrandpa', 0);
    addSaveVar('buttonGrandpaSpeed', 1);
    addSaveVar('buttonGrandpaAccuracy', 1);
    addSaveVar('buttonGrandpaDiscipline', 1);
    addSaveVar('buttonGrandpaPress', 0);
    addSaveVar('buttonPress', 0);
    addSaveVar('buttonPressToday', 0);
    addSaveVar('buttonBreak', 0);
    addSaveVar('buttonPerfect', 0);
    addSaveVar('buttonPurple', 0);
    addSaveVar('buttonMaxCombo', 0);
    addSaveVar('buttonBroken', false);
    addSaveVar('buttonBless', 0);
    addSaveVar('buttonMultiplier', 0);
    addSaveVar('totalPrinterMoney', 0);
    addSaveVar('totalPrinterMillion', 0);
    addSaveVar('totalPrinterCharge', 0);
    addSaveVar('printerLevel', 1);
    addSaveVar('printerCharge', 80);
    addSaveVar('arcadeConfig1', true);
    addSaveVar('arcadeConfig2', true);
    addSaveVar('arcadeConfig3', true);
    addSaveVar('arcadeConfig4', false);
    addSaveVar('arcadeConfig5', true);
    addSaveVar('arcadeTodayPercent', 0);
    addSaveVar('arcadeHighPercent', 0);
    addSaveVar('arcadeHighTrade', 0);
    addSaveVar('arcadeTradeIn', false);
    addSaveVar('arcadeToken', 25);
    addSaveVar('arcadeBuyCount', 0);
    addSaveVar('arcade100kMedal', 0);
    addSaveVar('arcadeBless', 0);
    addSaveVar('highPong', 0);
    addSaveVar('highAvoidance', 0);
    addSaveVar('highMath', 0);
    addSaveVar('highWhack', 0);
    addSaveVar('highMind', 0);
    addSaveVar('highBalance', 0);
    addSaveVar('highCount', 0);
    addSaveVar('rick', 0);
    addSaveVar('highMMR', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('rankedPong', 0);
    addSaveVar('rankedAvoidance', 0);
    addSaveVar('rankedMath', 0);
    addSaveVar('rankedWhack', 0);
    addSaveVar('rankedMind', 0);
    addSaveVar('rankedBalance', 0);
    addSaveVar('rankedCount', 0);
    addSaveVar('rankedMode', true);
    addSaveVar('unrankedPower', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('totalPong', 0);
    addSaveVar('totalAvoidance', 0);
    addSaveVar('totalMath', 0);
    addSaveVar('totalWhack', 0);
    addSaveVar('totalMind', 0);
    addSaveVar('totalBalance', 0);
    addSaveVar('totalCount', 0);
    addSaveVar('totalMMR', 0);
    addSaveVar('todayHighPong', 0);
    addSaveVar('todayHighAvoidance', 0);
    addSaveVar('todayHighMath', 0);
    addSaveVar('todayHighWhack', 0);
    addSaveVar('todayHighMind', 0);
    addSaveVar('todayHighBalance', 0);
    addSaveVar('todayHighCount', 0);
    addSaveVar('todayParPong', 1400000);
    addSaveVar('todayParAvoidance', 500000);
    addSaveVar('todayParMath', 1000000);
    addSaveVar('todayParWhack', 1500000);
    addSaveVar('todayParMind', 2000000);
    addSaveVar('todayParBalance', 2800000);
    addSaveVar('todayParCount', 6000000);
    addSaveVar('stadiumRunescape', 0);
    addSaveVar('stadiumToken', 0);
    addSaveVar('stadiumTokenMax', 0);
    addSaveVar('stadiumAbilityCost', 0);
    addSaveVar('stadiumRace', 0);
    addSaveVar('stadiumItem', 0);
    addSaveVar('stadiumDeathMatch', 0);
    addSaveVar('stadiumBestDeathMatch', 0);
    addSaveVar('stadiumTodayDeathMatch', 0);
    addSaveVar('stadiumBestTime', 999999);
    addSaveVar('stadiumBetCorrect', 0);
    addSaveVar('stadiumBetStreak', 0);
    addSaveVar('stadiumBetMaxStreak', 0);
    addSaveVar('stadiumBetWinningCoin', 0);
    addSaveVar('stadiumBetWinningToken', 0);
    addSaveVar('stadiumEnergy', 0);
    addSaveVar('stadiumAccel', 0);
    addSaveVar('stadiumMaxSpeed', 0);
    addSaveVar('stadiumStartSpeed', 0);
    addSaveVar('stadiumDash', 0);
    addSaveVar('stadiumJump', 0);
    addSaveVar('stadiumBoost', 0);
    addSaveVar('stadiumReward', 0);
    addSaveVar('stadiumFace', 2);
    addSaveVar('stadiumHat', 1);
    addSaveVar('stadiumHatOwned', [0, 0, 0, 0, 0, 0]);
    addSaveVar('stadiumBless', 0);
    addSaveVar('stadiumImpossibleRace', 0);
    addSaveVar('stadiumImpossibleItem', 0);
    addSaveVar('antsSprayed', 0);
    addSaveVar('epicSkill', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.epicSkill[1])) {
      _root.save.epicSkill = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    addSaveVar('banPenalty', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.banPenalty[1])) {
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    addSaveVar('totalStupidity', 0);
    addSaveVar('remStupidity', 0);
    addSaveVar('ascStupidity', 0);
    addSaveVar('ascMilestone', 0);
    addSaveVar('stupidity', 0);
    addSaveVar('permaStupidity', 0);
    addSaveVar('permaStupidityHard', 0);
    addSaveVar('permaStupidityImpossible', 0);
    addSaveVar('permaBanPenalty', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('permaBanMax', 0);
    addSaveVar('permaBanRes', 1);
    addSaveVar('curBanRefID', 201508);
    addSaveVar('curSheetID', 201507);
    addSaveVar('curDateID', 1);
    addSaveVar('curAttStamp', 0);
    addSaveVar('curAttMiss', 0);
    addSaveVar('curAttMedPend', 0);
    addSaveVar('lolConfig1', 1);
    addSaveVar('lolConfig2', 3);
    addSaveVar('lolConfig3', false);
    addSaveVar('lolCapacity', 50);
    addSaveVar('lolProfit', 0);
    addSaveVar('lolCooldown', 0);
    addSaveVar('lolMaxProfit', 0);
    if (isNaN(_root.save.lolGems[1]) && _root.save.lolGems != undefined) {
      delete _root.save.lolGems;
    }
    addSaveVar('lolGems', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('lolDemand', [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);
    addSaveVar('lolPrice', [0, 1500, 3000, 4500, 6000, 7500, 9000, 10500, 12000, 13500, 15000]);
    addSaveVar('lolSpent', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgInitDeck', 0);
    addSaveVar('fcgSpeed', 10);
    addSaveVar('fcgLevel', 1);
    addSaveVar('fcgExp', 0);
    addSaveVar('fcgExpTotal', 0);
    addSaveVar('fcgCash', 1250);
    addSaveVar('fcgMaxCash', 1250);
    addSaveVar('fcgPlay', 0);
    addSaveVar('fcgWin', 0);
    addSaveVar('fcgLose', 0);
    addSaveVar('fcgStreak', 0);
    addSaveVar('fcgMaxStreak', 0);
    addSaveVar('fcgRandomDeck', false);
    addSaveVar('fcgReceiveChallenge', true);
    addSaveVar('fcgPowerActive', true);
    if (isNaN(_root.save.fcgOwned[1]) && _root.save.fcgOwned == undefined) {
      delete _root.save.fcgOwned;
      delete _root.save.fcgDeck;
    }
    addSaveVar('fcgRewardedLevel', 1);
    addSaveVar('fcgMission', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgMissionScore', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgMissionGold', 0);
    addSaveVar('fcgBuff', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgPower', [false, false, false, false, false, false, false, false, false]);
    addSaveVar('fcgOwned', [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fcgDeck', [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    if (isNaN(_root.save.fcgOwned[400])) {
      _root.save.fcgOwned[400] = 0;
      _root.save.fcgDeck[400] = 0;
    }
    addSaveVar('fcgCurDiff', 0);
    addSaveVar('fcgLastDiff', 0);
    addSaveVar('fcgLevel0', 0);
    addSaveVar('fcgLevel1', 0);
    addSaveVar('fcgLevel2', 0);
    addSaveVar('fcgLevel3', 0);
    addSaveVar('fcgLevel4', 0);
    addSaveVar('fcgLevel5', 0);
    addSaveVar('fcgLevel6', 0);
    addSaveVar('fcgLevel7', 0);
    addSaveVar('fcgLevel8', 0);
    addSaveVar('fcgLevel9', 0);
    addSaveVar('fcgLevel10', 0);
    addSaveVar('fcgStreak0', 0);
    addSaveVar('fcgStreak1', 0);
    addSaveVar('fcgStreak2', 0);
    addSaveVar('fcgStreak3', 0);
    addSaveVar('fcgStreak4', 0);
    addSaveVar('fcgStreak5', 0);
    addSaveVar('fcgStreak6', 0);
    addSaveVar('fcgStreak7', 0);
    addSaveVar('fcgStreak8', 0);
    addSaveVar('fcgStreak9', 0);
    addSaveVar('fcgStreak10', 0);
    addSaveVar('fcgMaxStreak0', 0);
    addSaveVar('fcgMaxStreak1', 0);
    addSaveVar('fcgMaxStreak2', 0);
    addSaveVar('fcgMaxStreak3', 0);
    addSaveVar('fcgMaxStreak4', 0);
    addSaveVar('fcgMaxStreak5', 0);
    addSaveVar('fcgMaxStreak6', 0);
    addSaveVar('fcgMaxStreak7', 0);
    addSaveVar('fcgMaxStreak8', 0);
    addSaveVar('fcgMaxStreak9', 0);
    addSaveVar('fcgMaxStreak10', 0);
    addSaveVar('fcgLegendCount', 0);
    addSaveVar('fcgLegendDeck', 0);
    addSaveVar('fcgLegendLife', 0);
    addSaveVar('fcgSeriousDeck', 34 + random(35));
    addSaveVar('fcgTotalCards', 52);
    addSaveVar('fcgPack1', 1);
    addSaveVar('fcgPack1Cost', 0);
    addSaveVar('fcgPack2', 1);
    addSaveVar('fcgPack2Cost', 0);
    addSaveVar('fcgPack3', 1);
    addSaveVar('fcgPack3Cost', 0);
    addSaveVar('fcgPack4', 1);
    addSaveVar('fcgPack4Cost', 0);
    addSaveVar('fcgPack5', 1);
    addSaveVar('fcgPack5Cost', 0);
    addSaveVar('awesomeBless', 250);
    addSaveVar('awesomeAuto', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('awesomeRedCoin', 0);
    addSaveVar('awesomeTotalRun', 0);
    addSaveVar('awesomeBestRun', 0);
    addSaveVar('awesomeBestRun1', 0);
    addSaveVar('awesomeBestRun2', 0);
    addSaveVar('awesomeBestRun3', 0);
    addSaveVar('awesomeBestRun4', 0);
    addSaveVar('awesomeTotalAdv', 0);
    addSaveVar('awesomeTotalAdv1', 0);
    addSaveVar('awesomeTotalAdv2', 0);
    addSaveVar('awesomeTotalAdv3', 0);
    addSaveVar('awesomeTotalAdv4', 0);
    addSaveVar('awesomeEnergy', 5);
    addSaveVar('awesomeMaxEnergy', 5);
    addSaveVar('awesomeReputation', 0);
    addSaveVar('awesomeMaxReputation', 0);
    addSaveVar('awesomeEnergyNext', 60);
    addSaveVar('awesomeRefill', 1);
    addSaveVar('grammarPill', 0);
    addSaveVar('specialPetFood', 0);
    addSaveVar('nextWizard', 0);
    addSaveVar('fishRod', 1);
    addSaveVar('fishCapacity', 2500);
    addSaveVar('fishRodUnlock', [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishLevel', 1);
    addSaveVar('fishBestLevel', 1);
    addSaveVar('fishExp', 0);
    addSaveVar('fishTotalExp', 0);
    addSaveVar('fishFatigue', 0);
    addSaveVar('fishStreak', 0);
    addSaveVar('fishBestStreak', 0);
    addSaveVar('fishPerfect', 0);
    addSaveVar('fishTotal', 0);
    addSaveVar('fishScore', 0);
    addSaveVar('fishScoreToday', 0);
    addSaveVar('fishScoreRecord', 0);
    addSaveVar('fishMilestoneTotal', 0);
    addSaveVar('fishMilestoneToday', 0);
    addSaveVar('fishFound', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishLeft', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('fishPetFishCooldown', 50);
    addSaveVar('fishPetFoodCooldown', 3);
    addSaveVar('fishFoodCooldown', 100);
    addSaveVar('fishDrinkCooldown', 3);
    addSaveVar('artifact', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('souvenir', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('raidPyramid', 0);
    addSaveVar('raidDefend', 0);
    addSaveVar('raidPrehistoric', 0);
    addSaveVar('raidMegaboss', 0);
    addSaveVar('raidTower', 0);
    addSaveVar('raidDungeon', 0);
    addSaveVar('raidEndless', 0);
    addSaveVar('raidSpecial', 0);
    addSaveVar('arenaRevengeScore', 0);
    addSaveVar('arenaTriangleScore', 0);
    addSaveVar('arenaTriangleToday', 0);
    addSaveVar('apocSecretKill', 0);
    addSaveVar('strangeBoxKill', 0);
    addSaveVar('triangleLandKill', 0);
    addSaveVar('triangleShoot', 0);
    addSaveVar('arenaEnhancerFragment', 0);
    addSaveVar('arenaChaoticFragment', 0);
    addSaveVar('deathMatchEntry', 1);
    addSaveVar('dragonReward', 0);
    addSaveVar('feedToday', 0);
    addSaveVar('feedTotal', 0);
    addSaveVar('feedMeter', 0);
    addSaveVar('wisdomDiscovered', new Array());
    addSaveVar('arenaNerfGem', 0);
    addSaveVar('arenaNerfCount', 0);
    addSaveVar('arenaNerfNext', 1000);
    addSaveVar('arenaSpookyKey', false);
    addSaveVar('arenaSpookyScore', 0);
    addSaveVar('arenaSpookyToday', 0);
    addSaveVar('arenaCraftUsed', 0);
    addSaveVar('ripoffCardUsed', 0);
    addSaveVar('careerBoost', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerActive', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerLevel', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('careerPotion', 0);
    addSaveVar('megaCareerPotion', 0);
    addSaveVar('curBusiness', 0);
    addSaveVar('curBusinessOffline', 0);
    addSaveVar('curBusinessOnline', 0);
    addSaveVar('curBusinessActivity', 0);
    addSaveVar('businessHigh', 0);
    addSaveVar('businessTotal', 0);
    addSaveVar('businessEXP', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    addSaveVar('progBoxAsc', 0);
    addSaveVar('progBoxNext', 0);
    addSaveVar('refillAsc', 0);
    addSaveVar('refillNext', 0);
    addSaveVar('cheat', 0);
    addSaveVar('knowledge', 0);
    addSaveVar('theGame', 0);
    addSaveVar('mada', 0);
    addSaveVar('mbma', 0);
    addSaveVar('comboWaster', 0);
    addSaveVar('support', 0);
    addSaveVar('walkthru', 0);
    addSaveVar('escaped', 0);
    addSaveVar('pwned', 0);
    addSaveVar('petFeederBadge', 0);
    addSaveVar('revenger', 0);
    addSaveVar('ghostCount', 0);
    addSaveVar('hubertCount', 0);
    addSaveVar('seriousBusiness', 0);
    addSaveVar('survivor', 0);
    addSaveVar('forestDestroyer', 0);
    addSaveVar('curForestDestroyer', 0);
    addSaveVar('greed', 0);
    addSaveVar('lolBug', 0);
    addSaveVar('perfectionist', 0);
    addSaveVar('immortality', 0);
    addSaveVar('failproof', 0);
    addSaveVar('nightmare', 0);
    addSaveVar('artificialStupidity', 0);
    addSaveVar('moneySprayer', 0);
    addSaveVar('experienced', 0);
    addSaveVar('doingItWrong', 0);
    addSaveVar('curDoingItWrong', 0);
    addSaveVar('virtue', 0);
    addSaveVar('noHelp', 0);
    addSaveVar('randomGhost', 0);
    addSaveVar('nowUseless', 0);
    addSaveVar('chuckNorris', 0);
    addSaveVar('aceFinish', 0);
    addSaveVar('noDeath', 0);
    addSaveVar('pacifist', 0);
    addSaveVar('wakeUp', 0);
    addSaveVar('awesomeMineQuest', 0);
    addSaveVar('bestWpm', 0);
    addSaveVar('breakNewsMode', 1);
    addSaveVar('bouncyLoot', true);
    addSaveVar('rangeAnimate', true);
    addSaveVar('damageDisplay', true);
    addSaveVar('showBanner', true);
    addSaveVar('showGain', true);
    addSaveVar('showRobaconEXP', true);
    addSaveVar('enableTip', true);
    addSaveVar('activityLoot', false);
    addSaveVar('noob', 0);
    addSaveVar('ver', 0);
    addSaveVar('au', 0);
    addSaveVar('arenaPyramidCraftT', 0);
    addSaveVar('arenaMegabossCraftT', 0);
    addSaveVar('arenaCorruptionCraftT', 0);
    addSaveVar('arenaRevengeCraftT', 0);
    addSaveVar('arenaEndlessCraftT', 0);
    addSaveVar('seppukuTime', 0);
    addSaveVar('seppukuTotal', 0);
    addSaveVar('seppukuAscension', 0);
    addSaveVar('seppukuEnd', 0);
    addSaveVar('seppukuReward', 0);
    addSaveVar('seppukuPenalty', 0);
    addSaveVar('arenaUniqueStock', 10);
    addSaveVar('arenaChaosLeft', 15);
    addSaveVar('arenaChaosMax', 15);
    addSaveVar('arenaStorage2', false);
    addSaveVar('arenaStorage3', false);
    addSaveVar('arenaStorage4', false);
    addSaveVar('shinyWeekCount', 0);
    addSaveVar('shinyWeekLast', 24);
    addSaveVar('shinyWeek2Count', 0);
    addSaveVar('shinyWeek2Last', 10);
    addSaveVar('tech1Program', 'Disabled');
    addSaveVar('tech2Program', 'Disabled');
    addSaveVar('tech3Program', 'Disabled');
    addSaveVar('tech4Program', 'Disabled');
    addSaveVar('tech5Program', 'Disabled');
    addSaveVar('tech6Program', 'Disabled');
    addSaveVar('tech7Program', 'Disabled');
    addSaveVar('tech8Program', 'Disabled');
    addSaveVar('tech9Program', 'Disabled');
    addSaveVar('tech1Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech2Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech3Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech4Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech5Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech6Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech7Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech8Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech9Array', [false, false, false, false, false, false, false, false, false, false, false]);
    addSaveVar('tech1StringA', '');
    addSaveVar('tech2StringA', '');
    addSaveVar('tech3StringA', '');
    addSaveVar('tech4StringA', '');
    addSaveVar('tech5StringA', '');
    addSaveVar('tech6StringA', '');
    addSaveVar('tech7StringA', '');
    addSaveVar('tech8StringA', '');
    addSaveVar('tech9StringA', '');
    addSaveVar('tech1StringB', '');
    addSaveVar('tech2StringB', '');
    addSaveVar('tech3StringB', '');
    addSaveVar('tech4StringB', '');
    addSaveVar('tech5StringB', '');
    addSaveVar('tech6StringB', '');
    addSaveVar('tech7StringB', '');
    addSaveVar('tech8StringB', '');
    addSaveVar('tech9StringB', '');
    addSaveVar('tech1NumberA', 0);
    addSaveVar('tech2NumberA', 0);
    addSaveVar('tech3NumberA', 0);
    addSaveVar('tech4NumberA', 0);
    addSaveVar('tech5NumberA', 0);
    addSaveVar('tech6NumberA', 0);
    addSaveVar('tech7NumberA', 0);
    addSaveVar('tech8NumberA', 0);
    addSaveVar('tech9NumberA', 0);
    addSaveVar('tech1NumberB', 0);
    addSaveVar('tech2NumberB', 0);
    addSaveVar('tech3NumberB', 0);
    addSaveVar('tech4NumberB', 0);
    addSaveVar('tech5NumberB', 0);
    addSaveVar('tech6NumberB', 0);
    addSaveVar('tech7NumberB', 0);
    addSaveVar('tech8NumberB', 0);
    addSaveVar('tech9NumberB', 0);
    addSaveVar('tech1NumberC', 0);
    addSaveVar('tech2NumberC', 0);
    addSaveVar('tech3NumberC', 0);
    addSaveVar('tech4NumberC', 0);
    addSaveVar('tech5NumberC', 0);
    addSaveVar('tech6NumberC', 0);
    addSaveVar('tech7NumberC', 0);
    addSaveVar('tech8NumberC', 0);
    addSaveVar('tech9NumberC', 0);
    if (_root.save.ver < 1) {
      if (_root.save.boostMax > 1300) {
        _root.save.boostMax = 1300;
      }
      _root.save.ver = 1;
    }
    if (_root.save.event_explosionTour == 1 && _root.save.ver < 2) {
      _root.save.mysteryBox[4] += 4;
      _root.save.ver = 2;
    }
    if (_root.save.ver < 4) {
      if (_root.save.careerLevel[3] > 30) {
        _root.save.careerLevel[3] = 30;
      }
      _root.save.ver = 4;
    }
    if (_root.save.ver < 7) {
      if (_root.save.arcadeToken > 100) {
        _root.save.greenCoin += 1000 * (_root.save.arcadeToken - 100);
      }
      _root.save.arcadeToken = 25;
      _root.save.ver = 7;
    }
    if (_root.save.ver < 8) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy') {
          _root.save.inventoryExpiry[i] = 7776000000.0 + _root.systemtimenow;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Hat' || _root.save.inventoryName[i] == 'Pre-Explosion Shirt' || _root.save.inventoryName[i] == 'Pre-Explosion Gloves' || _root.save.inventoryName[i] == 'Pre-Explosion Pants' || _root.save.inventoryName[i] == 'Pre-Explosion Shoes') {
          _root.save.inventoryExpiry[i] = 7776000000.0 + _root.systemtimenow;
        }
        ++i;
      }
      _root.save.ver = 8;
    }
    if (_root.save.ver < 9) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Stripped Nurse Hat') {
          _root.save.inventoryName[i] = 'Stripper Nurse Hat';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Shirt') {
          _root.save.inventoryName[i] = 'Stripper Nurse Shirt';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Gloves') {
          _root.save.inventoryName[i] = 'Stripper Nurse Gloves';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Pants') {
          _root.save.inventoryName[i] = 'Stripper Nurse Pants';
        }
        if (_root.save.inventoryName[i] == 'Stripped Nurse Shoes') {
          _root.save.inventoryName[i] = 'Stripper Nurse Shoes';
        }
        ++i;
      }
      _root.save.ver = 9;
    }
    if (_root.save.ver < 10) {
      i = 1;
      while (i <= 12) {
        if (_root.save.ripoffCard[i] > 5) {
          _root.save.ripoffCard[i] = 5;
          _root.save.blueCoin += 250;
        }
        ++i;
      }
      _root.save.ver = 10;
    }
    if (_root.save.ver < 11) {
      if (_root.save.mysteryBox[4] > 100) {
        _root.save.mysteryBox[4] = 100;
      }
      _root.save.ver = 11;
    }
    if (_root.save.ver < 12) {
      bcToRefund = 0;
      bcToRefund += _root.save.ripoffCard[5] * 2500;
      bcToRefund += _root.save.ripoffCard[6] * 2000;
      bcToRefund += _root.save.ripoffCard[7] * 1500;
      bcToRefund += _root.save.ripoffCard[8] * 1000;
      bcToRefund += _root.save.ripoffCard[9] * 750;
      bcToRefund += _root.save.ripoffCard[10] * 1250;
      bcToRefund += _root.save.ripoffCard[11] * 1750;
      bcToRefund += _root.save.ripoffCard[12] * 2250;
      if (bcToRefund < 0) {
        bcToRefund = 0;
      }
      if (bcToRefund > 100000) {
        bcToRefund = 100000;
      }
      _root.save.blueCoin += bcToRefund;
      i = 5;
      while (i <= 12) {
        if (_root.save.ripoffCard[i] > 0) {
          _root.save.ripoffCard[i] = 0;
        }
        ++i;
      }
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy' && _root.save.inventoryBonusPow[i] >= 175) {
          _root.save.inventoryAttack[i] -= 175;
          _root.save.inventoryBonusPow[i] -= 175;
          _root.save.inventoryEnhance[i] -= 1;
          _root.save.refund_relic = 1;
        }
        ++i;
      }
      _root.save.ver = 12;
    }
    if (_root.save.ver < 13) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy' && _root.save.inventoryBonusPow[i] >= 100) {
          _root.save.inventoryAttack[i] -= _root.save.inventoryBonusPow[i];
          _root.save.inventoryEnhance[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 13;
    }
    if (_root.save.ver < 15) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Pre-Explosion Trophy') {
          _root.save.inventoryAttack[i] += 150;
        }
        ++i;
      }
      _root.save.ver = 15;
    }
    if (_root.save.ver < 16) {
      _root.save.ver = 16;
    }
    if (_root.save.ver < 17) {
      if (_root.save.stadiumBestTime < 7000) {
        _root.save.stadiumBestTime = 8000;
      }
      _root.save.ver = 17;
    }
    if (_root.save.ver < 18) {
      _root.save.arenaFreeReset += Math.floor(_root.save.arenaKommanderComplete / 10);
      _root.save.ver = 18;
    }
    if (_root.save.ver < 19) {
      if (_root.save.arenaLevel >= 180) {
        _root.save.arenaFreeReset += 1;
      }
      _root.save.mysteryBox[6] = 0;
      _root.save.mysteryBoxCollect6 = new Array();
      _root.save.ver = 19;
    }
    if (_root.save.ver < 20) {
      if (_root.save.arenaLevel >= 180) {
        _root.save.arenaSP += _root.save.arenaLevel - 180;
      }
      _root.save.ver = 20;
    }
    if (_root.save.ver < 21) {
      if (_root.save.arenaLevel > 250) {
        _root.save.arenaSP -= _root.save.arenaLevel - 250;
        if (_root.save.arenaSP < 0) {
          i = 1;
          while (i <= 100) {
            if (_root.save.arenaSkill[i] > 0) {
              _root.save.arenaSP += _root.save.arenaSkill[i];
              _root.save.arenaSkill[i] = 0;
            }
            ++i;
          }
        }
      }
      _root.save.ver = 21;
    }
    if (_root.save.ver < 23) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventorySpeed[i] = 2;
          _root.save.inventorySell[i] = 1000000;
        }
        ++i;
      }
      _root.save.ver = 23;
    }
    if (_root.save.ver < 26) {
      _root.save.stupidity = _root.save.banned;
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.ver = 26;
    }
    if (_root.save.ver < 28) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryName[i] == 'Elite Grenades' || _root.save.inventoryName[i] == 'Sword of Ascendant') {
          _root.save.inventoryNoLife[i] = true;
        }
        if (_root.save.inventoryName[i] == 'Bronze Trophy' || _root.save.inventoryName[i] == 'Silver Trophy' || _root.save.inventoryName[i] == 'Gold Trophy' || _root.save.inventoryName[i] == 'Bronze Endurance Trophy' || _root.save.inventoryName[i] == 'Silver Endurance Trophy' || _root.save.inventoryName[i] == 'Gold Endurance Trophy') {
          _root.save.inventoryNoLife[i] = true;
        }
        if (_root.save.inventoryBonusPow[i] > 1000) {
          _root.save.inventoryAttack[i] = 10;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 1' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 2' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 3' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 4' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 5' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 6' || _root.save.inventoryName[i] == 'Weapon Alien Rock Lv. 7' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 1' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 2' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 3' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 4' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 5' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 6' || _root.save.inventoryName[i] == 'Armor Alien Rock Lv. 7') {
          _root.save.inventoryAbility[i] = '';
          _root.save.inventorySell[i] = 4000;
        }
        ++i;
      }
      _root.save.ver = 28;
    }
    if (_root.save.ver < 29) {
      _root.save.raidTower = 0;
      _root.save.ver = 29;
    }
    if (_root.save.ver < 31) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryName[i] == 'Anniversary Hat') {
          _root.save.inventoryFrame[i] = 13;
        }
        if (_root.save.inventoryName[i] == 'Halloween Hat') {
          _root.save.inventoryFrame[i] = 12;
        }
        if (_root.save.inventoryName[i] == 'Halloween Shirt') {
          _root.save.inventoryFrame[i] = 11;
        }
        if (_root.save.inventoryName[i] == 'Halloween Gloves') {
          _root.save.inventoryFrame[i] = 10;
        }
        if (_root.save.inventoryName[i] == 'Halloween Pants') {
          _root.save.inventoryFrame[i] = 10;
        }
        if (_root.save.inventoryName[i] == 'Halloween Shoes') {
          _root.save.inventoryFrame[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 31;
    }
    if (_root.save.ver < 32) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryMaxLevel[i] > 22 && _root.save.inventoryMaxLevel[i] < 100) {
          _root.save.inventoryAttack[i] -= _root.save.inventoryMaxLevel[i] * 4;
          _root.save.inventoryEnhance[i] = 9;
          _root.save.inventoryBonusPow[i] -= _root.save.inventoryMaxLevel[i] * 4;
          _root.save.inventoryMaxLevel[i] = 1;
          _root.save.inventoryLevel[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 32;
    }
    if (_root.save.ver < 36) {
      _root.save.buttonPurple = _root.save.buttonPerfect;
      _root.save.totalMMR = _root.save.highMMR[1] + _root.save.highMMR[2] + _root.save.highMMR[3] + _root.save.highMMR[4];
      _root.save.arcade100kMedal = Math.floor((_root.save.totalPong + _root.save.totalAvoidance + _root.save.totalMath + _root.save.totalWhack + _root.save.totalMind + _root.save.totalMMR) / 133700);
      _root.save.ver = 36;
    }
    if (_root.save.ver < 37) {
      if (_root.save.petBestLevel > 0 && _root.save.petExist == 0) {
        _root.save.coinLag += 250000000;
      }
      _root.save.ver = 37;
    }
    if (_root.save.ver < 38) {
      if (_root.save.arenaZoneKill[49] > 0) {
        i = 1;
        while (i <= 16) {
          _root.save.arenaRingOwned[i] = 1;
          ++i;
        }
      }
      _root.save.ver = 38;
    }
    if (_root.save.ver < 39) {
      if (_root.save.petBestLevel > 0 && _root.save.petStat[1] + _root.save.petStat[2] + _root.save.petStat[3] + _root.save.petStat[4] + _root.save.petStat[5] + _root.save.petStat[6] + _root.save.petStat[7] + _root.save.petStat[8] < _root.save.petBestLevel * 8) {
        _root.save.petExist = 1;
        _root.save.petHealth = 100;
        _root.save.petFullness = 100;
        _root.save.petStat[1] = _root.save.petBestLevel;
        _root.save.petStat[2] = _root.save.petBestLevel;
        _root.save.petStat[3] = _root.save.petBestLevel;
        _root.save.petStat[4] = _root.save.petBestLevel;
        _root.save.petStat[5] = _root.save.petBestLevel;
        _root.save.petStat[6] = _root.save.petBestLevel;
        _root.save.petStat[7] = _root.save.petBestLevel;
        _root.save.petStat[8] = _root.save.petBestLevel;
        _root.save.coinLag += 1000000000;
        _root.save.blueCoin += 10000;
      }
      _root.save.ver = 39;
    }
    if (_root.save.ver < 41) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryNoRecycle[i] = false;
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryCrit[i] = 0;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 41;
    }
    if (_root.save.ver < 42) {
      _root.save.lolProfit += Math.floor(_root.save.petStat[7] * (0.5 + _root.save.petStat[7] / 2) * _root.save.lolPrice[10] * 0.92);
      _root.save.ver = 42;
    }
    if (_root.save.ver < 43) {
      if (_root.save.expGraph[5] >= 210000000000.0 || _root.save.expGraph[6] >= 210000000000.0 || _root.save.expGraph[7] >= 210000000000.0 || _root.save.lolProfit >= 2500000000.0 || isNaN(_root.save.lolProfit)) {
        _root.save.currentExp -= _root.save.expGraph[5] + _root.save.expGraph[6] + _root.save.expGraph[7];
        if (_root.save.lolProfit > 200000000) {
          _root.save.lolProfit = 200000000;
        }
        if (_root.save.blueCoin > 100000) {
          _root.save.blueCoin = 100000;
        }
        _root.save.mysteryBox[6] += 1;
      }
      _root.save.greenCoin += Math.floor(_root.save.lolGems[10] * _root.save.lolPrice[10]);
      _root.save.lolProfit += Math.floor(_root.save.lolGems[10] * _root.save.lolPrice[10]);
      _root.save.lolSpent[10] = 0;
      _root.save.lolGems[10] = 0;
      if (_root.save.petExist == 1) {
        _root.save.petFullness += 24;
        _root.save.petHealth += 12;
      }
      _root.save.ver = 43;
    }
    if (_root.save.ver < 46) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDesc[i] = '';
          tempSS = substring(_root.save.inventoryName[i], 1, 4);
          if (tempSS == '[O] ') {
            _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 5, _root.save.inventoryName[i].length);
            _root.save.inventoryDesc[i] = 'Item obtained before The Explosion update.';
          }
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDesc[i] = '';
          tempSS = substring(_root.save.inventoryName[i], 1, 4);
          if (tempSS == '[O] ') {
            _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 5, _root.save.inventoryName[i].length);
            _root.save.inventoryDesc[i] = 'Item obtained before The Explosion update.';
          }
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryDesc[i] = '';
        }
        ++i;
      }
      _root.save.ver = 46;
    }
    if (_root.save.ver < 47) {
      _root.save.ver = 47;
    }
    if (_root.save.ver < 48) {
      i = 1;
      while (i <= 24) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryExist[i] == 1 && isNaN(_root.save.inventoryDexterity[i])) {
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 48;
    }
    if (_root.save.ver < 51) {
      i = 101;
      while (i <= 124) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryCrit[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 51;
    }
    if (_root.save.ver < 101) {
      if (_root.save.arenaZoneKill[100] == undefined) {
        i = 50;
        while (i <= 100) {
          _root.save.arenaZoneKill[i] = 0;
          ++i;
        }
      }
      _root.save.arenaAttack += 60 * (_root.save.arenaLevel - 1);
      _root.save.arenaDefense += 60 * (_root.save.arenaLevel - 1);
      _root.save.arenaAccuracy += 6 * (_root.save.arenaLevel - 1);
      _root.save.arenaEvasion += 6 * (_root.save.arenaLevel - 1);
      i = 201;
      while (i <= 224) {
        if (_root.save.inventoryFrame[i] >= 151 && _root.save.inventoryFrame[i] <= 170) {
          _root.save.inventoryFrame[i] += 50;
        }
        if (_root.save.inventoryFrame[i] >= 101 && _root.save.inventoryFrame[i] <= 106) {
          _root.save.inventoryFrame[i] += 200;
        }
        if (_root.save.inventoryFrame[i] >= 51 && _root.save.inventoryFrame[i] <= 100) {
          _root.save.inventoryFrame[i] += 50;
        }
        if (_root.save.inventoryFrame[i] >= 8 && _root.save.inventoryFrame[i] <= 9) {
          _root.save.inventoryFrame[i] += 43;
        }
        if (_root.save.inventoryFrame[i] >= 108 && _root.save.inventoryFrame[i] <= 109) {
          _root.save.inventoryFrame[i] += 43;
        }
        ++i;
      }
      _root.save.mysteryBoxCollect[3] = new Array();
      _root.save.questCount = _root.save.bestLevel;
      if (!isNaN(_root.save.totalQuests)) {
        _root.save.questTotal = _root.save.totalQuests;
        _root.save.questToken += _root.save.questTotal * 5;
      }
      _root.save.ver = 101;
    }
    if (_root.save.ver < 104) {
      if (_root.save.fishLevel > 1 && _root.kongregate_username != undefined) {
        _root.my_so.clear();
        _root.gotoAndStop(1);
      }
      _root.save.ver = 104;
    }
    if (_root.save.ver < 106) {
      resetPoint = 0;
      i = 1;
      while (i <= 100) {
        if (_root.save.arenaSkill[i] > 0) {
          resetPoint += _root.save.arenaSkill[i];
        }
        ++i;
      }
      _root.save.arenaSP += resetPoint;
      _root.save.arenaTotalSkill = 0;
      i = 1;
      while (i <= 100) {
        if (_root.save.arenaSkill[i] > 0) {
          _root.save.arenaSkill[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 106;
    }
    if (_root.save.ver < 107) {
      _root.save.ver = 107;
    }
    if (_root.save.ver < 108) {
      _root.save.ver = 108;
    }
    if (_root.save.ver < 110) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        if (_root.save.inventoryName[i] == 'Small Master Potion') {
          _root.save.inventoryFrame[i] = 6;
        }
        if (_root.save.inventoryName[i] == 'Small Reward Potion') {
          _root.save.inventoryFrame[i] = 11;
        }
        if (_root.save.questSubtype == 'Another Graden Tree') {
          _root.save.questSubtype = 'Another Garden Tree';
        }
        ++i;
      }
      if (_root.save.questSubtype == 'Another Graden Tree') {
        _root.save.questSubtype = 'Another Garden Tree';
      }
      _root.save.ver = 110;
    }
    if (_root.save.ver < 111) {
      _root.save.arenaPixel = _root.save.arenaPixelMax;
      _root.save.ver = 111;
    }
    if (_root.save.ver < 112) {
      if (_root.save.inventoryExist[_root.save.arenaPendant] == 0) {
        _root.save.arenaPendant = 0;
      }
      _root.save.ver = 112;
    }
    if (_root.save.ver < 113) {
      _root.save.arenaCraft = _root.save.arenaCraftMax;
      _root.save.ver = 113;
    }
    if (_root.save.ver < 114) {
      _root.save.ver = 114;
    }
    if (_root.save.ver < 115) {
      if (_root.save.stadiumToken < 0) {
        _root.save.stadiumToken = 0;
        _root.save.ver = 116;
      }
    }
    if (_root.save.ver < 116) {
      if (_root.save.inventoryExist[_root.save.arenaPendant] == 0) {
        _root.save.arenaPendant = 0;
      }
      _root.save.ver = 116;
    }
    if (_root.save.ver < 117) {
      _root.save.ver = 117;
    }
    if (_root.save.ver < 118) {
      if (_root.save.arenaMaxDamage > 700000000000.0) {
        _root.save.arenaMaxDamage = 0;
        _root.save.arenaWeakenAffected = 1;
      }
      _root.save.ver = 118;
    }
    if (_root.save.ver < 119) {
      if (_root.save.gDifficulty >= 2) {
        _root.save.achEarnTime[1800] = _root.systemtimenow;
        _root.save.achEarnTime[1801] = _root.systemtimenow;
        _root.save.achEarnTime[1802] = _root.systemtimenow;
        _root.save.achEarnTime[1803] = _root.systemtimenow;
        _root.save.achEarnTime[1850] = _root.systemtimenow;
        _root.save.achEarnTime[1851] = _root.systemtimenow;
        _root.save.achEarnTime[1852] = _root.systemtimenow;
        _root.save.achEarnTime[1900] = _root.systemtimenow;
        _root.save.achEarnTime[1901] = _root.systemtimenow;
        _root.save.achEarnTime[1902] = _root.systemtimenow;
        _root.save.achEarnTime[1903] = _root.systemtimenow;
        _root.save.achEarnTime[1904] = _root.systemtimenow;
        _root.save.achEarnTime[1905] = _root.systemtimenow;
        _root.save.achEarnTime[1906] = _root.systemtimenow;
        _root.save.achEarnTime[1907] = _root.systemtimenow;
        _root.save.achEarnTime[1950] = _root.systemtimenow;
        _root.save.achEarnTime[1951] = _root.systemtimenow;
        _root.save.achEarnTime[1952] = _root.systemtimenow;
        _root.save.achEarnTime[1953] = _root.systemtimenow;
        _root.save.achEarnTime[1954] = _root.systemtimenow;
        _root.save.achEarnTime[1955] = _root.systemtimenow;
      }
      if (_root.save.gDifficulty >= 3) {
        _root.save.achEarnTime[2300] = _root.systemtimenow;
        _root.save.achEarnTime[2301] = _root.systemtimenow;
        _root.save.achEarnTime[2302] = _root.systemtimenow;
        _root.save.achEarnTime[2303] = _root.systemtimenow;
        _root.save.achEarnTime[2304] = _root.systemtimenow;
        _root.save.achEarnTime[2305] = _root.systemtimenow;
        _root.save.achEarnTime[3200] = _root.systemtimenow;
        _root.save.achEarnTime[3201] = _root.systemtimenow;
        _root.save.achEarnTime[3202] = _root.systemtimenow;
        _root.save.achEarnTime[3203] = _root.systemtimenow;
        _root.save.achEarnTime[3204] = _root.systemtimenow;
        _root.save.achEarnTime[3205] = _root.systemtimenow;
        _root.save.achEarnTime[4900] = _root.systemtimenow;
        _root.save.achEarnTime[4910] = _root.systemtimenow;
        _root.save.achEarnTime[4920] = _root.systemtimenow;
        _root.save.achEarnTime[4930] = _root.systemtimenow;
        _root.save.achEarnTime[4940] = _root.systemtimenow;
        _root.save.achEarnTime[4950] = _root.systemtimenow;
        _root.save.achEarnTime[4960] = _root.systemtimenow;
        _root.save.achEarnTime[4970] = _root.systemtimenow;
      }
      _root.save.ver = 119;
    }
    if (_root.save.ver < 120) {
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryDesc[i] == 'Explosion Crate Reward' && _root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventoryAttack[i] -= 500;
          _root.save.inventoryNoLife[i] = true;
        }
        ++i;
      }
      _root.save.ver = 120;
    }
    if (_root.save.ver < 121) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      _root.save.ver = 121;
    }
    if (_root.save.ver < 122) {
      i = 1;
      while (i <= 430) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Burned Rope' || _root.save.inventoryName[i] == 'Special Wand' || _root.save.inventoryName[i] == 'Bronze Pickaxe') {
            _root.save.inventoryNoFuse[i] = true;
          } else {
            _root.save.inventoryNoFuse[i] = false;
          }
        }
        ++i;
      }
      i = 401;
      while (i <= 430) {
        if (_root.save.inventoryName[i] == 'Large Power Potion') {
          _root.save.inventoryFrame[i] = 3;
          _root.save.inventoryAttack[i] = 1800;
        }
        if (_root.save.inventoryName[i] == 'Large Reward Potion') {
          _root.save.inventoryFrame[i] = 13;
          _root.save.inventoryAttack[i] = 1800;
        }
        ++i;
      }
      _root.save.ver = 122;
    }
    if (_root.save.ver < 123) {
      i = 1;
      while (i <= 30) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        ++i;
      }
      i = 301;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        ++i;
      }
      _root.save.ver = 123;
    }
    if (_root.save.ver < 124) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryAttack[i] > 0) {
            _root.save.inventoryAttack[i] = Math.floor(_root.save.inventoryAttack[i] * 0.9);
            _root.save.inventorySpeed[i] = Math.floor(_root.save.inventorySpeed[i] * 0.9);
            _root.save.inventoryDefense[i] = Math.floor(_root.save.inventoryDefense[i] * 0.9);
            _root.save.inventoryCrit[i] = Math.floor(_root.save.inventoryCrit[i] * 0.9);
            _root.save.inventoryDexterity[i] = Math.floor(_root.save.inventoryDexterity[i] * 0.9);
          }
          if (_root.save.inventoryName[i] == 'Sword of Ascendant') {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
          }
        }
        ++i;
      }
      _root.save.ver = 124;
    }
    if (_root.save.ver < 125) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryName[i] == 'Silver Pickaxe') {
            _root.save.inventorySpeed[i] = 6;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 2;
            _root.save.inventoryMaxLevel[i] = 2;
            _root.save.inventoryCrit[i] = 6;
          }
          if (_root.save.inventoryName[i] == 'Golden Pickaxe') {
            _root.save.inventorySpeed[i] = 7;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 9;
          }
          if (_root.save.inventoryName[i] == 'Diamond Pickaxe') {
            _root.save.inventorySpeed[i] = 8;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryEnhance[i] = 9;
            _root.save.inventoryLevel[i] = 3;
            _root.save.inventoryMaxLevel[i] = 3;
            _root.save.inventoryCrit[i] = 12;
          }
          if (_root.save.inventoryName[i] == 'Master\'s Pickaxe') {
            _root.save.inventorySpeed[i] = 9;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryEnhance[i] = 10;
            _root.save.inventoryLevel[i] = 4;
            _root.save.inventoryMaxLevel[i] = 4;
            _root.save.inventoryCrit[i] = 15;
          }
        }
        if (_root.save.inventorySubtype[i] == 'Mining Tool') {
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 125;
    }
    if (_root.save.ver < 126) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryDesc[i].indexOf('Elite Grenades') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Sword of Ascendant') != -1) {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
          }
          if (_root.save.inventoryDesc[i].indexOf('DOOOOOOM') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Trophy') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
          if (_root.save.inventoryDesc[i].indexOf('Alien') != -1) {
            _root.save.inventoryNoLife[i] = true;
          }
        }
        ++i;
      }
      _root.save.ver = 126;
    }
    if (_root.save.ver < 127) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventoryNoLife[i] == true) {
          _root.save.inventoryNoLife[i] = false;
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 127;
    }
    if (_root.save.ver < 128) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryDesc[i] == 'Explosion Crate Reward' && _root.save.inventoryName[i] == 'Elite Grenades') {
          _root.save.inventoryAttack[i] += 500;
        }
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          if (_root.save.inventorySpeed[i] > 2) {
            _root.save.inventoryAttack[i] += _root.save.inventorySpeed[i] * 5;
            _root.save.inventorySpeed[i] = 2;
          }
        }
        ++i;
      }
      _root.save.ver = 128;
    }
    if (_root.save.ver < 129) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Elite Grenades') {
          if (_root.save.inventorySpeed[i] > 2) {
            _root.save.inventoryAttack[i] += _root.save.inventorySpeed[i] * 5;
            _root.save.inventorySpeed[i] = 2;
          }
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 129;
    }
    if (_root.save.ver < 131) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryNoFuse[i] == true) {
          if (_root.save.inventoryDesc[i].indexOf('Pickaxe') != -1 && _root.save.inventorySpeed[i] > 15) {
            _root.save.inventorySpeed[i] = 7;
          }
        }
        if (_root.save.inventorySubtype[i] == 'Mining Tool') {
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 131;
    }
    if (_root.save.ver < 132) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventorySpeed[i] < 8 + Math.floor(_root.save.inventoryBonusPow[i] / 10)) {
          _root.save.inventorySpeed[i] = 8 + Math.floor(_root.save.inventoryBonusPow[i] / 10);
        }
        ++i;
      }
      _root.save.ver = 132;
    }
    if (_root.save.ver < 133) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Burned Rope' && _root.save.inventoryNoLife[i] == true) {
          _root.save.inventoryNoLife[i] = false;
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 133;
    }
    if (_root.save.ver < 134) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Special Wand' && _root.save.inventorySpeed[i] > 9 + Math.floor(_root.save.inventoryBonusPow[i] / 20 - _root.save.inventoryCrit[i] / 10 - _root.save.inventoryDexterity[i] / 10 - _root.save.inventoryHealth[i] / 10)) {
          _root.save.inventorySpeed[i] = 9 + Math.floor(_root.save.inventoryBonusPow[i] / 20 - _root.save.inventoryCrit[i] / 10 - _root.save.inventoryDexterity[i] / 10 - _root.save.inventoryHealth[i] / 10);
        }
        ++i;
      }
      _root.save.ver = 134;
    }
    if (_root.save.ver < 135) {
      _root.save.ver = 135;
    }
    if (_root.save.ver < 136) {
      _root.save.fishScore = Math.floor(_root.save.fishScore / 5) * 5;
      _root.save.fishScoreToday = Math.floor(_root.save.fishScoreToday / 5) * 5;
      _root.save.fishScoreRecord = Math.floor(_root.save.fishScoreRecord / 5) * 5;
      _root.save.ver = 136;
    }
    if (_root.save.ver < 137) {
      i = 201;
      while (i <= 224) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      i = 301;
      while (i <= 324) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Protection Enhancer') {
          _root.save.inventorySubtype[i] = 'Enhancer Destruction Enhancer';
        }
        ++i;
      }
      _root.save.ver = 137;
    }
    if (_root.save.ver < 139) {
      _root.save.arenaSpookyPenalty = _root.save.arenaZoneKill[52];
      _root.save.ver = 139;
    }
    if (_root.save.ver < 201) {
      _root.save.arenaSpookyPenalty = 0;
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryLevel[i] > 1 && _root.save.inventorySubtype[i] != 'Pendant') {
          if (_root.save.inventoryType[i] == 'Weapon') {
            _root.save.inventoryDefense[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 2;
            _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 4;
          }
          if (_root.save.inventoryType[i] == 'Armor') {
            _root.save.inventoryAttack[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 1;
            _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 2) * 4;
          }
          _root.save.inventoryDexterity[i] += Math.floor(_root.save.inventoryLevel[i] / 3) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 3) * 10;
          _root.save.inventoryHealth[i] += Math.floor(_root.save.inventoryLevel[i] / 4) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 4) * 10;
          _root.save.inventoryCrit[i] += Math.floor(_root.save.inventoryLevel[i] / 5) * 1;
          _root.save.inventoryBonusPow[i] += Math.floor(_root.save.inventoryLevel[i] / 5) * 10;
        }
        ++i;
      }
      _root.save.ver = 201;
    }
    if (_root.save.ver < 202) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Epic Fire Staff' || _root.save.inventoryName[i] == 'Epic Ice Staff' || _root.save.inventoryName[i] == 'Epic Wind Staff' || _root.save.inventoryName[i] == 'Epic Earth Staff' || _root.save.inventoryName[i] == 'Epic Thunder Staff' || _root.save.inventoryName[i] == 'Epic Water Staff' || _root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
          if (_root.save.inventoryNoFuse[i] == true) {
            _root.save.inventoryAttack[i] = 675;
            _root.save.inventoryBonusPow[i] = 0;
            _root.save.inventoryEnhance[i] = 0;
          }
          _root.save.inventoryMaxLevel[i] = 60;
          _root.save.inventoryNoFuse[i] = true;
        }
        ++i;
      }
      _root.save.ver = 202;
    }
    if (_root.save.ver < 203) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting' || _root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryRange[i] = true;
        }
        ++i;
      }
      _root.save.ver = 203;
    }
    if (_root.save.ver < 301) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Epic Fire Staff' || _root.save.inventoryName[i] == 'Epic Ice Staff' || _root.save.inventoryName[i] == 'Epic Wind Staff' || _root.save.inventoryName[i] == 'Epic Earth Staff' || _root.save.inventoryName[i] == 'Epic Thunder Staff' || _root.save.inventoryName[i] == 'Epic Water Staff' || _root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
          _root.save.inventoryAttack[i] = 750;
          _root.save.inventorySpeed[i] = 6;
          _root.save.inventoryDefense[i] = 0;
          _root.save.inventoryCrit[i] = 0;
          _root.save.inventoryDexterity[i] = 0;
          _root.save.inventoryHealth[i] = 0;
          _root.save.inventoryBonusPow[i] = 100;
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventoryMaxLevel[i] = 60;
          _root.save.inventoryNoFuse[i] = true;
        }
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +350%, Spawn Rate +20%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +350%, Spawn Rate +25%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +350%, Spawn Rate +35%\n\nCannot be enhanced with Attack enhancers.';
        }
        ++i;
      }
      _root.save.ver = 301;
    }
    if (_root.save.ver < 401) {
      i = 1;
      while (i <= 330) {
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
          _root.save.inventoryFrame[i] = 246;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
          _root.save.inventoryFrame[i] = 247;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
          _root.save.inventoryFrame[i] = 248;
        }
        ++i;
      }
      _root.save.ver = 401;
    }
    if (_root.save.ver < 402) {
      if (_root.save.bestLevel >= 200) {
        _root.save.eventToken += 3000;
      }
      _root.save.ver = 402;
    }
    if (_root.save.ver < 404) {
      _root.save.arenaRingOwned[16] = 1;
      _root.save.ver = 404;
    }
    if (_root.save.ver < 405) {
      if (_root.save.activeDeal1 == true) {
        _root.save.eventToken += 1000;
      }
      _root.save.ver = 405;
    }
    if (_root.save.ver < 406) {
      i = 1;
      while (i <= 400) {
        _root.save.inventoryNoUnique[i] = false;
        ++i;
      }
      _root.save.ver = 406;
    }
    if (_root.save.ver < 407) {
      _root.save.speedRunAscend = 2147483647;
      _root.save.speedRunAscendHard = 2147483647;
      _root.save.speedRunAscendImpossible = 2147483647;
      _root.save.speedRun9001 = 2147483647;
      _root.save.ver = 407;
    }
    if (_root.save.ver < 409) {
      i = 17;
      while (i <= 22) {
        _root.save.arenaRingOwned[i] = 0;
        ++i;
      }
      _root.save.ver = 409;
    }
    if (_root.save.ver < 411) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Meteoric') != -1) {
          _root.save.inventoryNoUnique[k] = true;
        } else {
          if (_root.save.inventoryNoUnique[k] == true) {
            _root.save.inventoryNoUnique[k] = false;
          }
        }
        ++k;
      }
      _root.save.ver = 411;
    }
    if (_root.save.ver < 412) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Censor') != -1) {
          _root.save.inventoryExpiry[k] = Infinity;
          _root.save.inventoryEnhance[k] -= 3;
        }
        ++k;
      }
      _root.save.ver = 412;
    }
    if (_root.save.ver < 413) {
      if (_root.save.bestLevel > 1) {
        if (_root.save.inventoryExist[_root.save.arenaHat] != 1) {
          _root.save.arenaHat = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShirt] != 1) {
          _root.save.arenaShirt = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaGloves] != 1) {
          _root.save.arenaGloves = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaPants] != 1) {
          _root.save.arenaPants = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShoes] != 1) {
          _root.save.arenaShoes = 0;
        }
      }
      _root.save.ver = 413;
    }
    if (_root.save.ver < 415) {
      _root.save.permaStupidity = _root.save.banned;
      _root.save.permaStupidityHard = _root.save.bannedHard;
      _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      _root.save.ver = 415;
    }
    if (_root.save.ver < 418) {
      _root.save.fcgExp += _root.save.fcgWin * 20;
      _root.save.fcgExp += _root.save.fcgLevel6 * 10;
      _root.save.fcgExp += _root.save.fcgLevel7 * 20;
      _root.save.fcgExp += _root.save.fcgLevel8 * 30;
      _root.save.fcgCash += _root.save.fcgWin * 30;
      _root.save.fcgCash += _root.save.fcgLevel6 * 15;
      _root.save.fcgCash += _root.save.fcgLevel7 * 30;
      _root.save.fcgCash += _root.save.fcgLevel8 * 45;
      _root.save.fcgLevel8 = 0;
      _root.save.ver = 418;
    }
    if (_root.save.ver < 419) {
      _root.save.fcgLegendDeck = 13 + Math.floor(_root.systemtimenow / 86400000 % 21);
      _root.save.fcgLegendLife = 10;
      _root.save.ver = 419;
    }
    if (_root.save.ver < 424) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == '2nd Anniversary Medal') {
          _root.save.inventoryFrame[i] = 4;
        }
        ++i;
      }
      _root.save.ver = 424;
    }
    if (_root.save.ver < 425) {
      _root.save.fcgStreak8 = 0;
      _root.save.fcgMaxStreak8 = 0;
      _root.save.ver = 425;
    }
    if (_root.save.ver < 426) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'First Medal' || _root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryNoUnique[i] = false;
        }
        ++i;
      }
      _root.save.ver = 426;
    }
    if (_root.save.ver < 427) {
      if (_root.save.gDifficulty >= 3 && _root.save.level < 9000) {
        _root.save.bankGardenFruit = Math.floor(_root.save.gardenFruit * 0.95);
        _root.save.gardenFruit = Math.ceil(_root.save.gardenFruit * 0.05);
      }
      _root.save.robaconBacon += Math.floor(_root.save.arenaCraft / 50000);
      if (_root.save.robaconBacon > 2000) {
        _root.save.robaconBacon = 2000;
      }
      _root.save.ver = 427;
    }
    if (_root.save.ver < 429) {
      if (_root.save.arenaLevel >= 50 && _root.save.totalPlayTime >= 300000) {
        _root.save.arenaTutorial = 2;
      }
    }
    if (_root.save.ver < 436) {
      k = 1;
      while (k <= 500) {
        if (_root.save.inventoryName[k].indexOf('Meteoric') != -1) {
          _root.save.inventoryNoUnique[k] = true;
          if (_root.save.inventoryAttack[k] > 550) {
            _root.save.inventoryAttack[k] = 550;
          }
        } else {
          if (_root.save.inventoryNoUnique[k] == true) {
            _root.save.inventoryNoUnique[k] = false;
          }
        }
        if (_root.save.inventoryName[k] == 'Dark Ruler') {
          _root.save.inventoryEnhance[k] = 2005;
        }
        ++k;
      }
      _root.save.ver = 436;
    }
    if (_root.save.ver < 457) {
      _root.save.arenaSP = 1 + _root.save.arenaLevel * 15 + _root.save.arenaUltimateSP * 10;
      i = 1;
      while (i <= 80) {
        _root.save.arenaSkill[i] = 0;
        ++i;
      }
      _root.save.arenaTotalSkill = 0;
      _root.save.arenaSkillMax = [0, 30, 30, 30, 30, 10, 0, 0, 0, 10, 10, 20, 20, 30, 30, 30, 20, 0, 30, 10, 30, 10, 30, 30, 10, 30, 1, 10, 10, 20, 30, 10, 30, 30, 50, 50, 30, 10, 30, 10, 20, 10, 20, 10, 20, 30, 0, 0, 0, 1, 30, 10, 10, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      i = 26;
      while (i <= 100) {
        if (i != 26 && i != 51 && i != 76) {
          _root.save.gardenBreedTotal += Math.floor(_root.save.gardenSeed[i] * 1.2 + _root.save.gardenMastery[i]);
        }
        ++i;
      }
      _root.save.arenaKillEpic += _root.save.arenaUnobtainium;
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Loot Magnet') {
          _root.save.arenaKillEpic += 2500;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
          if (_root.save.inventoryExpiry[i] != Infinity || _root.save.inventoryCrit[i] == 21) {
            _root.save.arenaKillEpic += 1500;
          } else {
            _root.save.arenaKillEpic += 7500;
          }
        }
        ++i;
      }
      _root.save.boostAutoMax = 150;
      _root.save.ver = 457;
    }
    if (_root.save.ver < 460) {
      if (_root.save.level >= 9000 || _root.save.gDifficulty != 3) {
        _root.save.arenaPixel += Math.floor(_root.save.arenaPixelMax * 0.2);
        _root.save.arenaCraft += Math.floor(_root.save.arenaCraftMax * 0.45);
      } else {
        _root.save.bankArenaPixel += Math.floor(_root.save.arenaPixelMax * 0.25);
        _root.save.bankArenaCraft += Math.floor(_root.save.arenaCraftMax * 0.55);
      }
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryUnob[i] = 0;
          if (_root.save.inventoryName[i] == 'Glaive-Glaive-Glaive-Guisarme-Glaive') {
            _root.save.inventoryCrit[i] += 10;
            _root.save.inventoryDexterity[i] += 10;
            _root.save.inventoryAttack[i] += 40;
            _root.save.inventoryBonusPow[i] += 40;
          }
          if (_root.save.inventoryName[i] == 'Greatsword') {
            _root.save.inventoryCrit[i] += 15;
            _root.save.inventoryDexterity[i] += 15;
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryBonusPow[i] += 50;
          }
          if (_root.save.inventoryName[i] == 'Greatersword') {
            _root.save.inventoryCrit[i] += 20;
            _root.save.inventoryDexterity[i] += 20;
            _root.save.inventoryAttack[i] += 60;
            _root.save.inventoryBonusPow[i] += 60;
          }
          if (_root.save.inventoryName[i] == 'Gold Cannon') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryBonusPow[i] += 100;
          }
          if (_root.save.inventoryName[i].indexOf('Berserker') != -1) {
            _root.save.inventoryCrit[i] += 7;
          }
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryCrit[i] += 8;
          }
          if (_root.save.inventoryName[i].indexOf('Pure Darkness') != -1) {
            _root.save.inventoryCrit[i] += 9;
          }
          if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
            _root.save.inventoryCrit[i] += 10;
          }
          if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryBonusPow[i] += 500;
          }
          if (_root.save.inventoryName[i] == 'Cursed Sword') {
            _root.save.inventoryEnhance[i] -= 6;
          }
          if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryBonusPow[i] += 500;
          }
          if (_root.save.inventoryName[i] == 'Loot Magnet') {
            _root.save.inventoryBonusPow[i] += 156;
          }
          if (_root.save.inventoryName[i] == 'Arena Champion') {
            _root.save.inventoryBonusPow[i] += 156;
          }
          if (_root.save.inventoryName[i] == 'Censor Sword') {
            _root.save.inventoryAttack[i] += 100;
          }
          if (_root.save.inventoryName[i] == 'Rain Bow') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryMoreBonus[i] = 'Accuracy';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Poison Damage';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Weaken Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
            _root.save.inventoryAttack[i] += 150;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
            _root.save.inventoryAttack[i] += 100;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
            _root.save.inventoryAttack[i] += 50;
            _root.save.inventoryAbility[i] = 'Blind Effect';
            _root.save.inventoryMoreBonus[i] = 'MaxMP';
          }
        }
        ++i;
      }
      _root.save.arenaZone = 0;
      _root.save.ver = 460;
    }
    if (_root.save.ver < 461) {
      i = 1;
      while (i <= 60) {
        if (_root.save.arenaZoneKill[i] > 0) {
          _root.save.arenaZoneFound[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 461;
    }
    if (_root.save.ver < 462) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryMoreBonus[i] = '';
          if (_root.save.inventoryDesc[i] == undefined) {
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 462;
    }
    if (_root.save.ver < 465) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +200%, Spawn Rate +20%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +225%, Spawn Rate +25%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +250%, Spawn Rate +35%\n\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Pendant of Selectivity') {
          _root.save.inventoryName[i] = 'Pendant of Epicness';
        }
        ++i;
      }
      _root.save.breakignore9002 = true;
      if (_root.kongregate_username == 'Tukkun' || _root.kongregate_username == undefined || _root.saveid == 4) {
        _root.save.breakignore9002 = false;
      }
      _root.save.mysteryBoxCollect3 = new Array();
      _root.save.mysteryBox[2] = Math.ceil(_root.save.mysteryBox[2] * 0.1);
      i = 1;
      while (i <= 12) {
        if (!isNaN(_root.save.mysteryBoxCollect4[i])) {
          _root.save.legendaryBoxOpened += _root.save.mysteryBoxCollect4[i];
        }
        ++i;
      }
      _root.save.ver = 465;
    }
    if (_root.save.ver < 466) {
      _root.save.highCount = 0;
      _root.save.totalCount = 0;
      if (_root.save.bestLevel >= 500) {
        _root.save.mysteryBox[8] += 3;
      }
      _root.save.ver = 466;
    }
    if (_root.save.ver < 470) {
      if (_root.save.gDifficulty >= 3 && _root.save.level >= 9000) {
        _root.save.stadiumAbilityCost = 400;
      }
      _root.save.arenaEnhancerFragment += _root.save.bestLevel;
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryDesc[i].indexOf('Well, it WAS immortal') != -1) {
          _root.save.inventoryExpiry[i] = _root.systemtimenow + 604800000;
        }
        if (_root.save.inventoryDesc[i].indexOf('The more you use it,') != -1) {
          _root.save.inventoryExpiry[i] = _root.systemtimenow + 2592000000.0;
        }
        ++i;
      }
      _root.save.ver = 470;
    }
    if (_root.save.ver < 471) {
      _root.save.stadiumAbilityCost = _root.save.stadiumEnergy + _root.save.stadiumAccel + _root.save.stadiumMaxSpeed + _root.save.stadiumStartSpeed + _root.save.stadiumDash + _root.save.stadiumJump + _root.save.stadiumBoost + _root.save.stadiumReward;
      _root.save.ver = 471;
    }
    if (_root.save.ver < 472) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryDesc[i] == undefined) {
            _root.save.inventoryDesc[i] = '';
            _root.save.inventoryExpiry[i] = Infinity;
          }
        }
        ++i;
      }
      _root.save.ver = 472;
    }
    if (_root.save.ver < 473) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Sword') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Sword';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Spear') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Spear';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Thunder Polearm') {
            _root.save.inventoryName[i] = 'Ultimate Lightning Polearm';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Fire Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Ice Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Sword') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Spear') {
            _root.save.inventoryAttack[i] += 150;
          }
          if (_root.save.inventoryName[i] == 'Ultimate Lightning Polearm') {
            _root.save.inventoryAttack[i] += 150;
          }
        }
        ++i;
      }
      _root.save.ver = 473;
    }
    if (_root.save.ver < 475) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryBonus[i] == 'Enhancer Filter' || _root.save.inventoryBonus[i] == 'Enhancer Level' || _root.save.inventoryBonus[i] == 'Enhancer Rarity') {
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
        }
        _root.save.ver = 475;
        ++i;
      }
    }
    if (_root.save.ver < 476) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryNoFuse[i] == false && _root.save.inventoryDesc[i].indexOf('Fused Item') != -1) {
          _root.save.inventoryNoFuse[i] = true;
          TFP = _root.save.inventoryAttack[i] + _root.save.inventoryDefense[i] * 1.6 - _root.save.inventoryEnhance[i] * 50;
          if (TFP >= 600) {
            _root.save.inventorySell[i] = Math.floor(_root.save.inventorySell[i] * 5);
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
          }
        }
        ++i;
      }
      _root.save.ver = 476;
    }
    if (_root.save.ver < 480) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Triangle Gem') {
          _root.save.inventorySpirit[i] = false;
          _root.save.inventoryEnhance[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 480;
    }
    if (_root.save.ver < 482) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryName[i] == 'Immortal Pendant') {
          _root.save.inventoryNoBonus[i] = false;
        }
        ++i;
      }
      _root.save.ver = 482;
    }
    if (_root.save.ver < 486) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryAttack[i] += 25;
            _root.save.inventoryUnob[i] = 10;
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%\n\nWhen equipped with Fairy Godmother Armor (5 pieces): Potion Efficiency +500%, Spawn Rate +30%';
          }
          if (_root.save.inventoryBonusPow[i] >= 7000 || _root.save.inventoryAttack[i] >= 3100 || _root.save.inventoryDefense[i] >= 1900 || _root.save.inventoryCrit[i] >= 250 || _root.save.inventoryDexterity[i] >= 250 || _root.save.inventoryHealth[i] >= 250) {
            _root.save.inventoryNoLife[i] = true;
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
          }
          if (_root.save.inventoryType[i] == 'Enhancer') {
            if (_root.save.inventorySubtype[i] == 'Weapon Attack Enhancer' && _root.save.inventoryAttack[i] >= 56 && _root.save.inventoryName[i] != 'Relic') {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Attack Enhancer' && _root.save.inventoryAttack[i] >= 23) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Speed Enhancer' && _root.save.inventoryAttack[i] >= 4) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Speed Enhancer' && _root.save.inventoryAttack[i] >= 4) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Defense Enhancer' && _root.save.inventoryAttack[i] >= 100) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Defense Enhancer' && _root.save.inventoryAttack[i] >= 34) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Critical Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Critical Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Dexterity Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Dexterity Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Health Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Health Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Mystery Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Mystery Enhancer' && _root.save.inventoryAttack[i] >= 12) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Weapon Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Armor Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
            if (_root.save.inventorySubtype[i] == 'Accessory Unique Enhancer' && _root.save.inventoryAttack[i] >= 101) {
              _root.save.inventoryNoLife[i] = true;
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryDesc[i] += '\n\nThis item is blocked to be further investigated. If you believe your item is wrongfully blocked, please post in the forum thread.';
            }
          }
        }
        ++i;
      }
      _root.save.ver = 486;
    }
    if (_root.save.ver < 487) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Alien Core') {
            _root.save.inventoryNoLife[i] = false;
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 487;
    }
    if (_root.save.ver < 489) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryAttack[i] += 25;
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%\n\nWhen equipped with Fairy Godmother Armor (5 pieces): Potion Efficiency +500%, Spawn Rate +40%';
          }
          if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
            _root.save.inventoryDefense[i] += 15;
            _root.save.inventoryBonusPow[i] += 30;
          }
        }
        ++i;
      }
      _root.save.ver = 489;
    }
    if (_root.save.ver < 489) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Pure Darkness Hat') {
            _root.save.inventoryHealth[i] += 6;
            _root.save.inventoryDefense[i] += 40;
          } else {
            if (_root.save.inventoryName[i] == 'Crimson Hat') {
              _root.save.inventorySpeed[i] += 1;
              _root.save.inventoryHealth[i] += 15;
              _root.save.inventoryDefense[i] += 80;
            } else {
              if (_root.save.inventoryName[i] == 'Pure Darkness Shoes') {
                _root.save.inventoryDexterity[i] += 6;
                _root.save.inventoryDefense[i] += 40;
              } else {
                if (_root.save.inventoryName[i] == 'Crimson Shoes') {
                  _root.save.inventorySpeed[i] += 1;
                  _root.save.inventoryDexterity[i] += 15;
                  _root.save.inventoryDefense[i] += 80;
                } else {
                  if (_root.save.inventoryName[i].indexOf('Pure Darkness') != -1) {
                    _root.save.inventoryCrit[i] += 6;
                    _root.save.inventoryDefense[i] += 40;
                  } else {
                    if (_root.save.inventoryName[i].indexOf('Crimson') != -1) {
                      _root.save.inventorySpeed[i] += 1;
                      _root.save.inventoryCrit[i] += 15;
                      _root.save.inventoryDefense[i] += 80;
                    } else {
                      if (_root.save.inventoryName[i].indexOf('Berserker') != -1) {
                        _root.save.inventoryDefense[i] += 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 490;
    }
    if (_root.save.ver < 491) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryDefense[i] += 20;
          } else {
            if (_root.save.inventoryName[i].indexOf('Epic') != -1 && _root.save.inventoryName[i].indexOf('Staff') != -1 && _root.save.inventoryReqRank[i] < 500) {
              _root.save.inventoryReqRank[i] = (_root.save.inventoryReqRank[i] - 200) * 10 + 200;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 491;
    }
    if (_root.save.ver < 492) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Defensive') != -1) {
            _root.save.inventoryDefense[i] += 20;
          } else {
            if (_root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
              if (_root.save.inventoryReqRank[i] < 500) {
                _root.save.inventoryReqRank[i] = (_root.save.inventoryReqRank[i] - 200) * 10 + 200;
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 492;
    }
    if (_root.save.ver < 493) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryReqRank[i] > 500) {
            _root.save.inventoryReqRank[i] = 500;
          }
        }
        ++i;
      }
      _root.save.ver = 493;
    }
    if (_root.save.ver < 494) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Epic') != -1 && _root.save.inventoryName[i].indexOf('Staff') != -1) {
            if (_root.save.inventoryReqRank[i] > _root.save.arenaLevel) {
              _root.save.inventoryReqRank[i] = _root.save.arenaLevel;
            }
          } else {
            if (_root.save.inventoryName[i] == 'Light Glaive' || _root.save.inventoryName[i] == 'Dark Glaive') {
              if (_root.save.inventoryReqRank[i] > _root.save.arenaLevel) {
                _root.save.inventoryReqRank[i] = _root.save.arenaLevel;
              }
            }
          }
        }
        ++i;
      }
      _root.save.ver = 494;
    }
    if (_root.save.ver < 495) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Special Loot Magnet') {
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryNoLife[i] = false;
            _root.save.inventoryDesc[i] = 'A one-of-a-kind Loot Magnet awarded for winning an auction. Now to place it in the Storage and never use it.';
          }
        }
        ++i;
      }
      _root.save.ver = 495;
    }
    if (_root.save.ver < 497) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Dark Ruler') {
            _root.save.inventoryAttack[i] += 1705;
            if (_root.save.inventoryAttack[i] > 3000) {
              _root.save.inventoryAttack[i] = 3000;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 497;
    }
    if (_root.save.ver < 499) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryExist[i] != 1) {
          delete _root.save.inventoryExpiry[i];
        }
        ++i;
      }
      _root.save.ver = 499;
    }
    if (_root.save.ver < 500) {
      i = 1;
      while (i <= 600) {
        if (_root.save.inventoryReqRank[i] < 0 && !isNaN(_root.save.inventoryReqRank[i])) {
          _root.save.inventoryReqRank[i] = 1;
        }
        ++i;
      }
      _root.save.ver = 500;
    }
    if (_root.save.ver < 502) {
      _root.save.dominatorBonus = 0;
      i = 1;
      while (i <= 1337) {
        _root.save.inventorySell[i] = Math.floor(_root.save.inventorySell[i] * 4);
        if (_root.save.inventoryReqRank[i] < 0 && !isNaN(_root.save.inventoryReqRank[i])) {
          _root.save.inventoryReqRank[i] = 1;
        }
        if (_root.save.inventoryMoreBonus[i] == 'Pixel / Loot' || _root.save.inventoryMoreBonus[i] == 'Material / Loot') {
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Dominator Gem') {
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventorySpirit[i] = false;
          if (g2ku != true) {
            g2ku = true;
            _root.save.arenaUnobtainium += 2000;
          }
        }
        if (_root.save.inventoryName[i] == 'Dominator Gem' && _root.save.inventoryDefense[i] > 81) {
          _root.save.dominatorBonus += _root.save.inventoryDefense[i] - 81;
          _root.save.inventoryDefense[i] = 81;
        }
        if (_root.save.inventoryExist[i] != 1) {
          delete _root.save.inventoryExpiry[i];
        }
        if (_root.save.inventoryName[i] == 'Hero Sword') {
          _root.save.inventoryBonusPow[i] -= 50;
        }
        if (_root.save.inventoryName[i] == 'Triangle Sword') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Legendary Sword') {
          _root.save.inventoryBonusPow[i] -= 150;
        }
        if (_root.save.inventoryName[i] == 'Spirit Sword') {
          _root.save.inventoryBonusPow[i] -= 500;
        }
        if (_root.save.inventoryName[i] == 'Advanced Fire Gun') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Advanced Water Gun') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Glaive') {
          _root.save.inventoryBonusPow[i] -= 10;
        }
        if (_root.save.inventoryName[i] == 'Guisarme') {
          _root.save.inventoryBonusPow[i] -= 20;
        }
        if (_root.save.inventoryName[i] == 'Longspear') {
          _root.save.inventoryBonusPow[i] -= 30;
        }
        if (_root.save.inventoryName[i] == 'Lucerne Hammer') {
          _root.save.inventoryBonusPow[i] -= 40;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Guisarme') {
          _root.save.inventoryBonusPow[i] -= 50;
        }
        if (_root.save.inventoryName[i] == 'Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 60;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 70;
        }
        if (_root.save.inventoryName[i] == 'Glaive-Glaive-Glaive-Guisarme-Glaive') {
          _root.save.inventoryBonusPow[i] -= 80;
        }
        if (_root.save.inventoryName[i] == 'Greatsword') {
          _root.save.inventoryBonusPow[i] -= 90;
          _root.save.inventoryAttack[i] += 30;
        }
        if (_root.save.inventoryName[i] == 'Greatersword') {
          _root.save.inventoryBonusPow[i] -= 100;
          _root.save.inventoryAttack[i] += 30;
        }
        if (_root.save.inventoryName[i] == 'Mystic Bow') {
          _root.save.inventoryBonusPow[i] -= 100;
        }
        if (_root.save.inventoryName[i] == 'Mystic Crossbow') {
          _root.save.inventoryBonusPow[i] -= 110;
        }
        if (_root.save.inventoryName[i] == 'Slingshot') {
          _root.save.inventoryBonusPow[i] -= 120;
        }
        if (_root.save.inventoryName[i] == 'Oversized Slingshot') {
          _root.save.inventoryBonusPow[i] -= 130;
        }
        if (_root.save.inventoryName[i] == 'Cannon') {
          _root.save.inventoryBonusPow[i] -= 140;
        }
        if (_root.save.inventoryName[i] == 'Gold Cannon') {
          _root.save.inventoryBonusPow[i] -= 150;
        }
        if (_root.save.inventoryName[i] == 'Premium Sword (1)' || _root.save.inventoryName[i] == 'Premium Sword (2)' || _root.save.inventoryName[i] == 'Premium Sword (3)' || _root.save.inventoryName[i] == 'Cursed Sword (1)' || _root.save.inventoryName[i] == 'Cursed Sword (2)' || _root.save.inventoryName[i] == 'Cursed Sword (3)') {
          _root.save.inventoryBonusPow[i] -= 66;
        }
        if (_root.save.inventoryName[i] == 'Elite Hat' || _root.save.inventoryName[i] == 'Elite Shirt' || _root.save.inventoryName[i] == 'Elite Gloves' || _root.save.inventoryName[i] == 'Elite Pants' || _root.save.inventoryName[i] == 'Elite Shoes') {
          _root.save.inventoryBonusPow[i] -= 60;
        }
        if (_root.save.inventoryName[i] == 'Defensive Hat' || _root.save.inventoryName[i] == 'Defensive Shirt' || _root.save.inventoryName[i] == 'Defensive Gloves' || _root.save.inventoryName[i] == 'Defensive Pants' || _root.save.inventoryName[i] == 'Defensive Shoes') {
          _root.save.inventoryBonusPow[i] -= 30;
          _root.save.inventoryDefense[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Pure Darkness Hat' || _root.save.inventoryName[i] == 'Pure Darkness Shirt' || _root.save.inventoryName[i] == 'Pure Darkness Gloves' || _root.save.inventoryName[i] == 'Pure Darkness Pants' || _root.save.inventoryName[i] == 'Pure Darkness Shoes') {
          _root.save.inventoryBonusPow[i] -= 60;
          _root.save.inventoryDefense[i] += 20;
        }
        if (_root.save.inventoryName[i] == 'Crimson Hat' || _root.save.inventoryName[i] == 'Crimson Shirt' || _root.save.inventoryName[i] == 'Crimson Gloves' || _root.save.inventoryName[i] == 'Crimson Pants' || _root.save.inventoryName[i] == 'Crimson Shoes') {
          _root.save.inventoryBonusPow[i] -= 120;
          _root.save.inventoryDefense[i] += 40;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pickaxe') {
          _root.save.inventoryEnhance[i] -= 1;
        }
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1 && _root.save.inventoryType[i] == 'Weapon') {
          _root.save.inventoryUnob[i] = 20;
          _root.save.inventoryDesc[i] = 'When equipped with Meteoric Armor (5 pieces): Spawn Rate +70%';
        }
        ++i;
      }
      if (_root.save.dominatorBonus > 1800) {
        _root.save.dominatorBonus = 1800;
      }
      _root.save.ver = 502;
    }
    if (_root.save.ver < 503) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1 && _root.save.inventoryType[i] == 'Weapon') {
          _root.save.inventoryUnob[i] = 20;
          _root.save.inventoryDesc[i] = 'When equipped with Meteoric Armor (5 pieces): Spawn Rate +70%';
        }
        ++i;
      }
      _root.save.ver = 503;
    }
    if (_root.save.ver < 504) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Newbie Shirt') {
          _root.save.inventorySubtype[i] = 'Shirt';
        }
        if (_root.save.inventoryName[i] == 'Newbie Gloves') {
          _root.save.inventorySubtype[i] = 'Gloves';
        }
        if (_root.save.inventoryName[i] == 'Newbie Pants') {
          _root.save.inventorySubtype[i] = 'Pants';
        }
        if (_root.save.inventoryName[i] == 'Newbie Shoes') {
          _root.save.inventorySubtype[i] = 'Shoes';
        }
        ++i;
      }
      _root.save.ver = 504;
    }
    if (_root.save.ver < 505) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Dominator Gem') {
          _root.save.inventoryEnhance[i] = 0;
          _root.save.inventorySpirit[i] = false;
          if (_root.save.inventoryDefense[i] > 81) {
            _root.save.dominatorBonus += _root.save.inventoryDefense[i] - 81;
            _root.save.inventoryDefense[i] = 81;
          }
        }
        ++i;
      }
      _root.save.ver = 505;
    }
    if (_root.save.ver < 506) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Constancy') {
          _root.save.inventoryExpTNL[i] = 25000;
        }
        ++i;
      }
      _root.save.ver = 506;
    }
    if (_root.save.ver < 509) {
      _root.save.rankedPong = _root.save.highPong;
      _root.save.rankedAvoidance = _root.save.highAvoidance;
      _root.save.rankedMath = _root.save.highMath;
      _root.save.rankedWhack = _root.save.highWhack;
      _root.save.rankedMind = _root.save.highMind;
      _root.save.rankedBalance = _root.save.highBalance;
      _root.save.rankedCount = _root.save.highCount;
      i = 1;
      while (i <= 40) {
        _root.save.unrankedPower[i] = 0;
        ++i;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Meteoric Axe') {
          _root.save.inventoryAttack[i] += 25;
          _root.save.inventoryCrit[i] += 12;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Sword') {
          _root.save.inventoryCrit[i] += 10;
          _root.save.inventoryDexterity[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Cleaver') {
          _root.save.inventorySpeed[i] += 2;
          _root.save.inventoryCrit[i] += 7;
          _root.save.inventoryDexterity[i] += 15;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Glaive') {
          _root.save.inventoryAttack[i] += 50;
          _root.save.inventoryCrit[i] += 10;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Scythe') {
          _root.save.inventoryAttack[i] += 25;
          _root.save.inventoryHealth[i] += 20;
        }
        if (_root.save.inventoryName[i] == 'Meteoric Voulge') {
          _root.save.inventoryAttack[i] += 25;
        }
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Holy Glory Armor (5 pieces): Damage +200%, Spawn Rate +10%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryDesc[i] = 'When equipped with Dark Angel Armor (5 pieces): Damage +225%, Spawn Rate +15%\nShoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryDesc[i] = 'When equipped with Chaos Armor (5 pieces): Damage +250%, Spawn Rate +25%\n\nCannot be enhanced with Attack enhancers.';
        }
        if (_root.save.inventoryName[i] == 'Pirate Sword') {
          _root.save.inventoryDesc[i] = 'A Pirate Sword. It allows you to get extra Coins and Pixels as you damage the monsters - the higher level the Pirate Sword gets, the more Coins and Pixels you get. The worst part is that before you attack, you must shout the skill name in pirate language. That\'s why you attack so slowly with this.';
          if (_root.save.inventoryLevel[i] == 300) {
            _root.save.inventorySpeed[i] += 3;
            _root.save.inventoryDesc[i] = 'Congratulations! You have mastered the pirate language (for this particular sword, at least), and as a result, you can attack twice as fast with this Pirate Sword equipped!';
          }
        }
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryBonusPow[i] += _root.save.inventoryReqRank[i] - 1;
          if (_root.save.inventoryReqRank[i] == 500) {
            _root.save.inventoryBonusPow[i] += 250;
          }
        }
        ++i;
      }
      _root.save.ver = 509;
    }
    if (_root.save.ver < 511) {
      if (_root.save.arenaLevel >= 3) {
        i = 2;
        while (i <= _root.save.arenaLevel) {
          _root.save.arenaPixel += 100 * i * i;
          _root.save.arenaCraft += 10 * i * i;
          ++i;
        }
      }
      _root.save.ver = 511;
    }
    if (_root.save.ver < 512) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryEnhance[i] -= 5;
        }
        if (_root.save.inventoryExist[i] == 1) {
          _root.save.inventoryGuard[i] = false;
        }
        if (_root.save.inventoryName[i] == 'Gem of Constancy') {
          _root.save.inventoryDesc[i] = 'This gem gets more and more powerful as you fight with it equipped, but whenever you equip or unequip an item (including the Gem of Constancy itself), it will go back to its original state. Rumor says that something will happen when it reaches level 500...\n\nSpawn Rate +5% per piece of Finalized equipment equipped.';
        }
        ++i;
      }
      _root.save.ver = 512;
    }
    if (_root.save.ver < 513) {
      if (_root.save.fcgLevel > 200) {
        _root.save.fcgLevel = 200;
      }
      _root.save.ver = 513;
    }
    if (_root.save.ver < 514) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == '(MYSTERIOUS ITEM)') {
          _root.save.inventoryEnhance[i] = 10;
          if (_root.save.inventoryNoFuse[i] == true) {
            _root.save.inventoryExpiry[i] = 0;
          } else {
            _root.save.inventoryNoFuse[i] = true;
          }
        }
        ++i;
      }
      _root.save.ver = 514;
    }
    if (_root.save.ver < 515) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS GLOVES') {
          _root.save.inventoryDexterity[i] += 50;
        }
        ++i;
      }
      _root.save.ver = 515;
    }
    if (_root.save.ver < 517) {
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.ver = 517;
    }
    if (_root.save.ver < 518) {
      if (_root.save.eventToken < 0) {
        _root.save.eventToken += 500;
      }
      _root.save.ver = 518;
    }
    if (_root.save.ver < 519) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Ghost Shoes' && _root.save.inventoryEnhance[i] > 0) {
          _root.save.inventoryAttack[i] = 27;
          _root.save.inventorySpeed[i] = 7;
          _root.save.inventoryDefense[i] = 900;
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryDexterity[i] = 100;
          _root.save.inventoryHealth[i] = 0;
          _root.save.inventoryEnhance[i] = 11;
          _root.save.inventoryBonusPow[i] = 114;
          _root.save.inventorySpirit[i] = true;
        }
        ++i;
      }
      _root.save.ver = 519;
    }
    if (_root.save.ver < 520) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1) {
          _root.save.inventoryExpTNL[i] = 90000000;
        }
        if (_root.save.inventoryName[i].indexOf('Ghost') != -1 && _root.save.inventoryType[i] == 'Armor') {
          _root.save.inventoryDefense[i] += 200;
        }
        if (_root.save.inventoryName[i] == 'Empowering Gem') {
          _root.save.inventoryDesc[i] += 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!\n\nWhen equipped with a Rank 200+ weapon: Damage +50%';
        }
        ++i;
      }
      _root.save.ver = 520;
    }
    if (_root.save.ver < 521) {
      _root.save.arenaSkillMax[6] = 1;
      _root.save.arenaSkillMax[7] = 1;
      _root.save.arenaSkillMax[8] = 1;
      _root.save.ver = 521;
    }
    if (_root.save.ver < 522) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Empowering Gem') {
          _root.save.inventoryDesc[i] = 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!\n\nWhen equipped with a Rank 200+ weapon: Damage +50%';
        }
        ++i;
      }
      _root.save.ver = 522;
    }
    if (_root.save.ver < 523) {
      if (_root.save.anniversary3Deal2 == true) {
        _root.save.mysteryBox[6] += 3;
      }
      _root.save.ver = 523;
    }
    if (_root.save.ver < 524) {
      if (_root.save.mainQuestRank[520] == 4) {
        _root.save.mainQuestS -= 1;
        _root.save.mainQuestA -= 1;
        _root.save.mainQuestB -= 1;
        _root.save.mainQuestC -= 1;
      } else {
        if (_root.save.mainQuestRank[520] == 3) {
          _root.save.mainQuestA -= 1;
          _root.save.mainQuestB -= 1;
          _root.save.mainQuestC -= 1;
        } else {
          if (_root.save.mainQuestRank[520] == 2) {
            _root.save.mainQuestB -= 1;
            _root.save.mainQuestC -= 1;
          } else {
            if (_root.save.mainQuestRank[520] == 1) {
              _root.save.mainQuestC -= 1;
            }
          }
        }
      }
      _root.save.ver = 524;
    }
    if (_root.save.ver < 525) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryReqRank[i] >= 450) {
          if (_root.save.inventorySell[i] == '' || _root.save.inventoryName[i].length <= 2) {
            _root.save.inventorySell[i] = _root.save.inventoryExpiry[i];
            if (isNaN(_root.save.inventorySell[i])) {
              _root.save.inventorySell[i] = 4000000;
            }
            _root.save.inventoryExpiry[i] = _root.save.inventoryNoBonus[i];
            if (isNaN(_root.save.inventoryExpiry[i])) {
              _root.save.inventoryExpiry[i] = Infinity;
            }
            _root.save.inventoryNoBonus[i] = _root.save.inventoryNoLife[i];
            _root.save.inventoryNoLife[i] = _root.save.inventoryNoFuse[i];
            _root.save.inventoryNoFuse[i] = false;
            _root.save.inventoryNoUnique[i] = false;
            _root.save.inventorySpirit[i] = false;
            _root.save.inventoryUnob[i] = _root.save.inventoryName[i];
            if (isNaN(_root.save.inventoryUnob[i])) {
              _root.save.inventoryUnob[i] = 0;
            }
            if (_root.save.inventoryReqRank[i] >= 550) {
              tempName = 'Dress';
            } else {
              tempName = 'Samurai';
            }
            _root.save.inventoryName[i] = tempName + ' ' + _root.save.inventorySubtype[i];
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 525;
    }
    if (_root.save.ver < 526) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Samurai') != -1 || _root.save.inventoryName[i].indexOf('Dress') != -1) {
          _root.save.inventorySell[i] = 5000000;
        }
        ++i;
      }
      _root.save.ver = 526;
    }
    if (_root.save.ver < 527) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventorySubtype[i] == 'Shoes' && _root.save.inventoryFrame[i] == 150) {
          if (_root.save.inventorySell[i] == '' || _root.save.inventoryName[i].length <= 2) {
            _root.save.inventorySell[i] = 0;
            _root.save.inventoryExpiry[i] = Infinity;
            _root.save.inventoryNoBonus[i] = _root.save.inventoryNoLife[i];
            _root.save.inventoryNoLife[i] = _root.save.inventoryNoFuse[i];
            if (_root.save.inventoryNoFuse[i] == true) {
              _root.save.inventoryExpiry[i] = 0;
              _root.save.inventoryNoLife[i] = false;
            }
            _root.save.inventoryNoFuse[i] = false;
            _root.save.inventoryNoUnique[i] = false;
            _root.save.inventorySpirit[i] = false;
            _root.save.inventoryUnob[i] = _root.save.inventoryName[i];
            if (isNaN(_root.save.inventoryUnob[i])) {
              _root.save.inventoryUnob[i] = 0;
            }
            _root.save.inventoryName[i] = 'Knightmare Shoes';
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 527;
    }
    if (_root.save.ver < 528) {
      if (_root.save.printerCharge > 400) {
        if (_root.save.printerCharge > 5000000) {
          _root.save.printerCharge = 5000000;
        }
        _root.save.mysteryBox[4] += Math.floor(_root.save.printerCharge / 10000);
        _root.save.printerCharge = 400;
      }
      _root.save.ver = 528;
    }
    if (_root.save.ver < 529) {
      _root.save.arcade100kMedal = Math.ceil(_root.save.arcade100kMedal / 2);
      _root.save.ver = 529;
    }
    if (_root.save.ver < 530) {
      _root.save.pirateSwordPenalty = 0;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Pirate Sword' && _root.save.inventoryLevel[i] == 9999) {
          _root.save.pirateSwordPenalty += _root.save.inventoryExp[i] * 10;
        }
        ++i;
      }
      if (_root.save.pirateSwordPenalty > 6500000000.0) {
        _root.save.pirateSwordPenalty = 6500000000.0;
      }
      _root.save.ver = 530;
    }
    if (_root.save.ver < 533) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Crystal ') != -1) {
          _root.save.inventoryDefense[i] += _root.save.inventoryReqRank[i] - 400;
          _root.save.inventoryBonusPow[i] += _root.save.inventoryReqRank[i] * 2 - 1000;
        }
        ++i;
      }
      _root.save.ver = 533;
    }
    if (_root.save.ver < 535) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Crystal ') != -1) {
          if (_root.save.inventoryLevel[i] == 9999) {
            _root.save.inventoryCrit[i] -= 24;
            _root.save.inventoryDexterity[i] -= 24;
            _root.save.inventoryHealth[i] -= 24;
            _root.save.inventoryDefense[i] -= 120;
          } else {
            _root.save.inventoryCrit[i] -= 20;
            _root.save.inventoryDexterity[i] -= 20;
            _root.save.inventoryHealth[i] -= 20;
            _root.save.inventoryDefense[i] -= 100;
          }
          _root.save.inventoryDesc[i] = 'When equipped with a Mining Tool: Drop Rate +50%, Spawn Rate +15%\n\nDropped by: Secret Crystal';
        }
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryEnhance[i] = 1;
          _root.save.inventoryCrit[i] = 5;
          _root.save.inventoryDexterity[i] = 5;
          _root.save.inventoryHealth[i] = 5;
          _root.save.inventoryReqRank[i] = 10;
          _root.save.inventoryBonusPow[i] -= 600;
        }
        ++i;
      }
      _root.save.ver = 535;
    }
    if (_root.save.ver < 537) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Yellow Madness Gem') {
          _root.save.inventoryDesc[i] = 'With this, you no longer suffer a 10% EXP penalty when fighting yellow-named monsters! It also increases your EXP gain rate and makes rare monsters more likely to appear! Isn\'t it awesome?';
        }
        if (_root.save.inventoryType[i] == 'Outfit') {
          if (_root.save.inventoryName[i] == 'Transparent Earrings' || _root.save.inventoryName[i] == 'Yellow Skin' || _root.save.inventoryName[i] == 'Invisible Skin') {
            _root.save.inventoryBonusPow[i] = 16;
          } else {
            _root.save.inventoryBonusPow[i] = 706;
          }
        }
        ++i;
      }
      _root.save.ver = 537;
    }
    if (_root.save.ver < 539) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Ghost Hat' || _root.save.inventoryName[i] == 'Ghost Shirt' || _root.save.inventoryName[i] == 'Ghost Gloves' || _root.save.inventoryName[i] == 'Ghost Pants' || _root.save.inventoryName[i] == 'Ghost Shoes') {
          _root.save.inventoryAttack[i] += 60;
          _root.save.inventorySpeed[i] += 3;
          _root.save.inventoryCrit[i] += 20;
          _root.save.inventoryDexterity[i] += 20;
          _root.save.inventoryHealth[i] += 20;
        }
        if (_root.save.inventoryName[i].indexOf('Elm') != -1) {
          _root.save.inventoryEnhance[i] -= 1;
        }
        ++i;
      }
      _root.save.ver = 539;
    }
    if (_root.save.ver < 543) {
      _root.save.ripoffCard[1] += _root.save.ripoffCard[2] * 3;
      _root.save.ripoffCard[3] += _root.save.ripoffCard[4] * 3;
      _root.save.ripoffCard[4] = 0;
      speedrunRefund = _root.save.speedRunCoin * 10;
      if (speedrunRefund > 200000) {
        speedrunRefund = 200000;
      }
      if (isNaN(speedrunRefund) || speedrunRefund < 0) {
        speedrunRefund = 0;
      }
      _root.save.eventToken += speedrunRefund;
      _root.save.ver = 543;
    }
    if (_root.save.ver < 544) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Enhancer Success Enhancer' || _root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
          _root.save.eventToken += 100;
        }
        ++i;
      }
      _root.save.ver = 544;
    }
    if (_root.save.ver < 545) {
      if (_root.save.serviceRewardBot == true) {
        _root.save.ripoffCard[5] += 1;
      }
      if (_root.save.serviceAutoHarvest == true) {
        _root.save.ripoffCard[6] += 1;
      }
      if (_root.save.serviceDemandMaster == true) {
        _root.save.ripoffCard[11] += 1;
      }
      if (_root.save.serviceQuickAdventures == true) {
        _root.save.ripoffCard[12] += 1;
      }
      _root.save.ver = 545;
    }
    if (_root.save.ver < 546) {
      if (_root.save.serviceBatteryCharger == true) {
        _root.save.ripoffCard[8] += 1;
      }
      _root.save.ver = 546;
    }
    if (_root.save.ver < 547) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Worst Moon Gem' && _root.save.inventoryNoLife[i] == false) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 547;
    }
    if (_root.save.ver < 548) {
      _root.save.mysteryBox[3] += _root.save.arenaFreeReset;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryLevel[i] < 9999 && _root.save.inventoryNoLife[i] == false) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        if (_root.save.inventoryNoLife[i] != undefined) {
          delete _root.save.inventoryNoLife[i];
        }
        if (_root.save.inventoryExist[i] == undefined || _root.save.inventoryExist[i] != 1 || _root.save.inventoryName[i] == undefined || _root.save.inventorySubtype[i] == 'Weapon Lifespan Extender' || _root.save.inventorySubtype[i] == 'Armor Lifespan Extender' || _root.save.inventorySubtype[i] == 'Accessory Lifespan Extender' || _root.save.inventorySubtype[i] == 'Enhancer Success Enhancer' || _root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
          if (_root.save.inventoryExist[i] != undefined) {
            _root.save.inventoryExist[i] = 0;
          }
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 548;
    }
    if (_root.save.ver < 550) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!' && _root.save.inventoryEnhance[i] > 5) {
          _root.save.inventoryEnhance[i] = 5;
          _root.save.inventoryLevel[i] = 5;
          _root.save.inventoryMaxLevel[i] = 5;
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Anti-Nerfer') {
          if (_root.save.inventoryExist[i] != undefined) {
            _root.save.inventoryExist[i] = 0;
          }
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 550;
    }
    if (_root.save.ver < 551) {
      i = 0;
      while (i <= 66) {
        if (isNaN(_root.save.arenaSkill[i])) {
          _root.save.arenaSkill[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 551;
    }
    if (_root.save.ver < 552) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryReqRank[i] = _root.save.inventoryEnhance[i] * 10;
        }
        ++i;
      }
      _root.save.ver = 552;
    }
    if (_root.save.ver < 553) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Loot Magnet') {
          _root.save.inventoryAttack[i] = 1200;
        }
        ++i;
      }
      _root.save.ver = 553;
    }
    if (_root.save.ver < 554) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Neon Skin' && _root.save.inventoryUnob[i] == 6) {
          _root.save.inventoryUnob[i] = 7;
        }
        ++i;
      }
      _root.save.ver = 554;
    }
    if (_root.save.ver < 555) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
          _root.save.inventoryUnob[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 555;
    }
    if (_root.save.ver < 556) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
          _root.save.inventoryUnob[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 556;
    }
    if (_root.save.ver < 557) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Newbie Fighter') {
          _root.save.inventoryAttack[i] = 5;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Fighter') {
          _root.save.inventoryAttack[i] = 10;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Veteran Fighter') {
          _root.save.inventoryAttack[i] = 15;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Heroic Fighter') {
          _root.save.inventoryAttack[i] = 20;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Elite Fighter') {
          _root.save.inventoryAttack[i] = 25;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Master Fighter') {
          _root.save.inventoryAttack[i] = 30;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Ultimate Fighter') {
          _root.save.inventoryAttack[i] = 35;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryAttack[i] = 40;
          _root.save.inventoryBonus[i] = 'EXP';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Combo King') {
          _root.save.inventoryBonus[i] = '';
          _root.save.inventoryAbility[i] = 'Double Hit Chance';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bestiary Master') {
          _root.save.inventoryDexterity[i] = 10;
          _root.save.inventoryHealth[i] = 10;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bestiary King') {
          _root.save.inventoryDexterity[i] = 15;
          _root.save.inventoryHealth[i] = 15;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Mad Scientist') {
          _root.save.inventoryDexterity[i] = 20;
          _root.save.inventoryHealth[i] = 20;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'THE BESTiary') {
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
          _root.save.inventoryBonus[i] = 'Spawn Rate';
          _root.save.inventoryAbility[i] = 'Instant Kill';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Bottomless Bag') {
          _root.save.inventoryHealth[i] = 30;
          _root.save.inventoryBonus[i] = 'Drop Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = '';
        }
        if (_root.save.inventoryName[i] == 'Novice Tamer') {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Veteran Tamer') {
          _root.save.inventoryCrit[i] = 15;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Master Tamer') {
          _root.save.inventoryCrit[i] = 20;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Legendary Tamer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryBonus[i] = 'Rare Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Rare Kill';
        }
        if (_root.save.inventoryName[i] == 'Novice Trainer') {
          _root.save.inventoryCrit[i] = 10;
          _root.save.inventoryHealth[i] = 10;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Veteran Trainer') {
          _root.save.inventoryCrit[i] = 15;
          _root.save.inventoryHealth[i] = 15;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Master Trainer') {
          _root.save.inventoryCrit[i] = 20;
          _root.save.inventoryHealth[i] = 20;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i] == 'Legendary Trainer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryHealth[i] = 25;
          _root.save.inventoryBonus[i] = 'Epic Monster Rate';
          _root.save.inventoryAbility[i] = '';
          _root.save.inventoryMoreBonus[i] = 'EXP / Epic Kill';
        }
        if (_root.save.inventoryName[i].indexOf('of Loot') == true) {
          if (_root.save.inventoryLevel[i] == 9999) {
            _root.save.inventoryCrit[i] -= 6;
            _root.save.inventoryDexterity[i] -= 6;
            _root.save.inventoryHealth[i] -= 6;
          } else {
            _root.save.inventoryCrit[i] -= 5;
            _root.save.inventoryDexterity[i] -= 5;
            _root.save.inventoryHealth[i] -= 5;
          }
        }
        ++i;
      }
      _root.save.ver = 557;
    }
    if (_root.save.ver < 558) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == undefined) {
          delete _root.save.inventoryName[i];
          delete _root.save.inventoryReqRank[i];
          delete _root.save.inventoryType[i];
          delete _root.save.inventorySubtype[i];
          delete _root.save.inventoryFrame[i];
          delete _root.save.inventoryRange[i];
          delete _root.save.inventoryAttack[i];
          delete _root.save.inventorySpeed[i];
          delete _root.save.inventoryDefense[i];
          delete _root.save.inventoryBonus[i];
          delete _root.save.inventoryAbility[i];
          delete _root.save.inventoryMoreBonus[i];
          delete _root.save.inventoryLevel[i];
          delete _root.save.inventoryMaxLevel[i];
          delete _root.save.inventoryExp[i];
          delete _root.save.inventoryExpTNL[i];
          delete _root.save.inventoryEnhance[i];
          delete _root.save.inventoryBonusPow[i];
          delete _root.save.inventorySell[i];
          delete _root.save.inventoryExpiry[i];
          delete _root.save.inventoryObtainTime[i];
          delete _root.save.inventoryNoBonus[i];
          delete _root.save.inventoryNoRecycle[i];
          delete _root.save.inventoryNoFuse[i];
          delete _root.save.inventoryNoUnique[i];
          delete _root.save.inventoryUnob[i];
          delete _root.save.inventorySpirit[i];
          delete _root.save.inventoryCrit[i];
          delete _root.save.inventoryDexterity[i];
          delete _root.save.inventoryHealth[i];
          delete _root.save.inventoryDesc[i];
          delete _root.save.inventoryGuard[i];
        }
        ++i;
      }
      _root.save.ver = 558;
    }
    if (_root.save.ver < 559) {
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.ver = 559;
    }
    if (_root.save.ver < 560) {
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.ver = 560;
    }
    if (_root.save.ver < 561) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Armor') {
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            _root.save.inventoryEnhance[i] -= 1;
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryAttack[i] += 24;
              _root.save.inventoryCrit[i] += 24;
              _root.save.inventoryDexterity[i] += 24;
              _root.save.inventoryHealth[i] += 24;
            } else {
              _root.save.inventoryAttack[i] += 20;
              _root.save.inventoryCrit[i] += 20;
              _root.save.inventoryDexterity[i] += 20;
              _root.save.inventoryHealth[i] += 20;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 561;
    }
    if (_root.save.ver < 562) {
      if (_root.save.gDifficulty >= 3) {
        _root.save.arenaAttack = 90000;
        _root.save.arenaDefense = 90000;
        _root.save.arenaMaxHealth = 900000;
        _root.save.arenaMaxMana = 360000;
        _root.save.arenaAccuracy = 18000;
        _root.save.arenaEvasion = 18000;
        _root.save.arenaPixel += _root.save.bankArenaPixel;
        _root.save.arenaCraft += _root.save.bankArenaCraft;
      }
      _root.save.ver = 562;
    }
    if (_root.save.ver < 563) {
      hadHB = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1) {
          hadHB = true;
        }
        ++i;
      }
      if (hadHB == true) {
        _root.save.arenaPixel += 20000000000.0;
        _root.save.arenaCraft += 4000000000.0;
      }
      _root.save.ver = 563;
    }
    if (_root.save.ver < 564) {
      hadHB = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryExist[i] == 1) {
          hadHB = true;
        }
        ++i;
      }
      if (hadHB == false) {
        _root.save.arenaPixel -= 20000000000.0;
        _root.save.arenaCraft -= 4000000000.0;
      }
      if (_root.save.arenaPixel < 0) {
        _root.save.arenaPixel *= 4;
      }
      if (_root.save.arenaCraft < 0) {
        _root.save.arenaCraft *= 4;
      }
      _root.save.ver = 564;
    }
    if (_root.save.ver < 566) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Collector\'s Pendant') {
          _root.save.inventoryEnhance[i] = 10;
        }
        ++i;
      }
      _root.save.ver = 566;
    }
    if (_root.save.ver < 570) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
          _root.save.inventoryReqRank[i] = 258;
        }
        if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
          _root.save.inventoryReqRank[i] = 278;
        }
        if (_root.save.inventoryName[i] == 'Fiend Glaive') {
          _root.save.inventoryReqRank[i] = 298;
        }
        ++i;
      }
      if (_root.save.arenaPixel < 0) {
        _root.save.arenaCraft += Math.floor(_root.save.arenaPixel / 20);
        _root.save.arenaPixel = 0;
      }
      _root.save.ver = 570;
    }
    if (_root.save.ver < 571) {
      if (_root.save.bestLevel >= 2) {
        _root.save.eventToken += 1500;
      }
      _root.save.ver = 571;
    }
    if (_root.save.ver < 572) {
      if (_root.save.inventorySubtype[i] == 'Enhancer Destruction Enhancer') {
        if (_root.save.inventoryExist[i] != undefined) {
          _root.save.inventoryExist[i] = 0;
        }
        delete _root.save.inventoryName[i];
        delete _root.save.inventoryReqRank[i];
        delete _root.save.inventoryType[i];
        delete _root.save.inventorySubtype[i];
        delete _root.save.inventoryFrame[i];
        delete _root.save.inventoryRange[i];
        delete _root.save.inventoryAttack[i];
        delete _root.save.inventorySpeed[i];
        delete _root.save.inventoryDefense[i];
        delete _root.save.inventoryBonus[i];
        delete _root.save.inventoryAbility[i];
        delete _root.save.inventoryMoreBonus[i];
        delete _root.save.inventoryLevel[i];
        delete _root.save.inventoryMaxLevel[i];
        delete _root.save.inventoryExp[i];
        delete _root.save.inventoryExpTNL[i];
        delete _root.save.inventoryEnhance[i];
        delete _root.save.inventoryBonusPow[i];
        delete _root.save.inventorySell[i];
        delete _root.save.inventoryExpiry[i];
        delete _root.save.inventoryObtainTime[i];
        delete _root.save.inventoryNoBonus[i];
        delete _root.save.inventoryNoRecycle[i];
        delete _root.save.inventoryNoFuse[i];
        delete _root.save.inventoryNoUnique[i];
        delete _root.save.inventoryUnob[i];
        delete _root.save.inventorySpirit[i];
        delete _root.save.inventoryCrit[i];
        delete _root.save.inventoryDexterity[i];
        delete _root.save.inventoryHealth[i];
        delete _root.save.inventoryDesc[i];
        delete _root.save.inventoryGuard[i];
      }
      _root.save.ver = 572;
    }
    if (_root.save.ver < 574) {
      _root.save.battlePoint += Math.floor(_root.save.arenaExp / 100000000);
      _root.save.arenaExp -= _root.save.battlePoint * 100000000;
      _root.save.battlePoint += _root.save.arenaLevel;
      if (_root.save.gDifficulty >= 3) {
        _root.save.stadiumEnergy = 50;
        _root.save.stadiumAccel = 50;
        _root.save.stadiumMaxSpeed = 50;
        _root.save.stadiumStartSpeed = 50;
        _root.save.stadiumDash = 50;
        _root.save.stadiumJump = 50;
        _root.save.stadiumBoost = 50;
        _root.save.stadiumReward = 50;
        _root.save.stadiumAbilityCost = 400;
        _root.save.stadiumToken += _root.save.bankStadiumToken;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryReqRank[i] = 1;
          _root.save.inventoryUnob[i] = Math.floor(_root.save.inventoryLevel[i] / 10) + 10;
          if (_root.save.inventoryUnob[i] < 0) {
            _root.save.inventoryUnob[i] = 0;
          }
          if (_root.save.inventoryLevel[i] == 500) {
            _root.save.inventoryUnob[i] = 99;
          }
        }
        ++i;
      }
      _root.save.arenaSpookyScore = 0;
      _root.save.ver = 574;
    }
    if (_root.save.ver < 575) {
      _root.save.arenaExpExcess = _root.save.battlePoint - _root.save.arenaLevel - _root.save.bannedB * 1000;
      _root.save.ver = 575;
    }
    if (_root.save.ver < 578) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!' && _root.save.inventoryEnhance[i] > 7) {
          _root.save.inventoryEnhance[i] = 7;
          _root.save.inventoryLevel[i] = 7;
          _root.save.inventoryMaxLevel[i] = 7;
          _root.save.inventoryCrit[i] = 35;
          _root.save.inventoryDexterity[i] = 35;
          _root.save.inventoryHealth[i] = 35;
        }
        if (_root.save.inventoryName[i] == 'Anti-Nerfer') {
          _root.save.inventoryExpiry[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 578;
    }
    if (_root.save.ver < 580) {
      if (_root.save.printerLevel >= 25) {
        _root.save.coinLag += 250000 * _root.save.bestLevel;
      }
      _root.save.ver = 580;
    }
    if (_root.save.ver < 581) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Trinket' && _root.save.inventoryMaxLevel[i] == 500) {
          _root.save.inventoryReqRank[i] = 400;
          _root.save.inventoryUnob[i] = Math.floor(_root.save.inventoryLevel[i] / 10) + 10;
        }
        ++i;
      }
      _root.save.arenaSpookyScore = 0;
      _root.save.ver = 581;
    }
    if (_root.save.ver < 582) {
      if (_root.save.arenaLevel < _root.save.inventoryReqRank[_root.save.arenaTrinket]) {
        _root.save.arenaTrinket = 0;
      }
      _root.save.ver = 582;
    }
    if (_root.save.ver < 583) {
      if (_root.save.bestLevel < 25 || _root.save.arenaAccuracy < 50) {
        _root.save.arenaMaxHealth = 500;
        _root.save.arenaMaxMana = 300;
        _root.save.arenaAttack = 100;
        _root.save.arenaDefense = 100;
        _root.save.arenaAccuracy = 50;
        _root.save.arenaEvasion = 50;
      }
      _root.save.ver = 583;
    }
    if (_root.save.ver < 585) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Outfit') {
          _root.save.inventoryReqRank[i] = 1;
        }
        if (_root.save.inventoryName[i] == 'Fighter') {
          _root.save.inventoryAttack[i] = 15;
          _root.save.inventoryDefense[i] = 15;
        }
        if (_root.save.inventoryName[i] == 'Veteran Fighter') {
          _root.save.inventoryAttack[i] = 30;
          _root.save.inventoryDefense[i] = 30;
        }
        if (_root.save.inventoryName[i] == 'Heroic Fighter') {
          _root.save.inventoryAttack[i] = 50;
          _root.save.inventoryDefense[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Elite Fighter') {
          _root.save.inventoryAttack[i] = 75;
          _root.save.inventoryDefense[i] = 75;
        }
        if (_root.save.inventoryName[i] == 'Master Fighter') {
          _root.save.inventoryAttack[i] = 105;
          _root.save.inventoryDefense[i] = 105;
        }
        if (_root.save.inventoryName[i] == 'Ultimate Fighter') {
          _root.save.inventoryAttack[i] = 140;
          _root.save.inventoryDefense[i] = 140;
        }
        if (_root.save.inventoryName[i] == 'Arena Champion') {
          _root.save.inventoryAttack[i] = 180;
          _root.save.inventoryDefense[i] = 180;
        }
        if (_root.save.inventoryName[i] == 'Combo King') {
          _root.save.inventorySpeed[i] = 5;
        }
        if (_root.save.inventoryName[i] == 'Bestiary King') {
          _root.save.inventoryDexterity[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Mad Scientist') {
          _root.save.inventoryDexterity[i] = 50;
          _root.save.inventoryHealth[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'THE BESTiary') {
          _root.save.inventoryDexterity[i] = 100;
          _root.save.inventoryHealth[i] = 100;
        }
        if (_root.save.inventoryName[i] == 'Bottomless Bag') {
          _root.save.inventoryHealth[i] = 150;
        }
        if (_root.save.inventoryName[i] == 'Veteran Tamer') {
          _root.save.inventoryCrit[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Master Tamer') {
          _root.save.inventoryCrit[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Legendary Tamer') {
          _root.save.inventoryCrit[i] = 100;
        }
        if (_root.save.inventoryName[i] == 'Veteran Trainer') {
          _root.save.inventoryCrit[i] = 25;
          _root.save.inventoryHealth[i] = 25;
        }
        if (_root.save.inventoryName[i] == 'Master Trainer') {
          _root.save.inventoryCrit[i] = 50;
          _root.save.inventoryHealth[i] = 50;
        }
        if (_root.save.inventoryName[i] == 'Legendary Trainer') {
          _root.save.inventoryCrit[i] = 100;
          _root.save.inventoryHealth[i] = 100;
        }
        ++i;
      }
      _root.save.ver = 585;
    }
    if (_root.save.ver < 586) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
          _root.save.inventoryReqRank[i] = 300;
        }
        ++i;
      }
      _root.save.ver = 586;
    }
    if (_root.save.ver < 587) {
      _root.save.ver = 587;
    }
    if (_root.save.ver < 589) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
          _root.save.inventoryReqRank[i] = _root.save.inventoryEnhance[i] * 10;
          if (_root.save.inventoryReqRank[i] > 100) {
            _root.save.inventoryReqRank[i] = 100;
          }
        }
        ++i;
      }
      _root.save.ver = 589;
    }
    if (_root.save.ver < 591) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i] == 'Fairy Godmother Wand') {
            _root.save.inventoryDesc[i] = 'When equipped: Magic Resist +15%, Negate Effect Chance +15%';
          }
          if (_root.save.inventoryName[i] == 'Pure Darkness Claw') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Crimson Bow') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Censor Sword') {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Glaive of Smiting') {
            _root.save.inventoryDesc[i] = 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i] == 'Darkglaive of Smiting') {
            _root.save.inventoryDesc[i] = 'Shoots invisible projectiles!\nCannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i] == 'Fiend Glaive') {
            _root.save.inventoryDesc[i] = 'Cannot be enhanced with Attack enhancers.';
          }
          if (_root.save.inventoryName[i].indexOf('Meteoric') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('DOOOOOOM') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Crystal') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Hat of Loot') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i].indexOf('Ultimate') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
          if (_root.save.inventoryName[i] == 'Ultimate Weapon') {
            _root.save.inventoryDesc[i] = 'Also shoots projectiles at monsters from a far distance!';
          }
          if (_root.save.inventoryName[i] == 'Gem of Constancy') {
            _root.save.inventoryDesc[i] = 'This gem gets more and more powerful as you fight with it equipped, but whenever you unequip it, it goes back to its original state. Also, you cannot change equipment when Gem of Constancy is equipped!';
          }
          if (_root.save.inventoryName[i] == 'Empowering Gem') {
            _root.save.inventoryDesc[i] = 'This gem allows you to deal extra damage to monsters. The more you use it, the better it becomes!';
          }
        }
        ++i;
      }
      _root.save.ver = 591;
    }
    if (_root.save.ver < 593) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Crystal') != -1) {
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 593;
    }
    if (_root.save.ver < 594) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryName[i] != 'Humblebee Armor Upgrade') {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] += 12;
              _root.save.inventoryDexterity[i] += 12;
              _root.save.inventoryHealth[i] += 12;
            } else {
              _root.save.inventoryCrit[i] += 10;
              _root.save.inventoryDexterity[i] += 10;
              _root.save.inventoryHealth[i] += 10;
            }
          }
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] += 24;
              _root.save.inventoryDexterity[i] += 24;
              _root.save.inventoryHealth[i] += 24;
            } else {
              _root.save.inventoryCrit[i] += 20;
              _root.save.inventoryDexterity[i] += 20;
              _root.save.inventoryHealth[i] += 20;
            }
          }
        }
        ++i;
      }
      _root.save.ver = 594;
    }
    if (_root.save.ver < 595) {
      if (!isNaN(_root.save.bankStadiumToken)) {
        _root.save.stadiumToken += _root.save.bankStadiumToken;
      }
      if (_root.save.bannedImpossible >= 1 && !isNaN(_root.save.stadiumTokenMax) && _root.save.stadiumToken < _root.save.stadiumTokenMax) {
        _root.save.stadiumToken = _root.save.stadiumTokenMax;
      }
      _root.save.ver = 595;
    }
    if (_root.save.ver < 596) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventoryName[i].indexOf('Humblebee') != -1 && _root.save.inventoryName[i] != 'Humblebee Armor Upgrade') {
            if (_root.save.inventoryLevel[i] == 9999) {
              _root.save.inventoryCrit[i] -= 12;
              _root.save.inventoryDexterity[i] -= 12;
              _root.save.inventoryHealth[i] -= 12;
            } else {
              _root.save.inventoryCrit[i] -= 10;
              _root.save.inventoryDexterity[i] -= 10;
              _root.save.inventoryHealth[i] -= 10;
            }
            if (_root.save.inventoryMaxLevel[i] >= 84 && _root.save.inventoryMaxLevel[i] < 184) {
              _root.save.inventoryEnhance[i] -= 1;
            } else {
              if (_root.save.inventoryMaxLevel[i] == 9999) {
                _root.save.inventoryDefense[i] += 300;
                if (_root.save.inventoryDefense[i] > 2160) {
                  _root.save.inventoryDefense[i] = 2160;
                }
                _root.save.inventoryAttack[i] += 60;
                _root.save.inventoryDexterity[i] += 40;
                _root.save.inventoryHealth[i] += 30;
                _root.save.inventoryCrit[i] += 24;
              } else {
                if (_root.save.inventoryMaxLevel[i] >= 184) {
                  _root.save.inventoryMaxLevel[i] += 100;
                }
              }
            }
          }
          if (_root.save.inventoryName[i].indexOf('Ghost') != -1) {
            _root.save.inventoryUnob[i] = 5;
          }
        }
        ++i;
      }
      _root.save.ver = 596;
    }
    if (_root.save.ver < 597) {
      if (isNaN(_root.save.inventoryExp[_root.save.arenaSkin])) {
        _root.save.inventoryExp[_root.save.arenaSkin] = 0;
      }
      _root.save.ver = 597;
    }
    if (_root.save.ver < 599) {
      _root.save.boostAuto = false;
      _root.save.boostMax = Math.round((_root.save.boostMax + _root.save.boostMin * 0.2) / 50) * 50;
      if (_root.save.mainQuestRank[152] == 4) {
        _root.save.mainQuestS -= 1;
        _root.save.mainQuestA -= 1;
        _root.save.mainQuestB -= 1;
        _root.save.mainQuestC -= 1;
      } else {
        if (_root.save.mainQuestRank[152] == 3) {
          _root.save.mainQuestA -= 1;
          _root.save.mainQuestB -= 1;
          _root.save.mainQuestC -= 1;
        } else {
          if (_root.save.mainQuestRank[152] == 2) {
            _root.save.mainQuestB -= 1;
            _root.save.mainQuestC -= 1;
          } else {
            if (_root.save.mainQuestRank[152] == 1) {
              _root.save.mainQuestC -= 1;
            }
          }
        }
      }
      _root.save.ver = 599;
    }
    if (_root.save.ver < 604) {
      _root.save.ver = 604;
    }
    if (_root.save.ver < 605) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventorySubtype[i] == 'Secondary Weapon') {
            _root.save.inventoryUnob[i] = 30;
          }
        }
        ++i;
      }
      _root.save.ver = 605;
    }
    if (_root.save.ver < 606) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExist[i] == 1) {
          if (_root.save.inventorySubtype[i] == 'Secondary Weapon') {
            _root.save.inventoryNoBonus[i] = true;
            if (_root.save.inventoryName[i] == 'Poison Arrows') {
              _root.save.inventoryAbility[i] = 'Poison Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Explosive Arrows') {
              _root.save.inventoryAbility[i] = 'Stun Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Mega Bullets' || _root.save.inventoryName[i] == '[Event] Mega Bullets') {
              _root.save.inventoryAbility[i] = 'Double Hit Chance';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Master Shurikens') {
              _root.save.inventoryAbility[i] = 'Mastery';
              _root.save.inventoryMoreBonus[i] = 'Equipment Attack';
            }
            if (_root.save.inventoryName[i] == 'Fire Card') {
              _root.save.inventoryBonus[i] = 'Fire Element';
              _root.save.inventoryAbility[i] = 'Poison Chance';
            }
            if (_root.save.inventoryName[i] == 'Ice Card') {
              _root.save.inventoryBonus[i] = 'Ice Element';
              _root.save.inventoryAbility[i] = 'Stun Chance';
            }
            if (_root.save.inventoryName[i] == 'Wind Card') {
              _root.save.inventoryBonus[i] = 'Wind Element';
              _root.save.inventoryAbility[i] = 'Weaken Chance';
            }
            if (_root.save.inventoryName[i] == 'Earth Card') {
              _root.save.inventoryBonus[i] = 'Earth Element';
              _root.save.inventoryAbility[i] = 'Weaken Chance';
            }
            if (_root.save.inventoryName[i] == 'Thunder Card') {
              _root.save.inventoryBonus[i] = 'Thunder Element';
              _root.save.inventoryAbility[i] = 'Stun Chance';
            }
            if (_root.save.inventoryName[i] == 'Water Card') {
              _root.save.inventoryBonus[i] = 'Water Element';
              _root.save.inventoryAbility[i] = 'Poison Chance';
            }
            if (_root.save.inventoryName[i] == 'Light Card') {
              _root.save.inventoryBonus[i] = 'Light Element';
              _root.save.inventoryAbility[i] = 'Blind Chance';
            }
            if (_root.save.inventoryName[i] == 'Dark Card') {
              _root.save.inventoryBonus[i] = 'Dark Element';
              _root.save.inventoryAbility[i] = 'Blind Chance';
            }
          }
        }
        ++i;
      }
      _root.save.ver = 606;
    }
    if (_root.save.ver < 607) {
      _root.save.deathMatchEntry = 1;
      _root.save.ver = 607;
    }
    if (_root.save.ver < 608) {
      if (_root.saveid >= 20) {
        i = 1;
        while (i <= 34) {
          if (_root.save.specialStock[i] < 5) {
            _root.save.specialStock[i] += 3;
          }
          _root.save.specialStock[1] = 1;
          _root.save.specialStock[2] = 5;
          _root.save.specialStock[27] = 1;
          _root.save.specialStock[28] = 1;
          _root.save.specialStock[29] = 1;
          _root.save.specialStock[30] = 1;
          ++i;
        }
      }
      _root.save.ver = 608;
    }
    if (_root.save.ver < 609) {
      _root.save.permaBanPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.permaStupidity = _root.save.banned;
      _root.save.permaStupidityHard = _root.save.bannedHard;
      _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      _root.save.ver = 609;
    }
    if (_root.save.ver < 613) {
      if (_root.save.speedRunMode9001 != 2147483647 && _root.save.speedRunMode9001 > 0) {
        _root.saveGlobal.challengeTime[0] = _root.save.speedRunMode9001 * 60;
        _root.saveGlobal.challengeAttempted[0] = true;
        _root.saveGlobal.challengePerfect[0] = true;
      }
      if (_root.save.fishLevel >= 30) {
        _root.save.fishLevel = 30;
        _root.save.fishScore += _root.save.fishExp * 50;
        _root.save.fishExpTotal += _root.save.fishExp;
        _root.save.fishExp = 0;
      }
      if (_root.save.gDifficulty == 3) {
        _root.save.currentExp = Math.floor(_root.save.currentExp * 2);
        _root.save.totalExp = Math.floor(_root.save.totalExp * 2);
      }
      if (_root.save.gDifficulty == 2) {
        _root.save.currentExp = Math.floor(_root.save.currentExp * 4 / 3);
        _root.save.totalExp = Math.floor(_root.save.totalExp * 4 / 3);
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Eternal Rage') {
          _root.save.inventoryDesc[i] = 'With this, you will gain 0.5% Rage every second and ignore all forms of rage depletion!';
        }
        ++i;
      }
      _root.save.ver = 613;
    }
    if (_root.save.ver < 614) {
      _root.save.whiteCoin += Math.floor(_root.save.totalPlayTime / 720);
      _root.save.ver = 614;
    }
    if (_root.save.ver < 615) {
      _root.save.arenaMaxDamage = 0;
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.raidPrehistoric = 0;
      _root.save.raidMegaboss = 0;
      _root.save.raidTower = 0;
      _root.save.raidDungeon = 0;
      _root.save.raidEndless = 0;
      _root.save.arenaRevengeScore = 0;
      _root.save.arenaTriangleScore = 0;
      _root.save.arenaTriangleToday = 0;
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.ver = 615;
    }
    if (_root.save.ver < 616) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Chaos Hat' || _root.save.inventoryName[i] == 'Chaos Shirt' || _root.save.inventoryName[i] == 'Chaos Gloves' || _root.save.inventoryName[i] == 'Chaos Pants' || _root.save.inventoryName[i] == 'Chaos Shoes' || _root.save.inventoryName[i] == 'CHAOS HAT' || _root.save.inventoryName[i] == 'CHAOS SHIRT' || _root.save.inventoryName[i] == 'CHAOS GLOVES' || _root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS PANTS' || _root.save.inventoryName[i] == 'CHAOS SHOES' || _root.save.inventoryName[i] == 'Dragon Slayer Hat' || _root.save.inventoryName[i] == 'Dragon Slayer Shirt' || _root.save.inventoryName[i] == 'Dragon Slayer Gloves' || _root.save.inventoryName[i] == 'Dragon Slayer Pants' || _root.save.inventoryName[i] == 'Dragon Slayer Shoes' || _root.save.inventoryName[i] == 'Demon Slayer Hat' || _root.save.inventoryName[i] == 'Demon Slayer Shirt' || _root.save.inventoryName[i] == 'Demon Slayer Gloves' || _root.save.inventoryName[i] == 'Demon Slayer Pants' || _root.save.inventoryName[i] == 'Demon Slayer Shoes') {
          if (_root.save.inventoryObtainTime[i] > 1385823600000.0) {
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] = 'This item has been blocked in an attempt to wipe out exploited items. If you believe your item was wrongfully blocked, please post a screenshot of the item in the forum.\n\nCODE: ' + random(999999999);
          }
        }
        ++i;
      }
      _root.save.ver = 616;
    }
    if (_root.save.ver < 617) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Chaos Hat' || _root.save.inventoryName[i] == 'Chaos Shirt' || _root.save.inventoryName[i] == 'Chaos Gloves' || _root.save.inventoryName[i] == 'Chaos Pants' || _root.save.inventoryName[i] == 'Chaos Shoes' || _root.save.inventoryName[i] == 'CHAOS HAT' || _root.save.inventoryName[i] == 'CHAOS SHIRT' || _root.save.inventoryName[i] == 'CHAOS GLOVES' || _root.save.inventoryName[i] == '(MYSTERIOUS ITEM)' || _root.save.inventoryName[i] == 'CHAOS PANTS' || _root.save.inventoryName[i] == 'CHAOS SHOES' || _root.save.inventoryName[i] == 'Dragon Slayer Hat' || _root.save.inventoryName[i] == 'Dragon Slayer Shirt' || _root.save.inventoryName[i] == 'Dragon Slayer Gloves' || _root.save.inventoryName[i] == 'Dragon Slayer Pants' || _root.save.inventoryName[i] == 'Dragon Slayer Shoes' || _root.save.inventoryName[i] == 'Demon Slayer Hat' || _root.save.inventoryName[i] == 'Demon Slayer Shirt' || _root.save.inventoryName[i] == 'Demon Slayer Gloves' || _root.save.inventoryName[i] == 'Demon Slayer Pants' || _root.save.inventoryName[i] == 'Demon Slayer Shoes') {
          if (_root.save.inventoryObtainTime[i] > 1385823600000.0) {
            _root.save.inventoryExpiry[i] = 0;
            _root.save.inventoryDesc[i] = 'This item has been blocked in an attempt to wipe out exploited items. If you believe your item was wrongfully blocked, please post a screenshot of the item in the forum.\n\nCODE: ' + random(999999999);
          }
        }
        ++i;
      }
      _root.save.ver = 617;
    }
    if (_root.save.ver < 619) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExpiry[i] == 0 && _root.save.inventoryObtainTime[i] > 1385823600000.0 && _root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('617523110') != -1 || _root.save.inventoryDesc[i].indexOf('673811149') != -1 || _root.save.inventoryDesc[i].indexOf('253011004') != -1 || _root.save.inventoryDesc[i].indexOf('536365965') != -1 || _root.save.inventoryDesc[i].indexOf('479591647') != -1 || _root.save.inventoryDesc[i].indexOf('71140877') != -1 || _root.save.inventoryDesc[i].indexOf('59063432') != -1 || _root.save.inventoryDesc[i].indexOf('70380326') != -1 || _root.save.inventoryDesc[i].indexOf('761205567') != -1 || _root.save.inventoryDesc[i].indexOf('663902970') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      _root.save.ver = 619;
    }
    if (_root.save.ver < 620) {
      _root.save.fishBestLevel = _root.save.fishLevel;
      _root.save.ver = 620;
    }
    if (_root.save.ver < 621) {
      if (_root.save.speedRunMode9001 != 2147483647 && _root.save.speedRunMode9001 > 0) {
        _root.saveGlobal.challengeTime[0] = _root.save.speedRunMode9001 * 60;
        _root.saveGlobal.challengeAttempted[0] = true;
        _root.saveGlobal.challengePerfect[0] = true;
      } else {
        delete _root.saveGlobal.challengeTime[0];
        delete _root.saveGlobal.challengeAttempted[0];
        delete _root.saveGlobal.challengePerfect[0];
      }
      _root.save.ver = 621;
    }
    if (_root.save.ver < 622) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Gem of Eternal Rage') {
          _root.save.inventoryDesc[i] = 'With this, you will gain 0.5% Rage every second and ignore all forms of rage depletion! It also multiplies your Rage Attack by 1.2x.';
        }
        if (_root.save.inventoryName[i] == 'Immortal Pendant' || _root.save.inventoryName[i] == 'Roflhunter\'s Pendant' || _root.save.inventoryName[i] == 'Dominator\'s Gem' || _root.save.inventoryName[i] == 'Mega Triangle Gem') {
          _root.save.inventoryBonusPow[i] += _root.save.inventoryAttack[i] + _root.save.inventoryCrit[i] * 5 + _root.save.inventoryDexterity[i] * 5 + _root.save.inventoryHealth[i] * 5;
          _root.save.inventoryAttack[i] = Math.floor(_root.save.inventoryAttack[i] * 2);
          _root.save.inventoryCrit[i] = Math.floor(_root.save.inventoryCrit[i] * 2);
          _root.save.inventoryDexterity[i] = Math.floor(_root.save.inventoryDexterity[i] * 2);
          _root.save.inventoryHealth[i] = Math.floor(_root.save.inventoryHealth[i] * 2);
        }
        ++i;
      }
      i = 1;
      while (i <= 2) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 2000 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      i = 3;
      while (i <= 5) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 2250 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      i = 6;
      while (i <= 10) {
        if (_root.save.restEfficiency[i] > 0) {
          _root.save.whiteCoin += 900 * _root.save.restEfficiency[i] * _root.save.restEfficiency[i];
        }
        ++i;
      }
      if (!isNaN(_root.save.achEarnTime[1000])) {
        _root.save.newbieProgress = 15;
      }
      _root.save.ver = 622;
    }
    if (_root.save.ver < 623) {
      if (_root.save.banned >= 100) {
        _root.save.whiteCoin += 10000;
        _root.save.eventToken += 10000;
        _root.save.permaBanPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _root.save.permaStupidity = _root.save.banned;
        _root.save.permaStupidityHard = _root.save.bannedHard;
        _root.save.permaStupidityImpossible = _root.save.bannedImpossible;
      }
      _root.save.ver = 623;
    }
    if (_root.save.ver < 624) {
      if (_root.saveid == 24) {
        c4Cheated = false;
        i = 1;
        while (i <= 200) {
          if (_root.save.inventoryEnhance[i] > 0 && _root.save.inventorySubtype[i] != 'Skin' && _root.save.inventoryReqRank[i] < 100) {
            c4Cheated = true;
            _root.save.arenaPixel += _root.save.inventorySell[i] * 8;
          }
          ++i;
        }
        if (_root.save.arenaMedal != 0) {
          c4Cheated = true;
          _root.save.arenaMedal = 0;
        }
        if (_root.save.arenaPendant != 0) {
          c4Cheated = true;
          _root.save.arenaPendant = 0;
        }
        if (_root.save.arenaEarring != 0) {
          c4Cheated = true;
          _root.save.arenaEarring = 0;
        }
        if (_root.save.arenaTrinket != 0) {
          c4Cheated = true;
          _root.save.arenaTrinket = 0;
        }
        if (c4Cheated == true) {
          _root.save.ascendPlayTime += 10800;
        }
      }
      _root.save.ver = 624;
    }
    if (_root.save.ver < 625) {
      if (_root.save.gDifficulty >= 3) {
        _root.save.gardenCapacity = 50;
      }
      _root.save.ver = 625;
    }
    if (_root.save.ver < 626) {
      if (_root.saveid == 24) {
        _root.save.arenaPixel = _root.save.arenaPixelMax;
      }
      _root.save.ver = 626;
    }
    if (_root.save.ver < 627) {
      if (_root.saveid == 24) {
        _root.save.ascendPlayTime = Math.ceil(_root.save.ascendPlayTime * 0.85);
      }
      _root.save.ver = 627;
    }
    if (_root.save.ver < 629) {
      if (!isNaN(_root.save.bankGardenFruit) && _root.save.bankGardenFruit > 0) {
        _root.save.gardenPoint = _root.save.gardenPointMax;
        _root.save.gardenFruit = _root.save.gardenFruitMax;
      }
      _root.save.ver = 629;
    }
    if (_root.save.ver < 630) {
      if (_root.save.banned > 100 && _root.save.bannedImpossible > 25) {
        _root.save.banned1662 = Math.floor(_root.save.bannedImpossible / 20 - 1);
        if (isNaN(_root.save.banned1662) || _root.save.banned1662 > 10) {
          _root.save.banned1662 = 10;
        }
        _root.save.banned += _root.save.banned1662;
        _root.save.bannedHard += _root.save.banned1662;
        _root.save.bannedImpossible += _root.save.banned1662;
        _root.save.stupidity += _root.save.banned1662 * 7;
        _root.save.permaStupidity += _root.save.banned1662;
        _root.save.permaStupidityHard += _root.save.banned1662;
        _root.save.permaStupidityImpossible += _root.save.banned1662;
      }
      _root.save.ver = 630;
    }
    if (_root.save.ver < 634) {
      if (_root.save.arenaAllyUpgrade[1] != undefined) {
        _root.save.noobMode = true;
      }
      _root.save.mysteryBox[10] += _root.save.bannedB;
      _root.save.arenaSpookyScore = Math.ceil(_root.save.arenaSpookyScore / 5);
      _root.save.arenaSpookyToday = 0;
      _root.save.raidPyramid = Math.floor(_root.save.raidPyramid / 100);
      _root.save.rewardClaimAuto = _root.save.rewardClaim - _root.save.rewardClaimManual;
      i = 1;
      while (i <= 12) {
        if (_root.save.careerLevel[i] >= 100) {
          _root.save.careerPotion += Math.floor(_root.save.careerEXP[i] / 200000);
        }
        _root.save.careerEXP[i] = Math.floor(_root.save.careerEXP[i] * 0.1);
        ++i;
      }
      if (_root.save.careerLevel[1] >= 100) {
        _root.save.careerEXP[1] += Math.max(_root.save.rewardClaimAuto - 1000000, 0);
      }
      if (_root.save.careerLevel[2] >= 100) {
        _root.save.careerEXP[2] += Math.max(_root.save.gardenEXP - 1000000, 0);
      }
      if (_root.save.careerLevel[3] >= 100) {
        _root.save.careerEXP[3] += Math.max(_root.save.arenaKillWhite / 2 + _root.save.arenaKillRed / 2 + _root.save.battlePoint * 500 - 1000000, 0);
      }
      if (_root.save.careerLevel[4] >= 100) {
        _root.save.careerEXP[4] += Math.max(_root.save.arenaLoot / 10 - 1000000, 0);
      }
      if (_root.save.careerLevel[5] >= 100) {
        _root.save.careerEXP[5] += Math.max(_root.save.buttonPress * 2 + _root.save.buttonPerfect * 20 - 1000000, 0);
      }
      if (_root.save.careerLevel[6] >= 100) {
        _root.save.careerEXP[6] += Math.max(_root.save.totalPong / 1000 + _root.save.totalAvoidance / 1000 + _root.save.totalMath / 2500 + _root.save.totalWhack / 2000 + _root.save.totalMind / 500 + _root.save.totalBalance / 2500 + _root.save.totalCount / 2000 - 1000000, 0);
      }
      if (_root.save.careerLevel[7] >= 100) {
        _root.save.careerEXP[7] += Math.max(_root.save.stadiumRace * 250 + _root.save.stadiumImpossibleRace * 250 + _root.save.stadiumItem * 300 + _root.save.stadiumImpossibleItem * 300 + _root.save.stadiumDeathMatch * 5000 - 1000000, 0);
      }
      if (_root.save.careerLevel[8] >= 100) {
        _root.save.careerEXP[8] += Math.max(_root.save.fcgExpTotal * 4 - 1000000, 0);
      }
      if (_root.save.careerLevel[9] >= 100) {
        _root.save.careerEXP[9] += Math.max(_root.save.lolProfit / 500 - 1000000, 0);
      }
      if (_root.save.careerLevel[10] >= 100) {
        _root.save.careerEXP[10] += Math.max(_root.save.awesomeTotalAdv * 50 - 1000000, 0);
      }
      if (_root.save.careerLevel[12] >= 100) {
        _root.save.careerEXP[12] += Math.max(_root.save.fishExp + _root.save.fishTotalExp - 1000000, 0);
      }
      i = 1;
      while (i <= 500) {
        if (!isNaN(_root.save.arenaAllyEXP[i])) {
          _root.save.arenaAllyUpgrade[i] = 0;
        }
        ++i;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Auto Buff Gem') {
          _root.save.inventoryMoreBonus[i] = 'MaxHP';
        }
        if (_root.save.inventoryName[i] == 'Bronze Pendant') {
          _root.save.inventoryAttack[i] += 20;
          _root.save.inventoryCrit[i] += 5;
          _root.save.inventoryDexterity[i] += 5;
          _root.save.inventoryHealth[i] += 5;
        }
        if (_root.save.inventoryName[i] == 'Silver Pendant') {
          _root.save.inventoryAttack[i] += 60;
          _root.save.inventoryCrit[i] += 15;
          _root.save.inventoryDexterity[i] += 15;
          _root.save.inventoryHealth[i] += 15;
        }
        if (_root.save.inventoryName[i] == 'Gold Pendant') {
          _root.save.inventoryAttack[i] += 100;
          _root.save.inventoryCrit[i] += 25;
          _root.save.inventoryDexterity[i] += 25;
          _root.save.inventoryHealth[i] += 25;
        }
        if (_root.save.inventoryName[i] == 'Platinum Pendant') {
          _root.save.inventoryAttack[i] += 140;
          _root.save.inventoryCrit[i] += 35;
          _root.save.inventoryDexterity[i] += 35;
          _root.save.inventoryHealth[i] += 35;
        }
        if (_root.save.inventoryName[i] == 'Unobtainium Pendant') {
          _root.save.inventoryAttack[i] += 180;
          _root.save.inventoryCrit[i] += 45;
          _root.save.inventoryDexterity[i] += 45;
          _root.save.inventoryHealth[i] += 45;
        }
        ++i;
      }
      _root.save.ver = 634;
    }
    if (_root.save.ver < 635) {
      _root.save.raidPyramid = Math.floor(_root.save.raidPyramid / 4);
      _root.save.ver = 635;
    }
    if (_root.save.ver < 637) {
      _root.save.raidPyramid = 0;
      _root.save.ver = 637;
    }
    if (_root.save.ver < 638) {
      if (_root.save.careerLevel[6] >= 100) {
        _root.save.careerEXP[6] += Math.max(_root.save.totalPong / 1000 + _root.save.totalAvoidance / 1000 + _root.save.totalMath / 2500 + _root.save.totalWhack / 2000 + _root.save.totalMind / 500 + _root.save.totalBalance / 2500 + _root.save.totalCount / 2000 - 500000, 0);
      }
      if (_root.save.careerLevel[7] >= 100) {
        _root.save.careerEXP[7] += Math.max(_root.save.stadiumRace * 250 + _root.save.stadiumImpossibleRace * 250 + _root.save.stadiumItem * 300 + _root.save.stadiumImpossibleItem * 300 + _root.save.stadiumDeathMatch * 5000 - 500000, 0);
      }
      if (_root.save.careerLevel[8] >= 100) {
        _root.save.careerEXP[8] += Math.max(_root.save.fcgExpTotal * 16 - 500000, 0);
      }
      if (_root.save.careerLevel[12] >= 100) {
        _root.save.careerEXP[12] += Math.max((_root.save.fishExp + _root.save.fishTotalExp) * 2 - 500000, 0);
      }
      _root.save.ver = 638;
    }
    if (_root.save.ver < 639) {
      if (_root.save.arenaAccuracy < 100 || _root.save.arenaLevel > 1 && _root.save.arenaLevel < 40) {
        _root.save.arenaAccuracy += 50;
        _root.save.arenaEvasion += 50;
        _root.save.arenaMaxHealth += 1500;
        _root.save.arenaMaxMana += 500;
      }
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryName[i] == 'Auto Buff Gem') {
          if (_root.save.inventoryBonus[i] != '' && _root.save.inventoryBonus[i].indexOf('Auto Buff') == -1) {
            _root.save.inventoryBonus[i] = '';
          }
        }
        if (_root.save.inventoryName[i] != '' && _root.save.inventoryName[i].indexOf('Auto Buff') != -1) {
          if (_root.save.inventoryBonus[i] != '' && _root.save.inventoryBonus[i].indexOf('Auto Buff') == -1) {
            _root.save.inventoryBonus[i] = '';
          }
        }
        if (_root.save.inventoryExpiry[i] == 0 && _root.save.inventoryObtainTime[i] > 1385823600000.0 && _root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('84663214') != -1 && _root.save.inventoryDesc[i].indexOf('993776406') != -1 && _root.save.inventoryDesc[i].indexOf('336567214') != -1 && _root.save.inventoryDesc[i].indexOf('957022263') != -1 && _root.save.inventoryDesc[i].indexOf('366154706') != -1 && _root.save.inventoryDesc[i].indexOf('993776406') != -1 && _root.save.inventoryDesc[i].indexOf('545318181') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
      i = 51;
      while (i <= 75) {
        _root.save.gardenSlotEXP[i] = 0;
        _root.save.gardenTrees[i] = 0;
        ++i;
      }
      i = 1;
      while (i <= 75) {
        if (_root.save.gardenTrees[i] != 0 && !isNaN(_root.save.gardenTrees[i])) {
          _root.save.gardenTreeExp[i] = 50;
          _root.save.gardenTreeFertilize[i] = 20;
        }
        ++i;
      }
      _root.save.ver = 639;
    }
    if (_root.save.ver < 642) {
      if (!isNaN(_root.save.mysteryBoxCollect10[1])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[1] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[1] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[2])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[2] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[2] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[3])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[3] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[3] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[4])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[4] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[4] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[5])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[5] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[5] * 10;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[6])) {
        _root.save.boostPotion += _root.save.mysteryBoxCollect10[6] * 2;
        _root.save.whiteCoin += _root.save.mysteryBoxCollect10[6] * 10;
      }
      if (_root.saveid < 4) {
        if (_root.save.firstPlayed >= 1385769600000.0 && _root.save.firstPlayed <= 1420070400000.0) {
          _root.save.mysteryBox[10] += 40;
        }
        if (_root.save.bestLevel >= 150) {
          _root.save.mysteryBox[10] += 1;
        }
        if (_root.save.battlePoint >= 500) {
          _root.save.mysteryBox[10] += 9;
        }
      }
      _root.save.raidPyramid = 0;
      _root.save.raidDefend = 0;
      _root.save.raidPrehistoric = 0;
      _root.save.raidMegaboss = 0;
      _root.save.raidTower = 0;
      _root.save.raidDungeon = 0;
      _root.save.raidEndless = 0;
      _root.save.arenaRevengeScore = 0;
      _root.save.arenaTriangleScore = 0;
      _root.save.arenaTriangleToday = 0;
      _root.save.arenaSpookyScore = 0;
      _root.save.arenaSpookyToday = 0;
      _root.save.fcgSeriousDeck = 34 + random(35);
      _root.save.fcgExp += _root.save.fcgWin * Math.ceil(15 + _root.save.fcgLevel / 3) + _root.save.fcgLevel5 * 25 + _root.save.fcgLevel6 * 50 + _root.save.fcgLevel7 * 75 + _root.save.fcgLevel8 * 100 + _root.save.fcgLevel9 * 125 + _root.save.fcgLevel10 * 150;
      if (_root.save.careerLevel[8] >= 50) {
        _root.save.careerEXP[8] += (_root.save.fcgWin * Math.ceil(15 + _root.save.fcgLevel / 3) + _root.save.fcgLevel5 * 25 + _root.save.fcgLevel6 * 50 + _root.save.fcgLevel7 * 75 + _root.save.fcgLevel8 * 100 + _root.save.fcgLevel9 * 125 + _root.save.fcgLevel10 * 150) * 10;
      }
      _root.save.ver = 642;
    }
    if (_root.save.ver < 643) {
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaAllyUpgrade[i] == 15) {
          if (i == 275 || i == 295 || i >= 332 && i <= 349 || i == 356 || i >= 367 && i <= 376 || i >= 377 && i <= 432 || i >= 438 && i <= 440 || i >= 448 && i <= 485) {
            _root.save.arenaAllyUpgrade[i] = 10;
            _root.save.arenaUnobtainium += 500;
            _root.save.whiteCoin += 200;
            _root.save.mysteryBox[10] += 2;
          }
        }
        if (!isNaN(_root.save.arenaBestiaryUlt1[i])) {
          _root.save.arenaBestiaryUlt1V[i] = 1664;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt2[i])) {
          _root.save.arenaBestiaryUlt2V[i] = 1664;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt3[i])) {
          _root.save.arenaBestiaryUlt3V[i] = 1664;
        }
        ++i;
      }
      _root.save.ver = 643;
    }
    if (_root.save.ver < 644) {
      if (_root.save.speedRunAscendImpossible < 1440) {
        _root.save.speedRunAscendImpossible = 1440;
      }
      _root.save.battlePoint += _root.save.arenaExpExcess * 4 + _root.save.bannedB * 1500;
      _root.save.ver = 644;
    }
    if (_root.save.ver < 645) {
      if (_root.save.houseVer > 172800 && _root.save.banned < 90) {
        _root.save.houseVer = 172800;
      }
      if (_root.save.banned >= 5) {
        _root.save.progSpeedAuto = 200;
        _root.save.progSpeedManual = 400;
      }
      _root.save.fcgCash += _root.save.fcgBuff[1] * 500;
      _root.save.fcgCash += _root.save.fcgBuff[2] * 1500;
      _root.save.fcgCash += _root.save.fcgBuff[3] * 3000;
      _root.save.fcgCash += _root.save.fcgBuff[4] * 5000;
      _root.save.fcgCash += _root.save.fcgBuff[5] * 8000;
      _root.save.fcgCash += _root.save.fcgBuff[6] * 12000;
      _root.save.fcgCash += _root.save.fcgBuff[7] * 2000;
      _root.save.fcgCash += _root.save.fcgBuff[8] * 250;
      _root.save.stupidity += _root.save.bannedImpossible * 2;
      _root.save.banned1665 = Math.floor(_root.save.mysteryBox[8] / 30000);
      if (_root.save.banned1665 > 5) {
        _root.save.banned1665 = 5;
      }
      if (_root.save.banned1665 < 0) {
        _root.save.banned1665 = 0;
      }
      _root.save.banned += _root.save.banned1665;
      _root.save.bannedHard += _root.save.banned1665;
      _root.save.bannedImpossible += _root.save.banned1665;
      _root.save.stupidity += _root.save.banned1665 * 9;
      _root.save.permaStupidity += _root.save.banned1665;
      _root.save.permaStupidityHard += _root.save.banned1665;
      _root.save.permaStupidityImpossible += _root.save.banned1665;
      _root.save.ver = 645;
    }
    if (_root.save.ver < 646) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] >= 30 && _root.save.progModuleType[i] <= 39) {
          _root.save.progModuleChance[i] = Math.floor(_root.save.progModuleChance[i] / 2);
        }
        ++i;
      }
      _root.save.ver = 646;
    }
    if (_root.save.ver < 651) {
      _root.save.arenaSP += _root.save.arenaLevel * 5 - 1;
      _root.save.ver = 651;
    }
    if (_root.save.ver < 652) {
      if (_root.save.arenaUltimateSP > 150 + Math.floor(_root.save.battlePoint / 10000)) {
        _root.save.arenaUltimateSP = 150 + Math.floor(_root.save.battlePoint / 10000);
        _root.save.arenaSP = _root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10;
        _root.save.arenaTotalSkill = 0;
        _root.save.arenaTotalSP = 0;
        i = 1;
        while (i <= 66) {
          if (_root.save.arenaSkill[i] > 0) {
            _root.save.arenaSkill[i] = 0;
          }
          ++i;
        }
      }
      _root.save.ver = 652;
    }
    if (_root.save.ver < 653) {
      if (_root.save.bannedHard >= 1) {
        _root.save.whiteCoin += 1000;
      }
      if (_root.save.bannedImpossible >= 1) {
        _root.save.whiteCoin += 2000;
      }
      _root.save.ver = 653;
    }
    if (_root.save.ver < 654) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryDesc[i] != '' && _root.save.inventoryDesc[i].indexOf('exploited') != -1) {
          if (_root.save.inventoryDesc[i].indexOf('84663214') != -1 || _root.save.inventoryDesc[i].indexOf('993776406') != -1 || _root.save.inventoryDesc[i].indexOf('336567214') != -1 || _root.save.inventoryDesc[i].indexOf('957022263') != -1 || _root.save.inventoryDesc[i].indexOf('366154706') != -1 || _root.save.inventoryDesc[i].indexOf('993776406') != -1 || _root.save.inventoryDesc[i].indexOf('545318181') != -1) {
            if (_root.save.inventoryNoLife[i] == false) {
              _root.save.inventoryExpiry[i] = Infinity;
            } else {
              _root.save.inventoryExpiry[i] = 1388583420000.0;
            }
            _root.save.inventoryDesc[i] = '';
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 655) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryExpiry[i] == 1388583420000.0) {
          _root.save.inventoryExpiry[i] = Infinity;
        }
        ++i;
      }
      _root.save.ver = 655;
    }
    if (_root.save.ver < 656) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 5) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        if (_root.save.progModuleType[i] == 30) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 31 && _root.save.progModuleType[i] <= 32) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 60;
          } else {
            _root.save.progModuleChance[i] = Math.round(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 33 && _root.save.progModuleType[i] <= 35) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 36 && _root.save.progModuleType[i] <= 39) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 42) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 656;
    }
    if (_root.save.ver < 657) {
      _root.save.raidSpecial = 0;
      _root.save.ver = 657;
    }
    if (_root.save.ver < 659) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 659;
    }
    if (_root.save.ver < 663) {
      if (_root.save.fcgCash == -Infinity || isNaN(_root.save.fcgCash) || _root.save.fcgCash < 0) {
        delete _root.save.fcgCash;
        if (isNaN(_root.save.fcgMaxCash) || _root.save.fcgMaxCash > 1000000000 || _root.save.fcgMaxCash < 0) {
          _root.save.fcgMaxCash = 0;
        }
        _root.save.fcgCash = _root.save.fcgMaxCash;
      }
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 26) {
          _root.save.progModuleName[i] = 'Career EXP Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2.5);
          }
        }
        ++i;
      }
      _root.save.ver = 663;
    }
    if (_root.save.ver < 664) {
      i = 1;
      while (i <= 500) {
        if (!isNaN(_root.save.arenaAllyEXP[i]) && isNaN(_root.save.arenaAllyUpgrade[i])) {
          _root.save.arenaAllyUpgrade[i] = 0;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt1V[i])) {
          _root.save.arenaAllyUpgrade[i] = 15;
          if (i == 275 || i == 295 || i >= 332 && i <= 349 || i == 356 || i >= 367 && i <= 376 || i >= 377 && i <= 432 || i >= 438 && i <= 440 || i >= 448 && i <= 485) {
            if (_root.save.arenaBestiaryUlt1V[i] < 1665) {
              _root.save.arenaAllyUpgrade[i] = 10;
            }
          }
        }
        if (!isNaN(_root.save.arenaBestiaryExtra[i]) && _root.save.arenaBestiaryExtra[i] > 0 && _root.save.arenaAllyUpgrade[i] < 10) {
          _root.save.arenaAllyUpgrade[i] = 10;
          if (_root.enemyList[i].allyPassive3 == '') {
            _root.save.arenaAllyUpgrade[i] = 15;
          }
        }
        ++i;
      }
      _root.save.ver = 664;
    }
    if (_root.save.ver < 666) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 10) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 666;
    }
    if (_root.save.ver < 667) {
      tmul = Math.floor(Math.pow(_root.save.bestLevel, 0.6)) / 5 + 1;
      if (_root.save.bestLevel >= 9000) {
        tmul += 2;
      }
      i = 1;
      while (i <= 75) {
        if (!isNaN(_root.save.gardenHarvestValue[i])) {
          _root.save.gardenHarvestValue[i] = Math.ceil(_root.save.gardenHarvestValue[i] / tmul);
        }
        ++i;
      }
      _root.save.ver = 667;
    }
    if (_root.save.ver < 668) {
      i = 1;
      while (i <= 70) {
        if (_root.save.progModuleType[i] == 26) {
          _root.save.progModuleName[i] = 'Career EXP Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 668;
    }
    if (_root.save.ver < 669) {
      i = 1;
      while (i <= 75) {
        if (_root.save.gardenTrees[i] != 0 && !isNaN(_root.save.gardenTrees[i])) {
          _root.save.gardenTreeModuleProc[i] = 0;
        }
        ++i;
      }
      _root.save.ver = 669;
    }
    if (_root.save.ver < 670) {
      if (_root.save.bestLevel >= 150) {
        _root.save.whiteCoin += 1000;
      }
      _root.save.ver = 670;
    }
    if (_root.save.ver < 672) {
      _root.save.consecutiveDays = _root.save.maxConsecutiveDays;
      i = 71;
      while (i <= 141) {
        _root.deleteModulePiece(i);
        ++i;
      }
      i = 41;
      while (i <= 70) {
        _root.copyModulePiece(i, i + 70);
        _root.deleteModulePiece(i);
        ++i;
      }
      _root.save.ver = 672;
    }
    if (_root.save.ver < 675) {
      _root.save.totalStupidity = _root.save.banned + _root.save.bannedHard * 2 + _root.save.bannedImpossible * 6;
      if (_root.save.gDifficulty == 3) {
        _root.save.totalStupidity += 8;
      } else {
        if (_root.save.gDifficulty == 2) {
          _root.save.totalStupidity += 2;
        }
      }
      _root.save.remStupidity = _root.save.totalStupidity;
      _root.save.questToken += 2000 * _root.save.stupidity;
      _root.save.ver = 675;
      _root.save.banPenalty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.save.arenaSubWeapon = 0;
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 3) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 16) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 26) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 21) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 28 || _root.save.progModuleType == 29) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 19 || _root.save.progModuleType[i] == 22 || _root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13 || _root.save.progModuleType[i] == 20 || _root.save.progModuleType[i] == 24 || _root.save.progModuleType[i] == 25 || _root.save.progModuleType[i] == 27 || _root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 677) {
      _root.save.ver = 677;
      _root.save.mysteryBox[8] = Math.ceil(_root.save.mysteryBox[8] * 0.1);
      if (_root.save.fcgLevel >= 20) {
        _root.save.fcgInitDeck = 6;
        _root.save.fcgCash += 10000;
      }
      _root.save.whiteCoinRefund = Math.floor(_root.save.banned * 500 * (1 + _root.save.banned / 200));
      if (_root.save.banned > 100) {
        _root.save.whiteCoinRefund -= (_root.save.banned - 100) * 500;
      }
      _root.save.whiteCoinRefund = Math.floor(_root.save.whiteCoinRefund * 0.5);
      _root.save.whiteCoinRefundTotal = _root.save.whiteCoinRefund;
    }
    if (_root.save.ver < 678) {
      _root.save.ver = 678;
      if (_root.save.bestLevel >= 100 && _root.saveid <= 3) {
        _root.save.mysteryBox[10] += 10;
      }
    }
    if (_root.save.ver < 680) {
      _root.save.ver = 680;
      if (_root.save.banned > 100) {
        _root.save.totalStupidity += _root.save.banned - 100;
        _root.save.remStupidity += _root.save.banned - 100;
      }
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(40 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 3) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 500;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 16) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 26) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 21) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
            _root.save.progModuleEffect[i] = 20;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 28 || _root.save.progModuleType == 29) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 19 || _root.save.progModuleType[i] == 22 || _root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13 || _root.save.progModuleType[i] == 20 || _root.save.progModuleType[i] == 24 || _root.save.progModuleType[i] == 25 || _root.save.progModuleType[i] == 27 || _root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 683) {
      _root.save.ver = 683;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryDesc[i] == 'Thank you for your donation and your continuous support!') {
          _root.save.inventoryDesc[i] = 'Thank you for your donation and your continued support!';
        }
        if (_root.save.inventoryName[i].indexOf('(Cursed)') != -1 && _root.save.inventoryExist[i] == 1) {
          _root.save.inventoryName[i] = substring(_root.save.inventoryName[i], 0, _root.save.inventoryName[i].length - 9);
        }
        ++i;
      }
    }
    if (_root.save.ver < 684) {
      if (_root.saveid == 0 && _root.kongregate_username == 'FireShard') {
        _root.save.totalStupidity += 2;
        _root.save.remStupidity += 2;
      }
      _root.save.ver = 684;
    }
    if (_root.save.ver < 694) {
      _root.save.ver = 694;
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 14) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 50;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 15) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 4000;
            _root.save.progModuleEffect[i] = 50;
          } else {
            _root.save.progModuleChance[i] = Math.round(2000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 23) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 24) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 7) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
            _root.save.progModuleEffect[i] = 10;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(5 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 6;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(3 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 695) {
      _root.save.ver = 695;
      if (_root.saveid <= 3 && _root.save.bestLevel >= 150) {
        _root.save.shinyToken += 10;
      }
    }
    if (_root.save.ver < 696) {
      _root.save.ver = 696;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt1V[i] == 1736 || _root.save.arenaBestiaryUlt1V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt1V[i];
          delete _root.save.arenaBestiaryUlt1[i];
          if (_root.save.arenaAllyUpgrade[i] == 15) {
            _root.save.arenaAllyUpgrade[i] = 10;
          }
        }
        if (_root.save.arenaBestiaryUlt2V[i] == 1736 || _root.save.arenaBestiaryUlt2V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt2V[i];
          delete _root.save.arenaBestiaryUlt2[i];
        }
        if (_root.save.arenaBestiaryUlt3V[i] == 1736 || _root.save.arenaBestiaryUlt3V[i] == 1737) {
          delete _root.save.arenaBestiaryUlt3V[i];
          delete _root.save.arenaBestiaryUlt3[i];
        }
        ++i;
      }
    }
    if (_root.save.ver < 698) {
      _root.save.ver = 698;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt1F[i] != undefined && _root.save.arenaAllyUpgrade[i] == 10) {
          if (_root.save.arenaBestiaryUlt1F[i].indexOf('2015-10-1') == -1) {
            _root.save.arenaBestiaryUlt1[i] = 1;
            _root.save.arenaBestiaryUlt1V[i] = 1735;
            _root.save.arenaAllyUpgrade[i] = 15;
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 699) {
      _root.save.ver = 699;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaBestiaryUlt2F[i] != undefined && _root.save.arenaBestiaryUlt2[i] == undefined) {
          if (_root.save.arenaBestiaryUlt2F[i].indexOf('2015-10-1') == -1) {
            _root.save.arenaBestiaryUlt2[i] = 1;
            _root.save.arenaBestiaryUlt2V[i] = 1735;
          }
        }
        ++i;
      }
    }
    if (_root.save.ver < 700) {
      _root.save.ver = 700;
      _root.save.wisdomDiscovered = new Array();
    }
    if (_root.save.ver < 701) {
      _root.save.ver = 701;
      i = 1;
      while (i <= 500) {
        if (_root.save.arenaAllyUpgrade[i] == 15 && _root.enemyList[i].allyPassive3 == '' && !isNaN(_root.save.arenaBestiaryExtra[i])) {
          _root.save.arenaBestiary[i] += _root.save.arenaBestiaryExtra[i] * 4;
          _root.save.arenaBestiaryExtra[i] += _root.save.arenaBestiaryExtra[i] * 4;
        }
        ++i;
      }
    }
    if (_root.save.ver < 702) {
      if (_root.save.petFullness > 2000) {
        _root.save.pam = true;
      }
      if (_root.save.petFullness > 1000) {
        _root.save.petFullness = 1000;
      }
      _root.save.ver = 702;
    }
    if (_root.save.ver < 704) {
      if (_root.save.petFullness > 2000) {
        _root.save.pam = true;
      }
      if (_root.save.petFullness > 1000) {
        _root.save.petFullness = 1000;
      }
      if (!isNaN(_root.save.mysteryBoxCollect10[1]) && !isNaN(_root.save.mysteryBoxCollect10[2]) && !isNaN(_root.save.mysteryBoxCollect10[3]) && !isNaN(_root.save.mysteryBoxCollect10[4]) && !isNaN(_root.save.mysteryBoxCollect10[5]) && !isNaN(_root.save.mysteryBoxCollect10[6])) {
        tmp = _root.save.mysteryBox[10] + _root.save.mysteryBoxCollect10[1] + _root.save.mysteryBoxCollect10[2] + _root.save.mysteryBoxCollect10[3] + _root.save.mysteryBoxCollect10[4] + _root.save.mysteryBoxCollect10[5] + _root.save.mysteryBoxCollect10[6];
        if (tmp > 19876) {
          _root.save.pam = true;
        }
      }
      _root.save.ver = 704;
    }
    if (_root.save.ver < 705) {
      if (_root.save.botExp < 0) {
        _root.save.botExp = 0;
      }
      _root.save.ver = 705;
    }
    if (_root.save.ver < 706) {
      if (_root.kongregate_username == 'Mnchngrngs' && _root.save.careerLevel[13] == 100) {
        _root.save.careerLevel[13] = 0;
        _root.save.careerLevel[14] = 0;
        _root.save.careerLevel[15] = 0;
        _root.save.careerLevel[16] = 0;
        _root.save.arenaKommanderComplete = 12;
        _root.save.arenaSkillBook = 1240;
      }
    }
    if (_root.save.ver < 707) {
      i = 0;
      while (i <= 899) {
        _root.save.drawingBoardHex[i] = '000000';
        _root.save.drawingBoardAlp[i] = 0;
        ++i;
      }
      _root.save.ver = 707;
    }
    if (_root.save.ver < 708) {
      i = 900;
      while (i <= 1199) {
        _root.save.drawingBoardHex[i] = '000000';
        _root.save.drawingBoardAlp[i] = 0;
        ++i;
      }
      _root.save.ver = 708;
    }
    if (_root.save.ver < 711) {
      if (_root.save.arenaEventPoint[1] > 40000) {
        _root.save.arenaEventPoint[1] = Math.floor((_root.save.arenaEventPoint[1] - 40000) * 0.5) + 40000;
      }
      _root.save.ver = 711;
    }
    if (_root.save.ver < 712) {
      _root.save.buttonMultiplier *= 2;
      _root.save.ver = 712;
    }
    if (_root.save.ver < 713) {
      _root.save.collectionPointMax = _root.save.collectionPoint;
      _root.save.ver = 713;
    }
    if (_root.save.ver < 715) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 17) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 2000;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 18) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 10) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 715;
    }
    if (_root.save.ver < 716) {
      if (_root.save.progStore > 1000) {
        _root.save.progStore = 100;
      }
      tmpProgStore = _root.save.progStore;
      tmpProgStoreB = 100;
      _root.save.progStore = 100;
      while (tmpProgStoreB < tmpProgStore) {
        tmpProgStoreB += Math.ceil((1000 - tmpProgStoreB) / 10);
        _root.save.progStore += 100;
      }
      _root.save.ver = 716;
    }
    if (_root.save.ver < 717) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 6) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 500;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(250 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 10;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(5 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 717;
    }
    if (_root.save.ver < 718) {
      if (_root.save.bestLevel >= 1250) {
        _root.save.botPill += 2;
      }
      _root.save.ver = 718;
    }
    if (_root.save.ver < 721) {
      _root.save.bugExp = 0;
      if (_root.save.level == 9001) {
        _root.save.bugExp = Math.floor(_root.save.currentExp * 0.99);
        _root.save.expLag += Math.floor(_root.save.currentExp * 0.99);
      }
      _root.save.ver = 721;
    }
    if (_root.save.ver < 726) {
      if (_root.save.fishCapacity == 1337) {
        _root.save.fishCapacity = 2500;
      } else {
        if (_root.save.fishCapacity == 1837) {
          _root.save.fishCapacity = 5000;
        } else {
          if (_root.save.fishCapacity == 2524) {
            _root.save.fishCapacity = 7500;
          } else {
            if (_root.save.fishCapacity == 3468) {
              _root.save.fishCapacity = 10000;
            } else {
              if (_root.save.fishCapacity == 4766) {
                _root.save.fishCapacity = 12500;
              } else {
                if (_root.save.fishCapacity == 6550) {
                  _root.save.fishCapacity = 15000;
                } else {
                  if (_root.save.fishCapacity == 9001) {
                    _root.save.fishCapacity = 17500;
                  }
                }
              }
            }
          }
        }
      }
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 1) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 2) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 11) {
          _root.save.progModuleName[i] = 'Pet Mana Module';
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 726;
    }
    if (_root.save.ver < 728) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 1) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 2) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 2000;
            _root.save.progModuleEffect[i] = 30;
          } else {
            _root.save.progModuleChance[i] = Math.round(1000 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        if (_root.save.progModuleType[i] == 11) {
          _root.save.progModuleName[i] = 'Pet Mana Module';
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 200;
          } else {
            _root.save.progModuleChance[i] = Math.round(50 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 13) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
          } else {
            _root.save.progModuleChance[i] = Math.round(100 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 40) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 400;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 728;
    }
    if (_root.save.ver < 730) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 22) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 800;
          } else {
            _root.save.progModuleChance[i] = Math.round(200 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 30) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 40;
          } else {
            _root.save.progModuleChance[i] = Math.round(10 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 31 || _root.save.progModuleType[i] == 32) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 60;
          } else {
            _root.save.progModuleChance[i] = Math.round(15 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 33 && _root.save.progModuleType[i] <= 35) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 80;
          } else {
            _root.save.progModuleChance[i] = Math.round(20 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] >= 36 && _root.save.progModuleType[i] <= 39) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 100;
          } else {
            _root.save.progModuleChance[i] = Math.round(25 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        if (_root.save.progModuleType[i] == 41) {
          _root.save.progModuleEffect[i] = 1;
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1600;
          } else {
            _root.save.progModuleChance[i] = Math.round(400 * (1 + (_root.save.progModuleTier[i] - 1) / 10) * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 5);
          }
        }
        ++i;
      }
      _root.save.ver = 730;
    }
    if (_root.save.ver < 731) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventoryType[i] == 'Potion') {
          if (_root.save.inventoryName[i] == 'Small Power Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Small Master Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Small Reward Potion') {
            _root.save.inventoryAttack[i] = 600;
          }
          if (_root.save.inventoryName[i] == 'Medium Power Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Medium Master Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Medium Reward Potion') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Large Power Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Large Master Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Large Reward Potion') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Power Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Master Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Reward Crystal') {
            _root.save.inventoryAttack[i] = 1800;
          }
          if (_root.save.inventoryName[i] == 'Special Power Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Special Master Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Special Reward Crystal') {
            _root.save.inventoryAttack[i] = 5400;
          }
          if (_root.save.inventoryName[i] == 'Loot Magnet') {
            _root.save.inventoryAttack[i] = 3600;
          }
          if (_root.save.inventoryName[i] == 'Monster Magnet') {
            _root.save.inventoryAttack[i] = 3600;
          }
          if (_root.save.inventoryName[i] == 'Air Bubble') {
            _root.save.inventoryAttack[i] = 1800;
          }
        }
        ++i;
      }
      _root.save.ver = 731;
    }
    if (_root.saveGlobal.latestVersion == 1787) {
      _root.saveGlobal.pl7 = true;
      _root.saveGlobal.pl8 = true;
    }
    if (_root.save.ver < 732) {
      _root.save.arenaChaosLeft = 15;
      _root.save.arenaChaosMax = 15;
      _root.save.ver = 732;
    }
    if (_root.save.ver < 733) {
      _root.save.mh = false;
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Medal' && _root.save.inventoryEnhance[i] > 0) {
          if (_root.save.inventoryDesc[i] == 'Thank you for your donation and your continued support!') {
            _root.save.inventoryAttack[i] = 0;
            _root.save.mh = true;
          }
          if (_root.save.inventoryDesc[i] == 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!') {
            _root.save.inventoryAttack[i] = 0;
            _root.save.mh = true;
          }
        }
        ++i;
      }
      _root.save.ver = 733;
    }
    if (_root.save.ver < 735) {
      i = 1;
      while (i <= 1337) {
        if (_root.save.inventorySubtype[i] == 'Pendant' && _root.save.inventoryName[i] == 'GIGA PENDANT') {
          _root.save.inventoryAttack[i] += _root.save.inventoryEnhance[i] * 75;
        }
        if (_root.save.inventorySubtype[i] == 'Earring' && _root.save.inventoryName[i] == 'GIGA EARRINGS') {
          _root.save.inventoryAttack[i] += _root.save.inventoryEnhance[i] * 75;
          j = 5000;
          while (j <= 7000) {
            if (_root.save.inventoryDesc[i].indexOf(_root.withComma(j)) != -1) {
              _root.save.inventoryAttack[i] -= Math.floor(j - 5000) / 5;
              _root.save.inventoryAttack[i] += Math.floor(j - 5000) / 2;
              j = 7001;
            }
            ++j;
          }
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA ENHANCER') {
          _root.save.inventoryAttack[i] = 125;
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA ENHANCER EX') {
          _root.save.inventoryAttack[i] = 150;
        }
        if (_root.save.inventoryType[i] == 'Enhancer' && _root.save.inventoryName[i] == 'GIGA LIFE ROCK') {
          _root.save.inventoryAttack[i] = 2;
        }
        ++i;
      }
      if (_root.save.raidDungeon >= 4500) {
        _root.save.arenaChaosLeft += 7;
      }
      _root.save.ver = 735;
    }
    if (_root.save.ver < 736) {
      if (_root.save.bannedB >= 1) {
        if (_root.save.arenaAttack < 65000) {
          _root.save.arenaAttack = 65000;
        }
        if (_root.save.arenaDefense < 65000) {
          _root.save.arenaDefense = 65000;
        }
        if (_root.save.arenaMaxHealth < 650000) {
          _root.save.arenaMaxHealth = 650000;
        }
        if (_root.save.arenaMaxMana < 130000) {
          _root.save.arenaMaxMana = 130000;
        }
        if (_root.save.arenaAccuracy < 13000) {
          _root.save.arenaAccuracy = 13000;
        }
        if (_root.save.arenaEvasion < 13000) {
          _root.save.arenaEvasion = 13000;
        }
      }
    }
    if (_root.save.ver < 737) {
      if (_root.save.regretRem > 1) {
        _root.save.regretRem = 1;
      }
      _root.save.ver = 737;
    }
    if (_root.save.ver < 739) {
      if (_root.save.regretRem == 0) {
        _root.save.robaconExp += 10000000000.0;
      }
      _root.save.ver = 739;
    }
    if (_root.save.ver < 740) {
      i = 26;
      while (i <= 50) {
        _root.save.gardenSlotEXP[i] *= 2;
        ++i;
      }
      _root.save.ver = 740;
    }
    if (_root.save.ver < 741) {
      if (_root.saveid < 10 && _root.save.bestLevel >= 1250) {
        _root.save.botPill += 2;
      }
      _root.save.ver = 741;
    }
    if (_root.save.ver < 742) {
      i = 1;
      while (i <= 140) {
        if (_root.save.progModuleType[i] == 4) {
          if (_root.save.progModuleTier[i] == 9) {
            _root.save.progModuleChance[i] = 1000;
            _root.save.progModuleEffect[i] = 4;
          } else {
            _root.save.progModuleChance[i] = Math.round(500 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
            _root.save.progModuleEffect[i] = Math.floor(2 * (1 + (_root.save.progModuleTier[i] - 1) / 10));
          }
          if (_root.save.progModuleShiny[i] == 1) {
            _root.save.progModuleChance[i] = Math.ceil(_root.save.progModuleChance[i] * 2.5);
            _root.save.progModuleEffect[i] = Math.ceil(_root.save.progModuleEffect[i] * 2);
          }
        }
        ++i;
      }
      _root.save.ver = 742;
    }
    if (_root.save.ver < 743) {
      i = 1;
      while (i <= 2500) {
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Hat' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Shirt' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Gloves' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Pants' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        if (_root.save.inventoryType[i] == 'Armor' && _root.save.inventoryName[i] == 'Ultimate Shoes' && _root.save.inventoryAbility[i] == 'Damage') {
          _root.save.inventoryAbility[i] = 'Attack';
        }
        ++i;
      }
      _root.save.ver = 743;
    }
    if (_root.save.ver < 744) {
      if (_root.save.lolProfit > 0) {
        _root.save.lolCapacity = _root.save.lolCapacity * 5 - 5;
      }
      if (_root.save.lolCapacity < 50) {
        _root.save.lolCapacity = 50;
      }
      if (_root.save.lolCapacity > 5000) {
        _root.save.lolCapacity = 5000;
      }
      _root.save.ver = 744;
    }
    if (_root.save.ver < 745) {
      i = 1;
      while (i <= 10) {
        if (_root.save.lolGems[i] >= 2000) {
          _root.save.lolProfit -= Math.ceil(_root.save.lolGems[i] * 750 * i);
          _root.save.lolGems[i] = Math.ceil(_root.save.lolGems[i] * 1.5);
        }
        ++i;
      }
      _root.save.ver = 745;
    }
    if (_root.save.ver < 746) {
      _root.save.arenaKommanderProgress = 0;
      _root.save.ver = 746;
    }
    if (_root.save.ver < 747) {
      _root.save.arenaChaosLeft = _root.save.arenaChaosMax;
      _root.save.ver = 747;
    }
    if (_root.save.ver < 748) {
      if (_root.save.banned < 1 && _root.save.bannedB < 1 && _root.save.arenaKommanderMonID >= 448) {
        _root.save.arenaKommanderSkip += 1;
      }
      _root.save.ver = 748;
    }
    if (_root.save.ver < 749) {
      if (_root.save.arenaLevel < 500 && _root.save.arenaKommanderMonID >= 443 && _root.save.arenaKommanderMonID <= 447) {
        _root.save.arenaKommanderSkip += 1;
      }
      _root.save.ver = 749;
    }
    if (_root.save.ver < 750) {
      _root.save.botPoint = Math.floor(_root.save.botPoint * 1.5);
      _root.save.ver = 750;
    }
    if (_root.save.ver < 760) {
      _root.save.arenaKommanderSkip = 2;
      _root.save.ver = 760;
    }
    _root.newsCount = 0;
    _root.newsID = new Array();
    _root.newsFeature = new Array();
    _root.newsSauceName = new Array();
    addNewsType(0, 0, 0, 0, 'GENERAL');
    addNewsType(1, 0, 4, 16711680, 'System messages (recommended)');
    addNewsType(167, 0, 4, 10092441, 'EXP bar information');
    addNewsType(163, 0, 3, 16777215, 'When I gain White Coins');
    addNewsType(159, 0, 3, 13434624, 'Speedrun / Challenge Mode information');
    addNewsType(2, 0, 3, 16776960, 'When I level up');
    addNewsType(3, 0, 3, 16776960, 'When I earn an achievement');
    addNewsType(155, 0, 3, 13434879, 'When I gain Event Tokens');
    addNewsType(0, 0, 0, 0, 'PROGRESS BAR');
    addNewsType(4, 0, 1, 16768460, 'When I claim a reward');
    addNewsType(5, 0, 1, 16768460, 'When I claim multiple rewards');
    addNewsType(6, 0, 1, 16768460, 'When I gain free Boost');
    addNewsType(7, 0, 1, 16768460, 'When I gain additional login rewards');
    addNewsType(8, 0, 1, 16768460, 'When Epic Skill \'Double Progress\' activates');
    addNewsType(9, 0, 1, 16768460, 'When Epic Skill \'Boost Charger\' activates');
    addNewsType(10, 0, 1, 16768460, 'When Epic Skill \'Coin Collector\' activates');
    addNewsType(11, 0, 1, 16768460, 'When Epic Skill \'Battery Booster\' activates');
    addNewsType(12, 0, 1, 16768460, 'When Epic Skill \'Fanatical Fisher\' activates');
    addNewsType(13, 0, 1, 16768460, 'When Epic Skill \'Module Master\' activates');
    addNewsType(184, 0, 1, 16768460, 'When Epic Skill \'Cyborg Charger\' activates');
    addNewsType(15, 0, 2, 16776960, 'When I upgrade my Progress Bar Speed');
    addNewsType(0, 0, 0, 0, 'FEATURE SHOP');
    addNewsType(14, 0, 2, 16776960, 'When I buy a new feature');
    addNewsType(0, 0, 0, 0, 'GARDEN');
    addNewsType(18, 6, 2, 10092441, 'When I plant new trees');
    addNewsType(19, 6, 3, 10092441, 'When I harvest my trees');
    addNewsType(20, 6, 4, 16711680, 'When my trees expire');
    addNewsType(21, 6, 2, 10092441, 'When I find Randomfruit');
    addNewsType(22, 6, 2, 10092441, 'When I find seeds for Another Garden');
    addNewsType(23, 6, 2, 10092441, 'When I use (Mega) Fertilizers');
    addNewsType(172, 6, 2, 10092441, 'When I eat or sell Randomfruit');
    addNewsType(24, 6, 2, 16711680, 'When I expand my Garden');
    addNewsType(0, 0, 0, 0, 'BATTLE ARENA');
    addNewsType(25, 7, 3, 16776960, 'When my Rank increases');
    addNewsType(26, 7, 3, 16776960, 'When Robacon / Robroccoli\'s Rank increases');
    addNewsType(27, 7, 1, 16751001, 'When a non-boss monster appears');
    addNewsType(28, 7, 2, 16751103, 'When a boss monster appears');
    addNewsType(29, 7, 2, 16751001, 'When a monster is defeated');
    addNewsType(30, 7, 2, 16751001, 'When I receive Bestiary bonus');
    addNewsType(31, 7, 2, 16751001, 'When I receive Invisible Ally bonus');
    addNewsType(32, 7, 3, 16776960, 'When a Bestiary entry levels up');
    addNewsType(33, 7, 2, 13421772, 'When my Invisible Ally gains EXP');
    addNewsType(34, 7, 3, 16776960, 'When my Invisible Ally is mastered');
    addNewsType(35, 7, 3, 16776960, 'When I tame an Invisible Ally');
    addNewsType(36, 7, 2, 16764057, 'When I loot Superior Crafting Material');
    addNewsType(37, 7, 2, 16764057, 'When I loot Unobtainium');
    addNewsType(38, 7, 2, 16764057, 'When I loot Enhancer Fragments');
    addNewsType(39, 7, 2, 16764057, 'When I loot Chaotic Fragments of Chaos');
    addNewsType(40, 7, 2, 16764057, 'When I loot To-be-Nerfed Gems');
    addNewsType(41, 7, 2, 16764057, 'When I loot Bacon / Broccoli');
    addNewsType(42, 7, 2, 16764057, 'When I loot Crystals of Rarity');
    addNewsType(43, 7, 2, 16764057, 'When I loot Crystals of Ultimate Rarity');
    addNewsType(181, 7, 2, 16764057, 'When I loot Regular Boost Potions');
    addNewsType(182, 7, 2, 16764057, 'When I loot Mega Boost Potions');
    addNewsType(44, 7, 3, 16776960, 'When I loot a new Ring');
    addNewsType(45, 7, 2, 16764057, 'When I loot a Ring (replaced with Pixels)');
    addNewsType(46, 7, 3, 16776960, 'When I loot a Recipe');
    addNewsType(47, 7, 3, 16776960, 'When I loot a Skill Scroll or extra SP');
    addNewsType(48, 7, 3, 16776960, 'When I loot a Skill Book');
    addNewsType(49, 7, 3, 14535680, 'When I get a Weapon');
    addNewsType(50, 7, 3, 14535680, 'When I get an Armor');
    addNewsType(51, 7, 3, 14535680, 'When I get an Accessory');
    addNewsType(52, 7, 3, 14535680, 'When I get an Enhancer');
    addNewsType(53, 7, 3, 14535680, 'When I get a Potion');
    addNewsType(54, 7, 3, 14535680, 'When I get an Outfit');
    addNewsType(170, 7, 3, 14535680, 'When I get a Chip');
    addNewsType(55, 7, 3, 16711680, 'When a Weapon is deleted due to full inventory');
    addNewsType(56, 7, 3, 16711680, 'When an Armor is deleted due to full inventory');
    addNewsType(57, 7, 3, 16711680, 'When an Accessory is deleted due to full inventory');
    addNewsType(58, 7, 3, 16711680, 'When an Enhancer is deleted due to full inventory');
    addNewsType(59, 7, 3, 16711680, 'When a Potion is deleted due to full inventory');
    addNewsType(60, 7, 3, 16711680, 'When an Outfit is deleted due to full inventory');
    addNewsType(171, 7, 3, 16711680, 'When a Chip is deleted due to full inventory');
    addNewsType(61, 7, 2, 13434624, 'When I enhance an item');
    addNewsType(62, 7, 2, 13434624, 'When my equipment levels up');
    addNewsType(63, 7, 3, 16711680, 'When my equipment expires');
    addNewsType(64, 7, 2, 16776960, 'When I purchase additional raid entries');
    addNewsType(65, 7, 3, 16711680, 'When I get killed');
    addNewsType(168, 7, 3, 65535, 'When I throw To-be-Nerfed Gems');
    addNewsType(66, 7, 3, 65535, 'Other Battle Arena messages (recommended)');
    addNewsType(0, 0, 0, 0, 'BUTTON MACHINE');
    addNewsType(67, 8, 2, 13421721, 'When I get a Perfect click');
    addNewsType(68, 8, 2, 13421721, 'When the button breaks');
    addNewsType(69, 8, 3, 16776960, 'When I get an Explosion Crate from the Button');
    addNewsType(70, 8, 3, 16776960, 'When I get an Awesome Crate from the Button');
    addNewsType(71, 8, 3, 16776960, 'When I get a Chaos Crate from the Button');
    addNewsType(72, 8, 3, 16776960, 'When I get a Legendary Box from the Button');
    addNewsType(73, 8, 2, 13421721, 'When I repair the button');
    addNewsType(74, 8, 2, 16776960, 'When I buy items from the Button Machine Shop');
    addNewsType(0, 0, 0, 0, 'MONEY PRINTER');
    addNewsType(75, 9, 2, 16777164, 'When some Coins are printed');
    addNewsType(76, 9, 2, 65280, 'When some Green Coins are printed');
    addNewsType(77, 9, 2, 16776960, 'When I upgrade the Money Printer');
    addNewsType(156, 9, 3, 16711680, 'When Battery is low');
    addNewsType(157, 9, 4, 16711680, 'When Battery runs out');
    addNewsType(0, 0, 0, 0, 'ARCADE');
    addNewsType(78, 10, 2, 13421772, '[Pong] Hit');
    addNewsType(79, 10, 2, 15658734, '[Pong] Goal');
    addNewsType(80, 10, 2, 13421772, '[Avoidance] Avoided');
    addNewsType(81, 10, 2, 13421772, '[Math] Correct');
    addNewsType(82, 10, 2, 14540253, '[Math] Nice');
    addNewsType(83, 10, 2, 15658734, '[Math] Excellent');
    addNewsType(84, 10, 2, 13421772, '[Whack] Good');
    addNewsType(85, 10, 2, 14540253, '[Whack] Great');
    addNewsType(86, 10, 2, 15658734, '[Whack] Perfect');
    addNewsType(87, 10, 2, 15658734, '[Whack] Awesome');
    addNewsType(88, 10, 2, 13421772, '[Mind] EXP found');
    addNewsType(89, 10, 2, 15658734, '[Mind] Goal found');
    addNewsType(90, 10, 2, 13421772, '[Balance] Blocks destroyed');
    addNewsType(91, 10, 2, 14540253, '[Count] Stage cleared');
    addNewsType(92, 10, 2, 15658734, '[Count] Confidence bonus');
    addNewsType(93, 10, 2, 13421772, '[MMR] Good');
    addNewsType(94, 10, 2, 14540253, '[MMR] Great');
    addNewsType(95, 10, 2, 15658734, '[MMR] Perfect');
    addNewsType(96, 10, 2, 15658734, '[MMR] Fever bonus');
    addNewsType(97, 10, 3, 16777215, 'Final result');
    addNewsType(161, 10, 3, 13382400, 'When I gain Arcade 100k Medals');
    addNewsType(98, 10, 2, 16776960, 'When I buy items from the Arcade shop');
    addNewsType(0, 0, 0, 0, 'STADIUM');
    addNewsType(99, 11, 2, 10079487, 'When I use items');
    addNewsType(100, 11, 2, 8961006, 'When opponents use items');
    addNewsType(101, 11, 3, 13434879, 'When I KO opponent in Death Match');
    addNewsType(102, 11, 3, 12316398, 'When opponent KOs me in Death Match');
    addNewsType(103, 11, 3, 13434879, 'Final result');
    addNewsType(104, 11, 2, 16776960, 'When I buy items from the Stadium shop');
    addNewsType(0, 0, 0, 0, 'TUKKUNFCG');
    addNewsType(105, 12, 3, 65535, 'Final result');
    addNewsType(106, 12, 3, 16776960, 'When my FCG Level increases');
    addNewsType(0, 0, 0, 0, 'LOLMARKET');
    addNewsType(107, 13, 1, 16777113, 'When prices change');
    addNewsType(108, 13, 2, 16777113, 'When I purchase gems');
    addNewsType(109, 13, 2, 16777113, 'When I sell gems');
    addNewsType(110, 13, 3, 16776960, 'When LolMarket capacity increases');
    addNewsType(0, 0, 0, 0, 'AWESOME ADVENTURES');
    addNewsType(111, 14, 2, 65535, 'When I adventure');
    addNewsType(112, 14, 3, 65535, 'When I gain Energy');
    addNewsType(113, 14, 2, 65535, 'When my Reputation changes');
    addNewsType(114, 14, 2, 16776960, 'When I buy items from the Awesome Shop');
    addNewsType(0, 0, 0, 0, 'FISHING');
    addNewsType(115, 22, 2, 153, 'When I fail to catch something');
    addNewsType(116, 22, 2, 3355596, 'When I get a non-perfect catch');
    addNewsType(117, 22, 2, 6711039, 'When I get a perfect catch');
    addNewsType(162, 22, 3, 13369599, 'When I gain bonus LEGEND EXP');
    addNewsType(118, 22, 2, 10066431, 'When I gain Mastery');
    addNewsType(119, 22, 3, 16776960, 'When I open Treasure Boxes');
    addNewsType(120, 22, 2, 16776960, 'When I raise Skill or Bucket Capacity');
    addNewsType(0, 0, 0, 0, 'DRAGON OF WISDOM');
    addNewsType(121, 19, 1, 11184810, 'When I feed the Dragon of Wisdom');
    addNewsType(122, 19, 3, 16776960, 'When I receive Dragon Feeding Reward');
    addNewsType(123, 19, 3, 16776960, 'When I claim Level Up Reward');
    addNewsType(0, 0, 0, 0, 'MYSTERY BOXES');
    addNewsType(124, 17, 1, 10066329, 'When I open empty Gambler\'s Boxes or get a refund');
    addNewsType(164, 17, 3, 13421568, 'When I open Legendary Boxes');
    addNewsType(165, 17, 3, 13421568, 'When I open Attendance Boxes');
    addNewsType(166, 17, 3, 13421568, 'When I open Supply Crates');
    addNewsType(125, 17, 2, 16776960, 'When I receive a Common prize');
    addNewsType(126, 17, 3, 15658496, 'When I receive an Uncommon prize');
    addNewsType(127, 17, 3, 13421568, 'When I receive a Rare prize');
    addNewsType(183, 17, 3, 13369599, 'When I receive a Mega Boost Potion from Progress Boxes');
    addNewsType(0, 0, 0, 0, 'CARDS');
    addNewsType(128, 18, 2, 14548736, 'When I activate a Card');
    addNewsType(129, 18, 4, 16711680, 'When a Card is deactivated');
    addNewsType(130, 18, 2, 14548736, 'When I trade a Card for Legendary Boxes');
    addNewsType(0, 0, 0, 0, 'CAREER');
    addNewsType(131, 0, 2, 39423, 'When I gain \'Idler\' Career EXP');
    addNewsType(132, 6, 2, 39423, 'When I gain \'Gardener\' Career EXP');
    addNewsType(133, 7, 2, 39423, 'When I gain \'Fighter\' Career EXP');
    addNewsType(134, 7, 2, 39423, 'When I gain \'Item Maker\' Career EXP');
    addNewsType(135, 8, 2, 39423, 'When I gain \'Button Basher\' Career EXP');
    addNewsType(136, 10, 2, 39423, 'When I gain \'Arcade Player\' Career EXP');
    addNewsType(137, 11, 2, 39423, 'When I gain \'Racer\' Career EXP');
    addNewsType(138, 12, 2, 39423, 'When I gain \'Card Player\' Career EXP');
    addNewsType(139, 13, 2, 39423, 'When I gain \'Gem Trader\' Career EXP');
    addNewsType(140, 14, 2, 39423, 'When I gain \'Adventurer\' Career EXP');
    addNewsType(141, 0, 2, 39423, 'When I gain \'Pet Trainer\' Career EXP');
    addNewsType(142, 22, 2, 39423, 'When I gain \'Fisher\' Career EXP');
    addNewsType(143, 0, 1, 39423, 'When I receive Blessing Bonus');
    addNewsType(144, 0, 3, 16776960, 'When a Career levels up');
    addNewsType(145, 0, 4, 16711680, 'When a Career is deactivated');
    addNewsType(158, 0, 4, 16711680, 'When a Career runs out of blessing time');
    addNewsType(0, 0, 0, 0, 'PET');
    addNewsType(146, 0, 2, 16737792, 'When my Pet gains Fullness');
    addNewsType(147, 0, 2, 16737792, 'When my Pet gains Health');
    addNewsType(148, 0, 2, 16737792, 'When my Pet gains Mana');
    addNewsType(149, 0, 3, 13382400, 'When my Pet loses Fullness');
    addNewsType(150, 0, 3, 13382400, 'When my Pet loses Health');
    addNewsType(151, 0, 3, 16711680, 'When my Pet\'s Fullness is low');
    addNewsType(152, 0, 4, 16711680, 'When my Pet\'s Health is low');
    addNewsType(153, 0, 4, 16711680, 'When my Pet dies');
    addNewsType(154, 0, 3, 16776960, 'When I use my Pet\'s Mad Skillz');
    addNewsType(173, 0, 2, 16711680, 'Overfeeding warning');
    addNewsType(0, 0, 0, 0, 'SIMULATION CYBORG');
    addNewsType(174, 0, 3, 12303359, 'When you gain Cyborg Points');
    addNewsType(175, 0, 3, 12303359, 'When Cyborg finishes an action');
    addNewsType(176, 0, 4, 16711680, 'When Simulation Cyborg is paused');
    addNewsType(177, 0, 4, 16776960, 'When Simulation Cyborg continues working');
    addNewsType(178, 0, 4, 16711680, 'When Simulation Cyborg finishes working');
    addNewsType(179, 0, 2, 12303359, 'When Simulation Cyborg gains EXP');
    addNewsType(180, 0, 3, 16776960, 'When Simulation Cyborg levels up');
    addNewsType(0, 0, 0, 0, 'TECHNICAL LIGHTS');
    addNewsType(160, 0, 4, 13421823, 'Variable Tracking');
    _root.selectT = 1;
    _root.specialShopPage = 1;
    _root.invTab = 0;
    _root.stadiumBetCoin = 250000;
    _root.stadiumBetToken = 0;
    _root.fishPopPage = 0;
    _root.invTab = 0;
    _root.questScreenPage = 1;
    _root.shopScreenPage = 1;
    _root.achViewType = 2;
    _root.achViewPage = 1;
    _root.achMode = 'All';
    if (_root.saveid <= 3) {
      if (_root.save.compatible == undefined || _root.save.compatible < 3) {
        _root.gotoAndStop(14);
      }
    }
    _root._quality = _root.saveGlobal.graphicQuality;
    if (_root.save.newbieSet3 != true) {
      _root.save.newbieSet3 = true;
      _root.getArenaWeapon(1, 'Stick', 101, false, 30, 13, 0, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Stick', 'A free weapon to help you with your adventures! It\'s just a stick, but it\'s better than nothing, right?');
      _root.getArenaArmor(1, 'Hat', 101, 0, 0, 10, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Hat', '');
      _root.getArenaArmor(1, 'Shirt', 101, 0, 0, 10, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Shirt', '');
      _root.getArenaArmor(1, 'Gloves', 101, 0, 0, 10, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Gloves', '');
      _root.getArenaArmor(1, 'Pants', 101, 0, 0, 10, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Pants', '');
      _root.getArenaArmor(1, 'Shoes', 101, 0, 0, 10, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Newbie Shoes', '');
      _root.getArenaEnhancer('Weapon Attack Enhancer', 3, 15, 0, 100, '', '', '', 0, 150, 0, Infinity, 'Weapon Attack Rock Lv. 3', 'A free enhancer for you! To use an enhancer, just click it and then click the item you want to enhance! You cannot enhance items you are equipping, so unequip them first.');
    }
    waitTime = 0;
    onEnterFrame = function () {
      if (_root.canPlay == true && _root.contributorRC > -100000 && (_root.kongregate_username != undefined && _root.kongregate_username != 'Kongregate Username' && _root.adminMode != true || _root.kongregate_username == 'Kongregate Username' && _root.adminMode == true || _root.kongregate_username == undefined && _root.adminMode == true)) {
        waitTime += 1;
      } else {
        if (_root.kongregate_username != undefined && _root.kongregate_username != 'Kongregate Username' && _root.adminMode == true) {
          _root.showPopup('Notice', 'Test version savefiles are not compatible with the live version.');
        } else {
          if (_root.canPlay == false) {
            _root.showPopup('Notice', 'You have been banned from Anti-Idle: The Game for the following reason:\n' + _root.banReason);
            _root.kongregate.stats.submit('Awesome', 1);
          } else {
            if (_root.contributorRC > -100000) {
              _root.showPopup('Notice', 'Please make sure you are playing this game on Kongregate.');
            } else {
              _root.showPopup('Notice', 'You have been banned from Anti-Idle: The Game.');
              _root.kongregate.stats.submit('Awesome', 1);
            }
          }
        }
      }
      if (waitTime > 5) {
        _root.nextFrame();
      }
    };

  }

  frame 13 {
  }

  frame 13 {
    function dispAsc() {
      elapsed_days = Math.floor(_root.save.ascendPlayTime / 86400);
      remaining = _root.save.ascendPlayTime - elapsed_days * 86400;
      if (_root.saveid >= 20 && !isNaN(_root.save.challengeTime)) {
        elapsed_days = Math.floor(_root.save.challengeTime / 86400);
        remaining = _root.save.challengeTime - elapsed_days * 86400;
      }
      elapsed_hours = Math.floor(remaining / 3600);
      remaining -= elapsed_hours * 3600;
      elapsed_minutes = Math.floor(remaining / 60);
      remaining -= elapsed_minutes * 60;
      elapsed_seconds = Math.floor(remaining / 1);
      remaining -= elapsed_seconds * 1;
      if (elapsed_hours < 10) {
        elapsed_hours = '0' + elapsed_hours;
      }
      if (elapsed_minutes < 10) {
        elapsed_minutes = '0' + elapsed_minutes;
      }
      if (elapsed_seconds < 10) {
        elapsed_seconds = '0' + elapsed_seconds;
      }
      _root.topBar.ascentDisp.ascentText.text = elapsed_days + 'd + ' + elapsed_hours + ':' + elapsed_minutes + ':' + elapsed_seconds;
    }

    function killPet() {
      if (_root.save.petExist != 0) {
        _root.save.deadPetName = _root.save.petName;
        _root.save.deadPetStat[1] = _root.save.petStat[1];
        _root.save.deadPetStat[2] = _root.save.petStat[2];
        _root.save.deadPetStat[3] = _root.save.petStat[3];
        _root.save.deadPetStat[4] = _root.save.petStat[4];
        _root.save.deadPetStat[5] = _root.save.petStat[5];
        _root.save.deadPetStat[6] = _root.save.petStat[6];
        _root.save.deadPetStat[7] = _root.save.petStat[7];
        _root.save.deadPetStat[8] = _root.save.petStat[8];
        _root.save.petExist = 0;
        _root.save.petHealth = 0;
        _root.save.petMana = 0;
        _root.save.petStat[1] = 0;
        _root.save.petStat[2] = 0;
        _root.save.petStat[3] = 0;
        _root.save.petStat[4] = 0;
        _root.save.petStat[5] = 0;
        _root.save.petStat[6] = 0;
        _root.save.petStat[7] = 0;
        _root.save.petStat[8] = 0;
        _root.dispNews(153, 'Your pet has died.');
      }
    }

    function checkPet() {
      if (_root.save.petExist == 1) {
        _root.petTotalFeed = 0;
        i = 1;
        while (i <= 8) {
          _root.petTotalFeed += _root.save.petStat[i];
          ++i;
        }
        if (_root.save.petBestLevel < Math.floor(_root.petTotalFeed / 8)) {
          _root.save.petBestLevel = Math.floor(_root.petTotalFeed / 8);
        }
        if (_root.save.petFullness > 0) {
          _root.save.petFullness -= 1;
          _root.dispNews(149, 'Pet Fullness decreased! (-1) / Remaining: ' + _root.save.petFullness);
          _root.gainCareerEXP(11, _root.save.petFullness * 25, true);
          if (_root.cursoridle < 300) {
            pl = Math.floor((_root.save.petStat[1] + _root.save.petStat[2] + _root.save.petStat[3] + _root.save.petStat[4] + _root.save.petStat[5] + _root.save.petStat[6] + _root.save.petStat[7] + _root.save.petStat[8]) / 8);
            petMaxMana = Math.floor((100 + Math.min(pl, 100) + Math.max(Math.floor(pl * (pl - 100) / 25), 0)) * Math.max(1, pl / 10 - 10));
            petMaxHealth = 100 + Math.min(pl, 100) + Math.max(Math.floor(pl * (pl - 100) / 25), 0);
            if (_root.save.petMana < petMaxMana) {
              _root.save.petMana += 1;
              _root.dispNews(148, 'Pet Mana increased! (+1) / Current: ' + _root.save.petMana);
              if (Math.random() < _root.curCareerLevel[11] / 200) {
                _root.save.petMana += 5;
                _root.dispNews(148, 'Pet Mana increased! (+5) / Current: ' + _root.save.petMana);
              }
            }
          }
          if (_root.save.petFullness > 90 && _root.save.petHealth < petMaxHealth) {
            _root.save.petHealth += 1;
            _root.dispNews(147, 'Pet Health increased! (+1) / Current: ' + _root.save.petHealth);
          } else {
            if (_root.save.petFullness < 30) {
              _root.dispNews(151, 'Your pet is hungry. Feed it before its health drops.');
            }
          }
        } else {
          if (_root.save.petHealth > 0) {
            _root.save.petFullness = 0;
            if (_root.save.careerLevel[11] < 100 || Math.random() < 0.5) {
              _root.save.petHealth -= 1;
              _root.dispNews(150, 'Pet Health decreased! (-1) / Remaining: ' + _root.save.petHealth);
              _root.dispNews(152, 'Your pet is very hungry. Feed it before it dies.');
            }
          } else {}
        }
      } else {
        i = 1;
        while (i <= 8) {
          _root.save.petStat[i] = 0;
          ++i;
        }
      }
    }

    function checkCareer() {
      _root.curCareerLevel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.totalCareerLevel = 0;
      _root.careerActivated = 0;
      i = 1;
      while (i <= 16) {
        _root.totalCareerLevel += _root.save.careerLevel[i];
        if (_root.save.careerActive[i] > 0) {
          _root.careerActivated += 1;
          _root.curCareerLevel[i] = _root.save.careerLevel[i];
        }
        if (_root.save.careerBoost[i] > 0) {
          _root.curCareerLevel[i] = _root.save.careerLevel[i];
        }
        _root['careerLevel' + i] = _root.save.careerLevel[i];
        ++i;
      }
    }

    function checkBestiary() {
      _root.totalRing = 0;
      i = 1;
      while (i <= 22) {
        if (_root.save.arenaRingOwned[i] == 1) {
          _root.totalRing += 1;
        }
        ++i;
      }
      _root.bestiaryLevel = 0;
      _root.totalAllyTamed = 0;
      _root.totalAllyMastered = 0;
      _root.totalAllyMaxed = 0;
      _root.totalUltra = 0;
      _root.uniqueKill = 0;
      _root.uniqueUlt1 = 0;
      _root.uniqueUlt2 = 0;
      _root.uniqueUlt3 = 0;
      i = 1;
      while (i <= 500) {
        if (!isNaN(_root.save.arenaBestiary[i])) {
          _root.uniqueKill += 1;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt1[i])) {
          _root.uniqueUlt1 += 1;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt2[i])) {
          _root.uniqueUlt2 += 1;
        }
        if (!isNaN(_root.save.arenaBestiaryUlt3[i])) {
          _root.uniqueUlt3 += 1;
        }
        if (!isNaN(_root.save.arenaAllyEXP[i])) {
          _root.totalAllyTamed += 1;
          if (_root.save.arenaAllyEXP[i] >= 10000) {
            _root.totalAllyMastered += 1;
          }
          if (_root.save.arenaAllyUpgrade[i] >= 10) {
            _root.totalAllyMaxed += 1;
          }
          if (_root.save.arenaAllyUpgrade[i] == 15) {
            _root.totalUltra += 1;
          }
        }
        if (!isNaN(_root.save.arenaBestiary[i])) {
          if (_root.save.arenaBestiary[i] >= 100000) {
            _root.bestiaryLevel += 6;
          } else {
            if (_root.save.arenaBestiary[i] >= 10000) {
              _root.bestiaryLevel += 5;
            } else {
              if (_root.save.arenaBestiary[i] >= 1000) {
                _root.bestiaryLevel += 4;
              } else {
                if (_root.save.arenaBestiary[i] >= 100) {
                  _root.bestiaryLevel += 3;
                } else {
                  if (_root.save.arenaBestiary[i] >= 10) {
                    _root.bestiaryLevel += 2;
                  } else {
                    if (_root.save.arenaBestiary[i] >= 1) {
                      _root.bestiaryLevel += 1;
                    }
                  }
                }
              }
            }
          }
        }
        ++i;
      }
      if (_root.saveid == 26 && _root.totalAllyTamed >= 200) {
        _root.clearChallenge();
      }
    }

    function incDt() {
      _root.summonCount += 1;
      _root.antiLag += 1;
    }

    function incDt2() {
      _root.summonCount += 1;
      _root.antiLag2 += 1;
    }

    function trackZoneKill() {
      _root.treasureHunterKill = _root.save.arenaBestiary[240];
      _root.crystalKill = _root.save.arenaBestiary[322];
      if (isNaN(_root.crystalKill)) {
        _root.crystalKill = 0;
      }
      if (!isNaN(_root.save.arenaBestiary[435])) {
        _root.crystalKill += _root.save.arenaBestiary[435];
      }
      if (!isNaN(_root.save.arenaBestiaryExtra[322])) {
        _root.crystalKill -= _root.save.arenaBestiaryExtra[322];
      }
      if (!isNaN(_root.save.arenaBestiaryExtra[435])) {
        _root.crystalKill -= _root.save.arenaBestiaryExtra[435];
      }
      if (!isNaN(_root.save.arenaBestiaryExtra[240])) {
        _root.treasureHunterKill -= _root.save.arenaBestiaryExtra[240];
      }
      if (isNaN(_root.treasureHunterKill)) {
        _root.treasureHunterKill = 0;
      }
      i = 1;
      while (i <= 70) {
        _root['zoneKill' + i] = _root.save.arenaZoneKill[i];
        ++i;
      }
    }

    function fixStuff() {
      if (isNaN(_root.save.currentExp) || isNaN(_root.save.totalExp)) {
        _root.save.currentExp = 0;
        _root.save.totalExp = 0;
        _root.save.level = 1;
      }
      if (isNaN(_root.save.arenaExp)) {
        _root.save.arenaExp = 0;
      }
      if (isNaN(_root.save.coin)) {
        _root.save.coin = 0;
      }
      if (isNaN(_root.save.greenCoin)) {
        _root.save.greenCoin = 0;
      }
      if (isNaN(_root.save.blueCoin)) {
        _root.save.blueCoin = 0;
      }
    }

    function calcReqExp() {
      _root.requiredExp = _root.save.level * _root.save.level * 10 + 10;
      if (_root.save.gDifficulty == 3) {
        _root.requiredExp = Math.floor(_root.requiredExp * 4);
        if (_root.save.level == 8999) {
          if (_root.save.gOldAscension == false) {
            _root.requiredExp = 10000000000000.0 - _root.save.totalExp;
            if (_root.save.banned >= 1000) {
              _root.requiredExp += 25000000000000.0;
            } else {
              if (_root.save.banned >= 800) {
                _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
              } else {
                if (_root.save.banned >= 600) {
                  _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                } else {
                  if (_root.save.banned >= 400) {
                    _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                  } else {
                    if (_root.save.banned >= 200) {
                      _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                    } else {
                      if (_root.save.banned >= 100) {
                        _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.save.level == 9000) {
          _root.requiredExp = 12000000000000.0 - _root.save.totalExp;
          if (_root.save.gOldAscension == false) {
            if (_root.save.banned >= 1000) {
              _root.requiredExp += 25000000000000.0;
            } else {
              if (_root.save.banned >= 800) {
                _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
              } else {
                if (_root.save.banned >= 600) {
                  _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                } else {
                  if (_root.save.banned >= 400) {
                    _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                  } else {
                    if (_root.save.banned >= 200) {
                      _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                    } else {
                      if (_root.save.banned >= 100) {
                        _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        if (_root.save.gDifficulty == 2) {
          _root.requiredExp = Math.floor(_root.requiredExp * 2);
          if (_root.save.level == 8999) {
            if (_root.save.gOldAscension == false) {
              _root.requiredExp = 5000000000000.0 - _root.save.totalExp;
              if (_root.save.banned >= 1000) {
                _root.requiredExp += 25000000000000.0;
              } else {
                if (_root.save.banned >= 800) {
                  _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
                } else {
                  if (_root.save.banned >= 600) {
                    _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                  } else {
                    if (_root.save.banned >= 400) {
                      _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                    } else {
                      if (_root.save.banned >= 200) {
                        _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                      } else {
                        if (_root.save.banned >= 100) {
                          _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (_root.save.level == 9000) {
            _root.requiredExp = 6000000000000.0 - _root.save.totalExp;
            if (_root.save.gOldAscension == false) {
              if (_root.save.banned >= 1000) {
                _root.requiredExp += 25000000000000.0;
              } else {
                if (_root.save.banned >= 800) {
                  _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
                } else {
                  if (_root.save.banned >= 600) {
                    _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                  } else {
                    if (_root.save.banned >= 400) {
                      _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                    } else {
                      if (_root.save.banned >= 200) {
                        _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                      } else {
                        if (_root.save.banned >= 100) {
                          _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (_root.save.level == 8999) {
            _root.requiredExp = 2500000000000.0 - _root.save.totalExp;
            if (_root.save.gOldAscension == false) {
              if (_root.save.banned >= 1000) {
                _root.requiredExp += 25000000000000.0;
              } else {
                if (_root.save.banned >= 800) {
                  _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
                } else {
                  if (_root.save.banned >= 600) {
                    _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                  } else {
                    if (_root.save.banned >= 400) {
                      _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                    } else {
                      if (_root.save.banned >= 200) {
                        _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                      } else {
                        if (_root.save.banned >= 100) {
                          _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (_root.save.level == 9000) {
              _root.requiredExp = 3000000000000.0 - _root.save.totalExp;
              if (_root.save.gOldAscension == false) {
                if (_root.save.banned >= 1000) {
                  _root.requiredExp += 25000000000000.0;
                } else {
                  if (_root.save.banned >= 800) {
                    _root.requiredExp += 10000000000.0 * (_root.save.banned - 800) + 23000000000000.0;
                  } else {
                    if (_root.save.banned >= 600) {
                      _root.requiredExp += 20000000000.0 * (_root.save.banned - 600) + 19000000000000.0;
                    } else {
                      if (_root.save.banned >= 400) {
                        _root.requiredExp += 30000000000.0 * (_root.save.banned - 400) + 13000000000000.0;
                      } else {
                        if (_root.save.banned >= 200) {
                          _root.requiredExp += 40000000000.0 * (_root.save.banned - 200) + 5000000000000.0;
                        } else {
                          if (_root.save.banned >= 100) {
                            _root.requiredExp += 50000000000.0 * (_root.save.banned - 100);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (_root.save.level > 9002 || _root.save.level == 9002 && _root.save.totalExp < 999000000000000.0) {
        _root.save.level = 1;
        _root.save.currentExp = 0;
        _root.save.totalExp = 0;
        _root.save.bestLevel = 1;
      }
      if (_root.save.level == 9002) {
        _root.save.currentExp = 0;
        _root.save.totalExp = 999999999999999.0;
        _root.requiredExp = 1;
      } else {
        if (_root.save.level == 9001) {
          _root.requiredExp = 999999999999999.0 - _root.save.totalExp;
        }
      }
    }

    function checkLevel() {
      calcReqExp();
      lfrt = 0;
      lfrYC = 0;
      lfrGC = 0;
      lfrBC = 0;
      lfr = 1;
      while (lfr <= 1) {
        if (_root.save.currentExp >= _root.requiredExp && !isNaN(_root.save.currentExp) && _root.save.currentExp != Infinity && _root.save.level < 9002) {
          _root.save.level += 1;
          lfrt += 1;
          if (lfrt < 50 && _root.save.level < 8998) {
            lfr -= 1;
          }
          _root.save.totalExp += _root.requiredExp;
          _root.save.currentExp -= _root.requiredExp;
          if (_root.save.level == 9000) {
            _root.save.currentExp = Math.floor(_root.save.currentExp / 2);
          }
          if (_root.save.level == 9001) {
            _root.save.currentExp = Math.floor(_root.save.currentExp / 10);
          }
          lfrYC += 200 * _root.save.level;
          if (_root.save.level % 1000 == 0) {
            lfrBC += _root.save.level;
          } else {
            if (_root.save.level % 100 == 0) {
              lfrGC += 10 * _root.save.level;
            } else {
              lfrGC += 1 * _root.save.level;
            }
          }
          if (_root.save.showBanner != false) {
            if (_root.save.level % 1000 == 0 || _root.save.level == 9001 || _root.save.level == 9002) {
              _root.accomplishPop.targetX = 10;
              _root.accomplishPop.count = 0;
              _root.accomplishPop.gotoAndStop(3);
              _root.accomplishPop.lolMessage.text = 'You are now Lv. ' + _root.withComma(_root.save.level) + '! Congratulations!';
            }
          }
          if (_root.save.questType == 'Level Up') {
            _root.save.questCount += 1;
          }
        }
        ++lfr;
      }
      if (lfrt > 0) {
        if (_root.save.bestLevel < _root.save.level) {
          _root.save.bestLevel = _root.save.level;
        }
        if (_root.save.level == 8999) {
          _root.save.yoEpicFail = 25465;
          if (_root.save.gDifficulty >= 2) {
            _root.save.coin += _root.save.bankCoin;
            _root.save.greenCoin += _root.save.bankGreenCoin;
            _root.save.blueCoin += _root.save.bankBlueCoin;
            _root.save.bankCoin = 0;
            _root.save.bankGreenCoin = 0;
            _root.save.bankBlueCoin = 0;
            _root.save.featureBoostGen = true;
            _root.save.featureGarden = true;
            _root.save.featureBattleArena = true;
            _root.save.featureButtonMachine = true;
            _root.save.featureMoneyPrinter = true;
            _root.save.featureMysteryShop = true;
            _root.save.featureArcade = true;
            _root.save.featureStadium = true;
            _root.save.featureTukkunFCG = true;
            _root.save.featureLolMarket = true;
            _root.save.featureAwesomeAdventures = true;
            _root.save.featureFishing = true;
            _root.save.featureEpicLicense = true;
            _root.save.featureMiniGarden = true;
            _root.save.featureTravelingTicket = true;
            _root.save.featureSuperBattery = true;
            _root.save.featureArcadePack = true;
            _root.save.featureManualSprayer = true;
            _root.save.featureSpecialSprayer = true;
            _root.save.featureDoomSprayer = true;
            _root.save.featureEnergyToolbar = true;
            _root.save.featurePremiumSprayer = true;
            _root.save.boostMax = 1600;
          }
        } else {
          if (_root.save.level == 9000) {
            if (_root.save.banned < 100) {
              _root.gainWhiteCoinB(1000);
            }
          } else {
            if (_root.save.level == 9001) {
              if (_root.saveid >= 10 && _root.saveid <= 13) {
                if (isNaN(_root.saveGlobal.challengeTime[0]) || _root.saveGlobal.challengeTime[0] > Math.floor(_root.save.ascendPlayTime)) {
                  _root.saveGlobal.challengeTime[0] = Math.floor(_root.save.ascendPlayTime);
                  _root.saveGlobal.challengeAttempted[0] = true;
                  _root.saveGlobal.challengePerfect[0] = true;
                }
              }
              if (_root.save.speedRun9001 > Math.floor(_root.save.ascendPlayTime / 60)) {
                _root.save.speedRun9001 = Math.floor(_root.save.ascendPlayTime / 60);
              }
              _root.gainBlueCoin(Math.min(Math.floor(_root.finalExp / 200000000), 100000));
              if (_root.save.gOldAscension == true) {
                if (_root.save.gDifficulty == 3) {
                  _root.gainWhiteCoinB(500);
                } else {
                  if (_root.save.gDifficulty == 2) {
                    _root.gainWhiteCoinB(250);
                  } else {
                    if (_root.save.gDifficulty == 1) {
                      _root.gainWhiteCoinB(125);
                    }
                  }
                }
              } else {
                if (_root.save.gDifficulty == 3) {
                  _root.gainWhiteCoinB(1000);
                } else {
                  if (_root.save.gDifficulty == 2) {
                    _root.gainWhiteCoinB(500);
                  } else {
                    if (_root.save.gDifficulty == 1) {
                      _root.gainWhiteCoinB(250);
                    }
                  }
                }
              }
            } else {
              if (_root.save.level == 9002) {
                if (_root.save.speedRun9002 > Math.floor(_root.save.ascendPlayTime / 60)) {
                  _root.save.speedRun9002 = Math.floor(_root.save.ascendPlayTime / 60);
                }
                _root.save.count9002 += 1;
              }
            }
          }
        }
        _root.gainCoin(lfrYC, 39);
        if (lfrGC > 0) {
          _root.gainGreenCoinND(lfrGC);
        }
        if (lfrBC > 0) {
          _root.gainBlueCoin(lfrBC);
        }
        _root.gainBoost(100 * lfrt, 1);
        _root.dispNews(2, 'LEVEL UP! You are now Lv. ' + _root.withComma(_root.save.level) + '.');
        if (_root._quality != 'LOW') {
          _root.topBar.levelStar.levelAnim._alpha = 100;
        }
      }
      _root.finalExp = _root.save.currentExp + _root.save.totalExp;
      if (isNaN(_root.finalExp)) {
        _root.finalExp = 0;
      }
      if (_root.finalExp > 999999999999999.0) {
        _root.finalExp = 999999999999999.0;
      }
      if (_root.save.bestExp < _root.finalExp) {
        _root.save.bestExp = _root.finalExp;
      }
      if (_root.saveid == 23 && _root.save.level >= 3000) {
        _root.clearChallenge();
      } else {
        if (_root.saveid == 24 && _root.save.level >= 1337) {
          _root.clearChallenge();
        }
      }
    }

    function checkMini() {
      if (_root.save.featureMiniGarden == true || _root.save.autoHarvestTime > 0) {
        _root.mini1.gotoAndStop(1);
        plantedTrees = 0;
        readyTrees = 0;
        i = 1;
        while (i <= _root.save.gardenCapacity) {
          if (_root.save.gardenTrees[i] > 0 && _root.save.gardenPurchaseTime[i] + _root.save.gardenExpiryTime[i] - _root.systemtimenow > 0) {
            plantedTrees += 1;
            if (_root.save.gardenRecentTime[i] + _root.save.gardenHarvestTime[i] - _root.systemtimenow <= 0) {
              readyTrees += 1;
            }
          }
          ++i;
        }
        mini1.miniGardenText.text = readyTrees + ' / ' + plantedTrees;
        if (readyTrees > 0) {
          mini1.miniGardenText.textColor = 16776960;
          if (_root.save.autoHarvestTime > 0) {
            _root.harvestAllTree();
          }
        } else {
          if (plantedTrees == 0) {
            mini1.miniGardenText.textColor = 16711680;
          } else {
            mini1.miniGardenText.textColor = 10066329;
          }
        }
        if (readyTrees > 0) {
          if (mini1._alpha != 100) {
            mini1._alpha = 100;
          } else {
            mini1._alpha = 50;
          }
        } else {
          mini1._alpha = 30;
        }
      } else {
        mini1.gotoAndStop(2);
      }
      if (_root.save.featureSuperBattery == true) {
        mini2.gotoAndStop(1);
      } else {
        mini2.gotoAndStop(2);
      }
      if (_root.save.featureEnergyToolbar == true) {
        mini3.gotoAndStop(1);
        if (_root.save.awesomeEnergy > 0) {
          mini3._alpha = 100;
        } else {
          mini3._alpha = 30;
        }
        mini3.adventureText.text = _root.save.awesomeEnergy;
      } else {
        mini3.gotoAndStop(2);
      }
      if (_root.save.doubleExpTime > 0) {
        mini4.gotoAndStop(2);
        mini4.timeText.text = _root.convertMin(_root.save.doubleExpTime);
      } else {
        mini4.gotoAndStop(1);
      }
      if (_root.save.doubleCoinTime > 0) {
        mini5.gotoAndStop(2);
        mini5.timeText.text = _root.convertMin(_root.save.doubleCoinTime);
      } else {
        mini5.gotoAndStop(1);
      }
    }

    function dispStuff() {
      if (_root.save.featureTechnicalLight == true) {
        if (_root.tLight._currentframe != 2) {
          _root.tLight.gotoAndStop(2);
        }
        _root.tLight.t1.checkLight();
        _root.tLight.t2.checkLight();
        _root.tLight.t3.checkLight();
        _root.tLight.t4.checkLight();
        _root.tLight.t5.checkLight();
        _root.tLight.t6.checkLight();
        _root.tLight.t7.checkLight();
        _root.tLight.t8.checkLight();
        _root.tLight.t9.checkLight();
      } else {
        _root.tLight.gotoAndStop(3);
      }
      if (_root.topBar.titleDisp.titleText.text != _root.save.userTitle) {
        _root.topBar.titleDisp.titleText.text = _root.save.userTitle;
      }
      titleColor = _root.save.titlered * 65536 + _root.save.titlegreen * 256 + _root.save.titleblue;
      if (_root.topBar.titleDisp.titleText.textColor != titleColor) {
        _root.topBar.titleDisp.nameText.textColor = titleColor;
        _root.topBar.titleDisp.titleText.textColor = titleColor;
      }
      if (_root.saveid >= 10) {
        _root.dispAsc();
      }
    }

    function progressUp() {
      if (_root.progPercent < _root.save.progStore) {
        if (_root.save.idleMode == false || _root.idlerAppreciate == true || _root.saveid >= 10 && _root.saveid < 20) {
          if (_root.save.progSpeedManual > _root.save.progSpeedAuto) {
            progSpeed = _root.save.progSpeedManual;
          } else {
            progSpeed = _root.save.progSpeedAuto;
          }
        } else {
          progSpeed = _root.save.progSpeedAuto;
          if (_root.save.careerLevel[1] >= 100) {
            progSpeed += 30;
          }
          progSpeed += _root.curCareerLevel[1] * 0.6;
        }
        progSpeed *= 1 + Math.min(Math.floor(_root.save.totalStupidity / 50), 20) * 0.01;
        if (_root.save.permaBanPenalty[31] == 3) {
          progSpeed *= 1.25;
        } else {
          if (_root.save.permaBanPenalty[31] == 2) {
            progSpeed *= 1.15;
          } else {
            if (_root.save.permaBanPenalty[31] == 1) {
              progSpeed *= 1.1;
            }
          }
        }
        if (_root.save.rewardClaim < 5) {
          progSpeed *= 2.5;
        }
        if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
          progSpeed *= 0.8;
        } else {
          if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
            progSpeed *= 0.9;
          }
        }
        _root.progPercent += 0.02 * (_root.save.boost / 100) * (40 / _root.fps) * (progSpeed / 100);
        if (_root.save.rewardClaim < 5) {
          _root.progPercent += 20 / _root.fps;
        } else {
          if (_root.save.bestLevel < 35) {
            _root.progPercent += 0.125 * (_root.save.boost / 100) * (40 / _root.fps) * (progSpeed / 100);
          }
        }
      }
    }

    function depleteBoost() {
      ascendBonus = 100 * _root.save.banned;
      if (ascendBonus > 500) {
        ascendBonus = 500;
      }
      _root.boostMax = _root.save.boostMax + _root.save.boostZebra + ascendBonus;
      if (_root.saveid == 24) {
        _root.boostMax = 500;
      }
      _root.boostMin = 100;
      if (_root.boostMax < _root.boostMin + 1) {
        _root.boostMax = _root.boostMin + 1;
      }
      antFreq = 0.3;
      maxAnts = 50;
      if (_root.save.boost > _root.boostMax * 2.5) {
        _root.save.boost = _root.boostMax * 2.5;
      }
      if (_root.save.boost > _root.boostMax * 1.5) {
        antFreq *= 2 + (_root.save.boost - _root.boostMax) / 20 + (_root.save.boost - _root.boostMax * 1.5) / 5;
        maxAnts = Math.floor(maxAnts * (2 + (_root.save.boost - _root.boostMax) / 20 + (_root.save.boost - _root.boostMax * 1.5) / 5));
      } else {
        if (_root.save.boost > _root.boostMax) {
          antFreq *= 2 + (_root.save.boost - _root.boostMax) / 20;
          maxAnts = Math.floor(maxAnts * (2 + (_root.save.boost - _root.boostMax) / 20));
        } else {
          antFreq *= 1 + ((_root.save.boost - _root.boostMin) / (_root.boostMax - _root.boostMin)) * 0.5;
          maxAnts = Math.floor(maxAnts * (1 + ((_root.save.boost - _root.boostMin) / (_root.boostMax - _root.boostMin)) * 0.5));
        }
      }
      if (_root.save.featureSpecialSprayer == true) {
        maxAnts = Math.floor(maxAnts * 0.95);
      }
      if (_root.save.permaBanPenalty[9] == 3) {
        maxAnts = Math.floor(maxAnts * 0.8);
      } else {
        if (_root.save.permaBanPenalty[9] == 2) {
          maxAnts = Math.floor(maxAnts * 0.88);
        } else {
          if (_root.save.permaBanPenalty[9] == 1) {
            maxAnts = Math.floor(maxAnts * 0.92);
          }
        }
      }
      if (_root.save.permaBanPenalty[34] == 3) {
        antFreq *= 0.5;
      } else {
        if (_root.save.permaBanPenalty[34] == 2) {
          antFreq *= 0.7;
        } else {
          if (_root.save.permaBanPenalty[34] == 1) {
            antFreq *= 0.8;
          }
        }
      }
      if (maxAnts > 60000) {
        maxAnts = 60000;
      }
      if (maxAnts < 0) {
        maxAnts = 0;
      }
      if (_root.save.boost <= _root.boostMin) {
        antFreq = 0;
        maxAnts = 0;
        _root.save.boost = _root.boostMin;
      }
      if (_root.save.ants < maxAnts && _root.sprayCooldown1 < 165 && _root.sprayCooldown2 < 540) {
        _root.save.ants += Math.ceil(Math.random() * maxAnts * antFreq / 100);
      } else {
        if (_root.save.ants > maxAnts) {
          _root.save.ants -= Math.ceil((_root.save.ants - maxAnts) / 2);
        }
      }
      if (_root.save.boostFreeze > 3600) {
        _root.save.boostFreeze = 3600;
      }
      if (_root.save.boostFreeze > 0 && _root.save.ants > 0) {
        _root.save.boostFreeze -= 1;
      } else {
        if (_root.save.boost < _root.boostMax * 1.5 || _root.save.ants > 0) {
          _root.save.boost -= _root.save.ants / 600;
        }
        _root.save.boostProg = _root.save.boost;
        _root.save.boostExp = _root.save.boost;
        _root.save.boostCoin = _root.save.boost;
      }
      if (_root.save.boost > 500 && _root.saveid == 24) {
        _root.save.boost = 500;
      }
      if (_root.save.boostZebra > 300) {
        _root.save.boostZebra = 300;
      }
      if (_root.save.refundCooldown > 0) {
        _root.save.refundCooldown -= 1;
      }
      if (_root.save.restTime > 0) {
        _root.save.restTime -= 1;
      }
      if (_root.save.doubleExpTime > 0) {
        _root.save.doubleExpTime -= 1;
        if (_root.save.doubleExpTime <= 0) {
          _root.dispNews(129, '1.5x EXP is deactivated.');
        }
      }
      if (_root.save.doubleCoinTime > 0) {
        _root.save.doubleCoinTime -= 1;
        if (_root.save.doubleCoinTime <= 0) {
          _root.dispNews(129, '1.5x Coin is deactivated.');
        }
      }
      if (_root.save.rewardBotTime > 0) {
        _root.save.rewardBotTime -= 1;
        if (_root.save.rewardBotTime >= 3 && _root.save.rewardBotTime < 4) {
          _root.dispNews(129, 'Idlebot is deactivated.');
        }
      }
      if (_root.save.autoHarvestTime > 0) {
        _root.save.autoHarvestTime -= 1;
        if (_root.save.autoHarvestTime >= 3 && _root.save.autoHarvestTime < 4) {
          _root.dispNews(129, 'Autoharvest is deactivated.');
        }
      }
      if (_root.save.eliteButtonTime > 0) {
        _root.save.eliteButtonTime -= 1;
        if (_root.save.eliteButtonTime <= 0) {
          _root.dispNews(129, 'Invincibility Stars is deactivated.');
        }
      }
      if (_root.save.batteryChargerTime > 0) {
        _root.save.batteryChargerTime -= 1;
        if (_root.save.batteryChargerTime >= 3 && _root.save.batteryChargerTime < 4) {
          _root.dispNews(129, 'Battery Charger is deactivated.');
        }
      }
      if (_root.save.stadiumProTime > 0) {
        _root.save.stadiumProTime -= 1;
        if (_root.save.stadiumProTime <= 0) {
          _root.dispNews(129, 'Stadium Pro is deactivated.');
        }
      }
      if (_root.save.powerUserTime > 0) {
        _root.save.powerUserTime -= 1;
        if (_root.save.powerUserTime <= 0) {
          _root.dispNews(129, 'FCG Power User is deactivated.');
        }
      }
      if (_root.save.demandMasterTime > 0) {
        _root.save.demandMasterTime -= 1;
        if (_root.save.demandMasterTime <= 0) {
          _root.dispNews(129, 'Demand Master is deactivated.');
        }
      }
      if (_root.save.quickAdventuresTime > 0) {
        _root.save.quickAdventuresTime -= 1;
        if (_root.save.quickAdventuresTime <= 0) {
          _root.dispNews(129, 'Quick Adventures is deactivated.');
        }
      }
      if (_root.save.eliteFisherTime > 0) {
        _root.save.eliteFisherTime -= 1;
        if (_root.save.eliteFisherTime <= 0) {
          _root.dispNews(129, 'Elite Fisher is deactivated.');
        }
      }
      if (_root.save.noAntsTime > 0) {
        _root.save.noAntsTime -= 1;
        if (_root.save.noAntsTime >= 3 && _root.save.noAntsTime < 4) {
          _root.dispNews(129, 'Automatic Ant Spray is deactivated.');
        }
      }
      if (_root.save.doubleQuestTime > 0) {
        _root.save.doubleQuestTime -= 1;
        if (_root.save.doubleQuestTime <= 0) {
          _root.dispNews(129, '2x Random Quest Reward is deactivated.');
        }
      }
    }

    function lagExp() {
      if (_root.save.expLag > 0) {
        _root.save.currentExp += Math.ceil(_root.save.expLag / 1.5);
        _root.save.expLag -= Math.ceil(_root.save.expLag / 1.5);
      }
      if (_root.save.coinLag > 0) {
        _root.save.coin += Math.ceil(_root.save.coinLag / 1.5);
        _root.save.coinLag -= Math.ceil(_root.save.coinLag / 1.5);
      }
    }

    function checkPrinter() {
      moneyToPrint = Math.floor(((_root.save.printerLevel + 25) * Math.pow(_root.save.level, 0.65) * 0.63 * 10 + 4560) * (100 + _root.save.printerLevel) / 100);
      moneyToPrint = Math.round(moneyToPrint / 125) * 500;
      printSpeed = _root.save.printerCharge * 0.04 / _root.fps;
      if (_root.save.permaBanPenalty[4] == 3) {
        moneyToPrint = Math.round(moneyToPrint * 2);
      } else {
        if (_root.save.permaBanPenalty[4] == 2) {
          moneyToPrint = Math.round(moneyToPrint * 1.6);
        } else {
          if (_root.save.permaBanPenalty[4] == 1) {
            moneyToPrint = Math.round(moneyToPrint * 1.4);
          }
        }
      }
      _root.printPercent += printSpeed;
      if (_root.printPercent >= 100) {
        _root.printMoney(moneyToPrint);
      }
    }

    function checkExpiry() {
      expireCount = 0;
      firstExpire = 0;
      i = 1;
      while (i <= _root.save.gardenCapacity) {
        if (_root.save.gardenTrees[i] > 0) {
          if (_root.save.gardenPurchaseTime[i] + _root.save.gardenExpiryTime[i] - _root.systemtimenow < 0) {
            _root.save.gardenTrees[i] = 0;
            expireCount += 1;
            if (expireCount == 1) {
              firstExpire = i;
            }
          }
        }
        ++i;
      }
      if (expireCount >= 3) {
        _root.dispNews(20, 'Tree #' + firstExpire + ' and ' + (expireCount - 1) + ' others expired.');
      } else {
        if (expireCount == 2) {
          _root.dispNews(20, 'Tree #' + firstExpire + ' and 1 other expired.');
        } else {
          if (expireCount == 1) {
            _root.dispNews(20, 'Tree #' + firstExpire + ' expired.');
          }
        }
      }
    }

    function updateMarket() {
      if (_root.save.featureLolMarket == true) {
        _root.dispNews(107, 'LolMarket prices have changed.');
        i = 1;
        while (i <= 10) {
          if (_root.save.lolDemand[i] > 100) {
            _root.save.lolDemand[i] = 100;
          } else {
            if (_root.save.lolDemand[i] < -100) {
              _root.save.lolDemand[i] = -100;
            }
          }
          _root.save.lolPrice[i] += _root.save.lolDemand[i];
          _root.save.lolDemand[i] += Math.round((Math.random() - Math.random()) * (2.5 + i / 4));
          if (_root.save.lolPrice[i] < 1000 * i) {
            _root.save.lolDemand[i] += i;
          } else {
            if (_root.save.lolPrice[i] < 1250 * i) {
              _root.save.lolDemand[i] += 1;
            } else {
              if (_root.save.lolPrice[i] > 2000 * i) {
                _root.save.lolDemand[i] -= i;
              } else {
                if (_root.save.lolPrice[i] > 1750 * i) {
                  _root.save.lolDemand[i] -= 1;
                }
              }
            }
          }
          if (_root.save.lolPrice[i] < 450 * i) {
            _root.save.lolPrice[i] = 450 * i;
          } else {
            if (_root.save.lolPrice[i] > 2550 * i) {
              _root.save.lolPrice[i] = 2550 * i;
            }
          }
          if (_root.save.demandMasterTime > 0 && Math.random() < 0.4) {
            if (_root.save.lolGems[i] >= Math.ceil(_root.save.lolCapacity / 2) && _root.save.lolDemand[i] < 15) {
              _root.save.lolDemand[i] += 1;
            } else {
              if (_root.save.lolGems[i] < Math.ceil(_root.save.lolCapacity / 2) && _root.save.lolDemand[i] > -15) {
                _root.save.lolDemand[i] -= 1;
              }
            }
          }
          if (_root.save.careerLevel[9] >= 100 && Math.random() < 0.1) {
            if (_root.save.lolGems[i] >= Math.ceil(_root.save.lolCapacity / 2) && _root.save.lolDemand[i] < 20) {
              _root.save.lolDemand[i] += 2;
            } else {
              if (_root.save.lolGems[i] < Math.ceil(_root.save.lolCapacity / 2) && _root.save.lolDemand[i] > -20) {
                _root.save.lolDemand[i] -= 2;
              }
            }
          }
          if (Math.random() < 0.15) {
            if (_root.save.lolGems[i] >= Math.ceil(_root.save.lolCapacity / 2)) {
              _root.save.lolDemand[i] += 1;
            } else {
              if (_root.save.lolGems[i] < Math.ceil(_root.save.lolCapacity / 2)) {
                _root.save.lolDemand[i] -= 1;
              }
            }
          }
          if (_root.save.lolDemand[i] > 30) {
            _root.save.lolDemand[i] -= Math.ceil(i / 2) + 1;
          } else {
            if (_root.save.lolDemand[i] < -30) {
              _root.save.lolDemand[i] += Math.ceil(i / 2) + 1;
            }
          }
          if (_root.save.lolDemand[i] > 40) {
            _root.save.lolDemand[i] -= i;
          } else {
            if (_root.save.lolDemand[i] < -40) {
              _root.save.lolDemand[i] += i;
            }
          }
          ++i;
        }
      }
    }

    function updateTip() {
      pText = '';
      pColor = 13421772;
      if (_root.save.level >= 5 && _root.save.coin >= 2000 && _root.save.featureBoostGen != true) {
        pText = 'You can now buy Boost Generator in the Feature Shop!';
        pColor = 10092288;
      } else {
        if (_root.save.level >= 12 && _root.save.coin >= 10000 && _root.save.featureGarden != true) {
          pText = 'You can now buy Garden in the Feature Shop!';
          pColor = 10092288;
        } else {
          if (_root.save.level >= 25 && _root.save.coin >= 50000 && _root.save.featureBattleArena != true) {
            pText = 'You can now buy Battle Arena in the Feature Shop!';
            pColor = 10092288;
          } else {
            if (_root.save.level >= 40 && _root.save.coin >= 150000 && _root.save.featureButtonMachine != true) {
              pText = 'You can now buy Button Machine in the Feature Shop!';
              pColor = 10092288;
            } else {
              if (_root.save.level >= 60 && _root.save.coin >= 300000 && _root.save.featureMoneyPrinter != true) {
                pText = 'You can now buy Money Printer in the Feature Shop!';
                pColor = 10092288;
              } else {
                if (_root.save.level >= 80 && _root.save.coin >= 750000 && _root.save.featureArcade != true && Math.random() < 0.2) {
                  pText = 'You can now buy Arcade in the Feature Shop!';
                  pColor = 10092288;
                } else {
                  if (_root.save.level >= 180 && _root.save.coin >= 3000000 && _root.save.featureStadium != true && Math.random() < 0.2) {
                    pText = 'You can now buy Stadium in the Feature Shop!';
                    pColor = 10092288;
                  } else {
                    if (_root.save.level >= 300 && _root.save.coin >= 10000000 && _root.save.featureTukkunFCG != true && Math.random() < 0.2) {
                      pText = 'You can now buy TukkunFCG in the Feature Shop!';
                      pColor = 10092288;
                    } else {
                      if (_root.save.level >= 400 && _root.save.coin >= 30000000 && _root.save.featureLolMarket != true && Math.random() < 0.2) {
                        pText = 'You can now buy LolMarket in the Feature Shop!';
                        pColor = 10092288;
                      } else {
                        if (_root.save.level >= 500 && _root.save.coin >= 75000000 && _root.save.featureAwesomeAdventures != true && Math.random() < 0.2) {
                          pText = 'You can now buy Awesome Adventures in the Feature Shop!';
                          pColor = 10092288;
                        } else {
                          if (_root.save.level >= 750 && _root.save.coin >= 750000000 && _root.save.featureFishing != true && Math.random() < 0.2) {
                            pText = 'You can now buy Fishing in the Feature Shop!';
                            pColor = 10092288;
                          } else {
                            if (_root.save.boost < _root.boostMax - 50 && _root.save.bestLevel >= 10) {
                              pText = 'Refill Boost to progress more quickly!';
                              pColor = 16776960;
                            } else {
                              if (_root.save.bestLevel >= 1000 && Math.random() < 0.2) {
                                noCareer = true;
                                i = 1;
                                while (i <= 12) {
                                  if (_root.save.careerActive[i] > 0 || _root.save.careerBoost[i] > 0) {
                                    noCareer = false;
                                  }
                                  ++i;
                                }
                                if (noCareer == true) {
                                  pText = 'Activate Careers to gain Career EXP and bonuses when using features!';
                                  pColor = 16776960;
                                }
                              } else {
                                if (_root.save.arenaRing == 0 && _root.save.arenaLevel >= 30 && Math.random() < 0.2) {
                                  pText = 'Equip a Ring in the Battle Arena to gain stat boosts!';
                                  pColor = 16776960;
                                } else {
                                  if (_root.save.arenaSP > 50 && _root.save.bannedB == 0 && Math.random() < 0.2) {
                                    pText = 'Spend your Skill Points in the Battle Arena to become stronger!';
                                    pColor = 16776960;
                                  } else {
                                    if (_root.save.arenaSP > 1600 && Math.random() < 0.2) {
                                      pText = 'Spend your Skill Points in the Battle Arena to become stronger!';
                                      pColor = 16776960;
                                    } else {
                                      if (_root.save.arenaPixel > 200000 && _root.save.arenaAttack < 2500 && _root.save.bannedB == 0) {
                                        pText = 'Spend Pixels to upgrade your stats in the Battle Arena!';
                                        pColor = 16776960;
                                      } else {
                                        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Newbie Stick' && _root.save.arenaLevel >= 10) {
                                          pText = 'You can craft new, more powerful equipment to use in the Battle Arena!';
                                          pColor = 16776960;
                                        } else {
                                          if (_root.save.dailyPending == true && Math.random() < 0.2) {
                                            pText = 'Press the Daily Bonus button near the Progress Bar to claim your Daily Bonus!';
                                            pColor = 16776960;
                                          } else {
                                            if (_root.save.questCount >= _root.save.questNeed && Math.random() < 0.2) {
                                              pText = 'Claim reward from your Random Quest to receive the next quest!';
                                              pColor = 16776960;
                                            } else {
                                              if (_root.save.gardenRecentTime[1] + _root.save.gardenHarvestTime[1] - _root.systemtimenow <= 0 && _root.save.featureGarden == true && Math.random() < 0.2) {
                                                pText = 'Don\'t forget to harvest trees in the Garden!';
                                                pColor = 16776960;
                                              } else {
                                                if (_root.save.ants >= 75 && _root.save.featureManualSprayer == true && _root.save.boost < 700 && Math.random() < 0.2) {
                                                  pText = 'Spray Ants. They eat your Boost!';
                                                  pColor = 16776960;
                                                } else {
                                                  if (_root.save.bestLevel >= 100 && Math.random() < 0.5) {
                                                    pText = 'Remember to backup your savefile frequently!';
                                                    pColor = 16750848;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (bottomTip.text != pText && pText != '') {
        bottomTip.text = pText;
        bottomTip.textColor = pColor;
        tipAlpha = 1300;
      }
    }

    if (_root.suc1 == true && _root.suc2 == true && _root.saveid < 10) {
      _root.actualKpaCount = 0;
      _root.actualShinyKpaCount = 0;
      i = 1;
      while (i <= _root.kpaCount) {
        if (_root.kpaOwned[i] == true) {
          _root.obtainAlly(500 + i);
          _root.actualKpaCount += 1;
          if (_root.save.arenaAllyEXP[500 + i] < 10000) {
            _root.save.arenaAllyEXP[500 + i] = 10000;
          }
        }
        if (_root.kpaShiny[i] == true) {
          _root.actualShinyKpaCount += 1;
          if (_root.save.arenaAllyEXP[500 + i] < 10000) {
            _root.save.arenaAllyEXP[500 + i] = 10000;
          }
          _root.save.arenaAllyUpgrade[500 + i] = 15;
        }
        ++i;
      }
    }
    _root.fishRodCount = 0;
    i = 1;
    while (i <= 10) {
      if (_root.save.fishRodUnlock[i] == 1) {
        _root.fishRodCount += 1;
      }
      if (_root.fishRodCount >= 7) {
        _root.save.fishRodUnlock[10] = 1;
      }
      ++i;
    }
    _root.stadiumHatUnlocked = 0;
    if (_root.save.stadiumRace >= 500 || _root.save.stadiumImpossibleRace >= 25) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumItem >= 500 || _root.save.stadiumImpossibleItem >= 25) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumDeathMatch >= 50 || _root.save.stadiumBestDeathMatch >= 1000) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.aceFinish > 0) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumBetCorrect >= 50) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumTokenMax >= 1000000) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumBunnyHat == true) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumH1 == true) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumH2 == true) {
      _root.stadiumHatUnlocked += 1;
    }
    if (_root.save.stadiumH3 == true) {
      _root.stadiumHatUnlocked += 1;
    }
    _root.totalUnrankedPower = 0;
    i = 1;
    while (i <= 40) {
      _root.totalUnrankedPower += _root.save.unrankedPower[i];
      ++i;
    }
    _root.totalRestEfficiency = 0;
    i = 1;
    while (i <= 10) {
      _root.totalRestEfficiency += _root.save.restEfficiency[i];
      ++i;
    }
    _root.organizeModule();
    if (_root.save.challengeInit != true) {
      _root.save.challengeInit = true;
      if (_root.saveid == 21) {
        _root.getArenaWeapon(100, 'Gun', 149, true, 280, 13, 0, 18, 8, 0, 1, 0, 1, 0, 0, 0, 'Coin', 'Critical Damage', '', 0, Infinity, false, false, false, false, false, 0, 'Golden Gun', '', true);
        _root.getArenaWeapon(125, 'Sword', 133, false, 585, 6, 30, 20, 0, 0, 1, 0, 1, 0, 1, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Hero Sword', '', true);
        _root.getArenaArmor(80, 'Hat', 109, 8, 0, 63, 14, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Dragonewyn Hat', '', true);
        _root.getArenaArmor(80, 'Shirt', 109, 8, 0, 82, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Dragonewyn Shirt', '', true);
        _root.getArenaArmor(80, 'Gloves', 109, 16, 0, 50, 14, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Dragonewyn Gloves', '', true);
        _root.getArenaArmor(80, 'Pants', 109, 8, 0, 82, 10, 0, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Dragonewyn Pants', '', true);
        _root.getArenaArmor(80, 'Shoes', 109, 8, 2, 50, 10, 4, 0, 1, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, false, false, false, false, false, 0, 'Dragonewyn Shoes', '', true);
        _root.getArenaAccessory(30, 'Pendant', 20, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 10, 756, '', '', '', 0, Infinity, true, false, false, false, 0, 'Collector\'s Pendant', 'This special item is awarded to help you during Challenge #1. Use it well, and don\'t accidentally sell it! Oh wait, you can\'t even sell it...', true);
      }
      if (_root.saveid == 25) {
        _root.save.featureTukkunFCG = true;
        _root.save.fcgLevel = 60;
        _root.save.fcgRewardedLevel = 60;
        _root.save.fcgCash = 60000;
        i = 1;
        while (i <= 248) {
          _root.save.fcgOwned[i] += 6;
          ++i;
        }
        _root.save.fcgChallenge5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        _root.save.fcgSeriousDeck = 13 + random(53);
      }
    }
    _root.towerCooldown = 30;
    i = 1;
    while (i <= _root.autoUpdateTime.length - 1) {
      if (_root.systemtimenow > _root.autoUpdateTime[i] && _root.save.au < i) {
        _root.save.au = i;
      }
      ++i;
    }
    _root.sprayCooldown1 = 165;
    _root.sprayCooldown2 = 540;
    _root.cursoridle = 0;
    _root.failGrammar = 0;
    if (_root.save.seppukuEnd > 0) {
      _root.gotoAndStop(17);
    }
    dispAlt = false;
    _root.totalEpicSkill = 0;
    i = 1;
    while (i <= 7) {
      _root.totalEpicSkill += _root.save.epicSkill[i];
      ++i;
    }
    _root._quality = _root.saveGlobal.graphicQuality;
    _root.alreadyopened = 0;
    _root.treeToPlant = -1;
    if (_root['preloadedFile' + _root.saveID] != true) {
      _root['preloadedFile' + _root.saveID] = true;
      _root.save.totalPlays += 1;
    }
    _root.quitDuration = Math.ceil((_root.systemtimenow - _root.save.lastPlayed) / 3600000);
    if (_root.quitDuration > 72) {
      _root.quitDuration = 72;
    }
    if (_root.saveid >= 10 || _root.save.offlineProgress != true) {
      i = 1;
      while (i <= _root.save.gardenCapacity) {
        _root.save.gardenRecentTime[i] += _root.systemtimenow - _root.save.lastPlayed;
        _root.save.gardenPurchaseTime[i] += _root.systemtimenow - _root.save.lastPlayed;
        ++i;
      }
      _root.save.gardenFertilizerAllow += _root.systemtimenow - _root.save.lastPlayed;
      _root.save.nextWizard += _root.systemtimenow - _root.save.lastPlayed;
      i = 1;
      while (i <= 3000) {
        if (_root.save.inventoryExist[i] == 1 && _root.save.inventoryExpiry[i] != Infinity) {
          _root.save.inventoryExpiry[i] += _root.systemtimenow - _root.save.lastPlayed;
        }
        ++i;
      }
    }
    if (_root.quitDuration > 0 && _root.saveid < 10 && _root.save.offlineProgress == true) {
      if (_root.save.curBusiness != 0) {
        businessOff = Math.floor((_root.systemtimenow - _root.save.lastPlayed) / 1000);
        if (businessOff < 0) {
          businessOff = 0;
        }
        if (businessOff > 86400) {
          businessOff = 86400;
        }
        _root.save.curBusinessOffline += businessOff;
      }
      if (quitDuration > 1 && _root.save.bestLevel >= 25) {
        _root.offlineProg.gotoAndStop(2);
        if (_root.save.awesomeEnergy < _root.save.awesomeMaxEnergy * 5) {
          _root.save.awesomeEnergy = _root.save.awesomeMaxEnergy * 5;
        }
        _root.save.fishFatigue -= 480 * (quitDuration - 1);
        if (_root.save.permaBanPenalty[22] == 3) {
          _root.save.fishFatigue -= 1200 * (quitDuration - 1);
        } else {
          if (_root.save.permaBanPenalty[22] == 2) {
            _root.save.fishFatigue -= 720 * (quitDuration - 1);
          } else {
            if (_root.save.permaBanPenalty[22] == 1) {
              _root.save.fishFatigue -= 480 * (quitDuration - 1);
            }
          }
        }
      }
      if (_root.save.petExist == 1) {
        petFullnessDrop = quitDuration * 2;
        if (petFullnessDrop > 72) {
          petFullnessDrop = 72;
        }
        if (_root.save.careerLevel[11] >= 100) {
          petFullnessDrop = Math.floor(petFullnessDrop / 2);
        }
        if (_root.save.petFullness >= petFullnessDrop) {
          _root.save.petFullness -= petFullnessDrop;
          _root.dispNews(149, 'Pet Fullness decreased! (-' + petFullnessDrop + ') / Remaining: ' + _root.save.petFullness);
        } else {
          _root.save.petHealth -= petFullnessDrop - _root.save.petFullness;
          _root.dispNews(149, 'Pet Fullness decreased! (-' + _root.save.petFullness + ') / Remaining: 0');
          _root.dispNews(150, 'Pet Health decreased! (-' + (petFullnessDrop - _root.save.petFullness) + ') / Remaining: ' + _root.save.petHealth);
          _root.save.petFullness = 0;
          if (_root.save.petHealth > 0) {
            _root.dispNews(152, 'Your pet is VERY hungry. Feed it before it dies.');
          } else {
            killPet();
          }
        }
      }
    }
    if (_root.save.longestQuit < quitDuration) {
      _root.save.longestQuit = quitDuration;
    }
    _root.save.lastPlayed = _root.systemtimenow;
    _root.progPercent = 0;
    _root.printPercent = 0;
    _root.mainSummonCount = 0;
    _root.mainAntiLag = 0;
    _root.souvenirLimit = [0, 500, 250, 250, 250, 100, 250, 1000, 4000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    _root.souvenirRC = 0;
    i = 1;
    while (i <= 24) {
      _root.souvenirRC += _root.save.souvenir[i];
      if (_root.save.souvenir[i] > _root.souvenirLimit[i]) {
        _root.souvenirRC = 0;
      }
      ++i;
    }
    i = 1;
    while (i <= 10) {
      if (isNaN(_root.save.mysteryBox[i])) {
        _root.save.mysteryBox[i] = 0;
      }
      ++i;
    }
    recentReputation = _root.save.awesomeReputation;
    delay1sec = 0;
    delay5min = 0;
    if (_root.save.bestLevel < _root.save.level) {
      _root.save.bestLevel = _root.save.level;
    }
    if (_root.save.boostPremium > 0) {
      _root.save.boostPremium -= 2;
    }
    checkCareer();
    fixStuff();
    checkLevel();
    depleteBoost();
    checkExpiry();
    updateMarket();
    trackZoneKill();
    checkBestiary();
    checkAchievements();
    checkFullInventory();
    submitAll();
    dispStuff();
    checkMini();
    tipAlpha = 1300;
    bottomTip.text = 'This game is created by Tukkun, exclusively for Kongregate';
    bottomTip.textColor = 13421772;
    _root.toBuyInsta = 0;
    onEnterFrame = function () {
      if (_root.topBar.levelStar.levelAnim._alpha > 0) {
        _root.topBar.levelStar.levelAnim._alpha -= 2;
      }
      if (Key.isDown(73) && Key.isDown(80)) {
        _root.toBuyInsta += 1;
        if (_root.toBuyInsta >= 40 && _root.toBuyInsta <= 600) {
          instaToBuy = _root.toBuyInsta * 2 - 80;
          instaMax = Math.floor(_root.save.coin / 55000000);
          if (instaToBuy > instaMax) {
            instaToBuy = instaMax;
          }
          _root.save.coin -= instaToBuy * 55000000;
          _root.progPercent += instaToBuy * 100;
        }
      } else {
        _root.toBuyInsta = 0;
      }
      _root.scrollingDir = 0;
      _root.annUpdate -= 1;
      if (_root.saveid >= 20) {
        if (_root.save.totalPlayTime >= 1800) {
          _root.saveGlobal.challengeAttempted[_root.saveid - 20] = true;
        }
        if (_root.save.challengeToken == Math.floor(_root.saveid * (_root.saveid + 1) * (_root.saveid - 7) * 156.4)) {
          if (isNaN(_root.save.challengeTime)) {
            _root.save.challengeTime = _root.save.totalPlayTime;
          }
          if (isNaN(_root.saveGlobal.challengeTime[_root.saveid - 20]) || _root.saveGlobal.challengeTime[_root.saveid - 20] > _root.save.challengeTime) {
            _root.saveGlobal.challengeTime[_root.saveid - 20] = _root.save.challengeTime;
          }
          if (_root.systemtimenow < _root.challengeDeadline) {
            _root.saveGlobal.challengePerfect[_root.saveid - 20] = true;
          }
        }
      }
      if (tipAlpha > 500) {
        tipAlpha -= 1;
      }
      bottomTip._alpha = tipAlpha / 10;
      if (_root.save.rewardBotTime > 0) {
        if (_root.cursoridle > 10 + _root.save.progStore * 0.01) {
          if (_root.progPercent < 50 && _root.save.rewardBotTime > 10) {
            _root.save.idleMode = false;
          } else {
            _root.save.idleMode = true;
          }
        } else {
          _root.save.idleMode = false;
        }
      }
      if (Key.isDown(112)) {
        _root.save.noHelp = 1337;
      }
      if (Key.isDown(17) && Key.isDown(83) && tempStatHold != true) {
        tempStatHold = true;
        if (_root.optionsScreen._currentframe != 5) {
          _root.optionsScreen.gotoAndStop(5);
        } else {
          _root.optionsScreen.gotoAndStop(1);
        }
        _root.actiondescription = '';
        _root.actiondescription = '';
      } else {
        if (!Key.isDown(83)) {
          tempStatHold = false;
        }
      }
      _root.save.boostExp = _root.save.boost;
      _root.save.boostCoin = _root.save.boost;
      if (_root.fcgCooldown > 0 && !isNaN(_root.fcgCooldown)) {
        _root.fcgCooldown -= 1 / _root.fps;
      }
      _root.save.progBoxNext -= 1 / _root.fps;
      if (_root.save.progBoxNext < 0) {
        _root.save.progBoxNext = 0;
      }
      _root.save.refillNext -= 1 / _root.fps;
      if (_root.save.refillNext < 0) {
        _root.save.refillNext = 0;
      }
      delay1sec += 1 / _root.fps;
      delay5min += 1 / _root.fps;
      fixStuff();
      checkLevel();
      progressUp();
      lagExp();
      if (_root.save.featureMoneyPrinter == true) {
        checkPrinter();
      }
      if (_root.save.coin > 999999999999999.0) {
        _root.save.coin = 999999999999999.0;
      }
      if (_root.save.greenCoin > 999999999999.0) {
        _root.save.greenCoin = 999999999999.0;
      }
      if (_root.save.blueCoin > 999999999) {
        _root.save.blueCoin = 999999999;
      }
      if (_root.save.whiteCoin > 999999) {
        _root.save.whiteCoin = 999999;
      }
      _root.topBar.coinText.text = _root.withComma(_root.save.coin);
      if (_root.save.coin >= 1000000000000.0) {
        _root.topBar.coinText.text = '    ' + _root.withComma(_root.save.coin);
      }
      _root.topBar.greenCoinText.text = _root.withComma(_root.save.greenCoin);
      if (_root.save.greenCoin >= 1000000000) {
        _root.topBar.greenCoinText.text = '    ' + _root.dispOverGC();
      }
      _root.topBar.blueCoinText.text = _root.withComma(_root.save.blueCoin);
      if (_root.save.blueCoin >= 1000000) {
        _root.topBar.blueCoinText.text = '    ' + _root.dispOverBC();
      }
      if (_root.save.noob > 4000) {
        _root.save.noob = 0;
      }
      if (_root.save.noob > 3000) {
        _root.save.noob = 3000;
      }
      if (_root.save.progSpeedAuto > 200) {
        _root.save.progSpeedAuto = 1;
      }
      if (_root.save.progSpeedManual > 500) {
        _root.save.progSpeedManual = 1;
      }
      if (_root.save.gardenPoint > 9999999) {
        _root.save.gardenPoint = 9999999;
        _root.save.gardenPointMax = 9999999;
      }
      bonusStatPct = _root.save.bannedB;
      if (bonusStatPct > 100) {
        bonusStatPct = 100;
      }
      if (isNaN(bonusStatPct)) {
        bonusStatPct = 0;
      }
      if (_root.save.arenaAttack > 90000 + bonusStatPct * 900) {
        _root.save.arenaAttack = 90000 + bonusStatPct * 900;
      }
      if (_root.save.arenaDefense > 90000 + bonusStatPct * 900) {
        _root.save.arenaDefense = 90000 + bonusStatPct * 900;
      }
      if (_root.save.arenaAccuracy > 18000 + bonusStatPct * 180) {
        _root.save.arenaAccuracy = 18000 + bonusStatPct * 180;
      }
      if (_root.save.arenaEvasion > 18000 + bonusStatPct * 180) {
        _root.save.arenaEvasion = 18000 + bonusStatPct * 180;
      }
      if (_root.save.arenaMaxHealth > 900000 + bonusStatPct * 9000) {
        _root.save.arenaMaxHealth = 900000 + bonusStatPct * 9000;
      }
      if (_root.save.arenaMaxMana > 360000 + bonusStatPct * 3600) {
        _root.save.arenaMaxMana = 360000 + bonusStatPct * 3600;
      }
      if (_root.save.arenaCrystal1 > 9999) {
        _root.save.arenaCrystal1 = 9999;
      }
      if (_root.save.arenaCrystal2 > 9999) {
        _root.save.arenaCrystal2 = 9999;
      }
      if (_root.save.arenaPixel > 999999999999.0) {
        _root.save.arenaPixel = 999999999999.0;
      }
      if (_root.save.arenaCraft > 999999999999.0) {
        _root.save.arenaCraft = 999999999999.0;
      }
      if (isNaN(_root.save.arenaPixel)) {
        _root.save.arenaPixel = 0;
      }
      if (isNaN(_root.save.arenaCraft)) {
        _root.save.arenaCraft = 0;
      }
      if (_root.save.arenaSuperiorCraft > 9999999) {
        _root.save.arenaSuperiorCraft = 9999999;
      }
      if (_root.save.arenaUnobtainium > 9999999) {
        _root.save.arenaUnobtainium = 9999999;
      }
      if (_root.save.arenaEnhancerFragment > 9999999) {
        _root.save.arenaEnhancerFragment = 9999999;
      }
      if (_root.save.arenaChaoticFragment > 9999999) {
        _root.save.arenaChaoticFragment = 9999999;
      }
      if (_root.save.arenaProofTraining > 9999999) {
        _root.save.arenaProofTraining = 9999999;
      }
      if (_root.save.arenaProofMission > 9999999) {
        _root.save.arenaProofMission = 9999999;
      }
      if (_root.save.arenaNerfGem > 9999999) {
        _root.save.arenaNerfGem = 9999999;
      }
      if (_root.save.arenaBacon > 9999999) {
        _root.save.arenaBacon = 9999999;
      }
      if (_root.save.robaconBacon > 9999999) {
        _root.save.robaconBacon = 9999999;
      }
      if (_root.save.restTime > 360000) {
        _root.save.restTime = 360000;
      }
      if (_root.save.doubleExpTime > 360000) {
        _root.save.doubleExpTime = 360000;
      }
      if (_root.save.doubleCoinTime > 360000) {
        _root.save.doubleCoinTime = 360000;
      }
      if (_root.save.rewardBotTime > 360000) {
        _root.save.rewardBotTime = 360000;
      }
      if (_root.save.autoHarvestTime > 360000) {
        _root.save.autoHarvestTime = 360000;
      }
      if (_root.save.eliteButtonTime > 360000) {
        _root.save.eliteButtonTime = 360000;
      }
      if (_root.save.batteryChargerTime > 360000) {
        _root.save.batteryChargerTime = 360000;
      }
      if (_root.save.stadiumProTime > 360000) {
        _root.save.stadiumProTime = 360000;
      }
      if (_root.save.powerUserTime > 360000) {
        _root.save.powerUserTime = 360000;
      }
      if (_root.save.demandMasterTime > 360000) {
        _root.save.demandMasterTime = 360000;
      }
      if (_root.save.quickAdventuresTime > 360000) {
        _root.save.quickAdventuresTime = 360000;
      }
      if (_root.save.eliteFisherTime > 360000) {
        _root.save.eliteFisherTime = 360000;
      }
      if (_root.save.awesomeReputation > 999999) {
        _root.save.awesomeReputation = 999999;
      }
      if (_root.save.awesomeReputation < -999999) {
        _root.save.awesomeReputation = -999999;
      }
      if (_root.save.awesomeMaxReputation > 999999) {
        _root.save.awesomeMaxReputation = 999999;
      }
      if (_root.save.gardenFertilizer > 9999) {
        _root.save.gardenFertilizer = 9999;
      }
      if (_root.save.gardenMegaFertilizer > 9999) {
        _root.save.gardenMegaFertilizer = 9999;
      }
      if (_root.save.awesomeRefill > 9999) {
        _root.save.awesomeRefill = 9999;
      }
      if (_root.save.boostPotion > 9999) {
        _root.save.boostPotion = 9999;
      }
      if (_root.save.megaBoostPotion > 9999) {
        _root.save.megaBoostPotion = 9999;
      }
      if (delay1sec >= 1) {
        dispStuff();
        checkMini();
        if (_root.save.coin > 999999999999.0) {
          _root.save.coinOvercap += 1;
        } else {
          _root.save.coinOvercap = 0;
        }
        if (_root.save.greenCoin > 999999999) {
          _root.save.greenCoinOvercap += 1;
        } else {
          _root.save.greenCoinOvercap = 0;
        }
        if (_root.save.blueCoin > 999999) {
          _root.save.blueCoinOvercap += 1;
        } else {
          _root.save.blueCoinOvercap = 0;
        }
        _root.save.pokayCD[1] -= 1;
        _root.save.pokayCD[2] -= 1;
        _root.save.pokayCD[3] -= 1;
        _root.save.pokayCD[4] -= 1;
        _root.save.pokayCD[5] -= 1;
        if (_root.saveid <= 3) {
          ptd = Math.floor(_root.save.totalPlayTime / 86400) + ' days';
          if (_root.save.totalPlayTime < 3600) {
            ptd = Math.floor(_root.save.totalPlayTime / 60) + ' min.';
          } else {
            if (_root.save.totalPlayTime < 176800) {
              ptd = Math.floor(_root.save.totalPlayTime / 3600) + ' hr.';
            }
          }
          _root.saveGlobal.playTime[_root.saveid] = ptd;
          _root.saveGlobal.curLevel[_root.saveid] = _root.withComma(_root.save.level);
          _root.saveGlobal.ascCount[_root.saveid] = _root.withComma(_root.save.banned);
        }
        checkCyborg();
        if (_root.save.whiteCoinRefund > 0) {
          tempWcEarn = Math.min(_root.save.whiteCoinRefund, 999999 - _root.save.whiteCoin);
          _root.save.whiteCoin += tempWcEarn;
          _root.save.whiteCoinRefund -= tempWcEarn;
        }
        if (_root.towerCooldown > 0) {
          _root.towerCooldown -= 1;
        }
        _root.sprayCooldown1 -= 1;
        _root.sprayCooldown2 -= 1;
        _root.cursoridle += 1;
        if (_root.save.maxAchievement < _root.awards) {
          _root.save.maxAchievement = _root.awards;
        }
        if (_root.save.curBusiness != 0) {
          _root.save.curBusinessOnline += 1;
        }
        _root.sessionTimeLeft -= 1;
        _root.thisSession += 1;
        if (_root.save.longestSession < _root.thisSession) {
          _root.save.longestSession = _root.thisSession;
        }
        if (_root.sessionTimeLeft < 0) {
          _root.gotoAndStop(16);
        }
        _root.save.totalPlayTime += 1;
        _root.save.ascendPlayTime += 1;
        _root.save.houseVer -= 1;
        _root.failGrammar -= 1;
        if (_root.save.noAntsTime > 0) {
          if (_root.sprayCooldown1 <= 0 && _root.save.ants > 0) {
            _root.sprayCooldown1 = 180;
            _root.save.antsSprayed += Math.ceil(_root.save.ants * 0.9);
            _root.save.ants = Math.floor(_root.save.ants * 0.1);
          }
          if (_root.save.featureDoomSprayer == true) {
            if (_root.sprayCooldown2 <= 0 && _root.save.ants > 0) {
              _root.sprayCooldown2 = 600;
              _root.save.antsSprayed += _root.save.ants + 99;
              _root.save.ants = -99;
            }
          }
        }
        checkCareer();
        checkAchievements();
        depleteBoost();
        if (_root.save.featureGarden == true) {
          checkExpiry();
        }
        if (_root.save.featureButtonMachine == true) {
          grandpaClickRate = _root.save.buttonGrandpaSpeed * 0.01;
          grandpaExcellentRate = _root.save.buttonGrandpaAccuracy * 0.04;
          grandpaExp = 0;
          grandpaCoin = 0;
          grandpaGreenCoin = 0;
          grandpaBlueCoin = 0;
          grandpaCareer = 0;
          tmashbonusb = Math.floor(Math.sqrt(_root.save.buttonPress * 0.5));
          tmashbonusd = _root.save.buttonMultiplier;
          if (tmashbonusb > 2500) {
            tmashbonusb = 2500;
          }
          tmul = Math.floor(100 + (tmashbonusb + tmashbonusd));
          if (_root.save.eliteButtonTime > 0) {
            tmul += 200;
          }
          if (_root.house._currentframe != 8) {
            grandpaClickRate = grandpaClickRate * _root.save.buttonGrandpaDiscipline * 0.02;
            grandpaExcellentRate = grandpaExcellentRate * _root.save.buttonGrandpaDiscipline * 0.02;
          }
          i = 1;
          while (i <= _root.save.buttonGrandpa) {
            if (Math.random() < grandpaClickRate) {
              grandpaPerf = 89;
              grandpaRating = 4;
              if (_root.save.questType == 'Press') {
                if (_root.save.questSubtype == 'Any') {
                  _root.save.questCount += 1;
                }
              }
              if (Math.random() < grandpaExcellentRate) {
                grandpaPerf = 97;
                grandpaRating = 6;
                if (_root.save.questType == 'Press') {
                  if (_root.save.questSubtype == 'Great') {
                    _root.save.questCount += 1;
                  }
                  if (_root.save.questSubtype == 'Excellent') {
                    _root.save.questCount += 1;
                  }
                }
                if (Math.random() < 0.25) {
                  grandpaPerf = 99;
                  grandpaRating = 7;
                  if (_root.save.questType == 'Press') {
                    if (_root.save.questSubtype == 'Perfect') {
                      _root.save.questCount += 1;
                    }
                  }
                }
              } else {
                if (Math.random() < 0.5) {
                  grandpaPerf = 94;
                  grandpaRating = 5;
                  if (_root.save.questType == 'Press') {
                    if (_root.save.questSubtype == 'Great') {
                      _root.save.questCount += 1;
                    }
                  }
                }
              }
              _root.save.buttonPress += 1;
              _root.save.buttonGrandpaPress += 1;
              grandpaReward = Math.floor(Math.pow(_root.save.level * grandpaPerf * grandpaRating, 0.6) * tmul / 100);
              grandpaExp += Math.floor((grandpaReward * _root.save.boost / 100) * 0.15 * (1 + _root.curCareerLevel[5] * 0.005) * (1 + _root.save.petStat[3] * 0.002));
              grandpaCoin += Math.floor((grandpaReward * _root.save.boost / 100) * 0.05 * (1 + _root.curCareerLevel[5] * 0.005));
              if (grandpaRating == 4) {
                grandpaGreenCoin += 10;
                grandpaCareer += 2;
              }
              if (grandpaRating == 5) {
                grandpaGreenCoin += 50;
                grandpaCareer += 5;
              }
              if (grandpaRating == 6) {
                grandpaGreenCoin += 250;
                grandpaBlueCoin += 1;
                grandpaCareer += 10;
                if (_root.save.permaBanPenalty[18] == 3) {
                  _root.save.buttonPurple += 1;
                } else {
                  if (_root.save.permaBanPenalty[18] == 2 && Math.random() < 0.75) {
                    _root.save.buttonPurple += 1;
                  } else {
                    if (_root.save.permaBanPenalty[18] == 1 && Math.random() < 0.5) {
                      _root.save.buttonPurple += 1;
                    }
                  }
                }
                if (_root.save.careerLevel[5] >= 200) {
                  _root.progPercent += 30;
                }
              }
              if (grandpaRating == 7) {
                _root.save.buttonPerfect += 1;
                _root.save.buttonPurple += 1;
                if (_root.save.permaBanPenalty[18] == 3) {
                  _root.save.buttonPurple += 1;
                } else {
                  if (_root.save.permaBanPenalty[18] == 2 && Math.random() < 0.25) {
                    _root.save.buttonPurple += 1;
                  }
                }
                grandpaGreenCoin += 1000;
                grandpaBlueCoin += 2;
                grandpaCareer += 50;
                if (_root.save.careerLevel[5] >= 100) {
                  _root.progPercent += 100;
                }
              }
            }
            ++i;
          }
          if (_root.save.permaBanPenalty[24] == 3) {
            grandpaExp = Math.floor(grandpaExp * 3);
          } else {
            if (_root.save.permaBanPenalty[24] == 2) {
              grandpaExp = Math.floor(grandpaExp * 2.2);
            } else {
              if (_root.save.permaBanPenalty[24] == 1) {
                grandpaExp = Math.floor(grandpaExp * 1.8);
              }
            }
          }
          _root.gainEXP(grandpaExp, 8);
          _root.gainCoin(grandpaCoin, 8);
          _root.gainGreenCoin(grandpaGreenCoin);
          _root.gainBlueCoin(grandpaBlueCoin);
          _root.gainCareerEXP(5, Math.ceil(grandpaCareer * tmul / 1000), true);
        }
        if (_root.save.featureAwesomeAdventures == true) {
          if (_root.save.awesomeEnergyNext < -1800) {
            _root.save.awesomeEnergyNext = -1800;
          }
          if (_root.save.awesomeEnergy < _root.save.awesomeMaxEnergy * 5) {
            _root.save.awesomeEnergyNext -= 1;
          }
          rgn = 0;
          for (;;) {
            if (!(_root.save.awesomeEnergyNext <= 0 && _root.save.awesomeEnergy < _root.save.awesomeMaxEnergy * 5 + 15)) break;
            rdx = _root.save.awesomeEnergyNext;
            _root.save.awesomeEnergyNext = 300 - _root.curCareerLevel[10];
            if (_root.save.quickAdventuresTime > 0) {
              _root.save.awesomeEnergyNext = Math.floor(_root.save.awesomeEnergyNext / 2);
            }
            i = 1;
            while (i <= _root.todayEvent) {
              yy = _root.clock_year % 10;
              mm = _root.clock_month;
              dd = _root.clock_date;
              if (_root.eventList[yy][mm][dd][i] == 'Wait time for Adventure Energy is reduced by 25%') {
                _root.save.awesomeEnergyNext = Math.floor(_root.save.awesomeEnergyNext * 0.75);
              }
              ++i;
            }
            if (_root.save.restTime > 0) {
              _root.save.awesomeEnergyNext = Math.floor(_root.save.awesomeEnergyNext * (0.9 - _root.save.restEfficiency[9] * 0.01));
            }
            _root.save.awesomeEnergyNext += rdx;
            rgn += 1;
            _root.save.awesomeEnergy += 1;
          }
          if (rgn > 0) {
            _root.dispNews(112, 'Adventure Energy gained! (' + (_root.save.awesomeEnergy - rgn) + ' --> ' + _root.save.awesomeEnergy + ')');
          }
          if (_root.save.awesomeEnergy >= _root.save.awesomeMaxEnergy * 5 + 15) {
            _root.save.awesomeEnergy -= 15;
            _root.save.awesomeRefill += 1;
            _root.dispNews(112, '15 Adventure Energy has been converted to 1 Energy Refill!');
          }
        }
        if (_root.mainAntiLag > 160) {
          _root.mainAntiLag = 0;
        }
        if (Math.random() < 0.05) {
          updateMarket();
        }
        _root.save.lolCooldown -= 1;
        if (_root.save.coinMax > 999999999999999.0) {
          _root.save.coinMax = 999999999999999.0;
        }
        if (_root.save.greenCoinMax > 999999999999.0) {
          _root.save.greenCoinMax = 999999999999.0;
        }
        if (_root.save.blueCoinMax > 999999999) {
          _root.save.blueCoinMax = 999999999;
        }
        if (_root.save.whiteCoinMax > 999999) {
          _root.save.whiteCoinMax = 999999;
        }
        if (_root.save.coinMax < _root.save.coin) {
          _root.save.coinMax = _root.save.coin;
        }
        if (_root.save.greenCoinMax < _root.save.greenCoin) {
          _root.save.greenCoinMax = _root.save.greenCoin;
        }
        if (_root.save.blueCoinMax < _root.save.blueCoin) {
          _root.save.blueCoinMax = _root.save.blueCoin;
        }
        if (_root.save.whiteCoinMax < _root.save.whiteCoin) {
          _root.save.whiteCoinMax = _root.save.whiteCoin;
        }
        if (_root.save.gardenPointMax < _root.save.gardenPoint) {
          _root.save.gardenPointMax = _root.save.gardenPoint;
        }
        if (_root.save.gardenFruitMax < _root.save.gardenFruit) {
          _root.save.gardenFruitMax = _root.save.gardenFruit;
        }
        if (_root.save.arenaPixelMax < _root.save.arenaPixel) {
          _root.save.arenaPixelMax = _root.save.arenaPixel;
        }
        if (_root.save.arenaCraftMax < _root.save.arenaCraft) {
          _root.save.arenaCraftMax = _root.save.arenaCraft;
        }
        if (_root.save.stadiumTokenMax < _root.save.stadiumToken) {
          _root.save.stadiumTokenMax = _root.save.stadiumToken;
        }
        if (_root.save.lolMaxProfit < _root.save.lolProfit) {
          _root.save.lolMaxProfit = _root.save.lolProfit;
        }
        if (_root.save.awesomeMaxReputation < Math.abs(_root.save.awesomeReputation)) {
          _root.save.awesomeMaxReputation = Math.abs(_root.save.awesomeReputation);
        }
        if (_root.save.awesomeReputation != recentReputation) {
          _root.dispNews(113, 'Adventure Reputation: ' + _root.withComma(recentReputation) + ' --> ' + _root.withComma(_root.save.awesomeReputation));
          repChange = Math.abs(_root.save.awesomeReputation - recentReputation);
          if (repChange > 100) {
            repChange = 100;
          }
          _root.gainCareerEXP(10, 10 * repChange, true);
          recentReputation = _root.save.awesomeReputation;
        }
        if (_root.save.batteryChargerTime > 0 && _root.save.printerCharge < 400) {
          _root.save.totalPrinterCharge += Math.ceil((400 - _root.save.printerCharge) / 10);
          _root.save.printerCharge += Math.ceil((400 - _root.save.printerCharge) / 10);
        }
        if (_root.thisSession / 6 == Math.floor(_root.thisSession / 6)) {
          if (_root.cursoridle >= 3600) {
            _root.gainCareerEXP(1, 250, true);
          } else {
            if (_root.cursoridle >= 600) {
              _root.gainCareerEXP(1, 100, true);
            } else {
              if (_root.cursoridle >= 300) {
                _root.gainCareerEXP(1, 50, true);
              } else {
                if (_root.cursoridle >= 60) {
                  _root.gainCareerEXP(1, 25, true);
                } else {
                  if (_root.cursoridle >= 30) {
                    _root.gainCareerEXP(1, 10, true);
                  }
                }
              }
            }
          }
        }
        if (_root.save.idleMode == false && _root.save.doingItWrong < _root.cursoridle) {
          _root.save.doingItWrong = _root.cursoridle;
        }
        i = 1;
        while (i <= 16) {
          if (_root.save.careerBoost[i] > 0) {
            _root.save.careerBoost[i] -= 1;
            if (_root.save.careerBoost[i] <= 0) {
              _root.save.careerBoost[i] = 0;
              _root.dispNews(158, '[' + _root.careerName[i] + '] Career is no longer blessed!');
            }
          } else {
            if (_root.save.careerActive[i] > 0) {
              _root.save.careerActive[i] -= 1;
              if (_root.save.careerActive[i] <= 0) {
                _root.save.careerActive[i] = 0;
                _root.dispNews(145, '[' + _root.careerName[i] + '] Career is deactivated!');
              }
            }
          }
          ++i;
        }
        _root.save.lastPlayed = _root.systemtimenow;
        delay1sec -= 1;
      }
      if (delay5min >= 300) {
        if (_root.save.boost < _root.boostMax * 1.5 - 1 && _root.save.boostPotion >= 1 && _root.save.boostAuto == true) {
          _root.save.boostPotion -= 1;
          _root.gainBoost(9999, 3);
          if (_root.save.boostFreeze < 45 + Math.min(Math.floor(_root.save.totalStupidity / 500), 250)) {
            _root.save.boostFreeze = 45 + Math.min(Math.floor(_root.save.totalStupidity / 500), 250);
          }
        }
        if (_root.save.gDifficulty == 1 || _root.save.level >= 8999) {
          _root.save.gardenFullness -= 50;
        } else {
          if (_root.save.gDifficulty == 2) {
            _root.save.gardenFullness -= 20;
          } else {
            if (_root.save.gDifficulty == 3) {
              _root.save.gardenFullness -= 5;
            }
          }
        }
        if (_root.save.gardenFullness < 0) {
          _root.save.gardenFullness = 0;
        }
        if (_root.saveid >= 10) {
          _root.save.speedRunCoin += 1;
          _root.save.speedRunNextDay -= 5;
          if (_root.save.speedRunNextDay <= 0) {
            _root.anotherDay = true;
            _root.save.speedRunNextDay = 1440;
          } else {
            if (_root.saveid >= 20) {
              _root.dispNews(159, '[CHALLENGE] Next day will begin in ' + _root.withComma(_root.save.speedRunNextDay) + ' minutes.');
            } else {
              _root.dispNews(159, '[SPEEDRUN] Next day will begin in ' + _root.withComma(_root.save.speedRunNextDay) + ' minutes.');
            }
          }
        }
        if (_root.save.hyperDay[1] != _root.todayCode && _root.save.hyperDay[2] != _root.todayCode) {
          _root.gainEventToken(10);
        }
        if (_root.save.boostPremium > 0) {
          _root.save.boostPremium -= 2;
        }
        fatigueRestore = 40;
        if (_root.save.permaBanPenalty[22] == 3) {
          fatigueRestore += 100;
        } else {
          if (_root.save.permaBanPenalty[22] == 2) {
            fatigueRestore += 60;
          } else {
            if (_root.save.permaBanPenalty[22] == 1) {
              fatigueRestore += 40;
            }
          }
        }
        if (_root.save.restTime > 0) {
          if (Math.random() < 0.2) {
            fatigueRestore = Math.floor(fatigueRestore * (1.5 + _root.save.restEfficiency[10] * 0.05));
          }
        }
        _root.save.fishFatigue -= fatigueRestore;
        submitAll();
        if (_root.cursoridle < 300 || _root.cursoridle < 129600 && Math.random() < 0.3) {
          checkPet();
        }
        autoSaveX = true;
        if (_root.house._currentframe == 10) {
          autoSaveX = false;
        }
        if (_root.house._currentframe == 22 && _root.fishStatus == 2) {
          autoSaveX = false;
        }
        if (autoSaveX == true) {
          _root.my_so.flush();
        }
        _root.recMys = _root.systemtimenow;
        i = 1;
        while (i <= _root.autoUpdateTime.length - 1) {
          if (_root.systemtimenow > _root.autoUpdateTime[i] && _root.save.au < i) {
            _root.save.au = i;
          }
          ++i;
        }
        _root.delay5min = 0;
      }
    };

  }

  frame 13 {
    if (_root.saveid >= 20) {
      _root.showPopup('Challenge Mode', 'You\'re now attempting Challenge #' + (_root.saveid - 20) + '!\nAvoid playing another savefile at the same time to prevent possible losses.\nAll Challenges are RANKED, so do NOT cheat. Cheaters will be banned from the game!!');
    }
    if (_root.saveid == 4) {
      _root.save.safeHacking = true;
    }
    _root.kongregate.stats.submit('Version Playing', upnumber);
    if (_root.save.mh == true) {
      _root.kongregate.stats.submit('nope', 38);
    }
    if (_root.kongregate_username == 'TheLinkToThePast' || _root.kongregate_username == 'Oregane' || _root.kongregate_username == 'Tukkun') {
      if (_root.save.tlttpSkin != true && _root.emptyOutfitSlot >= 1) {
        _root.save.tlttpSkin = true;
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Exclusive Skin!!!!1!', 'Thank you for participating in TLTTP\'s Challenge!');
      }
    }
    if (_root.kongregate_username == 'Toa_of_Pi') {
      if (_root.save.tlttpSkin2 != true && _root.emptyOutfitSlot >= 5) {
        _root.save.tlttpSkin2 = true;
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Pre-Explosion Hat', 'I know this is the wrong item, but I forgot what it looked like :(');
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Pre-Explosion Shirt', 'I know this is the wrong item, but I forgot what it looked like :(');
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Pre-Explosion Gloves', 'I know this is the wrong item, but I forgot what it looked like :(');
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Pre-Explosion Pants', 'I know this is the wrong item, but I forgot what it looked like :(');
        _root.getArenaOutfit(1, 'Skin', 13, 706, 0, 'Pre-Explosion Shoes', 'I know this is the wrong item, but I forgot what it looked like :(');
      }
    }
    if (_root.save.bestLevel >= 1000 && _root.saveid <= 3) {
      _root.saveGlobal.challengeUnlocked = true;
    }
    if (_root.kongregate_username == 'Tukkun' || _root.kongregate_username == 'TLTTP') {
      _root.saveGlobal.challengeUnlocked = true;
    }
    nerfOwned = false;
    i = 1;
    while (i <= 3000) {
      if (_root.save.inventoryName[i] == 'Nerf Accepted!') {
        nerfOwned = true;
      }
      ++i;
    }
    if (_root.save.refreshBait12 == true && _root.saveid < 10) {
      if (nerfOwned == true && _root.emptyEnhancerSlot >= 1) {
        _root.save.refreshBait12 = false;
        _root.getArenaEnhancer('Accessory Growth Rock', 500, 1, 0, 1000, '', '', '', 0, 750, 0, 2592000000.0, 'Anti-Nerfer', 'An item that\'s given to make up for nerfs... except for it doesn\'t.\n\nCan only be used on the \'Nerf Accepted!\' medal.');
      } else {
        if (nerfOwned == false && _root.emptyAccessorySlot >= 1) {
          nerfOwned = true;
          _root.save.refreshBait12 = false;
          _root.getArenaAccessory(10, 'Medal', 61, 0, 0, 0, 5, 5, 5, 1, 0, 1, 0, 1, 150, 'Random', 'Random', 'Random', 0, 31536000000.0, false, true, false, false, 0, 'Nerf Accepted!', 'Awarded for being one of the first people to update to a version full of nerfs.', false);
        }
      }
    }
    if (_root.save.refreshBait13 == true && _root.saveid < 10) {
      if (nerfOwned == true && _root.emptyEnhancerSlot >= 1) {
        _root.save.refreshBait13 = false;
        _root.getArenaEnhancer('Accessory Growth Rock', 500, 1, 0, 1000, '', '', '', 0, 750, 0, 2592000000.0, 'Anti-Nerfer', 'An item that\'s given to make up for nerfs... except for it doesn\'t.\n\nCan only be used on the \'Nerf Accepted!\' medal.');
      } else {
        if (nerfOwned == false && _root.emptyAccessorySlot >= 1) {
          _root.save.refreshBait13 = false;
          _root.getArenaAccessory(10, 'Medal', 61, 0, 0, 0, 5, 5, 5, 1, 0, 1, 0, 1, 150, 'Random', 'Random', 'Random', 0, 31536000000.0, false, true, false, false, 0, 'Nerf Accepted!', 'Awarded for being one of the first people to update to a version full of nerfs.', false);
        }
      }
    }
    if (_root.saveid != 4) {
      if (_root.save.featureBattleArena == true) {
        _root.kongregate.stats.submit('Awesome', 1);
      }
    }
    if (_root.viewCredits == true) {
      _root.save.support = 1337;
    }
  }

  movieClip 2565  {
  }

  movieClip 2568  {
  }

  movieClip 2571  {
  }

  movieClip 2574  {
  }

  movieClip 2581  {

    frame 1 {
      stop();
    }
  }

  instance of movieClip 2581  {

    onClipEvent (load) {
      function createSquare(col, alp) {
        if (_root.saveid != 4 || _root.kongregate_username == 'Tukkun' || _root.kongregate_username == 'Kongregate Username' || _root.kongregate_username == undefined) {
          this.createEmptyMovieClip('square_mc', 100);
          square_mc.beginFill(col, alp);
          square_mc.moveTo(0, 0);
          square_mc.lineTo(650, 0);
          square_mc.lineTo(650, 650);
          square_mc.lineTo(0, 650);
          square_mc.lineTo(0, 0);
          square_mc.endFill();
        }
      }

      function checkFrame() {
        newCol = _root.save.bgred * 65536 + _root.save.bggreen * 256 + _root.save.bgblue;
        if (_currentframe != _root.save.bgNum || tempCol != newCol) {
          gotoAndStop(_root.save.bgNum);
          tempCol = newCol;
          if (_root.save.bgNum == 8) {
            createSquare(newCol, 100);
          } else {
            createSquare(newCol, 20);
          }
        }
        if (_root.saveid == 4 && _root.kongregate_username != 'Tukkun') {
          gotoAndStop(9);
        }
      }

      delay = 2;
      tempCol = -1;
      checkFrame();
    }

    onClipEvent (enterFrame) {
      delay += 1;
      if (delay > 2) {
        delay = 0;
        checkFrame();
      }
    }
  }

  movieClip 2583  {
  }

  movieClip 2586  {
  }

  movieClip 2589  {
  }

  movieClip 2593  {

    frame 1 {
      nameText.text = _root.kongregate_username;
      titleText.text = _root.save.userTitle;
    }
  }

  movieClip 2595  {
  }

  movieClip 2597  {
  }

  movieClip 2598  {
  }

  movieClip 2600  {
  }

  movieClip 2602  {

    instance of movieClip 2598  {

      onClipEvent (load) {
        gotoAndStop(_root.save.gDifficulty);
        if (_root.saveid >= 20) {
          gotoAndStop(4);
        }
      }
    }
  }

  movieClip 2605  {

    frame 1 {
      stop();
      if (_root.save.banned <= 0 && _root.saveid < 10) {
        gotoAndStop(2);
      }
      ascentText.text = '+' + _root.save.banned;
    }
  }

  // unknown tag 88 length 89

  movieClip 2611  {
  }

  movieClip 2612  {

    instance of movieClip 2583  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Coin</font></b>\nThe main currency in Anti-Idle: The Game. Needed to buy most features and many other important things in the game.\n\nCoins become a lot easier to get as you level up.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2586  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Green Coin</font></b>\nNeeded for many important upgrades and certain items.\n\nGreen Coins can be obtained from the Progress Bar and most features in the game, though, they are less common.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2589  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Blue Coin</font></b>\nNeeded for many useful items in the Mystery Shop.\n\nBlue Coins are very hard to find. You can get more Blue Coins from quests and by not idling.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 1914  {

      onClipEvent (load) {
        color = 16777215;
        pow = 0;
        bg.gotoAndStop(4);
        insideBar.gotoAndStop(4);
        textBox.textColor = 65280;
        glow1 = new flash.filters.GlowFilter(0, 100, 4, 4, 7, 1, false, false);
        textBox.filters = [glow1];
      }

      onClipEvent (enterFrame) {
        if (_root.saveid >= 20 && _root.save.challengeToken == Math.floor(_root.saveid * (_root.saveid + 1) * (_root.saveid - 7) * 156.4)) {
          numberdisp = 'COMPLETE!';
        } else {
          if (numberdisp != _root.withComma(_root.finalExp)) {
            if (_root._quality == 'BEST') {
              pow = 1;
              glow2 = new flash.filters.GlowFilter(65280, 40, 5, 5, pow, 1, false, false);
              filters = [glow2];
            }
            numberdisp = _root.withComma(_root.finalExp);
            if (_root.eventName == 'April Fools') {
              numberdisp = _root.withComma(_root.finalExp * 3);
            }
          }
        }
        insideBar.xscale = (_root.save.currentExp / _root.requiredExp) * 100;
        if (_root.save.level == 9002) {
          insideBar.xscale = 100;
          if (_root.saveid != 4) {
            insideBar.gotoAndStop(8);
            pbShiny.gotoAndStop(2);
          }
        } else {
          if (_root.save.bestLevel == 9002) {
            if (_root.saveid != 4) {
              insideBar.gotoAndStop(9);
              pbShiny.gotoAndStop(2);
            }
          }
        }
        if (pow > 0) {
          pow -= 0.05;
          glow2 = new flash.filters.GlowFilter(65280, 40, 5, 5, pow, 1, false, false);
          filters = [glow2];
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>EXP</font></b>\nWhen you gain enough EXP, you level up!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.save.experienced += 1;
        if (_root.save.level < 9002) {
          _root.dispNews(167, _root.withComma(_root.requiredExp - _root.save.currentExp) + ' more EXP required to level up.');
          _root.dispNews(167, 'Current Level Progress: ' + _root.withComma(_root.save.currentExp) + ' / ' + _root.withComma(_root.requiredExp) + ' [' + Math.floor((_root.save.currentExp / _root.requiredExp) * 10000) / 100 + '%]');
        } else {
          _root.dispNews(167, 'You are at the level cap! Congratulations!');
        }
        _root.dispNews(167, 'Level: ' + _root.save.level + ' | EXP: ' + _root.withComma(_root.finalExp) + ' / ' + _root.withComma(_root.save.totalExp + _root.requiredExp));
      }
    }

    instance levelStar of movieClip 2602  {

      onClipEvent (enterFrame) {
        if (levelText.text != _root.save.level) {
          levelText.text = _root.save.level;
        }
        red = 100 - Math.floor((_root.save.currentExp / _root.requiredExp) * 100);
        if (red < 0) {
          red = 0;
        }
        if (red > 50) {
          red = 50;
        }
        red = Math.floor((red / 50) * 255);
        green = Math.floor((_root.save.currentExp / _root.requiredExp) * 100);
        if (green < 0) {
          green = 0;
        }
        if (green > 50) {
          green = 50;
        }
        green = Math.floor((green / 50) * 225);
        color = red * 256 * 256 + green * 256;
        if (_root.save.level == 9002 && _root.saveid < 20) {
          color = 16711935;
        }
        if (_root.saveid >= 20 && _root.save.challengeToken == Math.floor(_root.saveid * (_root.saveid + 1) * (_root.saveid - 7) * 156.4)) {
          color = 16711935;
        }
        if (levelText.textColor != color) {
          levelText.textColor = color;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Level</font></b>\nYour current level. The higher level you are, the more things you can do. Level also increases your bragging rights.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance ascentDisp of movieClip 2605  {

      onClipEvent (rollOver, dragOver) {
        if (_root.saveid >= 20) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Challenge Mode</font></b>\nYou\'re currently on Challenge Mode.';
        } else {
          if (_root.saveid >= 10) {
            _root.actiondescription = '<b><font color=\'#FFFF00\'>Speedrun</font></b>\nYou\'re currently on Speedrun Mode. Reach level 9001 as fast as possible!';
          } else {
            _root.actiondescription = '<b><font color=\'#FFFF00\'>Ascension</font></b>\nThe number of times you have ascended so far.\n\nClick here to open Ascension menu.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.optionsScreen.gotoAndStop(11);
      }
    }

    instance of movieClip 2611  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        tim = _root.save.coinOvercap;
        if (tim >= 300) {
          gotoAndStop(2);
        } else {
          if (tim > 0) {
            gotoAndStop(1);
            timText.text = _root.convertSecCD(300 - tim);
          } else {
            gotoAndStop(3);
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (tim >= 300) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have had over 999,999,999,999 Coins for more than 5 minutes. Please spend Coins until you have 999,999,999,999 Coins or below to be able to continue gaining more Coins.';
        } else {
          if (tim > 0) {
            _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have over 999,999,999,999 Coins. If you do not spend your Coins within 5 minutes, you will stop being able to gain more Coins until you have 999,999,999,999 Coins or below. Please spend Coins until you have 999,999,999,999 Coins or below to be able to continue gaining more Coins.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2611  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        tim = _root.save.greenCoinOvercap;
        if (tim >= 300) {
          gotoAndStop(2);
        } else {
          if (tim > 0) {
            gotoAndStop(1);
            timText.text = _root.convertSecCD(300 - tim);
          } else {
            gotoAndStop(3);
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (tim >= 300) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have had over 999,999,999 Green Coins for more than 5 minutes. Please spend Green Coins until you have 999,999,999 Green Coins or below to be able to continue gaining more Green Coins.';
        } else {
          if (tim >= 0) {
            _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have over 999,999,999 Green Coins. If you do not spend your Coins within 5 minutes, you will stop being able to gain more Coins until you have 999,999,999 Green Coins or below. Please spend Green Coins until you have 999,999,999 Green Coins or below to be able to continue gaining more Green Coins.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2611  {

      onClipEvent (load) {
        gotoAndStop(3);
      }

      onClipEvent (enterFrame) {
        tim = _root.save.blueCoinOvercap;
        if (tim >= 300) {
          gotoAndStop(2);
        } else {
          if (tim > 0) {
            gotoAndStop(1);
            timText.text = _root.convertSecCD(300 - tim);
          } else {
            gotoAndStop(3);
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (tim >= 300) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have had over 999,999 Blue Coins for more than 5 minutes. Please spend Blue Coins until you have 999,999 Blue Coins or below to be able to continue gaining more Blue Coins.';
        } else {
          if (tim >= 0) {
            _root.actiondescription = '<b><font color=\'#FFFF00\'>Overcap!</font></b>\nYou have over 999,999 Blue Coins. If you do not spend your Coins within 5 minutes, you will stop being able to gain more Coins until you have 999,999 Blue Coins or below. Please spend Blue Coins until you have 999,999 Blue Coins or below to be able to continue gaining more Blue Coins.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }
  }

  instance topBar of movieClip 2612  {

    onClipEvent (load) {
      targetX = 0;
    }

    onClipEvent (enterFrame) {
      if (_root.cursoridle > 300 || _root.save.antiLag1 == true) {
        targetX = -700;
      } else {
        targetX = 0;
      }
      _x = _x + (targetX - _x) / 5;
    }
  }

  movieClip 2619  {
  }

  movieClip 2621  {
  }

  // unknown tag 88 length 64

  movieClip 2625  {
  }

  // unknown tag 88 length 64

  movieClip 2630  {
  }

  movieClip 2633  {
  }

  movieClip 2637  {
  }

  movieClip 2640  {
  }

  movieClip 2643  {
  }

  movieClip 2662  {

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureGarden == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          _root.house.gotoAndStop(6);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureBattleArena == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 23) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(7);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureButtonMachine == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 23) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(8);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureMoneyPrinter == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          _root.house.gotoAndStop(9);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureArcade == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          _root.house.gotoAndStop(10);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureStadium == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(11);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureTukkunFCG == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 23 || _root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(12);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureLolMarket == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(13);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureAwesomeAdventures == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(14);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          if (_root.save.gDifficulty < 3 || _root.save.level >= 2000) {
            _root.house.gotoAndStop(17);
          } else {
            _root.showPopup('Impossible Ascension', 'You have to reach level 2,000 to open Mystery Boxes.');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.virtue += 1;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.featureFishing == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(22);
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          _root.house.gotoAndStop(18);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.house.gotoAndStop(19);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.bestLevel >= 100 && _root.saveid < 20) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          _root.house.gotoAndStop(23);
        } else {
          if (_root.saveid >= 20) {
            _root.showPopup('Access Denied', 'This feature is disabled in Challenge Mode.');
          } else {
            _root.showPopup('Level 100 Required', 'You have to reach level 100 to use this feature. Keep playing!');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.level >= 3000) {
          _alpha = 100;
        } else {
          if (_root.save.gDifficulty < 3 && _root.save.level >= 1000) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }
      }

      onClipEvent (release) {
        if (_alpha > 50) {
          if (_root.saveid == 24) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            _root.house.gotoAndStop(24);
          }
        } else {
          if (_root.save.gDifficulty == 3) {
            _root.showPopup('Impossible Ascension', 'You have to reach level 3,000 to unlock this feature.');
          } else {
            _root.showPopup('Access Denied', 'You have to reach level 1,000 to unlock this feature. Keep playing!');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.clock_month == 4 && _root.clock_date == 1 || _root.clock_month == 3 && _root.clock_date == 31) {
          _root.house.gotoAndStop(16);
        } else {
          _root.showPopup('House', 'What are you talking about? You are in your house!');
        }
      }
    }
  }

  movieClip 2666  {
  }

  movieClip 2667  {

    frame 1 {
      stop();
    }

    instance of movieClip 2666  {

      onClipEvent (release) {
      }
    }
  }

  movieClip 2669  {

    frame 1 {
      stop();
    }

    instance of movieClip 2666  {

      onClipEvent (release) {
      }
    }
  }

  movieClip 2670  {

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(5);
      }
    }

    instance featureDropdown of movieClip 2662  {

      onClipEvent (load) {
        yspeed = 0;
      }

      onClipEvent (enterFrame) {
        _y = _y - yspeed;
        yspeed *= 0.8;
        if (_y > 0) {
          _y = 0;
        }
        if (_y < 325 - _height) {
          _y = 325 - _height;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 23 || _root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'A strange force prevents you from going to the World Map.');
        } else {
          if (_root.save.featureIdleMode == true) {
            _root.house.gotoAndStop(5);
          } else {
            _root.showPopup('Purchase Idle Mode', 'Purchase Idle Mode in the Feature Shop first.');
          }
        }
      }
    }

    instance of movieClip 2667  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.featureDropdown._y < -5 && _alpha < 100) {
          _alpha = _alpha + 20;
        } else {
          if (_parent.featureDropdown._y >= -5 && _alpha > 0) {
            _alpha = _alpha - 20;
          }
        }
        if (this.hitTest(_root.cursor) && _alpha > 0) {
          gotoAndStop(2);
          h = true;
          _parent.featureDropdown.yspeed -= 1;
        } else {
          if (h == true) {
            h = false;
            gotoAndStop(1);
          }
        }
      }
    }

    instance of movieClip 2669  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.featureDropdown._y > 330 - _parent.featureDropdown._height && _alpha < 100) {
          _alpha = _alpha + 20;
        } else {
          if (_parent.featureDropdown._y <= 330 - _parent.featureDropdown._height && _alpha > 0) {
            _alpha = _alpha - 20;
          }
        }
        if (this.hitTest(_root.cursor) && _alpha > 0) {
          _parent.featureDropdown.yspeed += 1;
          h = true;
          gotoAndStop(2);
        } else {
          if (h == true) {
            h = false;
            gotoAndStop(1);
          }
        }
      }
    }
  }

  movieClip 2672  {
  }

  movieClip 2675  {
  }

  movieClip 2689  {
  }

  movieClip 2692  {
  }

  // unknown tag 88 length 71

  movieClip 2703  {

    frame 1 {
      onEnterFrame = function () {
        if (_alpha == 100) {
          _parent._alpha = 50;
        } else {
          _parent._alpha = 100;
        }
      };

    }
  }

  movieClip 2706  {
  }

  movieClip 2707  {

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureIdleMode != true && _root.save.coin >= 500) {
          _root.save.coin -= 500;
          _root.save.featureIdleMode = true;
          _root.dispNews(14, '[Idle Mode] successfully purchased! (-500 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureIdleMode == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(500);
      }
    }
  }

  movieClip 2713  {
  }

  movieClip 2715  {

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureBoostGen != true && _root.save.coin >= 2000 && _root.save.level >= 5) {
          _root.save.coin -= 2000;
          _root.save.featureBoostGen = true;
          _root.dispNews(14, '[Boost Generator] successfully purchased! (-2,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureBoostGen == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(2000);
      }
    }
  }

  movieClip 2725  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureGarden == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureGarden != true && _root.save.coin >= 10000 && _root.save.level >= 12) {
          _root.save.coin -= 10000;
          _root.save.featureGarden = true;
          _root.dispNews(14, '[Garden] successfully purchased! (-10,000 Coins)');
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(10000);
      }
    }
  }

  movieClip 2729  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureMiniGarden == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(250);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureMiniGarden != true && _root.save.blueCoin >= 250 && _root.save.featureGarden == true) {
          _root.save.blueCoin -= 250;
          _root.save.featureMiniGarden = true;
          _root.dispNews(14, '[Mini Garden] successfully purchased! (-250 Blue Coins)');
        }
      }
    }
  }

  movieClip 2732  {
  }

  movieClip 2737  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureBattleArena == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(50000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureBattleArena != true && _root.save.coin >= 50000 && _root.save.level >= 25) {
          _root.save.coin -= 50000;
          _root.save.featureBattleArena = true;
          if (_root.saveid != 4) {
            _root.kongregate.stats.submit('Awesome', 1);
          }
          _root.dispNews(14, '[Battle Arena] successfully purchased! (-50,000 Coins)');
        }
      }
    }
  }

  movieClip 2742  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(3000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          if (_root.save.featureTravelingTicket != true && _root.save.blueCoin >= 3000 && _root.save.featureBattleArena == true) {
            _root.save.blueCoin -= 3000;
            _root.save.featureTravelingTicket = true;
            _root.dispNews(14, '[VIP Traveling Ticket] successfully purchased! (-3,000 Blue Coins)');
          }
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureTravelingTicket == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2748  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureButtonMachine == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(150000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureButtonMachine != true && _root.save.coin >= 125000 && _root.save.level >= 40) {
          _root.save.coin -= 125000;
          _root.save.featureButtonMachine = true;
          _root.dispNews(14, '[Button Machine] successfully purchased! (-125,000 Coins)');
        }
      }
    }
  }

  movieClip 2752  {
  }

  movieClip 2754  {
  }

  movieClip 2758  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(750);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureSuperBattery != true && _root.save.blueCoin >= 750 && _root.save.featureMoneyPrinter == true) {
          _root.save.blueCoin -= 750;
          _root.save.featureSuperBattery = true;
          _root.dispNews(14, '[Super Battery] successfully purchased! (-750 Blue Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureSuperBattery == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2764  {

    frame 1 {
      stop();
    }
  }

  movieClip 2766  {

    instance of movieClip 2764  {

      onClipEvent (enterFrame) {
        fr = Math.ceil(_root.save.printerCharge / 40) + 1;
        if (fr > 6) {
          fr = 6;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 2764  {

      onClipEvent (enterFrame) {
        fr = Math.ceil(_root.save.printerCharge / 40 - 0.25) + 1;
        if (fr > 6) {
          fr = 6;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 2764  {

      onClipEvent (enterFrame) {
        fr = Math.ceil(_root.save.printerCharge / 40 - 0.5) + 1;
        if (fr > 6) {
          fr = 6;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 2764  {

      onClipEvent (enterFrame) {
        fr = Math.ceil(_root.save.printerCharge / 40 - 0.75) + 1;
        if (fr > 6) {
          fr = 6;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }
  }

  movieClip 2767  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(200000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureMoneyPrinter != true && _root.save.coin >= 200000 && _root.save.level >= 40) {
          _root.save.coin -= 200000;
          _root.save.featureMoneyPrinter = true;
          _root.dispNews(14, '[Money Printer] successfully purchased! (-200,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureMoneyPrinter == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2769  {
  }

  movieClip 2771  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureMysteryShop == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(666666);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureMysteryShop != true && _root.save.coin >= 666666 && _root.save.level >= 66) {
          _root.save.coin -= 666666;
          _root.save.featureMysteryShop = true;
          _root.dispNews(14, '[Mystery Shop] unlocked! (-666,666 Coins)');
        }
      }
    }
  }

  // unknown tag 88 length 62

  movieClip 2781  {

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureBoostAuto != true && _root.save.coin >= 1000000 && _root.save.level >= 125) {
          _root.save.coin -= 1000000;
          _root.save.featureBoostAuto = true;
          _root.dispNews(14, '[Auto-Booster] successfully purchased! (-1,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureBoostAuto == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(1000000);
      }
    }
  }

  movieClip 2786  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(300000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureArcade != true && _root.save.coin >= 300000 && _root.save.level >= 80) {
          _root.save.coin -= 300000;
          _root.save.featureArcade = true;
          _root.dispNews(14, '[Arcade] successfully purchased! (-300,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureArcade == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2789  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(750);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureArcadePack != true && _root.save.blueCoin >= 750 && _root.save.featureArcade == true) {
          _root.save.blueCoin -= 750;
          _root.save.featureArcadePack = true;
          _root.dispNews(14, '[Arcade Pack] successfully purchased! (-750 Blue Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureArcadePack == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2795  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(3000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureStadium != true && _root.save.coin >= 3000000 && _root.save.level >= 180) {
          _root.save.coin -= 3000000;
          _root.save.featureStadium = true;
          _root.dispNews(14, '[Stadium] successfully purchased! (-3,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureStadium == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2800  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(10000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureTukkunFCG != true && _root.save.coin >= 10000000 && _root.save.level >= 300) {
          _root.save.coin -= 10000000;
          _root.save.featureTukkunFCG = true;
          _root.dispNews(14, '[TukkunFCG] successfully purchased! (-10,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureTukkunFCG == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2805  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(20000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureLolMarket != true && _root.save.coin >= 20000000 && _root.save.level >= 400) {
          _root.save.coin -= 20000000;
          _root.save.featureLolMarket = true;
          _root.dispNews(14, '[LolMarket] successfully purchased! (-20,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureLolMarket == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2810  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(30000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureManualSprayer != true && _root.save.coin >= 30000000 && _root.save.level >= 350) {
          _root.save.coin -= 30000000;
          _root.save.featureManualSprayer = true;
          _root.dispNews(14, '[Manual Ant Sprayer] successfully purchased! (-30,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureManualSprayer == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2814  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(4500);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureSpecialSprayer != true && _root.save.blueCoin >= 4500) {
          _root.save.blueCoin -= 4500;
          _root.save.featureSpecialSprayer = true;
          _root.dispNews(14, '[Special Ant Sprayer] successfully purchased! (-4,500 Blue Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureSpecialSprayer == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2821  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(50000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureAwesomeAdventures != true && _root.save.coin >= 50000000 && _root.save.level >= 500) {
          _root.save.coin -= 50000000;
          _root.save.featureAwesomeAdventures = true;
          _root.dispNews(14, '[Awesome Adventures] successfully purchased! (-50,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureAwesomeAdventures == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2827  {
  }

  movieClip 2828  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(3000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureEnergyToolbar != true && _root.save.blueCoin >= 3000 && _root.save.featureAwesomeAdventures == true) {
          _root.save.blueCoin -= 3000;
          _root.save.featureEnergyToolbar = true;
          _root.dispNews(14, '[Adventure Reminder] successfully purchased! (-3,000 Blue Coins)');
        }
      }
    }

    instance of movieClip 2827  {

      onClipEvent (load) {
        checkDelay = 200;
      }

      onClipEvent (enterFrame) {
        checkDelay += 1;
        if (checkDelay > 200) {
          gotoAndStop(1);
          checkDelay = 0;
          if (_root.save.awesomeEnergy > 0) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
          adventureText.text = _root.save.awesomeEnergy;
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureEnergyToolbar == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2838  {
  }

  movieClip 2839  {

    frame 1 {
      stop();
      if (_root.save.gDifficulty >= 2) {
        gotoAndStop(2);
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(300000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureEpicLicense != true && _root.save.coin >= 300000000 && _root.save.level >= 600) {
          _root.save.coin -= 300000000;
          _root.save.featureEpicLicense = true;
          _root.dispNews(14, '[Epic License] successfully purchased! (-300,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureEpicLicense == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2838  {

      onClipEvent (load) {
        cost.text = _root.withComma(30000000000.0);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureEpicLicense != true && _root.save.coin >= 30000000000.0 && _root.save.level >= 3000) {
          _root.save.coin -= 30000000000.0;
          _root.save.featureEpicLicense = true;
          _root.dispNews(14, '[Epic License] successfully purchased! (-30,000,000,000 Coins)');
        }
      }
    }
  }

  movieClip 2847  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(500000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureFishing != true && _root.save.coin >= 500000000 && _root.save.level >= 750) {
          _root.save.coin -= 500000000;
          _root.save.featureFishing = true;
          _root.dispNews(14, '[Fishing] successfully purchased! (-500,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureFishing == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2852  {

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(700000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureDoomSprayer != true && _root.save.coin >= 700000000 && _root.save.level >= 850) {
          _root.save.coin -= 700000000;
          _root.save.featureDoomSprayer = true;
          _root.dispNews(14, '[Doom Ant Sprayer] successfully purchased! (-700,000,000 Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureDoomSprayer == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2853  {

    instance of movieClip 2672  {

      onClipEvent (load) {
        gotoAndStop(2);
      }
    }

    instance of movieClip 2675  {

      onClipEvent (load) {
        gotoAndStop(2);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.greenCoin >= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 50) && _root.save.progSpeedManual < 200) {
          _root.save.greenCoin -= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 50);
          _root.save.progSpeedManual += 1;
          _root.dispNews(15, 'Anti-Idle Mode Speed upgraded to ' + _root.save.progSpeedManual + '%!');
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 5000) && _root.save.progSpeedManual < 200) {
          _root.save.blueCoin -= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 5000);
          _root.save.progSpeedManual += 1;
          _root.dispNews(15, 'Anti-Idle Mode Speed upgraded to ' + _root.save.progSpeedManual + '%!');
        } else {
          if (_root.save.blueCoin >= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 500) && _root.save.progSpeedManual < 300) {
            _root.save.blueCoin -= Math.floor(_root.save.progSpeedManual * _root.save.progSpeedManual / 500);
            _root.save.progSpeedManual += 1;
            _root.dispNews(15, 'Anti-Idle Mode Speed upgraded to ' + _root.save.progSpeedManual + '%!');
          } else {
            if (_root.save.blueCoin >= Math.floor((_root.save.progSpeedManual - 299) * 180) && _root.save.progSpeedManual < 400 && _root.save.progSpeedManual >= 300) {
              _root.save.blueCoin -= Math.floor((_root.save.progSpeedManual - 299) * 180);
              _root.save.progSpeedManual += 1;
              _root.dispNews(15, 'Anti-Idle Mode Speed upgraded to ' + _root.save.progSpeedManual + '%!');
            }
          }
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.greenCoin >= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 3) && _root.save.progSpeedAuto < 100) {
          _root.save.greenCoin -= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 3);
          _root.save.progSpeedAuto += 1;
          _root.dispNews(15, 'Idle Mode Speed upgraded to ' + _root.save.progSpeedAuto + '%!');
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 300) && _root.save.progSpeedAuto < 100) {
          _root.save.blueCoin -= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 300);
          _root.save.progSpeedAuto += 1;
          _root.dispNews(15, 'Idle Mode Speed upgraded to ' + _root.save.progSpeedAuto + '%!');
        } else {
          if (_root.save.blueCoin >= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 30) && _root.save.progSpeedAuto < 150) {
            _root.save.blueCoin -= Math.floor(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 30);
            _root.save.progSpeedAuto += 1;
            _root.dispNews(15, 'Idle Mode Speed upgraded to ' + _root.save.progSpeedAuto + '%!');
          } else {
            if (_root.save.blueCoin >= Math.floor((_root.save.progSpeedAuto - 149) * 750) && _root.save.progSpeedAuto < 200 && _root.save.progSpeedAuto >= 150) {
              _root.save.blueCoin -= Math.floor((_root.save.progSpeedAuto - 149) * 750);
              _root.save.progSpeedAuto += 1;
              _root.dispNews(15, 'Idle Mode Speed upgraded to ' + _root.save.progSpeedAuto + '%!');
            }
          }
        }
      }
    }

    instance of movieClip 2689  {

      onClipEvent (enterFrame) {
        _parent.idleOnSpeed.text = _root.save.progSpeedAuto;
        _parent.idleOffSpeed.text = _root.save.progSpeedManual;
        cost.text = _root.withComma(_root.save.progSpeedManual * _root.save.progSpeedManual / 50);
        if (_root.save.progSpeedManual >= 200) {
          cost.text = 'N/A';
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (enterFrame) {
        cost.text = _root.withComma(_root.save.progSpeedManual * _root.save.progSpeedManual / 5000);
        if (_root.save.progSpeedManual >= 200) {
          cost.text = _root.withComma(_root.save.progSpeedManual * _root.save.progSpeedManual / 500);
        }
        if (_root.save.progSpeedManual >= 300) {
          cost.text = _root.withComma((_root.save.progSpeedManual - 299) * 180);
        }
        if (_root.save.progSpeedManual >= 400) {
          cost.text = 'N/A';
        }
      }
    }

    instance of movieClip 2689  {

      onClipEvent (enterFrame) {
        cost.text = _root.withComma(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 3);
        if (_root.save.progSpeedAuto >= 100) {
          cost.text = 'N/A';
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (enterFrame) {
        cost.text = _root.withComma(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 300);
        if (_root.save.progSpeedAuto >= 100) {
          cost.text = _root.withComma(_root.save.progSpeedAuto * _root.save.progSpeedAuto / 30);
        }
        if (_root.save.progSpeedAuto >= 150) {
          cost.text = _root.withComma((_root.save.progSpeedAuto - 149) * 750);
        }
        if (_root.save.progSpeedAuto >= 200) {
          cost.text = 'N/A';
        }
      }
    }
  }

  movieClip 2859  {
  }

  movieClip 2860  {
  }

  movieClip 2863  {

    frame 1 {
      onEnterFrame = function () {
        if (_root.save.featureIdleMode == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      };

    }

    frame 2 {
      stop();
      onEnterFrame = null;
    }
  }

  movieClip 2866  {
  }

  movieClip 2869  {
  }

  movieClip 2875  {
  }

  movieClip 2878  {
  }

  movieClip 2881  {
  }

  movieClip 2884  {
  }

  movieClip 2890  {
  }

  movieClip 2892  {
  }

  movieClip 2897  {
  }

  movieClip 2901  {
  }

  movieClip 2914  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featurePremiumSprayer == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(18000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 18000 && _root.save.featurePremiumSprayer != true) {
          _root.save.blueCoin -= 18000;
          _root.save.featurePremiumSprayer = true;
          _root.dispNews(16, '[Premium Ant Sprayer] successfully purchased! (-18,000 Blue Coins)');
        }
      }
    }
  }

  movieClip 2920  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.stadiumH1 == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(1000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 1000 && _root.save.stadiumH1 != true) {
          _root.save.blueCoin -= 1000;
          _root.save.stadiumH1 = true;
          _root.dispNews(16, '[Party Hat] successfully purchased! (-1,000 Blue Coins)');
        }
      }
    }
  }

  movieClip 2923  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.stadiumH2 == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(10000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 10000 && _root.save.stadiumH2 != true) {
          _root.save.blueCoin -= 10000;
          _root.save.stadiumH2 = true;
          _root.dispNews(16, '[Crown Hat] successfully purchased! (-10,000 Blue Coins)');
        }
      }
    }
  }

  movieClip 2926  {
  }

  movieClip 2928  {

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.stadiumH3 == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(100000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 100000 && _root.save.stadiumH3 != true) {
          _root.save.blueCoin -= 100000;
          _root.save.stadiumH3 = true;
          _root.dispNews(16, '[Anti-Idle Hat] successfully purchased! (-100,000 Blue Coins)');
        }
      }
    }
  }

  movieClip 2929  {
  }

  movieClip 2934  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(250000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureFishing == true && _root.save.blueCoin >= 250000 && _root.save.fishRodUnlock[5] != 1) {
          _root.save.blueCoin -= 250000;
          _root.save.fishRodUnlock[5] = 1;
          _root.dispNews(16, '[Anti-Fish Fishing Rod] successfully purchased! (-250,000 Blue Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.fishRodUnlock[5] == 1) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2937  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(350000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureFishing == true && _root.save.blueCoin >= 350000 && _root.save.fishRodUnlock[6] != 1) {
          _root.save.blueCoin -= 350000;
          _root.save.fishRodUnlock[6] = 1;
          _root.dispNews(16, '[Anti-Junk Fishing Rod] successfully purchased! (-350,000 Blue Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.fishRodUnlock[6] == 1) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  // unknown tag 88 length 107

  movieClip 2942  {

    frame 1 {
      stop();
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(75000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureTechnicalLight != true && _root.save.blueCoin >= 75000) {
          _root.save.blueCoin -= 75000;
          _root.save.featureTechnicalLight = true;
          _root.dispNews(16, '[Technical Lights] successfully purchased! (-75,000 Green Coins)');
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureTechnicalLight == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2948  {
  }

  movieClip 2949  {

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(15000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.featureCardToolbar != true && _root.save.blueCoin >= 15000) {
          _root.save.blueCoin -= 15000;
          _root.save.featureCardToolbar = true;
          _root.dispNews(16, '[Card Reminder] successfully purchased! (-15,000 Blue Coins)');
        }
      }
    }

    instance of movieClip 2948  {

      onClipEvent (load) {
        checkDelay = 200;
      }

      onClipEvent (enterFrame) {
        checkDelay += 1;
        if (checkDelay > 200) {
          gotoAndStop(1);
          checkDelay = 0;
          cardActivated = 0;
          if (_root.save.doubleExpTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.doubleCoinTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.rewardBotTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.autoHarvestTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.batteryChargerTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.demandMasterTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.eliteButtonTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.stadiumProTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.powerUserTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.quickAdventuresTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.eliteFisherTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.noAntsTime > 0) {
            cardActivated += 1;
          }
          if (_root.save.doubleQuestTime > 0) {
            cardActivated += 1;
          }
          if (cardActivated > 0) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
          cardText.text = cardActivated;
        }
      }
    }

    instance of movieClip 2703  {

      onClipEvent (enterFrame) {
        if (_root.save.featureCardToolbar == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }
  }

  movieClip 2952  {

    instance of movieClip 2672  {

      onClipEvent (load) {
        gotoAndStop(3);
      }
    }

    instance of movieClip 2675  {

      onClipEvent (load) {
        gotoAndStop(3);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.coin >= 600000000) {
          _root.save.coin -= 600000000;
          _root.save.mysteryBox[8] += 1;
          _root.dispNews(17, '[Chaos Crate] purchased! (-600,000,000 Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[8]));
        }
      }
    }

    instance of movieClip 2706  {

      onClipEvent (load) {
        cost.text = _root.withComma(600000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 400) {
          _root.save.blueCoin -= 400;
          _root.save.mysteryBox[1] += 1;
          _root.dispNews(17, '[Explosion Crate] purchased! (-400 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[1]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(400);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 700) {
          _root.save.blueCoin -= 700;
          _root.save.mysteryBox[7] += 1;
          _root.dispNews(17, '[Awesome Crate] purchased! (-700 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[7]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(700);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 1000) {
          _root.save.blueCoin -= 1000;
          _root.save.mysteryBox[3] += 1;
          _root.dispNews(17, '[Pixelated Mystery Box] purchased! (-1,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[3]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(1000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 250) {
          _root.save.blueCoin -= 250;
          _root.save.mysteryBox[5] += 1;
          _root.dispNews(17, '[Progress Box] purchased! (-250 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[5]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(250);
      }
    }

    instance of movieClip 2838  {

      onClipEvent (enterFrame) {
        costX = Math.floor(30000 * Math.sqrt(_root.save.bestLevel)) * 1000;
        if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
          costX = 20000000000.0;
        } else {
          if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
            costX = 10000000000.0;
          } else {
            if (_root.save.bestLevel >= 9000) {
              costX = 5000000000.0;
            }
          }
        }
        cost.text = _root.withComma(costX);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        costX = Math.floor(30000 * Math.sqrt(_root.save.bestLevel)) * 1000;
        if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
          costX = 20000000000.0;
        } else {
          if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
            costX = 10000000000.0;
          } else {
            if (_root.save.bestLevel >= 9000) {
              costX = 5000000000.0;
            }
          }
        }
        if (_root.save.coin >= costX && _root.progPercent < 1000) {
          _root.save.coin -= costX;
          _root.progPercent += 10000;
        }
      }
    }

    instance of movieClip 2890  {

      onClipEvent (enterFrame) {
        costX = 5000000;
        if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
          costX = 20000000;
        } else {
          if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
            costX = 10000000;
          }
        }
        cost.text = _root.withComma(costX);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        costX = 5000000;
        if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
          costX = 20000000;
        } else {
          if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
            costX = 10000000;
          }
        }
        if (_root.save.greenCoin >= costX && _root.progPercent < 1000) {
          _root.save.greenCoin -= costX;
          _root.progPercent += 10000;
        }
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 75000) {
          _root.save.blueCoin -= 75000;
          _root.save.mysteryBox[10] += 1;
          _root.dispNews(17, '[Supply Crate] purchased! (-75,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[10]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(75000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.greenCoin >= 75000000) {
          _root.save.greenCoin -= 75000000;
          _root.save.mysteryBox[10] += 1;
          _root.dispNews(17, '[Supply Crate] purchased! (-75,000,000 Green Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[10]));
        }
      }
    }

    instance of movieClip 2890  {

      onClipEvent (load) {
        cost.text = _root.withComma(75000000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 900) {
          _root.save.blueCoin -= 900;
          _root.save.mysteryBox[2] += 1;
          _root.dispNews(17, '[Gambler\'s Box] purchased! (-900 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[2]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(900);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 5000) {
          _root.save.blueCoin -= 5000;
          _root.save.mysteryBox[4] += 1;
          _root.dispNews(17, '[Legendary Box] purchased! (-5,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[4]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(5000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.greenCoin >= 900000) {
          _root.save.greenCoin -= 900000;
          _root.save.mysteryBox[2] += 1;
          _root.dispNews(17, '[Gambler\'s Box] purchased! (-900,000 Green Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[2]));
        }
      }
    }

    instance of movieClip 2689  {

      onClipEvent (load) {
        cost.text = _root.withComma(900000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 95000) {
          _root.save.blueCoin -= 95000;
          _root.save.mysteryBox[4] += 20;
          _root.dispNews(17, '20 [Legendary Box] purchased! (-95,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[4]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(95000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 95000) {
          _root.save.blueCoin -= 95000;
          _root.save.mysteryBox[3] += 100;
          _root.dispNews(17, '100 [Pixelated Mystery Box] purchased! (-95,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[3]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(95000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 95000) {
          _root.save.blueCoin -= 95000;
          _root.save.mysteryBox[5] += 400;
          _root.dispNews(17, '400 [Progress Box] purchased! (-95,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[5]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(95000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 75000) {
          _root.save.blueCoin -= 75000;
          _root.save.mysteryBox[1] += 200;
          _root.dispNews(17, '200 [Explosion Crate] purchased! (-75,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[1]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(75000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.blueCoin >= 65000) {
          _root.save.blueCoin -= 65000;
          _root.save.mysteryBox[7] += 100;
          _root.dispNews(17, '100 [Awesome Crate] purchased! (-65,000 Blue Coins) | You now have: ' + _root.withComma(_root.save.mysteryBox[7]));
        }
      }
    }

    instance of movieClip 2692  {

      onClipEvent (load) {
        cost.text = _root.withComma(65000);
      }
    }

    instance of movieClip 2044  {

      onClipEvent (release) {
        if (_root.save.greenCoin >= 500000000 && _root.anotherDay != true) {
          _root.save.greenCoin -= 500000000;
          _root.anotherDay = true;
          _root.dispNews(16, '[Day Skip] purchased! (-500,000,000 Green Coins)');
        }
      }
    }

    instance of movieClip 2890  {

      onClipEvent (load) {
        cost.text = _root.withComma(500000000);
      }
    }
  }

  movieClip 2959  {
  }

  movieClip 2963  {
  }

  movieClip 2965  {
  }

  movieClip 2967  {
  }

  movieClip 2972  {
  }

  movieClip 2977  {
  }

  movieClip 2980  {
  }

  // unknown tag 88 length 68

  movieClip 2984  {
  }

  movieClip 2987  {
  }

  movieClip 2990  {
  }

  movieClip 2993  {
  }

  movieClip 2996  {
  }

  movieClip 2998  {
  }

  movieClip 3001  {
  }

  movieClip 3003  {
  }

  movieClip 3004  {

    instance of movieClip 2972  {

      onClipEvent (load) {
        if (_root.save.featureMoneyPrinter == true) {
          eligible = 1;
          targetF = 9;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Money Printer';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2977  {

      onClipEvent (load) {
        if (_root.save.featureButtonMachine == true) {
          eligible = 1;
          targetF = 8;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Button Machine';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2980  {

      onClipEvent (load) {
        if (_root.save.featureStadium == true) {
          eligible = 1;
          targetF = 11;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Stadium';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2984  {

      onClipEvent (load) {
        if (_root.save.featureArcade == true) {
          eligible = 1;
          targetF = 10;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Arcade';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2987  {

      onClipEvent (release) {
        _root.showPopup('House', 'What are you talking about? You are in your house!');
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Your House';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2990  {

      onClipEvent (load) {
        if (_root.save.featureGarden == true) {
          eligible = 1;
          targetF = 6;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Garden';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2993  {

      onClipEvent (load) {
        if (_root.save.featureBattleArena == true) {
          eligible = 1;
          targetF = 7;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Battle Arena';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2996  {

      onClipEvent (load) {
        if (_root.save.featureLolMarket == true) {
          eligible = 1;
          targetF = 13;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'LolMarket';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 2998  {

      onClipEvent (release) {
        _root.house.gotoAndStop(19);
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Secret Area';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 3001  {

      onClipEvent (load) {
        if (_root.save.featureTukkunFCG == true) {
          eligible = 1;
          targetF = 12;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'TukkunFCG';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 3003  {

      onClipEvent (load) {
        if (_root.save.featureAwesomeAdventures == true) {
          eligible = 1;
          targetF = 14;
        } else {
          this.removeMovieClip();
          removeMovieClip(this);
          this.unloadMovie();
          loadMovie('', this);
        }
      }

      onClipEvent (release) {
        if (eligible == 1) {
          _root.house.gotoAndStop(targetF);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Awesome Adventures';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }
  }

  movieClip 3006  {
  }

  movieClip 3008  {
  }

  movieClip 3011  {
  }

  movieClip 3013  {
  }

  movieClip 3014  {
  }

  movieClip 3015  {
  }

  movieClip 3017  {
  }

  movieClip 3018  {

    instance of movieClip 2959  {

      onClipEvent (load) {
        _alpha = 100;
      }

      onClipEvent (enterFrame) {
        if (_root.clock_hour >= 6 && _root.clock_hour < 12) {
          gotoAndStop(1);
        } else {
          if (_root.clock_hour >= 12 && _root.clock_hour < 16) {
            gotoAndStop(2);
          } else {
            if (_root.clock_hour >= 16 && _root.clock_hour < 19) {
              gotoAndStop(3);
            } else {
              gotoAndStop(4);
            }
          }
        }
      }
    }

    instance of movieClip 2965  {

      onClipEvent (load) {
        _alpha = 100;
      }

      onClipEvent (enterFrame) {
        if (_root.clock_hour >= 6 && _root.clock_hour < 12) {
          gotoAndStop(1);
        } else {
          if (_root.clock_hour >= 12 && _root.clock_hour < 16) {
            gotoAndStop(2);
          } else {
            if (_root.clock_hour >= 16 && _root.clock_hour < 19) {
              gotoAndStop(3);
            } else {
              gotoAndStop(4);
            }
          }
        }
      }
    }

    instance of movieClip 3014  {

      onClipEvent (load) {
        _alpha = 0;
        delay = 0;
      }

      onClipEvent (enterFrame) {
        delay += 1;
        if (_root.clock_hour >= 20 || _root.clock_hour < 4) {
          if (delay > 700 && delay <= 750) {
            _alpha = delay - 700;
          }
          if (delay > 750 && delay <= 800) {
            _alpha = 800 - delay;
          }
        } else {
          _alpha = 0;
        }
        if (delay > 2000) {
          delay = 0;
        }
      }

      onClipEvent (release) {
        if (_alpha > 0) {
          _root.save.randomGhost = 1337;
          loadMovie('', this);
        }
      }
    }

    instance light of movieClip 3015  {

      onClipEvent (load) {
        _alpha = 100;
        gotoAndStop(1);
      }

      onClipEvent (enterFrame) {
        if (_root.clock_hour >= 5 && _root.clock_hour < 11) {
          _alpha = 100;
        } else {
          if (_root.clock_hour >= 11 && _root.clock_hour < 16) {
            _alpha = 75;
          } else {
            if (_root.clock_hour >= 16 && _root.clock_hour < 19) {
              _alpha = 50;
            } else {
              _alpha = 0;
            }
          }
        }
      }
    }
  }

  movieClip 3019  {
  }

  movieClip 3040  {

    frame 1 {
      function reset() {
        _alpha = 100;
        _x = Math.random() * 50 + 12.5;
        _y = Math.random() * 15 + 5;
      }

      _alpha = 0;
      onEnterFrame = function () {
        if (_alpha > 0) {
          _rotation = _rotation + 5;
          _alpha = _alpha - 2;
        } else {
          if (Math.random() < 0.005) {
            reset();
          }
        }
      };

    }
  }

  movieClip 3043  {
  }

  movieClip 3044  {

    frame 1 {
      stop();
    }

    instance of movieClip 3043  {

      onClipEvent (load) {
        alp = 30;
        dir = 1;
      }

      onClipEvent (enterFrame) {
        alp += dir;
        if (alp >= 50) {
          dir = -1;
        } else {
          if (alp <= 10) {
            dir = 1;
          }
        }
        _alpha = alp;
      }
    }
  }

  movieClip 3060  {
  }

  movieClip 3070  {
  }

  movieClip 3074  {
  }

  movieClip 3075  {
  }

  movieClip 3076  {
  }

  movieClip 3088  {
  }

  movieClip 3089  {

    instance of movieClip 3060  {

      onClipEvent (enterFrame) {
        fr = _root.save.gardenTrees[_parent._parent.slot] + 1;
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3088  {

      onClipEvent (enterFrame) {
        fr = _root.save.gardenTrees[_parent._parent.slot] + 1;
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }
  }

  movieClip 3090  {

    frame 1 {
      stop();
    }

    frame 2 {
      function checkFrame() {
        ready = 0;
        if (_root.save.gardenTrees[slot] > 0) {
          if (_root.save.gardenRecentTime[slot] + _root.save.gardenHarvestTime[slot] - _root.systemtimenow <= 0) {
            ready = 1;
          } else {
            ready = 0;
          }
        }
        if (tr == true && (slot < 26 || _parent.anotherGardenSeed.targetX < 0) && _parent.fertilizerMenu._currentframe < 3) {
          rolling = 1;
          plotReq = grade * grade * 1000;
          if (grade == 11) {
            plotReq = (((slot - 1) % 25) * 100000 + 600000) * (slot >= 51 ? 2 : 1);
          }
          if (grade == 12) {
            plotReq = 'MAX';
          }
          _root.actiondescription = '[Grade <b>' + grade + '</b> Plot]\nBonus <b>' + grade * 10 + '%</b> to harvest value';
          if (grade < 11) {
            _root.actiondescription += '\nPlot EXP: <b>' + _root.withComma(_root.save.gardenSlotEXP[slot]) + '</b> / ' + _root.withComma(plotReq);
          } else {
            _root.actiondescription += '\nPlot EXP: <b>' + _root.withComma(_root.save.gardenSlotEXP[slot]) + '</b>';
          }
          if (_root.save.gardenTrees[slot] > 0) {
            if (ready == 1) {
              _root.actiondescription += '\n---------\n<font color="#FFFF00"><b>Click to harvest!</b></font>';
            } else {
              _root.actiondescription += '\n---------\nHarvest in: <font color=\'#CCFF00\'>' + _root.convertSecFull((_root.save.gardenRecentTime[slot] + _root.save.gardenHarvestTime[slot] - _root.systemtimenow) / 1000) + '</font>';
            }
            multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
            _root.actiondescription += '\nExpires in: <font color=\'#CCFF00\'>' + _root.convertSecFull((_root.save.gardenPurchaseTime[slot] + _root.save.gardenExpiryTime[slot] - _root.systemtimenow) / 1000) + '</font>';
            _root.actiondescription += '\nHarvest Value: <font color=\'#FFFF00\'>' + _root.withComma(Math.floor(_root.save.gardenHarvestValue[slot] * multiplier)) + '</font> Coins\n(' + _root.withComma(_root.save.gardenHarvestValue[slot]) + ' x ' + Math.floor(multiplier * 10) / 10 + ')\nGarden EXP: <font color=\'#CCFFFF\'>+' + _root.withComma(_root.save.gardenTreeExp[slot]) + '</font>';
            if (_root.save.gardenTreeModuleProc[slot] > 0) {
              _root.actiondescription += '\n\n<font color=\'#CCFF00\'>Extra Harvest Value from Modules:\n<b>' + _root.withComma(Math.floor(_root.save.gardenTreeModuleProc[slot])) + '</b> / 10,000,000</font>';
            }
            maxFert = 20;
            if (_root.save.careerLevel[2] >= 200) {
              maxFert = 21;
            }
            if (_root.save.gardenTreeFertilize[slot] <= maxFert - 2) {
              _root.actiondescription += '\n---------\n<font color=\'#CCFF00\'><b>' + _root.withComma(maxFert - _root.save.gardenTreeFertilize[slot]) + '</b> more Fertilizers can be used on this tree.</font>';
            } else {
              if (_root.save.gardenTreeFertilize[slot] == maxFert - 1) {
                _root.actiondescription += '\n---------\n<font color=\'#CCFF00\'><b>1</b> more Fertilizer can be used on this tree.</font>';
              } else {
                _root.actiondescription += '\n---------\n<font color=\'#CCFF00\'>No more Fertilizers can be used on this tree.</font>';
              }
            }
          }
        } else {
          if (rolling == 1) {
            rolling = 0;
            _root.actiondescription = '';
          }
        }
      }

      grade = 1;
      alt = false;
      tr = false;
      checkFrame();
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          checkFrame();
        }
      };

      onRollOver = function () {
        tr = true;
      };

      onRollOut = function () {
        tr = false;
      };

      onDragOver = onRollOver;
      onDragOut = onRollOut;
      onRelease = function () {
        if (ready == 1) {
          _root.harvestTree(slot);
        } else {
          if (Key.isDown(16)) {
            if (_root.saveid == 23) {
              _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
            } else {
              if (_root.save.gardenTrees[slot] != 0) {
                _root.save.curForestDestroyer += 1;
                if (_root.save.forestDestroyer < _root.save.curForestDestroyer) {
                  _root.save.forestDestroyer = _root.save.curForestDestroyer;
                }
                _root.save.gardenTrees[slot] = 0;
              }
            }
          } else {
            if (_root.save.gardenTrees[slot] <= 0 || isNaN(_root.save.gardenTrees[slot])) {
              if (_root.treeToPlant != -1) {
                coinCost = _root.tree_coinCost;
                greenCoinCost = _root.tree_greenCoinCost;
                blueCoinCost = _root.tree_blueCoinCost;
                gardenPointCost = _root.tree_gardenPointCost;
                harvestTime = _root.tree_harvestTime;
                harvestValue = Math.floor(_root.tree_harvestValue * (0.95 + grade * 0.1 + Math.random() * 0.1));
                treeExp = _root.tree_exp;
                expiryTime = _root.tree_expiryTime;
                treeToPlant = _root.treeToPlant;
                seedCost = 0;
                if (slot >= 26 && slot <= 50) {
                  seedCost = 1;
                }
                if (_root.save.gardenSeed[_root.treeToPlant] >= seedCost && _root.save.coin >= coinCost && _root.save.greenCoin >= greenCoinCost && _root.save.blueCoin >= blueCoinCost && _root.save.gardenPoint >= gardenPointCost) {
                  _root.save.coin -= coinCost;
                  _root.save.greenCoin -= greenCoinCost;
                  _root.save.blueCoin -= blueCoinCost;
                  _root.save.gardenPoint -= gardenPointCost;
                  _root.save.gardenSeed[_root.treeToPlant] -= seedCost;
                  _root.save.gardenRecentTime[slot] = _root.systemtimenow;
                  _root.save.gardenPurchaseTime[slot] = _root.systemtimenow;
                  _root.save.gardenHarvestTime[slot] = harvestTime * 1000;
                  _root.save.gardenHarvestValue[slot] = harvestValue;
                  _root.save.gardenExpiryTime[slot] = expiryTime * 1000;
                  _root.save.gardenTreeExp[slot] = treeExp;
                  _root.save.gardenTreeFertilize[slot] = 0;
                  _root.save.gardenTreeModuleProc[slot] = 0;
                  _root.save.gardenTrees[slot] = treeToPlant;
                  if (coinCost > 0) {
                    _root.dispNews(18, 'Tree planted! (-' + _root.withComma(coinCost) + ' Coins)');
                  } else {
                    if (gardenPointCost > 0) {
                      _root.dispNews(18, 'Tree planted! (-' + _root.withComma(gardenPointCost) + ' Garden Points)');
                    } else {
                      _root.dispNews(18, 'Tree planted!');
                    }
                  }
                } else {
                  if (gardenPointCost > 0) {
                    _root.showPopup('Not enough Garden Points!', 'You don\'t have enough Garden Points to plant this tree.');
                  } else {
                    if (seedCost > 0) {
                      _root.showPopup('Not enough Seeds!', 'You don\'t have enough Seeds.');
                    } else {
                      _root.showPopup('Not enough money!', 'You don\'t even have enough money to afford a tree seed, LOL! Though, you can use Garden Points to plant trees for free. Try it!');
                    }
                  }
                }
              }
            } else {
              if (_root.treeToPlant != -1) {
                _root.showPopup('There\'s already a tree here!', 'There\'s already a tree planted in this plot. You can either wait for it to be ready for harvest, or Shift + Click to get rid of it.');
              }
            }
          }
        }
      };

    }

    instance of movieClip 3044  {

      onClipEvent (enterFrame) {
        grade = Math.floor(Math.sqrt(_root.save.gardenSlotEXP[_parent.slot] / 1000)) + 1;
        if (grade > 11) {
          if (_root.save.gardenSlotEXP[_parent.slot] >= (((_parent.slot - 1) % 25) * 100000 + 600000) * (_parent.slot >= 51 ? 2 : 1)) {
            grade = 12;
          }
          grade = 11;
        }
        _parent.grade = grade;
        fr = grade;
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
        _root.treeGrade[_parent.slot] = grade;
      }
    }

    instance of movieClip 3089  {

      onClipEvent (enterFrame) {
        fr = 1;
        if (_parent.ready == 1) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }
  }

  movieClip 3112  {

    frame 1 {
      function checkMastery() {
        masteryLevel = Math.floor((_root.save.gardenMastery[treeToPlant].toString()).length - 1);
        if (masteryLevel < 0 || isNaN(masteryLevel)) {
          masteryLevel = 0;
        }
        harvestValueActual = Math.round(harvestValue * (5 + masteryLevel) / 5);
        gardenExpActual = Math.floor(gardenExp * (5 + masteryLevel) / 5);
        if (_root.save.careerLevel[2] >= 100) {
          gardenExpActual = Math.floor(gardenExpActual * 1.2);
        }
      }

      if (modified != true) {
        modified = true;
        multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
        harvestValue = Math.round(harvestValue * multiplier);
        coinCost = Math.round(coinCost * multiplier);
        harvestTime = Math.round(harvestTime * (1 - Math.min(Math.floor(_root.save.totalStupidity / 10), 30) * 0.01));
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Wait time to harvest trees in Garden is reduced by 25%') {
            harvestTime = Math.round(harvestTime * 0.75);
          }
          ++i;
        }
        if (_root.save.permaBanPenalty[33] == 3) {
          expiryTime = Math.round(expiryTime * 1.5);
          harvestValue = Math.round(harvestValue * 1.5);
        } else {
          if (_root.save.permaBanPenalty[33] == 2) {
            expiryTime = Math.round(expiryTime * 1.3);
            harvestValue = Math.round(harvestValue * 1.3);
          } else {
            if (_root.save.permaBanPenalty[33] == 1) {
              expiryTime = Math.round(expiryTime * 1.2);
              harvestValue = Math.round(harvestValue * 1.2);
            }
          }
        }
      }
      checkMastery();
      onRollOver = function () {
        checkMastery();
        _root.actiondescription = '<font color="#FFFF00"><b>' + treeName + '</b></font>';
        _root.actiondescription += '\nHarvest Time: <font color="#CCFF00">' + _root.convertSecFull(harvestTime) + '</font>';
        _root.actiondescription += '\nExpiration Time: <font color="#CCFF00">' + _root.convertSecFull(expiryTime) + '</font>';
        _root.actiondescription += '\nHarvest Value: <font color="#FFFF00">' + _root.withComma(harvestValueActual) + '</font> Coins\nGarden EXP: <font color="#CCFFFF">+' + _root.withComma(gardenExpActual) + '</font>\nMax Harvests: <font color="#CCFF00">' + _root.withComma(Math.floor((expiryTime - 1) / harvestTime)) + '</font>';
        _root.actiondescription += '\n---------\nHarvest Count: <b>' + _root.withComma(_root.save.gardenMastery[treeToPlant]) + '</b>';
        if (masteryLevel > 0) {
          _root.actiondescription += '\n\n<font color=\'#CCFF00\'>[Mastery Level <b>' + masteryLevel + '</b>]\nBonus <b>' + _root.withComma(masteryLevel * 20) + '%</b> to Harvest Value and Garden EXP gain\nNext level at ' + _root.withComma(Math.pow(10, masteryLevel + 1)) + ' harvests</font>';
        }
        _root.actiondescription += '\n---------\nCost to plant:';
        if (coinCost == 0 && greenCoinCost == 0 && blueCoinCost == 0) {
          _root.actiondescription += '\n<font color="#FFFF00">FREE!!!</font>';
        }
        if (coinCost > 0) {
          _root.actiondescription += '\n<font color="#FFFF00">' + _root.withComma(coinCost) + '</font> Coins';
        }
        if (greenCoinCost > 0) {
          _root.actiondescription += '\n<font color="#00FF00">' + _root.withComma(greenCoinCost) + '</font> Green Coins';
        }
        if (blueCoinCost > 0) {
          _root.actiondescription += '\n<font color="#0099FF">' + _root.withComma(blueCoinCost) + '</font> Blue Coins';
        }
        if (gardenPointCost > 0) {
          _root.actiondescription += '\n[Note: You can hold Spacebar while selecting this seed to plant trees with <font color="#FF9900">' + _root.withComma(gardenPointCost) + '</font> Garden Points per tree instead.]';
        }
      };

      onRollOut = function () {
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

      onRelease = function () {
        _root.treeName = treeName;
        _root.treeToPlant = treeToPlant;
        _root.tree_coinCost = coinCost;
        _root.tree_greenCoinCost = greenCoinCost;
        _root.tree_blueCoinCost = blueCoinCost;
        _root.tree_gardenPointCost = 0;
        if (Key.isDown(32) && gardenPointCost > 0) {
          _root.tree_coinCost = 0;
          _root.tree_greenCoinCost = 0;
          _root.tree_blueCoinCost = 0;
          _root.tree_gardenPointCost = gardenPointCost;
        }
        _root.tree_harvestValue = Math.round(harvestValueActual / multiplier);
        _root.tree_harvestTime = harvestTime;
        _root.tree_expiryTime = expiryTime;
        _root.tree_exp = gardenExpActual;
        _parent.treeNameText.text = treeName;
        _parent.treeValueText.text = _root.withComma(harvestValueActual);
        _parent.treeHarvestText.text = _root.convertSecFull(harvestTime);
        _parent.treeExpiryText.text = _root.convertSecFull(expiryTime);
        _parent.treeExpText.text = '+' + _root.withComma(gardenExpActual);
        _parent.treeCost1Text.text = _root.withComma(_root.tree_coinCost);
        _parent.treeCost2Text.text = _root.withComma(_root.tree_greenCoinCost);
        _parent.treeCost3Text.text = _root.withComma(_root.tree_blueCoinCost);
        _parent.treeCost4Text.text = _root.withComma(_root.tree_gardenPointCost);
      };

    }
  }

  movieClip 3124  {
  }

  movieClip 3128  {
  }

  movieClip 3130  {
  }

  movieClip 3133  {
  }

  movieClip 3135  {
  }

  // unknown tag 88 length 76

  movieClip 3143  {

    frame 1 {
      stop();
      onEnterFrame = function () {
        if (this.hitTest(_root.cursor)) {
          gotoAndStop(2 + _parent._currentframe);
          _x = 0;
          fertilizerText.text = _root.withComma(_root.save.gardenFertilizer);
          fertilizerText2.text = _root.withComma(_root.save.gardenMegaFertilizer);
          coolText.text = _root.convertSec((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000);
          if (_root.systemtimenow >= _root.save.gardenFertilizerAllow) {
            coolText.text = '00:00';
          }
        } else {
          _x = -130;
          if (_root.systemtimenow >= _root.save.gardenFertilizerAllow && _root.save.gardenCapacity >= 2) {
            gotoAndStop(2);
          } else {
            gotoAndStop(1);
          }
        }
      };

    }

    instance of movieClip 3130  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 3133  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Home Garden by 5% and Garden EXP given by 1. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 250, true);
          valP = 0;
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.05 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 1;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          _root.actiondescription = '';
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }

    instance of movieClip 3135  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Mega Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Home Garden by 10% and Garden EXP given by 2. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Mega Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenMegaFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 2500, true);
          valP = 0;
          i = 1;
          while (i <= 25) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.1 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 2;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Mega Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'You can spend 1,000,000 Green Coins to skip the Fertilizer cooldown.\n\nIf you hold Shift while clicking either Fertilizer or Mega Fertilizer, you can skip the cooldown without having to click this button (the Green Coins are still consumed).';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
      }
    }

    instance of movieClip 3133  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Another Garden by 5% and Garden EXP given by 1. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 250, true);
          valP = 0;
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.05 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 1;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          _root.actiondescription = '';
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }

    instance of movieClip 3135  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Mega Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Another Garden by 10% and Garden EXP given by 2. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Mega Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenMegaFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 2500, true);
          valP = 0;
          i = 26;
          while (i <= 50) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.1 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 2;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          _root.actiondescription = '';
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Mega Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }

    instance of movieClip 3133  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Another Another Garden by 5% and Garden EXP given by 1. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 250, true);
          valP = 0;
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.05 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 1;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          _root.actiondescription = '';
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }

    instance of movieClip 3135  {

      onClipEvent (enterFrame) {
        maxFert = 20;
        if (_root.save.careerLevel[2] >= 200) {
          maxFert = 21;
        }
        _alpha = 30;
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
      }

      onClipEvent (rollOver) {
        _root.actiondescription = '<b>Mega Fertilizer</b>\nIncreases the Harvest Value of all planted trees in Another Another Garden by 10% and Garden EXP given by 2. Each tree can be fertilized up to 20 times.\nYou may have up to 9,999 unused Mega Fertilizers.\n\nAfter using this, you may not use another Fertilizer or Mega Fertilizer in any Garden for 15 minutes.';
        if (usable == true) {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Available now</font>';
        } else {
          _root.actiondescription += '\n<font color=\'#FFFF00\'>Next: ' + _root.convertSecFull((_root.save.gardenFertilizerAllow - _root.systemtimenow) / 1000) + '</font>';
        }
      }

      onClipEvent (rollOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow < _root.save.gardenFertilizerAllow && _root.save.greenCoin >= 1000000 && Key.isDown(16)) {
          _root.save.greenCoin -= 1000000;
          _root.save.gardenFertilizerAllow = _root.systemtimenow;
        }
        usable = false;
        if (_root.save.gardenMegaFertilizer > 0 && _root.systemtimenow >= _root.save.gardenFertilizerAllow) {
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              _alpha = 100;
              usable = true;
            }
            ++i;
          }
        }
        if (usable == true) {
          _root.save.gardenMegaFertilizer -= 1;
          fertCount = 0;
          _root.gainCareerEXP(2, 2500, true);
          valP = 0;
          i = 51;
          while (i <= 75) {
            if (_root.save.gardenTrees[i] > 0 && _root.save.gardenTreeFertilize[i] < maxFert) {
              fertCount += 1;
              _root.save.gardenTreeFertilize[i] += 1;
              oldVal = _root.save.gardenHarvestValue[i];
              _root.save.gardenHarvestValue[i] = Math.floor((_root.save.gardenHarvestValue[i] - _root.save.gardenTreeModuleProc[i]) * 1.1 + _root.save.gardenTreeModuleProc[i]);
              valP += _root.save.gardenHarvestValue[i] - oldVal;
              _root.save.gardenTreeExp[i] += 2;
            }
            ++i;
          }
          _root.save.gardenFertilizerAllow = _root.systemtimenow + 900000;
          if (_root.save.careerLevel[2] >= 200) {
            _root.save.gardenFertilizerAllow = _root.systemtimenow + 630000;
          }
          _root.actiondescription = '';
          multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
          _root.dispNews(23, fertCount + ' trees fertilized with Mega Fertilizer! Total Harvest Value: +' + _root.withComma(valP * multiplier));
        }
      }
    }
  }

  button 3171 {

    on (release) {
      gotoAndStop(3);
      targetX = -510;
    }
  }

  movieClip 3172  {
  }

  movieClip 3179  {
  }

  movieClip 3183  {

    instance of movieClip 3179  {

      onClipEvent (load) {
        function seedCheck() {
          ID = _parent.ID;
          if (ID == undefined) {
            ID = _parent._parent.ID;
          }
          _parent.seedText.text = '#' + (ID - 25);
          if (_parent.blah != true) {
            _parent.ownText.text = _root.save.gardenSeed[ID];
          }
          if (_root.save.gardenMastery[ID] >= 1000) {
            gotoAndStop(2);
          } else {
            gotoAndStop(1);
          }
        }

        seedCheck();
      }

      onClipEvent (enterFrame) {
        seedCheck();
      }
    }
  }

  movieClip 3184  {

    frame 1 {
      if (_root.save.gardenSeed[ID] > 0) {
        seedGraphic.gotoAndStop(ID);
      } else {
        seedGraphic.gotoAndStop(1);
      }
      if (modified != true) {
        modified = true;
        multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
        harvestValue = Math.round(harvestValue * multiplier);
        baseHarvestTime = harvestTime;
        harvestTime = Math.round(harvestTime * (1 - Math.min(Math.floor(_root.save.totalStupidity / 10), 30) * 0.01));
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Wait time to harvest trees in Garden is reduced by 25%') {
            harvestTime = Math.round(harvestTime * 0.75);
          }
          ++i;
        }
        if (_root.save.permaBanPenalty[33] == 3) {
          expiryTime = Math.round(expiryTime * 1.5);
          harvestValue = Math.round(harvestValue * 1.5);
        } else {
          if (_root.save.permaBanPenalty[33] == 2) {
            expiryTime = Math.round(expiryTime * 1.3);
            harvestValue = Math.round(harvestValue * 1.3);
          } else {
            if (_root.save.permaBanPenalty[33] == 1) {
              expiryTime = Math.round(expiryTime * 1.2);
              harvestValue = Math.round(harvestValue * 1.2);
            }
          }
        }
        tempMax = false;
        gardenExp = 200 + Math.floor(_root.save.gardenMastery[ID] / 5);
        if (gardenExp >= 400) {
          gardenExp = 400;
          tempMax = true;
        }
        gardenExp = Math.ceil(gardenExp * (baseHarvestTime + 1800) / 18000);
        if (ID == 26 || ID == 51 || ID == 76) {
          gardenExp = Math.ceil(gardenExp * 0.8);
        }
        if (tempMax == true) {
          harvestValue = Math.round(harvestValue * 3);
        } else {
          harvestValue = Math.round(harvestValue * (1 + 0.02 * Math.floor(_root.save.gardenMastery[ID] / 10)));
        }
        if (_root.save.careerLevel[2] >= 100) {
          gardenExp = Math.floor(gardenExp * 1.2);
        }
      }
      onEnterFrame = function () {
        if (_root.save.gardenSeed[ID] > 0) {
          fr = ID;
        } else {
          fr = 1;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      };

      onRollOver = function () {
        _root.actiondescription = '<font color="#FFFF00"><b>Another Tree #' + (ID - 25) + '</b></font>';
        _root.actiondescription += '\nHarvest Time: <font color="#CCFF00">' + _root.convertSecFull(harvestTime) + '</font>';
        _root.actiondescription += '\nExpiration Time: <font color="#CCFF00">' + _root.convertSecFull(expiryTime) + '</font>';
        _root.actiondescription += '\nHarvest Value: <font color="#FFFF00">' + _root.withComma(harvestValue) + '</font> Coins\nGarden EXP: <font color="#CCFFFF">+' + _root.withComma(gardenExp) + '</font>\nMax Harvests: <font color="#CCFF00">' + _root.withComma(Math.floor((expiryTime - 1) / harvestTime)) + '</font>\n\nTotal: <font color="#FFFF00">' + _root.withComma(harvestValue * Math.floor((expiryTime - 1) / harvestTime)) + '</font> Coins\n(Per Second: <font color="#FFFF00">' + _root.withComma(harvestValue / harvestTime) + '</font> Coins)';
        _root.actiondescription += '\n---------\nHarvest Count: <b>' + _root.withComma(_root.save.gardenMastery[ID]) + '</b>';
        if (tempMax != true) {
          _root.actiondescription += '\n\n<font color=\'#CCFF00\'>[Mastery: <b>' + Math.floor(_root.save.gardenMastery[ID] / 10) + '%</b>]\nHarvest from this tree more times to increase Harvest Value and the amount of Garden EXP given by this tree.</font>';
        } else {
          _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[Mastery: <b>100%</b>]\nYou have achieved complete mastery for this tree.</font>';
        }
        _root.actiondescription += '\n---------\nYou have: <b>' + _root.save.gardenSeed[ID] + '</b> Seeds';
      };

      onRollOut = function () {
        _root.actiondescription = '';
      };

      onRelease = function () {
        if (_parent.breedScreen != true) {
          if (_root.save.gardenSeed[ID] > 0) {
            _root.treeName = 'Another Tree #' + (ID - 25);
            _root.treeToPlant = ID;
            _root.tree_coinCost = 0;
            _root.tree_greenCoinCost = 0;
            _root.tree_blueCoinCost = 0;
            _root.tree_gardenPointCost = 0;
            _root.tree_harvestValue = Math.round(harvestValue / multiplier);
            _root.tree_harvestTime = harvestTime;
            _root.tree_expiryTime = expiryTime;
            _root.tree_exp = gardenExp;
            _parent._parent._parent.treeNameText.text = 'Another Tree #' + (ID - 25);
            _parent._parent._parent.treeValueText.text = _root.withComma(harvestValue);
            _parent._parent._parent.treeHarvestText.text = _root.convertSecFull(harvestTime);
            _parent._parent._parent.treeExpiryText.text = _root.convertSecFull(expiryTime);
            _parent._parent._parent.treeExpText.text = '+' + _root.withComma(gardenExp);
            _parent._parent.targetX = -510;
          }
        } else {
          if (_root.save.gardenSeed[ID] >= 10) {
            if (_root.breedSeed1 == 0) {
              _root.breedSeed1 = ID;
              _root.showPopup('Select 1 More', 'Please select 1 more seed type to breed with seed #' + (ID - 25) + '. If you wish to cancel, click the \'X\' button above.');
            } else {
              if (_root.breedSeed1 != ID) {
                _root.save.gardenSeed[_root.breedSeed1] -= 10;
                _root.save.gardenSeed[ID] -= 10;
                _root.save.gardenBreed1 = _root.breedSeed1;
                _root.save.gardenBreed2 = ID;
                _root.save.gardenBreedResearch = 0;
                _parent.gotoAndStop(2);
              }
            }
          }
        }
        _root.actiondescription = '';
      };

    }
  }

  movieClip 3186  {

    frame 1 {
      breedScreen = false;
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 26;
        harvestValue = 200000;
        harvestTime = 3600;
        expiryTime = harvestTime * 25.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 27;
        harvestValue = 250000;
        harvestTime = 3900;
        expiryTime = harvestTime * 26.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 28;
        harvestValue = 260000;
        harvestTime = 4200;
        expiryTime = harvestTime * 27.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 29;
        harvestValue = 280000;
        harvestTime = 4500;
        expiryTime = harvestTime * 28.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 30;
        harvestValue = 300000;
        harvestTime = 4800;
        expiryTime = harvestTime * 29.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 31;
        harvestValue = 320000;
        harvestTime = 5100;
        expiryTime = harvestTime * 30.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 32;
        harvestValue = 340000;
        harvestTime = 5400;
        expiryTime = harvestTime * 31.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 33;
        harvestValue = 360000;
        harvestTime = 5700;
        expiryTime = harvestTime * 32.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 34;
        harvestValue = 380000;
        harvestTime = 6000;
        expiryTime = harvestTime * 33.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 35;
        harvestValue = 400000;
        harvestTime = 6300;
        expiryTime = harvestTime * 34.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 36;
        harvestValue = 420000;
        harvestTime = 6600;
        expiryTime = harvestTime * 35.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 37;
        harvestValue = 440000;
        harvestTime = 6900;
        expiryTime = harvestTime * 36.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 38;
        harvestValue = 460000;
        harvestTime = 7200;
        expiryTime = harvestTime * 37.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 39;
        harvestValue = 490000;
        harvestTime = 7800;
        expiryTime = harvestTime * 39.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 40;
        harvestValue = 520000;
        harvestTime = 8400;
        expiryTime = harvestTime * 41.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 41;
        harvestValue = 550000;
        harvestTime = 9000;
        expiryTime = harvestTime * 43.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 42;
        harvestValue = 580000;
        harvestTime = 9600;
        expiryTime = harvestTime * 45.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 43;
        harvestValue = 610000;
        harvestTime = 10200;
        expiryTime = harvestTime * 47.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 44;
        harvestValue = 640000;
        harvestTime = 10800;
        expiryTime = harvestTime * 49.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 45;
        harvestValue = 670000;
        harvestTime = 11400;
        expiryTime = harvestTime * 51.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 46;
        harvestValue = 700000;
        harvestTime = 12000;
        expiryTime = harvestTime * 53.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 47;
        harvestValue = 730000;
        harvestTime = 12600;
        expiryTime = harvestTime * 55.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 48;
        harvestValue = 760000;
        harvestTime = 13200;
        expiryTime = harvestTime * 57.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 49;
        harvestValue = 790000;
        harvestTime = 13800;
        expiryTime = harvestTime * 59.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 50;
        harvestValue = 820000;
        harvestTime = 14400;
        expiryTime = harvestTime * 61.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 51;
        harvestValue = 750000;
        harvestTime = 14400;
        expiryTime = harvestTime * 64.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 52;
        harvestValue = 850000;
        harvestTime = 13800;
        expiryTime = harvestTime * 60.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 53;
        harvestValue = 775000;
        harvestTime = 13200;
        expiryTime = harvestTime * 56.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 54;
        harvestValue = 750000;
        harvestTime = 12600;
        expiryTime = harvestTime * 52.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 55;
        harvestValue = 725000;
        harvestTime = 12000;
        expiryTime = harvestTime * 48.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 56;
        harvestValue = 700000;
        harvestTime = 11400;
        expiryTime = harvestTime * 44.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 57;
        harvestValue = 675000;
        harvestTime = 10800;
        expiryTime = harvestTime * 40.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 58;
        harvestValue = 650000;
        harvestTime = 10200;
        expiryTime = harvestTime * 36.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 59;
        harvestValue = 625000;
        harvestTime = 9600;
        expiryTime = harvestTime * 32.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 60;
        harvestValue = 600000;
        harvestTime = 9000;
        expiryTime = harvestTime * 28.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 61;
        harvestValue = 575000;
        harvestTime = 8400;
        expiryTime = harvestTime * 24.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 62;
        harvestValue = 550000;
        harvestTime = 7800;
        expiryTime = harvestTime * 20.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 63;
        harvestValue = 525000;
        harvestTime = 7200;
        expiryTime = harvestTime * 16.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 64;
        harvestValue = 480000;
        harvestTime = 6600;
        expiryTime = harvestTime * 15.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 65;
        harvestValue = 440000;
        harvestTime = 6000;
        expiryTime = harvestTime * 14.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 66;
        harvestValue = 400000;
        harvestTime = 5400;
        expiryTime = harvestTime * 13.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 67;
        harvestValue = 360000;
        harvestTime = 4800;
        expiryTime = harvestTime * 12.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 68;
        harvestValue = 320000;
        harvestTime = 4200;
        expiryTime = harvestTime * 11.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 69;
        harvestValue = 280000;
        harvestTime = 3600;
        expiryTime = harvestTime * 10.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 70;
        harvestValue = 240000;
        harvestTime = 3000;
        expiryTime = harvestTime * 9.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 71;
        harvestValue = 200000;
        harvestTime = 2400;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 72;
        harvestValue = 160000;
        harvestTime = 1800;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 73;
        harvestValue = 120000;
        harvestTime = 1200;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 74;
        harvestValue = 100000;
        harvestTime = 900;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 75;
        harvestValue = 80000;
        harvestTime = 600;
        expiryTime = harvestTime * 4.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 76;
        harvestValue = 35000;
        harvestTime = 300;
        expiryTime = harvestTime * 4.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 77;
        harvestValue = 55000;
        harvestTime = 360;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 78;
        harvestValue = 60000;
        harvestTime = 420;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 79;
        harvestValue = 65000;
        harvestTime = 480;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 80;
        harvestValue = 75000;
        harvestTime = 600;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 81;
        harvestValue = 85000;
        harvestTime = 720;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 82;
        harvestValue = 95000;
        harvestTime = 900;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 83;
        harvestValue = 105000;
        harvestTime = 1020;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 84;
        harvestValue = 115000;
        harvestTime = 1200;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 85;
        harvestValue = 125000;
        harvestTime = 1320;
        expiryTime = harvestTime * 9.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 86;
        harvestValue = 135000;
        harvestTime = 1500;
        expiryTime = harvestTime * 10.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 87;
        harvestValue = 145000;
        harvestTime = 1620;
        expiryTime = harvestTime * 11.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 88;
        harvestValue = 155000;
        harvestTime = 1800;
        expiryTime = harvestTime * 12.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 89;
        harvestValue = 160000;
        harvestTime = 1920;
        expiryTime = harvestTime * 13.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 90;
        harvestValue = 165000;
        harvestTime = 2100;
        expiryTime = harvestTime * 14.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 91;
        harvestValue = 170000;
        harvestTime = 2220;
        expiryTime = harvestTime * 15.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 92;
        harvestValue = 175000;
        harvestTime = 2400;
        expiryTime = harvestTime * 16.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 93;
        harvestValue = 180000;
        harvestTime = 2520;
        expiryTime = harvestTime * 17.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 94;
        harvestValue = 185000;
        harvestTime = 2700;
        expiryTime = harvestTime * 18.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 95;
        harvestValue = 190000;
        harvestTime = 2820;
        expiryTime = harvestTime * 19.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 96;
        harvestValue = 195000;
        harvestTime = 3000;
        expiryTime = harvestTime * 20.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 97;
        harvestValue = 200000;
        harvestTime = 3120;
        expiryTime = harvestTime * 21.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 98;
        harvestValue = 205000;
        harvestTime = 3300;
        expiryTime = harvestTime * 22.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 99;
        harvestValue = 210000;
        harvestTime = 3420;
        expiryTime = harvestTime * 23.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 100;
        harvestValue = 215000;
        harvestTime = 3600;
        expiryTime = harvestTime * 24.5;
      }
    }
  }

  // unknown tag 88 length 81

  movieClip 3201  {

    frame 1 {
      breedScreen = true;
      _root.breedSeed1 = 0;
      stop();
      if (_root.save.gardenBreed1 != 0) {
        gotoAndStop(2);
      }
      _root.actiondescription = '';
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 26;
        harvestValue = 200000;
        harvestTime = 3600;
        expiryTime = harvestTime * 25.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 27;
        harvestValue = 250000;
        harvestTime = 3900;
        expiryTime = harvestTime * 26.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 28;
        harvestValue = 260000;
        harvestTime = 4200;
        expiryTime = harvestTime * 27.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 29;
        harvestValue = 280000;
        harvestTime = 4500;
        expiryTime = harvestTime * 28.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 30;
        harvestValue = 300000;
        harvestTime = 4800;
        expiryTime = harvestTime * 29.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 31;
        harvestValue = 320000;
        harvestTime = 5100;
        expiryTime = harvestTime * 30.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 32;
        harvestValue = 340000;
        harvestTime = 5400;
        expiryTime = harvestTime * 31.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 33;
        harvestValue = 360000;
        harvestTime = 5700;
        expiryTime = harvestTime * 32.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 34;
        harvestValue = 380000;
        harvestTime = 6000;
        expiryTime = harvestTime * 33.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 35;
        harvestValue = 400000;
        harvestTime = 6300;
        expiryTime = harvestTime * 34.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 36;
        harvestValue = 420000;
        harvestTime = 6600;
        expiryTime = harvestTime * 35.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 37;
        harvestValue = 440000;
        harvestTime = 6900;
        expiryTime = harvestTime * 36.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 38;
        harvestValue = 460000;
        harvestTime = 7200;
        expiryTime = harvestTime * 37.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 39;
        harvestValue = 490000;
        harvestTime = 7800;
        expiryTime = harvestTime * 39.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 40;
        harvestValue = 520000;
        harvestTime = 8400;
        expiryTime = harvestTime * 41.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 41;
        harvestValue = 550000;
        harvestTime = 9000;
        expiryTime = harvestTime * 43.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 42;
        harvestValue = 580000;
        harvestTime = 9600;
        expiryTime = harvestTime * 45.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 43;
        harvestValue = 610000;
        harvestTime = 10200;
        expiryTime = harvestTime * 47.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 44;
        harvestValue = 640000;
        harvestTime = 10800;
        expiryTime = harvestTime * 49.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 45;
        harvestValue = 670000;
        harvestTime = 11400;
        expiryTime = harvestTime * 51.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 46;
        harvestValue = 700000;
        harvestTime = 12000;
        expiryTime = harvestTime * 53.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 47;
        harvestValue = 730000;
        harvestTime = 12600;
        expiryTime = harvestTime * 55.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 48;
        harvestValue = 760000;
        harvestTime = 13200;
        expiryTime = harvestTime * 57.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 49;
        harvestValue = 790000;
        harvestTime = 13800;
        expiryTime = harvestTime * 59.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 50;
        harvestValue = 820000;
        harvestTime = 14400;
        expiryTime = harvestTime * 61.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 51;
        harvestValue = 750000;
        harvestTime = 14400;
        expiryTime = harvestTime * 64.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 52;
        harvestValue = 850000;
        harvestTime = 13800;
        expiryTime = harvestTime * 60.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 53;
        harvestValue = 775000;
        harvestTime = 13200;
        expiryTime = harvestTime * 56.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 54;
        harvestValue = 750000;
        harvestTime = 12600;
        expiryTime = harvestTime * 52.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 55;
        harvestValue = 725000;
        harvestTime = 12000;
        expiryTime = harvestTime * 48.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 56;
        harvestValue = 700000;
        harvestTime = 11400;
        expiryTime = harvestTime * 44.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 57;
        harvestValue = 675000;
        harvestTime = 10800;
        expiryTime = harvestTime * 40.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 58;
        harvestValue = 650000;
        harvestTime = 10200;
        expiryTime = harvestTime * 36.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 59;
        harvestValue = 625000;
        harvestTime = 9600;
        expiryTime = harvestTime * 32.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 60;
        harvestValue = 600000;
        harvestTime = 9000;
        expiryTime = harvestTime * 28.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 61;
        harvestValue = 575000;
        harvestTime = 8400;
        expiryTime = harvestTime * 24.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 62;
        harvestValue = 550000;
        harvestTime = 7800;
        expiryTime = harvestTime * 20.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 63;
        harvestValue = 525000;
        harvestTime = 7200;
        expiryTime = harvestTime * 16.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 64;
        harvestValue = 480000;
        harvestTime = 6600;
        expiryTime = harvestTime * 15.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 65;
        harvestValue = 440000;
        harvestTime = 6000;
        expiryTime = harvestTime * 14.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 66;
        harvestValue = 400000;
        harvestTime = 5400;
        expiryTime = harvestTime * 13.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 67;
        harvestValue = 360000;
        harvestTime = 4800;
        expiryTime = harvestTime * 12.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 68;
        harvestValue = 320000;
        harvestTime = 4200;
        expiryTime = harvestTime * 11.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 69;
        harvestValue = 280000;
        harvestTime = 3600;
        expiryTime = harvestTime * 10.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 70;
        harvestValue = 240000;
        harvestTime = 3000;
        expiryTime = harvestTime * 9.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 71;
        harvestValue = 200000;
        harvestTime = 2400;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 72;
        harvestValue = 160000;
        harvestTime = 1800;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 73;
        harvestValue = 120000;
        harvestTime = 1200;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 74;
        harvestValue = 100000;
        harvestTime = 900;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 75;
        harvestValue = 80000;
        harvestTime = 600;
        expiryTime = harvestTime * 4.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 76;
        harvestValue = 35000;
        harvestTime = 300;
        expiryTime = harvestTime * 4.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 77;
        harvestValue = 55000;
        harvestTime = 360;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 78;
        harvestValue = 60000;
        harvestTime = 420;
        expiryTime = harvestTime * 5.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 79;
        harvestValue = 65000;
        harvestTime = 480;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 80;
        harvestValue = 75000;
        harvestTime = 600;
        expiryTime = harvestTime * 6.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 81;
        harvestValue = 85000;
        harvestTime = 720;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 82;
        harvestValue = 95000;
        harvestTime = 900;
        expiryTime = harvestTime * 7.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 83;
        harvestValue = 105000;
        harvestTime = 1020;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 84;
        harvestValue = 115000;
        harvestTime = 1200;
        expiryTime = harvestTime * 8.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 85;
        harvestValue = 125000;
        harvestTime = 1320;
        expiryTime = harvestTime * 9.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 86;
        harvestValue = 135000;
        harvestTime = 1500;
        expiryTime = harvestTime * 10.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 87;
        harvestValue = 145000;
        harvestTime = 1620;
        expiryTime = harvestTime * 11.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 88;
        harvestValue = 155000;
        harvestTime = 1800;
        expiryTime = harvestTime * 12.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 89;
        harvestValue = 160000;
        harvestTime = 1920;
        expiryTime = harvestTime * 13.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 90;
        harvestValue = 165000;
        harvestTime = 2100;
        expiryTime = harvestTime * 14.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 91;
        harvestValue = 170000;
        harvestTime = 2220;
        expiryTime = harvestTime * 15.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 92;
        harvestValue = 175000;
        harvestTime = 2400;
        expiryTime = harvestTime * 16.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 93;
        harvestValue = 180000;
        harvestTime = 2520;
        expiryTime = harvestTime * 17.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 94;
        harvestValue = 185000;
        harvestTime = 2700;
        expiryTime = harvestTime * 18.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 95;
        harvestValue = 190000;
        harvestTime = 2820;
        expiryTime = harvestTime * 19.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 96;
        harvestValue = 195000;
        harvestTime = 3000;
        expiryTime = harvestTime * 20.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 97;
        harvestValue = 200000;
        harvestTime = 3120;
        expiryTime = harvestTime * 21.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 98;
        harvestValue = 205000;
        harvestTime = 3300;
        expiryTime = harvestTime * 22.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 99;
        harvestValue = 210000;
        harvestTime = 3420;
        expiryTime = harvestTime * 23.5;
      }
    }

    instance of movieClip 3184  {

      onClipEvent (load) {
        ID = 100;
        harvestValue = 215000;
        harvestTime = 3600;
        expiryTime = harvestTime * 24.5;
      }
    }

    frame 2 {
      researchD = Math.floor(Math.sqrt(_root.save.gardenEXP) / 2);
      if (researchD > 2000) {
        researchD = 2000;
      }
      reqResearch = 3000 - researchD;
      onEnterFrame = function () {
        if (_root.save.gardenResearch >= reqResearch) {
          possibility = random(4);
          if (possibility == 0) {
            _root.save.gardenBreedReward = Math.floor((_root.save.gardenBreed1 + _root.save.gardenBreed2) / 2);
          } else {
            if (possibility == 1) {
              _root.save.gardenBreedReward = Math.ceil((_root.save.gardenBreed1 + _root.save.gardenBreed2) / 2);
            } else {
              if (possibility == 2) {
                _root.save.gardenBreedReward = Math.floor((_root.save.gardenBreed1 + 75 + _root.save.gardenBreed2) / 2);
                if (_root.save.gardenBreedReward > 100) {
                  _root.save.gardenBreedReward -= 75;
                }
              } else {
                if (possibility == 3) {
                  _root.save.gardenBreedReward = Math.ceil((_root.save.gardenBreed1 + 75 + _root.save.gardenBreed2) / 2);
                  if (_root.save.gardenBreedReward > 100) {
                    _root.save.gardenBreedReward -= 75;
                  }
                }
              }
            }
          }
          _root.save.gardenBreedRewardC = 25 + random(6);
          if (_root.save.permaBanPenalty[23] == 3) {
            _root.save.gardenBreedRewardC += 15;
          } else {
            if (_root.save.permaBanPenalty[23] == 2) {
              _root.save.gardenBreedRewardC += 10;
            } else {
              if (_root.save.permaBanPenalty[23] == 1) {
                _root.save.gardenBreedRewardC += 5;
              }
            }
          }
          _root.save.gardenBreedTotal += _root.save.gardenBreedRewardC;
          _root.gainCareerEXP(2, 500, true);
          gotoAndStop(3);
        }
      };

      _root.actiondescription = '';
    }

    instance of movieClip 1914  {

      onClipEvent (load) {
        insideBar.xscale = 0;
        bg.gotoAndStop(2);
        insideBar.gotoAndStop(2);
        textBox.textColor = 16764108;
      }

      onClipEvent (enterFrame) {
        textBox.text = _root.withComma(_root.save.gardenResearch) + ' / ' + _root.withComma(_parent.reqResearch);
        insideBar.xscale = (_root.save.gardenResearch / _parent.reqResearch) * 100;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenPoint >= 300 && _root.save.gardenResearch < _parent.reqResearch) {
          _root.save.gardenPoint -= 300;
          _root.save.gardenResearch += Math.floor(_parent.reqResearch / 10);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (Key.isDown(16)) {
          _root.save.gardenBreed1 = 0;
          _root.save.gardenBreed2 = 0;
          _root.save.gardenResearch = 0;
          _parent.gotoAndStop(1);
        }
      }
    }

    instance seedGraphic of movieClip 3183  {

      onClipEvent (load) {
        ID = _root.save.gardenBreed1;
        gotoAndStop(ID);
        blah = true;
      }
    }

    instance seedGraphic of movieClip 3183  {

      onClipEvent (load) {
        ID = _root.save.gardenBreed2;
        gotoAndStop(ID);
        blah = true;
      }
    }

    frame 3 {
      _root.save.gardenSeed[_root.save.gardenBreedReward] += _root.save.gardenBreedRewardC;
      breedCount.text = '+' + _root.save.gardenBreedRewardC;
      if (_root.save.questType == 'Breed') {
        _root.save.questCount += _root.save.gardenBreedRewardC;
      }
      _root.save.gardenBreed1 = 0;
      _root.save.gardenBreed2 = 0;
      _root.save.gardenResearch = 0;
      _root.actiondescription = '';
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance seedGraphic of movieClip 3183  {

      onClipEvent (load) {
        ID = _root.save.gardenBreedReward;
        gotoAndStop(ID);
      }
    }
  }

  movieClip 3214  {
  }

  movieClip 3224  {
  }

  movieClip 3244  {
  }

  movieClip 3245  {

    frame 1 {
      stop();
    }

    instance of movieClip 3172  {

      onClipEvent (release) {
      }
    }

    frame 4 {
      fruitCount.text = _root.withComma(_root.save.gardenFruit);
      onEnterFrame = function () {
        fruitCount.text = _root.withComma(_root.save.gardenFruit);
      };

    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (Key.isDown(16) && this.hitTest(_root.cursor._x, _root.cursor._y, true)) {
          if (_root.save.gardenFruit >= 10 && _root.save.gardenFullness <= 9990) {
            _root.save.gardenFruit -= 10;
            _root.save.gardenFullness += 10;
            if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
              _root.save.gardenFullness += 40;
            } else {
              if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
                _root.save.gardenFullness += 10;
              }
            }
            if (_root.save.gardenFullness > 10000) {
              _root.save.gardenFullness = 10000;
            }
            _root.gainEXP(Math.floor(400000 * Math.pow(_root.save.level, 0.6)));
            _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(400000 * Math.pow(_root.save.level, 0.6))) + ' EXP!');
          } else {
            if (_root.save.gardenFullness >= 9990) {
              _root.showPopup('Cannot Eat', 'You are too full to eat more Randomfruit at the moment.');
            }
          }
        }
      }

      onClipEvent (release) {
        if (_root.save.gardenFruit >= 10 && _root.save.gardenFullness <= 9990) {
          _root.save.gardenFruit -= 10;
          _root.save.gardenFullness += 10;
          if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
            _root.save.gardenFullness += 40;
          } else {
            if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
              _root.save.gardenFullness += 10;
            }
          }
          if (_root.save.gardenFullness > 10000) {
            _root.save.gardenFullness = 10000;
          }
          _root.gainEXP(Math.floor(400000 * Math.pow(_root.save.level, 0.6)));
          _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(400000 * Math.pow(_root.save.level, 0.6))) + ' EXP!');
        } else {
          if (_root.save.gardenFullness >= 9990) {
            _root.showPopup('Cannot Eat', 'You are too full to eat more Randomfruit at the moment.');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (Key.isDown(16) && this.hitTest(_root.cursor._x, _root.cursor._y, true)) {
          if (_root.save.gardenFruit >= 10) {
            _root.save.gardenFruit -= 10;
            _root.gainCoin(Math.floor(250000 * Math.pow(_root.save.level, 0.6)));
            _root.save.gardenPoint += 100;
            _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(250000 * Math.pow(_root.save.level, 0.6))) + ' Coins + 100 Garden Points!');
          }
        }
      }

      onClipEvent (release) {
        if (_root.save.gardenFruit >= 10) {
          _root.save.gardenFruit -= 10;
          _root.gainCoin(Math.floor(250000 * Math.pow(_root.save.level, 0.6)));
          _root.save.gardenPoint += 100;
          _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(250000 * Math.pow(_root.save.level, 0.6))) + ' Coins + 100 Garden Points!');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenPoint >= 1500) {
          _root.save.gardenPoint -= 1500;
          _root.save.gardenFruit += 10;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenPoint >= 100000) {
          _root.save.gardenPoint -= 100000;
          _root.save.gardenFruit += 750;
        }
      }
    }

    instance of movieClip 3214  {

      onClipEvent (enterFrame) {
        _xscale = 100 - _root.save.gardenFullness / 100;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (Key.isDown(16) && this.hitTest(_root.cursor._x, _root.cursor._y, true)) {
          if (_root.save.gardenFruit >= 1000) {
            _root.save.gardenFruit -= 1000;
            _root.gainCoin(Math.floor(25000000 * Math.pow(_root.save.level, 0.6)));
            _root.save.gardenPoint += 10000;
            _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(25000000 * Math.pow(_root.save.level, 0.6))) + ' Coins + 10,000 Garden Points!');
          }
        }
      }

      onClipEvent (release) {
        if (_root.save.gardenFruit >= 1000) {
          _root.save.gardenFruit -= 1000;
          _root.gainCoin(Math.floor(25000000 * Math.pow(_root.save.level, 0.6)));
          _root.save.gardenPoint += 10000;
          _root.dispNews(172, 'Gained: ' + _root.withComma(Math.floor(25000000 * Math.pow(_root.save.level, 0.6))) + ' Coins + 10,000 Garden Points!');
        }
      }
    }

    frame 5 {
      onEnterFrame = function () {
        _root.save.aagStat4 = Math.round(_root.save.aagStat4 / 5) * 5;
        harvestTime = Math.floor(180000 / (100 + _root.save.aagStat1));
        expiryTime = Math.floor(4800 + _root.save.aagStat2 * (_root.save.aagStat2 + 100));
        harvestValue = Math.floor(Math.pow(Math.min(_root.save.gardenEXP / 1000, 1000000), 0.3) * 5 * (100 + _root.save.aagStat3 + _root.save.aagStat3 * _root.save.aagStat3 / 200) / 4000 + _root.save.aagStat3) * 1000;
        gardenExp = Math.floor(10 + _root.save.aagStat4 / 5);
        multiplier = Math.floor(Math.pow(_root.save.level, 0.6)) / 10 + 6.5;
        harvestValue = Math.round(harvestValue * multiplier);
        mul = 1.428571428571429;
        mul *= 1 - Math.min(Math.floor(_root.save.totalStupidity / 10), 30) * 0.01;
        harvestTime = Math.round(harvestTime * (1 - Math.min(Math.floor(_root.save.totalStupidity / 10), 30) * 0.01));
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Wait time to harvest trees in Garden is reduced by 25%') {
            harvestTime = Math.floor(harvestTime * 0.75);
            mul *= 0.75;
          }
          ++i;
        }
        if (_root.save.permaBanPenalty[33] == 3) {
          harvestValue = Math.round(harvestValue * 1.5);
          expiryTime = Math.round(expiryTime * 1.5);
          mul /= 1.5;
        } else {
          if (_root.save.permaBanPenalty[33] == 2) {
            harvestValue = Math.round(harvestValue * 1.3);
            expiryTime = Math.round(expiryTime * 1.3);
            mul /= 1.3;
          } else {
            if (_root.save.permaBanPenalty[33] == 1) {
              harvestValue = Math.round(harvestValue * 1.2);
              expiryTime = Math.round(expiryTime * 1.2);
              mul /= 1.2;
            }
          }
        }
        harvestCount = Math.floor((expiryTime - 1) / harvestTime);
        cost1 = Math.floor((Math.pow((harvestCount * (50 + Math.min(harvestCount, 100)) / 150) * mul * (_root.save.aagStat3 * _root.save.aagStat3 + 10000) * 100, 1.1) * (100 + _root.save.aagStat1) * 0.9 / 200000000) * ((50 + gardenExp * 3) / 100) * 1.25) * 500000;
        cost2 = Math.floor((((_root.save.aagStat1 * _root.save.aagStat1 + 2000) * (_root.save.aagStat2 * _root.save.aagStat2 + 2000) * (_root.save.aagStat3 * _root.save.aagStat3 + 2000) / 1000000000 + 912) * 8 / 150) * ((50 + gardenExp * 3) / 100)) * 250;
        cost3 = Math.floor(cost2 * 3 / 8000 + ((_root.save.aagStat1 + 100) * (_root.save.aagStat2 + 100) * (_root.save.aagStat3 + 100) / 100000) * ((50 + gardenExp * 3) / 200)) * 2 - 40;
        if (cost1 > 10000000000.0 || _root.save.aagStat1 == 200 && _root.save.aagStat2 == 200 && _root.save.aagStat3 == 200 && _root.save.aagStat4 == 200) {
          cost1 = 10000000000.0;
        }
        if (cost3 < 0) {
          cost3 = 0;
        }
        cost4 = Math.floor(cost1 / 2500000 + cost2 / 1000 + cost3 / 1) * 10;
        if (_root.save.careerLevel[2] >= 100) {
          gardenExp = Math.floor(gardenExp * 1.2);
        }
        treeStat1Text.text = _root.convertSecFull(harvestTime);
        treeStat2Text.text = _root.convertSecFull(expiryTime);
        treeStat3Text.text = _root.withComma(harvestValue);
        treeStat4Text.text = _root.withComma(harvestCount);
        treeStat5Text.text = '+' + _root.withComma(gardenExp);
        treeCost1Text.text = _root.withComma(cost1);
        treeCost2Text.text = _root.withComma(cost2);
        treeCost3Text.text = _root.withComma(cost3);
        treeCost4Text.text = _root.withComma(cost4);
      };

    }

    instance of movieClip 3224  {

      onClipEvent (enterFrame) {
        _width = _root.save.aagStat1;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat1 -= 1;
        if (_root.save.aagStat1 < 0) {
          _root.save.aagStat1 = 0;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat1 += 1;
        if (_root.save.aagStat1 > 200) {
          _root.save.aagStat1 = 200;
        }
      }
    }

    instance of movieClip 3224  {

      onClipEvent (enterFrame) {
        _width = _root.save.aagStat2;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat2 -= 1;
        if (_root.save.aagStat2 < 0) {
          _root.save.aagStat2 = 0;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat2 += 1;
        if (_root.save.aagStat2 > 200) {
          _root.save.aagStat2 = 200;
        }
      }
    }

    instance of movieClip 3224  {

      onClipEvent (enterFrame) {
        _width = _root.save.aagStat3;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat3 -= 1;
        if (_root.save.aagStat3 < 0) {
          _root.save.aagStat3 = 0;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat3 += 1;
        if (_root.save.aagStat3 > 200) {
          _root.save.aagStat3 = 200;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.treeName = '?????';
        _root.treeToPlant = 10;
        _root.tree_coinCost = _parent.cost1;
        _root.tree_greenCoinCost = _parent.cost2;
        _root.tree_blueCoinCost = _parent.cost3;
        _root.tree_gardenPointCost = 0;
        _root.tree_harvestValue = Math.round(_parent.harvestValue / _parent.multiplier);
        _root.tree_harvestTime = _parent.harvestTime;
        _root.tree_expiryTime = _parent.expiryTime;
        _root.tree_exp = _parent.gardenExp;
        _parent._parent.treeNameText.text = _root.treeName;
        _parent._parent.treeValueText.text = _root.withComma(_parent.harvestValue);
        _parent._parent.treeHarvestText.text = _root.convertSecFull(_parent.harvestTime);
        _parent._parent.treeExpiryText.text = _root.convertSecFull(_parent.expiryTime);
        _parent._parent.treeExpText.text = '+' + _root.withComma(_parent.gardenExp);
        _parent._parent.treeCost1Text.text = _root.withComma(_root.tree_coinCost);
        _parent._parent.treeCost2Text.text = _root.withComma(_root.tree_greenCoinCost);
        _parent._parent.treeCost3Text.text = _root.withComma(_root.tree_blueCoinCost);
        _parent._parent.treeCost4Text.text = _root.withComma(_root.tree_gardenPointCost);
        _parent.targetX = -510;
        _parent.gotoAndStop(3);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.treeName = '?????';
        _root.treeToPlant = 10;
        _root.tree_coinCost = 0;
        _root.tree_greenCoinCost = 0;
        _root.tree_blueCoinCost = 0;
        _root.tree_gardenPointCost = _parent.cost4;
        _root.tree_harvestValue = Math.round(_parent.harvestValue / _parent.multiplier);
        _root.tree_harvestTime = _parent.harvestTime;
        _root.tree_expiryTime = _parent.expiryTime;
        _root.tree_exp = _parent.gardenExp;
        _parent._parent.treeNameText.text = _root.treeName;
        _parent._parent.treeValueText.text = _root.withComma(_parent.harvestValue);
        _parent._parent.treeHarvestText.text = _root.convertSecFull(_parent.harvestTime);
        _parent._parent.treeExpiryText.text = _root.convertSecFull(_parent.expiryTime);
        _parent._parent.treeExpText.text = '+' + _root.withComma(_parent.gardenExp);
        _parent._parent.treeCost1Text.text = _root.withComma(_root.tree_coinCost);
        _parent._parent.treeCost2Text.text = _root.withComma(_root.tree_greenCoinCost);
        _parent._parent.treeCost3Text.text = _root.withComma(_root.tree_blueCoinCost);
        _parent._parent.treeCost4Text.text = _root.withComma(_root.tree_gardenPointCost);
        _parent.targetX = -510;
        _parent.gotoAndStop(3);
      }
    }

    instance of movieClip 3224  {

      onClipEvent (enterFrame) {
        _width = _root.save.aagStat4;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat4 -= 5;
        if (_root.save.aagStat4 < 0) {
          _root.save.aagStat4 = 0;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.aagStat4 += 5;
        if (_root.save.aagStat4 > 200) {
          _root.save.aagStat4 = 200;
        }
      }
    }

    instance of movieClip 3244  {

      onClipEvent (enterFrame) {
        if (holding == true) {
          tempX = Math.round(_parent._xmouse - 275);
          if (tempX > 200) {
            tempX = 200;
          }
          if (tempX < 0) {
            tempX = 0;
          }
          _root.save.aagStat4 = tempX;
        }
      }

      onClipEvent (press) {
        holding = true;
      }

      onClipEvent (release, releaseOutside) {
        holding = false;
      }
    }

    instance of movieClip 3244  {

      onClipEvent (enterFrame) {
        if (holding == true) {
          tempX = Math.round(_parent._xmouse - 275);
          if (tempX > 200) {
            tempX = 200;
          }
          if (tempX < 0) {
            tempX = 0;
          }
          _root.save.aagStat1 = tempX;
        }
      }

      onClipEvent (press) {
        holding = true;
      }

      onClipEvent (release, releaseOutside) {
        holding = false;
      }
    }

    instance of movieClip 3244  {

      onClipEvent (enterFrame) {
        if (holding == true) {
          tempX = Math.round(_parent._xmouse - 275);
          if (tempX > 200) {
            tempX = 200;
          }
          if (tempX < 0) {
            tempX = 0;
          }
          _root.save.aagStat2 = tempX;
        }
      }

      onClipEvent (press) {
        holding = true;
      }

      onClipEvent (release, releaseOutside) {
        holding = false;
      }
    }

    instance of movieClip 3244  {

      onClipEvent (enterFrame) {
        if (holding == true) {
          tempX = Math.round(_parent._xmouse - 275);
          if (tempX > 200) {
            tempX = 200;
          }
          if (tempX < 0) {
            tempX = 0;
          }
          _root.save.aagStat3 = tempX;
        }
      }

      onClipEvent (press) {
        holding = true;
      }

      onClipEvent (release, releaseOutside) {
        holding = false;
      }
    }
  }

  movieClip 3268  {

    frame 1 {
      stop();
      _root.treeGrade = new Array();
      _root.treeToPlant = -1;
      _root.treeName = '-';
      _root.tree_coinCost = '-';
      _root.tree_greenCoinCost = '-';
      _root.tree_blueCoinCost = '-';
      _root.tree_gardenPointCost = '-';
      _root.tree_harvestValue = '-';
      _root.tree_harvestTime = 0;
      _root.tree_expiryTime = 0;
      _root.tree_exp = 0;
      treeNameText.text = '';
      treeValueText.text = '';
      treeExpText.text = '';
      treeHarvestText.text = '';
      treeExpiryText.text = '';
      treeCost1Text.text = '';
      treeCost2Text.text = '';
      treeCost3Text.text = '';
      treeCost4Text.text = '';
      gardenExpText.text = _root.withComma(_root.save.gardenEXP);
      gardenPointText.text = _root.withComma(_root.save.gardenPoint);
      gardenCapacityText.text = _root.save.gardenCapacity;
      if (_root.save.gardenCapacity > 25) {
        gardenCapacityText.text = 25;
      }
      onEnterFrame = function () {
        if (gardenExpText.text != _root.withComma(_root.save.gardenEXP)) {
          gardenExpText.text = _root.withComma(_root.save.gardenEXP);
        }
        gardenPointText.text = _root.withComma(_root.save.gardenPoint);
        if (gardenPointText.text) {
          gardenPointText.text = _root.withComma(_root.save.gardenPoint);
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 0;
        costArray = [0, 50, 150, 300, 500, 750, 1000, 1250, 1500, 1750, 2000, 2500, 3000, 3500, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12500, 15000, 17500, 20000, Infinity];
      }

      onClipEvent (enterFrame) {
        costCoin = _root.save.gardenCapacity * _root.save.gardenCapacity * 500000;
        costPoint = costArray[_root.save.gardenCapacity];
        if (_root.saveid == 24) {
          costPoint = 10000000;
        }
        if (_root.save.gardenCapacity >= 25) {
          _alpha = 0;
        } else {
          if (_root.save.coin < costCoin || _root.save.gardenPoint < costPoint) {
            _alpha = 30;
          } else {
            _alpha = 100;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_alpha > 0) {
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.coin >= costCoin && _root.save.gardenPoint >= costPoint && _alpha > 0) {
          _root.save.coin -= costCoin;
          _root.save.gardenPoint -= costPoint;
          _root.save.gardenCapacity += 1;
          _parent.gardenCapacityText.text = _root.save.gardenCapacity;
          if (_root.save.gardenCapacity > 25) {
            _parent.gardenCapacityText.text = 25;
          }
          _root.dispNews(24, 'Plot #' + _root.save.gardenCapacity + ' unlocked! (-' + _root.withComma(costCoin) + ' Coins | -' + _root.withComma(costPoint) + ' Garden Points)');
          costCoin = _root.save.gardenCapacity * _root.save.gardenCapacity * 500000;
          costPoint = costArray[_root.save.gardenCapacity];
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 1;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 2;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 3;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 4;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 5;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 6;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 7;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 8;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 9;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 10;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 11;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 12;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 13;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 14;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 15;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 16;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 17;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 18;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 19;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 20;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 21;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 22;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 23;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 24;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 25;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click this button to plant in all available plots with the selected tree seed.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.treeToPlant != -1) {
          coinCost = _root.tree_coinCost;
          greenCoinCost = _root.tree_greenCoinCost;
          blueCoinCost = _root.tree_blueCoinCost;
          gardenPointCost = _root.tree_gardenPointCost;
          harvestTime = _root.tree_harvestTime;
          expiryTime = _root.tree_expiryTime;
          treeToPlant = _root.treeToPlant;
          treeExp = _root.tree_exp;
          tempCap = _root.save.gardenCapacity;
          if (_root.save.gardenCapacity > 25) {
            tempCap = 25;
          }
          treeCount = 0;
          i = 1;
          while (i <= tempCap) {
            harvestValue = Math.floor(_root.tree_harvestValue * (0.95 + _root.treeGrade[i] * 0.1 + Math.random() * 0.1));
            if (!isNaN(harvestValue) && _root.save.gardenTrees[i] <= 0 && _root.save.coin >= coinCost && _root.save.greenCoin >= greenCoinCost && _root.save.blueCoin >= blueCoinCost && _root.save.gardenPoint >= gardenPointCost) {
              treeCount += 1;
              _root.save.coin -= coinCost;
              _root.save.greenCoin -= greenCoinCost;
              _root.save.blueCoin -= blueCoinCost;
              _root.save.gardenPoint -= gardenPointCost;
              _root.save.gardenRecentTime[i] = _root.systemtimenow;
              _root.save.gardenPurchaseTime[i] = _root.systemtimenow;
              _root.save.gardenHarvestTime[i] = harvestTime * 1000;
              _root.save.gardenHarvestValue[i] = harvestValue;
              _root.save.gardenExpiryTime[i] = expiryTime * 1000;
              _root.save.gardenTreeExp[i] = treeExp;
              _root.save.gardenTreeFertilize[i] = 0;
              _root.save.gardenTreeModuleProc[i] = 0;
              _root.save.gardenTrees[i] = treeToPlant;
            }
            ++i;
          }
          if (coinCost > 0) {
            if (treeCount >= 2) {
              _root.dispNews(18, treeCount + ' trees planted! (-' + _root.withComma(coinCost * treeCount) + ' Coins)');
            } else {
              if (treeCount >= 1) {
                _root.dispNews(18, '1 tree planted! (-' + _root.withComma(coinCost) + ' Coins)');
              }
            }
          } else {
            if (gardenPointCost > 0) {
              if (treeCount >= 2) {
                _root.dispNews(18, treeCount + ' trees planted! (-' + _root.withComma(gardenPointCost * treeCount) + ' Garden Points)');
              } else {
                if (treeCount >= 1) {
                  _root.dispNews(18, '1 tree planted! (-' + _root.withComma(gardenPointCost) + ' Garden Points)');
                }
              }
            } else {
              if (treeCount >= 2) {
                _root.dispNews(18, treeCount + ' trees planted!');
              } else {
                if (treeCount >= 1) {
                  _root.dispNews(18, '1 tree planted!');
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Hold SHIFT and click this button to destroy all of your trees. Note that once your trees are destroyed, there is no coming back.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          if (_root.saveid == 23) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            tempCap = _root.save.gardenCapacity;
            if (_root.save.gardenCapacity > 25) {
              tempCap = 25;
            }
            i = 1;
            while (i <= tempCap) {
              if (_root.save.gardenTrees[i] > 0) {
                _root.save.curForestDestroyer += 1;
                if (_root.save.forestDestroyer < _root.save.curForestDestroyer) {
                  _root.save.forestDestroyer = _root.save.curForestDestroyer;
                }
                _root.save.gardenTrees[i] = 0;
              }
              ++i;
            }
          }
        }
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Free Tree';
        treeToPlant = 1;
        coinCost = 0;
        greenCoinCost = 0;
        blueCoinCost = 0;
        gardenPointCost = 0;
        harvestValue = 6000;
        harvestTime = 30;
        expiryTime = 315;
        gardenExp = 5;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Blue Tree';
        treeToPlant = 2;
        coinCost = 25000;
        greenCoinCost = 0;
        blueCoinCost = 0;
        gardenPointCost = 5;
        harvestValue = 40000;
        harvestTime = 270;
        expiryTime = 2520;
        gardenExp = 15;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Pink Tree';
        treeToPlant = 3;
        coinCost = 100000;
        greenCoinCost = 200;
        blueCoinCost = 0;
        gardenPointCost = 20;
        harvestValue = 125000;
        harvestTime = 900;
        expiryTime = 11400;
        gardenExp = 50;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Green Tree';
        treeToPlant = 4;
        coinCost = 500000;
        greenCoinCost = 1000;
        blueCoinCost = 0;
        gardenPointCost = 100;
        harvestValue = 200000;
        harvestTime = 2100;
        expiryTime = 36000;
        gardenExp = 100;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Lime Tree';
        treeToPlant = 5;
        coinCost = 2500000;
        greenCoinCost = 5000;
        blueCoinCost = 0;
        gardenPointCost = 500;
        harvestValue = 500000;
        harvestTime = 4500;
        expiryTime = 108000;
        gardenExp = 200;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Yellow Tree';
        treeToPlant = 6;
        coinCost = 10000000;
        greenCoinCost = 20000;
        blueCoinCost = 0;
        gardenPointCost = 2000;
        harvestValue = 1000000;
        harvestTime = 10800;
        expiryTime = 356400;
        gardenExp = 400;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Red Tree';
        treeToPlant = 7;
        coinCost = 40000000;
        greenCoinCost = 500000;
        blueCoinCost = 500;
        gardenPointCost = 20000;
        harvestValue = 600000;
        harvestTime = 3600;
        expiryTime = 84600;
        gardenExp = 250;
      }
    }

    instance of movieClip 3112  {

      onClipEvent (load) {
        treeName = 'Black Tree';
        treeToPlant = 8;
        coinCost = 160000000;
        greenCoinCost = 2000000;
        blueCoinCost = 2000;
        gardenPointCost = 80000;
        harvestValue = 3000000;
        harvestTime = 14400;
        expiryTime = 349200;
        gardenExp = 1250;
      }
    }

    instance of movieClip 3124  {

      onClipEvent (enterFrame) {
        targetLoc = _root.treeToPlant * 30 - 20;
        _x = _x + (targetLoc - _x) / 2;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenCapacity >= 25) {
          _parent.gotoAndStop(2);
        } else {
          _root.showPopup('Access Denied', 'You need to unlock all plots in this Garden to unlock Another Garden.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenCapacity >= 50) {
          _parent.gotoAndStop(3);
        } else {
          _root.showPopup('Access Denied', 'You need to unlock all plots in Another Garden to unlock Another Another Garden.');
        }
      }
    }

    frame 2 {
      stop();
      _root.treeGrade = new Array();
      _root.treeToPlant = -1;
      _root.treeName = '-';
      _root.tree_coinCost = '-';
      _root.tree_greenCoinCost = '-';
      _root.tree_blueCoinCost = '-';
      _root.tree_gardenPointCost = '-';
      _root.tree_harvestValue = '-';
      _root.tree_harvestTime = 0;
      _root.tree_expiryTime = 0;
      _root.tree_exp = 0;
      treeNameText.text = '';
      treeValueText.text = '';
      treeExpText.text = '';
      treeHarvestText.text = '';
      treeExpiryText.text = '';
      seedLeft.text = '';
      gardenExpText.text = _root.withComma(_root.save.gardenEXP);
      gardenPointText.text = _root.withComma(_root.save.gardenPoint);
      gardenCapacityText.text = _root.save.gardenCapacity - 25;
      if (_root.save.gardenCapacity > 50) {
        gardenCapacityText.text = 25;
      }
      checkD = 10;
      onEnterFrame = function () {
        gardenExpText.text = _root.withComma(_root.save.gardenEXP);
        gardenPointText.text = _root.withComma(_root.save.gardenPoint);
        gardenCapacityText.text = _root.save.gardenCapacity - 25;
        if (_root.save.gardenCapacity > 50) {
          gardenCapacityText.text = 25;
        }
        seedLeft.text = _root.withComma(_root.save.gardenSeed[_root.treeToPlant]);
        checkD += 1;
        if (checkD > 10) {
          checkD = 0;
          i = 26;
          while (i <= 100) {
            if (_root.save.gardenSeed[i] > 99) {
              _root.save.gardenSeed[i] = 99;
            }
            ++i;
          }
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 0;
        costArray = [0, 500, 1500, 3000, 5000, 7500, 10000, 12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 125000, 150000, 175000, 200000, Infinity];
      }

      onClipEvent (enterFrame) {
        costCoin = _root.save.gardenCapacity * (_root.save.gardenCapacity - 25) * 5000000;
        costPoint = costArray[_root.save.gardenCapacity - 25];
        if (_root.save.gardenCapacity >= 50) {
          _alpha = 0;
        } else {
          if (_root.save.coin < costCoin || _root.save.gardenPoint < costPoint) {
            _alpha = 30;
          } else {
            _alpha = 100;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_alpha > 0) {
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.coin >= costCoin && _root.save.gardenPoint >= costPoint && _alpha > 0) {
          _root.save.coin -= costCoin;
          _root.save.gardenPoint -= costPoint;
          _root.save.gardenCapacity += 1;
          _root.dispNews(24, 'Plot #' + _root.save.gardenCapacity + ' unlocked! (-' + _root.withComma(costCoin) + ' Coins | -' + _root.withComma(costPoint) + ' Garden Points)');
          costCoin = _root.save.gardenCapacity * (_root.save.gardenCapacity - 25) * 5000000;
          costPoint = costArray[_root.save.gardenCapacity - 25];
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 26;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 27;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 28;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 29;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 30;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 31;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 32;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 33;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 34;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 35;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 36;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 37;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 38;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 39;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 40;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 41;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 42;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 43;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 44;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 45;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 46;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 47;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 48;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 49;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 50;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click this button to plant in all available plots with the selected tree seed.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.treeToPlant != -1) {
          coinCost = _root.tree_coinCost;
          greenCoinCost = _root.tree_greenCoinCost;
          blueCoinCost = _root.tree_blueCoinCost;
          gardenPointCost = _root.tree_gardenPointCost;
          harvestTime = _root.tree_harvestTime;
          expiryTime = _root.tree_expiryTime;
          treeToPlant = _root.treeToPlant;
          treeExp = _root.tree_exp;
          tempCap = _root.save.gardenCapacity;
          if (_root.save.gardenCapacity > 50) {
            tempCap = 50;
          }
          treeCount = 0;
          if (tempCap >= 26) {
            i = 26;
            while (i <= tempCap) {
              harvestValue = Math.floor(_root.tree_harvestValue * (0.95 + _root.treeGrade[i] * 0.1 + Math.random() * 0.1));
              if (!isNaN(harvestValue) && _root.save.gardenTrees[i] <= 0 && _root.save.gardenSeed[_root.treeToPlant] >= 1) {
                treeCount += 1;
                _root.save.gardenSeed[_root.treeToPlant] -= 1;
                _root.save.gardenRecentTime[i] = _root.systemtimenow;
                _root.save.gardenPurchaseTime[i] = _root.systemtimenow;
                _root.save.gardenHarvestTime[i] = harvestTime * 1000;
                _root.save.gardenHarvestValue[i] = harvestValue;
                _root.save.gardenExpiryTime[i] = expiryTime * 1000;
                _root.save.gardenTreeExp[i] = treeExp;
                _root.save.gardenTreeFertilize[i] = 0;
                _root.save.gardenTreeModuleProc[i] = 0;
                _root.save.gardenTrees[i] = treeToPlant;
              }
              ++i;
            }
            if (treeCount >= 2) {
              _root.dispNews(18, treeCount + ' trees planted!');
            } else {
              if (treeCount >= 1) {
                _root.dispNews(18, '1 tree planted!');
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Hold SHIFT and click this button to destroy all of your trees. Note that once your trees are destroyed, there is no coming back.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          if (_root.saveid == 23) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            tempCap = _root.save.gardenCapacity;
            if (_root.save.gardenCapacity > 50) {
              tempCap = 50;
            }
            if (tempCap >= 26) {
              i = 26;
              while (i <= tempCap) {
                if (_root.save.gardenTrees[i] > 0) {
                  _root.save.curForestDestroyer += 1;
                  if (_root.save.forestDestroyer < _root.save.curForestDestroyer) {
                    _root.save.forestDestroyer = _root.save.curForestDestroyer;
                  }
                  _root.save.gardenTrees[i] = 0;
                }
                ++i;
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.anotherGardenSeed.gotoAndStop(1);
        _parent.anotherGardenSeed.targetX = 0;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.anotherGardenSeed.gotoAndStop(2);
        _parent.anotherGardenSeed.targetX = 0;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gDifficulty < 3 || _root.save.level >= 3000) {
          _parent.anotherGardenSeed.gotoAndStop(4);
          _parent.anotherGardenSeed.targetX = 0;
        } else {
          _root.showPopup('Impossible Ascension', 'You have to reach level 3000 to access this screen.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.gardenCapacity >= 50) {
          _parent.gotoAndStop(3);
        } else {
          _root.showPopup('Access Denied', 'You need to unlock all plots in Another Garden to unlock Another Another Garden.');
        }
      }
    }

    instance anotherGardenSeed of movieClip 3245  {

      onClipEvent (load) {
        targetX = -510;
      }

      onClipEvent (enterFrame) {
        _x = _x + (targetX - _x) / 3;
      }
    }

    frame 3 {
      stop();
      _root.treeGrade = new Array();
      _root.treeToPlant = -1;
      _root.treeName = '-';
      _root.tree_coinCost = '-';
      _root.tree_greenCoinCost = '-';
      _root.tree_blueCoinCost = '-';
      _root.tree_gardenPointCost = '-';
      _root.tree_harvestValue = '-';
      _root.tree_harvestTime = 0;
      _root.tree_expiryTime = 0;
      _root.tree_exp = 0;
      treeNameText.text = '';
      treeValueText.text = '';
      treeExpText.text = '';
      treeHarvestText.text = '';
      treeExpiryText.text = '';
      treeCost1Text.text = '';
      treeCost2Text.text = '';
      treeCost3Text.text = '';
      treeCost4Text.text = '';
      gardenExpText.text = _root.withComma(_root.save.gardenEXP);
      gardenPointText.text = _root.withComma(_root.save.gardenPoint);
      gardenCapacityText.text = _root.save.gardenCapacity - 50;
      if (_root.save.gardenCapacity > 75) {
        gardenCapacityText.text = 25;
      }
      onEnterFrame = function () {
        gardenExpText.text = _root.withComma(_root.save.gardenEXP);
        gardenPointText.text = _root.withComma(_root.save.gardenPoint);
        gardenCapacityText.text = _root.save.gardenCapacity - 50;
        if (_root.save.gardenCapacity > 75) {
          gardenCapacityText.text = 25;
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 0;
        costArray = [0, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 1250000, 1500000, 1750000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000, 5000000, 6000000, 7000000, 8000000, 9000000, Infinity];
      }

      onClipEvent (enterFrame) {
        costCoin = _root.save.gardenCapacity * (_root.save.gardenCapacity - 25) * (_root.save.gardenCapacity - 50) * 5000000;
        costPoint = costArray[_root.save.gardenCapacity - 50];
        if (_root.save.gardenCapacity >= 75) {
          _alpha = 0;
        } else {
          if (_root.save.coin < costCoin || _root.save.gardenPoint < costPoint) {
            _alpha = 30;
          } else {
            _alpha = 100;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_alpha > 0) {
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.coin >= costCoin && _root.save.gardenPoint >= costPoint && _alpha > 0) {
          _root.save.coin -= costCoin;
          _root.save.gardenPoint -= costPoint;
          _root.save.gardenCapacity += 1;
          _root.dispNews(24, 'Plot #' + _root.save.gardenCapacity + ' unlocked! (-' + _root.withComma(costCoin) + ' Coins | -' + _root.withComma(costPoint) + ' Garden Points)');
          costCoin = _root.save.gardenCapacity * (_root.save.gardenCapacity - 25) * (_root.save.gardenCapacity - 50) * 5000000;
          costPoint = costArray[_root.save.gardenCapacity - 50];
          _root.actiondescription = 'Unlock an extra plot to plant in with ' + _root.withComma(costCoin) + ' Coins and ' + _root.withComma(costPoint) + ' Garden Points!';
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 51;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 52;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 53;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 54;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 55;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 56;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 57;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 58;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 59;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 60;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 61;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 62;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 63;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 64;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 65;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 66;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 67;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 68;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 69;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 70;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 71;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 72;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 73;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 74;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3090  {

      onClipEvent (load) {
        slot = 75;
      }

      onClipEvent (enterFrame) {
        fr = 1;
        if (_root.save.gardenCapacity >= slot) {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click this button to plant in all available plots with the selected tree seed.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.treeToPlant != -1) {
          coinCost = _root.tree_coinCost;
          greenCoinCost = _root.tree_greenCoinCost;
          blueCoinCost = _root.tree_blueCoinCost;
          gardenPointCost = _root.tree_gardenPointCost;
          harvestTime = _root.tree_harvestTime;
          expiryTime = _root.tree_expiryTime;
          treeExp = _root.tree_exp;
          treeToPlant = _root.treeToPlant;
          tempCap = _root.save.gardenCapacity;
          if (_root.save.gardenCapacity > 75) {
            tempCap = 75;
          }
          treeCount = 0;
          i = 51;
          while (i <= tempCap) {
            harvestValue = Math.floor(_root.tree_harvestValue * (0.95 + _root.treeGrade[i] * 0.1 + Math.random() * 0.1));
            if (!isNaN(harvestValue) && _root.save.gardenTrees[i] <= 0 && _root.save.coin >= coinCost && _root.save.greenCoin >= greenCoinCost && _root.save.blueCoin >= blueCoinCost && _root.save.gardenPoint >= gardenPointCost) {
              treeCount += 1;
              _root.save.coin -= coinCost;
              _root.save.greenCoin -= greenCoinCost;
              _root.save.blueCoin -= blueCoinCost;
              _root.save.gardenPoint -= gardenPointCost;
              _root.save.gardenRecentTime[i] = _root.systemtimenow;
              _root.save.gardenPurchaseTime[i] = _root.systemtimenow;
              _root.save.gardenHarvestTime[i] = harvestTime * 1000;
              _root.save.gardenHarvestValue[i] = harvestValue;
              _root.save.gardenExpiryTime[i] = expiryTime * 1000;
              _root.save.gardenTreeExp[i] = treeExp;
              _root.save.gardenTreeFertilize[i] = 0;
              _root.save.gardenTreeModuleProc[i] = 0;
              _root.save.gardenTrees[i] = treeToPlant;
            }
            ++i;
          }
          if (coinCost > 0) {
            if (treeCount >= 2) {
              _root.dispNews(18, treeCount + ' trees planted! (-' + _root.withComma(coinCost * treeCount) + ' Coins)');
            } else {
              if (treeCount >= 1) {
                _root.dispNews(18, '1 tree planted! (-' + _root.withComma(coinCost) + ' Coins)');
              }
            }
          } else {
            if (gardenPointCost > 0) {
              if (treeCount >= 2) {
                _root.dispNews(18, treeCount + ' trees planted! (-' + _root.withComma(gardenPointCost * treeCount) + ' Garden Points)');
              } else {
                if (treeCount >= 1) {
                  _root.dispNews(18, '1 tree planted! (-' + _root.withComma(gardenPointCost) + ' Garden Points)');
                }
              }
            } else {
              if (treeCount >= 2) {
                _root.dispNews(18, treeCount + ' trees planted!');
              } else {
                if (treeCount >= 1) {
                  _root.dispNews(18, '1 tree planted!');
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Hold SHIFT and click this button to destroy all of your trees. Note that once your trees are destroyed, there is no coming back.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          if (_root.saveid == 23) {
            _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
          } else {
            tempCap = _root.save.gardenCapacity;
            if (_root.save.gardenCapacity > 75) {
              tempCap = 75;
            }
            if (tempCap >= 51) {
              i = 51;
              while (i <= tempCap) {
                if (_root.save.gardenTrees[i] > 0) {
                  _root.save.curForestDestroyer += 1;
                  if (_root.save.forestDestroyer < _root.save.curForestDestroyer) {
                    _root.save.forestDestroyer = _root.save.curForestDestroyer;
                  }
                  _root.save.gardenTrees[i] = 0;
                }
                ++i;
              }
            }
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.anotherGardenSeed.gotoAndStop(5);
        _parent.anotherGardenSeed.targetX = 0;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }
  }

  movieClip 3276  {

    frame 1 {
      function checkFrame() {
        if (_root.save.harvestCount > 0 || _root.saveid >= 10) {
          fr = 4;
        } else {
          fr = 1;
          if (_root.treeToPlant == 1 || _root.save.gardenTrees[1] != 0) {
            fr = 2;
            if (_root.save.gardenTrees[1] != 0) {
              fr = 3;
            }
          }
        }
        gotoAndStop(fr);
      }

      onEnterFrame = function () {
        checkFrame();
      };

      checkFrame();
    }

    frame 4 {
      stop();
      onEnterFrame = null;
    }
  }

  movieClip 3280  {
  }

  movieClip 3282  {
  }

  movieClip 3288  {

    frame 1 {
      if (_root.save.vegetarianMode == true) {
        gotoAndStop(2);
      } else {
        gotoAndStop(1);
      }
    }
  }

  movieClip 3299  {
  }

  movieClip 3303  {
  }

  movieClip 3316  {
  }

  movieClip 3325  {
  }

  movieClip 3332  {
  }

  movieClip 3334  {
  }

  movieClip 3344  {

    frame 1 {
      onEnterFrame = function () {
        if (_root.house.arena.enemy.enemyID == 0) {
          timeLeft -= 1 / _root.fps;
        } else {
          if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
            timeLeft -= 0.025;
          }
        }
        timeText.text = _root.convertSec(timeLeft);
        _root.raidTimeLeft = timeLeft;
        if (timeLeft <= 0) {
          timeLeft = 0;
          if (autoKick == true || _root.house.arena.enemy.enemyID == 0) {
            if (_root.save.arenaZone == 20) {
              if (_root.save.raidPyramid < _root.raidDamage) {
                _root.save.raidPyramid = _root.raidDamage;
              }
              if (_root.raidBonus == 0) {
                _root.save.nightmare = 1337;
              }
              if (_root.raidBonus > 0) {
                bonusExp = Math.floor(Math.sqrt(_root.raidDamage * _root.raidBonus) * 1.337) * 200 + 20000;
                if (_root.raidBonus < 5) {
                  bonusExp = 5000 * _root.raidBonus;
                }
                if (bonusExp > _root.arenaReqExp) {
                  bonusExp = _root.arenaReqExp;
                }
                if (bonusExp > 20000000) {
                  bonusExp = 20000000;
                }
                _root.dispNews(66, 'Raid finished! (+' + _root.withComma(bonusExp) + ' Arena EXP)');
                _root.save.arenaExp += bonusExp;
                tempRank = Math.floor(_root.save.arenaLevel / 10) * 10 - 4;
                if (tempRank < 6) {
                  tempRank = 6;
                }
                if (tempRank > 26 + _root.raidBonus * 20) {
                  tempRank = 26 + _root.raidBonus * 20;
                }
                if (_root.raidBonus <= 20) {
                  if (_root.saveid != 21) {
                    if (Math.random() < 0.5) {
                      _root.getArenaAccessory(tempRank, 'Earring', 12, _root.raidBonus * 10, _root.raidBonus, _root.raidBonus * 10, _root.raidBonus * 5, _root.raidBonus * 5, _root.raidBonus * 5, 1, 0, 1, 0, _root.raidBonus, _root.raidBonus * 100 - 199, 'Random', 'Random', '', 0, Infinity, true, false, true, false, _root.raidBonus, 'Revolution Earrings', 'A pair of earrings awarded for dealing ' + _root.withComma(_root.raidDamage) + ' damage in Epic Pyramid Battle.', false);
                    } else {
                      _root.getArenaWeapon(tempRank, 'Bow', 185, true, 60 + _root.raidBonus * 40, 6 + _root.raidBonus, 50 + _root.raidBonus * 10, 25 + _root.raidBonus * 5, 25 + _root.raidBonus * 5, 0, _root.raidBonus * 20 + 6, 1600000, 1, 0, Math.min(_root.raidBonus, 5), _root.raidBonus * 100 - 199, 'Spawn Rate', 'Ignore Defense', 'Random', 0, Infinity, true, true, true, false, false, _root.raidBonus, 'Revolution Pyrabow', 'A weapon awarded for dealing ' + _root.withComma(_root.raidDamage) + ' damage in Epic Pyramid Battle.');
                    }
                  }
                }
              }
            }
            _root.arenaCombo = 0;
            _root.house.arena.enemy.enemyID = 0;
            _root.house.arena.enemy.approach = 10;
            if (_root.save.arenaHealth > 0 && _root.save.arenaZone != 0) {
              _root.save.arenaZone = destination;
              _root.save.arenaZoneFound[destination] = 1;
            } else {
              _root.save.arenaZone = 0;
            }
          }
        }
      };

    }
  }

  movieClip 3355  {
  }

  movieClip 3359  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 3363  {

    instance of movieClip 3359  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_parent.parLeft / _parent.parThis) * 100 * 28 / 15;
        if (_parent.parThis == Infinity) {
          targetScale = 186.6666666666667;
        }
        maxScale = 186.6666666666667;
      }
    }
  }

  button 3369 {

    on (release) {
      gotoAndStop(1);
    }
  }

  movieClip 3370  {

    frame 1 {
      stop();
      onEnterFrame = null;
    }

    frame 2 {
      pass = '';
      onEnterFrame = function () {
        _root.save.arenaMana = _root.maxMana;
        _root.house.arena.enemy.approach = 10;
        if (pass == 'case-sensitive') {
          _root.save.arenaMana = _root.maxMana;
          _root.house.arena.travel(44, 0);
          if (_root.save.inventoryType[400] == 'Weapon' && _root.save.inventoryReqRank[400] <= _root.save.robaconLevel && _root.save.robaconBacon > 0 && _root.save.inventoryExpiry[400] >= _root.systemtimenow || _root.save.inventoryName[400] == 'Bacon Sword' && _root.save.inventoryExpiry[400] >= _root.systemtimenow) {
            if (_root.save.vegetarianMode == true) {
              _root.showPopup('Notice', 'Robroccoli failed to figure out the password to enter this area, and was left outside.');
            } else {
              _root.showPopup('Notice', 'Robacon failed to figure out the password to enter this area, and was left outside.');
            }
          }
          onEnterFrame = null;
        }
      };

    }
  }

  movieClip 3375  {
  }

  movieClip 3378  {
  }

  movieClip 3383  {
  }

  movieClip 3384  {
  }

  movieClip 3388  {

    instance of movieClip 3359  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_parent.parLeft / _parent.parThis) * 100 * 28 / 15;
        maxScale = 186.6666666666667;
      }
    }
  }

  movieClip 3430  {
  }

  movieClip 3432  {
  }

  movieClip 3434  {
  }

  movieClip 3435  {
  }

  movieClip 3437  {
  }

  movieClip 3438  {

    instance of movieClip 3430  {

      onClipEvent (load) {
        _alpha = 120;
      }

      onClipEvent (enterFrame) {
        if (_alpha < 50) {
          _alpha = _alpha + 5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _alpha = 0;
        _root.actiondescription = '<b>The Present</b>\nBeware of triangles!';
      }

      onClipEvent (rollOut, dragOut) {
        _alpha = 120;
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(13);
      }
    }

    instance of movieClip 3432  {

      onClipEvent (load) {
        _alpha = 120;
      }

      onClipEvent (enterFrame) {
        if (_alpha < 50) {
          _alpha = _alpha + 5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _alpha = 0;
        _root.actiondescription = '<b>Year 2012</b>\nIt\'s when the apocalypse occurred and destroyed Earth! Luckily, this isn\'t Earth...';
      }

      onClipEvent (rollOut, dragOut) {
        _alpha = 120;
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(19);
      }
    }

    instance of movieClip 3434  {

      onClipEvent (load) {
        _alpha = 120;
      }

      onClipEvent (enterFrame) {
        if (_alpha < 50) {
          _alpha = _alpha + 5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _alpha = 0;
        _root.actiondescription = '<b>Year 9001</b>\nAliens have invaded! Where do they come from anyway, and why are they so poorly designed and look like they were made in Paint in 5 seconds? Oh wait, that doesn\'t matter, you have to kill the aliens and save the planet of Anti-Idle!';
      }

      onClipEvent (rollOut, dragOut) {
        _alpha = 120;
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(22);
      }
    }

    instance of movieClip 3435  {

      onClipEvent (load) {
        _alpha = 120;
      }

      onClipEvent (enterFrame) {
        if (_alpha < 50) {
          _alpha = _alpha + 5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _alpha = 0;
        _root.actiondescription = '<b>Year 2011</b>\nLooks strange and dangerous... Maybe you shouldn\'t enter if there\'s nothing you need to do here.';
      }

      onClipEvent (rollOut, dragOut) {
        _alpha = 120;
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(70);
      }
    }

    instance of movieClip 3437  {

      onClipEvent (load) {
        _alpha = 120;
      }

      onClipEvent (enterFrame) {
        if (_alpha < 50) {
          _alpha = _alpha + 5;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _alpha = 0;
        _root.actiondescription = '<b>Year -Infinity</b>\nAliens have abused time traveling technology to invade the past! Wait, how does that work?';
      }

      onClipEvent (rollOut, dragOut) {
        _alpha = 120;
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(30);
      }
    }
  }

  movieClip 3449  {
  }

  movieClip 3456  {

    frame 60 {
      stop();
    }
  }

  movieClip 3468  {
  }

  movieClip 3473  {
  }

  movieClip 3475  {

    instance insideFlash of movieClip 3473  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 2;
        }
      }
    }
  }

  movieClip 3476  {

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = Math.floor((_root.save.arenaCorruptHealth + _root.save.arenaCorruptAttack + _root.save.arenaCorruptDefense + _root.save.arenaCorruptAccuracy + _root.save.arenaCorruptEvasion) / 5);
      }

      onClipEvent (enterFrame) {
        if (tempVar < Math.floor((_root.save.arenaCorruptHealth + _root.save.arenaCorruptAttack + _root.save.arenaCorruptDefense + _root.save.arenaCorruptAccuracy + _root.save.arenaCorruptEvasion) / 5)) {
          insideFlash.gotoAndStop(1);
          tempVar = Math.floor((_root.save.arenaCorruptHealth + _root.save.arenaCorruptAttack + _root.save.arenaCorruptDefense + _root.save.arenaCorruptAccuracy + _root.save.arenaCorruptEvasion) / 5);
          insideFlash._alpha = 100;
        } else {
          if (tempVar > Math.floor((_root.save.arenaCorruptHealth + _root.save.arenaCorruptAttack + _root.save.arenaCorruptDefense + _root.save.arenaCorruptAccuracy + _root.save.arenaCorruptEvasion) / 5)) {
            insideFlash.gotoAndStop(2);
            tempVar = Math.floor((_root.save.arenaCorruptHealth + _root.save.arenaCorruptAttack + _root.save.arenaCorruptDefense + _root.save.arenaCorruptAccuracy + _root.save.arenaCorruptEvasion) / 5);
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = _root.save.arenaCorruptHealth;
      }

      onClipEvent (enterFrame) {
        if (tempVar < _root.save.arenaCorruptHealth) {
          insideFlash.gotoAndStop(1);
          tempVar = _root.save.arenaCorruptHealth;
          insideFlash._alpha = 100;
        } else {
          if (tempVar > _root.save.arenaCorruptHealth) {
            insideFlash.gotoAndStop(2);
            tempVar = _root.save.arenaCorruptHealth;
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = _root.save.arenaCorruptAttack;
      }

      onClipEvent (enterFrame) {
        if (tempVar < _root.save.arenaCorruptAttack) {
          insideFlash.gotoAndStop(1);
          tempVar = _root.save.arenaCorruptAttack;
          insideFlash._alpha = 100;
        } else {
          if (tempVar > _root.save.arenaCorruptAttack) {
            insideFlash.gotoAndStop(2);
            tempVar = _root.save.arenaCorruptAttack;
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = _root.save.arenaCorruptDefense;
      }

      onClipEvent (enterFrame) {
        if (tempVar < _root.save.arenaCorruptDefense) {
          insideFlash.gotoAndStop(1);
          tempVar = _root.save.arenaCorruptDefense;
          insideFlash._alpha = 100;
        } else {
          if (tempVar > _root.save.arenaCorruptDefense) {
            insideFlash.gotoAndStop(2);
            tempVar = _root.save.arenaCorruptDefense;
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = _root.save.arenaCorruptAccuracy;
      }

      onClipEvent (enterFrame) {
        if (tempVar < _root.save.arenaCorruptAccuracy) {
          insideFlash.gotoAndStop(1);
          tempVar = _root.save.arenaCorruptAccuracy;
          insideFlash._alpha = 100;
        } else {
          if (tempVar > _root.save.arenaCorruptAccuracy) {
            insideFlash.gotoAndStop(2);
            tempVar = _root.save.arenaCorruptAccuracy;
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }

    instance of movieClip 3475  {

      onClipEvent (load) {
        tempVar = _root.save.arenaCorruptEvasion;
      }

      onClipEvent (enterFrame) {
        if (tempVar < _root.save.arenaCorruptEvasion) {
          insideFlash.gotoAndStop(1);
          tempVar = _root.save.arenaCorruptEvasion;
          insideFlash._alpha = 100;
        } else {
          if (tempVar > _root.save.arenaCorruptEvasion) {
            insideFlash.gotoAndStop(2);
            tempVar = _root.save.arenaCorruptEvasion;
            insideFlash._alpha = 100;
          }
        }
        insideBar._xscale = tempVar / 20;
      }
    }
  }

  // unknown tag 88 length 45

  movieClip 3483  {
  }

  movieClip 3491  {

    frame 1 {
      onEnterFrame = function () {
        currentText.text = _root.withComma(_root.areaSpookyKill);
        todayText.text = _root.withComma(_root.save.arenaSpookyToday);
        recordText.text = _root.withComma(_root.save.arenaSpookyScore);
      };

    }
  }

  movieClip 3508  {

    frame 1 {
      stop();
    }
  }

  movieClip 3514  {
  }

  movieClip 3528  {
  }

  movieClip 3529  {
  }

  movieClip 3532  {
  }

  movieClip 3535  {
  }

  movieClip 3542  {
  }

  movieClip 3543  {
  }

  movieClip 3551  {

    frame 1 {
      Xloc = Math.round(_x / 10) + 1;
      Yloc = Math.round(_y / 10);
      loc = Xloc + Yloc * 6;
      onEnterFrame = function () {
        if (_root.dungeonRoomChest[loc] == 1 && _root.dungeonChestOpen >= 1) {
          chestDisp.gotoAndStop(2);
        } else {
          chestDisp.gotoAndStop(1);
        }
        if (_root.dungeonRoom == loc) {
          fr = 2;
        } else {
          if (_root.dungeonFinalRoom == loc) {
            fr = 6;
          } else {
            if (_root.dungeonRoomClear[loc] != 1) {
              if (_root.dungeonRoomMob[loc] <= 16) {
                fr = 4;
              } else {
                fr = 5;
              }
            } else {
              fr = 1;
            }
          }
        }
        if (_root.dungeonChestOpen < 1) {
          if (fr != 2) {
            fr = 1;
          }
        } else {
          if (_root.dungeonChestOpen < 2) {
            if (fr == 6) {
              fr = 1;
            }
            if (fr >= 4) {
              fr = 3;
            }
          } else {
            if (_root.dungeonChestOpen < 3) {
              if (fr == 6) {
                fr = 1;
              }
            }
          }
        }
        if (_root.save.arenaZone == 78 && _root.endlessFloor % 5 != 0 && loc <= 6) {
          fr = 8;
        }
        gotoAndStop(fr);
      };

    }
  }

  movieClip 3552  {
  }

  movieClip 3555  {
  }

  movieClip 3558  {
  }

  movieClip 3560  {
  }

  movieClip 3562  {

    frame 1 {
      stop();
    }

    instance of movieClip 3560  {

      onClipEvent (load) {
        function res() {
          _x = Math.round((60 + Math.random() * 365) / 5) * 5;
          _y = Math.round((30 + Math.random() * 100) / 5) * 5;
          _alpha = 100;
        }

        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 1;
        } else {
          if (Math.random() < 0.1) {
            res();
          }
        }
      }
    }

    instance of movieClip 3560  {

      onClipEvent (load) {
        function res() {
          _x = Math.round((60 + Math.random() * 365) / 5) * 5;
          _y = Math.round((30 + Math.random() * 100) / 5) * 5;
          _alpha = 100;
        }

        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 1;
        } else {
          if (Math.random() < 0.1) {
            res();
          }
        }
      }
    }

    instance of movieClip 3560  {

      onClipEvent (load) {
        function res() {
          _x = Math.round((60 + Math.random() * 365) / 5) * 5;
          _y = Math.round((30 + Math.random() * 100) / 5) * 5;
          _alpha = 100;
        }

        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 1;
        } else {
          if (Math.random() < 0.1) {
            res();
          }
        }
      }
    }

    instance of movieClip 3560  {

      onClipEvent (load) {
        function res() {
          _x = Math.round((60 + Math.random() * 365) / 5) * 5;
          _y = Math.round((30 + Math.random() * 100) / 5) * 5;
          _alpha = 100;
        }

        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 1;
        } else {
          if (Math.random() < 0.1) {
            res();
          }
        }
      }
    }

    instance of movieClip 3560  {

      onClipEvent (load) {
        function res() {
          _x = Math.round((60 + Math.random() * 365) / 5) * 5;
          _y = Math.round((30 + Math.random() * 100) / 5) * 5;
          _alpha = 100;
        }

        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 1;
        } else {
          if (Math.random() < 0.1) {
            res();
          }
        }
      }
    }
  }

  movieClip 3587  {
  }

  movieClip 3588  {

    frame 1 {
      if (_root.killedChaos == true) {
        score1.text = _root.dungeonMobDefeat;
        score2.text = _root.dungeonBossDefeat;
        score3.text = _root.dungeonChestOpen;
        score4.text = _root.withComma(_root.dungeonTimeLeft);
        if (_root.dungeonDiff == 3) {
          finalScore = Math.floor((_root.dungeonMobDefeat * 3 + _root.dungeonBossDefeat * 11) * (_root.dungeonTimeLeft / 360 + _root.dungeonChestOpen));
        } else {
          finalScore = Math.floor((_root.dungeonMobDefeat * 3 + _root.dungeonBossDefeat * 10) * (_root.dungeonTimeLeft / 180 + _root.dungeonChestOpen));
        }
        if (_root.dungeonAntiCurse == true) {
          finalScore = Math.floor(finalScore * 0.2);
        } else {
          if (_root.dungeonDiff == 3) {
            finalScore += _root.dungeonChestOpen * 100;
          } else {
            finalScore += _root.dungeonChestOpen * 20;
          }
        }
        finalScore += 1000;
        if (_root.save.arenaHardcore == true) {
          finalScore += 300;
        }
        if (_root.worstMoon == true) {
          finalScore += 700;
        }
        if (_root.apocalypse == true) {
          finalScore += 300;
        }
        if (_root.dungeonDiff == 3) {
          finalScore += 200;
        }
        if (isNaN(finalScore)) {
          finalScore = 3000;
        }
        if (_root.save.raidDungeon < finalScore) {
          _root.save.raidDungeon = finalScore;
        }
        score5.text = _root.withComma(finalScore);
        if (_root.save.questType == 'Special') {
          if (_root.save.questSubtype == 'Secret Dungeon Score') {
            if (_root.save.questCount < finalScore) {
              _root.save.questCount = finalScore;
            }
          }
        }
        reward1 = '';
        reward2 = '';
        reward3 = '';
        if (finalScore >= 6000) {
          reward1 = 'CHAOS AURA [-10]';
          _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -10, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
        } else {
          if (finalScore >= 5500) {
            reward1 = 'CHAOS AURA [-9]';
            _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -9, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
          } else {
            if (finalScore >= 5000) {
              reward1 = 'CHAOS AURA [-8]';
              _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -8, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
            } else {
              if (finalScore >= 4500) {
                reward1 = 'CHAOS AURA [-7]';
                _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -7, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
              } else {
                if (finalScore >= 4000) {
                  reward1 = 'CHAOS AURA [-6]';
                  _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -6, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
                } else {
                  if (finalScore >= 3500) {
                    reward1 = 'CHAOS AURA [-5]';
                    _root.getArenaWeapon(318, 'Aura', 276, true, 0, 100, 0, 0, 0, 0, 1, 0, 1, 0, -5, 150, 'Dark Element', 'Boss Damage', 'Equipment Attack', 10000000, Infinity, false, false, true, false, false, 0, 'CHAOS AURA', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.\n\nWhen equipped, the power of CHAOS will overtake you, causing you to lose control of yourself.');
                  } else {
                    if (finalScore >= 2800) {
                      itemPow = Math.ceil(finalScore / 28);
                      rewardToGet = random(5) + 1;
                      if (rewardToGet == 1) {
                        reward1 = 'Chaos Hat';
                        _root.getArenaArmor(298, 'Hat', 134, 50, 1, 355 + itemPow, 10, 0, 30, 40, 176000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Chaos Hat', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                      }
                      if (rewardToGet == 2) {
                        reward1 = 'Chaos Shirt';
                        _root.getArenaArmor(298, 'Shirt', 134, 50, 1, 381 + itemPow, 10, 30, 0, 40, 176000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Chaos Shirt', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                      }
                      if (rewardToGet == 3) {
                        reward1 = 'Chaos Gloves';
                        _root.getArenaArmor(298, 'Gloves', 134, 60, 7, 303 + itemPow, 30, 0, 0, 40, 176000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Chaos Gloves', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                      }
                      if (rewardToGet == 4) {
                        reward1 = 'Chaos Pants';
                        _root.getArenaArmor(298, 'Pants', 134, 50, 1, 381 + itemPow, 10, 30, 0, 40, 176000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Chaos Pants', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                      }
                      if (rewardToGet == 5) {
                        reward1 = 'Chaos Shoes';
                        _root.getArenaArmor(298, 'Shoes', 134, 60, 3, 303 + itemPow, 30, 0, 0, 40, 176000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Chaos Shoes', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                      }
                    } else {
                      if (finalScore >= 2100) {
                        itemPow = Math.ceil(finalScore / 21);
                        rewardToGet = random(5) + 1;
                        if (rewardToGet == 1) {
                          reward1 = 'Dark Angel Hat';
                          _root.getArenaArmor(278, 'Hat', 129, 40, 1, 235 + itemPow, 10, 0, 30, 25, 44000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Dark Angel Hat', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                        }
                        if (rewardToGet == 2) {
                          reward1 = 'Dark Angel Shirt';
                          _root.getArenaArmor(278, 'Shirt', 129, 40, 1, 259 + itemPow, 10, 30, 0, 25, 44000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Dark Angel Shirt', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                        }
                        if (rewardToGet == 3) {
                          reward1 = 'Dark Angel Gloves';
                          _root.getArenaArmor(278, 'Gloves', 129, 50, 7, 187 + itemPow, 30, 0, 0, 25, 44000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Dark Angel Gloves', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                        }
                        if (rewardToGet == 4) {
                          reward1 = 'Dark Angel Pants';
                          _root.getArenaArmor(278, 'Pants', 129, 40, 1, 259 + itemPow, 10, 30, 0, 25, 44000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Dark Angel Pants', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                        }
                        if (rewardToGet == 5) {
                          reward1 = 'Dark Angel Shoes';
                          _root.getArenaArmor(278, 'Shoes', 129, 50, 3, 187 + itemPow, 30, 0, 0, 25, 44000000, 1, 0, 0, itemPow, 'Dark Element', 'Weaken Duration', '', 10000000, Infinity, false, false, false, false, false, 0, 'Dark Angel Shoes', 'Awarded for clearing Secret Dungeon with a score of ' + _root.withComma(finalScore) + '.');
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (finalScore >= 5000 && _root.dungeonDiff == 3) {
          itemPow = Math.floor((finalScore - 5000) / 2);
          reward2 = 'GIGA EARRINGS (Attack: ' + itemPow + ')';
          _root.getArenaAccessory(250, 'Earring', 13, itemPow, 15, 0, 0, 0, 0, 75, 750000000, 1, 0, 0, Math.floor(itemPow * 5 / 2), 'Random', 'Random', 'Random', 75000000, 0, false, true, false, false, 50, 'GIGA EARRINGS', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.', false);
        } else {
          if (finalScore >= 4200 && _root.dungeonDiff == 2) {
            _root.save.arenaUniqueStock -= 1;
            rewardToGet = random(4) + 1;
            if (rewardToGet == 1) {
              reward2 = 'Weapon Unique Enhancer Lv. 5';
              _root.getArenaEnhancer('Weapon Unique Enhancer', 395, 5, 0, 100, '', '', '', 0, 706, 0, 172800000, 'Weapon Unique Enhancer Lv. 5', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
            } else {
              if (rewardToGet == 2) {
                reward2 = 'Accessory Unique Enhancer Lv. 5';
                _root.getArenaEnhancer('Accessory Unique Enhancer', 415, 5, 0, 100, '', '', '', 0, 706, 0, 172800000, 'Accessory Unique Enhancer Lv. 5', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
              } else {
                reward2 = 'Armor Unique Enhancer Lv. 5';
                _root.getArenaEnhancer('Armor Unique Enhancer', 405, 5, 0, 100, '', '', '', 0, 706, 0, 172800000, 'Armor Unique Enhancer Lv. 5', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
              }
            }
          } else {
            if (finalScore >= 3700 && _root.dungeonDiff == 2) {
              _root.save.arenaUniqueStock -= 1;
              rewardToGet = random(4) + 1;
              if (rewardToGet == 1) {
                reward2 = 'Weapon Unique Enhancer Lv. 4';
                _root.getArenaEnhancer('Weapon Unique Enhancer', 394, 4, 0, 100, '', '', '', 0, 406, 0, 172800000, 'Weapon Unique Enhancer Lv. 4', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
              } else {
                if (rewardToGet == 2) {
                  reward2 = 'Accessory Unique Enhancer Lv. 4';
                  _root.getArenaEnhancer('Accessory Unique Enhancer', 414, 4, 0, 100, '', '', '', 0, 406, 0, 172800000, 'Accessory Unique Enhancer Lv. 4', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                } else {
                  reward2 = 'Armor Unique Enhancer Lv. 4';
                  _root.getArenaEnhancer('Armor Unique Enhancer', 404, 4, 0, 100, '', '', '', 0, 406, 0, 172800000, 'Armor Unique Enhancer Lv. 4', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                }
              }
            } else {
              if (finalScore >= 3200 && _root.dungeonDiff == 2) {
                _root.save.arenaUniqueStock -= 1;
                rewardToGet = random(4) + 1;
                if (rewardToGet == 1) {
                  reward2 = 'Weapon Unique Enhancer Lv. 3';
                  _root.getArenaEnhancer('Weapon Unique Enhancer', 393, 3, 0, 100, '', '', '', 0, 256, 0, 172800000, 'Weapon Unique Enhancer Lv. 3', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                } else {
                  if (rewardToGet == 2) {
                    reward2 = 'Accessory Unique Enhancer Lv. 3';
                    _root.getArenaEnhancer('Accessory Unique Enhancer', 413, 3, 0, 100, '', '', '', 0, 256, 0, 172800000, 'Accessory Unique Enhancer Lv. 3', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                  } else {
                    reward2 = 'Armor Unique Enhancer Lv. 3';
                    _root.getArenaEnhancer('Armor Unique Enhancer', 403, 3, 0, 100, '', '', '', 0, 256, 0, 172800000, 'Armor Unique Enhancer Lv. 3', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                  }
                }
              } else {
                if (finalScore >= 2700 && _root.dungeonDiff == 2) {
                  _root.save.arenaUniqueStock -= 1;
                  rewardToGet = random(4) + 1;
                  if (rewardToGet == 1) {
                    reward2 = 'Weapon Unique Enhancer Lv. 2';
                    _root.getArenaEnhancer('Weapon Unique Enhancer', 392, 2, 0, 100, '', '', '', 0, 156, 0, 172800000, 'Weapon Unique Enhancer Lv. 2', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                  } else {
                    if (rewardToGet == 2) {
                      reward2 = 'Accessory Unique Enhancer Lv. 2';
                      _root.getArenaEnhancer('Accessory Unique Enhancer', 412, 2, 0, 100, '', '', '', 0, 156, 0, 172800000, 'Accessory Unique Enhancer Lv. 2', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                    } else {
                      reward2 = 'Armor Unique Enhancer Lv. 2';
                      _root.getArenaEnhancer('Armor Unique Enhancer', 402, 2, 0, 100, '', '', '', 0, 156, 0, 172800000, 'Armor Unique Enhancer Lv. 2', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                    }
                  }
                } else {
                  if (finalScore >= 2200 && _root.dungeonDiff == 2) {
                    _root.save.arenaUniqueStock -= 1;
                    rewardToGet = random(4) + 1;
                    if (rewardToGet == 1) {
                      reward2 = 'Weapon Unique Enhancer Lv. 1';
                      _root.getArenaEnhancer('Weapon Unique Enhancer', 391, 1, 0, 100, '', '', '', 0, 106, 0, 172800000, 'Weapon Unique Enhancer Lv. 1', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                    } else {
                      if (rewardToGet == 2) {
                        reward2 = 'Accessory Unique Enhancer Lv. 1';
                        _root.getArenaEnhancer('Accessory Unique Enhancer', 411, 1, 0, 100, '', '', '', 0, 106, 0, 172800000, 'Accessory Unique Enhancer Lv. 1', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                      } else {
                        reward2 = 'Armor Unique Enhancer Lv. 1';
                        _root.getArenaEnhancer('Armor Unique Enhancer', 401, 1, 0, 100, '', '', '', 0, 106, 0, 172800000, 'Armor Unique Enhancer Lv. 1', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                      }
                    }
                  } else {
                    if (finalScore >= 4000) {
                      rewardToGet = random(2) + 1;
                      if (rewardToGet == 1) {
                        reward2 = 'Weapon Mystery Rock Lv. 10';
                        _root.getArenaEnhancer('Weapon Mystery Enhancer', 100, 12, 0, 1000, '', '', '', 0, 0, 3000000, 172800000, 'Weapon Mystery Rock Lv. 10', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                      }
                      if (rewardToGet == 2) {
                        reward2 = 'Armor Mystery Rock Lv. 10';
                        _root.getArenaEnhancer('Armor Mystery Enhancer', 200, 12, 0, 1000, '', '', '', 0, 0, 3000000, 172800000, 'Armor Mystery Rock Lv. 10', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                      }
                    } else {
                      if (finalScore >= 2500) {
                        rewardToGet = random(2) + 1;
                        if (rewardToGet == 1) {
                          reward2 = 'Weapon Mystery Rock Lv. 9';
                          _root.getArenaEnhancer('Weapon Mystery Enhancer', 99, 11, 0, 1000, '', '', '', 0, 0, 1000000, 172800000, 'Weapon Mystery Rock Lv. 9', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                        }
                        if (rewardToGet == 2) {
                          reward2 = 'Armor Mystery Rock Lv. 9';
                          _root.getArenaEnhancer('Armor Mystery Enhancer', 199, 11, 0, 1000, '', '', '', 0, 0, 1000000, 172800000, 'Armor Mystery Rock Lv. 9', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                        }
                      } else {
                        if (finalScore >= 1000) {
                          rewardToGet = random(2) + 1;
                          if (rewardToGet == 1) {
                            reward2 = 'Weapon Mystery Rock Lv. 8';
                            _root.getArenaEnhancer('Weapon Mystery Enhancer', 98, 10, 0, 1000, '', '', '', 0, 0, 300000, 172800000, 'Weapon Mystery Rock Lv. 8', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                          }
                          if (rewardToGet == 2) {
                            reward2 = 'Armor Mystery Rock Lv. 8';
                            _root.getArenaEnhancer('Armor Mystery Enhancer', 198, 10, 0, 1000, '', '', '', 0, 0, 300000, 172800000, 'Armor Mystery Rock Lv. 8', 'An item awarded for reaching a score of ' + _root.withComma(finalScore) + ' in Secret Dungeon.');
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.dungeonDiff == 3) {
          molybdenumToGet = Math.ceil(finalScore / 5) + _root.dungeonChestOpen * 100;
          _root.save.arenaChaoticFragment += molybdenumToGet;
          reward3 = _root.withComma(molybdenumToGet) + ' Chaotic Fragments of Chaos';
        } else {
          if (_root.worstMoon == true) {
            molybdenumToGet = Math.ceil(finalScore / 50) + _root.dungeonChestOpen * 10;
            _root.save.arenaUnobtainium += molybdenumToGet;
            reward3 = molybdenumToGet + ' Unobtainium';
          } else {
            molybdenumToGet = Math.ceil(finalScore / 50) + _root.dungeonChestOpen * 10;
            _root.save.arenaSuperiorCraft += molybdenumToGet;
            reward3 = molybdenumToGet + ' Superior Crafting Material';
          }
        }
        score6.text = reward3;
        score7.text = reward1;
        score8.text = reward2;
      }
    }

    instance of movieClip 3587  {

      onClipEvent (load) {
        gotoAndStop(_root.dungeonDiff);
      }
    }
  }

  movieClip 3593  {
  }

  // unknown tag 88 length 40

  movieClip 3597  {
  }

  movieClip 3600  {
  }

  movieClip 3605  {
  }

  movieClip 3607  {
  }

  movieClip 3610  {
  }

  movieClip 3611  {
  }

  movieClip 3614  {
  }

  movieClip 3616  {

    instance of movieClip 3605  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 500 && _root.labCooldown <= 0) {
          _root.labCooldown = 5;
          _root.labEnemy = 443;
          _root.house.arena.enemy.approach = 0.1;
        } else {
          if (_root.labCooldown > 0) {
            _root.showPopup('Please Wait', 'Please wait ' + Math.ceil(_root.labCooldown) + ' seconds before you summon the next monster.');
          } else {
            _root.showPopup('Too dangerous', 'This button is too dangerous. Better not touch it.');
          }
        }
      }
    }

    instance of movieClip 3605  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 500 && _root.labCooldown <= 0) {
          _root.labCooldown = 5;
          _root.labEnemy = 444;
          _root.house.arena.enemy.approach = 0.1;
        } else {
          if (_root.labCooldown > 0) {
            _root.showPopup('Please Wait', 'Please wait ' + Math.ceil(_root.labCooldown) + ' seconds before you summon the next monster.');
          } else {
            _root.showPopup('Too dangerous', 'This button is too dangerous. Better not touch it.');
          }
        }
      }
    }

    instance of movieClip 3605  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 500 && _root.labCooldown <= 0) {
          _root.labCooldown = 5;
          _root.labEnemy = 445;
          _root.house.arena.enemy.approach = 0.1;
        } else {
          if (_root.labCooldown > 0) {
            _root.showPopup('Please Wait', 'Please wait ' + Math.ceil(_root.labCooldown) + ' seconds before you summon the next monster.');
          } else {
            _root.showPopup('Too dangerous', 'This button is too dangerous. Better not touch it.');
          }
        }
      }
    }

    instance of movieClip 3605  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 500 && _root.labCooldown <= 0) {
          _root.labCooldown = 5;
          _root.labEnemy = 446;
          _root.house.arena.enemy.approach = 0.1;
        } else {
          if (_root.labCooldown > 0) {
            _root.showPopup('Please Wait', 'Please wait ' + Math.ceil(_root.labCooldown) + ' seconds before you summon the next monster.');
          } else {
            _root.showPopup('Too dangerous', 'This button is too dangerous. Better not touch it.');
          }
        }
      }
    }

    instance of movieClip 3605  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 500 && _root.labCooldown <= 0) {
          _root.labCooldown = 5;
          _root.labEnemy = 447;
          _root.house.arena.enemy.approach = 0.1;
        } else {
          if (_root.labCooldown > 0) {
            _root.showPopup('Please Wait', 'Please wait ' + Math.ceil(_root.labCooldown) + ' seconds before you summon the next monster.');
          } else {
            _root.showPopup('Too dangerous', 'This button is too dangerous. Better not touch it.');
          }
        }
      }
    }

    instance of movieClip 3607  {

      onClipEvent (load) {
        destination = 68;
        reqRank = 180;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.au >= 2) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Access Denied', 'Upon attempting to enter, you hear a terrifying voice: Tm8gd2F5IHdlJ3JlIGxldHRpbmcgeW91IGVudGVyIQ==\nWhat does this mean, hmm...');
        }
      }
    }

    instance of movieClip 3611  {

      onClipEvent (load) {
        _x = 0;
        _y = -80;
        xSpeed = 0;
        ySpeed = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() > 0.9) {
          xSpeed += Math.random() * 10 - Math.random() * 10;
        }
        if (Math.random() > 0.99 && _y >= -81) {
          _y = -81;
          ySpeed -= Math.random() * 20;
        }
        _x = _x + xSpeed;
        if (_x > 260) {
          _x = 260;
          xSpeed *= -1;
        }
        if (_x < -160) {
          _x = -160;
          xSpeed *= -1;
        }
        if (_y < -80) {
          _y = _y + ySpeed;
        }
        xSpeed *= 0.9;
        ySpeed += 0.5;
        if (_y >= -80) {
          _y = -80;
          ySpeed = 0;
        }
      }

      onClipEvent (release) {
        _root.showPopup('PWNed!', 'You cannot throw slimes. They throw you.');
      }
    }

    instance of movieClip 3614  {

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0) {
          _root.house.arena.kommanderDialog.gotoAndStop(5);
        }
      }
    }
  }

  movieClip 3621  {
  }

  movieClip 3634  {
  }

  movieClip 3636  {
  }

  movieClip 3638  {
  }

  movieClip 3640  {

    frame 1 {
      rot = 0;
      rSpeed = 0;
      dir = -1;
      onEnterFrame = function () {
        rot += rSpeed;
        rSpeed += dir / 50;
        if (rSpeed > 0.4) {
          dir = -1;
        }
        if (rSpeed < -0.4) {
          dir = 1;
        }
        _rotation = rot;
      };

    }
  }

  movieClip 3642  {

    frame 1 {
      rot = 0;
      rSpeed = 0;
      dir = 1;
      onEnterFrame = function () {
        rot += rSpeed;
        rSpeed += dir / 50;
        if (rSpeed > 0.4) {
          dir = -1;
        }
        if (rSpeed < -0.4) {
          dir = 1;
        }
        _rotation = rot;
      };

    }
  }

  movieClip 3643  {
  }

  movieClip 3646  {

    frame 1 {
      rot = 0;
      rSpeed = 0;
      dir = 1;
      onEnterFrame = function () {
        rot += rSpeed;
        rSpeed += dir / 50;
        if (rSpeed > 0.4) {
          dir = -1;
        }
        if (rSpeed < -0.4) {
          dir = 1;
        }
        _rotation = rot;
      };

    }
  }

  movieClip 3647  {
  }

  movieClip 3649  {

    frame 1 {
      rot = 100;
      dir = -1;
      onEnterFrame = function () {
        rot += dir * 5;
        if (rot > 200) {
          dir = -1;
        }
        if (rot < 0) {
          dir = 1;
        }
        _xscale = rot;
        if (_xscale > 80) {
          _xscale = 80;
        }
        if (_xscale < 10) {
          _xscale = 10;
        }
      };

    }
  }

  movieClip 3650  {
  }

  movieClip 3652  {

    frame 1 {
      rot = 100;
      dir = -1;
      onEnterFrame = function () {
        rot += dir * 5;
        if (rot > 300) {
          dir = -1;
        }
        if (rot < 60) {
          dir = 1;
        }
        _alpha = rot;
        if (_alpha > 150) {
          _alpha = 150;
        }
        if (_alpha < 60) {
          _alpha = 60;
        }
      };

    }
  }

  movieClip 3654  {
  }

  movieClip 3655  {
  }

  movieClip 3665  {

    frame 1 {
      onEnterFrame = function () {
        currentText.text = _root.withComma(_root.areaTriangleKill);
        todayText.text = _root.withComma(_root.save.arenaTriangleToday);
        recordText.text = _root.withComma(_root.save.arenaTriangleScore);
      };

    }
  }

  movieClip 3679  {
  }

  movieClip 3681  {

    frame 120 {
      cg = 1;
      for (;;) {
        if (!(cg <= _root.raidBonus && cg <= 10)) break;
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 1});
        ++cg;
      }
    }

    frame 200 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      if (_root.raidBonus >= 2) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': _root.raidBonus * _root.raidBonus * 2});
      }
      if (Math.random() < 0.001 * _root.raidBonus * _root.raidBonus) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'type': 'Enhancer', 'frame': 221, 'name': 'Mystery Enhancer Identifier', 'subtype': 'Mystery Enhancer Identifier', 'power': 0, 'curse': 0, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 10, 'bonusPow': 300, 'expiry': 172800000, 'desc': ''});
      }
      if (Math.random() < 0.001 * _root.raidBonus * _root.raidBonus) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'type': 'Enhancer', 'frame': 411, 'name': 'Accessory Unique Enhancer Lv. 1', 'subtype': 'Accessory Unique Enhancer', 'power': 1, 'curse': 0, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 10, 'bonusPow': 106, 'expiry': 172800000, 'desc': 'A piece of the Treasure of the Pyramid. It coincidentally has the shape of an enhancer, and for some reason, it works.'});
      }
      if (Math.random() < 0.01 * _root.raidBonus * _root.raidBonus) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot19', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 9});
      }
      if (Math.random() < 0.01 * _root.raidBonus * _root.raidBonus) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot19', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 10});
      }
      if (_root.worstMoon == true && _root.raidBonus >= 2) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': _root.raidBonus * _root.raidBonus * 2});
      }
    }

    frame 260 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 10 + _root.raidBonus * _root.raidBonus * 10});
    }

    frame 300 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      if (_root.raidBonus >= 11) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 2});
      }
      if (_root.raidBonus >= 9) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 2});
      }
      if (_root.raidBonus >= 7) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 2});
      }
      if (_root.raidBonus >= 5) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 2});
      }
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot3', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 20 + _root.raidBonus * _root.raidBonus * 20});
    }

    frame 320 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot2', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150, 'lootValue': 10000 + _root.raidBonus * _root.raidBonus * 10000});
    }

    frame 330 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
    }

    frame 335 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
    }

    frame 337 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
    }

    frame 340 {
      _root.incDt2();
      _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      if (_root.save.arenaHardcore == true) {
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
        _root.incDt2();
        _parent._parent.stuffHolder.attachMovie('newLoot8', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200, 'y': 150});
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 420) {
          _alpha = 100;
          _x = random(100) * 5;
          _y = random(40) * 5;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 420) {
          _alpha = 100;
          _x = random(100) * 5;
          _y = random(40) * 5;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 420) {
          _alpha = 50;
          _x = random(100) * 5;
          _y = random(40) * 5;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 420) {
          _alpha = 50;
          _x = random(100) * 5;
          _y = random(40) * 5;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 420) {
          _alpha = 30;
          _x = random(100) * 5;
          _y = random(40) * 5;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    frame 500 {
      _root.house.arena.travel(8);
    }
  }

  movieClip 3686  {
  }

  movieClip 3705  {
  }

  movieClip 3734  {

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 200) {
          _alpha = 100;
          _x = random(100) * 5 - 143;
          _y = random(40) * 5 - 43;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 200) {
          _alpha = 100;
          _x = random(100) * 5 - 143;
          _y = random(40) * 5 - 43;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 200) {
          _alpha = 100;
          _x = random(100) * 5 - 143;
          _y = random(40) * 5 - 43;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 200) {
          _alpha = 100;
          _x = random(100) * 5 - 143;
          _y = random(40) * 5 - 43;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    instance of movieClip 3679  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (Math.random() < 0.1 && _alpha <= 0 && _parent._currentframe < 200) {
          _alpha = 100;
          _x = random(100) * 5 - 143;
          _y = random(40) * 5 - 43;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
      }
    }

    frame 80 {
      _root.fightStat2 = 'Voice: "NOOOOOOOOO! My house!!!"';
    }

    frame 280 {
      _root.fightStat2 = '... Huh?';
      _root.house.arena.travel(45);
    }
  }

  movieClip 3736  {

    frame 4 {
      stop();
    }
  }

  movieClip 3737  {

    frame 40 {
      stop();
      _root.fightStat2 = 'Whoa, whoa... what\'s happening?';
    }

    instance of movieClip 3705  {

      onClipEvent (load) {
        flashLeft = 5;
        del = 0;
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 40) {
          del = 0;
          flashLeft -= 1;
          _alpha = 100;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 10;
        }
        if (flashLeft == 0) {
          _parent.play();
        }
      }
    }

    frame 41 {
      stop();
      _root.fightStat2 = 'NOTICE: \'EXPLOSION\' MODE ACTIVATED!';
    }
  }

  movieClip 3745  {

    frame 1 {
      trainingScoreText.text = _root.withComma(0);
      trainingScoreText2.text = '';
      lastSec = 0;
      tempScore = 0;
      onEnterFrame = function () {
        tempScore += Math.ceil((_root.areaDamage - tempScore) / 1.5);
        if (_root.house.arena.enemy.enemyID != 0 && _root.house.arena.enemy.explodeCount % 40 == 0) {
          impr = _root.areaDamage - lastSec;
          trainingScoreText2.text = '+' + _root.withComma(impr);
          trainingScoreText2._alpha = 100;
          trainingScoreText2._y = 24;
          lastSec = _root.areaDamage;
        }
        trainingScoreText.text = _root.withComma(tempScore);
        trainingScoreText2._alpha = Math.floor(trainingScoreText2._alpha * 0.95);
        trainingScoreText2._y += 0.5;
      };

    }
  }

  movieClip 3747  {
  }

  movieClip 3753  {

    frame 1 {
      onEnterFrame = function () {
        del += 1;
        if (del == 10) {
          del = 0;
          gotoAndStop(2 + random(4));
        }
      };

      gotoAndStop(2 + random(4));
      del = 0;
    }
  }

  movieClip 3756  {
  }

  movieClip 3763  {
  }

  movieClip 3764  {

    instance of movieClip 3355  {

      onClipEvent (enterFrame) {
        if (Math.random() < 0.01) {
          _alpha = 100;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 50;
        }
      }
    }
  }

  movieClip 3768  {

    frame 1 {
      tmpPoint = _root.save.arenaEventPoint[_root.save.arenaEvent];
      eventPointText.text = _root.withComma(tmpPoint);
      onEnterFrame = function () {
        if (tmpPoint < _root.save.arenaEventPoint[_root.save.arenaEvent]) {
          tmpPoint += Math.ceil((_root.save.arenaEventPoint[_root.save.arenaEvent] - tmpPoint) / 10);
          eventPointText.text = _root.withComma(tmpPoint);
          _alpha = 100;
        } else {
          if (_alpha > 50) {
            _alpha = _alpha - 1;
          }
        }
      };

    }
  }

  movieClip 3781  {
  }

  // unknown tag 88 length 49

  movieClip 3787  {

    frame 1 {
      stop();
      _root.fightStat = 'Ye Olde Pub';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 1;
        reqRank = 1;
        areaName = 'Beginner Training Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 1;
        reqRank = 120;
        areaName = 'Technical Battleground\n-- EVENT ZONE --';
        if (_root.saveid == 10) {
          _x = 999;
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank && _root.saveid < 10) {
          _parent._parent.kommanderDialog.gotoAndStop(12);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3282  {

      onClipEvent (release) {
        if (_root.save.arenaLevel >= 20) {
          _parent._parent.kommanderDialog.gotoAndStop(2);
        } else {
          _root.showPopup('Rank 20 Required', 'Mission Kommander does not have missions for players below Rank 20. How about ranking up first?');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.greed = 1337;
        if (_root.save.freeBacon1 > 0) {
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 170, 'y': 150, 'lootValue': _root.save.freeBacon1});
        }
        _root.save.freeBacon1 = 0;
      }
    }

    instance of movieClip 3288  {

      onClipEvent (release) {
        if (_root.save.arenaLevel >= 40) {
          if (_root.save.vegetarianMode == true) {
            _parent._parent.kommanderDialog.gotoAndStop(4);
          } else {
            _parent._parent.kommanderDialog.gotoAndStop(3);
          }
        } else {
          if (_root.save.vegetarianMode == true) {
            _root.showPopup('Rank 40 Required', 'Robroccoli refuses to talk to anyone below Rank 40.');
          } else {
            _root.showPopup('Rank 40 Required', 'Robacon refuses to talk to anyone below Rank 40.');
          }
        }
      }
    }

    frame 2 {
      _root.fightStat = 'Beginner Training Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 50;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 2;
        reqRank = 5;
        areaName = 'Advanced Training Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 0;
        reqRank = 1;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>Ye Olde Pub</b></font>';
        if (reqRank > 1 && _root.save.arenaLevel >= reqRank) {
          _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
        } else {
          if (reqRank > 1) {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'The next area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        if (_root.save.battlePoint < 500) {
          _y = _y + 500;
          _alpha = 0;
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>Special Training Zone</b></font>\nA special zone where you can test your damage per second and gain awesome rewards for that!\nOnly available to players who are Rank 500 or have at least 1 Rebirth.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.battlePoint >= 500 && _root.house.arena.enemy.enemyID == 0) {
          _root.house.arena.kommanderDialog.gotoAndStop(9);
          _root.house.arena.travel(80);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3299  {

      onClipEvent (release) {
        if (_root.save.arenaLevel >= 5) {
          _parent._parent.kommanderDialog.gotoAndStop(6);
        } else {
          _root.showPopup('Rank 5 Required', 'Magnet refuses to talk to anyone below Rank 5.');
        }
      }
    }

    frame 3 {
      _root.fightStat = 'Advanced Training Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.6;
      _root.areaRareChance = 1.1;
      _root.areaAllyChance = 50;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 3;
        reqRank = 10;
        areaName = 'Mystic Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
        _root.actiondescription += '\n\nNOTE: The \'Required Rank\' is the minimum Rank needed to enter the area, not the recommended Rank. It is advised that you do not proceed to Mystic Forest until at least Rank 15.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 1;
        reqRank = 1;
        areaName = 'Beginner Training Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 46;
        reqRank = 90;
        areaName = 'Deserted Alley';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3303  {

      onClipEvent (release) {
        _parent._parent.kommanderDialog.gotoAndStop(7);
      }
    }

    frame 4 {
      _root.fightStat = 'Mystic Forest';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.7;
      _root.areaRareChance = 1.2;
      _root.areaAllyChance = 25;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 4;
        reqRank = 15;
        areaName = 'Night Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 2;
        reqRank = 5;
        areaName = 'Advanced Training Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 62;
        reqRank = 40;
        areaName = 'Fairytale Fight-off!';
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>\nRequires 1 Ascension or 1 Rebirth';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.banned >= 1 || _root.save.bannedB >= 1) {
          _root.house.arena.travel(destination);
        } else {}
      }
    }

    frame 5 {
      _root.fightStat = 'Night Forest';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.8;
      _root.areaRareChance = 1.3;
      _root.areaAllyChance = 25;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.3;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 5;
        reqRank = 20;
        areaName = 'The Sky';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 3;
        reqRank = 10;
        areaName = 'Mystic Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 6 {
      _root.fightStat = 'The Sky';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.9;
      _root.areaRareChance = 1.4;
      _root.areaAllyChance = 15;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.4;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 6;
        reqRank = 25;
        areaName = 'Deadlands';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 4;
        reqRank = 15;
        areaName = 'Night Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 15;
        reqRank = 20;
        areaName = 'Polluted Sky';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 7 {
      _root.fightStat = 'Deadlands';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3;
      _root.areaRareChance = 1.5;
      _root.areaAllyChance = 15;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.5;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 7;
        reqRank = 30;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 5;
        reqRank = 20;
        areaName = 'The Sky';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 8 {
      _root.fightStat = 'Danger Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 8;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
      _root.labEnemy = 0;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 8;
        reqRank = 35;
        areaName = 'The Desert';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 6;
        reqRank = 25;
        areaName = 'Deadlands';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 18;
        reqRank = 40;
        areaName = 'Dark Portal';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3316  {

      onClipEvent (load) {
        destination = 61;
        reqRank = 180;
        areaName = 'Abandoned Lab';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 9 {
      _root.fightStat = 'The Desert';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.9;
      _root.areaRareChance = 1.6;
      _root.areaAllyChance = 10;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.6;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 9;
        reqRank = 40;
        areaName = 'The Beach';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 7;
        reqRank = 30;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        travelPrice = 0;
        destination = 20;
        if (_root.save.featureTravelingTicket == true) {
          travelPrice = Math.floor(travelPrice * 0.05);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Epic Pyramid Battle</b>\nA raid for all levels!\n\nEntries left: <b>' + _root.save.arenaPyramidEntry + '</b>';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0) {
          if (_root.save.gDifficulty < 3 || _root.save.level >= 1500) {
            _parent._parent.kommanderDialog.gotoAndStop(11);
          } else {
            _root.showPopup('Impossible Ascension', 'You have to reach level 1,500 to access the Dark Pyramid.');
          }
        }
      }
    }

    frame 10 {
      _root.fightStat = 'The Beach';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.8;
      _root.areaRareChance = 1.7;
      _root.areaAllyChance = 10;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.7;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 10;
        reqRank = 45;
        areaName = 'Binary Battlefield\n[VIP Traveling Ticket required]';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank && _root.save.featureTravelingTicket == true) {
          _root.house.arena.travel(destination);
        } else {
          if (_root.save.arenaLevel < reqRank) {
            _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
          } else {
            _root.showPopup('Access Denied', 'You need a VIP Traveling Ticket to continue.');
          }
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 8;
        reqRank = 35;
        areaName = 'The Desert';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 11 {
      _root.fightStat = 'Binary Battlefield';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.7;
      _root.areaRareChance = 1.8;
      _root.areaAllyChance = 7.5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.1;
      _root.areaEpicChance2 = 0.8;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 11;
        reqRank = 50;
        areaName = 'Dragon Cave';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 9;
        reqRank = 40;
        areaName = 'The Beach';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3334  {

      onClipEvent (load) {
        destination = 48;
        reqRank = 250;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 12 {
      _root.fightStat = 'Dragon Cave';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.6;
      _root.areaRareChance = 1.9;
      _root.areaAllyChance = 7.5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.1;
      _root.areaEpicChance2 = 0.9;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 12;
        reqRank = 55;
        areaName = 'Pirate Ship';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 10;
        reqRank = 45;
        areaName = 'Binary Battlefield';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 60;
        reqRank = 50;
        areaName = 'Foodlandistan';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 13 {
      _root.fightStat = 'Pirate Ship';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.5;
      _root.areaRareChance = 2;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.2;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 13;
        reqRank = 60;
        areaName = 'Triangle Land';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 11;
        reqRank = 50;
        areaName = 'Dragon Cave';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 21;
        reqRank = 65;
        areaName = 'Mystic Path';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 28;
        reqRank = 70;
        areaName = 'Pirate Ship Interior';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 14 {
      _root.fightStat = 'Triangle Land';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.4;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 2.5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 12;
        reqRank = 55;
        areaName = 'Pirate Ship';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 45;
        reqRank = 70;
        if (_root.saveid == 26) {
          reqRank = 501;
        }
        areaName = 'Hole of Time';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 15 {
      _root.fightStat = 'Ropeless Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 7;
        reqRank = 40;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 420;
        autoKick = false;
        destination = 0;
      }
    }

    frame 16 {
      _root.fightStat = 'Polluted Sky';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.5;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 20;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 5;
        reqRank = 20;
        areaName = 'The Sky';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 2700;
        autoKick = false;
        destination = 0;
      }
    }

    frame 17 {
      _root.fightStat = 'Secret Beach';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.5;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 10;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 9;
        reqRank = 40;
        areaName = 'The Beach';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        areaName = 'Drawing Board';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>\nLet\'s draw stuff!';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.actiondescription = '';
        if (_root.house.arena.enemy.enemyID == 0) {
          _root.house.arena.gotoAndStop(3);
        } else {
          _root.showPopup('Kill the monster', 'Let\'s kill that monster first!');
        }
      }
    }

    frame 18 {
      _root.fightStat = 'Scary Graveyard';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 7;
        reqRank = 40;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 19 {
      _root.fightStat = 'Dark Portal';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 100;
      _root.areaFinalizerRank = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 14;
        reqRank = 40;
        areaName = 'Ropeless Room';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 26;
        reqRank = 70;
        areaName = 'Volcano Peak';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 27;
        reqRank = 70;
        areaName = 'Frosty Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 16;
        reqRank = 40;
        areaName = 'Secret Beach';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 17;
        reqRank = 40;
        areaName = 'Scary Graveyard';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 5400;
        autoKick = false;
        destination = 0;
      }
    }

    frame 20 {
      _root.fightStat = '2012: Ye Olde Pub';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 100;
      _root.areaDamagePct = 20;
      _root.areaEpicChance = 0.2;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 45;
        reqRank = 70;
        areaName = 'Hole of Time';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.greed = 1337;
        if (_root.save.freeBacon2 > 0) {
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'lootValue': _root.save.freeBacon2});
        }
        _root.save.freeBacon2 = 0;
      }
    }

    instance of movieClip 3355  {

      onClipEvent (enterFrame) {
        if (Math.random() < 0.01) {
          _alpha = 100;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 50;
        }
      }
    }

    frame 21 {
      _root.dispNews(66, 'Deal as much damage as possible in the time limit!');
    }

    frame 21 {
      _root.fightStat = 'Dark Pyramid';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 0;
      _root.areaRareChance = 2;
      _root.areaAllyChance = 0.2;
      _root.areaDamagePct = 0.0001;
      _root.areaFirstPyr = false;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0.2;
      _root.fightStat2 = 'Deal as much damage as possible in the time limit!';
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 8;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Leave the Pyramid</b>\nYou can only leave the Pyramid before the first monster spawns. Otherwise, re-enter the Battle Arena.\n<b>WARNING:</b> YOU WILL NOT GET YOUR KEY BACK.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 210;
        if (_root.worstMoon == true) {
          timeLeft += 40;
        }
        if (_root.apocalypse == true) {
          timeLeft += 10;
        }
        autoKick = true;
        destination = 69;
      }
    }

    instance of movieClip 3363  {

      onClipEvent (load) {
        _root.raidDamage = 0;
        _root.raidBonus = 0;
        pars = [0, 10000, 50000, 250000, 1000000, 5000000, 25000000, 100000000, 500000000, 2500000000.0, 10000000000.0, 50000000000.0, 250000000000.0, 1000000000000.0, 5000000000000.0, 25000000000000.0, Infinity];
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del == 10) {
          _root.raidDamage = 0;
        }
        parLeft = 0;
        parThis = 1;
        i = 0;
        while (i <= pars.length - 1) {
          if (_root.raidDamage >= pars[i]) {
            _root.raidBonus = i;
            parLeft = _root.raidDamage - pars[i];
            parThis = pars[i + 1] - pars[i];
          }
          ++i;
        }
        scoreText.text = 'Damage: ' + _root.withComma(_root.raidDamage);
        bonusText.text = '+' + _root.raidBonus + ' Bonus';
      }
    }

    frame 22 {
      _root.dispNews(66, 'You are underwater. You will take damage over time.');
    }

    frame 22 {
      _root.fightStat = 'Mystic Path';
      _root.areaSafe = false;
      _root.areaUnderwater = true;
      _root.areaSpawn = 3;
      _root.areaRareChance = 25;
      _root.areaAllyChance = 2.5;
      _root.areaDamagePct = 0.1;
      _root.areaEpicChance = 2.5;
      _root.areaEpicChance2 = 10;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 9;
        reqRank = 1;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>???</b>';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0) {
          _parent.islandPass.gotoAndStop(2);
        }
      }
    }

    frame 23 {
      _root.fightStat = '9001: Ye Olde Pub';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 23;
        reqRank = 70;
        areaName = '9001: Mystic Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 45;
        reqRank = 70;
        areaName = 'Hole of Time';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3375  {

      onClipEvent (load) {
        xAlpha = 100;
      }

      onClipEvent (enterFrame) {
        if (xAlpha < 100) {
          xAlpha += 2;
        }
        _alpha = xAlpha;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Strange Machine</b>\nThis looks like a Coin-powered machine of some sort. It\'s rumored that if you throw 1,000,000,000 Coins into it, something will happen. This, however, is unconfirmed.';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.save.coin >= 1000000000 && xAlpha >= 100) {
          _root.save.coin -= 1000000000;
          xAlpha -= 80;
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 140, 'y': 150, 'lootValue': 1});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 150, 'y': 150, 'lootValue': 1});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 170, 'y': 150, 'lootValue': 1});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 180, 'y': 150, 'lootValue': 1});
          _root.incDt2();
          if (Math.random() < 0.2) {
            if (Math.random() < 0.2) {
              _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'lootValue': 2});
            } else {
              _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'lootValue': 1});
            }
          } else {
            if (Math.random() < 0.05 && _root.save.arenaLevel >= 120) {
              skillToGet = 61 + random(2);
              if (_root.save.arenaLevel >= 180) {
                skillToGet = 63 + random(4);
              }
              _parent._parent.stuffHolder.attachMovie('newLoot19', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'lootValue': skillToGet});
            } else {
              if (Math.random() < 0.5 && _root.save.arenaLevel >= 70) {
                if (Math.random() < 0.3) {
                  if (Math.random() < 0.4) {
                    skillToGet = 21 + random(5);
                  } else {
                    if (Math.random() < 0.7) {
                      skillToGet = 11 + random(6);
                    } else {
                      skillToGet = 9 + random(2);
                    }
                  }
                } else {
                  if (Math.random() < 0.6 || _root.save.arenaLevel < 120) {
                    if (Math.random() < 0.4) {
                      skillToGet = 18 + random(3);
                    } else {
                      if (Math.random() < 0.8) {
                        skillToGet = 27 + random(7);
                      } else {
                        skillToGet = 36 + random(3);
                      }
                    }
                  } else {
                    if (Math.random() < 0.4) {
                      skillToGet = 50 + random(4);
                    } else {
                      if (Math.random() < 0.8) {
                        skillToGet = 39 + random(7);
                      } else {
                        skillToGet = 55;
                      }
                    }
                  }
                }
                _parent._parent.stuffHolder.attachMovie('newLoot19', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'lootValue': skillToGet});
              } else {
                if (Math.random() < 0.95) {
                  if (Math.random() < 0.8) {
                    enhancerToGet = random(6) + 7;
                  } else {
                    enhancerToGet = random(6) + 1;
                  }
                  if (enhancerToGet == 1) {
                    _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Attack Enhancer', 'power': 100, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                  } else {
                    if (enhancerToGet == 2) {
                      _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Speed Enhancer', 'power': 6, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                    } else {
                      if (enhancerToGet == 3) {
                        _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Defense Enhancer', 'power': 240, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                      } else {
                        if (enhancerToGet == 4) {
                          _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Critical Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                        } else {
                          if (enhancerToGet == 5) {
                            _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Dexterity Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                          } else {
                            if (enhancerToGet == 6) {
                              _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 307, 'name': 'Alien Core', 'subtype': 'Weapon Health Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                            } else {
                              if (enhancerToGet == 7) {
                                _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Attack Enhancer', 'power': 40, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                              } else {
                                if (enhancerToGet == 8) {
                                  _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Speed Enhancer', 'power': 6, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                                } else {
                                  if (enhancerToGet == 9) {
                                    _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Defense Enhancer', 'power': 100, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                                  } else {
                                    if (enhancerToGet == 10) {
                                      _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Critical Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                                    } else {
                                      if (enhancerToGet == 11) {
                                        _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Dexterity Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                                      } else {
                                        if (enhancerToGet == 12) {
                                          _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Enhancer', 'frame': 308, 'name': 'Alien Core', 'subtype': 'Armor Health Enhancer', 'power': 20, 'curse': 60, 'success': 100, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 0, 'enhance': 9, 'bonusPow': 30, 'expiry': Infinity, 'desc': 'This looks like an enhancer of some sort. Though, no matter how hard you try, you can\'t get this crap to work.'});
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  _parent._parent.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 160, 'y': 150, 'type': 'Accessory', 'frame': 3, 'name': 'Alien Earrings', 'reqRank': 70, 'subtype': 'Earring', 'attack': 15, 'defense': 25, 'speed': 0, 'crit': 0, 'dexterity': 0, 'health': 0, 'bonus': 'Random', 'ability': 'Random', 'moreBonus': '', 'maxLevel': 2, 'expTNL': 90000000, 'sell': 0, 'expiry': Infinity, 'enhance': 9, 'bonusPow': 300, 'noBonus': true, 'noLife': true, 'noRecycle': true, 'spirit': true, 'unob': 0, 'desc': 'A pair of Alien Earrings. Aliens don\'t wear these, though. Perhaps they\'re not into Spirit.'});
                }
              }
            }
          }
        }
      }
    }

    frame 24 {
      _root.dispNews(66, 'Don\'t forget to equip your Special Wand!');
    }

    frame 24 {
      _root.fightStat = '9001: Mystic Forest';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.5;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 10;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 22;
        reqRank = 70;
        areaName = '9001: Ye Olde Pub';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 24;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Defend the \'???\' Generator!</b>\nPrevent the aliens from destroying the \'??? Generator\' and repair it. Hold SHIFT to switch to Defend Mode.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0) {
          _root.house.arena.travel(destination);
        }
      }
    }

    instance of movieClip 3378  {

      onClipEvent (load) {
        killText.text = _root.save.arenaZoneKill[23];
        zscale = 100;
      }

      onClipEvent (enterFrame) {
        targetKillText = _root.withComma(_root.save.arenaZoneKill[23]);
        if (killText.text != targetKillText) {
          killText.text = targetKillText;
          zscale = 110;
        }
        if (zscale > 100) {
          zscale -= 1;
        }
        _xscale = zscale;
        _yscale = zscale;
      }
    }

    frame 25 {
      _root.fightStat = '9001: Defend Mission';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2;
      _root.areaRareChance = 50;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 5;
      _root.areaEpicChance2 = 25;
      _root.fightStat2 = 'Hold SHIFT to switch to Defend Mode.';
      _root.save.arenaHealth = 100;
      _root.areaDefendStage = 1;
      _root.areaDefendProgress = -1;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
      _root.dispNews(66, 'Hold SHIFT to switch to Defend Mode.');
      if (_root.save.arenaTurnBased == true) {
        _root.dispNews(66, 'Turn-based Mode is disabled in this mission.');
      }
    }

    instance of movieClip 3384  {

      onClipEvent (enterFrame) {
        if (_parent._parent.hero.Xalpha == 30) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 23;
        reqRank = 1;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 430;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 120;
        }
        if (_root.worstMoon == true) {
          timeLeft += 220;
        }
        if (_root.apocalypse == true) {
          timeLeft += 50;
        }
        autoKick = true;
        destination = 22;
      }
    }

    instance of movieClip 3388  {

      onClipEvent (load) {
        timeLeft = 430;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 120;
        }
        if (_root.worstMoon == true) {
          timeLeft += 220;
        }
        if (_root.apocalypse == true) {
          timeLeft += 50;
        }
        pars = [0, 60, 150, 240, 300, 360, 420, 480, 540, 600, 630, 999];
      }

      onClipEvent (enterFrame) {
        _root.raidTimeLeft = timeLeft;
        if (_root.house.arena.enemy.enemyID == 0) {
          timeLeft -= 1 / _root.fps;
        } else {
          timeLeft -= 0.025;
        }
        if (timeLeft > 0) {
          i = 0;
          while (i <= pars.length - 1) {
            if (timeLeft > pars[i]) {
              _root.raidBonus = i;
              parLeft = timeLeft - pars[i];
              parThis = pars[i + 1] - pars[i];
            }
            ++i;
          }
        } else {
          _root.raidBonus = 0;
          parLeft = 0;
          parThis = 9001;
        }
        scoreText.text = 'Par Time: ' + _root.convertSec(parLeft);
        bonusText.text = '+' + _root.raidBonus + ' Bonus';
      }
    }

    frame 26 {
      _root.dispNews(66, 'An overwhelming force causes you to take damage over time.');
    }

    frame 26 {
      _root.fightStat = '9001: Secret Lab';
      _root.areaSafe = false;
      _root.areaUnderwater = true;
      _root.areaSpawn = 10;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 10;
      _root.areaEpicChance2 = 50;
    }

    frame 27 {
      _root.fightStat = 'Volcano Peak';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.3;
      _root.areaRareChance = 6;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 18;
        reqRank = 40;
        areaName = 'Dark Portal';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 5400;
        autoKick = false;
        destination = 0;
      }
    }

    frame 28 {
      _root.fightStat = 'Frosty Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.3;
      _root.areaRareChance = 6;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
    }

    frame 29 {
      _root.fightStat = 'Pirate Ship Interior';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 1.8;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 10;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.2;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 12;
        reqRank = 60;
        areaName = 'Pirate Ship';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        travelPrice = 400000000;
        destination = 58;
        if (_root.save.featureTravelingTicket == true) {
          travelPrice = Math.floor(travelPrice * 0.05);
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 150) {
          _root.actiondescription = '<b>Censor Ship</b>\nTravel Cost\n' + _root.withComma(travelPrice) + ' Coins';
        }
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= 150) {
          _root.house.arena.travel(destination, travelPrice);
        } else {
          _root.showPopup('Hmm...', 'There\'s something strange about this...');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 58;
        reqRank = 150;
        areaName = 'Censor Ship';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 30 {
      _root.fightStat = 'The Special Arena';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 9999;
      _root.areaRareChance = 10;
      _root.areaAllyChance = 0.5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.5;
      _root.areaEpicChance2 = 5;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 370;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 45;
        }
        if (_root.worstMoon == true) {
          timeLeft += 60;
        }
        if (_root.apocalypse == true) {
          timeLeft += 15;
        }
        baseTime = timeLeft - 11;
        autoKick = true;
        destination = 46;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena.enemy.enemyID == 0 && timeLeft <= baseTime) {
          timeLeft = 0;
        }
      }
    }

    instance of movieClip 3388  {

      onClipEvent (load) {
        timeLeft = 370;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 45;
        }
        if (_root.worstMoon == true) {
          timeLeft += 60;
        }
        if (_root.apocalypse == true) {
          timeLeft += 15;
        }
        pars = [0, 180, 270, 315, 360, 410, 460, 490];
      }

      onClipEvent (enterFrame) {
        _root.raidTimeLeft = timeLeft;
        if (_root.house.arena.enemy.enemyID == 0) {
          timeLeft -= 1 / _root.fps;
        } else {
          timeLeft -= 0.025;
        }
        if (timeLeft > 0) {
          i = 0;
          while (i <= pars.length - 1) {
            if (timeLeft > pars[i]) {
              _root.raidBonus = i;
              parLeft = timeLeft - pars[i];
              parThis = pars[i + 1] - pars[i];
            }
            ++i;
          }
        } else {
          _root.raidBonus = 0;
          parLeft = 0;
          parThis = 9001;
        }
        scoreText.text = 'Par Time: ' + _root.convertSec(parLeft);
        bonusText.text = '+' + _root.raidBonus + ' Bonus';
      }
    }

    frame 31 {
      _root.fightStat = '-Infinity: Prehistoric Area';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.2;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 0.1;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 45;
        reqRank = 70;
        areaName = 'Hole of Time';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 31;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Prehistoric Mission</b>\nAliens have invaded the past! Defeat them!';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    frame 32 {
      roomCount = -1;
      _root.fightStat = 'Entry Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
      _root.fightStat2 = 'The Prehistoric Mission has started!';
      _root.areaEpicChance = 0.5;
      _root.areaEpicChance2 = 2.5;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 30;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Quit Mission</b>\nYou keep the EXP gained from defeated monsters during the mission, but you will not gain additional rewards.';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 150;
        if (_root.save.arenaHardcore == true) {
          timeLeft -= 30;
        }
        if (_root.worstMoon == true) {
          timeLeft -= 45;
        }
        if (_root.apocalypse == true) {
          timeLeft -= 15;
        }
        autoKick = false;
        destination = 32;
      }
    }

    instance of movieClip 3355  {

      onClipEvent (enterFrame) {
        if (Math.random() < 0.01) {
          _alpha = 100;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 50;
        }
      }
    }

    frame 33 {
      roomCount += 1;
      _root.save.arenaProofMission += 1;
      _root.dispNews(66, 'You have gained 1 [Proof of Mission]!');
      _root.fightStat = 'Warp Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 6;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 10;
      proTip = random(8);
      if (proTip == 0) {
        _root.dispNews(66, 'Protip: Monsters in the mission cannot be poisoned!');
      }
      if (proTip == 1) {
        _root.dispNews(66, 'Protip: You deal 90% less damage in this area.');
      }
      if (proTip == 2) {
        _root.dispNews(66, 'Protip: Defense is less effective in this area.');
      }
      if (proTip == 3) {
        _root.dispNews(66, 'Protip: You will be taken to the next room in 5 seconds.');
      }
      if (proTip == 4) {
        _root.dispNews(66, 'Protip: All rooms have \'tricks\' to pass.');
      }
      if (proTip == 5) {
        _root.dispNews(66, 'Protip: Turn Auto Fight off if you haven\'t already!');
      }
      if (proTip == 6) {
        _root.dispNews(66, 'Protip: Attack Green Bombs. Don\'t attack Red Bombs!');
      }
      if (proTip == 7) {
        _root.dispNews(66, 'Protip: This is a protip!');
      }
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 5;
        autoKick = false;
        destination = 33 + random(6);
        if (Math.random() < _parent.roomCount * 0.15) {
          destination = 39;
        }
      }
    }

    frame 34 {
      _root.fightStat = 'Patience Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 120;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 45;
        autoKick = false;
        destination = 32;
      }
    }

    frame 35 {
      _root.fightStat = 'Reaction Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7;
      _root.areaRareChance = 25;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 5;
      if (_root.save.arenaTurnBased == true) {
        _root.dispNews(66, 'Turn-based Mode is disabled in this room.');
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 50;
        autoKick = false;
        destination = 32;
      }
    }

    frame 36 {
      _root.fightStat = 'Chain Reaction Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 5;
      _root.areaRareChance = 25;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 5;
      if (_root.save.arenaTurnBased == true) {
        _root.dispNews(66, 'Turn-based Mode is disabled in this room.');
      }
    }

    frame 37 {
      _root.fightStat = 'Luck Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 25;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 5;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 12;
        autoKick = false;
        destination = 32;
      }
    }

    frame 38 {
      _root.fightStat = 'Speed Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 1.5;
      _root.areaRareChance = 50;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 2;
      _root.areaEpicChance2 = 10;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 40;
        autoKick = false;
        destination = 32;
      }
    }

    frame 39 {
      _root.fightStat = 'Dimensional Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7;
      _root.areaRareChance = 50;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 10;
      _root.fightStat2 = 'Hold SHIFT to warp to another dimension!';
      _root.areaEpicChance = 2;
      _root.areaEpicChance2 = 10;
    }

    frame 40 {
      _root.fightStat = 'Power Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 99;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 5;
      _root.areaEpicChance = 5;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 11;
        autoKick = false;
        destination = 40;
      }
    }

    instance of movieClip 3388  {

      onClipEvent (load) {
        timeLeft = 610;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 45;
        }
        if (_root.worstMoon == true) {
          timeLeft += 75;
        }
        if (_root.apocalypse == true) {
          timeLeft += 15;
        }
        pars = [0, 120, 240, 360, 420, 480, 540, 600, 630, 660, 680, 745];
      }

      onClipEvent (enterFrame) {
        _root.raidTimeLeft = timeLeft;
        if (_root.house.arena.enemy.enemyID == 0) {
          timeLeft -= 1 / _root.fps;
        } else {
          timeLeft -= 0.025;
        }
        if (timeLeft > 0) {
          i = 0;
          while (i <= pars.length - 1) {
            if (timeLeft > pars[i]) {
              _root.raidBonus = i;
              parLeft = timeLeft - pars[i];
              parThis = pars[i + 1] - pars[i];
            }
            ++i;
          }
        } else {
          _root.raidBonus = 0;
          parLeft = 0;
          parThis = 9001;
        }
        scoreText.text = 'Par Time: ' + _root.convertSec(parLeft);
        bonusText.text = '+' + _root.raidBonus + ' Bonus';
      }
    }

    frame 41 {
      _root.fightStat = 'Water Room';
      _root.areaSafe = false;
      _root.areaUnderwater = true;
      _root.areaSpawn = 99;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 5;
      _root.areaEpicChance = 10;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 11;
        autoKick = false;
        destination = 41;
      }
    }

    frame 42 {
      _root.fightStat = 'Final Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 99;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 5;
      _root.areaEpicChance = 20;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 11;
        autoKick = false;
        destination = 42;
      }
    }

    frame 43 {
      _root.fightStat = 'Treasure Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 99;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 50;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 12;
        autoKick = false;
        destination = 43;
      }
    }

    frame 44 {
      _root.save.arenaMission += 1;
      _root.save.arenaPrehistoricComplete += 1;
      tempScore = Math.floor(_root.raidTimeLeft * 1000);
      if (_root.save.raidPrehistoric < tempScore) {
        _root.save.raidPrehistoric = tempScore;
      }
      if (_root.save.arenaSkill[102] < 30) {
        _root.save.arenaSkill[102] += 1;
        _root.dispNews(47, 'You have learned OM NOM NOM Lv. ' + _root.save.arenaSkill[102] + '!');
        _root.house.arena.skillBar.gotoAndStop(3);
      }
      _root.save.arenaProofMission += _root.raidBonus * _root.raidBonus + 1;
      _root.dispNews(66, 'Prehistoric Mission complete!');
      _root.dispNews(66, 'You have gained ' + (_root.raidBonus * _root.raidBonus + 1) + ' [Proof of Mission]!');
      _root.fightStat2 = 'Prehistoric Mission complete!';
      _root.save.arenaZone = 30;
    }

    frame 45 {
      _root.save.arenaDiscoverSmiley = true;
    }

    frame 45 {
      _root.fightStat = 'Smiley Island';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2.8;
      _root.areaRareChance = 0.5;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.2;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 21;
        reqRank = 1;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 47;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Tower of DOOOOOOM</b>\nCan you conquer the Tower of DOOOOOOM?\n\n<b>Combo</b> is disabled in this zone.\n\nRequired Rank: <b>160</b>';
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaLevel >= 160 && _root.towerCooldown <= 0) {
          _root.towerCooldown = 90;
          _root.house.arena.travel(destination);
        } else {
          if (_root.save.arenaLevel < 160) {
            _root.showPopup('Access Denied', 'One of the crates in the Tower of DOOOOOOM laughed at you: \'What is this, a Rank ' + _root.save.arenaLevel + ' noob trying to conquer the Tower of DOOOOOOM? Go to the Mystic Forest instead.\'');
          } else {
            if (_root.towerCooldown > 0) {
              _root.showPopup('Access Denied', 'You better wait ' + _root.withComma(_root.towerCooldown) + ' seconds before entering again. Otherwise, those "guards" will recognize you trying to "cheat" by killing only the first few monsters over and over... and that\'s bad.');
            } else {
              _root.showPopup('Access Denied', 'You have to get rid of that monster first.');
            }
          }
        }
      }
    }

    frame 46 {
      _root.fightStat = 'Hole of Time';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 60;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3355  {

      onClipEvent (enterFrame) {
        if (Math.random() < 0.01) {
          _alpha = 100;
        }
        if (_alpha > 0) {
          _alpha = _alpha - 50;
        }
      }
    }

    frame 47 {
      _root.save.arenaDiscoverAlley = true;
    }

    frame 47 {
      _root.fightStat = 'Deserted Alley';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 60;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
      if (_root.saveid == 21) {
        _root.save.arenaMegabossEntry = 999;
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 2;
        reqRank = 5;
        areaName = 'Advanced Training Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 29;
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.saveid == 21) {
          _root.actiondescription = '<b>The Special Arena</b>\nBeat The Special Arena to finish the Challenge! Are you ready?';
        } else {
          _root.actiondescription = '<b>The Special Arena</b>\nTHE MEGABOSS is looking for a challenger! Prove that he isn\'t powerful at all!\n\nYou cannot use recovery potions in this raid.\n\nEntries left: <b>' + _root.save.arenaMegabossEntry + '</b>';
        }
        roll = 1;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        roll = 0;
      }

      onClipEvent (release) {
        if (_root.save.arenaMegabossEntry > 0 && _root.house.arena.enemy.enemyID == 0) {
          _root.save.arenaMegabossEntry -= 1;
          _root.house.arena.travel(destination);
        }
      }
    }

    frame 48 {
      _root.fightStat = 'Tower of DOOOOOOM';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 6;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 50;
      _root.doomTowerSpawn = 0;
      _root.doomTowerTaunt = 0;
      _root.doomTowerDel = 4;
      _root.fightStat2 = 'Attack before the monster spawns to TAUNT it!';
      _root.areaEpicChance = 4;
      _root.areaEpicChance2 = 20;
    }

    instance of movieClip 3359  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = _root.doomTowerTaunt;
        maxScale = 100;
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 44;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Escape the Tower</b>\nYou can only escape the Tower of DOOOOOOM when there aren\'t any monsters.\nOtherwise, enter the menu and leave.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    instance of movieClip 3363  {

      onClipEvent (load) {
        _root.raidDamage = 0;
        _root.raidBonus = 0;
        pars = [0, 4000000000.0, 8000000000.0, 12000000000.0, 16000000000.0, 20000000000.0, 24000000000.0, 28000000000.0, 32000000000.0, 36000000000.0, 40000000000.0, Infinity];
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del == 10) {
          _root.raidDamage = 0;
        }
        parLeft = 0;
        parThis = 1;
        i = 0;
        while (i <= pars.length - 1) {
          if (_root.raidDamage >= pars[i]) {
            _root.raidBonus = i;
            parLeft = _root.raidDamage - pars[i];
            parThis = pars[i + 1] - pars[i];
          }
          ++i;
        }
        scoreText.text = 'Score: ' + _root.withComma(_root.raidDamage);
        bonusText.text = '+' + _root.raidBonus + ' Bonus';
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 610;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 90;
        }
        if (_root.worstMoon == true) {
          timeLeft += 120;
        }
        if (_root.apocalypse == true) {
          timeLeft += 30;
        }
        baseTime = timeLeft - 11;
        autoKick = true;
        destination = 44;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena.enemy.enemyID == 350 && timeLeft <= baseTime) {
          timeLeft = 1;
          autoKick = false;
        }
      }
    }

    frame 49 {
      _root.save.arenaDiscoverPokayman = true;
    }

    frame 49 {
      _root.fightStat = 'Pokayman City';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.8;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.2;
      _root.areaEpicChance2 = 1;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 10;
        reqRank = 45;
        areaName = 'Binary Battlefield';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 49;
        reqRank = 250;
        areaName = 'Not Copyright Infringement';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3334  {

      onClipEvent (load) {
        destination = 51;
        reqRank = 250;
        areaName = 'Secret Entrance';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3456  {

      onClipEvent (load) {
        pokaystopID = 1;
        if (_root.save.pokayCD[pokaystopID] > 0) {
          gotoAndStop(60);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.pokayCD[pokaystopID] > 0 && _root.save.pokayCD[pokaystopID] < 60) {
          gotoAndStop(Math.ceil(120 - _root.save.pokayCD[pokaystopID]));
        }
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndPlay(2);
          _root.save.pokayCD[pokaystopID] = 300;
          _root.save.pokaystopCount += 1;
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 50});
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.05) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.01) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 2});
          }
        }
      }
    }

    frame 50 {
      _root.fightStat = 'Not Copyright Infringement';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.3;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0.3;
      _root.areaEpicChance2 = 3;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 48;
        reqRank = 250;
        areaName = 'Pokayman City';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 4500;
        autoKick = false;
        destination = 48;
      }
    }

    instance of movieClip 3456  {

      onClipEvent (load) {
        pokaystopID = 2;
        if (_root.save.pokayCD[pokaystopID] > 0) {
          gotoAndStop(60);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.pokayCD[pokaystopID] > 0 && _root.save.pokayCD[pokaystopID] < 60) {
          gotoAndStop(Math.ceil(120 - _root.save.pokayCD[pokaystopID]));
        }
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndPlay(2);
          _root.save.pokayCD[pokaystopID] = 300;
          _root.save.pokaystopCount += 1;
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 50});
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.05) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.01) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 2});
          }
        }
      }
    }

    instance of movieClip 3456  {

      onClipEvent (load) {
        pokaystopID = 3;
        if (_root.save.pokayCD[pokaystopID] > 0) {
          gotoAndStop(60);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.pokayCD[pokaystopID] > 0 && _root.save.pokayCD[pokaystopID] < 60) {
          gotoAndStop(Math.ceil(120 - _root.save.pokayCD[pokaystopID]));
        }
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndPlay(2);
          _root.save.pokayCD[pokaystopID] = 300;
          _root.save.pokaystopCount += 1;
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 50});
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.05) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.01) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 2});
          }
        }
      }
    }

    frame 51 {
      _root.fightStat = 'The Corruption';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3;
      _root.areaRareChance = 20;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 100;
      _root.fightStat2 = 'You can hold Shift + R for 1 second to reset monster stats.';
      if (_root.save.arenaCorruptionEntry != 1) {
        _root.dispNews(66, 'You can enter ' + _root.save.arenaCorruptionEntry + ' more times today.');
      } else {
        _root.dispNews(66, 'You can enter 1 more time today.');
      }
      _root.areaEpicChance = 2;
      _root.areaEpicChance2 = -1337;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 0;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Go back to Ye Olde Pub';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 900;
        autoKick = false;
        destination = _root.save.arenaZoneOrig;
      }
    }

    instance of movieClip 3476  {

      onClipEvent (load) {
        d = 0;
      }

      onClipEvent (enterFrame) {
        if (Key.isDown(16) && Key.isDown(82)) {
          d += 1 / _root.fps;
          if (d >= 1) {
            _root.save.arenaCorruptHealth = 50;
            _root.save.arenaCorruptAttack = 50;
            _root.save.arenaCorruptDefense = 50;
            _root.save.arenaCorruptAccuracy = 50;
            _root.save.arenaCorruptEvasion = 50;
          }
        } else {
          d = 0;
        }
      }
    }

    frame 52 {
      _root.fightStat = 'Secret Entrance';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 48;
        reqRank = 250;
        areaName = 'Pokayman City';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 52;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Spooky Crypt</b>\nDefeat monsters until th- YOU die!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaSpookyKey == true) {
          _root.house.arena.travel(destination, travelPrice);
        } else {
          _root.showPopup('Access Denied', 'You don\'t have a Spooky Crypt Key.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 53;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Attempt Raid</b>\nDon\'t forget to wear Prot-- oh wait, you will most likely fail if you do so.';
        _root.actiondescription += '\n\n<font color=\'#BBFF00\'>Dark Shards: <b>' + _root.save.arenaChaosLeft + '</b></font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _parent._parent.kommanderDialog.gotoAndStop(13);
      }
    }

    instance of movieClip 3456  {

      onClipEvent (load) {
        pokaystopID = 4;
        if (_root.save.pokayCD[pokaystopID] > 0) {
          gotoAndStop(60);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.pokayCD[pokaystopID] > 0 && _root.save.pokayCD[pokaystopID] < 60) {
          gotoAndStop(Math.ceil(120 - _root.save.pokayCD[pokaystopID]));
        }
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.pokayCD[pokaystopID] <= 0) {
          gotoAndPlay(2);
          _root.save.pokayCD[pokaystopID] = 300;
          _root.save.pokaystopCount += 1;
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          _root.incDt2();
          _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 50});
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 5});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot17', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 10});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot18', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 100});
          }
          if (Math.random() < 0.5) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.25) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.05) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.1) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 1});
          }
          if (Math.random() < 0.01) {
            _root.incDt2();
            _parent._parent.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': _x + Math.random() * 20 - Math.random() * 20, 'y': 150, 'lootValue': 2});
          }
        }
      }
    }

    frame 53 {
      _root.fightStat = 'Spooky Crypt';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 1;
      if (_root.save.inventoryName[_root.save.arenaPendant] != 'Anti-Checkpoint Pendant') {
        _root.areaSpookyKill = Math.floor(_root.save.arenaSpookyToday / 200) * 200;
      } else {
        _root.areaSpookyKill = 0;
      }
      _root.areaDamagePct = 5;
      _root.areaEpicChance = 0.5;
      _root.areaEpicChance2 = 5;
    }

    instance of movieClip 3483  {

      onClipEvent (load) {
        gotoAndStop(2);
        tempCheckpoint = _root.save.arenaSpookyToday;
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaSpookyToday > tempCheckpoint && _root.save.arenaSpookyToday % 200 == 0 && _root.save.inventoryName[_root.save.arenaPendant] != 'Anti-Checkpoint Pendant') {
          tempCheckpoint = _root.save.arenaSpookyToday;
          gotoAndStop(1);
          _xscale = 200;
          _yscale = 200;
        }
        if (_currentframe == 1) {
          if (_xscale > 100) {
            _xscale = _xscale - 20;
            _yscale = _yscale - 20;
            _alpha = 100;
          } else {
            _alpha = _alpha - 4;
            if (_alpha < 10) {
              gotoAndStop(2);
            }
          }
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 51;
        reqRank = 250;
        areaName = 'Secret Entrance';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 54 {
      if (isNaN(_root.dungeonDiff)) {
        _root.dungeonDiff = 1;
      }
      _root.dungeonClear = false;
      _root.fightStat = 'Secret Dungeon';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 1.2;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 20;
      _root.areaEpicChance = 2;
      _root.areaEpicChance2 = 15;
      _root.dungeonMovementCD = 0.1;
      maxMob = 20;
      maxBoss = 4;
      maxChest = 10;
      if (_root.dungeonDiff == 3) {
        _root.areaSpawn = 0.9;
        _root.areaAllyChance = 5;
        _root.areaEpicChance = 100;
        _root.areaEpicChance2 = 100;
        maxMob = 18;
        maxBoss = 6;
        maxChest = 15;
      }
      _root.dungeonAntiCurse = false;
      if (_root.save.arenaBuffType == 8 && _root.dungeonDiff != 3) {
        _root.dungeonAntiCurse = true;
        _root.fightStat2 = 'The curse of the dungeon has been removed.';
        _root.areaAllyChance = 0;
        _root.save.arenaHardcore = false;
        _root.areaDamagePct = 100;
        _root.areaRareChance = 0;
        _root.areaEpicChance = 0;
        _root.areaEpicChance2 = 2;
      }
      _root.dungeonRoom = 36;
      _root.dungeonRoomBack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonRoomProgress = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonRoomClear = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
      _root.dungeonRoomMob = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonCountMob = 0;
      _root.dungeonCountBoss = 0;
      _root.dungeonRoomChest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonCountChest = 0;
      _root.dungeonRoomDecor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonFinalRoom = random(35) + 1;
      _root.dungeonChestOpen = 0;
      _root.dungeonMobDefeat = 0;
      _root.dungeonBossDefeat = 0;
      i = 1;
      while (i <= 36) {
        _root.dungeonRoomBack[i] = random(4) + 1;
        _root.dungeonRoomDecor[i] = random(4) + 1;
        ++i;
      }
      _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
      _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
      _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
      while (_root.dungeonCountMob < maxMob) {
        i = random(35) + 1;
        if (_root.dungeonRoomMob[i] == 0) {
          _root.dungeonCountMob += 1;
          _root.dungeonRoomClear[i] = 0;
          _root.dungeonRoomMob[i] = random(15) + 1;
          if (_root.dungeonDiff == 3) {
            if (Math.random() < 0.3) {
              _root.dungeonRoomMob[i] = 16;
            }
          } else {
            if (Math.random() < 0.015) {
              _root.dungeonRoomMob[i] = 16;
            }
          }
        }
      }
      while (_root.dungeonCountBoss < maxBoss) {
        i = random(35) + 1;
        if (_root.dungeonRoomMob[i] == 0) {
          _root.dungeonCountBoss += 1;
          _root.dungeonRoomClear[i] = 0;
          _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
          if (_root.dungeonCountBoss >= 5) {
            _root.dungeonRoomMob[i] = 17 + random(4);
          }
        }
      }
      while (_root.dungeonCountChest < maxChest) {
        i = random(35) + 1;
        if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
          _root.dungeonCountChest += 1;
          _root.dungeonRoomChest[i] = 1;
        }
      }
      if (_root.dungeonDiff == 3) {
        _root.dispNews(66, 'You have 60 minutes to clear the Secret Dungeon!');
      } else {
        _root.dispNews(66, 'You have 30 minutes to clear the Secret Dungeon!');
      }
      _root.dispNews(66, 'Press Shift to open treasure chests or enter the portal.');
      _root.dispNews(66, 'You can use arrow keys to navigate.');
    }

    instance of movieClip 3508  {

      onClipEvent (enterFrame) {
        fr = _root.dungeonRoomBack[_root.dungeonRoom];
        if (_root.dungeonRoom > 6 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          fr += 4;
        }
        if (_root.dungeonDiff == 3) {
          fr += 8;
        }
        gotoAndStop(fr);
      }
    }

    instance of movieClip 3514  {

      onClipEvent (enterFrame) {
        fr = _root.dungeonRoomChest[_root.dungeonRoom] + 1;
        gotoAndStop(fr);
        if (Key.isDown(16) && _root.house.arena.popScreen._currentframe == 1) {
          if (_root.dungeonRoomChest[_root.dungeonRoom] == 1) {
            _root.dungeonRoomChest[_root.dungeonRoom] = 2;
            _root.dungeonChestOpen += 1;
            _root.fightStat = 'Treasure Chests: ' + _root.dungeonChestOpen + ' / ' + _root.dungeonCountChest;
            if (_root.dungeonAntiCurse == true) {
              if (_root.dungeonChestOpen < 10) {
                valueX = 25000 * _root.dungeonChestOpen;
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
              } else {
                if (_root.dungeonChestOpen == 10) {
                  itemToGet = random(5) + 1;
                  _root.incDt2();
                  if (itemToGet == 1) {
                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 30, 'defense': 125, 'speed': 0, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                  } else {
                    if (itemToGet == 2) {
                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                    } else {
                      if (itemToGet == 3) {
                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 40, 'defense': 81, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                      } else {
                        if (itemToGet == 4) {
                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                        } else {
                          if (itemToGet == 5) {
                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 40, 'defense': 81, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (Math.random() < 0.01 * _root.dungeonChestOpen) {
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
              }
              if (Math.random() < 0.025 * _root.dungeonChestOpen) {
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 10 + random(11)});
              }
              if (_root.dungeonChestOpen == 1) {
                valueX = 100000;
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
              } else {
                if (_root.dungeonChestOpen == 2) {
                  valueX = 300000;
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                } else {
                  if (_root.dungeonChestOpen == 3) {
                    valueX = 300000;
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot6', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                  } else {
                    if (_root.dungeonChestOpen == 4) {
                      valueX = 700000;
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot6', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                    } else {
                      if (_root.dungeonChestOpen == 5) {
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                      } else {
                        if (_root.dungeonChestOpen == 6) {
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                          if (_root.dungeonDiff == 2) {
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 198, 'name': 'Armor Mystery Rock Lv. 8', 'subtype': 'Armor Mystery Enhancer', 'power': 10, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 300000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                          }
                        } else {
                          if (_root.dungeonChestOpen == 7) {
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                            if (_root.dungeonDiff == 2) {
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 98, 'name': 'Weapon Mystery Rock Lv. 8', 'subtype': 'Weapon Mystery Enhancer', 'power': 10, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 300000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                            }
                          } else {
                            if (_root.dungeonChestOpen == 8) {
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                              if (_root.dungeonDiff == 2) {
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 199, 'name': 'Armor Mystery Rock Lv. 9', 'subtype': 'Armor Mystery Enhancer', 'power': 11, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 1000000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                              }
                            } else {
                              if (_root.dungeonChestOpen == 9) {
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                if (_root.dungeonDiff == 2) {
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 99, 'name': 'Weapon Mystery Rock Lv. 9', 'subtype': 'Weapon Mystery Enhancer', 'power': 11, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 1000000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                                }
                              } else {
                                if (_root.dungeonChestOpen == 10) {
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                  itemToGet = random(5) + 1;
                                  if (Math.random() < 0.05) {
                                    itemToGet = random(5) + 6;
                                  }
                                  holyUnob = 1;
                                  holyNoLife = true;
                                  if (_root.save.arenaHardcore == true) {
                                    holyNoLife = false;
                                    holyUnob += 2;
                                  }
                                  if (_root.worstMoon == true) {
                                    itemToGet = random(5) + 6;
                                    holyUnob += 3;
                                  }
                                  if (_root.apocalypse == true) {
                                    holyUnob += 4;
                                  }
                                  if (_root.dungeonDiff == 3) {
                                    holyUnob += 5;
                                  }
                                  _root.incDt2();
                                  if (itemToGet == 1) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 30, 'defense': 125, 'speed': 0, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                  } else {
                                    if (itemToGet == 2) {
                                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                    } else {
                                      if (itemToGet == 3) {
                                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 40, 'defense': 81, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                      } else {
                                        if (itemToGet == 4) {
                                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                        } else {
                                          if (itemToGet == 5) {
                                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 40, 'defense': 81, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                          } else {
                                            if (itemToGet == 6) {
                                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 40, 'defense': 285, 'speed': 1, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                            } else {
                                              if (itemToGet == 7) {
                                                _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 40, 'defense': 309, 'speed': 1, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                              } else {
                                                if (itemToGet == 8) {
                                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 50, 'defense': 237, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                                } else {
                                                  if (itemToGet == 9) {
                                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 40, 'defense': 309, 'speed': 1, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                                  } else {
                                                    if (itemToGet == 10) {
                                                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 50, 'defense': 237, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } else {
                                  if (_root.dungeonChestOpen >= 11 && _root.dungeonChestOpen <= 14) {
                                    _root.incDt2();
                                    _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                                    _root.incDt2();
                                    _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 200});
                                  } else {
                                    if (_root.dungeonChestOpen == 15) {
                                      _root.incDt2();
                                      _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                      _root.incDt2();
                                      _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 200});
                                      gigaRoll = random(10) + 1;
                                      if (_root.dungeonTimeLeft >= 3300) {
                                        gigaRoll = random(4) + 1;
                                      }
                                      if (gigaRoll == 1) {
                                        gigaAttack = 225;
                                        gigaSpeed = 0;
                                        gigaCrit = 25;
                                        gigaDex = 25;
                                        gigaHealth = 25;
                                        i = 1;
                                        while (i <= 4) {
                                          if (Math.random() < 0.25) {
                                            gigaCrit += 25;
                                          } else {
                                            if (Math.random() < 0.3333333333333333) {
                                              gigaDex += 25;
                                            } else {
                                              if (Math.random() < 0.5) {
                                                gigaHealth += 25;
                                                gigaSpeed += 5;
                                              } else {
                                                gigaAttack += 25;
                                              }
                                            }
                                          }
                                          ++i;
                                        }
                                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Accessory', 'frame': 22, 'name': 'GIGA PENDANT', 'reqRank': 250, 'subtype': 'Pendant', 'attack': gigaAttack, 'defense': 0, 'speed': gigaSpeed, 'crit': gigaCrit, 'dexterity': gigaDex, 'health': gigaHealth, 'bonus': 'Random', 'ability': 'Random', 'moreBonus': 'Random', 'maxLevel': 75, 'expTNL': 750000000, 'sell': 75000000, 'expiry': 0, 'enhance': 0, 'bonusPow': 0, 'unob': 50, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': ''});
                                      } else {
                                        if (gigaRoll == 2) {
                                          _root.incDt2();
                                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 333, 'name': 'GIGA LIFE ROCK', 'subtype': 'Accessory Lifespan Extender', 'power': 2, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 7500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Can only be used on GIGA PENDANT and GIGA EARRINGS.'});
                                        } else {
                                          if (gigaRoll == 3 || gigaRoll == 4) {
                                            _root.incDt2();
                                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 332, 'name': 'GIGA ENHANCER', 'subtype': 'Accessory Attack Enhancer', 'power': 125, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 7500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Can only be used on GIGA PENDANT and GIGA EARRINGS.'});
                                          } else {
                                            if (gigaRoll == 5 || gigaRoll == 6) {
                                              _root.incDt2();
                                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 100, 'name': 'Weapon Mystery Rock Lv. 10', 'subtype': 'Weapon Mystery Enhancer', 'power': 12, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 3500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                                            } else {
                                              _root.incDt2();
                                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 200, 'name': 'Armor Mystery Rock Lv. 10', 'subtype': 'Armor Mystery Enhancer', 'power': 12, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 3500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoomChest[_root.dungeonRoom] == 1) {
          _root.dungeonRoomChest[_root.dungeonRoom] = 2;
          _root.dungeonChestOpen += 1;
          _root.fightStat = 'Treasure Chests: ' + _root.dungeonChestOpen + ' / ' + _root.dungeonCountChest;
          if (_root.dungeonAntiCurse == true) {
            if (_root.dungeonChestOpen < 10) {
              valueX = 25000 * _root.dungeonChestOpen;
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
            } else {
              if (_root.dungeonChestOpen == 10) {
                itemToGet = random(5) + 1;
                _root.incDt2();
                if (itemToGet == 1) {
                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 30, 'defense': 125, 'speed': 0, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                } else {
                  if (itemToGet == 2) {
                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                  } else {
                    if (itemToGet == 3) {
                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 40, 'defense': 81, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                    } else {
                      if (itemToGet == 4) {
                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                      } else {
                        if (itemToGet == 5) {
                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 40, 'defense': 81, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 259200000, 'enhance': 0, 'bonusPow': 0, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (Math.random() < 0.01 * _root.dungeonChestOpen) {
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
            }
            if (Math.random() < 0.025 * _root.dungeonChestOpen) {
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 10 + random(11)});
            }
            if (_root.dungeonChestOpen == 1) {
              valueX = 100000;
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
            } else {
              if (_root.dungeonChestOpen == 2) {
                valueX = 300000;
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
              } else {
                if (_root.dungeonChestOpen == 3) {
                  valueX = 300000;
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot6', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                } else {
                  if (_root.dungeonChestOpen == 4) {
                    valueX = 700000;
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot6', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                  } else {
                    if (_root.dungeonChestOpen == 5) {
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                    } else {
                      if (_root.dungeonChestOpen == 6) {
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                        if (_root.dungeonDiff == 2) {
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 198, 'name': 'Armor Mystery Rock Lv. 8', 'subtype': 'Armor Mystery Enhancer', 'power': 10, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 300000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                        }
                      } else {
                        if (_root.dungeonChestOpen == 7) {
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                          if (_root.dungeonDiff == 2) {
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 98, 'name': 'Weapon Mystery Rock Lv. 8', 'subtype': 'Weapon Mystery Enhancer', 'power': 10, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 300000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                          }
                        } else {
                          if (_root.dungeonChestOpen == 8) {
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                            if (_root.dungeonDiff == 2) {
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 199, 'name': 'Armor Mystery Rock Lv. 9', 'subtype': 'Armor Mystery Enhancer', 'power': 11, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 1000000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                            }
                          } else {
                            if (_root.dungeonChestOpen == 9) {
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                              if (_root.dungeonDiff == 2) {
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 99, 'name': 'Weapon Mystery Rock Lv. 9', 'subtype': 'Weapon Mystery Enhancer', 'power': 11, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 1000000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                              }
                            } else {
                              if (_root.dungeonChestOpen == 10) {
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                itemToGet = random(5) + 1;
                                if (Math.random() < 0.05) {
                                  itemToGet = random(5) + 6;
                                }
                                holyUnob = 1;
                                holyNoLife = true;
                                if (_root.save.arenaHardcore == true) {
                                  holyNoLife = false;
                                  holyUnob += 2;
                                }
                                if (_root.worstMoon == true) {
                                  itemToGet = random(5) + 6;
                                  holyUnob += 3;
                                }
                                if (_root.apocalypse == true) {
                                  holyUnob += 4;
                                }
                                if (_root.dungeonDiff == 3) {
                                  holyUnob += 5;
                                }
                                _root.incDt2();
                                if (itemToGet == 1) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 30, 'defense': 125, 'speed': 0, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                } else {
                                  if (itemToGet == 2) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                  } else {
                                    if (itemToGet == 3) {
                                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 40, 'defense': 81, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                    } else {
                                      if (itemToGet == 4) {
                                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 30, 'defense': 147, 'speed': 0, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                      } else {
                                        if (itemToGet == 5) {
                                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 128, 'name': 'Holy Glory Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 40, 'defense': 81, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Light Element', 'ability': 'Blind Duration', 'moreBonus': '', 'maxLevel': 15, 'expTNL': 11000000, 'sell': 5000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 0, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                        } else {
                                          if (itemToGet == 6) {
                                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Hat', 'reqRank': 258, 'subtype': 'Hat', 'attack': 40, 'defense': 185, 'speed': 1, 'crit': 10, 'dexterity': 0, 'health': 30, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                          } else {
                                            if (itemToGet == 7) {
                                              _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Shirt', 'reqRank': 258, 'subtype': 'Shirt', 'attack': 40, 'defense': 209, 'speed': 1, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                            } else {
                                              if (itemToGet == 8) {
                                                _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Gloves', 'reqRank': 258, 'subtype': 'Gloves', 'attack': 50, 'defense': 137, 'speed': 7, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                              } else {
                                                if (itemToGet == 9) {
                                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Pants', 'reqRank': 258, 'subtype': 'Pants', 'attack': 40, 'defense': 209, 'speed': 1, 'crit': 10, 'dexterity': 30, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                                } else {
                                                  if (itemToGet == 10) {
                                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 129, 'name': 'Dark Angel Shoes', 'reqRank': 258, 'subtype': 'Shoes', 'attack': 50, 'defense': 137, 'speed': 3, 'crit': 30, 'dexterity': 0, 'health': 0, 'bonus': 'Dark Element', 'ability': 'Weaken Duration', 'moreBonus': '', 'maxLevel': 25, 'expTNL': 44000000, 'sell': 10000000, 'expiry': 604800000, 'enhance': 0, 'bonusPow': 50, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'Secret Dungeon Reward'});
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              } else {
                                if (_root.dungeonChestOpen >= 11 && _root.dungeonChestOpen <= 14) {
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 200});
                                } else {
                                  if (_root.dungeonChestOpen == 15) {
                                    _root.incDt2();
                                    _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                    _root.incDt2();
                                    _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 200});
                                    gigaRoll = random(10) + 1;
                                    if (_root.dungeonTimeLeft >= 3300) {
                                      gigaRoll = random(4) + 1;
                                    }
                                    if (gigaRoll == 1) {
                                      gigaAttack = 225;
                                      gigaSpeed = 0;
                                      gigaCrit = 25;
                                      gigaDex = 25;
                                      gigaHealth = 25;
                                      i = 1;
                                      while (i <= 4) {
                                        if (Math.random() < 0.25) {
                                          gigaCrit += 25;
                                        } else {
                                          if (Math.random() < 0.3333333333333333) {
                                            gigaDex += 25;
                                          } else {
                                            if (Math.random() < 0.5) {
                                              gigaHealth += 25;
                                              gigaSpeed += 5;
                                            } else {
                                              gigaAttack += 25;
                                            }
                                          }
                                        }
                                        ++i;
                                      }
                                      _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Accessory', 'frame': 22, 'name': 'GIGA PENDANT', 'reqRank': 250, 'subtype': 'Pendant', 'attack': gigaAttack, 'defense': 0, 'speed': gigaSpeed, 'crit': gigaCrit, 'dexterity': gigaDex, 'health': gigaHealth, 'bonus': 'Random', 'ability': 'Random', 'moreBonus': 'Random', 'maxLevel': 75, 'expTNL': 750000000, 'sell': 75000000, 'expiry': 0, 'enhance': 0, 'bonusPow': 0, 'unob': 50, 'noBonus': false, 'noLife': true, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': ''});
                                    } else {
                                      if (gigaRoll == 2) {
                                        _root.incDt2();
                                        _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 333, 'name': 'GIGA LIFE ROCK', 'subtype': 'Accessory Lifespan Extender', 'power': 2, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 7500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Can only be used on GIGA PENDANT and GIGA EARRINGS.'});
                                      } else {
                                        if (gigaRoll == 3 || gigaRoll == 4) {
                                          _root.incDt2();
                                          _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 332, 'name': 'GIGA ENHANCER', 'subtype': 'Accessory Attack Enhancer', 'power': 125, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 7500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Can only be used on GIGA PENDANT and GIGA EARRINGS.'});
                                        } else {
                                          if (gigaRoll == 5 || gigaRoll == 6) {
                                            _root.incDt2();
                                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 100, 'name': 'Weapon Mystery Rock Lv. 10', 'subtype': 'Weapon Mystery Enhancer', 'power': 12, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 3500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                                          } else {
                                            _root.incDt2();
                                            _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Enhancer', 'frame': 200, 'name': 'Armor Mystery Rock Lv. 10', 'subtype': 'Armor Mystery Enhancer', 'power': 12, 'curse': 0, 'success': 1000, 'bonus': '', 'ability': '', 'moreBonus': '', 'sell': 3500000, 'enhance': 0, 'bonusPow': 0, 'expiry': Infinity, 'desc': 'Secret Dungeon Reward'});
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 3529  {

      onClipEvent (load) {
        _parent.diag = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.diag < 2) {
          _parent.diag += 1;
        }
        fr = _root.dungeonRoomDecor[_root.dungeonRoom];
        gotoAndStop(fr);
        if (Key.isDown(16) && _root.house.arena.popScreen._currentframe == 1) {
          if (_root.dungeonRoom == _root.dungeonFinalRoom && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
            _root.save.arenaZone = 54;
          }
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoom == _root.dungeonFinalRoom && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          _root.save.arenaZone = 54;
        }
      }
    }

    instance of movieClip 3532  {

      onClipEvent (enterFrame) {
        fr = 2;
        if (_root.dungeonRoom % 6 == 0) {
          fr = 1;
        }
        gotoAndStop(fr);
      }
    }

    instance of movieClip 3535  {

      onClipEvent (enterFrame) {
        fr = 2;
        if (_root.dungeonRoom % 6 == 1) {
          fr = 1;
        }
        gotoAndStop(fr);
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom % 6 != 1 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Left>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom -= 1;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom % 6 != 0 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Right>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom += 1;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom > 6 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Up>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom -= 6;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom < 31 && _root.dungeonRoomClear[_root.dungeonRoom] == 1 || _root.dungeonRoom == 36) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoom == 36) {
          _root.save.arenaZone = 51;
          _root.arenaCombo = 0;
        } else {
          if (ok == 1 && _parent.diag >= 2) {
            _parent.diag = 0;
            _root.dungeonRoom += 6;
            _root.house.arena.enemy.approach = 4;
            ok = 0;
          }
        }
      }

      onClipEvent (keyPress '<Down>') {
        if (ok == 1 && _root.dungeonRoom != 36 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom += 6;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 1805;
        if (_root.dungeonDiff == 3) {
          timeLeft = 3605;
        }
        autoKick = true;
        destination = 51;
      }

      onClipEvent (enterFrame) {
        _root.dungeonTimeLeft = Math.ceil(timeLeft);
      }
    }

    frame 55 {
      _root.fightStat = 'Final Chamber';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 0.5;
      _root.areaDamagePct = 20;
      _root.areaEpicChance = 100;
      _root.areaEpicChance2 = 100;
      if (_root.dungeonAntiCurse == true) {
        _root.areaAllyChance = 0;
        _root.areaDamagePct = 100;
        _root.areaEpicChance = 0;
        _root.areaEpicChance2 = 20;
      }
      _root.arenaChaosPhase = 1;
      _root.arenaChaosDuration = 0;
    }

    instance of movieClip 3562  {

      onClipEvent (load) {
        auraCool = 400;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          if (_root.house.arena.enemy.enemyID == 432) {
            auraCool -= 1;
          }
          if (_root.arenaChaosPhase == 1 && _root.house.arena.enemy.enemyID == 432 && auraCool <= 0) {
            if (_root.dungeonDiff == 3 && _root.dungeonChestOpen >= 6 && Math.random() < 1 / (2000 - _root.dungeonChestOpen * 50)) {
              _root.arenaChaosPhase = 6;
              _root.arenaChaosDuration = 4;
              auraCool = 520 - _root.dungeonChestOpen * 8;
              _root.fightStat2 = 'CHAOS uses RAINBOW AURA! NOOOOOOOOO!!!!';
            } else {
              if ((_root.dungeonChestOpen >= 4 || _root.dungeonDiff == 3) && Math.random() < 0.001428571428571429) {
                _root.arenaChaosPhase = 2;
                _root.arenaChaosDuration = 7;
                auraCool = 520 - _root.dungeonChestOpen * 8;
                _root.fightStat2 = 'CHAOS uses Blue Aura!';
              } else {
                if ((_root.dungeonChestOpen >= 6 || _root.dungeonDiff == 3) && Math.random() < 0.0009090909090909091) {
                  _root.arenaChaosPhase = 3;
                  _root.arenaChaosDuration = 6;
                  auraCool = 520 - _root.dungeonChestOpen * 8;
                  _root.fightStat2 = 'CHAOS uses Green Aura!';
                } else {
                  if ((_root.dungeonChestOpen >= 8 || _root.dungeonDiff == 3) && Math.random() < 0.0006666666666666666) {
                    _root.arenaChaosPhase = 4;
                    _root.arenaChaosDuration = 7;
                    auraCool = 520 - _root.dungeonChestOpen * 8;
                    _root.fightStat2 = 'CHAOS uses Red Aura!';
                  } else {
                    if ((_root.dungeonChestOpen >= 10 || _root.dungeonDiff == 3) && Math.random() < 0.0005263157894736842) {
                      _root.arenaChaosPhase = 5;
                      _root.arenaChaosDuration = 6;
                      auraCool = 520 - _root.dungeonChestOpen * 8;
                      _root.fightStat2 = 'CHAOS uses... (hmm, which color is this) AURA!';
                    }
                  }
                }
              }
            }
          } else {
            _root.arenaChaosDuration -= 0.025;
            if (_root.arenaChaosDuration <= 0) {
              _root.arenaChaosPhase = 1;
            }
          }
        }
        if (_root.dungeonDiff == 3) {
          gotoAndStop(_root.arenaChaosPhase + 5);
        } else {
          gotoAndStop(_root.arenaChaosPhase);
        }
      }
    }

    frame 56 {
      _root.fightStat = 'Final Chamber';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 30;
        autoKick = true;
        destination = 51;
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 51;
        reqRank = 250;
        areaName = 'Secret Entrance';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 57 {
      _root.fightStat = 'THE MEGABOSS\'s Revenge';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 0.5;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 0.1;
      _root.areaRevengeKill = 0;
      _root.areaRevengeRage = 0;
      _root.areaRevengeCalm = 0;
      _root.areaDamagePct = 10;
      _root.toUpdateRound = 0;
      if (_root.save.arenaRevengeEntry != 1) {
        _root.dispNews(66, 'You can enter ' + _root.save.arenaRevengeEntry + ' more times today.');
      } else {
        _root.dispNews(66, 'You can enter 1 more time today.');
      }
      _root.areaEpicChance = 5;
      _root.areaEpicChance2 = 50;
    }

    instance roundDisp of movieClip 3593  {

      onClipEvent (load) {
        roundText2.text = 'ROUND';
        roundText.text = 1;
        roundText2._x = -140;
        roundText._x = -60;
        gotoAndStop(2);
      }

      onClipEvent (enterFrame) {
        if (_root.toUpdateRound == 1) {
          gotoAndStop(1);
          _root.arenaSoap = 0;
          _root.areaRevengeRage = 0;
          _root.areaRevengeCalm = 0;
          _root.toUpdateRound = 0;
          roundText2._x = -140;
          roundText._x = -60;
          if (_root.areaRevengeKill >= 9) {
            roundText2._x = -160;
            roundText._x = -40;
          }
          if (_root.areaRevengeKill >= 99) {
            roundText2._x = -180;
            roundText._x = -20;
          }
          if (_root.areaRevengeKill >= 999) {
            roundText2._x = -200;
            roundText._x = 0;
          }
          roundText.text = _root.areaRevengeKill + 1;
          redness = Math.floor(_root.areaRevengeKill) * 5;
          greenness = Math.floor(100 - _root.areaRevengeKill) * 5;
          if (redness > 250) {
            redness = 250;
          }
          if (greenness > 250) {
            greenness = 250;
          }
          if (redness < 0) {
            redness = 0;
          }
          if (greenness < 0) {
            greenness = 0;
          }
          colorCode = redness * 65536 + greenness * 256;
          roundText.textColor = colorCode;
          roundText2.textColor = colorCode;
          _xscale = 200;
          _yscale = 200;
        }
        if (_currentframe == 1) {
          if (_xscale > 100) {
            _xscale = _xscale - 20;
            _yscale = _yscale - 20;
            _alpha = 100;
          } else {
            _alpha = _alpha - 4;
            if (_alpha < 10) {
              gotoAndStop(2);
            }
          }
        }
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          _root.areaRevengeCalm += 1;
          if (_root.areaRevengeCalm > 30 && _root.areaRevengeRage > 0) {
            _root.areaRevengeRage = Math.floor(_root.areaRevengeRage * 0.9);
          }
        }
      }
    }

    instance of movieClip 3597  {

      onClipEvent (enterFrame) {
        targetScale = (150 - _root.areaRevengeRage) * 2 / 3;
        _xscale = _xscale + (targetScale - _xscale) / 1.5;
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 370;
        if (_root.save.arenaHardcore == true) {
          timeLeft += 90;
        }
        if (_root.worstMoon == true) {
          timeLeft += 90;
        }
        if (_root.apocalypse == true) {
          timeLeft += 15;
        }
        autoKick = true;
        destination = _root.save.arenaZoneOrig;
      }
    }

    frame 58 {
      _root.fightStat = 'Censor Ship';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 4.2;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 0.5;
      _root.areaDamagePct = 50;
      _root.areaEpicChance = 0.5;
      _root.areaEpicChance2 = 2.5;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 9;
        reqRank = 1;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 59 {
      _root.fightStat = 'Censored Departure';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 999;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3600  {

      onClipEvent (load) {
        claimed = false;
        _x = random(380) + 105;
        _y = random(45) + 140;
      }

      onClipEvent (mouseDown) {
        if (this.hitTest(_root.cursor)) {
          if (claimed != true) {
            if (_root.save.questType == 'Special' && _root.save.questSubtype == 'Treasure Map Piece' && Math.random() < 0.8) {
              _root.save.questCount += 1;
              claimed = true;
              _root.dispNews(66, 'Found a Treasure Map Piece!');
            } else {
              pixelToGet = 50000 + random(6) * 10000;
              _root.save.arenaPixel += pixelToGet;
              claimed = true;
              _root.dispNews(66, 'Found ' + _root.withComma(pixelToGet) + ' Pixels in a censored treasure chest!');
            }
          }
        }
      }
    }

    instance of movieClip 3600  {

      onClipEvent (load) {
        claimed = false;
        _x = random(380) + 105;
        _y = random(45) + 140;
      }

      onClipEvent (mouseDown) {
        if (this.hitTest(_root.cursor)) {
          if (claimed != true) {
            if (_root.save.questType == 'Special' && _root.save.questSubtype == 'Treasure Map Piece' && Math.random() < 0.8) {
              _root.save.questCount += 1;
              claimed = true;
              _root.dispNews(66, 'Found a Treasure Map Piece!');
            } else {
              pixelToGet = 50000 + random(6) * 10000;
              _root.save.arenaPixel += pixelToGet;
              claimed = true;
              _root.dispNews(66, 'Found ' + _root.withComma(pixelToGet) + ' Pixels in a censored treasure chest!');
            }
          }
        }
      }
    }

    instance of movieClip 3600  {

      onClipEvent (load) {
        claimed = false;
        _x = random(380) + 105;
        _y = random(45) + 140;
      }

      onClipEvent (mouseDown) {
        if (this.hitTest(_root.cursor)) {
          if (claimed != true) {
            if (_root.save.questType == 'Special' && _root.save.questSubtype == 'Treasure Map Piece' && Math.random() < 0.8) {
              _root.save.questCount += 1;
              claimed = true;
              _root.dispNews(66, 'Found a Treasure Map Piece!');
            } else {
              pixelToGet = 50000 + random(6) * 10000;
              _root.save.arenaPixel += pixelToGet;
              claimed = true;
              _root.dispNews(66, 'Found ' + _root.withComma(pixelToGet) + ' Pixels in a censored treasure chest!');
            }
          }
        }
      }
    }

    instance of movieClip 3600  {

      onClipEvent (load) {
        claimed = false;
        _x = random(380) + 105;
        _y = random(45) + 140;
      }

      onClipEvent (mouseDown) {
        if (this.hitTest(_root.cursor)) {
          if (claimed != true) {
            if (_root.save.questType == 'Special' && _root.save.questSubtype == 'Treasure Map Piece' && Math.random() < 0.8) {
              _root.save.questCount += 1;
              claimed = true;
              _root.dispNews(66, 'Found a Treasure Map Piece!');
            } else {
              pixelToGet = 50000 + random(6) * 10000;
              _root.save.arenaPixel += pixelToGet;
              claimed = true;
              _root.dispNews(66, 'Found ' + _root.withComma(pixelToGet) + ' Pixels in a censored treasure chest!');
            }
          }
        }
      }
    }

    instance of movieClip 3600  {

      onClipEvent (load) {
        claimed = false;
        _x = random(380) + 105;
        _y = random(45) + 140;
      }

      onClipEvent (mouseDown) {
        if (this.hitTest(_root.cursor)) {
          if (claimed != true) {
            if (_root.save.questType == 'Special' && _root.save.questSubtype == 'Treasure Map Piece' && Math.random() < 0.8) {
              _root.save.questCount += 1;
              claimed = true;
              _root.dispNews(66, 'Found a Treasure Map Piece!');
            } else {
              pixelToGet = 50000 + random(6) * 10000;
              _root.save.arenaPixel += pixelToGet;
              claimed = true;
              _root.dispNews(66, 'Found ' + _root.withComma(pixelToGet) + ' Pixels in a censored treasure chest!');
            }
          }
        }
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 100;
        autoKick = true;
        destination = 57;
      }
    }

    frame 60 {
      _root.fightStat = 'The Corruption';
      _root.areaSafe = false;
      _root.areaUnderwater = true;
      _root.areaSpawn = 99;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 5;
      _root.areaDamagePct = 2;
      _root.fightStat2 = '... wait, what?';
      if (_root.save.arenaCorruptionEntry != 1) {
        _root.dispNews(66, 'You can enter ' + _root.save.arenaCorruptionEntry + ' more times today.');
      } else {
        _root.dispNews(66, 'You can enter 1 more time today.');
      }
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 0;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Go back to Ye Olde Pub';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(destination);
      }
    }

    instance of movieClip 3344  {

      onClipEvent (load) {
        timeLeft = 900;
        autoKick = true;
        destination = _root.save.arenaZoneOrig;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena.enemy.enemyID == 0 && timeLeft <= 889) {
          timeLeft = 0;
        }
      }
    }

    frame 61 {
      _root.fightStat = 'Foodlandistan';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 2.5;
      _root.areaDamagePct = 0.1;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 100;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 11;
        reqRank = 50;
        areaName = 'Dragon Cave';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 62 {
      _root.fightStat = 'Abandoned Lab';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 9999999;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 100;
      _root.areaDamagePct = 0.3;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 100;
      _root.labEnemy = 0;
      _root.labCooldown = 3;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 7;
        reqRank = 30;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 63 {
      _root.fightStat = 'Lullaby Lake';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 4.3;
      _root.areaRareChance = 3;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 35;
      _root.areaEpicChance = 0.3;
      _root.areaEpicChance2 = 1.5;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 3;
        reqRank = 10;
        areaName = 'Mystic Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 63;
        reqRank = 40;
        areaName = 'Billygoat Bridge';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3621  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.areaFairyPower == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
        _xscale = _root.areaFairyPerformance / 2;
        if (_xscale > 100) {
          _xscale = 100;
        }
        if (_xscale < 0) {
          _xscale = 0;
        }
      }
    }

    frame 64 {
      _root.fightStat = 'Billygoat Bridge';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 4.2;
      _root.areaRareChance = 3.3;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 32;
      _root.areaEpicChance = 0.3;
      _root.areaEpicChance2 = 1.7;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 62;
        reqRank = 40;
        areaName = 'Lullaby Lake';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 64;
        reqRank = 40;
        areaName = 'Fabled Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 65 {
      _root.fightStat = 'Fabled Forest';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 4.1;
      _root.areaRareChance = 3.6;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 29;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 63;
        reqRank = 40;
        areaName = 'Billygoat Bridge';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 65;
        reqRank = 40;
        areaName = 'Fortress Foothills';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 66 {
      _root.fightStat = 'Fortress Foothills';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 4;
      _root.areaRareChance = 4;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 26;
      _root.areaEpicChance = 0.4;
      _root.areaEpicChance2 = 2.3;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 64;
        reqRank = 40;
        areaName = 'Fabled Forest';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 66;
        reqRank = 40;
        areaName = 'Castle Grimm';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 67 {
      _root.fightStat = 'Castle Grimm';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.9;
      _root.areaRareChance = 4.5;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 23;
      _root.areaEpicChance = 0.5;
      _root.areaEpicChance2 = 2.6;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 65;
        reqRank = 40;
        areaName = 'Fortress Foothills';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 67;
        reqRank = 40;
        areaName = 'Throne Room';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 68 {
      _root.fightStat = 'Throne Room';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.8;
      _root.areaRareChance = 5;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 20;
      _root.areaEpicChance = 0.7;
      _root.areaEpicChance2 = 3;
      _root.areaFairyPerformance = 0;
      _root.areaFairyPower = false;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 66;
        reqRank = 40;
        areaName = 'Castle Grimm';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 69 {
      _root.fightStat = 'Triangle Hideout';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 2;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaTriangleKill = 0;
      _root.areaDamagePct = 0.3;
      _root.areaEpicChance = 9;
      _root.areaEpicChance2 = 100;
      _root.dispNews(66, 'A weird blessing has tripled your MaxHP and Damage Resist.');
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 61;
        reqRank = 1;
        areaName = '';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    frame 70 {
      _root.fightStat = 'Treasure of the Pyramid';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 999;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 3681  {

      onClipEvent (enterFrame) {
        if (_currentframe > 340 || _currentframe < 81) {
          _x = 0;
          _y = 0;
        } else {
          if (_currentframe > 290 && Math.random() < 0.2) {
            _x = (random(3) - random(3)) * 5;
            _y = (random(2) - random(2)) * 5;
          } else {
            if (_currentframe > 240 && Math.random() < 0.2) {
              _x = (random(3) - random(2)) * 5;
              _y = (random(2) - random(2)) * 5;
            } else {
              if (_currentframe > 160 && Math.random() < 0.2) {
                _x = (random(2) - random(2)) * 5;
                _y = random(2) * 5;
              } else {
                if (_currentframe > 80 && Math.random() < 0.2) {
                  _x = (random(2) - random(2)) * 5;
                  _y = random(2) * 5;
                }
              }
            }
          }
        }
      }
    }

    frame 71 {
      _root.fightStat = '2011: Triangle Land';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3.5;
      _root.areaRareChance = 100;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 100;
      _root.dispNews(66, 'An overwhelming force rendered your equipment bonuses useless.');
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 71;
        reqRank = 1;
        areaName = 'Pirate Ship';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.apocSecretKill >= 200) {
          _root.fightStat2 = 'Voice: "Run, run for your lives!"';
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Access Denied', 'Get rid of the triangles first!');
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 45;
        reqRank = 70;
        areaName = 'Hole of Time';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.apocSecretKill < 200) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous', 'It\'s too dangerous to go here at the moment.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 600;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 200) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 72 {
      _root.fightStat = '2011: Pirate Ship';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 72;
        reqRank = 1;
        areaName = 'Dragon Cave';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.fightStat2 = 'Voice: "You don\'t say?"';
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 650;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 73 {
      _root.fightStat = '2011: Dragon Cave';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 73;
        reqRank = 1;
        areaName = 'Binary Battlefield';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.fightStat2 = 'Voice: "Well, I do say."';
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 700;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 74 {
      _root.fightStat = '2011: Binary Battlefield';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 74;
        reqRank = 1;
        areaName = 'The Beach';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 750;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 75 {
      _root.fightStat = '2011: The Beach';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 75;
        reqRank = 1;
        areaName = 'The Desert';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.fightStat2 = 'Voice: "Quick, block the path to the Deadlands!"';
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 800;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 76 {
      _root.fightStat = '2011: The Desert';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 76;
        reqRank = 1;
        areaName = 'Danger Zone';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 850;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 77 {
      _root.fightStat = '2011: Danger Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 77;
        reqRank = 1;
        areaName = 'Dark Lab';
      }

      onClipEvent (rollOver, dragOver) {
        if (areaName != '') {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>' + areaName + '</b></font>';
          if (_root.save.arenaLevel >= reqRank) {
            _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
          } else {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'This area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3686  {

      onClipEvent (load) {
        xLoc = 900;
      }

      onClipEvent (enterFrame) {
        if (_root.save.apocSecretKill >= 100) {
          xLoc -= 100 / _root.fps;
        }
        _x = Math.floor(xLoc / 5) * 5;
        if (_x < 80) {
          _root.house.arena.takeDamage(99999999999.0, 'Cannot Dodge');
        }
      }
    }

    frame 78 {
      _root.fightStat = '2011: Dark Lab';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 7.5;
      _root.areaRareChance = 1;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 1;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 2;
    }

    frame 79 {
      floorText.text = 1;
      if (_root.save.raidEndless == 0) {
        _root.save.raidEndless = 1;
      }
      _root.fightStat = 'Endless Dungeon - 1Fl.';
      _root.areaSafe = false;
      _root.areaUnderwater = true;
      _root.areaSpawn = 0.9;
      _root.areaRareChance = 10;
      _root.areaAllyChance = 1;
      _root.areaDamagePct = 0.02;
      _root.areaEpicChance = 1;
      _root.areaEpicChance2 = 5;
      _root.endlessFloor = 1;
      _root.dungeonTimeLeft = 305;
      _root.dungeonRoom = 36;
      _root.dungeonRoomBack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonRoomProgress = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonRoomClear = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
      _root.dungeonRoomMob = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonCountMob = 0;
      _root.dungeonCountBoss = 0;
      _root.dungeonRoomChest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonCountChest = 0;
      _root.dungeonRoomDecor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      _root.dungeonChestOpen = 0;
      _root.dungeonMobDefeat = 0;
      _root.dungeonBossDefeat = 0;
      i = 1;
      while (i <= 36) {
        _root.dungeonRoomBack[i] = random(4) + 1;
        _root.dungeonRoomDecor[i] = random(4) + 1;
        ++i;
      }
      _root.dungeonFinalRoom = random(29) + 7;
      _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
      _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
      if (_root.endlessFloor == floorCap) {
        _root.dungeonFinalRoom = 9001;
      }
      _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
      if ((_root.save.raidEndless >= (_root.endlessFloor - 1) * 2 + 11 || _root.save.raidEndless >= _root.endlessFloor + 40) && _root.endlessFloor % 5 == 1) {
        _root.dungeonRoomDecor[36] = 6;
      }
      skipBoss = random(4) + 1;
      while (_root.dungeonCountMob < 15) {
        i = random(29) + 7;
        if (_root.dungeonRoomMob[i] == 0) {
          _root.dungeonCountMob += 1;
          _root.dungeonRoomClear[i] = 0;
          _root.dungeonRoomMob[i] = random(15) + 1;
          if (Math.random() < 0.015) {
            _root.dungeonRoomMob[i] = 16;
          }
        }
      }
      while (_root.dungeonCountBoss < 4) {
        i = random(29) + 7;
        if (_root.dungeonRoomMob[i] == 0) {
          _root.dungeonCountBoss += 1;
          if (skipBoss != _root.dungeonCountBoss) {
            _root.dungeonRoomClear[i] = 0;
            _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
          }
        }
      }
      _root.dungeonCountBoss = 3;
      while (_root.dungeonCountChest < 10) {
        i = random(29) + 7;
        if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
          _root.dungeonCountChest += 1;
          _root.dungeonRoomChest[i] = 1;
        }
      }
      _root.dispNews(66, 'You can use arrow keys to navigate.');
      _root.dispNews(66, 'There\'s no air. You will take damage over time.');
    }

    instance of movieClip 3508  {

      onClipEvent (enterFrame) {
        fr = _root.dungeonRoomBack[_root.dungeonRoom];
        if (_root.endlessFloor % 5 != 0) {
          if (_root.dungeonRoom > 12 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
            fr += 4;
          }
        } else {
          if (_root.dungeonRoom > 6 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
            fr += 4;
          }
        }
        gotoAndStop(fr);
      }
    }

    instance of movieClip 3514  {

      onClipEvent (enterFrame) {
        fr = _root.dungeonRoomChest[_root.dungeonRoom] + 1;
        gotoAndStop(fr);
        if (Key.isDown(16) && _root.house.arena.popScreen._currentframe == 1) {
          if (_root.dungeonRoomChest[_root.dungeonRoom] == 1) {
            _root.dungeonRoomChest[_root.dungeonRoom] = 2;
            _root.dungeonChestOpen += 1;
            _root.fightStat = 'Treasure Chests: ' + _root.dungeonChestOpen + ' / 10';
            if (Math.random() < 0.02 * _root.dungeonChestOpen) {
              cfocGain = Math.floor(5 + Math.min(_root.endlessFloor, 200) / 10);
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': cfocGain});
            }
            if (Math.random() < 0.01 * _root.dungeonChestOpen) {
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
            }
            if (Math.random() < 0.05 * _root.dungeonChestOpen) {
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 10 + random(11)});
            }
            if (Math.random() < 0.01 * _root.dungeonChestOpen) {
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 10 + random(11)});
            }
            if (_root.endlessFloor >= 1 && Math.random() < 0.005 * _root.dungeonChestOpen) {
            }
            if (_root.dungeonChestOpen == 1) {
              valueX = 100000 * _root.endlessFloor;
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
            } else {
              if (_root.dungeonChestOpen == 2) {
                valueX = 200000 * _root.endlessFloor;
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
              } else {
                if (_root.dungeonChestOpen == 3) {
                  valueX = 300000 * _root.endlessFloor;
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                } else {
                  if (_root.dungeonChestOpen == 4) {
                    valueX = 400000 * _root.endlessFloor;
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                  } else {
                    if (_root.dungeonChestOpen == 5) {
                      valueX = 500000 * _root.endlessFloor;
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                    } else {
                      if (_root.dungeonChestOpen == 6) {
                        valueX = 600000 * _root.endlessFloor;
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                      } else {
                        if (_root.dungeonChestOpen == 7) {
                          valueX = 700000 * _root.endlessFloor;
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                        } else {
                          if (_root.dungeonChestOpen == 8) {
                            valueX = 800000 * _root.endlessFloor;
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                          } else {
                            if (_root.dungeonChestOpen == 9) {
                              valueX = 900000 * _root.endlessFloor;
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                              _root.incDt2();
                              _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                            } else {
                              if (_root.dungeonChestOpen == 10) {
                                if (_root.endlessFloor < 10 || _root.endlessFloor % 5 == 1) {
                                  valueX = 1000000 * _root.endlessFloor;
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                                } else {
                                  itemToGet = random(5) + 1;
                                  if (_root.endlessFloor % 5 == 0 && _root.endlessFloor > 30 || _root.worstMoon == true) {
                                    itemToGet = random(10) + 1;
                                    if (_root.endlessFloor >= 100) {
                                      itemToGet = random(5) + 6;
                                    }
                                  }
                                  holyNoLife = true;
                                  if (_root.save.arenaHardcore == true && _root.endlessFloor >= 5) {
                                    holyNoLife = false;
                                  }
                                  holyUnob = 6;
                                  if (_root.save.arenaHardcore == true) {
                                    holyUnob += 4;
                                  }
                                  if (_root.worstMoon == true) {
                                    holyUnob += 10;
                                  }
                                  if (_root.apocalypse == true) {
                                    holyUnob += 10;
                                  }
                                  _root.incDt2();
                                  floorText = '[' + Math.min(_root.endlessFloor, 250) + 'F] ';
                                  if (itemToGet == 1) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Hat', 'reqRank': 363, 'subtype': 'Hat', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 2) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Shirt', 'reqRank': 363, 'subtype': 'Shirt', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 3) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Gloves', 'reqRank': 363, 'subtype': 'Gloves', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 4) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Pants', 'reqRank': 363, 'subtype': 'Pants', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 5) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Shoes', 'reqRank': 363, 'subtype': 'Shoes', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 6) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Hat', 'reqRank': 413, 'subtype': 'Hat', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 7) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Shirt', 'reqRank': 413, 'subtype': 'Shirt', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 8) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Gloves', 'reqRank': 413, 'subtype': 'Gloves', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 9) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Pants', 'reqRank': 413, 'subtype': 'Pants', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet == 10) {
                                    _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Shoes', 'reqRank': 413, 'subtype': 'Shoes', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                  }
                                  if (itemToGet <= 5) {
                                    cfocGain = Math.floor(50 + Math.min(_root.endlessFloor, 200));
                                    _root.incDt2();
                                    _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': cfocGain});
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoomChest[_root.dungeonRoom] == 1) {
          _root.dungeonRoomChest[_root.dungeonRoom] = 2;
          _root.dungeonChestOpen += 1;
          _root.fightStat = 'Treasure Chests: ' + _root.dungeonChestOpen + ' / 10';
          if (Math.random() < 0.02 * _root.dungeonChestOpen) {
            cfocGain = Math.floor(5 + Math.min(_root.endlessFloor, 200) / 10);
            _root.incDt2();
            _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': cfocGain});
          }
          if (Math.random() < 0.01 * _root.dungeonChestOpen) {
            _root.incDt2();
            _root.house.arena.stuffHolder.attachMovie('newLoot9', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
          }
          if (Math.random() < 0.05 * _root.dungeonChestOpen) {
            _root.incDt2();
            _root.house.arena.stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 10 + random(11)});
          }
          if (Math.random() < 0.01 * _root.dungeonChestOpen) {
            _root.incDt2();
            _root.house.arena.stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 5 + random(6)});
          }
          if (_root.endlessFloor >= 1 && Math.random() < 0.01 * _root.dungeonChestOpen) {
          }
          if (_root.dungeonChestOpen == 1) {
            valueX = 100000 * _root.endlessFloor;
            _root.incDt2();
            _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
          } else {
            if (_root.dungeonChestOpen == 2) {
              valueX = 200000 * _root.endlessFloor;
              _root.incDt2();
              _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
            } else {
              if (_root.dungeonChestOpen == 3) {
                valueX = 300000 * _root.endlessFloor;
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                _root.incDt2();
                _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
              } else {
                if (_root.dungeonChestOpen == 4) {
                  valueX = 400000 * _root.endlessFloor;
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                  _root.incDt2();
                  _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                } else {
                  if (_root.dungeonChestOpen == 5) {
                    valueX = 500000 * _root.endlessFloor;
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                    _root.incDt2();
                    _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                  } else {
                    if (_root.dungeonChestOpen == 6) {
                      valueX = 600000 * _root.endlessFloor;
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                      _root.incDt2();
                      _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                    } else {
                      if (_root.dungeonChestOpen == 7) {
                        valueX = 700000 * _root.endlessFloor;
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                        _root.incDt2();
                        _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 1});
                      } else {
                        if (_root.dungeonChestOpen == 8) {
                          valueX = 800000 * _root.endlessFloor;
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                          _root.incDt2();
                          _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                        } else {
                          if (_root.dungeonChestOpen == 9) {
                            valueX = 900000 * _root.endlessFloor;
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                            _root.incDt2();
                            _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                          } else {
                            if (_root.dungeonChestOpen == 10) {
                              if (_root.endlessFloor < 10 || _root.endlessFloor % 5 == 1) {
                                valueX = 1000000 * _root.endlessFloor;
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': valueX});
                                _root.incDt2();
                                _root.house.arena.stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': 2});
                              } else {
                                itemToGet = random(5) + 1;
                                if (_root.endlessFloor % 5 == 0 && _root.endlessFloor > 30 || _root.worstMoon == true) {
                                  itemToGet = random(10) + 1;
                                  if (_root.endlessFloor >= 100) {
                                    itemToGet = random(5) + 6;
                                  }
                                }
                                holyNoLife = true;
                                if (_root.save.arenaHardcore == true && _root.endlessFloor >= 5) {
                                  holyNoLife = false;
                                }
                                holyUnob = 6;
                                if (_root.save.arenaHardcore == true) {
                                  holyUnob += 4;
                                }
                                if (_root.worstMoon == true) {
                                  holyUnob += 10;
                                }
                                if (_root.apocalypse == true) {
                                  holyUnob += 10;
                                }
                                _root.incDt2();
                                floorText = '[' + Math.min(_root.endlessFloor, 250) + 'F] ';
                                if (itemToGet == 1) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Hat', 'reqRank': 363, 'subtype': 'Hat', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 2) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Shirt', 'reqRank': 363, 'subtype': 'Shirt', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 3) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Gloves', 'reqRank': 363, 'subtype': 'Gloves', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 4) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Pants', 'reqRank': 363, 'subtype': 'Pants', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 5) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 175, 'name': floorText + 'Dragon Slayer Shoes', 'reqRank': 363, 'subtype': 'Shoes', 'attack': 40 + Math.min(_root.endlessFloor, 200) * 4, 'defense': 400 + Math.min(_root.endlessFloor, 200) * 40, 'speed': 0, 'crit': 20 + Math.min(_root.endlessFloor, 200) * 2, 'dexterity': 10 + Math.min(_root.endlessFloor, 200) * 1, 'health': 10 + Math.min(_root.endlessFloor, 200) * 1, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 44, 'expTNL': 700000000, 'sell': 1000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 4, 'bonusPow': _root.endlessFloor * 70, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 6) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Hat', 'reqRank': 413, 'subtype': 'Hat', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 7) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Shirt', 'reqRank': 413, 'subtype': 'Shirt', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 8) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Gloves', 'reqRank': 413, 'subtype': 'Gloves', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 9) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Pants', 'reqRank': 413, 'subtype': 'Pants', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet == 10) {
                                  _root.house.arena.stuffHolder.attachMovie('invenLoot', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'type': 'Armor', 'frame': 176, 'name': floorText + 'Demon Slayer Shoes', 'reqRank': 413, 'subtype': 'Shoes', 'attack': 60 + Math.min(_root.endlessFloor, 200) * 6, 'defense': 600 + Math.min(_root.endlessFloor, 200) * 60, 'speed': 0, 'crit': 30 + Math.min(_root.endlessFloor, 200) * 3, 'dexterity': 20 + Math.min(_root.endlessFloor, 200) * 2, 'health': 20 + Math.min(_root.endlessFloor, 200) * 2, 'bonus': 'Spawn Rate', 'ability': 'Attack', 'moreBonus': 'Attack Power', 'maxLevel': 66, 'expTNL': 2700000000.0, 'sell': 10000000 * _root.endlessFloor, 'expiry': (50 + Math.min(_root.endlessFloor, 200)) * 86400000, 'enhance': 6, 'bonusPow': _root.endlessFloor * 110, 'unob': holyUnob, 'noBonus': false, 'noLife': holyNoLife, 'noRecycle': false, 'noFuse': false, 'spirit': false, 'desc': 'An item awarded for opening all 10 Treasure Chests on Floor ' + Math.min(_root.endlessFloor, 250) + ' of Endless Dungeon.'});
                                }
                                if (itemToGet <= 5) {
                                  cfocGain = Math.floor(50 + Math.min(_root.endlessFloor, 200));
                                  _root.incDt2();
                                  _root.house.arena.stuffHolder.attachMovie('newLoot15', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 340, 'y': 150, 'lootValue': cfocGain});
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    instance of movieClip 3529  {

      onClipEvent (load) {
        floorCap = 250;
        _parent.diag = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent.diag < 2) {
          _parent.diag += 1;
        }
        fr = _root.dungeonRoomDecor[_root.dungeonRoom];
        gotoAndStop(fr);
        if (_root.dungeonRoom == 36) {
          _parent.floorText.text = _root.endlessFloor;
        }
        if (Key.isDown(16) && _root.house.arena.popScreen._currentframe == 1) {
          if (_root.dungeonRoom == 36 && _root.dungeonRoomDecor[36] == 6) {
            _root.house.arena.kommanderDialog.gotoAndStop(8);
          }
          if (_root.dungeonRoom == _root.dungeonFinalRoom && _root.dungeonRoomClear[_root.dungeonRoom] == 1 && _root.endlessFloor < floorCap) {
            _root.endlessFloor += 1;
            if (_root.save.raidEndless < _root.endlessFloor) {
              _root.save.raidEndless = _root.endlessFloor;
            }
            _root.fightStat = 'Endless Dungeon - ' + _root.endlessFloor + 'Fl.';
            _parent.floorText.text = _root.endlessFloor;
            _root.dungeonRoom = 36;
            _root.dungeonRoomBack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            _root.dungeonRoomProgress = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            _root.dungeonRoomClear = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
            _root.dungeonRoomMob = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            _root.dungeonCountMob = 0;
            _root.dungeonCountBoss = 0;
            _root.dungeonRoomChest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            _root.dungeonCountChest = 0;
            _root.dungeonRoomDecor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            _root.dungeonChestOpen = 0;
            _root.dungeonMobDefeat = 0;
            _root.dungeonBossDefeat = 0;
            i = 1;
            while (i <= 36) {
              _root.dungeonRoomBack[i] = random(4) + 1;
              _root.dungeonRoomDecor[i] = random(4) + 1;
              ++i;
            }
            if (_root.endlessFloor % 5 != 0) {
              _root.dungeonFinalRoom = random(29) + 7;
              _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
              _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
              if (_root.endlessFloor == floorCap) {
                _root.dungeonFinalRoom = 9001;
              }
              _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
              if ((_root.save.raidEndless >= (_root.endlessFloor - 1) * 2 + 11 && _root.endlessFloor < 170 || _root.save.raidEndless >= _root.endlessFloor + 40) && _root.endlessFloor % 5 == 1 && _root.endlessFloor < 170) {
                _root.dungeonRoomDecor[36] = 6;
              }
              skipBoss = random(4) + 1;
              while (_root.dungeonCountMob < 15) {
                i = random(29) + 7;
                if (_root.dungeonRoomMob[i] == 0) {
                  _root.dungeonCountMob += 1;
                  _root.dungeonRoomClear[i] = 0;
                  _root.dungeonRoomMob[i] = random(15) + 1;
                  if (Math.random() < 0.015) {
                    _root.dungeonRoomMob[i] = 16;
                  }
                }
              }
              while (_root.dungeonCountBoss < 4) {
                i = random(29) + 7;
                if (_root.dungeonRoomMob[i] == 0) {
                  _root.dungeonCountBoss += 1;
                  if (skipBoss != _root.dungeonCountBoss) {
                    _root.dungeonRoomClear[i] = 0;
                    _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
                  }
                }
              }
              _root.dungeonCountBoss = 3;
              while (_root.dungeonCountChest < 10) {
                i = random(29) + 7;
                if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
                  _root.dungeonCountChest += 1;
                  _root.dungeonRoomChest[i] = 1;
                }
              }
            } else {
              _root.dungeonFinalRoom = random(35) + 1;
              _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
              _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
              if (_root.endlessFloor == floorCap) {
                _root.dungeonFinalRoom = 9001;
              }
              _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
              if ((_root.save.raidEndless >= (Math.min(_root.endlessFloor, 200) - 1) * 2 + 11 || _root.save.raidEndless >= Math.min(_root.endlessFloor, 200) + 40) && _root.endlessFloor % 5 == 1) {
                _root.dungeonRoomDecor[36] = 6;
              }
              while (_root.dungeonCountMob < 20) {
                i = random(35) + 1;
                if (_root.dungeonRoomMob[i] == 0) {
                  _root.dungeonCountMob += 1;
                  _root.dungeonRoomClear[i] = 0;
                  _root.dungeonRoomMob[i] = random(15) + 1;
                  if (Math.random() < 0.015) {
                    _root.dungeonRoomMob[i] = 16;
                  }
                }
              }
              while (_root.dungeonCountBoss < 4) {
                i = random(35) + 1;
                if (_root.dungeonRoomMob[i] == 0) {
                  _root.dungeonCountBoss += 1;
                  _root.dungeonRoomClear[i] = 0;
                  _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
                }
              }
              while (_root.dungeonCountChest < 10) {
                i = random(35) + 1;
                if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
                  _root.dungeonCountChest += 1;
                  _root.dungeonRoomChest[i] = 1;
                }
              }
            }
          }
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoom == 36 && _root.dungeonRoomDecor[36] == 6) {
          _root.house.arena.kommanderDialog.gotoAndStop(8);
        }
        if (_root.dungeonRoom == _root.dungeonFinalRoom && _root.dungeonRoomClear[_root.dungeonRoom] == 1 && _root.endlessFloor < floorCap) {
          _root.endlessFloor += 1;
          if (_root.save.raidEndless < _root.endlessFloor) {
            _root.save.raidEndless = _root.endlessFloor;
          }
          _root.fightStat = 'Endless Dungeon - ' + _root.endlessFloor + 'Fl.';
          _parent.floorText.text = _root.endlessFloor;
          _root.dungeonRoom = 36;
          _root.dungeonRoomBack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonRoomProgress = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonRoomClear = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
          _root.dungeonRoomMob = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonCountMob = 0;
          _root.dungeonCountBoss = 0;
          _root.dungeonRoomChest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonCountChest = 0;
          _root.dungeonRoomDecor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonChestOpen = 0;
          _root.dungeonMobDefeat = 0;
          _root.dungeonBossDefeat = 0;
          i = 1;
          while (i <= 36) {
            _root.dungeonRoomBack[i] = random(4) + 1;
            _root.dungeonRoomDecor[i] = random(4) + 1;
            ++i;
          }
          if (_root.endlessFloor % 5 != 0) {
            _root.dungeonFinalRoom = random(29) + 7;
            _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
            _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
            if (_root.endlessFloor == floorCap) {
              _root.dungeonFinalRoom = 9001;
            }
            _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
            if ((_root.save.raidEndless >= (Math.min(_root.endlessFloor, 200) - 1) * 2 + 11 || _root.save.raidEndless >= Math.min(_root.endlessFloor, 200) + 40) && _root.endlessFloor % 5 == 1) {
              _root.dungeonRoomDecor[36] = 6;
            }
            skipBoss = random(4) + 1;
            while (_root.dungeonCountMob < 15) {
              i = random(29) + 7;
              if (_root.dungeonRoomMob[i] == 0) {
                _root.dungeonCountMob += 1;
                _root.dungeonRoomClear[i] = 0;
                _root.dungeonRoomMob[i] = random(15) + 1;
                if (Math.random() < 0.015) {
                  _root.dungeonRoomMob[i] = 16;
                }
              }
            }
            while (_root.dungeonCountBoss < 4) {
              i = random(29) + 7;
              if (_root.dungeonRoomMob[i] == 0) {
                _root.dungeonCountBoss += 1;
                if (skipBoss != _root.dungeonCountBoss) {
                  _root.dungeonRoomClear[i] = 0;
                  _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
                }
              }
            }
            _root.dungeonCountBoss = 3;
            while (_root.dungeonCountChest < 10) {
              i = random(29) + 7;
              if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
                _root.dungeonCountChest += 1;
                _root.dungeonRoomChest[i] = 1;
              }
            }
          } else {
            _root.dungeonFinalRoom = random(35) + 1;
            _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
            _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
            if (_root.endlessFloor == floorCap) {
              _root.dungeonFinalRoom = 9001;
            }
            _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
            if ((_root.save.raidEndless >= (_root.endlessFloor - 1) * 2 + 11 && _root.endlessFloor < 170 || _root.save.raidEndless >= _root.endlessFloor + 40) && _root.endlessFloor % 5 == 1 && _root.endlessFloor < 170) {
              _root.dungeonRoomDecor[36] = 6;
            }
            while (_root.dungeonCountMob < 20) {
              i = random(35) + 1;
              if (_root.dungeonRoomMob[i] == 0) {
                _root.dungeonCountMob += 1;
                _root.dungeonRoomClear[i] = 0;
                _root.dungeonRoomMob[i] = random(15) + 1;
                if (Math.random() < 0.015) {
                  _root.dungeonRoomMob[i] = 16;
                }
              }
            }
            while (_root.dungeonCountBoss < 4) {
              i = random(35) + 1;
              if (_root.dungeonRoomMob[i] == 0) {
                _root.dungeonCountBoss += 1;
                _root.dungeonRoomClear[i] = 0;
                _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
              }
            }
            while (_root.dungeonCountChest < 10) {
              i = random(35) + 1;
              if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
                _root.dungeonCountChest += 1;
                _root.dungeonRoomChest[i] = 1;
              }
            }
          }
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom % 6 != 1 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Left>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom -= 1;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom % 6 != 0 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Right>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom += 1;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.endlessFloor % 5 != 0) {
          if (_root.dungeonRoom > 12 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
            ok = 1;
          }
        } else {
          if (_root.dungeonRoom > 6 && _root.dungeonRoomClear[_root.dungeonRoom] == 1) {
            ok = 1;
          }
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release, keyPress '<Up>') {
        if (ok == 1 && _parent.diag >= 2) {
          _parent.diag = 0;
          _root.dungeonRoom -= 6;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    instance of movieClip 3280  {

      onClipEvent (enterFrame) {
        ok = 0;
        if (_root.dungeonRoom < 31 && _root.dungeonRoomClear[_root.dungeonRoom] == 1 || _root.dungeonRoom == 36) {
          ok = 1;
        }
        if (ok == 0 && _alpha != 0) {
          _alpha = 0;
        }
        if (ok == 1 && _alpha != 100) {
          _alpha = 100;
        }
      }

      onClipEvent (release) {
        if (_root.dungeonRoom == 36) {
          _root.save.arenaZone = 0;
          _root.arenaCombo = 0;
        } else {
          if (ok == 1 && _parent.diag >= 2) {
            _parent.diag = 0;
            _root.dungeonRoom += 6;
            _root.house.arena.enemy.approach = 4;
            ok = 0;
          }
        }
      }

      onClipEvent (keyPress '<Down>') {
        if (ok == 1 && _parent.diag >= 2 && _root.dungeonRoom != 36) {
          _parent.diag = 0;
          _root.dungeonRoom += 6;
          _root.house.arena.enemy.approach = 4;
          ok = 0;
        }
      }
    }

    frame 80 {
      _root.fightStat = 'Rebirth';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaLevel >= 500) {
          _root.save.arenaLevel = 40;
          _root.save.arenaExp = 0;
          _root.save.arenaExpTotal = 1162600;
          _root.save.arenaAttack = 65000;
          _root.save.arenaDefense = 65000;
          _root.save.arenaMaxHealth = 650000;
          _root.save.arenaMaxMana = 130000;
          _root.save.arenaAccuracy = 13000;
          _root.save.arenaEvasion = 13000;
          _root.save.robaconLevel = 40;
          _root.save.robaconExp = 0;
          _root.save.robaconExpTotal = 1162600;
          _root.save.arenaWeapon = 0;
          _root.save.arenaHat = 0;
          _root.save.arenaShirt = 0;
          _root.save.arenaGloves = 0;
          _root.save.arenaPants = 0;
          _root.save.arenaShoes = 0;
          _root.save.arenaSkin = 0;
          _root.save.arenaPendant = 0;
          _root.save.arenaMedal = 0;
          _root.save.arenaEarring = 0;
          _root.save.arenaTrinket = 0;
          _root.save.arenaSubWeapon = 0;
          _root.save.battlePoint += 2040;
          _root.save.bannedB += 1;
          _root.save.arenaSP = 800 + _root.save.arenaUltimateSP * 10;
          _root.save.arenaTotalSkill = 0;
          _root.save.arenaTotalSP = 0;
          i = 1;
          while (i <= 66) {
            if (_root.save.arenaSkill[i] > 0) {
              _root.save.arenaSkill[i] = 0;
            }
            ++i;
          }
          _root.save.arenaBuffType = 0;
          _root.save.arenaBuffDuration = 0;
          _root.gCheck = true;
          _root.save.arenaZone = 0;
        }
      }
    }

    frame 81 {
      _root.fightStat = 'Special Training Zone';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    frame 82 {
      _root.fightStat = 'Special Training Zone';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 100;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
      _root.areaDamage = 0;
      _root.areaDamageRemainder = 0;
    }

    frame 83 {
      _root.fightStat = 'Technical Battleground < ' + _root.save.arenaEvent + ' >';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 3;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 0.1;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
      _root.eventConsecKill = 0;
    }

    instance of movieClip 3764  {

      onClipEvent (load) {
        gotoAndStop(_root.save.arenaEvent);
      }
    }

    instance of movieClip 3280  {

      onClipEvent (load) {
        destination = 0;
        reqRank = 1;
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>Ye Olde Pub</b></font>';
        if (reqRank > 1 && _root.save.arenaLevel >= reqRank) {
          _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + reqRank + '</b></font>\nClick here to travel!';
        } else {
          if (reqRank > 1) {
            _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + reqRank + '</b></font>\nYour Arena Rank is not high enough.';
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaLevel >= reqRank) {
          _root.house.arena.travel(destination);
        } else {
          _root.showPopup('Too dangerous!', 'The next area is too dangerous for you. Better avoid it for now.');
        }
      }
    }

    instance of movieClip 3781  {

      onClipEvent (load) {
        _alpha = 0;
        tmpStreak = 0;
      }

      onClipEvent (enterFrame) {
        if (tmpStreak != _root.eventConsecKill) {
          tmpStreak = _root.eventConsecKill;
          if (tmpStreak >= 2) {
            streakText.text = tmpStreak;
            if (tmpStreak >= 100) {
              gotoAndStop(6);
            } else {
              if (tmpStreak >= 50) {
                gotoAndStop(5);
              } else {
                if (tmpStreak >= 20) {
                  gotoAndStop(4);
                } else {
                  if (tmpStreak >= 10) {
                    gotoAndStop(3);
                  } else {
                    if (tmpStreak >= 5) {
                      gotoAndStop(2);
                    } else {
                      gotoAndStop(1);
                    }
                  }
                }
              }
            }
            _alpha = 100;
            _xscale = 140;
            _yscale = 140;
          }
        }
        if (_xscale > 100) {
          _xscale = _xscale - 4;
          _yscale = _yscale - 4;
        }
        if (tmpStreak < 2 && _alpha > 0) {
          _alpha = _alpha - 5;
          if (_alpha < 0) {
            _alpha = 0;
          }
        }
      }
    }

    frame 84 {
      _root.fightStat = 'Cake Hall - Lobby';
      _root.areaSafe = true;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 0;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
    }

    frame 85 {
      _root.fightStat = 'Cake Hall - Showdown';
      _root.areaSafe = false;
      _root.areaUnderwater = false;
      _root.areaSpawn = 10;
      _root.areaRareChance = 0;
      _root.areaAllyChance = 0;
      _root.areaDamagePct = 10;
      _root.areaEpicChance = 0;
      _root.areaEpicChance2 = 0;
      _root.areaDamage = 0;
      _root.areaDamageRemainder = 0;
    }
  }

  movieClip 3802  {
  }

  movieClip 3803  {

    frame 1 {
      function createSquare(hex, alp) {
        tmpCode = hex + '-' + alp;
        this.createEmptyMovieClip('square_mc', 100);
        this.square_mc.beginFill(('0x' + hex) * 1, alp);
        this.square_mc.moveTo(0, 0);
        this.square_mc.lineTo(5, 0);
        this.square_mc.lineTo(5, 5);
        this.square_mc.lineTo(0, 5);
        this.square_mc.lineTo(0, 0);
        this.square_mc.endFill();
        _root.save.drawingBoardHex[loc] = hex;
        _root.save.drawingBoardAlp[loc] = alp;
      }

      xLoc = Math.round(_x / 5);
      yLoc = Math.round(_y / 5);
      if (xLoc < 30) {
        loc = Math.round(xLoc + yLoc * 30);
      } else {
        loc = 900 + Math.round(xLoc - 30 + yLoc * 10);
      }
      if (_root.save.drawingBoardAlp[loc] > 0) {
        createSquare(_root.save.drawingBoardHex[loc], _root.save.drawingBoardAlp[loc]);
      }
      onEnterFrame = function () {
        newCode = _root.save.drawingBoardHex[loc] + '-' + _root.save.drawingBoardAlp[loc];
        if (newCode != tmpCode) {
          createSquare(_root.save.drawingBoardHex[loc], _root.save.drawingBoardAlp[loc]);
        }
        if (_xmouse >= 0 && _xmouse < 5 && _ymouse > 0 && _ymouse <= 5 && _parent.holding == true) {
          if (Key.isDown(16)) {
            createSquare('000000', 0);
          } else {
            createSquare(_root.drawingHex, _root.drawingAlp);
          }
        }
      };

      if (_root.house.arena._currentframe == 1) {
        onEnterFrame = null;
      }
    }
  }

  movieClip 3804  {

    frame 1 {
      stop();
    }
  }

  movieClip 3805  {

    frame 1 {
      stop();
      _root.arenaQuickAttack = false;
      _root.meleeHit = true;
      _root.arenaSkillSpec = '';
    }

    instance of movieClip 522  {

      onClipEvent (load) {
        function checkRot() {
          if (_root.save.arenaOutfitWeapon != 0) {
            if (_root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 91 || _root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 93) {
              _alpha = 0;
            } else {
              _alpha = 100;
            }
          }
          id = _root.save.arenaWeapon;
          frame = _root.save.inventoryFrame[id];
          if (id == 0) {
            frame = 1;
          }
          gotoAndStop(frame);
          if (_rotation == 0) {
            _root.weaponHeight = Math.round(_height / 2);
          } else {
            _root.weaponHeight = Math.round(_width / 2);
          }
          if (_root.save.inventorySubtype[id] == 'Spear' || _root.save.inventorySubtype[id] == 'Polearm (Stab)' || _root.save.inventorySubtype[id] == 'Dagger') {
            _rotation = 90;
            _x = -10;
          } else {
            if (_root.save.inventorySubtype[id] == 'Wand' && _root.save.inventoryName[id] != 'Fairy Godmother Wand') {
              _rotation = -90;
            } else {
              if (_root.save.inventorySubtype[id] == 'Staff' || _root.save.inventoryName[id] == 'Fairy Godmother Wand') {
                _rotation = 0;
                _y = -20;
              } else {
                if (_root.save.inventorySubtype[id] == 'Claw') {
                  _rotation = 0;
                  _x = -10;
                } else {
                  _rotation = 0;
                }
              }
            }
          }
        }

        checkRot();
      }

      onClipEvent (enterFrame) {
        checkRot();
      }
    }

    frame 2 {
      _root.meleeHit = false;
      if (_root.save.arenaZone == 47 && _root.house.arena.enemy.enemyID == 0) {
        if (_root.doomTowerDel > 0) {
          _root.doomTowerDel -= 1;
        } else {
          _root.doomTowerTaunt += 10;
          if (_root.doomTowerTaunt > 100) {
            _root.doomTowerTaunt = 100;
          }
        }
      }
      if (_root.save.inventoryMaxLevel[_root.save.arenaSubWeapon] == -1) {
        _root.save.inventoryExpTNL[_root.save.arenaSubWeapon] -= 1;
        if (_root.save.inventoryExpTNL[_root.save.arenaSubWeapon] < 0) {
          _root.save.inventoryExpTNL[_root.save.arenaSubWeapon] = 0;
          _root.save.inventoryExpiry[_root.save.arenaSubWeapon] = 0;
          _root.save.inventoryNoLife[_root.save.arenaSubWeapon] = true;
          _root.house.arena.checkStat();
        }
      }
    }

    instance of movieClip 522  {

      onClipEvent (load) {
        if (_root.save.arenaOutfitWeapon != 0) {
          if (_root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 91 || _root.save.inventoryFrame[_root.save.arenaOutfitWeapon] == 93) {
            _alpha = 0;
          } else {
            _alpha = 100;
          }
        }
        id = _root.save.arenaWeapon;
        frame = _root.save.inventoryFrame[id];
        if (id == 0) {
          frame = 1;
        }
        gotoAndStop(frame);
        if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 284 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 291) {
          if (_root.arenaStrike >= 30) {
            _root.arenaStrike = 0;
          }
          if (Math.random() < 0.01 && _root.arenaStrike == 0) {
            _root.arenaStrike = 1;
          }
        }
        if (_root.save.inventoryName[id] == 'Ultimate Weapon') {
          _root.incDt();
          _root.house.arena.stuffHolder.attachMovie('missile', 'missile' + _root.summonCount, _root.antiLag + 2000, {'_x': 225, '_y': 122.5, 'missilePower': Math.ceil(_root.arenaSkillPower * 0.01 * (10 + Math.min(Math.floor(_root.save.totalStupidity / 150), 20))), 'missileKnockBack': 0, 'missileQuickAttack': _root.arenaQuickAttack, 'missileSpec': ''});
        }
        if (_root.save.inventoryName[id] == 'Reincarnation Weapon') {
          _root.incDt();
          _root.house.arena.stuffHolder.attachMovie('missile', 'missile' + _root.summonCount, _root.antiLag + 2000, {'_x': 225, '_y': 122.5, 'missilePower': Math.ceil(_root.arenaSkillPower * 0.3), 'missileKnockBack': 0, 'missileQuickAttack': _root.arenaQuickAttack, 'missileSpec': ''});
        }
        if (_root.save.inventoryRange[id] == false) {
          _rotation = 90;
        } else {
          _rotation = 0;
          _root.incDt();
          _root.house.arena.stuffHolder.attachMovie('missile', 'missile' + _root.summonCount, _root.antiLag, {'_x': 90, '_y': 127.5, 'missilePower': _root.arenaSkillPower, 'missileKnockBack': _root.arenaKnockBack, 'missileQuickAttack': _root.arenaQuickAttack, 'missileSpec': _root.arenaSkillSpec});
          if (_root.save.inventorySubtype[id] == 'Gun') {
            _x = -10;
          }
          if (_root.save.inventorySubtype[id] == 'Slingshot') {
            _x = -10;
          }
        }
      }

      onClipEvent (enterFrame) {
        _x = 0;
      }
    }
  }

  movieClip 3827  {

    frame 1 {
      stop();
    }
  }

  movieClip 3843  {

    frame 1 {
      stop();
    }
  }

  movieClip 3845  {

    frame 1 {
      del = 40;
      holdL = false;
      holdR = false;
      minCol = 2;
      maxCol = 4;
      if (_root.save.dt >= 4) {
        minCol = 1;
        maxCol = 15;
      }
      onEnterFrame = function () {
        if (_root.save.arenaZone == 46) {
          if (Key.isDown(37)) {
            if (holdL != true) {
              _root.save.medalColor -= 1;
              if (_root.save.medalColor < minCol) {
                _root.save.medalColor = maxCol;
              }
              del = 40;
              holdL = true;
            }
          } else {
            if (holdL == true) {
              holdL = false;
            }
          }
          if (Key.isDown(39)) {
            if (holdR != true) {
              _root.save.medalColor += 1;
              if (_root.save.medalColor > maxCol) {
                _root.save.medalColor = minCol;
              }
              del = 40;
              holdR = true;
            }
          } else {
            if (holdR == true) {
              holdR = false;
            }
          }
        }
        del += 1;
        if (del >= 40) {
          del = 0;
          if (_root.save.inventoryName[_root.save.arenaOutfitMedal] != '' && _root.save.arenaOutfitMedal != 0 && _root.cursoridle < 600 && _root.save.inventoryFrame[_root.save.arenaOutfitMedal] > 4) {
            gotoAndStop(2);
            textBox.text = _root.save.inventoryName[_root.save.arenaOutfitMedal];
            medIcon.gotoAndStop(_root.save.inventoryFrame[_root.save.arenaOutfitMedal]);
            bgBox._width = textBox.textWidth + 22;
            bgBox.gotoAndStop(_root.save.medalColor + 1);
            textBox._x = 2;
            medIcon._x = bgBox._width;
            _x = Math.floor(30 - bgBox._width / 2);
            if (_x < -35) {
              _x = -35;
            }
          } else {
            if (_root.save.inventoryName[_root.save.arenaOutfitMedal] != '' && _root.save.arenaOutfitMedal != 0 && _root.cursoridle < 600 && _root.save.inventoryFrame[_root.save.arenaOutfitMedal] <= 3) {
              gotoAndStop(1);
            } else {
              if (_root.save.inventoryName[_root.save.arenaMedal] != '' && _root.save.arenaMedal != 0 && _root.cursoridle < 600 && _root.save.inventoryFrame[_root.save.arenaMedal] > 4) {
                gotoAndStop(2);
                textBox.text = _root.save.inventoryName[_root.save.arenaMedal];
                medIcon.gotoAndStop(_root.save.inventoryFrame[_root.save.arenaMedal]);
                bgBox._width = textBox.textWidth + 22;
                bgBox.gotoAndStop(_root.save.medalColor + 1);
                textBox._x = 2;
                medIcon._x = bgBox._width;
                _x = Math.floor(30 - bgBox._width / 2);
                if (_x < -35) {
                  _x = -35;
                }
              } else {
                gotoAndStop(1);
              }
            }
          }
        }
      };

    }
  }

  movieClip 3857  {
  }

  movieClip 3858  {

    frame 1 {
      stop();
    }

    frame 8 {
      stop();
    }
  }

  movieClip 3859  {

    instance of movieClip 3858  {

      onClipEvent (enterFrame) {
        if (_root.manaPower != true) {
          gotoAndStop(1);
        } else {
          if (_currentframe == 1) {
            gotoAndPlay(2);
          }
        }
      }
    }
  }

  movieClip 3861  {
  }

  movieClip 3863  {
  }

  movieClip 3865  {
  }

  movieClip 3867  {
  }

  movieClip 3869  {
  }

  movieClip 3871  {
  }

  movieClip 3873  {
  }

  movieClip 3874  {

    instance of movieClip 1208  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaEarring;
          if (_root.save.arenaOutfitEarring != 0) {
            id = _root.save.arenaOutfitEarring;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1208  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaEarring;
          if (_root.save.arenaOutfitEarring != 0) {
            id = _root.save.arenaOutfitEarring;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance body of movieClip 1245  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaSkin;
          if (_root.save.arenaOutfitSkin != 0) {
            id = _root.save.arenaOutfitSkin;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          nm1 = _root.save.inventoryName[_root.save.arenaHat];
          nm2 = _root.save.inventoryName[_root.save.arenaShirt];
          nm3 = _root.save.inventoryName[_root.save.arenaGloves];
          nm4 = _root.save.inventoryName[_root.save.arenaPants];
          nm5 = _root.save.inventoryName[_root.save.arenaShoes];
          if (_root.save.arenaOutfitHat != 0) {
            nm1 = _root.save.inventoryName[_root.save.arenaOutfitHat];
          }
          if (_root.save.arenaOutfitShirt != 0) {
            nm2 = _root.save.inventoryName[_root.save.arenaOutfitShirt];
          }
          if (_root.save.arenaOutfitGloves != 0) {
            nm3 = _root.save.inventoryName[_root.save.arenaOutfitGloves];
          }
          if (_root.save.arenaOutfitPants != 0) {
            nm4 = _root.save.inventoryName[_root.save.arenaOutfitPants];
          }
          if (_root.save.arenaOutfitShoes != 0) {
            nm5 = _root.save.inventoryName[_root.save.arenaOutfitShoes];
          }
          if (nm1 == 'CHAOS HAT' && nm2 == 'CHAOS SHIRT' && nm4 == 'CHAOS PANTS' && nm5 == 'CHAOS SHOES') {
            fr = 12;
          }
          if (nm4 == 'Ghost Pants') {
            fr = 12;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShoes;
          if (_root.save.arenaOutfitShoes != 0) {
            id = _root.save.arenaOutfitShoes;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShoes;
          if (_root.save.arenaOutfitShoes != 0) {
            id = _root.save.arenaOutfitShoes;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaGloves;
          if (_root.save.arenaOutfitGloves != 0) {
            id = _root.save.arenaOutfitGloves;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaGloves;
          if (_root.save.arenaOutfitGloves != 0) {
            id = _root.save.arenaOutfitGloves;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 798  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaPants;
          if (_root.save.arenaOutfitPants != 0) {
            id = _root.save.arenaOutfitPants;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 594  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaHat;
          if (_root.save.arenaOutfitHat != 0) {
            id = _root.save.arenaOutfitHat;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 661  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShirt;
          if (_root.save.arenaOutfitShirt != 0) {
            id = _root.save.arenaOutfitShirt;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 3804  {

      onClipEvent (load) {
        holding = false;
        if (_root.save.disableDrawing == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }
    }

    instance sword of movieClip 3805  {

      onClipEvent (enterFrame) {
        if (_root.arenaDelay > _root.arenaDelay2) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }
    }

    instance of movieClip 3827  {

      onClipEvent (load) {
        function checkFrame() {
          fr = _root.save.arenaRing + 1;
          if (_root.save.visibleRing == false) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 3859  {

      onClipEvent (enterFrame) {
        if (_root.save.disableManaEffect == true) {
          fr = 4;
        } else {
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
            fr = 3;
          } else {
            if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
              fr = 2;
            } else {
              fr = 1;
            }
          }
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3861  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaPoison > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3863  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaWeaken > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3865  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaBlind > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3867  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaStun > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3869  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaPotionBlock > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3871  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaSlow > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }

    instance of movieClip 3873  {

      onClipEvent (load) {
        gotoAndStop(2);
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 10) {
          del = 0;
          if (_root.arenaZombify > 0) {
            fr = 1;
          } else {
            fr = 2;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }
      }
    }
  }

  movieClip 3876  {
  }

  movieClip 3880  {
  }

  movieClip 3882  {
  }

  movieClip 3884  {
  }

  movieClip 3885  {

    frame 1 {
      onEnterFrame = function () {
        nameText._width = nameText.textWidth + 5;
        if (nameText._width < 80) {
          nameText._width = 80;
        }
        tag._width = nameText._width + 50;
        _x = 65 - tag._width / 2;
      };

    }
  }

  movieClip 3888  {

    frame 1 {
      stop();
    }
  }

  movieClip 3890  {
  }

  movieClip 3891  {

    instance of movieClip 3890  {

      onClipEvent (load) {
        _parent._visible = false;
        insideBar._xscale = 0;
      }

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.enemyID != 0 && _parent._parent.enemy.enemyID != 440 && _parent._parent.enemy.enemyID != 227 && _root.save.arenaZone != 61) {
          _parent._visible = true;
          _parent.nameTag.levelText.text = 'Lv. ' + _parent._parent.enemy.level;
          if (_parent._parent.enemy.ultra == true) {
            if (_parent._parent.enemy.ultra3 == true) {
              _parent.nameTag.levelText.text = 'ULTRA-3';
            } else {
              if (_parent._parent.enemy.ultra2 == true) {
                _parent.nameTag.levelText.text = 'ULTRA-2';
              } else {
                if (_parent._parent.enemy.ultra1 == true) {
                  _parent.nameTag.levelText.text = 'ULTRA-1';
                }
              }
            }
          }
          _parent.nameTag.nameText.text = _parent._parent.enemy.name;
          _parent._x = _parent._parent.enemy._x + _parent._parent.enemy._width / 2 - 65;
          enemyRank = _parent._parent.enemy.enemyRank;
          if (enemyRank == 1) {
            tempColor = 16776960;
          } else {
            if (enemyRank == 2) {
              tempColor = 16777215;
            } else {
              if (enemyRank == 3) {
                tempColor = 16724736;
              } else {
                if (enemyRank == 4) {
                  tempColor = 10027263;
                }
              }
            }
          }
          if (_parent._parent.enemy.ultra == true) {
            _parent.nameTag.gotoAndStop(4);
          } else {
            if (_parent._parent.enemy.epic == true) {
              _parent.nameTag.gotoAndStop(3);
            } else {
              if (_parent._parent.enemy.rare == true) {
                _parent.nameTag.gotoAndStop(2);
              } else {
                _parent.nameTag.gotoAndStop(1);
              }
            }
          }
          _parent.nameTag.levelText.textColor = tempColor;
          _parent.nameTag.nameText.textColor = tempColor;
          targetScale = (_parent._parent.enemy.hp / _parent._parent.enemy.maxhp) * 100;
          if (_root.save.arenaZone == 81) {
            targetScale = 100 - _parent._parent.enemy.explodeCount / 36;
          }
          if (targetScale < 0) {
            targetScale = 0;
          }
          if (_parent._parent.enemy.zombie == true) {
            insideBar.gotoAndStop(4);
          } else {
            if (_parent._parent.enemy.evolve != 0) {
              insideBar.gotoAndStop(2);
            } else {
              if (_parent._parent.enemy.boss == true) {
                insideBar.gotoAndStop(3);
              } else {
                insideBar.gotoAndStop(1);
              }
            }
          }
          insideBar._xscale += (targetScale - insideBar._xscale) / 2;
        } else {
          _parent._visible = false;
        }
      }
    }

    instance of movieClip 3861  {

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.poison > 0) {
          fr = 1;
        } else {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3863  {

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.weaken > 0) {
          fr = 1;
        } else {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3865  {

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.blind > 0) {
          fr = 1;
        } else {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3867  {

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.stun > 0) {
          fr = 1;
        } else {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3871  {

      onClipEvent (enterFrame) {
        if (_parent._parent.enemy.slow > 0) {
          fr = 1;
        } else {
          fr = 2;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }
  }

  movieClip 3943  {
  }

  movieClip 4063  {

    frame 31 {
      _root.house.arena.enemy.immune = true;
    }

    frame 82 {
      _root.house.arena.enemy.immune = false;
    }
  }

  movieClip 4086  {
  }

  movieClip 4087  {

    instance of movieClip 4086  {

      onClipEvent (enterFrame) {
        pct = (_root.house.arena.enemy.hp / _root.house.arena.enemy.maxhp) * 100;
        gotoAndStop(1);
        if (pct < 80) {
          gotoAndStop(2);
        }
        if (pct < 60) {
          gotoAndStop(3);
        }
        if (pct < 40) {
          gotoAndStop(4);
        }
        if (pct < 20) {
          gotoAndStop(5);
        }
        if (pct < 5) {
          gotoAndStop(6);
        }
      }
    }
  }

  movieClip 4118  {

    frame 1 {
      laserCount = 0;
      del = 0;
      onEnterFrame = function () {
        if (_currentframe == 2) {
          del += 1;
        }
        reqDel = 210 - laserCount * 10;
        if (reqDel < 40) {
          reqDel = 40 + random(11);
        }
        if (del >= reqDel && _currentframe == 2) {
          gotoAndPlay(3);
        }
      };

    }

    frame 2 {
      stop();
    }

    frame 26 {
      _root.house.arena.takeDamage(20, 'Ignore Defense');
    }

    frame 31 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 36 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 41 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 46 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 51 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 56 {
      _root.house.arena.takeDamage(5, 'Ignore Defense');
    }

    frame 60 {
      del = 0;
      laserCount += 1;
      gotoAndStop(2);
    }
  }

  movieClip 4201  {

    frame 80 {
      stop();
      _root.house.arena.enemy.immune = true;
      onEnterFrame = function () {
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          if (Math.random() < 0.01) {
            play();
          }
        }
      };

    }

    frame 81 {
      onEnterFrame = null;
      _root.house.arena.enemy.immune = false;
    }
  }

  movieClip 4225  {

    frame 120 {
      stop();
      _root.house.arena.enemy.immune = true;
      lim = 0;
      onEnterFrame = function () {
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          lim += 1;
          if (Math.random() < 0.01 && lim >= 40 || lim >= 120) {
            play();
          }
        }
      };

    }

    frame 121 {
      onEnterFrame = null;
      _root.house.arena.enemy.immune = false;
    }
  }

  movieClip 4237  {

    frame 1 {
      way = -1;
      onEnterFrame = function () {
        _y = _y + way * (_y + 325) / 10;
        if (_y > -160) {
          _y = -160;
          way = -1;
        }
        if (_y < -320) {
          _y = -320;
          way = 1;
        }
      };

    }
  }

  movieClip 4240  {

    frame 1 {
      way = -1;
      onEnterFrame = function () {
        _y = _y + way * (_y + 325) / 10;
        if (_y > -160) {
          _y = -160;
          way = -1;
        }
        if (_y < -320) {
          _y = -320;
          way = 1;
        }
      };

    }
  }

  movieClip 4346  {

    frame 1 {
      way = -1;
      onEnterFrame = function () {
        _y = _y + way * (_y + 325) / 10;
        if (_y > -160) {
          _y = -160;
          way = -1;
        }
        if (_y < -320) {
          _y = -320;
          way = 1;
        }
      };

    }
  }

  movieClip 4349  {

    frame 1 {
      way = -1;
      onEnterFrame = function () {
        _y = _y + way * (_y + 325) / 10;
        if (_y > -160) {
          _y = -160;
          way = -1;
        }
        if (_y < -320) {
          _y = -320;
          way = 1;
        }
      };

    }
  }

  movieClip 4391  {
  }

  movieClip 4398  {
  }

  movieClip 4400  {
  }

  movieClip 4402  {
  }

  movieClip 4404  {
  }

  movieClip 4406  {
  }

  movieClip 4407  {

    frame 1 {
      onEnterFrame = function () {
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          if (_root.house.arena.enemy.lifespan < 30 && _root.house.arena.enemy.hp < _root.house.arena.enemy.maxhp) {
            gotoAndPlay(2);
            _root.fightStat2 = 'Corrupted Giant Treeman casts Shield and nullifies all damage!';
          }
          if (Math.random() < 0.001 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.9)) {
            gotoAndPlay(2);
            _root.fightStat2 = 'Corrupted Giant Treeman casts Shield and nullifies all damage!';
          } else {
            if (Math.random() < 0.001 && _root.arenaZombify <= 2 && _root.arenaPotionBlock <= 5 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.8)) {
              gotoAndPlay(60);
              _root.fightStat2 = 'Corrupted Giant Treeman throws a potion block at you!';
            } else {
              if (Math.random() < 0.001 && _root.arenaPotionBlock <= 2 && _root.arenaZombify <= 5 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.7)) {
                gotoAndPlay(89);
                _root.fightStat2 = 'Corrupted Giant Treeman casts Thunder! OW!';
              } else {
                if (Math.random() < 0.001 && _root.arenaSoap <= 5 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.6)) {
                  gotoAndPlay(102);
                  _root.fightStat2 = 'Corrupted Giant Treeman throws SOAP at you!';
                } else {
                  if (Math.random() < 0.001 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.5)) {
                    gotoAndPlay(131);
                    _root.fightStat2 = 'Corrupted Giant Treeman heals some HP!';
                  } else {
                    if (Math.random() < 0.001 && _root.arenaSlow <= 5 && _root.house.arena.enemy.hp <= Math.floor(_root.house.arena.enemy.maxhp * 0.4)) {
                      gotoAndPlay(180);
                      _root.fightStat2 = 'Corrupted Giant Treeman summons an icicle!';
                    }
                  }
                }
              }
            }
          }
        }
      };

      if (_root.house.arena._currentframe != 1) {
        onEnterFrame = null;
      }
    }

    frame 2 {
      onEnterFrame = null;
    }

    frame 6 {
      _root.house.arena.enemy.immune = true;
    }

    frame 50 {
      stop();
      onEnterFrame = function () {
        if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
          if (Math.random() < 0.01) {
            if (_root.house.arena.enemy.lifespan >= 30) {
              play();
            }
          }
        }
      };

    }

    frame 59 {
      _root.house.arena.enemy.immune = false;
      gotoAndStop(1);
    }

    frame 60 {
      onEnterFrame = null;
    }

    frame 80 {
      _root.arenaStun = 3;
      _root.arenaPotionBlock = 30;
      _root.house.arena.takeDamage(1000000, 'Ignore Defense');
      _root.save.arenaMana = 1;
      _root.save.arenaSpirit = 0;
      _root.arenaCombo = 0;
    }

    frame 88 {
      gotoAndStop(1);
    }

    frame 89 {
      onEnterFrame = null;
    }

    frame 91 {
      _root.arenaStun = 3;
      _root.arenaWeaken = 30;
      _root.arenaBlind = 30;
      _root.arenaZombify = 30;
      _root.save.arenaMana = 0;
      _root.save.arenaSpirit = 0;
      _root.arenaCombo = 0;
      _root.house.arena.takeDamage(600000, 'Ignore Defense');
    }

    frame 95 {
      _root.save.arenaMana = 0;
      _root.save.arenaSpirit = 0;
      _root.arenaCombo = 0;
      _root.house.arena.takeDamage(600000, 'Ignore Defense');
    }

    frame 99 {
      _root.save.arenaMana = 0;
      _root.save.arenaSpirit = 0;
      _root.arenaCombo = 0;
      _root.house.arena.takeDamage(800000, 'Ignore Defense');
    }

    frame 101 {
      gotoAndStop(1);
    }

    frame 102 {
      onEnterFrame = null;
    }

    frame 122 {
      _root.arenaSoap = 30;
      _root.house.arena.takeDamage(1000000, 'Ignore Defense');
      _root.arenaCombo = 0;
    }

    frame 130 {
      gotoAndStop(1);
    }

    frame 131 {
      onEnterFrame = null;
    }

    frame 169 {
      _root.house.arena.enemy.hp += Math.floor((_root.house.arena.enemy.maxhp - _root.house.arena.enemy.hp) * 0.01);
      if (_root.house.arena.enemy.hp > maxhp) {
        _root.house.arena.enemy.hp = maxhp;
      }
      _root.house.arena.enemy.poison = 0;
      _root.house.arena.enemy.weaken = 0;
      _root.house.arena.enemy.blind = 0;
      _root.house.arena.enemy.stun = 0;
      _root.house.arena.enemy.slow = 0;
    }

    frame 179 {
      gotoAndStop(1);
    }

    frame 180 {
      onEnterFrame = null;
    }

    frame 205 {
      _root.arenaPoison = 30;
      _root.arenaWeaken = 30;
      _root.arenaSlow = 30;
      _root.arenaStun = 3;
      _root.house.arena.takeDamage(3000000, 'Ignore Defense');
      _root.arenaCombo = 0;
    }

    frame 208 {
      gotoAndStop(1);
    }
  }

  movieClip 4422  {

    frame 1 {
      stop();
      if (isNaN(damageToTake)) {
        damageToTake = 2000000 + _root.save.arenaSkillMax[56] * 200000;
        if (_root.save.arenaSkillMax[56] >= 50) {
          damageToTake *= 3;
        }
      }
      damageToTake += 200000;
    }

    frame 2 {
      _root.house.arena.enemy.element = 'Fire';
      _root.house.arena.takeDamage(damageToTake, 'Fire');
      _root.house.arena.rangedAttack.gotoAndStop(3);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 3 {
      _root.house.arena.enemy.element = 'Ice';
      _root.house.arena.takeDamage(damageToTake, 'Ice');
      _root.house.arena.rangedAttack.gotoAndStop(4);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 4 {
      _root.house.arena.enemy.element = 'Wind';
      _root.house.arena.takeDamage(damageToTake, 'Wind');
      _root.house.arena.rangedAttack.gotoAndStop(5);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 5 {
      _root.house.arena.enemy.element = 'Earth';
      _root.house.arena.takeDamage(damageToTake, 'Earth');
      _root.house.arena.rangedAttack.gotoAndStop(6);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 6 {
      _root.house.arena.enemy.element = 'Thunder';
      _root.house.arena.takeDamage(damageToTake, 'Thunder');
      _root.house.arena.rangedAttack.gotoAndStop(7);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 7 {
      _root.house.arena.enemy.element = 'Water';
      _root.house.arena.takeDamage(damageToTake, 'Water');
      _root.house.arena.rangedAttack.gotoAndStop(8);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 8 {
      _root.house.arena.enemy.element = 'Light';
      _root.house.arena.takeDamage(damageToTake, 'Light');
      _root.house.arena.rangedAttack.gotoAndStop(2);
      _root.house.arena.rangedAttack._alpha = 100;
    }

    frame 9 {
      _root.house.arena.enemy.element = 'Dark';
      _root.house.arena.takeDamage(damageToTake, 'Dark');
      _root.house.arena.rangedAttack.gotoAndStop(1);
      _root.house.arena.rangedAttack._alpha = 100;
    }
  }

  movieClip 4423  {

    instance of movieClip 4422  {

      onClipEvent (load) {
        del = 0;
        targetSpd = 0;
        curSpd = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena._currentframe == 1) {
          curSpd += (targetSpd - curSpd) / 10;
          del += 1;
          if (del < 200) {
            targetSpd = 0;
          }
          if (del >= 200 && del < 400) {
            gotoAndStop(1);
            targetSpd = 10;
          }
          if (del >= 400) {
            del = 0;
            if (_root.save.arenaSkillMax[56] >= 50) {
              del = 80;
            }
            fr = random(8) + 2;
            gotoAndStop(fr);
          }
          _parent._rotation += curSpd;
        }
      }
    }
  }

  movieClip 4428  {

    frame 1 {
      if (_root.house.arena._currentframe != 1) {
        stop();
      }
    }

    frame 160 {
      _root.house.arena.takeDamage(750000 + _root.save.arenaSkillMax[57] * 75000, 'Ignore Defense');
      _root.arenaStun = 2;
      if (_root.save.arenaSkillMax[57] >= 50) {
        _root.arenaStun = 3;
      }
    }
  }

  movieClip 4442  {

    frame 1 {
      if (_root.house.arena._currentframe != 1) {
        stop();
      }
      if (isNaN(damageToTake)) {
        damageToTake = 2000000 + _root.save.arenaSkillMax[58] * 200000;
        if (_root.save.arenaSkillMax[58] >= 50) {
          damageToTake *= 3;
        }
      }
      damageToTake += 200000;
    }

    frame 20 {
      if (_root.save.arenaSkillMax[58] >= 50) {
        gotoAndPlay(40);
      }
    }

    frame 60 {
      _root.house.arena.enemy.poison = 0;
      _root.house.arena.enemy.weaken = 0;
      _root.house.arena.enemy.blind = 0;
      _root.house.arena.enemy.stun = 0;
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 140 {
      if (_root.save.arenaSkillMax[58] >= 50) {
        gotoAndPlay(160);
      }
    }

    frame 180 {
      _root.house.arena.enemy.poison = 0;
      _root.house.arena.enemy.weaken = 0;
      _root.house.arena.enemy.blind = 0;
      _root.house.arena.enemy.stun = 0;
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }
  }

  movieClip 4444  {
  }

  movieClip 4457  {

    frame 1 {
      if (_root.house.arena._currentframe != 1) {
        stop();
      }
      if (isNaN(damageToTake)) {
        damageToTake = 750000 + _root.save.arenaSkillMax[60] * 75000;
        if (_root.save.arenaSkillMax[60] >= 50) {
          damageToTake *= 3;
        }
      }
      damageToTake += 25000;
    }

    frame 85 {
      _root.house.arena.enemy.hp += 450000000;
      if (_root.save.arenaSkillMax[60] >= 50) {
        _root.house.arena.enemy.hp += 1350000000;
      }
    }

    frame 90 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 100 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 110 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 120 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 130 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 140 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 150 {
      _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
    }

    frame 156 {
      _root.house.arena.takeDamage(damageToTake, 'Ignore Defense');
      _root.save.arenaMana = 0;
    }
  }

  movieClip 4459  {
  }

  movieClip 4540  {
  }

  movieClip 4548  {

    frame 1 {
      stop();
    }

    instance of movieClip 4407  {

      onClipEvent (load) {
        if (_root.house.arena._currentframe == 1) {
          gotoAndPlay(60);
          _root.fightStat2 = 'Corrupted Giant Treeman appears!';
        }
      }
    }

    instance of movieClip 4444  {

      onClipEvent (load) {
        curRot = 75;
        rotDirection = 15;
        realRot = 0;
        damageToTake = 2000000 + _root.save.arenaSkillMax[59] * 200000;
        if (_root.save.arenaSkillMax[59] >= 50) {
          damageToTake *= 3;
        }
        del = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena._currentframe == 1) {
          del += 1;
          if (del >= 30) {
            curRot += rotDirection;
          }
          if (del >= 40) {
            del = 0;
            if (_root.save.arenaSkillMax[59] >= 50) {
              del = 10;
            }
          }
          if (curRot > 75) {
            curRot = 75;
            rotDirection = -15;
            damageToTake += 50000;
          }
          if (curRot < -75) {
            curRot = -75;
            rotDirection = 15;
          }
          if (curRot == 45) {
            _root.house.arena.takeDamage(damageToTake, 'Cannot Dodge');
          }
          realRot += (curRot - realRot) / 5;
          _rotation = realRot;
        }
      }
    }
  }

  movieClip 4549  {
  }

  movieClip 4552  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4555  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4557  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4561  {
  }

  movieClip 4565  {
  }

  movieClip 4567  {
  }

  movieClip 4570  {
  }

  movieClip 4576  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4583  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4586  {
  }

  movieClip 4590  {

    frame 1 {
      onEnterFrame = function () {
        if (_root.save.arenaHealth > _root.maxHealth) {
          _root.save.arenaHealth = _root.maxHealth;
        }
        if (_root.save.arenaMana > _root.maxMana) {
          _root.save.arenaMana = _root.maxMana;
        }
        hpDisp.text = _root.withComma(_root.save.arenaHealth) + ' / ' + _root.withComma(_root.maxHealth);
        mpDisp.text = _root.withComma(_root.save.arenaMana) + ' / ' + _root.withComma(_root.maxMana);
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
          mpDisp.text = '';
        }
        if (_root.save.arenaRage > 100) {
          _root.save.arenaRage = 100;
        }
        rageDisp.text = Math.ceil(_root.save.arenaRage) + '%';
      };

    }

    instance of movieClip 4552  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.arenaHealth / _root.maxHealth) * 100;
      }
    }

    instance of movieClip 4555  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.arenaMana / _root.maxMana) * 100;
      }
    }

    instance of movieClip 4557  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.arenaRage / 100) * 100;
      }
    }

    instance of movieClip 4561  {

      onClipEvent (load) {
        _alpha = 0;
        flashing = false;
        time = 0;
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 20) {
          del = 0;
          if (_root.save.arenaHealth < Math.floor(_root.maxHealth / 2)) {
            flashing = true;
          } else {
            if (_alpha == 0) {
              flashing = false;
            }
          }
          if (flashing == true) {
            time += 1;
            if (time >= 1) {
              _alpha = 100;
            }
            if (time >= 2) {
              _alpha = 0;
              time = 0;
            }
          }
        }
      }
    }

    instance of movieClip 4561  {

      onClipEvent (load) {
        _alpha = 0;
        flashing = false;
        time = 0;
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 20) {
          del = 0;
          if (_root.save.arenaMana < Math.floor(_root.maxMana / 2) && _root.save.arenaMana < 2000) {
            flashing = true;
          } else {
            if (_alpha == 0) {
              flashing = false;
            }
          }
          if (flashing == true) {
            time += 1;
            if (time >= 1) {
              _alpha = 100;
            }
            if (time >= 2) {
              _alpha = 0;
              time = 0;
            }
          }
        }
      }
    }

    instance of movieClip 4565  {

      onClipEvent (enterFrame) {
        if (_root.manaPower == true) {
          _alpha = 100;
        } else {
          _alpha = 0;
        }
      }
    }

    instance of movieClip 4570  {

      onClipEvent (enterFrame) {
        if (_root.save.arenaSkill[64] > 0 && _root.save.arenaZone != 24) {
          if (_root.reviveCooldown <= 0) {
            gotoAndStop(2);
          } else {
            gotoAndStop(1);
            barInside._xscale = 100 - (_root.reviveCooldown / (240 - _root.save.arenaSkill[64] * 4)) * 100;
          }
        } else {
          gotoAndStop(3);
        }
      }
    }

    frame 2 {
      onEnterFrame = function () {
        if (_root.save.arenaHealth > _root.maxHealth) {
          _root.save.arenaHealth = _root.maxHealth;
        }
        if (_root.save.arenaSpirit > _root.maxSpirit) {
          _root.save.arenaSpirit = _root.maxSpirit;
        }
        hpDisp.text = _root.withComma(_root.save.arenaHealth) + ' / ' + _root.withComma(_root.maxHealth);
        mpDisp.text = _root.withComma(_root.save.arenaSpirit) + ' / ' + _root.withComma(_root.maxSpirit);
        rageDisp.text = Math.ceil(_root.save.arenaRage) + '%';
      };

    }

    instance of movieClip 4576  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.arenaSpirit / _root.maxSpirit) * 100;
      }
    }

    frame 3 {
      onEnterFrame = function () {
        if (_root.save.arenaHealth > _root.maxHealth) {
          _root.save.arenaHealth = _root.maxHealth;
        }
        if (_root.save.arenaFury > 100) {
          _root.save.arenaFury = 100;
        }
        hpDisp.text = _root.withComma(_root.save.arenaHealth) + ' / ' + _root.withComma(_root.maxHealth);
        rageDisp.text = Math.ceil(_root.save.arenaRage) + '%';
      };

    }

    instance of movieClip 4583  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = _root.save.arenaFury;
      }
    }

    instance of movieClip 4586  {

      onClipEvent (load) {
        _alpha = 0;
        targetAlpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.manaPower != true && _root.save.arenaFury >= 25) {
          targetAlpha = 100;
        } else {
          targetAlpha = 0;
        }
        _alpha = _alpha + Math.round((targetAlpha - _alpha) / 2);
      }
    }
  }

  movieClip 4593  {
  }

  movieClip 4596  {
  }

  movieClip 4624  {
  }

  movieClip 4625  {

    instance of movieClip 4624  {

      onClipEvent (enterFrame) {
        gotoAndStop(_root.save.arenaBuffType + 1);
      }
    }
  }

  movieClip 4629  {
  }

  movieClip 4632  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4641  {

    frame 1 {
      _xscale = 0;
      if (isNaN(maxScale)) {
        maxScale = 100;
      }
      onEnterFrame = function () {
        if (targetScale < 0) {
          targetScale = 0;
        }
        if (targetScale > maxScale) {
          targetScale = maxScale;
        }
        _xscale = _xscale + (targetScale - _xscale) / 5;
      };

    }
  }

  movieClip 4646  {

    frame 1 {
      function checkFrame() {
        if (_root.robaconActive == true && _root.save.showRobaconEXP == true) {
          fr = 3;
          if (_xmouse > 0 && _xmouse < 280 && _ymouse > 0 && _ymouse < 20) {
            fr = 2;
          }
        } else {
          fr = 2;
          if (_xmouse > 0 && _xmouse < 280 && _ymouse > 0 && _ymouse < 20 && _root.robaconActive == true) {
            fr = 3;
          }
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }

      alt = false;
      onEnterFrame = function () {
        alt = !alt;
        if (alt == true) {
          checkFrame();
          disp();
        }
      };

      checkFrame();
    }

    instance of movieClip 4632  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.arenaExp / _root.arenaReqExp) * 100 * 28 / 15;
        maxScale = 186.6666666666667;
      }
    }

    frame 2 {
      function disp() {
        levelDisp.text = _root.save.arenaLevel;
        if (_root.save.arenaLevel < 500) {
          expDisp.text = _root.withComma(_root.save.arenaExp) + ' / ' + _root.withComma(_root.arenaReqExp);
          pct = Math.floor((_root.save.arenaExp / _root.arenaReqExp) * 1000) / 10;
          if (pct == Math.round(pct)) {
            pct += '.0';
          }
          pctDisp.text = '[' + pct + '%]';
        } else {
          expDisp.text = _root.withComma(_root.save.arenaExp);
          pctDisp.text = '[MAX]';
        }
      }

      disp();
    }

    frame 3 {
      function disp() {
        levelDisp.text = _root.save.robaconLevel;
        if (_root.save.vegetarianMode == true) {
          expDisp.text = 'Broccoli: ' + _root.withComma(_root.save.robaconBacon);
        } else {
          expDisp.text = 'Bacon: ' + _root.withComma(_root.save.robaconBacon);
        }
        if (_root.save.robaconLevel < 500) {
          pct = Math.floor((_root.save.robaconExp / _root.robaconReqExp) * 1000) / 10;
          if (pct == Math.round(pct)) {
            pct += '.0';
          }
          pctDisp.text = 'EXP: ' + pct + '%';
        } else {
          pctDisp.text = 'EXP: MAX';
        }
      }

      disp();
    }

    instance of movieClip 4641  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.robaconExp / _root.robaconReqExp) * 100 * 28 / 15;
        maxScale = 186.6666666666667;
      }
    }
  }

  movieClip 4649  {
  }

  movieClip 4680  {

    frame 1 {
      stop();
      del = 0;
      onEnterFrame = function () {
        if (fr != _currentframe) {
          del += 1;
          if (del > 1 || fr != 4) {
            gotoAndStop(fr);
            del = 0;
          }
        } else {
          del = 0;
        }
      };

    }

    frame 5 {
      function updateCD() {
        tcd = Math.ceil(coolDown);
        if (tcd > 599) {
          tcd = 599;
        }
        cdText.text = _root.convertSecCD(tcd);
      }

      updateCD();
      onEnterFrame = function () {
        if (fr != _currentframe) {
          del += 1;
          if (del > 1 || fr != 4) {
            gotoAndStop(fr);
            del = 0;
          }
        } else {
          del = 0;
        }
        updateCD();
      };

    }
  }

  movieClip 4685  {
  }

  movieClip 4697  {
  }

  movieClip 4703  {

    frame 1 {
      onEnterFrame = null;
    }

    frame 1 {
      stop();
    }

    instance of movieClip 4649  {

      onClipEvent (load) {
        gotoAndStop(2);
      }

      onClipEvent (enterFrame) {
        if (_root.save.bannedB > 0) {
          gotoAndStop(1);
          rebirthText.text = '+' + _root.save.bannedB;
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.bannedB > 0) {
          _root.actiondescription = 'Rebirths: <b>' + _root.save.bannedB + '</b>';
          b1 = _root.save.bannedB * 10;
          b2 = _root.save.bannedB;
          if (b1 > 100) {
            b1 = 100;
          }
          if (b2 > 100) {
            b2 = 100;
          }
          _root.actiondescription += '\nArena EXP Bonus: +' + b1 + '%';
          _root.actiondescription += '\nStat Limits: +' + b2 + '%';
          _root.actiondescription += '\n\nBefore reaching Rank 500, you will gain extra A: TG EXP from monster kills to make up for the lost power.\nRank 40 - 99: +25% EXP\nRank 100 - 199: +20% EXP\nRank 200 - 299: +15% EXP\nRank 300 - 399: +10% EXP\nRank 400 - 499: +5% EXP\n\nIn addition, you will gain some Arena EXP every second based on your Rebirth count and current Arena Rank.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 71;
        skillID = 0;
        skillLevel = 1;
        mpCost = 0;
        damagePower = 100 + Math.floor(_root.save.arenaSkill[54] * 5);
        if (_root.save.permaBanPenalty[15] == 3) {
          damagePower += 200;
        } else {
          if (_root.save.permaBanPenalty[15] == 2) {
            damagePower += 120;
          } else {
            if (_root.save.permaBanPenalty[15] == 1) {
              damagePower += 80;
            }
          }
        }
        knockBack = 0;
        skillDelay = 175;
      }

      onClipEvent (enterFrame) {
        if (_root.save.autoFight == false) {
          fr = 2;
        } else {
          fr = 4;
        }
        if (_root.save.autoFight == true && _parent._parent.enemy.enemyID != 0 && _parent._parent.enemy.lifespan > 0.2) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.arenaStun <= 0) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower;
            _root.arenaKnockBack = knockBack;
            _root.save.arenaMana -= mpCost;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Auto Fight</font></b>\nMP Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nAttack monsters automatically. Click here to turn Auto Fight on/off.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.autoFight != true) {
          _root.save.autoFight = true;
        } else {
          _root.save.autoFight = false;
        }
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 88;
        skillID = 1;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(70 + skillLevel * 1);
        damagePower = Math.floor(50 + skillLevel * 1 + _root.save.arenaSkill[3] * 4);
        knockBack = 0;
        skillDelay = Math.floor(160 - skillLevel * 2);
        hitCount = 3;
        if (_root.save.arenaSkill[6] >= 1) {
          hitCount = 4;
        }
      }

      onClipEvent (enterFrame) {
        hitCount = 3;
        if (_root.save.arenaSkill[6] >= 1) {
          hitCount = 4;
        }
        if (_root.save.arenaLevel < 10) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaMana < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.save.arenaLevel >= 10 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower;
            _root.arenaKnockBack = knockBack;
            if (_root.chargeX >= 4 && (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20)) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20) {
              _root.chargeX = 0;
            }
            _root.arenaQuickAttack = true;
            _root.save.arenaMana -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Quick Attack') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 10) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Quick Attack</font></b> [Lv. ' + skillLevel + ']\nMP Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '% x ' + hitCount + '</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 65;
        skillID = 5;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(200 + skillLevel * 10);
        healPower = Math.floor(10 + skillLevel * 4);
        damagePower = Math.floor(750 + skillLevel * 25);
        skillDelay = Math.floor(350 - skillLevel * 5);
        effectReduce = Math.floor(1 + skillLevel / 10);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 10) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaMana < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.save.arenaLevel >= 10 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaMana -= mpCost;
            if (_root.arenaZombify > 0) {
              _root.save.arenaHealth -= Math.floor(_root.maxHealth / 10);
            } else {
              _root.arenaPoison -= effectReduce;
              _root.arenaWeaken -= effectReduce;
              _root.arenaBlind -= effectReduce;
              _root.arenaSlow -= effectReduce;
              if (_root.save.arenaZone == 24) {
                hpInc = 0;
              } else {
                if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
                  hpInc = 20;
                } else {
                  if (_root.save.arenaZone == 29) {
                    hpInc = Math.floor((_root.maxHealth * healPower / 1000) * (0.9 + Math.random() * 0.2));
                  } else {
                    hpInc = Math.floor(_root.maxHealth * healPower / 100);
                  }
                }
              }
              if (_root.save.arenaHealth >= _root.maxHealth) {
                hpInc = 0;
              }
              if (hpInc > 0) {
                _root.save.arenaHealth += hpInc;
                _root.house.arena.showDamage(hpInc, 39423, 62.5, 70);
              }
            }
            if (_root.house.arena.enemy.zombie == true && _root.house.arena.enemy.enemyID != 0) {
              _root.house.arena.dealDamage(damagePower, 0, 'Heal');
              if (Math.random() < _root.doubleHit / 100) {
                _root.house.arena.dealDamage(damagePower, 0, 'Double Hit');
              }
            }
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Heal') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 10) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Heal</font></b> [Lv. ' + skillLevel + ']\nMP Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nHP Recovery: <font color=\'#FFFF00\'>' + healPower + '%</font>\nEffect Duration: <font color=\'#FFFF00\'>-' + effectReduce + ' sec</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> (vs. Undead)\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 67;
        skillID = 2;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(700 + skillLevel * 10);
        damagePower = Math.floor(550 + skillLevel * 10 + _root.save.arenaSkill[3] * 5);
        if (_root.save.arenaSkill[7] >= 1) {
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon' || _root.save.inventoryRange[_root.save.arenaWeapon] == true) {
            damagePower = Math.floor(damagePower * 1.2);
          } else {
            damagePower = Math.floor(damagePower * 1.6);
          }
        }
        knockBack = 0;
        skillDelay = Math.floor(210 - skillLevel * 2);
      }

      onClipEvent (enterFrame) {
        damagePower = Math.floor(550 + skillLevel * 10 + _root.save.arenaSkill[3] * 5);
        if (_root.save.arenaSkill[7] >= 1) {
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon' || _root.save.inventoryRange[_root.save.arenaWeapon] == true) {
            damagePower = Math.floor(damagePower * 1.2);
          } else {
            damagePower = Math.floor(damagePower * 1.6);
          }
        }
        if (_root.save.arenaLevel < 30) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaMana < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.save.arenaLevel >= 30 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower;
            _root.arenaKnockBack = knockBack;
            if (_root.chargeC >= 4 && (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20)) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20) {
              _root.chargeC = 0;
            }
            _root.save.arenaMana -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Power Attack') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 30) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Power Attack</font></b> [Lv. ' + skillLevel + ']\nMP Cost: <font color=\'#FFFF00\'>' + _root.withComma(mpCost) + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        function reloadSkill() {
          _root.specInfinity = 0;
          _root.specPierce = 0;
          _root.specPolearm = 0;
          _root.specTrueshot = 0;
          _root.specSphere = 0;
          _root.specDispel = 0;
          _root.specGlory = 0;
          tempWeapon = _root.save.arenaWeapon;
          weaponType = _root.save.inventorySubtype[_root.save.arenaWeapon];
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon') {
            skillName = 'Infinity';
            skillDesc = 'Deal extreme damage and for ' + Math.floor(skillLevel * 0.5 + 5) + ' seconds, you will always deal maximum damage, your MP will remain at maximum and all monsters that spawn will be epic!';
            mpCost = 0;
            damagePower = Math.floor(8000 + skillLevel * 400);
            knockBack = 8;
            skillDelay = Math.floor(700 - skillLevel * 10);
            coolDownMax = 180;
          } else {
            if (weaponType == 'Sword') {
              skillName = 'Multislash';
              skillDesc = 'Deal damage to the monster 3 times. If used multiple times in a row on the same monster, the 2nd use will hit 4 times and the 3rd use onwards will hit 5 times! If used more than 3 times in a row, wait time to charge Power Attack skill will be shortened!';
              mpCost = Math.floor(3500 + skillLevel * 50);
              damagePower = Math.floor(550 + skillLevel * 5);
              knockBack = 0;
              skillDelay = Math.floor(235 - skillLevel * 2);
              coolDownMax = 0;
            } else {
              if (weaponType == 'Dagger') {
                skillName = 'Magnetic Stab';
                skillDesc = 'Draw the monster closer to you if it is far away, and ' + Math.floor(5 + skillLevel / 2) + '% chance to knock it back if the attack hits! If knockback effect is triggered, the attack also deals 7 times as much damage and the monster will instantly drop a random-colored coin! Knockback chance is halved against boss monsters. Cannot activate against immobile monsters.';
                mpCost = Math.floor(3500 + skillLevel * 50);
                damagePower = Math.floor(950 + skillLevel * 10);
                knockBack = 16;
                skillDelay = Math.floor(285 - skillLevel * 2);
                coolDownMax = 0;
              } else {
                if (weaponType == 'Spear') {
                  skillName = 'Pierce';
                  skillDesc = 'Deal damage to the monster, completely ignoring its DEF. Against maximum DEF monsters, deal 50x damage instead. For 4 seconds, ignore an additional ' + Math.floor(skillLevel * 1 + 10) + '% of monster DEF.';
                  mpCost = Math.floor(14000 + skillLevel * 200);
                  damagePower = Math.floor(2000 + skillLevel * 50);
                  knockBack = 4;
                  skillDelay = Math.floor(700 - skillLevel * 10);
                  coolDownMax = Math.ceil(40 - skillLevel * 1);
                } else {
                  if (weaponType == 'Axe') {
                    skillName = 'Threaten';
                    skillDesc = 'A powerful attack that stuns the monster for 3 seconds and permanently reduces its Attack and Magic Attack by ' + Math.floor(skillLevel * 0.6 + 12) + '%. If used multiple times on the same monster, the monster\'s Attack and Magic Attack will only be lowered by ' + Math.floor(skillLevel * 0.1 + 2) + '% starting from 2nd use. Stacks up to 10 times on each monster. The attack must hit for the effect to trigger.';
                    mpCost = Math.floor(14000 + skillLevel * 200);
                    damagePower = Math.floor(4000 + skillLevel * 100);
                    knockBack = 4;
                    skillDelay = Math.floor(700 - skillLevel * 10);
                    coolDownMax = Math.ceil(80 - skillLevel * 2);
                  } else {
                    if (weaponType == 'Hammer') {
                      skillName = 'Silence Hammer';
                      skillDesc = 'A powerful attack that permanently silences non-boss, non-ULTRA monsters, stopping them from using skills, magic attacks and removing their ability to rampage or explode! Against silenced monsters, bosses and ULTRA monsters, deal three times as much damage! The monster will be silenced even if it dodges the attack.';
                      mpCost = Math.floor(14000 + skillLevel * 200);
                      damagePower = Math.floor(4000 + skillLevel * 100);
                      knockBack = 4;
                      skillDelay = Math.floor(700 - skillLevel * 10);
                      coolDownMax = Math.ceil(40 - skillLevel * 1);
                    } else {
                      if (weaponType == 'Polearm' || weaponType == 'Polearm (Stab)') {
                        skillName = 'Polearm Spirit';
                        skillDesc = 'Deal massive damage and for 60 seconds, MaxHP +' + Math.floor(skillLevel * 10 + 100) + '%, Equipment Attack +' + _root.withComma(skillLevel * 25 + 250) + ', Equipment Defense +' + _root.withComma(skillLevel * 50 + 500) + ', EXP +' + Math.floor(skillLevel * 1 + 10) + '%, Coin +' + Math.floor(skillLevel * 1 + 10) + '%. Each time a monster is killed, the cooldown time for this skill is reduced by 3 seconds!';
                        mpCost = Math.floor(35000 + skillLevel * 500);
                        damagePower = Math.floor(8000 + skillLevel * 200);
                        knockBack = 4;
                        skillDelay = Math.floor(700 - skillLevel * 10);
                        coolDownMax = Math.ceil(420 - skillLevel * 4);
                      } else {
                        if (weaponType == 'Bow') {
                          skillName = 'Hamstring';
                          skillDesc = 'Shoot an arrow with a ' + Math.floor(5 + skillLevel / 2) + '% chance to temporarily slow the monster down, reducing their movement speed by 50% and stopping them from dealing ranged damage for 1 second! After the effect wears off, the monster cannot be slowed again for 0.5 seconds. The attack must hit for the effect to trigger.';
                          mpCost = Math.floor(3500 + skillLevel * 50);
                          damagePower = Math.floor(900 + skillLevel * 20);
                          knockBack = 0;
                          skillDelay = Math.floor(285 - skillLevel * 2);
                          coolDownMax = 0;
                        } else {
                          if (weaponType == 'Crossbow') {
                            skillName = 'Trueshot';
                            skillDesc = 'Deal damage to the monster. Guaranteed to hit, no matter how high the monster\'s Evasion is! For 4 seconds, Hit Chance +' + Math.floor(skillLevel * 1 + 10) + '%.';
                            mpCost = Math.floor(14000 + skillLevel * 200);
                            damagePower = Math.floor(3000 + skillLevel * 75);
                            knockBack = 4;
                            skillDelay = Math.floor(700 - skillLevel * 10);
                            coolDownMax = Math.ceil(40 - skillLevel * 1);
                          } else {
                            if (weaponType == 'Wand') {
                              skillName = 'Elemental Sphere';
                              skillDesc = 'Deal very high damage and summon an elemental sphere, rapidly dealing ' + Math.floor(skillLevel * 5 + 200) + '% damage to monsters, temporarily amplifying all of your elemental stats by 1.3x and giving you +30% EXP. The elemental sphere lasts ' + Math.floor(skillLevel * 0.5 + 5) + ' seconds.';
                              mpCost = Math.floor(35000 + skillLevel * 500);
                              damagePower = Math.floor(8000 + skillLevel * 200);
                              knockBack = 4;
                              skillDelay = Math.floor(700 - skillLevel * 10);
                              coolDownMax = 90;
                            } else {
                              if (weaponType == 'Staff') {
                                skillName = 'Dispel';
                                skillDesc = 'Deal damage, fully recover HP and recover from all status effects! In addition, monsters will be unable to use special abilities (status effects, HP/MP drain, stat increasing abilities) for 4 seconds.';
                                mpCost = Math.floor(35000 + skillLevel * 500);
                                damagePower = Math.floor(6000 + skillLevel * 150);
                                knockBack = 4;
                                skillDelay = Math.floor(700 - skillLevel * 10);
                                coolDownMax = Math.ceil(50 - skillLevel * 1);
                              } else {
                                if (weaponType == 'Gun') {
                                  skillName = 'Rapid Fire';
                                  skillDesc = 'Fire bullets rapidly, dealing damage to the monster 6 times! The sixth hit is guaranteed to deal critical damage if it does not miss.';
                                  mpCost = Math.floor(1400 + skillLevel * 20);
                                  damagePower = Math.floor(210 + skillLevel * 3);
                                  knockBack = 0;
                                  skillDelay = Math.floor(160 - skillLevel * 2);
                                  coolDownMax = 0;
                                } else {
                                  if (weaponType == 'Claw') {
                                    skillName = 'Absorption Shuriken';
                                    skillDesc = 'Throw a special shuriken that absorbs HP and MP from the monster! If the attack hits, you recover ' + Math.floor(skillLevel * 1 + 10) + '% HP and ' + Math.floor(skillLevel * 0.25 + 2.5) + '% MP.';
                                    mpCost = Math.floor(3500 + skillLevel * 50);
                                    damagePower = Math.floor(900 + skillLevel * 20);
                                    knockBack = 0;
                                    skillDelay = Math.floor(285 - skillLevel * 2);
                                    coolDownMax = 0;
                                  } else {
                                    if (weaponType == 'Slingshot') {
                                      skillName = 'Headshot';
                                      skillDesc = 'Instantly kill a non-boss, non-ULTRA monster. Bosses and ULTRA monsters will take a gigantic amount of damage. The attack must hit for the effect to trigger.';
                                      mpCost = Math.floor(14000 + skillLevel * 200);
                                      damagePower = Math.floor(8000 + skillLevel * 400);
                                      knockBack = 8;
                                      skillDelay = Math.floor(700 - skillLevel * 10);
                                      coolDownMax = Math.ceil(90 - skillLevel * 2);
                                    } else {
                                      if (weaponType == 'Cannon') {
                                        skillName = 'Hyper Cannonball';
                                        skillDesc = 'A charged shot that knocks the monster back an extreme distance and stuns the monster for 3 seconds!';
                                        mpCost = Math.floor(14000 + skillLevel * 200);
                                        damagePower = Math.floor(4000 + skillLevel * 200);
                                        knockBack = 20;
                                        skillDelay = Math.floor(700 - skillLevel * 10);
                                        coolDownMax = Math.ceil(50 - skillLevel * 1);
                                      } else {
                                        if (weaponType == 'Grenades') {
                                          skillName = 'Hyper EXPlosion';
                                          skillDesc = 'Consume an extreme amount of MP to deal high damage and increase EXP gain! The attack must hit for the effect to trigger.';
                                          mpCost = Math.floor(70000 + skillLevel * 1000);
                                          damagePower = Math.floor(4000 + skillLevel * 200);
                                          knockBack = 8;
                                          skillDelay = Math.floor(1400 - skillLevel * 20);
                                          coolDownMax = Math.ceil(60 - skillLevel * 1);
                                        } else {
                                          if (weaponType == 'Trophy') {
                                            skillName = 'Field of Glory';
                                            skillDesc = 'Deal massive damage and turn the battlefield into a special Field of Glory for ' + Math.floor(skillLevel * 1 + 10) + ' seconds, rapidly dealing ' + Math.floor(skillLevel * 10 + 400) + '% damage to monsters and causing items to fall from the sky!';
                                            mpCost = Math.floor(70000 + skillLevel * 1000);
                                            damagePower = Math.floor(4000 + skillLevel * 200);
                                            knockBack = 8;
                                            skillDelay = Math.floor(1400 - skillLevel * 20);
                                            coolDownMax = 180;
                                          } else {
                                            if (weaponType == 'Mining Tool') {
                                              skillName = 'MINE!!!!1!';
                                              skillDesc = 'It\'s all yours!!!!1! Instantly kill a Secret Crystal and greatly increase Drop Rate for that Secret Crystal!';
                                              mpCost = 0;
                                              damagePower = 100;
                                              knockBack = 0;
                                              skillDelay = Math.floor(1400 - skillLevel * 20);
                                              coolDownMax = Math.ceil(120 - skillLevel * 2);
                                            } else {
                                              skillName = '';
                                              mpCost = 99999999;
                                              damagePower = 0;
                                              knockBack = 0;
                                              skillDelay = 125;
                                              coolDownMax = 99999999;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (_root.save.arenaSkill[8] >= 1) {
            damagePower = Math.floor(damagePower * 1.1);
            coolDownMax = Math.ceil(coolDownMax * 0.5);
          }
          coolDown = coolDownMax;
        }

        hotkey = 86;
        skillID = 3;
        skillLevel = _root.save.arenaSkill[skillID];
        tempWeapon = -1;
        reloadSkill();
      }

      onClipEvent (enterFrame) {
        if (tempWeapon != _root.save.arenaWeapon) {
          reloadSkill();
        }
        if (isNaN(coolDown)) {
          coolDown = coolDownMax;
        }
        if (skillName == 'Polearm Spirit' && _root.specPolearmCD > 0 && !isNaN(_root.specPolearmCD)) {
          coolDown -= _root.specPolearmCD;
          _root.specPolearmCD = 0;
        }
        if (_root.save.arenaZone == 24 && coolDown < 1) {
          coolDown = 1;
        }
        if (_root.save.arenaZone >= 31 && _root.save.arenaZone <= 42 && coolDown < 1) {
          coolDown = 1;
        }
        if (skillName == 'MINE!!!!1!' && _root.house.arena.enemy.enemyID != 0 && _root.house.arena.enemy.enemyID != 322 && _root.house.arena.enemy.enemyID != 435 && coolDown < 1) {
          coolDown = 1;
        }
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (_root.save.arenaLevel < 70) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.arenaDelay > 0) {
              fr = 2;
            } else {
              if (_root.save.arenaMana < mpCost) {
                fr = 3;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && coolDown <= 0 && _root.save.arenaLevel >= 70 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower;
            _root.arenaKnockBack = knockBack;
            _root.arenaSkillSpec = skillName;
            _root.arenaSkillSpecLevel = skillLevel;
            if (_root.chargeV >= 4 && (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20)) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20) {
              _root.chargeV = 0;
            }
            coolDown = coolDownMax;
            _root.save.arenaMana -= mpCost;
            if (skillName == 'Infinity') {
              _root.specInfinity = Math.floor(skillLevel * 0.5 + 5);
              _root.house.arena.checkStat();
            }
            if (skillName == 'Pierce') {
              _root.specPierce = 4;
            }
            if (skillName == 'Polearm Spirit') {
              _root.specPolearm = 60;
              _root.house.arena.checkStat();
            }
            if (skillName == 'Trueshot') {
              _root.specTrueshot = 4;
            }
            if (skillName == 'Elemental Sphere') {
              _root.specSphere = Math.floor(skillLevel * 0.5 + 5);
              _root.house.arena.checkStat();
            }
            if (skillName == 'Dispel') {
              _root.save.arenaHealth = _root.maxHealth;
              _root.specDispel = 4;
              _root.arenaPoison = 0;
              _root.arenaWeaken = 0;
              _root.arenaBlind = 0;
              _root.arenaSlow = 0;
              _root.arenaStun = 0;
              _root.arenaZombify = 0;
              _root.arenaPotionBlock = 0;
              _root.house.arena.checkStat();
            }
            if (skillName == 'MINE!!!!1!') {
              if (_root.house.arena.enemy.enemyID == 322 || _root.house.arena.enemy.enemyID == 435) {
                _root.specMine = 1;
                _root.house.arena.enemy.hp = 0;
              }
            }
            if (skillName == 'Field of Glory') {
              _root.specGlory = Math.floor(skillLevel * 1 + 10);
            }
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Super Knockback') {
                _root.save.questCount += 1;
              }
              if (_root.save.questSubtype == skillName) {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 70 && skillName != '') {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>' + skillName + '</font></b> [Lv. ' + skillLevel + ']\nMP Cost: <font color=\'#FFFF00\'>' + _root.withComma(mpCost) + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nCooldown: <font color=\'#FFFF00\'>' + coolDownMax + ' seconds</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\n' + skillDesc;
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 66;
        skillID = 4;
        skillLevel = _root.save.arenaSkill[skillID];
        comboReq = Math.floor(500 - skillLevel * 10);
        damagePower = Math.floor(1400 + skillLevel * 20);
        rage = 10;
        knockBack = 0;
        skillDelay = 400;
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 120) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.arenaCombo < comboReq) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaLevel >= 120 && _root.arenaCombo >= comboReq && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(Math.min(_root.arenaCombo * 0.2, 2000) * 1);
            _root.arenaKnockBack = knockBack;
            if (_root.chargeB >= 4 && (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20)) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0 || _root.areaFirstPyr == true && _root.save.arenaZone == 20) {
              _root.chargeB = 0;
            }
            if (_root.house.arena.enemy.slow < 0) {
              _root.house.arena.enemy.slow = 1;
            } else {
              _root.house.arena.enemy.slow += 1;
            }
            _root.arenaStrike = 1;
            if (_root.save.arenaZone == 24) {
              hpInc = 0;
            } else {
              if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
                hpInc = 20;
              } else {
                if (_root.save.arenaZone == 29) {
                  hpInc = Math.floor((_root.maxHealth * 50 / 1000) * (0.9 + Math.random() * 0.2));
                } else {
                  hpInc = Math.floor(_root.maxHealth * 50 / 100);
                }
              }
            }
            if (_root.save.arenaHealth >= _root.maxHealth) {
              hpInc = 0;
            }
            if (hpInc > 0) {
              _root.save.arenaHealth += hpInc;
              _root.house.arena.showDamage(hpInc, 39423, 62.5, 70);
            }
            _root.save.arenaMana += Math.floor(_root.maxMana / 2);
            _root.save.arenaRage += rage;
            _root.arenaCombo -= comboReq;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Combo Strike') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 120) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Combo Strike</font></b> [Lv. ' + skillLevel + ']\nCombo Cost: <font color=\'#FFFF00\'>' + comboReq + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(Math.min(_root.arenaCombo * 0.2, 2000) * 1) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nConsume COMBO to deal extreme damage and slow the monster down for 1 second. In addition, recover 50% HP and MP, and gain 10% Rage.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 83;
        skillID = 101;
        skillLevel = _root.save.arenaSkill[skillID];
        pixelCost = 1;
        coolDown = 15;
        damagePower = Math.floor(2000 + skillLevel * 100);
        knockBack = 0;
        skillDelay = Math.floor(195 - skillLevel * 2);
      }

      onClipEvent (enterFrame) {
        skillLevel = _root.save.arenaSkill[skillID];
        damagePower = Math.floor(2000 + skillLevel * 100);
        skillDelay = Math.floor(195 - skillLevel * 2);
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.arenaDelay > 0) {
              fr = 2;
            } else {
              if (_root.save.arenaPixel < pixelCost) {
                fr = 3;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (!Key.isDown(17) && _root.arenaDelay <= 0 && _root.save.arenaPixel >= pixelCost && skillLevel > 0 && coolDown <= 0 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 284 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 291) {
              _root.arenaStrike = 1;
            } else {
              _root.house.arena.stuffHolder.attachMovie('missile', 'missile' + _root.summonCount, _root.antiLag, {'_x': 90, '_y': 127.5, 'missilePower': damagePower, 'missileKnockBack': knockBack});
            }
            _root.save.arenaPixel -= pixelCost;
            coolDown = 15;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Pixel Throw') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Pixel Throw</font></b> [Lv. ' + skillLevel + ']\nCooldown: <font color=\'#FFFF00\'>15 seconds</font>\nPixel Cost: <font color=\'#FFFF00\'>' + _root.withComma(pixelCost) + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nThrow a Pixel at the monster. Ranged attack.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 90;
        skillID = 54;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 0;
        damagePower = 100 + skillLevel * 5;
        if (_root.save.permaBanPenalty[15] == 3) {
          damagePower += 200;
        } else {
          if (_root.save.permaBanPenalty[15] == 2) {
            damagePower += 120;
          } else {
            if (_root.save.permaBanPenalty[15] == 1) {
              damagePower += 80;
            }
          }
        }
        knockBack = 0;
        skillDelay = 150;
      }

      onClipEvent (enterFrame) {
        if (_root.arenaDelay > 0) {
          fr = 2;
        } else {
          if (_root.save.arenaMana < mpCost) {
            fr = 3;
          } else {
            fr = 4;
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower;
            _root.arenaKnockBack = knockBack;
            _root.save.arenaMana -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Basic Attack') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Basic Attack</font></b> [Lv. ' + skillLevel + ']\nMP Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 68;
        skillID = 102;
        skillLevel = _root.save.arenaSkill[skillID];
        coolDown = 60 - skillLevel;
        skillDelay = 275;
      }

      onClipEvent (enterFrame) {
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.arenaDelay > 0) {
              fr = 2;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && coolDown <= 0 && skillLevel > 0) {
            if (_root.house.arena.enemy.enemyID != 0 && _root.house.arena.enemy.enemyRank < 4 && _root.house.arena.enemy.ultra == false && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
              _root.house.arena.enemy.hp = 0;
              _parent._parent.rangedAttack._alpha = 200;
              _parent._parent.rangedAttack.gotoAndStop(1);
              if (_root.save.arenaZone != 24) {
                _root.save.arenaHealth = _root.maxHealth;
              }
              _root.save.arenaMana = _root.maxMana;
              if (_root.save.arenaBuffType == 0) {
                _root.save.arenaBuffType = 3;
                _root.save.arenaBuffDuration = 30;
              } else {
                if (_root.save.arenaBuffType < 4) {
                  _root.save.arenaBuffDuration += 6;
                }
              }
              coolDown = 60 - skillLevel;
              _root.arenaDelay = skillDelay;
              _root.arenaDelay2 = skillDelay;
              if (_root.save.questType == 'Use Skill') {
                if (_root.save.questSubtype == 'OM NOM NOM') {
                  _root.save.questCount += 1;
                }
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>OM NOM NOM</font></b> [Lv. ' + skillLevel + ']\nCooldown: <font color=\'#FFFF00\'>' + (60 - skillLevel) + ' seconds</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nEat a non-boss monster to refill HP and MP. Gain full rewards for the kill, as well as a buff.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 70;
        skillID = 103;
        skillLevel = _root.save.arenaSkill[skillID];
        coolDown = 180 - skillLevel * 2;
        damagePower = 15000 + skillLevel * 500;
        skillDelay = 275;
      }

      onClipEvent (enterFrame) {
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.arenaDelay > 0) {
              fr = 2;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && coolDown <= 0 && skillLevel > 0 && _root.arenaStun <= 0 && _root.house.arena.enemy.enemyID != 0 && _root.arenaBot < 48000) {
            _root.house.arena.dealDamage(damagePower, 8, 'Roundhouse Kick');
            if (Math.random() < _root.doubleHit / 100) {
              _root.house.arena.dealDamage(damagePower, 0, 'Double Hit');
            }
            if (_root.save.arenaBuffType == 0) {
              _root.save.arenaBuffType = 1;
              _root.save.arenaBuffDuration = 30;
            } else {
              if (_root.save.arenaBuffType < 4) {
                _root.save.arenaBuffDuration += 6;
              }
            }
            coolDown = 180 - skillLevel * 2;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Roundhouse Kick') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Roundhouse Kick</font></b> [Lv. ' + skillLevel + ']\nCooldown: <font color=\'#FFFF00\'>' + (180 - skillLevel * 2) + ' seconds</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\nIgnore Defense: <font color=\'#FFFF00\'>100%</font>\n\nDeal massive damage to the monster. Ranged attack. Gives a buff when used.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 87;
        skillDelay = 75;
      }

      onClipEvent (enterFrame) {
        mpToRefill = _root.maxMana - _root.save.arenaMana;
        maxRefill = Math.floor((100000 + _root.save.arenaSkill[24] * 20000) * _root.potionEfficiency / 100);
        if (mpToRefill > maxRefill) {
          mpToRefill = maxRefill;
        }
        if (_root.save.arenaZone == 29 || _root.arenaPotionBlock > 0) {
          mpToRefill = 0;
        }
        pixelCost = Math.floor(mpToRefill * 0.25 * 100 / _root.potionEfficiency);
        if (_root.save.arenaSkill[26] > 0) {
          pixelCost = Math.floor(pixelCost * 0.2);
        }
        if (mpToRefill < 1) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaPixel < pixelCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaPixel >= pixelCost && _root.save.arenaMana < _root.maxMana && mpToRefill > 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaMana += mpToRefill;
            _root.save.arenaPixel -= pixelCost;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Mana Potion</font></b>\nPixel Cost: <font color=\'#FFFF00\'>' + _root.withComma(pixelCost) + '</font>\nMP: <b>+' + _root.withComma(maxRefill) + '</b>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 81;
        skillDelay = 75;
      }

      onClipEvent (enterFrame) {
        hpToRefill = _root.maxHealth - _root.save.arenaHealth;
        maxRefill = Math.floor((100000 + _root.save.arenaSkill[21] * 20000) * _root.potionEfficiency / 100);
        if (hpToRefill > maxRefill) {
          hpToRefill = maxRefill;
        }
        if (_root.save.arenaZone == 24 || _root.save.arenaZone == 29 || _root.save.arenaZone == 52 || _root.save.arenaZone >= 30 && _root.save.arenaZone <= 43 || _root.arenaPotionBlock > 0) {
          hpToRefill = 0;
        }
        pixelCost = Math.floor(hpToRefill * 0.05 * 100 / _root.potionEfficiency);
        if (_root.save.arenaSkill[26] > 0) {
          pixelCost = Math.floor(pixelCost * 0.2);
        }
        if (hpToRefill < 1) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaPixel < pixelCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaPixel >= pixelCost && _root.save.arenaHealth < _root.maxHealth && _root.save.arenaHealth > 0 && hpToRefill > 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaHealth += hpToRefill;
            _root.save.arenaPixel -= pixelCost;
            _root.house.arena.showDamage(hpToRefill, 39423, 62.5, 70);
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Health Potion</font></b>\nPixel Cost: <font color=\'#FFFF00\'>' + _root.withComma(pixelCost) + '</font>\nHP: <b>+' + _root.withComma(maxRefill) + '</b>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4685  {

      onClipEvent (load) {
        gotoAndStop(5);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaSkill[65] > 0) {
          if (_root.chargeX >= 4) {
            gotoAndStop(1);
          } else {
            gotoAndStop(5 - _root.chargeX);
          }
        }
      }
    }

    instance of movieClip 4685  {

      onClipEvent (load) {
        gotoAndStop(5);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaSkill[65] > 0) {
          if (_root.chargeC >= 4) {
            gotoAndStop(1);
          } else {
            gotoAndStop(5 - _root.chargeC);
          }
        }
      }
    }

    instance of movieClip 4685  {

      onClipEvent (load) {
        gotoAndStop(5);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaSkill[65] > 0) {
          if (_root.chargeV >= 4) {
            gotoAndStop(1);
          } else {
            gotoAndStop(5 - _root.chargeV);
          }
        }
      }
    }

    instance of movieClip 4685  {

      onClipEvent (load) {
        gotoAndStop(5);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaSkill[65] > 0) {
          if (_root.chargeB >= 4) {
            gotoAndStop(1);
          } else {
            gotoAndStop(5 - _root.chargeB);
          }
        }
      }
    }

    frame 2 {
      onEnterFrame = null;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 71;
        skillID = 0;
        skillLevel = 1;
        mpCost = 0;
        damagePower = 200 + Math.floor(_root.save.arenaSkill[54] * 10);
        if (_root.save.permaBanPenalty[15] == 3) {
          damagePower += 200;
        } else {
          if (_root.save.permaBanPenalty[15] == 2) {
            damagePower += 120;
          } else {
            if (_root.save.permaBanPenalty[15] == 1) {
              damagePower += 80;
            }
          }
        }
        spiritMult = 0.2;
        knockBack = 0;
        skillDelay = 150;
      }

      onClipEvent (enterFrame) {
        if (_root.save.autoFight == false) {
          fr = 2;
        } else {
          fr = 4;
        }
        if (_root.save.autoFight == true && _parent._parent.enemy.enemyID != 0 && _parent._parent.enemy.lifespan > 0.2) {
          if (_root.arenaDelay <= 0 && _root.save.arenaMana >= mpCost && _root.arenaStun <= 0) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            _root.save.arenaMana -= mpCost;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Auto Fight</font></b>\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nAttack monsters automatically. Click here to turn Auto Fight on/off.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.autoFight != true) {
          _root.save.autoFight = true;
        } else {
          _root.save.autoFight = false;
        }
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 65;
        skillID = 5;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 5;
        healPower = Math.floor(20 + skillLevel * 8);
        damagePower = Math.floor(1500 + skillLevel * 50);
        skillDelay = Math.floor(350 - skillLevel * 5);
        effectReduce = Math.floor(1 + skillLevel / 10);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 10) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.save.arenaLevel >= 10 && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaSpirit -= mpCost;
            if (_root.arenaZombify > 0) {
              _root.save.arenaHealth -= Math.floor(_root.maxHealth * 10 / 100);
            } else {
              _root.arenaPoison -= effectReduce;
              _root.arenaWeaken -= effectReduce;
              _root.arenaBlind -= effectReduce;
              _root.arenaSlow -= effectReduce;
              if (_root.save.arenaZone == 24) {
                hpInc = 0;
              } else {
                if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
                  hpInc = 20;
                } else {
                  if (_root.save.arenaZone == 29) {
                    hpInc = Math.floor((_root.maxHealth * healPower / 1000) * (0.9 + Math.random() * 0.2));
                  } else {
                    hpInc = Math.floor(_root.maxHealth * healPower / 100);
                  }
                }
              }
              if (_root.save.arenaHealth >= _root.maxHealth) {
                hpInc = 0;
              }
              if (hpInc > 0) {
                _root.save.arenaHealth += hpInc;
                _root.house.arena.showDamage(hpInc, 39423, 62.5, 70);
              }
            }
            if (_root.house.arena.enemy.zombie == true && _root.house.arena.enemy.enemyID != 0) {
              _root.house.arena.dealDamage(damagePower, 0, 'Heal');
              if (_root.spiritDouble > 0) {
                _root.house.arena.dealDamage(damagePower * 2, 0, 'Double Hit');
              } else {
                if (Math.random() < _root.doubleHit / 100) {
                  _root.house.arena.dealDamage(damagePower, 0, 'Double Hit');
                }
              }
            }
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Heal') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 10) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Heal</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nHP Recovery: <font color=\'#FFFF00\'>' + healPower + '%</font>\nEffect Duration: <font color=\'#FFFF00\'>-' + effectReduce + ' sec</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '% (vs. Undead)</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 88;
        skillID = 1;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(80 - skillLevel * 1);
        damagePower = Math.floor(600 + skillLevel * 20);
        spiritMult = 0.5;
        knockBack = 0;
        skillDelay = 600;
        skillDuration = Math.floor(2 + skillLevel * 0.1);
        if (_root.save.arenaSkill[6] >= 1) {
          skillDuration += 2;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 10) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.arenaStun <= 0 && _root.save.arenaLevel >= 10 && _root.arenaBot < 48000) {
            _root.spiritDouble = skillDuration;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            if (_root.chargeX >= 4 && _root.house.arena.enemy.enemyID != 0) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0) {
              _root.chargeX = 0;
            }
            _root.save.arenaSpirit -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Double Attack') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 10) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Double Attack</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nDeals damage twice to a monster. For ' + skillDuration + ' seconds, Double Hit Chance +100% and the extra hit deals 2x damage';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 67;
        skillID = 2;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(160 - skillLevel * 2);
        damagePower = Math.floor(900 + skillLevel * 30);
        spiritMult = 1;
        knockBack = 0;
        skillDelay = 600;
        skillDuration = Math.floor(2 + skillLevel * 0.1);
        if (_root.save.arenaSkill[7] >= 1) {
          skillDuration += 2;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 30) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.arenaStun <= 0 && _root.save.arenaLevel >= 30 && _root.arenaBot < 48000) {
            _root.spiritCrit = skillDuration;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            if (_root.chargeC >= 4 && _root.house.arena.enemy.enemyID != 0) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0) {
              _root.chargeC = 0;
            }
            _root.save.arenaSpirit -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Critical Strike') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 30) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Critical Strike</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nDeals massive Critical damage. For ' + skillDuration + ' seconds, always critical for 2.5x of your Critical Damage.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 86;
        skillID = 3;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(340 - skillLevel * 4);
        damagePower = Math.floor(1500 + skillLevel * 50);
        spiritMult = 2;
        knockBack = 0;
        skillDelay = 600;
        skillEffect = 0.08 + skillLevel * 0.004;
        if (_root.save.arenaSkill[8] >= 1) {
          mpCost -= 20;
        }
        effectDisp = skillEffect * 100;
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 70) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.arenaStun <= 0 && _root.save.arenaLevel >= 70 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            if (_root.chargeV >= 4 && _root.house.arena.enemy.enemyID != 0) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0) {
              _root.chargeV = 0;
            }
            _root.save.arenaSpirit -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Chaos') {
                _root.save.questCount += 1;
              }
            }
            if (_root.house.arena.enemy.poison < 0) {
              _root.house.arena.enemy.poison = 1;
            } else {
              _root.house.arena.enemy.poison += 1;
            }
            if (_root.house.arena.enemy.weaken < 0) {
              _root.house.arena.enemy.weaken = 1;
            } else {
              _root.house.arena.enemy.weaken += 1;
            }
            if (_root.house.arena.enemy.blind < 0) {
              _root.house.arena.enemy.blind = 1;
            } else {
              _root.house.arena.enemy.blind += 1;
            }
            if (_root.house.arena.enemy.chaosCount < 1) {
              _root.house.arena.enemy.attack = Math.floor(_root.house.arena.enemy.attack * (1 - skillEffect));
              _root.house.arena.enemy.accuracy = Math.floor(_root.house.arena.enemy.accuracy * (1 - skillEffect));
              _root.house.arena.enemy.chaosCount = 1;
            } else {
              if (_root.house.arena.enemy.chaosCount < 25) {
                _root.house.arena.enemy.attack = Math.floor(_root.house.arena.enemy.attack * (1 - skillEffect / 4));
                _root.house.arena.enemy.accuracy = Math.floor(_root.house.arena.enemy.accuracy * (1 - skillEffect / 4));
                _root.house.arena.enemy.chaosCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 70) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Chaos</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nPermanently reduces monster\'s Attack and Accuracy by ' + effectDisp + '%. Stat reduction effect is reduced to one-fourth of original effect if used more than once on the same monster. Stacks up to 25 times on each monster. Also inflicts poison, weaken and blind for 1 second.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 66;
        skillID = 4;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = Math.floor(700 - skillLevel * 10);
        damagePower = Math.floor(3000 + skillLevel * 100);
        spiritMult = 5;
        knockBack = 0;
        skillDelay = 600;
        skillDuration = Math.floor(4 + skillLevel * 0.1);
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaLevel < 120 || _root.save.arenaZone == 82) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.arenaStun <= 0 && _root.save.arenaLevel >= 120 && _root.save.arenaZone != 82 && _root.arenaBot < 48000) {
            _root.spiritInsta = skillDuration;
            _root.arenaStrike = 1;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            if (_root.chargeB >= 4 && _root.house.arena.enemy.enemyID != 0) {
              _root.arenaSkillPower = Math.ceil(_root.arenaSkillPower * (1 + _root.save.arenaSkill[65] * 0.06));
              _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.1);
            }
            if (_root.house.arena.enemy.enemyID != 0) {
              _root.chargeB = 0;
            }
            _root.save.arenaSpirit -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Instant Kill') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaLevel >= 120) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Overkill</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nInstantly kills a non-boss monster and deals massive damage to bosses. For ' + skillDuration + ' seconds, Spawn Rate +100% and always kill non-bosses instantly regardless of damage dealt. If the attack misses, the monster will not be killed instantly.';
        }
        if (_root.save.arenaZone == 82) {
          _root.actiondescription = 'This skill is not allowed in Technical Battleground.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 83;
        skillID = 104;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 250 - skillLevel * 5;
        coolDown = 90 - skillLevel;
        skillDelay = 275;
      }

      onClipEvent (enterFrame) {
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 250 - skillLevel * 5;
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              if (_root.arenaDelay > 0) {
                fr = 2;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.save.arenaSpirit >= mpCost && _root.arenaDelay <= 0 && coolDown <= 0 && skillLevel > 0 && _root.arenaBot < 48000) {
            _root.save.arenaSpirit -= mpCost;
            _root.save.arenaBuffType = 5;
            _root.save.arenaBuffDuration = 30;
            coolDown = 90 - skillLevel;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Enrage') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Enrage</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nCooldown: <font color=\'#FFFF00\'>' + (90 - skillLevel) + ' seconds</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nGreatly improves your power for 30 seconds. Doesn\'t stack with other buffs, and will override your current buff.\n\n<font color=\'#FFCC33\'>Rage Depletion: <b>-' + Math.floor(30 * _root.buffMultiplier) + '%</b></font>\n<font color=\'#FFCC33\'>Rage Attack: <b>+' + Math.floor(60 * _root.buffMultiplier) + '%</b></font>\n<font color=\'#FFCC33\'>Rage Speed: <b>+' + Math.floor(90 * _root.buffMultiplier) + '%</b></font>\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.floor(60 * _root.buffMultiplier) + '%</b></font>\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.floor(60 * _root.buffMultiplier) + '%</b></font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 90;
        skillID = 54;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 0;
        damagePower = 200 + skillLevel * 10;
        if (_root.save.permaBanPenalty[15] == 3) {
          damagePower += 200;
        } else {
          if (_root.save.permaBanPenalty[15] == 2) {
            damagePower += 120;
          } else {
            if (_root.save.permaBanPenalty[15] == 1) {
              damagePower += 80;
            }
          }
        }
        spiritMult = 0.2;
        knockBack = 0;
        skillDelay = 125;
      }

      onClipEvent (enterFrame) {
        if (_root.arenaDelay > 0) {
          fr = 2;
        } else {
          if (_root.save.arenaSpirit < mpCost) {
            fr = 3;
          } else {
            fr = 4;
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(89) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaSpirit >= mpCost && _root.arenaStun <= 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay / 2 - 1;
            _root.arenaSkillPower = damagePower + Math.floor(_root.save.arenaSpirit * spiritMult);
            _root.arenaKnockBack = knockBack;
            _root.save.arenaSpirit -= mpCost;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Basic Attack') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Basic Attack</font></b>\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nPower: <font color=\'#FFFF00\'>' + damagePower + '%</font> + <font color=\'#0099FF\'>' + Math.floor(_root.save.arenaSpirit * spiritMult) + '%</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nBasic Attack. Deals extra damage based on Spirit charges.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 68;
        skillID = 105;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 350 - skillLevel * 5;
        coolDown = 90 - skillLevel;
        skillDelay = 275;
      }

      onClipEvent (enterFrame) {
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 350 - skillLevel * 5;
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              if (_root.arenaDelay > 0) {
                fr = 2;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.save.arenaSpirit >= mpCost && _root.arenaDelay <= 0 && coolDown <= 0 && skillLevel > 0 && _root.arenaBot < 48000) {
            _root.save.arenaSpirit -= mpCost;
            _root.save.arenaBuffType = 6;
            _root.save.arenaBuffDuration = 60;
            coolDown = 90 - skillLevel;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Elemental Boost') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Elemental Boost</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nCooldown: <font color=\'#FFFF00\'>' + (90 - skillLevel) + ' seconds</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nGrants extra elemental bonuses for 60 seconds. Also improves EXP gain. Doesn\'t stack with other buffs, and will override your current buff.\n\n<font color=\'#99FF33\'>EXP: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>\n<font color=\'#FFCC33\'>All Elements: <b>+' + Math.floor(150 * _root.buffMultiplier) + '%</b></font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 70;
        skillID = 106;
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 450 - skillLevel * 5;
        coolDown = 180 - skillLevel * 2;
        skillDelay = 275;
      }

      onClipEvent (enterFrame) {
        skillLevel = _root.save.arenaSkill[skillID];
        mpCost = 450 - skillLevel * 5;
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        if (skillLevel <= 0) {
          fr = 1;
        } else {
          if (coolDown > 0) {
            fr = 5;
          } else {
            if (_root.save.arenaSpirit < mpCost) {
              fr = 3;
            } else {
              if (_root.arenaDelay > 0) {
                fr = 2;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.save.arenaSpirit >= mpCost && _root.arenaDelay <= 0 && coolDown <= 0 && skillLevel > 0 && _root.arenaBot < 48000) {
            _root.save.arenaSpirit -= mpCost;
            _root.save.arenaBuffType = 7;
            _root.save.arenaBuffDuration = 30;
            coolDown = 180 - skillLevel * 2;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            if (_root.save.questType == 'Use Skill') {
              if (_root.save.questSubtype == 'Invincibility') {
                _root.save.questCount += 1;
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (skillLevel > 0) {
          _root.actiondescription = '<b><font color=\'#FFFF00\'>Invincibility</font></b> [Lv. ' + skillLevel + ']\nSpirit Cost: <font color=\'#FFFF00\'>' + mpCost + '</font>\nCooldown: <font color=\'#FFFF00\'>' + (180 - skillLevel * 2) + ' seconds</font>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>\n\nAllows you to somehow become immune to all monster attacks for 30 seconds. Doesn\'t stack with other buffs, and will override your current buff.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 81;
        skillDelay = 75;
      }

      onClipEvent (enterFrame) {
        hpToRefill = _root.maxHealth - _root.save.arenaHealth;
        maxRefill = Math.floor((100000 + _root.save.arenaSkill[21] * 20000) * _root.potionEfficiency / 100);
        if (hpToRefill > maxRefill) {
          hpToRefill = maxRefill;
        }
        if (_root.save.arenaZone == 24 || _root.save.arenaZone == 29 || _root.save.arenaZone == 52 || _root.save.arenaZone >= 30 && _root.save.arenaZone <= 43 || _root.arenaPotionBlock > 0) {
          hpToRefill = 0;
        }
        pixelCost = Math.floor(hpToRefill * 0.05 * 100 / _root.potionEfficiency);
        if (_root.save.arenaSkill[26] > 0) {
          pixelCost = Math.floor(pixelCost * 0.2);
        }
        if (hpToRefill < 1) {
          fr = 1;
        } else {
          if (_root.arenaDelay > 0) {
            fr = 2;
          } else {
            if (_root.save.arenaPixel < pixelCost) {
              fr = 3;
            } else {
              fr = 4;
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaPixel >= pixelCost && _root.save.arenaHealth < _root.maxHealth && _root.save.arenaHealth > 0 && hpToRefill > 0 && _root.arenaBot < 48000) {
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaHealth += hpToRefill;
            _root.save.arenaPixel -= pixelCost;
            _root.house.arena.showDamage(hpToRefill, 39423, 62.5, 70);
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Health Potion</font></b>\nPixel Cost: <font color=\'#FFFF00\'>' + _root.withComma(pixelCost) + '</font>\nHP: <b>+' + _root.withComma(maxRefill) + '</b>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 4680  {

      onClipEvent (load) {
        hotkey = 87;
        skillDelay = 75;
        coolDown = 60;
      }

      onClipEvent (enterFrame) {
        if (coolDown > 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              coolDown -= 0.025;
            }
          } else {
            coolDown -= 1 / _root.fps;
          }
        }
        mpToRefill = _root.maxSpirit - _root.save.arenaSpirit;
        maxRefill = Math.floor((50 + _root.save.arenaSkill[21] * 1) * _root.potionEfficiency / 100);
        if (mpToRefill > maxRefill) {
          mpToRefill = maxRefill;
        }
        if (_root.save.arenaZone == 29 || _root.arenaPotionBlock > 0) {
          mpToRefill = 0;
        }
        pixelCost = Math.floor(mpToRefill * 1000 * 100 / _root.potionEfficiency);
        if (_root.save.arenaSkill[26] > 0) {
          pixelCost = Math.floor(pixelCost * 0.2);
        }
        if (coolDown > 0) {
          fr = 5;
        } else {
          if (mpToRefill < 1) {
            fr = 1;
          } else {
            if (_root.arenaDelay > 0) {
              fr = 2;
            } else {
              if (_root.save.arenaPixel < pixelCost) {
                fr = 3;
              } else {
                fr = 4;
              }
            }
          }
        }
        if (Key.isDown(hotkey) || Key.isDown(1) && _xmouse >= 0 && _xmouse <= 40 && _ymouse >= 0 && _ymouse <= 30 && _root.optionsScreen._currentframe == 1) {
          if (_root.arenaDelay <= 0 && _root.save.arenaPixel >= pixelCost && _root.save.arenaSpirit < _root.maxSpirit && mpToRefill > 0 && coolDown <= 0 && _root.arenaBot < 48000) {
            coolDown = 60;
            _root.arenaDelay = skillDelay;
            _root.arenaDelay2 = skillDelay;
            _root.save.arenaSpirit += mpToRefill;
            _root.save.arenaPixel -= pixelCost;
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Spirit Potion</font></b>\nPixel Cost: <font color=\'#FFFF00\'>' + _root.withComma(pixelCost) + '</font>\nCooldown: <font color=\'#FFFF00\'>60 seconds</font>\nSpirit: <b>+' + _root.withComma(maxRefill) + '</b>\nDelay: <font color=\'#FFFF00\'>' + Math.ceil(skillDelay / _root.attackSpeed) + ' frames</font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    frame 4 {
      chaosHealth = 0;
      chaosAttack = 0;
      chaosSpecial = 0;
      attackDelay = 40;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
      onEnterFrame = function () {
        tempSpeed = _root.fps;
        _root.arenaDelay = 1;
        if (_root.house.arena.enemy.enemyID != 0) {
          tempSpeed = 40;
        }
        if (chaosHealth < 100) {
          chaosHealth += 2 / tempSpeed;
        }
        if (chaosAttack > 0) {
          chaosAttack -= 5 / tempSpeed;
        }
        if (chaosHealth > 100) {
          chaosHealth = 100;
        }
        if (chaosAttack > 100) {
          chaosAttack = 100;
        }
        if (chaosSpecial > 100) {
          chaosSpecial = 100;
        }
        if (chaosHealth < 0) {
          chaosHealth = 0;
        }
        if (chaosAttack < 0) {
          chaosAttack = 0;
        }
        if (chaosSpecial < 0) {
          chaosSpecial = 0;
        }
        if (_root.save.arenaZone == 52 || _root.save.arenaZone == 20 || _root.save.arenaZone == 56) {
          chaosAttack = 0;
        }
        if (_root.save.arenaZone != 24) {
          if (_root.house.arena.enemy.enemyID == 0 && _root.save.arenaHealth > 0) {
            _root.save.arenaHealth = _root.maxHealth;
          } else {
            if (_root.save.arenaHealth < _root.maxHealth && _root.save.arenaHealth > 0 && chaosHealth >= 1) {
              _root.save.arenaHealth += Math.floor(_root.maxHealth / 25);
              chaosHealth -= 2;
            }
          }
        }
        attackDelay -= 1;
        if (attackDelay <= 0) {
          if (_root.house.arena.enemy.enemyID != 0) {
            if (_root.house.arena.enemy.lifespan > 2 && chaosSpecial >= 100) {
              chaosSpecial -= 100;
              attackDelay = 10;
              _root.save.arenaRage = 100;
              damageMult = 1;
              if (_root.save.permaBanPenalty[15] == 3) {
                damageMult = 1.25;
              } else {
                if (_root.save.permaBanPenalty[15] == 2) {
                  damageMult = 1.15;
                } else {
                  if (_root.save.permaBanPenalty[15] == 1) {
                    damageMult = 1.1;
                  }
                }
              }
              _root.house.arena.dealDamage(50000 * damageMult, 8, 'Roundhouse Kick');
              if (Math.random() < _root.doubleHit / 100) {
                _root.house.arena.dealDamage(50000 * damageMult, 0, 'Double Hit');
              }
            } else {
              chaosAttack += 2;
              if (chaosAttack > 100) {
                chaosAttack = 100;
              }
              chaosSpecial += 0.5;
              if (chaosSpecial > 100) {
                chaosSpecial = 100;
              }
              attackDelay = 4;
              if (_root.house.arena.enemy.lifespan > 2) {
                attackDelay = 3;
              }
              if (_root.house.arena.enemy.lifespan > 4) {
                attackDelay = 2;
              }
              damageMult = 1;
              if (_root.save.permaBanPenalty[15] == 3) {
                damageMult = 1.25;
              } else {
                if (_root.save.permaBanPenalty[15] == 2) {
                  damageMult = 1.15;
                } else {
                  if (_root.save.permaBanPenalty[15] == 1) {
                    damageMult = 1.1;
                  }
                }
              }
              _root.house.arena.dealDamage(Math.ceil((600 + chaosAttack * 6) * damageMult), 0, '');
              if (Math.random() < _root.doubleHit / 100) {
                _root.house.arena.dealDamage(Math.ceil((600 + chaosAttack * 6) * damageMult), 0, 'Double Hit');
              }
            }
          }
        }
        if (chaosHealth > 100) {
          chaosHealth = 100;
        }
        if (chaosAttack > 100) {
          chaosAttack = 100;
        }
        if (chaosSpecial > 100) {
          chaosSpecial = 100;
        }
        if (chaosHealth < 0) {
          chaosHealth = 0;
        }
        if (chaosAttack < 0) {
          chaosAttack = 0;
        }
        if (chaosSpecial < 0) {
          chaosSpecial = 0;
        }
      };

    }

    instance of movieClip 4697  {

      onClipEvent (load) {
        targetScale = 100;
        _xscale = 100;
      }

      onClipEvent (enterFrame) {
        targetScale = 100 - _parent.chaosHealth;
        _xscale = _xscale + (targetScale - _xscale) / 10;
      }
    }

    instance of movieClip 4697  {

      onClipEvent (load) {
        targetScale = 100;
        _xscale = 100;
      }

      onClipEvent (enterFrame) {
        targetScale = 100 - _parent.chaosAttack;
        _xscale = _xscale + (targetScale - _xscale) / 10;
      }
    }

    instance of movieClip 4697  {

      onClipEvent (load) {
        targetScale = 100;
        _xscale = 100;
      }

      onClipEvent (enterFrame) {
        targetScale = 100 - _parent.chaosSpecial;
        _xscale = _xscale + (targetScale - _xscale) / 10;
      }
    }

    frame 5 {
      onEnterFrame = null;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
    }
  }

  movieClip 4711  {
  }

  movieClip 4714  {
  }

  movieClip 4716  {

    frame 1 {
      stop();
      onEnterFrame = function () {
        if (_root.noSpec == true && _alpha > 0) {
          _alpha = _alpha - 10;
          if (_alpha <= 0) {
            gotoAndStop(1);
            _root.noSpec = false;
          }
        } else {
          if (_root.noSpec == false && _alpha < 100) {
            _alpha = _alpha + 10;
          }
        }
      };

    }
  }

  movieClip 4717  {
  }

  movieClip 4721  {
  }

  movieClip 4723  {
  }

  movieClip 4724  {

    instance of movieClip 4723  {

      onClipEvent (load) {
        _alpha = 0;
        del = 0;
        tCount = 0;
      }

      onClipEvent (enterFrame) {
        if (_alpha > 0) {
          _alpha = _alpha - 25;
        } else {
          if (tCount % 2 == 0) {
            req = 60;
          } else {
            if (tCount % 3 == 0) {
              req = 75;
            } else {
              req = 110;
            }
          }
          if (_root.house.arena.enemy.hp > 0) {
            if (_root.house.arena.enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
              del += 1;
            }
          } else {
            del += 40 / _root.fps;
          }
          if (del > req && _root.save.arenaHealth > 100 && _root.save.arenaZone != 24) {
            del = 0;
            tCount += 1;
            if (tCount > 13) {
              tCount = 0;
            }
            _alpha = 100;
            _root.house.arena.takeDamage(Math.ceil(_root.save.arenaHealth * 0.25), 'Apocalypse');
          }
        }
      }
    }
  }

  movieClip 4734  {

    frame 1 {
      stop();
    }
  }

  // unknown tag 88 length 62

  movieClip 4739  {
  }

  movieClip 4741  {
  }

  movieClip 4745  {

    frame 1 {
      if (_root.save.vegetarianMode == true) {
        gotoAndStop(2);
      } else {
        gotoAndStop(1);
      }
    }
  }

  movieClip 4754  {

    frame 1 {
      onEnterFrame = null;
    }

    frame 2 {
      onEnterFrame = function () {
        t1.text = _root.withComma(_root.save.arenaEnhancerFragment);
        t2.text = _root.withComma(_root.save.arenaSuperiorCraft);
        t3.text = _root.withComma(_root.save.arenaUnobtainium);
        t4.text = _root.withComma(_root.save.arenaBacon);
        t5.text = _root.withComma(_root.save.arenaChaoticFragment);
        t6.text = _root.withComma(_root.save.arenaCrystal1);
        t7.text = _root.withComma(_root.save.arenaCrystal2);
      };

    }
  }

  movieClip 4756  {
  }

  movieClip 4757  {

    instance of movieClip 4756  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b><font color=\'#FFFF00\'>Mission Kommander\'s Mission</font>\n</b>Defeat ' + _root.withComma(_root.save.arenaKommanderMonCount) + ' [' + _root.enemyList[_root.save.arenaKommanderMonID].name + ']\n\nProgress: ' + _root.withComma(_root.save.arenaKommanderProgress) + ' / ' + _root.withComma(_root.save.arenaKommanderMonCount) + '\n\nClick here to move to Ye Olde Pub';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        _root.house.arena.travel(0, 0);
      }
    }
  }

  movieClip 4759  {
  }

  movieClip 4761  {
  }

  movieClip 4763  {
  }

  movieClip 4765  {
  }

  movieClip 4766  {

    instance of movieClip 4759  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>The Corruption</b></font>\n\nYou are invited to The Corruption. The Corruption is a special training ground where monster strength and reward scale with your performance!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79) {
          _root.showPopup('Error', 'You cannot accept the invitation from this location.');
        } else {
          if (_root.house.arena.enemy.enemyID != 0) {
            _root.showPopup('Error', 'You cannot accept the invitation when there is a monster. Defeat the monster first.');
          } else {
            _root.save.arenaZoneOrig = _root.save.arenaZone;
            _root.actiondescription = '';
            _root.save.arenaCorruptionEntry -= 1;
            if (_root.worstMoon == true) {
              _root.house.arena.travel(59);
            } else {
              _root.house.arena.travel(50);
            }
            _parent.gotoAndStop(5);
          }
        }
      }
    }

    instance of movieClip 4761  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFFoo\'><b>THE MEGABOSS\'s Revenge</b></font>\n\nTHE MEGABOSS wants to fight you... again, and again, and again!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79) {
          _root.showPopup('Error', 'You cannot accept the invitation from this location.');
        } else {
          if (_root.house.arena.enemy.enemyID != 0) {
            _root.showPopup('Error', 'You cannot accept the invitation when there is a monster. Defeat the monster first.');
          } else {
            _root.save.arenaZoneOrig = _root.save.arenaZone;
            _root.actiondescription = '';
            _root.save.arenaRevengeEntry -= 1;
            _root.house.arena.travel(56);
            _parent.gotoAndStop(5);
          }
        }
      }
    }

    instance of movieClip 4763  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>Endless Dungeon</b></font>\n\nYou are invited to Endless Dungeon! Sounds kind of dangerous... do you REALLY want to go?';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79) {
          _root.showPopup('Error', 'You cannot accept the invitation from this location.');
        } else {
          if (_root.house.arena.enemy.enemyID != 0) {
            _root.showPopup('Error', 'You cannot accept the invitation when there is a monster. Defeat the monster first.');
          } else {
            _root.actiondescription = '';
            if (_root.clock_year == 2013 && _root.clock_month == 12 && _root.clock_date >= 2 && _root.clock_date <= 8) {
            } else {
              _root.save.arenaEndlessEntry -= 1;
            }
            _root.house.arena.travel(78);
            _parent.gotoAndStop(5);
          }
        }
      }
    }

    instance of movieClip 4765  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>Cake Hall</b></font>\n\nThe next battle against the Cake is starting soon! Click here to move to the lobby right now!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79) {
          _root.showPopup('Error', 'You cannot accept the invitation from this location.');
        } else {
          if (_root.house.arena.enemy.enemyID != 0) {
            _root.showPopup('Error', 'You cannot accept the invitation when there is a monster. Defeat the monster first.');
          } else {
            _root.actiondescription = '';
            _root.house.arena.travel(83);
            _parent.gotoAndStop(5);
          }
        }
      }
    }
  }

  movieClip 4769  {
  }

  // unknown tag 88 length 44

  movieClip 4774  {

    instance of movieClip 4769  {

      onClipEvent (load) {
        _xscale = 0;
        targetScale = 0;
        _parent.hp1Text.text = '';
        _parent.hpText.text = '';
        _parent.pctText.text = '';
      }

      onClipEvent (enterFrame) {
        if (_root.house.arena.enemy.enemyID != 0 && _root.house.arena.enemy.hp > 0) {
          targetScale = (_root.house.arena.enemy.hp / _root.house.arena.enemy.maxhp) * 100;
          _parent.hpText.text = _root.withComma(_root.house.arena.enemy.hp) + ' / ' + _root.withComma(_root.house.arena.enemy.maxhp);
          pct = Math.ceil((_root.house.arena.enemy.hp / _root.house.arena.enemy.maxhp) * 1000) / 10;
          if (pct == Math.round(pct)) {
            pct += '.0';
          }
          _parent.hp1Text.text = _root.house.arena.enemy.name;
          if (_root.save.arenaZone == 56) {
            _parent.hp1Text.text = 'Round ' + _root.withComma(_root.areaRevengeKill + 1);
          }
          _parent.pctText.text = '[' + pct + '%]';
        } else {
          targetScale = 0;
          _parent.hpText.text = '';
          _parent.hp1Text.text = '';
          _parent.pctText.text = '';
        }
        _xscale = _xscale + (targetScale - _xscale) / 2;
      }
    }
  }

  movieClip 4776  {
  }

  movieClip 4778  {
  }

  movieClip 4779  {
  }

  movieClip 4793  {
  }

  movieClip 4811  {

    frame 1 {
      stop();
      if (_root.save.robaconLevel >= reqRank) {
        gotoAndStop(2);
      }
      onRollOver = function () {
        if (_root.save.robaconLevel >= reqRank) {
          _root.actiondescription = desc;
        }
      };

      onRollOut = function () {
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

    }
  }

  movieClip 4822  {

    frame 1 {
      stop();
    }
  }

  movieClip 4823  {
  }

  movieClip 4825  {
  }

  movieClip 4827  {

    instance of movieClip 522  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
          if (_parent._parent.subtype == 'Secondary Weapon') {
            _y = 40;
          } else {
            if (_parent._parent.range == false) {
              _y = 40;
              _parent.scanLine._y = 40;
              while (_parent.scanLine.hitTest(this)) {
                _parent.scanLine._y -= 3;
              }
              _parent._parent.weaponRange = Math.round((40 - _parent.scanLine._y) * 5 / 3);
              if (_height > 40) {
                _y = _height;
              } else {
                _y = 20 + _height / 2;
              }
            } else {
              _y = 20;
            }
          }
          _parent.scanLine._y = 1999;
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 594  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 661  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 798  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1031  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1149  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1171  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1194  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1208  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1225  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1245  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
        }

        this.setMask(_parent.itemMark);
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1250  {

      onClipEvent (load) {
        function checkFrame() {
          gotoAndStop(_parent._parent.frame);
          _parent.chipText.text = _parent._parent.attack;
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }
  }

  movieClip 4828  {

    frame 1 {
      function refr() {
        if (!isNaN(iniSlot) && iniSlot < 60) {
          slot = iniSlot + _root.invTab * 100;
        }
        checkStat();
        itemIcon.checkFrame();
      }

      function checkStat() {
        exist = _root.save.inventoryExist[slot];
        name = _root.save.inventoryName[slot];
        if (name.indexOf('[S]') != -1) {
          typeS = true;
        } else {
          typeS = false;
        }
        if (name.indexOf('[I]') != -1) {
          typeI = true;
        } else {
          typeI = false;
        }
        if (name.indexOf('(Cursed)') != -1) {
          typeC = true;
        } else {
          typeC = false;
        }
        name = name.replace('[S] ', '');
        name = name.replace('[I] ', '');
        name = name.replace(' (Cursed)', '');
        level = _root.save.inventoryLevel[slot];
        maxLevel = _root.save.inventoryMaxLevel[slot];
        reqRank = _root.save.inventoryReqRank[slot];
        exp = _root.save.inventoryExp[slot];
        expTNL = _root.save.inventoryExpTNL[slot];
        enhance = _root.save.inventoryEnhance[slot];
        bonusPow = _root.save.inventoryBonusPow[slot];
        expTNL = _root.save.inventoryExpTNL[slot];
        type = _root.save.inventoryType[slot];
        subtype = _root.save.inventorySubtype[slot];
        frame = _root.save.inventoryFrame[slot];
        range = _root.save.inventoryRange[slot];
        attack = _root.save.inventoryAttack[slot];
        speed = _root.save.inventorySpeed[slot];
        defense = _root.save.inventoryDefense[slot];
        bonus = _root.save.inventoryBonus[slot];
        ability = _root.save.inventoryAbility[slot];
        moreBonus = _root.save.inventoryMoreBonus[slot];
        sell = _root.save.inventorySell[slot];
        expiry = _root.save.inventoryExpiry[slot];
        obtainTime = _root.save.inventoryObtainTime[slot];
        noBonus = _root.save.inventoryNoBonus[slot];
        noRecycle = _root.save.inventoryNoRecycle[slot];
        noFuse = _root.save.inventoryNoFuse[slot];
        noUnique = _root.save.inventoryNoUnique[slot];
        unob = _root.save.inventoryUnob[slot];
        spirit = _root.save.inventorySpirit[slot];
        crit = _root.save.inventoryCrit[slot];
        dexterity = _root.save.inventoryDexterity[slot];
        health = _root.save.inventoryHealth[slot];
        desc = _root.save.inventoryDesc[slot];
        xCate = _root.save.inventoryType[slot];
        guard = _root.save.inventoryGuard[slot];
        setID = _root.save.inventorySet[slot];
        if (isNaN(setID)) {
          setID = 0;
        }
        if (_root.save.inventorySubtype[slot] == 'Secondary Weapon') {
          xCate = 'SubWeapon';
        }
        if (_root.save.inventoryType[slot] == 'Armor' || _root.save.inventoryType[slot] == 'Accessory') {
          xCate = _root.save.inventorySubtype[slot];
        }
        if (_root.save.inventoryType[slot] == 'Outfit') {
          xCate = 'Outfit' + _root.save.inventorySubtype[slot];
        }
      }

      function showText() {
        _root.actiondescription = '';
        if (exist == 1) {
          _root.actiondescription += '<font color=\'#DDEEFF\'><b>';
          if (bonusPow >= 100000) {
            if (name.indexOf('\'s Elixir of Greatness') != -1) {
              rainbowName = substring(name, 1, name.indexOf('\'s') + 2);
              _root.actiondescription += _root.jewk(rainbowName);
              rainbowName = substring(name, name.indexOf('\'s') + 4, name.length - name.indexOf('\'s') - 1);
              if (type != 'Enhancer') {
                if (enhance > 0) {
                  rainbowName += ' [+' + enhance + ']';
                } else {
                  if (enhance < 0) {
                    rainbowName += ' [' + enhance + ']';
                  }
                }
              }
              _root.actiondescription += '\n' + _root.jewk(rainbowName) + '</b>';
            } else {
              rainbowName = name;
              if (type != 'Enhancer') {
                if (enhance > 0) {
                  rainbowName += ' [+' + enhance + ']';
                } else {
                  if (enhance < 0) {
                    rainbowName += ' [' + enhance + ']';
                  }
                }
              }
              _root.actiondescription += _root.jewk(rainbowName) + '</b>';
            }
          } else {
            if (bonusPow >= 706) {
              _root.actiondescription += '<font color=\'#FF0000\'>';
            } else {
              if (bonusPow >= 406) {
                _root.actiondescription += '<font color=\'#FF33CC\'>';
              } else {
                if (bonusPow >= 256) {
                  _root.actiondescription += '<font color=\'#999900\'>';
                } else {
                  if (bonusPow >= 156) {
                    _root.actiondescription += '<font color=\'#009900\'>';
                  } else {
                    if (bonusPow >= 106) {
                      _root.actiondescription += '<font color=\'#9900FF\'>';
                    } else {
                      if (bonusPow >= 66) {
                        _root.actiondescription += '<font color=\'#00FFFF\'>';
                      } else {
                        if (bonusPow >= 36) {
                          _root.actiondescription += '<font color=\'#00FF00\'>';
                        } else {
                          if (bonusPow >= 16) {
                            _root.actiondescription += '<font color=\'#FFFF00\'>';
                          } else {
                            if (bonusPow >= 1) {
                              _root.actiondescription += '<font color=\'#0099FF\'>';
                            } else {
                              if (bonusPow >= 0) {
                                _root.actiondescription += '<font color=\'#FFFFFF\'>';
                              } else {
                                _root.actiondescription += '<font color=\'#999999\'>';
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (name.indexOf('\'s Elixir of Greatness') != -1) {
              _root.actiondescription += substring(name, 1, name.indexOf('\'s') + 2);
              _root.actiondescription += '\n' + substring(name, name.indexOf('\'s') + 4, name.length - name.indexOf('\'s') - 1);
            } else {
              _root.actiondescription += name;
            }
            if (type != 'Enhancer') {
              if (enhance > 0) {
                _root.actiondescription += ' [+' + enhance + ']';
              } else {
                if (enhance < 0) {
                  _root.actiondescription += ' [' + enhance + ']';
                }
              }
            }
            _root.actiondescription += '</font></b>';
          }
          if (noBonus == true && level != 9999) {
            _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot apply Bonus Rocks</b></font>';
          }
          if (noFuse == true || noUnique == true) {
            if (level != 9999 && type != 'Accessory') {
              _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot Fuse</b></font>';
            }
          }
          if (noUnique == true) {
            _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot apply Unique Enhancers</b></font>';
          }
          if (spirit == true) {
            _root.actiondescription += '\n<font color=\'#0099FF\'><b>Spirit Item</b></font>';
          }
          timeLeft = expiry - _root.systemtimenow;
          if (timeLeft != Infinity && !isNaN(timeLeft)) {
            if (timeLeft > 86400000) {
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Time Left: <b>' + Math.ceil(timeLeft / 8640000) / 10 + ' days</b></font>';
            } else {
              if (timeLeft > 3600000) {
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Time Left: <b>' + Math.ceil(timeLeft / 3600000) + ' hr.</b></font>';
              } else {
                if (timeLeft > 0) {
                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Time Left: <b>' + Math.ceil(timeLeft / 60000) + ' min.</b></font>';
                } else {
                  _root.actiondescription += '\n<font color=\'#FF0000\'><b>Expired</b></font>';
                }
              }
            }
          }
          if (reqRank >= 1 && type != 'Enhancer' && type != 'Potion' && type != 'Chip') {
            if (_root.save.arenaLevel < reqRank) {
              _root.actiondescription += '\n<font color=\'#6699CC\'>Required Rank: <font color=\'#FF0000\'><b>' + reqRank + '</b></font></font>';
            } else {
              _root.actiondescription += '\n<font color=\'#6699CC\'>Required Rank: <font color=\'#99CCFF\'><b>' + reqRank + '</b></font></font>';
            }
          }
          if (maxLevel > 1) {
            if (level == 9999) {
              _root.actiondescription += '\n<font color=\'#B478F0\'><b>Finalized</b></font>';
            }
          } else {
            if (maxLevel == -1) {
              _root.actiondescription += '\n<font color=\'#99FF33\'>Durability: <b>' + _root.withComma(expTNL) + '</b> attacks</font>';
            }
          }
          if (typeC == true) {
            _root.actiondescription += '\n<font color=\'#FF9999\'><b>Cursed Item</b>\nEquipping this will cause your MaxHP and damage dealt to drop. Use a Cleansing Rock to get rid of the curse.</font>\n';
          }
          if (type == 'Weapon') {
            _root.actiondescription += '\nType: Weapon / ' + subtype;
          }
          if (type == 'Armor') {
            _root.actiondescription += '\nType: Armor / ' + subtype;
          }
          if (type == 'Accessory') {
            _root.actiondescription += '\nType: Accessory / ' + subtype;
          }
          if (type == 'Outfit') {
            _root.actiondescription += '\nType: Outfit / ' + subtype;
          }
          if (type == 'Weapon' || type == 'Armor' || type == 'Accessory') {
            _root.actiondescription += '\n';
            if (type == 'Weapon' && subtype != 'Secondary Weapon') {
              if (name == 'Ultimate Weapon' || name == 'Reincarnation Weapon') {
                _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>125 px</font>';
              } else {
                if (_root.save.inventoryRange[slot] == false) {
                  _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>' + weaponRange + ' px</font>';
                } else {
                  _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>MAX</font>';
                }
              }
            }
            if (attack > 0) {
              _root.actiondescription += '\nAttack: <font color=\'#FFFF00\'>' + _root.withComma(attack) + '</font>';
            }
            if (speed > 0) {
              if (type == 'Weapon') {
                _root.actiondescription += '\nAttack Speed: <font color=\'#FFFF00\'>' + speed + '</font>';
              } else {
                _root.actiondescription += '\nAttack Speed: <font color=\'#FFFF00\'>' + Math.floor(speed * 5) + '%</font>';
              }
            }
            if (defense > 0) {
              _root.actiondescription += '\nDefense: <font color=\'#FFFF00\'>' + _root.withComma(defense) + '</font>';
            }
            if (crit > 0) {
              if (type == 'Weapon') {
                _root.actiondescription += '\nCritical Chance: <font color=\'#FFFF00\'>' + crit + '%</font>';
              } else {
                _root.actiondescription += '\nCritical Damage: <font color=\'#FFFF00\'>' + crit + '%</font>';
              }
            }
            if (dexterity > 0) {
              if (type == 'Weapon') {
                _root.actiondescription += '\nAccuracy: <font color=\'#FFFF00\'>' + dexterity + '%</font>';
              } else {
                _root.actiondescription += '\nEvasion: <font color=\'#FFFF00\'>' + dexterity + '%</font>';
              }
            }
            if (health > 0) {
              if (type == 'Weapon') {
                _root.actiondescription += '\nHP Regen: <font color=\'#FFFF00\'>' + _root.withComma(Math.floor(health * 25)) + '%</font>';
              } else {
                _root.actiondescription += '\nMaxHP: <font color=\'#FFFF00\'>' + health + '%</font>';
              }
            }
            if (_root.enhancerToUse != 0 && _root.save['arena' + xCate] != slot && _root.save.inventoryAttack[_root.enhancerToUse] > 0) {
              if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Attack Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Attack Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Accessory Attack Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Unique Enhancer') {
                _root.actiondescription += '\n<font color=\'#00FFFF\'>Attack: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
              } else {
                if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Speed Enhancer') {
                  _root.actiondescription += '\n<font color=\'#00FFFF\'>Attack Speed: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
                } else {
                  if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Speed Enhancer') {
                    _root.actiondescription += '\n<font color=\'#00FFFF\'>Attack Speed: +' + Math.floor(_root.save.inventoryAttack[_root.enhancerToUse] * 5) + '%</font>';
                  } else {
                    if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Defense Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Defense Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Unique Enhancer') {
                      _root.actiondescription += '\n<font color=\'#00FFFF\'>Defense: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
                    } else {
                      if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Critical Enhancer') {
                        _root.actiondescription += '\n<font color=\'#00FFFF\'>Critical Chance: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '%</font>';
                      } else {
                        if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Dexterity Enhancer') {
                          _root.actiondescription += '\n<font color=\'#00FFFF\'>Accuracy: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '%</font>';
                        } else {
                          if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Health Enhancer') {
                            _root.actiondescription += '\n<font color=\'#00FFFF\'>HP Regen: +' + Math.floor(_root.save.inventoryAttack[_root.enhancerToUse] * 25) + '%</font>';
                          } else {
                            if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Critical Enhancer') {
                              _root.actiondescription += '\n<font color=\'#00FFFF\'>Critical Damage: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '%</font>';
                            } else {
                              if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Dexterity Enhancer') {
                                _root.actiondescription += '\n<font color=\'#00FFFF\'>Evasion: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '%</font>';
                              } else {
                                if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Health Enhancer') {
                                  _root.actiondescription += '\n<font color=\'#00FFFF\'>MaxHP: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '%</font>';
                                } else {
                                  if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Lifespan Extender' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Lifespan Extender') {
                                    _root.actiondescription += '\n<font color=\'#00FFFF\'>Lifespan (Days): +' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
                                  } else {
                                    if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Growth Rock' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Growth Rock') {
                                      _root.actiondescription += '\n<font color=\'#00FFFF\'>Max Level: +' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
                                    } else {
                                      if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Mystery Enhancer' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Mystery Enhancer') {
                                        _root.actiondescription += '\n<font color=\'#00FFFF\'>Enhancement Level: ' + _root.save.inventoryAttack[_root.enhancerToUse] + '</font>';
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (maxLevel > 1 && maxLevel != 9999) {
              if (level < maxLevel) {
                expmul = 1 + level * 0.01;
                if (subtype == 'Trinket') {
                  expmul = level;
                }
                _root.actiondescription += '\n\n<font color=\'#77DDFF\'>--- Item Level: <b>' + level + '</b> / ' + maxLevel + ' ---</font>';
                _root.actiondescription += '\n<font color=\'#55BBDD\'>EXP: ' + _root.withComma(Math.floor((exp / 1000) * expmul)) + ' / ' + _root.withComma(Math.ceil((expTNL / 1000) * expmul)) + ' (' + Math.floor((exp / expTNL) * 100) + '%)</font>';
              } else {
                _root.actiondescription += '\n\n<font color=\'#DD77FF\'>--- Item Level: <b>' + level + '</b> / ' + maxLevel + ' (MAX) ---</font>';
              }
            }
          }
          if (type == 'Enhancer') {
            if (subtype == 'Weapon Attack Enhancer') {
              _root.actiondescription += '\nType: Weapon Enhancer';
              _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + attack + '</font>';
            } else {
              if (subtype == 'Weapon Unique Enhancer') {
                _root.actiondescription += '\nType: Weapon Unique Enhancer';
                _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + attack + '</font>';
                _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
              } else {
                if (subtype == 'Weapon Speed Enhancer') {
                  _root.actiondescription += '\nType: Weapon Enhancer';
                  _root.actiondescription += '\n\nAttack Speed: <font color=\'#0099FF\'>+' + attack + '</font>';
                } else {
                  if (subtype == 'Weapon Defense Enhancer') {
                    _root.actiondescription += '\nType: Weapon Enhancer';
                    _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + attack + '</font>';
                  } else {
                    if (subtype == 'Armor Attack Enhancer') {
                      _root.actiondescription += '\nType: Armor Enhancer';
                      _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + attack + '</font>';
                    } else {
                      if (subtype == 'Accessory Attack Enhancer') {
                        _root.actiondescription += '\nType: Accessory Enhancer';
                        _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + attack + '</font>';
                      } else {
                        if (subtype == 'Armor Speed Enhancer') {
                          _root.actiondescription += '\n\nType: Armor Enhancer';
                          _root.actiondescription += '\nAttack Speed: <font color=\'#0099FF\'>+' + Math.floor(attack * 5) + '%</font>';
                        } else {
                          if (subtype == 'Armor Defense Enhancer') {
                            _root.actiondescription += '\nType: Armor Enhancer';
                            _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + attack + '</font>';
                          } else {
                            if (subtype == 'Armor Unique Enhancer') {
                              _root.actiondescription += '\nType: Armor Unique Enhancer';
                              _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + attack + '</font>';
                              _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
                            } else {
                              if (subtype == 'Weapon Critical Enhancer') {
                                _root.actiondescription += '\nType: Weapon Enhancer';
                                _root.actiondescription += '\n\nCritical Chance: <font color=\'#0099FF\'>+' + attack + '%</font>';
                              } else {
                                if (subtype == 'Weapon Dexterity Enhancer') {
                                  _root.actiondescription += '\nType: Weapon Enhancer';
                                  _root.actiondescription += '\n\nAccuracy: <font color=\'#0099FF\'>+' + attack + '%</font>';
                                } else {
                                  if (subtype == 'Weapon Health Enhancer') {
                                    _root.actiondescription += '\nType: Weapon Enhancer';
                                    _root.actiondescription += '\n\nHP Regen: <font color=\'#0099FF\'>+' + Math.floor(attack * 25) + '%</font>';
                                  } else {
                                    if (subtype == 'Armor Critical Enhancer') {
                                      _root.actiondescription += '\nType: Armor Enhancer';
                                      _root.actiondescription += '\n\nCritical Damage: <font color=\'#0099FF\'>+' + attack + '%</font>';
                                    } else {
                                      if (subtype == 'Armor Dexterity Enhancer') {
                                        _root.actiondescription += '\nType: Armor Enhancer';
                                        _root.actiondescription += '\n\nEvasion: <font color=\'#0099FF\'>+' + attack + '%</font>';
                                      } else {
                                        if (subtype == 'Armor Health Enhancer') {
                                          _root.actiondescription += '\nType: Armor Enhancer';
                                          _root.actiondescription += '\n\nMaxHP: <font color=\'#0099FF\'>+' + attack + '%</font>';
                                        } else {
                                          if (subtype == 'Weapon Bonus Adder') {
                                            _root.actiondescription += '\nType: Weapon Bonus Adder';
                                            if (typeS == true) {
                                              _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font>.</font>';
                                            }
                                          } else {
                                            if (subtype == 'Armor Bonus Adder') {
                                              _root.actiondescription += '\nType: Armor Bonus Adder';
                                              if (typeS == true) {
                                                _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font>.</font>';
                                              }
                                            } else {
                                              if (subtype == 'Accessory Bonus Adder') {
                                                _root.actiondescription += '\nType: Accessory Bonus Adder';
                                                if (typeS == true) {
                                                  _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item (except Medals and some Trinkets)</font>.</font>';
                                                }
                                              } else {
                                                if (subtype == 'Weapon Lifespan Extender') {
                                                  _root.actiondescription += '\nType: Weapon Lifespan Extender';
                                                  _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + attack + '</font>';
                                                } else {
                                                  if (subtype == 'Armor Lifespan Extender') {
                                                    _root.actiondescription += '\nType: Armor Lifespan Extender';
                                                    _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + attack + '</font>';
                                                  } else {
                                                    if (subtype == 'Accessory Lifespan Extender') {
                                                      _root.actiondescription += '\nType: Accessory Lifespan Extender';
                                                      _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + attack + '</font>';
                                                    } else {
                                                      if (subtype == 'Accessory Unique Enhancer') {
                                                        _root.actiondescription += '\nType: Accessory Unique Enhancer';
                                                        _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + attack + '</font>';
                                                        _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
                                                      } else {
                                                        if (subtype == 'Weapon Growth Rock') {
                                                          _root.actiondescription += '\nType: Weapon Enhancer';
                                                          _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + attack + '</font>';
                                                        } else {
                                                          if (subtype == 'Armor Growth Rock') {
                                                            _root.actiondescription += '\nType: Armor Enhancer';
                                                            _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + attack + '</font>';
                                                          } else {
                                                            if (subtype == 'Accessory Growth Rock') {
                                                              _root.actiondescription += '\nType: Accessory Enhancer';
                                                              _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + attack + '</font>';
                                                            } else {
                                                              if (subtype == 'Weapon Spirit Rock') {
                                                                _root.actiondescription += '\nType: Weapon Spirit Rock';
                                                                if (typeS == true) {
                                                                  _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                } else {
                                                                  _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                }
                                                              } else {
                                                                if (subtype == 'Armor Spirit Rock') {
                                                                  _root.actiondescription += '\nType: Armor Spirit Rock';
                                                                  if (typeS == true) {
                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                  } else {
                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                  }
                                                                } else {
                                                                  if (subtype == 'Accessory Spirit Rock') {
                                                                    _root.actiondescription += '\nType: Accessory Spirit Rock';
                                                                    if (typeS == true) {
                                                                      _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                    } else {
                                                                      _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                    }
                                                                  } else {
                                                                    if (subtype == 'Mystery Enhancer Identifier') {
                                                                      _root.actiondescription += '\nType: Mystery Enhancer Identifier';
                                                                      _root.actiondescription += '\n\n<font color=\'#0099FF\'>Reveals the effect of a Mystery Enhancer.</font>';
                                                                    } else {
                                                                      if (subtype == 'Weapon Mystery Enhancer') {
                                                                        _root.actiondescription += '\nType: Weapon Enhancer';
                                                                        _root.actiondescription += '\n\nEnhancement Level: <font color=\'#0099FF\'>' + attack + '</font>';
                                                                      } else {
                                                                        if (subtype == 'Armor Mystery Enhancer') {
                                                                          _root.actiondescription += '\nType: Armor Enhancer';
                                                                          _root.actiondescription += '\n\nEnhancement Level: <font color=\'#0099FF\'>' + attack + '</font>';
                                                                        } else {
                                                                          if (subtype == 'Enhancer Success Enhancer') {
                                                                            _root.actiondescription += '\nType: Enhancer Enhancer';
                                                                            _root.actiondescription += '\n\nSuccess Rate: <font color=\'#0099FF\'>' + attack + '% of current</font>';
                                                                          } else {
                                                                            if (subtype == 'Enhancer Destruction Enhancer') {
                                                                              _root.actiondescription += '\nType: Enhancer Enhancer';
                                                                              _root.actiondescription += '\n\nDestruction Rate: <font color=\'#0099FF\'>' + attack + '% of current</font>';
                                                                            } else {
                                                                              if (subtype == 'Weapon Unobtainium Enhancer') {
                                                                                _root.actiondescription += '\nType: Weapon Unobtainium Enhancer';
                                                                                _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + attack + ' of original</font>';
                                                                              } else {
                                                                                if (subtype == 'Armor Unobtainium Enhancer') {
                                                                                  _root.actiondescription += '\nType: Armor Unobtainium Enhancer';
                                                                                  _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + attack + ' of original</font>';
                                                                                } else {
                                                                                  if (subtype == 'Accessory Unobtainium Enhancer') {
                                                                                    _root.actiondescription += '\nType: Accessory Unobtainium Enhancer';
                                                                                    _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + attack + ' of original</font>';
                                                                                  } else {
                                                                                    if (subtype == 'Weapon Finalizer') {
                                                                                      _root.actiondescription += '\nType: Weapon Finalizer';
                                                                                      _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + attack + '</b> or below weapon. A finalized item gains extra stats, but can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                    } else {
                                                                                      if (subtype == 'Armor Finalizer') {
                                                                                        _root.actiondescription += '\nType: Armor Finalizer';
                                                                                        _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + attack + '</b> or below armor piece. A finalized item gains extra stats, but can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                      } else {
                                                                                        if (subtype == 'Accessory Finalizer') {
                                                                                          _root.actiondescription += '\nType: Accessory Finalizer';
                                                                                          _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + attack + '</b> or below accessory. A finalized item gains extra stats, can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                        } else {
                                                                                          if (subtype == 'Weapon Cleansing Rock') {
                                                                                            _root.actiondescription += '\nType: Weapon Cleansing Rock';
                                                                                          } else {
                                                                                            if (subtype == 'Armor Cleansing Rock') {
                                                                                              _root.actiondescription += '\nType: Armor Cleansing Rock';
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (typeI == true) {
              _root.actiondescription += '\n\n<font color=\'#FF9900\'>Does not disappear when used.</font>';
            }
          }
          if (type == 'Potion') {
            if (subtype == 'Power Buff Potion') {
              _root.actiondescription += '\nType: Power Buff';
              _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
              _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
              _root.actiondescription += '\nEffect:';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Defense: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxHP: <b>+' + Math.floor(150 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxMP: <b>+' + Math.floor(250 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Accuracy: <b>+' + Math.floor(75 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Evasion: <b>+' + Math.floor(75 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n[Will replace current buff]';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
            } else {
              if (subtype == 'Master Buff Potion') {
                _root.actiondescription += '\nType: Master Buff';
                _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                _root.actiondescription += '\nEffect:';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Mastery: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage Taken: <b>-' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>HP Regen: <b>+' + Math.floor(2500 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>MP Regen: <b>+' + Math.floor(1250 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Hit Chance: <b>+' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Dodge Chance: <b>+' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n[Will replace current buff]';
                _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
              } else {
                if (subtype == 'Reward Buff Potion') {
                  _root.actiondescription += '\nType: Reward Buff';
                  _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                  _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                  _root.actiondescription += '\nEffect:';
                  _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                  _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                  _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                  _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                  _root.actiondescription += '\n[Will replace current buff]';
                  _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
                } else {
                  if (subtype == 'Nightmare Potion') {
                    _root.actiondescription += '\nType: ???';
                    _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                    _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                  } else {
                    if (subtype == 'Anti-Curse Potion') {
                      _root.actiondescription += '\nType: Anti-Curse Potion';
                      _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                      _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                    } else {
                      if (subtype == 'Loot Magnet') {
                        _root.actiondescription += '\nType: Loot Magnet';
                        _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                        _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                        _root.actiondescription += '\nEffect:';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Magnetizes most loot drops</font>';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Epic Monster Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                        _root.actiondescription += '\n[Will replace current buff]';
                      } else {
                        if (subtype == 'Monster Magnet') {
                          _root.actiondescription += '\nType: Monster Magnet';
                          _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                          _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                          _root.actiondescription += '\nEffect:';
                          _root.actiondescription += '\n<font color=\'#99FF33\'>Magnetizes monsters</font>';
                          _root.actiondescription += '\n<font color=\'#99FF33\'>Spawn Rate: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                          _root.actiondescription += '\n[Will replace current buff]';
                        } else {
                          if (subtype == 'Air Bubble') {
                            _root.actiondescription += '\nType: Air Bubble';
                            _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                            _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                          } else {
                            if (subtype == 'Elixir of Greatness') {
                              _root.actiondescription += '\nType: Elixir of Greatness';
                              _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                            } else {
                              if (subtype == 'Rebirth Potion') {
                                _root.actiondescription += '\nType: Rebirth Potion';
                              } else {
                                if (subtype == 'Potion of Regrets') {
                                  _root.actiondescription += '\nType: Potion of Regrets';
                                  _root.actiondescription += '\nYou can use Potion of Regrets <font color=\'#0099FF\'><b>' + _root.save.regretRem + '</b> more time(s) this month</font>';
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (type == 'Chip') {
            if (subtype == 'Monster Chip (Rare)') {
              _root.actiondescription += '\nType: Monster Chip';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
              if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
                _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 500 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                    _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 500 kill count for this monster.';
                  } else {
                    if (_root.save.arenaAllyUpgrade[attack] == 15) {
                      _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-1 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 100 kill count for this monster.';
                    } else {
                      if (_root.save.arenaAllyUpgrade[attack] == 10) {
                        _root.actiondescription += '\nYou have fully upgraded this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-1 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 100 kill count for this monster.';
                      } else {
                        _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to upgrade the Invisible Ally for this monster.';
                      }
                    }
                  }
                }
              }
            }
            if (subtype == 'Monster Chip (Epic)') {
              _root.actiondescription += '\nType: Monster Chip';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
              if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
                _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 5,000 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                    _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 5,000 kill count for this monster.';
                  } else {
                    if (_root.save.arenaAllyUpgrade[attack] == 15) {
                      _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-2 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 1,000 kill count for this monster.';
                    } else {
                      if (_root.save.arenaAllyUpgrade[attack] == 10) {
                        _root.actiondescription += '\nYou have fully upgraded this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-2 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 1,000 kill count for this monster.';
                      } else {
                        _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to fully upgrade the Invisible Ally for this monster.';
                      }
                    }
                  }
                }
              }
            }
            if (subtype == 'Monster Chip (Ultra)') {
              _root.actiondescription += '\nType: Monster Chip';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
              if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
                _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 50,000 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                    _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 50,000 kill count for this monster.';
                  } else {
                    if (_root.save.arenaAllyUpgrade[attack] == 15) {
                      _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-3 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 10,000 kill count for this monster.';
                    } else {
                      _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to obtain the ULTRA ALLY for this monster.';
                    }
                  }
                }
              }
            }
            if (subtype == 'Monster Chip (Kongpanion)') {
              _root.actiondescription += '\nType: Monster Chip';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
              if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
                _root.actiondescription += '\nYou do not own this Kongpanion. Use this Monster Chip to obtain the Kongpanion for this monster. Please note that this only applies to the respective Invisible Ally in Anti-Idle: The Game and it will NOT give you an actual Kongpanion that is visible on your Kongregate profile page.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 15) {
                  _root.actiondescription += '\nYou already have this Shiny Kongpanion. This Monster Chip cannot be used.';
                } else {
                  _root.actiondescription += '\nYou already have the non-Shiny version of this Kongpanion. Use this Monster Chip to upgrade it to a Shiny Kongpanion. Please note that this only applies to the respective Invisible Ally in Anti-Idle: The Game and it will NOT give you an actual Shiny Kongpanion that is visible on your Kongregate profile page.';
                }
              }
            }
            if (attack <= 500) {
              _root.actiondescription += '\n\nKill count: <b>' + _root.withComma(_root.save.arenaBestiary[attack]) + '</b>';
            }
          }
          _root.actiondescription += '\n';
          if (type == 'Enhancer') {
            tier = 0;
            if (bonus != '') {
              _root.actiondescription += '\nAdd Bonus: <font color=\'#99FF33\'><b>' + bonus + '</b></font>';
              tier = 1;
            }
            if (ability != '') {
              _root.actiondescription += '\nAdd Bonus: <font color=\'#FFCC33\'><b>' + ability + '</b></font>';
              tier = 1;
            }
            if (moreBonus != '') {
              _root.actiondescription += '\nAdd Bonus: <font color=\'#CC99FF\'><b>' + moreBonus + '</b></font>';
              tier = 1;
            }
            if (bonus != '' || ability != '' || moreBonus != '') {
              _root.actiondescription += '\n[Will replace same color bonuses]';
            }
          } else {
            tier = Math.ceil(reqRank / 10);
            if (type == 'Weapon' && _root.save.arenaSkill[59] > 0) {
              tier += Math.floor(_root.save.arenaSkill[59] / 5);
            }
            baseTier = tier;
            tier += unob;
            if (unob > 0 || bonus != '' || ability != '' || moreBonus != '') {
              if (type == 'Weapon' || type == 'Armor' || type == 'Accessory') {
                _root.actiondescription += '\n<font color=\'#DDFF77\'>--- Bonus Tier: <b>' + tier + '</b></font>';
                if (unob > 0) {
                  _root.actiondescription += ' <font color=\'#BBCC66\'>(' + baseTier + ' + <font color=\'#DDFF77\'>' + unob + '</font>)</font>';
                } else {}
                _root.actiondescription += '<font color=\'#DDFF77\'> ---</font>';
              }
            }
            if (bonus == 'Random') {
              _root.actiondescription += '\n<font color=\'#99FF33\'><b>Random Bonus</b></font>';
            } else {
              if (bonus == 'Reward') {
                _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.25) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
              } else {
                if (bonus == 'EXP') {
                  _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                } else {
                  if (bonus == 'Coin') {
                    _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                  } else {
                    if (bonus == 'Pixel') {
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                    } else {
                      if (bonus == 'Drop Rate') {
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                      } else {
                        if (bonus == 'Spawn Rate') {
                          _root.actiondescription += '\n<font color=\'#99FF33\'>Spawn Rate: <b>+' + Math.ceil(tier * 0.2) + '%</b></font>';
                        } else {
                          if (bonus == 'Rare Monster Rate') {
                            _root.actiondescription += '\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                          } else {
                            if (bonus == 'Epic Monster Rate') {
                              _root.actiondescription += '\n<font color=\'#99FF33\'>Epic Monster Rate: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                            } else {
                              if (bonus == 'Ignore Epic Weapons') {
                                _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Epic [Element] Staff and Light/Dark Glaive loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 50000)) + ' Pixels</b> each</font>';
                              } else {
                                if (bonus == 'Ignore Bonus Rocks') {
                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Bonus Rock loots (except special Bonus Rocks) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                                } else {
                                  if (bonus == 'Ignore Pendants') {
                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Pendant loots (except Immortal Pendant, Collector\'s Pendant and Rank 500 Pendants) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                                  } else {
                                    if (bonus == 'Ignore Finalizers') {
                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Finalizer loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                    } else {
                                      if (bonus == 'Ignore Outfit Items') {
                                        _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore outfit loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                      } else {
                                        if (bonus == 'Fire Element') {
                                          _root.actiondescription += '\n<font color=\'#99FF33\'>Fire Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                        } else {
                                          if (bonus == 'Ice Element') {
                                            _root.actiondescription += '\n<font color=\'#99FF33\'>Ice Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                          } else {
                                            if (bonus == 'Wind Element') {
                                              _root.actiondescription += '\n<font color=\'#99FF33\'>Wind Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                            } else {
                                              if (bonus == 'Earth Element') {
                                                _root.actiondescription += '\n<font color=\'#99FF33\'>Earth Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                              } else {
                                                if (bonus == 'Thunder Element') {
                                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Thunder Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                } else {
                                                  if (bonus == 'Water Element') {
                                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Water Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                  } else {
                                                    if (bonus == 'Light Element') {
                                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Light Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                    } else {
                                                      if (bonus == 'Dark Element') {
                                                        _root.actiondescription += '\n<font color=\'#99FF33\'>Dark Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                      } else {
                                                        if (bonus == 'Auto Buff - Power') {
                                                          _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Power buff when equipped</font>';
                                                        } else {
                                                          if (bonus == 'Auto Buff - Master') {
                                                            _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Master buff when equipped</font>';
                                                          } else {
                                                            if (bonus == 'Auto Buff - Reward') {
                                                              _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Reward buff when equipped</font>';
                                                            } else {
                                                              if (bonus == 'Auto Buff - Enrage') {
                                                                _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Enrage buff when equipped</font>';
                                                              } else {
                                                                if (bonus == 'Auto Buff - Boost') {
                                                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Elemental Boost buff when equipped</font>';
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (ability == 'Random') {
              _root.actiondescription += '\n<font color=\'#FFCC33\'><b>Random Bonus</b></font>';
            } else {
              if (ability == 'Attack') {
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
              } else {
                if (ability == 'Attack Speed') {
                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack Speed: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                } else {
                  if (ability == 'Ignore Defense') {
                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Ignore <b>' + Math.ceil(tier * 1) + '%</b> of monster DEF</font>';
                  } else {
                    if (ability == 'Mastery') {
                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Min Damage: <b>+' + Math.ceil(tier * 1) + '%</b> of Max Damage</font>';
                    } else {
                      if (ability == 'Critical Chance') {
                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                      } else {
                        if (ability == 'Critical Damage') {
                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Damage: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                        } else {
                          if (ability == 'Defense') {
                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Defense: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                          } else {
                            if (ability == 'Damage Taken') {
                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage Taken: <b>-' + Math.ceil(tier * 1) + '%</b></font>';
                            } else {
                              if (ability == 'Reflect') {
                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Reflect Damage: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                              } else {
                                if (ability == 'Accuracy') {
                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Accuracy: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                } else {
                                  if (ability == 'Hit Chance') {
                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Hit Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                  } else {
                                    if (ability == 'Evasion') {
                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Evasion: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                    } else {
                                      if (ability == 'Dodge Chance') {
                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Dodge Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                      } else {
                                        if (ability == 'Poison Chance') {
                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                        } else {
                                          if (ability == 'Weaken Chance') {
                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                          } else {
                                            if (ability == 'Blind Chance') {
                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                            } else {
                                              if (ability == 'Stun Chance') {
                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Stun Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                              } else {
                                                if (ability == 'Silence Chance') {
                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Silence Chance: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                } else {
                                                  if (ability == 'HP') {
                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxHP: <b>+' + Math.ceil(tier * 3) + '%</b></font>';
                                                  } else {
                                                    if (ability == 'MP') {
                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxMP: <b>+' + Math.ceil(tier * 3) + '%</b></font>';
                                                    } else {
                                                      if (ability == 'HP Regen') {
                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>HP Regen: <b>+' + Math.ceil(tier * 100) + '%</b></font>';
                                                      } else {
                                                        if (ability == 'MP Regen') {
                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>MP Regen: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                                                        } else {
                                                          if (ability == 'Rage Depletion') {
                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Depletion: <b>-' + Math.ceil(tier * 1) + '%</b></font>';
                                                          } else {
                                                            if (ability == 'Drain') {
                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Drain Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                            } else {
                                                              if (ability == 'Mana Eater') {
                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>When you kill a monster, MP <b>+' + Math.ceil(tier * 500) + '</b></font>';
                                                              } else {
                                                                if (ability == 'Autosteal') {
                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Autosteal Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                                } else {
                                                                  if (ability == 'Double Hit Chance') {
                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Double Hit Chance: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                  } else {
                                                                    if (ability == 'Rage Attack') {
                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Attack: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                    } else {
                                                                      if (ability == 'Rage Speed') {
                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Speed: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                      } else {
                                                                        if (ability == 'Poison Damage') {
                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Damage: <b>+' + Math.ceil(tier * 25) + '%</b> / sec</font>';
                                                                        } else {
                                                                          if (ability == 'Poison Duration') {
                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                          } else {
                                                                            if (ability == 'Weaken Effect') {
                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Weakened monster ATT/DEF: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                            } else {
                                                                              if (ability == 'Weaken Duration') {
                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                              } else {
                                                                                if (ability == 'Blind Effect') {
                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Blinded monster ACC/EVA: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                } else {
                                                                                  if (ability == 'Blind Duration') {
                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                                  } else {
                                                                                    if (ability == 'Potion Efficiency') {
                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Potion Efficiency: <b>+' + Math.ceil(tier * 10) + '%</b></font>';
                                                                                    } else {
                                                                                      if (ability == 'Boss Damage') {
                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                      } else {
                                                                                        if (ability == 'Magic Resist') {
                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage taken from magic attacks is reduced by <b>' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                                        } else {
                                                                                          if (ability == 'Instant Kill') {
                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 0.5) + '%</b> chance to instantly kill a non-boss monster if its HP is below 50%</font>';
                                                                                          } else {
                                                                                            if (ability == 'Negate Effect') {
                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to negate status effects</font>';
                                                                                            } else {
                                                                                              if (ability == 'Damage') {
                                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                                              } else {
                                                                                                if (ability == 'Non-Boss Damage') {
                                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                                } else {
                                                                                                  if (ability == 'Extra Combo') {
                                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to gain +3 extra combo per attack</font>';
                                                                                                  } else {
                                                                                                    if (ability == 'Magic Reflect') {
                                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Magic Reflect: <b>+' + Math.ceil(tier * 5) + '%</b> of Physical Reflect</font>';
                                                                                                    } else {
                                                                                                      if (ability == 'Nullify Death Penalty') {
                                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'><b>100%</b> chance to nullify death penalty</font>';
                                                                                                      } else {
                                                                                                        if (ability == 'Buff Effect') {
                                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Buff Effect: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                                        } else {
                                                                                                          if (ability == 'All Elements') {
                                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>All Elements: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                                          } else {
                                                                                                            if (ability == 'Max Spirit') {
                                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Max Spirit: <b>+' + Math.ceil(tier * 10) + '</b></font>';
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (moreBonus == 'Random') {
              _root.actiondescription += '\n<font color=\'#CC99FF\'><b>Random Bonus</b></font>';
            } else {
              if (moreBonus == 'Equipment Attack') {
                _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Attack: <b>+' + _root.withComma(Math.ceil(0.1 * tier * tier)) + '</b></font>';
              } else {
                if (moreBonus == 'Equipment Defense') {
                  _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Defense: <b>+' + _root.withComma(Math.ceil(0.15 * tier * tier)) + '</b></font>';
                } else {
                  if (moreBonus == 'Attack Power') {
                    _root.actiondescription += '\n<font color=\'#CC99FF\'>Attack Power: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                  } else {
                    if (moreBonus == 'Defense Power') {
                      _root.actiondescription += '\n<font color=\'#CC99FF\'>Defense Power: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                    } else {
                      if (moreBonus == 'MaxHP') {
                        _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxHP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                      } else {
                        if (moreBonus == 'MaxMP') {
                          _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxMP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                        } else {
                          if (moreBonus == 'Accuracy') {
                            _root.actiondescription += '\n<font color=\'#CC99FF\'>Accuracy: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                          } else {
                            if (moreBonus == 'Evasion') {
                              _root.actiondescription += '\n<font color=\'#CC99FF\'>Evasion: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                            } else {
                              if (moreBonus == 'EXP / Boss Kill') {
                                _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Boss Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +100% of original EXP)</font>';
                              } else {
                                if (moreBonus == 'EXP / Rare Kill') {
                                  _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Rare Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +200% of original EXP)\nEXP / Epic Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +400% of original EXP)</font>';
                                } else {
                                  if (moreBonus == 'EXP / Epic Kill') {
                                    _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Epic Kill: <b>+' + _root.withComma(Math.ceil(10 * tier * tier)) + '</b>\n(Limit: +400% of original EXP)</font>';
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (name.indexOf('Humblebee') != -1) {
              if (maxLevel >= 184 && maxLevel < 284) {
                _root.actiondescription += '\n\n<font color=\'#FFFF00\'>1 more Humblebee Armor Upgrade can be applied.\n</font>';
              } else {
                if (maxLevel >= 84 && maxLevel < 184) {
                  _root.actiondescription += '\n\n<font color=\'#FFFF00\'>2 more Humblebee Armor Upgrades can be applied.\n</font>';
                }
              }
            }
            if (_root.enhancerToUse != 0 && type != 'Enhancer' && _root.save['arena' + xCate] != slot) {
              if (_root.save.inventorySubtype[_root.enhancerToUse] == 'Weapon Bonus Adder' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Armor Bonus Adder' || _root.save.inventorySubtype[_root.enhancerToUse] == 'Accessory Bonus Adder') {
                _root.actiondescription += '\n\n<font color=\'#0099FF\'>New Bonuses:</font>';
                tier = Math.ceil(reqRank / 10);
                tier += unob;
                if (type == 'Weapon' && _root.save.arenaSkill[59] > 0) {
                  tier += Math.floor(_root.save.arenaSkill[59] / 5);
                }
                bonusX = _root.save.inventoryBonus[_root.enhancerToUse];
                abilityX = _root.save.inventoryAbility[_root.enhancerToUse];
                moreBonusX = _root.save.inventoryMoreBonus[_root.enhancerToUse];
                tier = Math.ceil(reqRank / 10);
                tier += unob;
                if (type == 'Weapon' && _root.save.arenaSkill[59] > 0) {
                  tier += Math.floor(_root.save.arenaSkill[59] / 5);
                }
                if (bonusX == 'Random') {
                  _root.actiondescription += '\n<font color=\'#99FF33\'><b>Random Bonus</b></font>';
                } else {
                  if (bonusX == 'Reward') {
                    _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.25) + '%</b></font>';
                    _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                    _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                  } else {
                    if (bonusX == 'EXP') {
                      _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                    } else {
                      if (bonusX == 'Coin') {
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                      } else {
                        if (bonusX == 'Pixel') {
                          _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                        } else {
                          if (bonusX == 'Drop Rate') {
                            _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                          } else {
                            if (bonusX == 'Spawn Rate') {
                              _root.actiondescription += '\n<font color=\'#99FF33\'>Spawn Rate: <b>+' + Math.ceil(tier * 0.2) + '%</b></font>';
                            } else {
                              if (bonusX == 'Rare Monster Rate') {
                                _root.actiondescription += '\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                              } else {
                                if (bonusX == 'Epic Monster Rate') {
                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Epic Monster Rate: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                                } else {
                                  if (bonusX == 'Ignore Epic Weapons') {
                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Epic [Element] Staff and Light/Dark Glaive loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 50000)) + ' Pixels</b> each</font>';
                                  } else {
                                    if (bonusX == 'Ignore Pendants') {
                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Pendant loots (except Immortal Pendant, Collector\'s Pendant and Rank 500 Pendants) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                                    } else {
                                      if (bonusX == 'Ignore Bonus Rocks') {
                                        _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Bonus Rock loots (except Corrupted Bonus Rocks) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                                      } else {
                                        if (bonusX == 'Ignore Finalizers') {
                                          _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Finalizer loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                        } else {
                                          if (bonusX == 'Ignore Outfit Items') {
                                            _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore outfit loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                          } else {
                                            if (bonusX == 'Fire Element') {
                                              _root.actiondescription += '\n<font color=\'#99FF33\'>Fire Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                            } else {
                                              if (bonusX == 'Ice Element') {
                                                _root.actiondescription += '\n<font color=\'#99FF33\'>Ice Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                              } else {
                                                if (bonusX == 'Wind Element') {
                                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Wind Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                } else {
                                                  if (bonusX == 'Earth Element') {
                                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Earth Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                  } else {
                                                    if (bonusX == 'Thunder Element') {
                                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Thunder Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                    } else {
                                                      if (bonusX == 'Water Element') {
                                                        _root.actiondescription += '\n<font color=\'#99FF33\'>Water Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                      } else {
                                                        if (bonusX == 'Light Element') {
                                                          _root.actiondescription += '\n<font color=\'#99FF33\'>Light Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                        } else {
                                                          if (bonusX == 'Dark Element') {
                                                            _root.actiondescription += '\n<font color=\'#99FF33\'>Dark Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                          } else {
                                                            if (bonusX == 'Auto Buff - Power') {
                                                              _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Power buff when equipped</font>';
                                                            } else {
                                                              if (bonusX == 'Auto Buff - Master') {
                                                                _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Master buff when equipped</font>';
                                                              } else {
                                                                if (bonusX == 'Auto Buff - Reward') {
                                                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Reward buff when equipped</font>';
                                                                } else {
                                                                  if (bonusX == 'Auto Buff - Enrage') {
                                                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Enrage buff when equipped</font>';
                                                                  } else {
                                                                    if (bonusX == 'Auto Buff - Boost') {
                                                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Grants permanent Elemental Boost buff when equipped</font>';
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (abilityX == 'Random') {
                  _root.actiondescription += '\n<font color=\'#FFCC33\'><b>Random Bonus</b></font>';
                } else {
                  if (abilityX == 'Attack') {
                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                  } else {
                    if (abilityX == 'Attack Speed') {
                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack Speed: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                    } else {
                      if (abilityX == 'Ignore Defense') {
                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Ignore <b>' + Math.ceil(tier * 1) + '%</b> of monster DEF</font>';
                      } else {
                        if (abilityX == 'Mastery') {
                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Min Damage: <b>+' + Math.ceil(tier * 1) + '%</b> of Max Damage</font>';
                        } else {
                          if (abilityX == 'Critical Chance') {
                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                          } else {
                            if (abilityX == 'Critical Damage') {
                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Damage: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                            } else {
                              if (abilityX == 'Defense') {
                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Defense: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                              } else {
                                if (abilityX == 'Damage Taken') {
                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage Taken: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                } else {
                                  if (abilityX == 'Reflect') {
                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Reflect Damage: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                                  } else {
                                    if (abilityX == 'Accuracy') {
                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Accuracy: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                    } else {
                                      if (abilityX == 'Hit Chance') {
                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Hit Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                      } else {
                                        if (abilityX == 'Evasion') {
                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Evasion: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                        } else {
                                          if (abilityX == 'Dodge Chance') {
                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Dodge Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                          } else {
                                            if (abilityX == 'Poison Chance') {
                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                            } else {
                                              if (abilityX == 'Weaken Chance') {
                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                              } else {
                                                if (abilityX == 'Blind Chance') {
                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                } else {
                                                  if (abilityX == 'Stun Chance') {
                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Stun Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                  } else {
                                                    if (abilityX == 'Silence Chance') {
                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Silence Chance: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                    } else {
                                                      if (abilityX == 'HP') {
                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxHP: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                      } else {
                                                        if (abilityX == 'MP') {
                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxMP: <b>+' + Math.ceil(tier * 3) + '%</b></font>';
                                                        } else {
                                                          if (abilityX == 'HP Regen') {
                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>HP Regen: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                                                          } else {
                                                            if (abilityX == 'MP Regen') {
                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>MP Regen: <b>+' + Math.ceil(tier * 25) + '%</b></font>';
                                                            } else {
                                                              if (abilityX == 'Rage Depletion') {
                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Depletion: <b>-' + Math.ceil(tier * 1) + '%</b></font>';
                                                              } else {
                                                                if (abilityX == 'Drain') {
                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Drain Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                                } else {
                                                                  if (abilityX == 'Mana Eater') {
                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>When you kill a monster, MP <b>+' + Math.ceil(tier * 150) + '</b></font>';
                                                                  } else {
                                                                    if (abilityX == 'Autosteal') {
                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Autosteal Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                                    } else {
                                                                      if (abilityX == 'Double Hit Chance') {
                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Double Hit Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                                      } else {
                                                                        if (abilityX == 'Rage Attack') {
                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Attack: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                        } else {
                                                                          if (abilityX == 'Rage Speed') {
                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Speed: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                          } else {
                                                                            if (abilityX == 'Poison Damage') {
                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Damage: <b>+' + Math.ceil(tier * 25) + '%</b> / sec</font>';
                                                                            } else {
                                                                              if (abilityX == 'Poison Duration') {
                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                              } else {
                                                                                if (abilityX == 'Weaken Effect') {
                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Weakened monster ATT/DEF: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                } else {
                                                                                  if (abilityX == 'Weaken Duration') {
                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                                  } else {
                                                                                    if (abilityX == 'Blind Effect') {
                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Blinded monster ACC/EVA: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                    } else {
                                                                                      if (abilityX == 'Blind Duration') {
                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                                      } else {
                                                                                        if (abilityX == 'Potion Efficiency') {
                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Potion Efficiency: <b>+' + Math.ceil(tier * 5) + '%</b></font>';
                                                                                        } else {
                                                                                          if (abilityX == 'Boss Damage') {
                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                          } else {
                                                                                            if (abilityX == 'Magic Resist') {
                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage taken from magic attacks is reduced by <b>' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                            } else {
                                                                                              if (abilityX == 'Instant Kill') {
                                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 0.5) + '%</b> chance to instantly kill a non-boss monster if its HP is below 50%</font>';
                                                                                              } else {
                                                                                                if (abilityX == 'Negate Effect') {
                                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to negate status effects</font>';
                                                                                                } else {
                                                                                                  if (abilityX == 'Damage') {
                                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                                  } else {
                                                                                                    if (abilityX == 'Non-Boss Damage') {
                                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                                    } else {
                                                                                                      if (abilityX == 'Extra Combo') {
                                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to gain +1 extra combo per attack</font>';
                                                                                                      } else {
                                                                                                        if (abilityX == 'Magic Reflect') {
                                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Magic Reflect: <b>+' + Math.ceil(tier * 5) + '%</b> of Physical Reflect</font>';
                                                                                                        } else {
                                                                                                          if (abilityX == 'Nullify Death Penalty') {
                                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'><b>100%</b> chance to nullify death penalty</font>';
                                                                                                          } else {
                                                                                                            if (abilityX == 'Buff Effect') {
                                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Buff Effect: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                                            } else {
                                                                                                              if (abilityX == 'All Elements') {
                                                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>All Elements: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                                              } else {
                                                                                                                if (abilityX == 'Max Spirit') {
                                                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Max Spirit: <b>+' + Math.ceil(tier * 10) + '</b></font>';
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (moreBonusX == 'Random') {
                  _root.actiondescription += '\n<font color=\'#CC99FF\'><b>Random Bonus</b></font>';
                } else {
                  if (moreBonusX == 'Equipment Attack') {
                    _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Attack: <b>+' + _root.withComma(Math.ceil(0.1 * tier * tier)) + '</b></font>';
                  } else {
                    if (moreBonusX == 'Equipment Defense') {
                      _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Defense: <b>+' + _root.withComma(Math.ceil(0.15 * tier * tier)) + '</b></font>';
                    } else {
                      if (moreBonusX == 'Attack Power') {
                        _root.actiondescription += '\n<font color=\'#CC99FF\'>Attack Power: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                      } else {
                        if (moreBonusX == 'Defense Power') {
                          _root.actiondescription += '\n<font color=\'#CC99FF\'>Defense Power: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                        } else {
                          if (moreBonusX == 'MaxHP') {
                            _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxHP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                          } else {
                            if (moreBonusX == 'MaxMP') {
                              _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxMP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                            } else {
                              if (moreBonusX == 'Accuracy') {
                                _root.actiondescription += '\n<font color=\'#CC99FF\'>Accuracy: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                              } else {
                                if (moreBonusX == 'Evasion') {
                                  _root.actiondescription += '\n<font color=\'#CC99FF\'>Evasion: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                                } else {
                                  if (moreBonusX == 'EXP / Boss Kill') {
                                    _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Boss Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b></font>';
                                  } else {
                                    if (moreBonusX == 'EXP / Rare Kill') {
                                      _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Rare Kill: <b>+' + _root.withComma(Math.ceil(1 * tier * tier)) + '</b></font>';
                                    } else {
                                      if (moreBonusX == 'EXP / Epic Kill') {
                                        _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Epic Kill: <b>+' + _root.withComma(Math.ceil(10 * tier * tier)) + '</b></font>';
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _root.actiondescription += '\n[Will replace same color bonuses]';
              }
            }
          }
          if (name == 'Dominator Gem') {
            erBonus = Math.floor(Math.min(_root.save.arenaSpookyScore / 1000, 30));
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>If you have at least 1 Dominator Gem in your inventory, you will receive extra Coins based on your Spooky Crypt highscore.\nBest streak: ' + _root.withComma(_root.save.arenaSpookyScore) + '\nCoin: <b>+' + erBonus + '%</b></font>';
          } else {
            if (name == 'Mega Triangle Gem') {
              erBonus = Math.floor(Math.min(_root.save.arenaTriangleScore / 100, 30));
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>If you have at least 1 Mega Triangle Gem in your inventory, you will receive extra EXP based on your Triangle Hideout highscore.\nBest streak: ' + _root.withComma(_root.save.arenaTriangleScore) + '\nEXP: <b>+' + erBonus + '%</b></font>';
            } else {
              if (desc != undefined && desc != '') {
                _root.actiondescription += '\n\n<font color=\'#CCCCCC\'>' + desc + '</font>';
              }
            }
          }
          if (sell > 0) {
            _root.actiondescription += '\n\nSell for: <font color=\'#FFFF00\'>' + _root.withComma(sell) + '</font> Pixels';
          }
          if (guard == true) {
            _root.actiondescription += '\n<font color=\'#99FF00\'><b>Protected Item</b></font>';
          } else {
            if (Key.isDown(16)) {
              if (_root.save['arena' + xCate] == slot) {
                _root.actiondescription += '\n<font color=\'#FF6600\'>Cannot sell equipped items!</font>';
              }
              if ((bonusPow >= 706 || sell >= 25000000 || typeS == true || typeI == true) && timeLeft > 0 || name == 'GIGA PENDANT' || name == 'GIGA EARRINGS') {
                _root.actiondescription += '\n<font color=\'#FF6600\'>Shift + K + Click to sell!</font>';
              }
            } else {
              if (Key.isDown(17)) {
                if (_root.save['arena' + xCate] == slot) {
                  _root.actiondescription += '\n<font color=\'#FF6600\'>Cannot move equipped items!</font>';
                }
              } else {
                if (_root.enhancerToUse != 0 && type != 'Enhancer' && _root.save['arena' + xCate] == slot) {
                  _root.actiondescription += '\n<font color=\'#FF6600\'>Cannot enhance equipped items!</font>';
                }
              }
            }
          }
          _root.actiondescription += '</font>';
          if (slot >= 1401) {
            _root.actiondescription += '\n\n<font color=\'#FFCC99\'>Collection Points: <b>+' + _root.museumValue[slot] + '</b></font>';
          } else {
            if (_root.save.arenaLevel >= 50) {
              if (desc == 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!') {
              } else {
                if (desc == 'Thank you for your donation and your continued support!') {
                } else {
                  tmpName = name;
                  if (tmpName.indexOf('Dragon Slayer Hat') != -1) {
                    tmpName = 'Dragon Slayer Hat';
                  }
                  if (tmpName.indexOf('Dragon Slayer Shirt') != -1) {
                    tmpName = 'Dragon Slayer Shirt';
                  }
                  if (tmpName.indexOf('Dragon Slayer Gloves') != -1) {
                    tmpName = 'Dragon Slayer Gloves';
                  }
                  if (tmpName.indexOf('Dragon Slayer Pants') != -1) {
                    tmpName = 'Dragon Slayer Pants';
                  }
                  if (tmpName.indexOf('Dragon Slayer Shoes') != -1) {
                    tmpName = 'Dragon Slayer Shoes';
                  }
                  if (tmpName.indexOf('Demon Slayer Hat') != -1) {
                    tmpName = 'Demon Slayer Hat';
                  }
                  if (tmpName.indexOf('Demon Slayer Shirt') != -1) {
                    tmpName = 'Demon Slayer Shirt';
                  }
                  if (tmpName.indexOf('Demon Slayer Gloves') != -1) {
                    tmpName = 'Demon Slayer Gloves';
                  }
                  if (tmpName.indexOf('Demon Slayer Pants') != -1) {
                    tmpName = 'Demon Slayer Pants';
                  }
                  if (tmpName.indexOf('Demon Slayer Shoes') != -1) {
                    tmpName = 'Demon Slayer Shoes';
                  }
                  if (tmpName.indexOf('[Event] [I] Mystery Enhancer Identifier') != -1) {
                    tmpName = '[Event] Mystery Enhancer Identifier';
                  }
                  if (tmpName.indexOf('Armor Cleansing Rock') != -1) {
                    tmpName = 'Armor Cleansing Rock';
                  }
                  tmpSlot = 1400;
                  i = 1401;
                  while (i <= 3000) {
                    if (_root.museumItem[i] == tmpName) {
                      tmpSlot = i;
                      if (_root.save.inventoryExist[tmpSlot] != 1) {
                        i = 3001;
                      }
                    }
                    ++i;
                  }
                  if (tmpSlot != 1400) {
                    if (_root.save.inventoryExist[tmpSlot] == 1) {
                    } else {
                      _root.actiondescription += '\n\n<font color=\'#FFCC99\'>Add this item to the Museum to gain <b>+' + _root.museumValue[tmpSlot] + '</b> CP!</font>';
                    }
                  }
                }
              }
            }
          }
          _root.actiondescription2 = '';
          if (setID != 0) {
            _root.actiondescription2 += '<font color=\'#CC9900\'><b>' + _root.setArray[setID].setNameD + '</b></font>\n';
            _root.actiondescription2 += _root.displaySetItems(setID);
          }
        }
      }

      if (!isNaN(iniSlot) && iniSlot < 60) {
        slot = iniSlot + _root.invTab * 100;
      }
      cd = 0;
      weaponRange = 0;
      checkStat();
      checkDelay = 0;
      onEnterFrame = function () {
        cd -= 1;
        if (_root.toCheck == true) {
          refr();
        }
      };

      onRollOver = function () {
        refr();
        showText();
      };

      onRollOut = function () {
        _root.actiondescription = '';
        _root.actiondescription2 = '';
      };

      onDragOver = function () {
        refr();
        showText();
      };

      onDragOut = function () {
        _root.actiondescription = '';
        _root.actiondescription2 = '';
      };

      onRelease = function () {
        if (cd <= 0 && slot != 1331) {
          _root.house.arena.checkStat();
          storageSlot = false;
          if (slot >= 301 && slot <= 400) {
            storageSlot = true;
          }
          if (slot >= 1101 && slot <= 1200) {
            storageSlot = true;
          }
          if (slot > 1300) {
            storageSlot = true;
          }
          if (Key.isDown(16) && exist == 1) {
            if (_root.save['arena' + xCate] != slot && guard != true) {
              if (bonusPow <= 705 && sell < 25000000 && typeS != true && typeI != true || Key.isDown(75) || timeLeft <= 0 && name != 'GIGA PENDANT' && name != 'GIGA EARRINGS') {
                _root.sellArenaItem(slot);
                if (slot >= 1401) {
                  _root.save.collectionPoint -= _root.museumValue[slot];
                }
                _root.enhancerToUse = 0;
                _parent.enhButton.gotoAndStop(2);
              }
            }
          } else {
            if (storageSlot == false) {
              if (Key.isDown(17) && exist == 1 || _root.arenaSwap1 != 0) {
                _root.enhancerToUse = 0;
                _parent.enhButton.gotoAndStop(2);
                if (_root.arenaSwap1 != 0 && _root.save['arena' + xCate] != slot) {
                  _root.swapArenaItem(_root.arenaSwap1, slot);
                } else {
                  if (_root.save['arena' + xCate] != slot) {
                    _root.arenaSwap1 = slot;
                  } else {
                    _root.arenaSwap1 = 0;
                  }
                }
              } else {
                if (exist == 1) {
                  if (_root.enhancerToUse == slot) {
                    _root.enhancerToUse = 0;
                    _parent.enhButton.gotoAndStop(2);
                  } else {
                    if (_root.enhancerToUse != 0 && _root.save['arena' + xCate] != slot) {
                      _root.enhanceArenaItem(_root.enhancerToUse, slot);
                      _parent.enhButton.gotoAndStop(2);
                    } else {
                      if (_root.enhancerToUse != 0 && _root.save['arena' + xCate] == slot) {
                        _root.enhancerToUse = 0;
                        _parent.enhButton.gotoAndStop(2);
                      } else {
                        if (timeLeft > 0) {
                          if (type == 'Chip') {
                            if (!isNaN(_root.save.arenaAllyEXP[attack]) && _root.save.arenaAllyEXP[attack] >= 10000 || subtype == 'Monster Chip (Kongpanion)') {
                              if (_root.enemyList[attack].allyPassive3 == '' && _root.save.arenaAllyUpgrade[attack] == 10) {
                                _root.save.arenaAllyUpgrade[attack] = 15;
                              }
                              if (subtype == 'Monster Chip (Rare)') {
                                if (_root.save.arenaAllyUpgrade[attack] < 10) {
                                  _root.save.arenaAllyUpgrade[attack] += 1;
                                  _root.showPopup('Ally Upgraded', 'The Invisible Ally [#' + attack + '] ' + _root.enemyList[attack].name + ' has been successfully upgraded to +' + _root.save.arenaAllyUpgrade[attack] + '.');
                                } else {
                                  if (_root.enemyList[attack].allyPassive3 != '' && _root.save.arenaZone == 7 && _root.save.arenaHardcore == true && _root.apocalypse == true && _root.house.arena.enemy.enemyID == 0) {
                                    _root.labEnemy = attack + 1000;
                                    _root.house.arena.enemy.approach = 0.1;
                                    _root.deleteArenaItem(slot);
                                    _root.actiondescription = '';
                                    _root.actiondescription2 = '';
                                    _root.arenaCombo = 0;
                                    _parent._parent.gotoAndStop(1);
                                  } else {
                                    if (_root.enemyList[attack].allyPassive3 == '') {
                                      _root.save.arenaBestiary[attack] += 500;
                                      _root.save.arenaBestiaryExtra[attack] += 500;
                                      if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                        _root.save.arenaBestiaryExtra[attack] = 500;
                                      }
                                      _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 500.');
                                    } else {
                                      _root.save.arenaBestiary[attack] += 100;
                                      _root.save.arenaBestiaryExtra[attack] += 100;
                                      if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                        _root.save.arenaBestiaryExtra[attack] = 100;
                                      }
                                      _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 100.');
                                    }
                                  }
                                }
                              } else {
                                if (subtype == 'Monster Chip (Epic)') {
                                  if (_root.save.arenaAllyUpgrade[attack] < 10) {
                                    _root.save.arenaAllyUpgrade[attack] = 10;
                                    _root.showPopup('Ally Upgraded', 'The Invisible Ally [#' + attack + '] ' + _root.enemyList[attack].name + ' has been successfully upgraded to +10.');
                                  } else {
                                    if (_root.enemyList[attack].allyPassive3 != '' && _root.save.arenaZone == 7 && _root.save.arenaHardcore == true && _root.apocalypse == true && _root.house.arena.enemy.enemyID == 0) {
                                      _root.labEnemy = attack + 2000;
                                      _root.house.arena.enemy.approach = 0.1;
                                      _root.deleteArenaItem(slot);
                                      _root.actiondescription = '';
                                      _root.actiondescription2 = '';
                                      _parent._parent.gotoAndStop(1);
                                    } else {
                                      if (_root.enemyList[attack].allyPassive3 == '') {
                                        _root.save.arenaBestiary[attack] += 5000;
                                        _root.save.arenaBestiaryExtra[attack] += 5000;
                                        if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                          _root.save.arenaBestiaryExtra[attack] = 5000;
                                        }
                                        _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 5,000.');
                                      } else {
                                        _root.save.arenaBestiary[attack] += 1000;
                                        _root.save.arenaBestiaryExtra[attack] += 1000;
                                        if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                          _root.save.arenaBestiaryExtra[attack] = 1000;
                                        }
                                        _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 1,000.');
                                      }
                                    }
                                  }
                                } else {
                                  if (subtype == 'Monster Chip (Ultra)') {
                                    if (_root.save.arenaAllyUpgrade[attack] < 15) {
                                      _root.save.arenaAllyUpgrade[attack] = 15;
                                      _root.showPopup('Ally Upgraded', 'The Invisible Ally [#' + attack + '] ' + _root.enemyList[attack].name + ' is now an ULTRA ALLY!!');
                                    } else {
                                      if (_root.enemyList[attack].allyPassive3 != '' && _root.save.arenaZone == 7 && _root.save.arenaHardcore == true && _root.apocalypse == true && _root.house.arena.enemy.enemyID == 0) {
                                        _root.labEnemy = attack + 3000;
                                        _root.house.arena.enemy.approach = 0.1;
                                        _root.deleteArenaItem(slot);
                                        _root.actiondescription = '';
                                        _root.actiondescription2 = '';
                                        _parent._parent.gotoAndStop(1);
                                      } else {
                                        if (_root.enemyList[attack].allyPassive3 == '') {
                                          _root.save.arenaBestiary[attack] += 50000;
                                          _root.save.arenaBestiaryExtra[attack] += 50000;
                                          if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                            _root.save.arenaBestiaryExtra[attack] = 50000;
                                          }
                                          _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 50,000.');
                                        } else {
                                          _root.save.arenaBestiary[attack] += 10000;
                                          _root.save.arenaBestiaryExtra[attack] += 10000;
                                          if (isNaN(_root.save.arenaBestiaryExtra[attack])) {
                                            _root.save.arenaBestiaryExtra[attack] = 10000;
                                          }
                                          _root.showPopup('Kill Count Boosted', 'The kill count of [#' + attack + '] ' + _root.enemyList[attack].name + ' has been increased by 10,000.');
                                        }
                                      }
                                    }
                                  } else {
                                    if (subtype == 'Monster Chip (Kongpanion)') {
                                      if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
                                        _root.obtainAlly(attack);
                                        _root.save.arenaAllyEXP[attack] = 10000;
                                        _root.showPopup('Ally Tamed', 'The Invisible Ally [#' + attack + '] ' + _root.enemyList[attack].name + ' is now available for use! Use another Chip to upgrade it to a Shiny Kongpanion!');
                                      } else {
                                        if (_root.save.arenaAllyUpgrade[attack] < 15) {
                                          _root.save.arenaAllyUpgrade[attack] = 15;
                                          _root.showPopup('Ally Upgraded', 'The Invisible Ally [#' + attack + '] ' + _root.enemyList[attack].name + ' is now a Shiny Kongpanion!!');
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _root.deleteArenaItem(slot);
                              _root.actiondescription = '';
                              _root.actiondescription2 = '';
                            } else {
                              _root.showPopup('Error', 'You must master the Invisible Ally before using this Monster Chip.');
                              _root.actiondescription = '';
                              _root.actiondescription2 = '';
                            }
                          } else {
                            if (type == 'Potion') {
                              if (subtype == 'Power Buff Potion') {
                                if (_root.save.arenaBuffType != 1 || _root.save.arenaBuffDuration < attack - 3) {
                                  _root.save.arenaBuffType = 1;
                                  _root.save.arenaBuffDuration = attack;
                                  _root.save.inventoryDefense[slot] -= 1;
                                  if (_root.save.inventoryDefense[slot] <= 0) {
                                    _root.deleteArenaItem(slot);
                                    _root.actiondescription = '';
                                    _root.actiondescription2 = '';
                                  }
                                }
                              } else {
                                if (subtype == 'Master Buff Potion') {
                                  if (_root.save.arenaBuffType != 2 || _root.save.arenaBuffDuration < attack - 3) {
                                    _root.save.arenaBuffType = 2;
                                    _root.save.arenaBuffDuration = attack;
                                    _root.save.inventoryDefense[slot] -= 1;
                                    if (_root.save.inventoryDefense[slot] <= 0) {
                                      _root.deleteArenaItem(slot);
                                      _root.actiondescription = '';
                                      _root.actiondescription2 = '';
                                    }
                                  }
                                } else {
                                  if (subtype == 'Reward Buff Potion') {
                                    if (_root.save.arenaBuffType != 3 || _root.save.arenaBuffDuration < attack - 3) {
                                      _root.save.arenaBuffType = 3;
                                      _root.save.arenaBuffDuration = attack;
                                      _root.save.inventoryDefense[slot] -= 1;
                                      if (_root.save.inventoryDefense[slot] <= 0) {
                                        _root.deleteArenaItem(slot);
                                        _root.actiondescription = '';
                                        _root.actiondescription2 = '';
                                      }
                                    }
                                  } else {
                                    if (subtype == 'Nightmare Potion') {
                                      if (_root.save.arenaBuffType != 4 || _root.save.arenaBuffDuration < attack - 3) {
                                        _root.save.arenaBuffType = 4;
                                        _root.save.arenaBuffDuration = attack;
                                        _root.save.inventoryDefense[slot] -= 1;
                                        if (_root.save.inventoryDefense[slot] <= 0) {
                                          _root.deleteArenaItem(slot);
                                          _root.actiondescription = '';
                                          _root.actiondescription2 = '';
                                        }
                                      }
                                    } else {
                                      if (subtype == 'Anti-Curse Potion') {
                                        if (_root.save.arenaBuffType != 8 || _root.save.arenaBuffDuration < attack - 3) {
                                          _root.save.arenaBuffType = 8;
                                          _root.save.arenaBuffDuration = attack;
                                          _root.save.inventoryDefense[slot] -= 1;
                                          if (_root.save.inventoryDefense[slot] <= 0) {
                                            _root.deleteArenaItem(slot);
                                            _root.actiondescription = '';
                                            _root.actiondescription2 = '';
                                          }
                                        }
                                      } else {
                                        if (subtype == 'Loot Magnet') {
                                          if (_root.save.arenaBuffType != 9 || _root.save.arenaBuffDuration < attack - 3) {
                                            _root.save.arenaBuffType = 9;
                                            _root.save.arenaBuffDuration = attack;
                                            _root.save.inventoryDefense[slot] -= 1;
                                            if (_root.save.inventoryDefense[slot] <= 0) {
                                              _root.deleteArenaItem(slot);
                                              _root.actiondescription = '';
                                              _root.actiondescription2 = '';
                                            }
                                          }
                                        } else {
                                          if (subtype == 'Monster Magnet') {
                                            if (_root.save.arenaBuffType != 10 || _root.save.arenaBuffDuration < attack - 3) {
                                              _root.save.arenaBuffType = 10;
                                              _root.save.arenaBuffDuration = attack;
                                              _root.save.inventoryDefense[slot] -= 1;
                                              if (_root.save.inventoryDefense[slot] <= 0) {
                                                _root.deleteArenaItem(slot);
                                                _root.actiondescription = '';
                                                _root.actiondescription2 = '';
                                              }
                                            }
                                          } else {
                                            if (subtype == 'Air Bubble') {
                                              if (_root.save.arenaBuffType != 11 || _root.save.arenaBuffDuration < attack - 3) {
                                                _root.save.arenaBuffType = 11;
                                                _root.save.arenaBuffDuration = attack;
                                                _root.save.inventoryDefense[slot] -= 1;
                                                if (_root.save.inventoryDefense[slot] <= 0) {
                                                  _root.deleteArenaItem(slot);
                                                  _root.actiondescription = '';
                                                  _root.actiondescription2 = '';
                                                }
                                              }
                                            } else {
                                              if (subtype == 'Elixir of Greatness') {
                                                if (_root.save.arenaBuffType != 12 || _root.save.arenaBuffDuration < attack - 3) {
                                                  _root.save.arenaBuffType = 12;
                                                  _root.save.arenaBuffDuration = attack;
                                                }
                                              } else {
                                                if (subtype == 'Elixir of Greatness') {
                                                  if (_root.save.arenaBuffType != 12 || _root.save.arenaBuffDuration < attack - 3) {
                                                    _root.save.arenaBuffType = 12;
                                                    _root.save.arenaBuffDuration = attack;
                                                    _root.save.inventoryDefense[slot] -= 1;
                                                    if (_root.save.inventoryDefense[slot] <= 0) {
                                                      _root.deleteArenaItem(slot);
                                                      _root.actiondescription = '';
                                                      _root.actiondescription2 = '';
                                                    }
                                                  }
                                                } else {
                                                  if (subtype == 'Rebirth Potion') {
                                                    if (_root.save.arenaBuffType != 13 || _root.save.arenaBuffDuration < attack - 3) {
                                                      if (_root.save.arenaLevel >= 500 && _root.save.arenaZone == 0) {
                                                        _root.house.arena.travel(79);
                                                        _root.save.arenaBuffType = 13;
                                                        _root.save.arenaBuffDuration = attack;
                                                        _root.save.inventoryDefense[slot] -= 1;
                                                        if (_root.save.inventoryDefense[slot] <= 0) {
                                                          _root.deleteArenaItem(slot);
                                                          _root.actiondescription = '';
                                                          _root.actiondescription2 = '';
                                                        }
                                                      }
                                                    }
                                                  } else {
                                                    if (subtype == 'Potion of Regrets') {
                                                      if (_root.save.bannedB >= 1 && _root.save.regretRem > 0) {
                                                        _root.save.regretRem -= 1;
                                                        _root.save.arenaExp += 10000000000.0;
                                                        _root.save.robaconExp += 10000000000.0;
                                                        _root.save.inventoryDefense[slot] -= 1;
                                                        if (_root.save.inventoryDefense[slot] <= 0) {
                                                          _root.deleteArenaItem(slot);
                                                          _root.actiondescription = '';
                                                          _root.actiondescription2 = '';
                                                        }
                                                      } else {
                                                        _root.showPopup('Sorry', 'You do not meet the requirements to use Potion of Regrets.');
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } else {
                              if (type == 'Enhancer' && timeLeft > 0) {
                                _root.enhancerToUse = slot;
                                _parent.enhButton.gotoAndStop(1);
                                if (subtype.indexOf('Weapon') != -1) {
                                  _root.invTab = 0;
                                } else {
                                  if (subtype.indexOf('Armor') != -1) {
                                    _root.invTab = 1;
                                  } else {
                                    if (subtype.indexOf('Accessory') != -1) {
                                      _root.invTab = 5;
                                    } else {
                                      if (subtype.indexOf('Enhancer') != -1) {
                                        _root.invTab = 2;
                                      }
                                    }
                                  }
                                }
                              } else {
                                if (_root.save.arenaLevel >= reqRank && exist == 1 && timeLeft > 0) {
                                  if (_root.arenaDelay <= 0 || _root.house.arena._currentframe != 1) {
                                    if (_root.save['arena' + xCate] != slot) {
                                      if (_root.house.arena.enemy.enemyID == 331) {
                                        _root.showPopup('Notice', 'You cannot change equipment when battling The Ascendant.');
                                      } else {
                                        if (name == 'Worst Moon Gem' && _root.areaSafe != true && _root.house._currentframe == 7 && _root.house.arena._currentframe == 1) {
                                          _root.showPopup('Notice', 'This item can only be equipped in safe zones.');
                                        } else {
                                          if (name == 'Worst Moon Gem' && _root.house.arena.enemy.enemyID != 0) {
                                            _root.showPopup('Notice', 'This item cannot be equipped during combat.');
                                          } else {
                                            if (xCate == 'Trinket' && _root.save.inventoryName[_root.save.arenaTrinket] == 'Worst Moon Gem' && _root.areaSafe != true && _root.house._currentframe == 7 && _root.house.arena._currentframe == 1) {
                                              _root.showPopup('Notice', 'You must enter a safe zone in order to unequip Worst Moon Gem.');
                                            } else {
                                              if (xCate == 'Trinket' && _root.save.inventoryName[_root.save.arenaTrinket] == 'Worst Moon Gem' && _root.house.arena.enemy.enemyID != 0) {
                                                _root.showPopup('Notice', 'You must finish the current battle in order to unequip Worst Moon Gem.');
                                              } else {
                                                if (name == 'Gem of Constancy' || _root.save.inventoryName[_root.save.arenaTrinket] != 'Gem of Constancy') {
                                                  _root.arenaStun += 0.5;
                                                  _root.save['arena' + xCate] = slot;
                                                  if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Constancy') {
                                                    _root.save.inventoryLevel[_root.save.arenaTrinket] = 1;
                                                    _root.save.inventoryExp[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryAttack[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryDefense[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryCrit[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryDexterity[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryHealth[_root.save.arenaTrinket] = 0;
                                                    _root.save.inventoryBonusPow[_root.save.arenaTrinket] = 1;
                                                    _root.save.inventoryUnob[_root.save.arenaTrinket] = 10;
                                                    _root.save.inventoryFrame[_root.save.arenaTrinket] = 7;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    } else {
                                      if (_root.house.arena.enemy.enemyID == 331) {
                                        _root.showPopup('Notice', 'You cannot change equipment when battling The Ascendant.');
                                      } else {
                                        if (name == 'Worst Moon Gem' && _root.areaSafe != true) {
                                          _root.showPopup('Notice', 'This item can only be unequipped in safe zones.');
                                        } else {
                                          if (name == 'Gem of Constancy' || _root.save.inventoryName[_root.save.arenaTrinket] != 'Gem of Constancy') {
                                            if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Constancy') {
                                              _root.save.inventoryLevel[_root.save.arenaTrinket] = 1;
                                              _root.save.inventoryExp[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryAttack[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryDefense[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryCrit[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryDexterity[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryHealth[_root.save.arenaTrinket] = 0;
                                              _root.save.inventoryBonusPow[_root.save.arenaTrinket] = 1;
                                              _root.save.inventoryUnob[_root.save.arenaTrinket] = 10;
                                              _root.save.inventoryFrame[_root.save.arenaTrinket] = 7;
                                            }
                                            _root.save['arena' + xCate] = 0;
                                          }
                                        }
                                      }
                                    }
                                  } else {
                                    _root.dispNews(66, 'You cannot equip/unequip items when attacking.');
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              name = _root.save.inventoryName[slot];
              if (_root.arenaSwap1 != 0 && exist != 1 && slot < 1401) {
                _root.swapArenaItem(_root.arenaSwap1, slot);
              } else {
                if (exist == 1) {
                  if (type == 'Weapon' && _root.emptyWeaponSlot >= 1) {
                    _root.getArenaWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry - _root.systemtimenow, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard);
                    _root.deleteArenaItem(slot);
                  } else {
                    if (type == 'Armor' && _root.emptyArmorSlot >= 1) {
                      _root.getArenaArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry - _root.systemtimenow, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, guard);
                      _root.deleteArenaItem(slot);
                    } else {
                      if (type == 'Accessory' && _root.emptyAccessorySlot >= 1) {
                        _root.getArenaAccessory(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, level, exp, enhance, bonusPow, bonus, ability, moreBonus, sell, expiry - _root.systemtimenow, noBonus, noLife, noUnique, spirit, unob, name, desc, guard);
                        _root.deleteArenaItem(slot);
                      } else {
                        if (type == 'Enhancer' && _root.emptyEnhancerSlot >= 1) {
                          _root.getArenaEnhancer(subtype, frame, attack, speed, defense, bonus, ability, moreBonus, enhance, bonusPow, sell, expiry - _root.systemtimenow, name, desc, guard);
                          _root.deleteArenaItem(slot);
                        } else {
                          if (type == 'Potion' && _root.emptyPotionSlot >= 1) {
                            _root.getArenaPotion(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry - _root.systemtimenow, name, desc, guard);
                            _root.deleteArenaItem(slot);
                          } else {
                            if (type == 'Outfit' && _root.emptyOutfitSlot >= 1) {
                              _root.getArenaOutfit(reqRank, subtype, frame, bonusPow, sell, name, desc, guard);
                              _root.deleteArenaItem(slot);
                            } else {
                              if (type == 'Chip' && _root.emptyChipSlot >= 1) {
                                _root.getArenaChip(subtype, frame, attack, defense, enhance, bonusPow, sell, expiry - _root.systemtimenow, name, desc, guard);
                                _root.deleteArenaItem(slot);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (slot >= 1401) {
                    _root.save.collectionPoint -= _root.museumValue[slot];
                  }
                  _root.actiondescription = '';
                  _root.actiondescription2 = '';
                } else {
                  if (slot == 400 && exist != 1) {
                    if (_root.save.vegetarianMode == true) {
                      _root.house.arena.popScreen.gotoAndStop(2);
                      _root.showPopup('Give Robroccoli a weapon', 'Ctrl + Click a weapon in your inventory, then click this slot to give the weapon to Robroccoli. The weapon\'s Rank requirement cannot be higher than Robroccoli\'s Rank. You can take the weapon back later.');
                    } else {
                      _root.house.arena.popScreen.gotoAndStop(2);
                      _root.showPopup('Give Robacon a weapon', 'Ctrl + Click a weapon in your inventory, then click this slot to give the weapon to Robacon. The weapon\'s Rank requirement cannot be higher than Robacon\'s Rank. You can take the weapon back later.');
                    }
                  } else {
                    _root.showPopup('Storage', 'Ctrl + Click an item in your inventory, then click this slot to move that item here.');
                    _root.house.arena.popScreen.gotoAndStop(2);
                  }
                }
              }
            }
          }
          _root.toCheck = true;
          _root.house.arena.checkStat();
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.house.arena.wmDisp.checkFrame();
          showText();
        }
        cd = 2;
      };

    }

    instance itemIcon of movieClip 4827  {

      onClipEvent (load) {
        function checkFrame() {
          if (_parent.exist != 1) {
            gotoAndStop(1);
          } else {
            if (_parent.type == 'Weapon') {
              gotoAndStop(2);
            } else {
              if (_parent.subtype == 'Hat') {
                gotoAndStop(3);
              } else {
                if (_parent.subtype == 'Shirt') {
                  gotoAndStop(4);
                } else {
                  if (_parent.subtype == 'Gloves') {
                    gotoAndStop(5);
                  } else {
                    if (_parent.subtype == 'Pants') {
                      gotoAndStop(6);
                    } else {
                      if (_parent.subtype == 'Shoes') {
                        gotoAndStop(7);
                      } else {
                        if (_parent.subtype == 'Weapon') {
                          gotoAndStop(2);
                        } else {
                          if (_parent.subtype == 'Skin') {
                            gotoAndStop(14);
                          } else {
                            if (_parent.subtype == 'Medal') {
                              gotoAndStop(9);
                            } else {
                              if (_parent.subtype == 'Pendant') {
                                gotoAndStop(11);
                              } else {
                                if (_parent.subtype == 'Earring') {
                                  gotoAndStop(12);
                                } else {
                                  if (_parent.subtype == 'Trinket') {
                                    gotoAndStop(13);
                                  } else {
                                    if (_parent.type == 'Enhancer') {
                                      gotoAndStop(8);
                                    } else {
                                      if (_parent.type == 'Potion') {
                                        gotoAndStop(10);
                                      } else {
                                        if (_parent.type == 'Chip') {
                                          gotoAndStop(15);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (_parent.guard == true) {
              protDisp.gotoAndStop(1);
            } else {
              protDisp.gotoAndStop(2);
            }
            bonuspow = _parent.bonusPow;
            if (isNaN(bonuspow)) {
              bonuspow = 0;
            }
            if (bonuspow >= 100000) {
              fr = 11;
            } else {
              if (bonuspow >= 706) {
                fr = 10;
              } else {
                if (bonuspow >= 406) {
                  fr = 9;
                } else {
                  if (bonuspow >= 256) {
                    fr = 8;
                  } else {
                    if (bonuspow >= 156) {
                      fr = 7;
                    } else {
                      if (bonuspow >= 106) {
                        fr = 6;
                      } else {
                        if (bonuspow >= 66) {
                          fr = 5;
                        } else {
                          if (bonuspow >= 36) {
                            fr = 4;
                          } else {
                            if (bonuspow >= 16) {
                              fr = 3;
                            } else {
                              if (bonuspow >= 1) {
                                fr = 2;
                              } else {
                                fr = 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (powDisp._currentframe != fr) {
              powDisp.gotoAndStop(fr);
            }
            if (_parent.slot == 1331) {
              fr = 8;
            } else {
              if (_parent.slot == 397 || _parent.slot == 398) {
                fr = 7;
              } else {
                if (_root.enhancerToUse == _parent.slot) {
                  fr = 2;
                } else {
                  if (_root.arenaSwap1 == _parent.slot) {
                    fr = 3;
                  } else {
                    if (_root.save['arena' + _parent.xCate] == _parent.slot) {
                      fr = 2;
                    } else {
                      if (_parent.expiry < _root.systemtimenow) {
                        fr = 6;
                      } else {
                        if (_root.save.arenaLevel < _parent.reqRank) {
                          fr = 5;
                        } else {
                          fr = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (itemBG._currentframe != fr) {
              itemBG.gotoAndStop(fr);
            }
          }
        }

        checkFrame();
      }
    }
  }

  movieClip 4835  {
  }

  movieClip 4836  {
  }

  movieClip 4859  {
  }

  // unknown tag 88 length 47

  // unknown tag 88 length 48

  movieClip 4928  {
  }

  movieClip 4937  {
  }

  movieClip 4939  {

    instance joinButton of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 30;
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaCraft >= 25000000000.0) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'You can buy permanent access to this Technical Battleground for <b>25,000,000,000</b> Crafting Material by Shift + Clicking this button. Make sure you have selected the correct Technical Battleground. PLEASE NOTE THAT THERE IS NO CONFIRMATION!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          if (_root.save.arenaCraft >= 25000000000.0 && _root.save.arenaEventKey[_root.selectedEvent] != 1 && _root.systemtimenow >= _root.eventEndTime[_root.selectedEvent]) {
            _root.save.arenaCraft -= 25000000000.0;
            _root.save.arenaEventKey[_root.selectedEvent] = 1;
          } else {
            _root.showPopup('Error', 'You don\'t have enough Crafting Material.');
          }
        }
      }
    }
  }

  // unknown tag 88 length 49

  movieClip 4985  {
  }

  movieClip 4988  {

    frame 1 {
      stop();
      onEnterFrame = null;
    }

    frame 2 {
      function checkKommander() {
        missionText.text = 'Mission #' + (_root.save.arenaKommanderComplete + 1) + ': Defeat ' + _root.withComma(_root.save.arenaKommanderMonCount) + ' [' + _root.enemyList[_root.save.arenaKommanderMonID].name + ']';
        progText.text = _root.withComma(_root.save.arenaKommanderProgress) + ' / ' + _root.withComma(_root.save.arenaKommanderMonCount);
        r1Text.text = 'x' + _root.save.arenaKommanderProgBox;
        r2Text.text = 'x' + _root.save.arenaKommanderPixBox;
        r3Text.text = 'x' + _root.save.arenaKommanderProof;
        bar._xscale = (_root.save.arenaKommanderProgress / _root.save.arenaKommanderMonCount) * 100;
        if (_root.save.arenaZone != 0) {
          gotoAndStop(1);
        }
      }

      function genKommanderMission() {
        kd = Math.floor(_root.save.arenaLevel / 10) + Math.floor(Math.sqrt(_root.save.arenaKommanderComplete));
        if (_root.save.arenaLevel < 500) {
          if (kd > Math.floor((_root.save.arenaLevel / 10) * 1.5)) {
            kd = Math.floor((_root.save.arenaLevel / 10) * 1.5);
          }
        }
        if (kd > 200) {
          kd = 200;
        }
        if (kd < 1) {
          kd = 1;
        }
        kd = Math.round(kd * (0.8 + Math.random() * 0.4));
        monID = 2;
        monCount = 10;
        tmpID = new Array();
        tmpScore = new Array();
        tmpBest = -1;
        tmpBestScore = 0;
        i = 1;
        while (i <= 50) {
          tmpID[i] = random(500) + 1;
          if (_root.save.banned < 1 && _root.save.bannedB < 1) {
            tmpID[i] = random(447) + 1;
          }
          if (_root.save.arenaKommanderComplete < 10) {
            tmpID[i] = random(176) + 2;
          }
          tmpScore[i] = -1;
          if (_root.komDiff[tmpID[i]] != -1) {
            if (kd >= _root.komDiff[tmpID[i]]) {
              tmpScore[i] = _root.komDiff[tmpID[i]] + 100 - i * 2;
              if (i <= 4) {
                tmpScore[i] += 100;
              }
            }
          }
          ++i;
        }
        i = 1;
        while (i <= 50) {
          if (tmpScore[i] > tmpBestScore) {
            tmpBestScore = tmpScore[i];
            tmpBest = i;
          }
          ++i;
        }
        if (tmpBest == -1) {
          _root.save.arenaKommanderPixBox = 1;
          _root.save.arenaKommanderProgBox = 1;
          _root.save.arenaKommanderProof = 1;
        } else {
          monID = tmpID[tmpBest];
          if (kd > _root.komDiff[monID] * 5) {
            kd = _root.komDiff[monID] * 5;
          }
          monCount = Math.floor(kd * _root.komCount[monID] / _root.komDiff[monID]);
          if (_root.save.arenaKommanderComplete < 10) {
            monCount = Math.ceil(monCount / 2);
          }
          if (monCount >= 10) {
            monCount = Math.ceil(monCount / 5) * 5;
          }
          if (monCount >= 50) {
            monCount = Math.ceil(monCount / 10) * 10;
          }
          if (monCount >= 100) {
            monCount = Math.ceil(monCount / 25) * 25;
          }
          if (monCount >= 200) {
            monCount = Math.ceil(monCount / 50) * 50;
          }
          if (monCount >= 400) {
            monCount = Math.ceil(monCount / 100) * 100;
          }
          if (_root.enemyList[monID].boss == true) {
            kd = Math.ceil(kd * 1.5);
          }
          _root.save.arenaKommanderPixBox = Math.ceil(kd * 1.2 * (0.5 + Math.random() * 1) / 10 + 2);
          _root.save.arenaKommanderProgBox = Math.ceil(kd * 1.2 * (0.5 + Math.random() * 1) + 10);
          if (_root.save.arenaKommanderProgBox >= 10) {
            _root.save.arenaKommanderProgBox = Math.ceil(_root.save.arenaKommanderProgBox / 5) * 5;
          }
          if (_root.save.arenaKommanderProgBox >= 50) {
            _root.save.arenaKommanderProgBox = Math.ceil(_root.save.arenaKommanderProgBox / 10) * 10;
          }
          if (_root.save.arenaKommanderProgBox >= 100) {
            _root.save.arenaKommanderProgBox = Math.ceil(_root.save.arenaKommanderProgBox / 25) * 25;
          }
          if (_root.save.arenaKommanderProgBox >= 200) {
            _root.save.arenaKommanderProgBox = Math.ceil(_root.save.arenaKommanderProgBox / 50) * 50;
          }
          if (_root.save.arenaKommanderProgBox >= 400) {
            _root.save.arenaKommanderProgBox = Math.ceil(_root.save.arenaKommanderProgBox / 100) * 100;
          }
          _root.save.arenaKommanderProof = Math.ceil(kd / 10);
        }
        _root.save.arenaKommanderMonID = monID;
        _root.save.arenaKommanderMonCount = monCount;
      }

      checkKommander();
      onEnterFrame = function () {
        checkKommander();
      };

    }

    instance of movieClip 4779  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.arenaKommanderProgress >= _root.save.arenaKommanderMonCount) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_root.save.arenaKommanderProgress >= _root.save.arenaKommanderMonCount) {
          _root.save.mysteryBox[3] += _root.save.arenaKommanderPixBox;
          _root.save.mysteryBox[5] += _root.save.arenaKommanderProgBox;
          _root.save.arenaMission += 1;
          _root.save.arenaKommanderComplete += 1;
          _root.save.arenaKommanderProgress = 0;
          _parent.genKommanderMission();
          _root.save.arenaProofMission += _root.save.arenaKommanderProof;
          _root.dispNews(66, 'Mission Kommander\'s Mission complete!');
          _root.dispNews(66, 'You have gained ' + _root.save.arenaKommanderProof + ' [Proof of Mission]!');
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.arenaKommanderSkip > 0) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Every day, you can skip up to 2 missions you dislike by holding Shift while clicking this button. Please note that you will not gain any rewards for the current mission, and there is a chance that your new mission may be the same as the previous one.\n\nSkips remaining: <b>' + _root.save.arenaKommanderSkip + '</b>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaKommanderSkip > 0 && Key.isDown(16)) {
          _root.save.arenaKommanderSkip -= 1;
          _root.save.arenaKommanderProgress = 0;
          _parent.genKommanderMission();
          _root.actiondescription = 'Every day, you can skip up to 2 missions you dislike by holding Shift while clicking this button. Please note that you will not gain any rewards for the current mission, and there is a chance that your new mission may be the same as the previous one.\n\nSkips remaining: <b>' + _root.save.arenaKommanderSkip + '</b>';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '[' + _root.enemyList[_root.save.arenaKommanderMonID].name + ']\ncan be found in\n[' + _root.enemyList[_root.save.arenaKommanderMonID].loc + ']\n\nHowever, if you find the monster in a different area, killing it will count towards the mission progress too!';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    frame 3 {
      function checkBacon() {
        levelDisp.text = _root.save.robaconLevel;
        if (_root.save.robaconLevel < 500) {
          expDisp.text = _root.withComma(_root.save.robaconExp) + ' / ' + _root.withComma(_root.robaconReqExp);
          pct = Math.floor((_root.save.robaconExp / _root.robaconReqExp) * 1000) / 10;
          if (pct == Math.round(pct)) {
            pct += '.0';
          }
          pctDisp.text = '[' + pct + '%]';
        } else {
          expDisp.text = _root.withComma(_root.save.robaconExp);
          pctDisp.text = '[MAX]';
        }
        robaconBaconText.text = _root.withComma(_root.save.robaconBacon);
        baconText.text = _root.withComma(_root.save.arenaBacon);
        if (_root.save.arenaZone != 0) {
          gotoAndStop(1);
        }
      }

      checkBacon();
      onEnterFrame = function () {
        checkBacon();
      };

    }

    instance of movieClip 4641  {

      onClipEvent (load) {
        _xscale = 0;
      }

      onClipEvent (enterFrame) {
        targetScale = (_root.save.robaconExp / _root.robaconReqExp) * 100 * 28 / 15;
        maxScale = 186.6666666666667;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 50;
        desc = 'Robacon raises your Combo by 2 each time he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 75;
        desc = 'Robacon raises your Rage by 0.5% each time he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 100;
        desc = 'Robacon has a 25% chance to cause the monster to drop an Enhancer Fragment.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 125;
        desc = 'Robacon is guaranteed to deal critical damage.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 150;
        desc = 'Robacon has a 25% chance to silence non-boss monsters.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 175;
        desc = 'Robacon has a 25% chance to deal double damage.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 200;
        desc = 'Robacon has a 5% chance to cause the monster to drop a Superior Crafting Material.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 225;
        desc = 'Robacon has a 5% chance to permanently blind the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 250;
        desc = 'Robacon has a 5% chance to permanently poison the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 275;
        desc = 'Robacon has a 5% chance to permanently weaken the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 300;
        desc = 'Robacon recovers your HP by 25% of MaxHP whenever he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 325;
        desc = 'Robacon causes the monster to permanently lose 10% Evasion.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 350;
        desc = 'Robacon causes the monster to permanently lose 10% Defense.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 375;
        desc = 'Robacon causes the monster to permanently lose 10% Accuracy.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 400;
        desc = 'Robacon recovers your MP by 5% of MaxMP whenever he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 425;
        desc = 'Robacon causes the monster to permanently lose 10% Attack.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 450;
        desc = 'Robacon makes the monster give 10% more Coins.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 475;
        desc = 'Robacon makes the monster give 10% more Pixels.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 500;
        desc = 'Robacon makes the monster give 10% more EXP.';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click this button to give Robacon 10% of your remaining Bacon.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        baconToGive = Math.ceil(_root.save.arenaBacon / 10);
        if (baconToGive > 9999999 - _root.save.robaconBacon) {
          baconToGive = 9999999 - _root.save.robaconBacon;
        }
        _root.save.arenaBacon -= baconToGive;
        _root.save.robaconBacon += baconToGive;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 400;
      }
    }

    instance of movieClip 4836  {

      onClipEvent (enterFrame) {
        if (_root.save.inventoryType[400] == 'Weapon' && _root.save.inventoryReqRank[400] <= _root.save.robaconLevel && _root.save.inventoryExpiry[400] >= _root.systemtimenow) {
          gotoAndStop(1);
        } else {
          if (_root.save.inventoryExist[400] == 1) {
            gotoAndStop(2);
          } else {
            gotoAndStop(3);
          }
        }
      }
    }

    frame 4 {
      function checkBacon() {
        levelDisp.text = _root.save.robaconLevel;
        if (_root.save.robaconLevel < 500) {
          expDisp.text = _root.withComma(_root.save.robaconExp) + ' / ' + _root.withComma(_root.robaconReqExp);
          pct = Math.floor((_root.save.robaconExp / _root.robaconReqExp) * 1000) / 10;
          if (pct == Math.round(pct)) {
            pct += '.0';
          }
          pctDisp.text = '[' + pct + '%]';
        } else {
          expDisp.text = _root.withComma(_root.save.robaconExp);
          pctDisp.text = '[MAX]';
        }
        robaconBaconText.text = _root.withComma(_root.save.robaconBacon);
        baconText.text = _root.withComma(_root.save.arenaBacon);
        if (_root.save.arenaZone != 0) {
          gotoAndStop(1);
        }
      }

      checkBacon();
      onEnterFrame = function () {
        checkBacon();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click this button to give Robroccoli 10% of your remaining Broccoli.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        baconToGive = Math.ceil(_root.save.arenaBacon / 10);
        if (baconToGive > 9999999 - _root.save.robaconBacon) {
          baconToGive = 9999999 - _root.save.robaconBacon;
        }
        _root.save.arenaBacon -= baconToGive;
        _root.save.robaconBacon += baconToGive;
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 50;
        desc = 'Robroccoli raises your Combo by 2 each time he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 75;
        desc = 'Robroccoli raises your Rage by 0.5% each time he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 100;
        desc = 'Robroccoli has a 25% chance to cause the monster to drop an Enhancer Fragment.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 125;
        desc = 'Robroccoli is guaranteed to deal critical damage.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 150;
        desc = 'Robroccoli has a 25% chance to silence non-boss monsters.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 175;
        desc = 'Robroccoli has a 25% chance to deal double damage.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 200;
        desc = 'Robroccoli has a 5% chance to cause the monster to drop a Superior Crafting Material.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 225;
        desc = 'Robroccoli has a 5% chance to permanently blind the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 250;
        desc = 'Robroccoli has a 5% chance to permanently poison the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 275;
        desc = 'Robroccoli has a 5% chance to permanently weaken the monster.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 300;
        desc = 'Robroccoli recovers your HP by 25% of MaxHP whenever he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 325;
        desc = 'Robroccoli causes the monster to permanently lose 10% Evasion.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 350;
        desc = 'Robroccoli causes the monster to permanently lose 10% Defense.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 375;
        desc = 'Robroccoli causes the monster to permanently lose 10% Accuracy.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 400;
        desc = 'Robroccoli recovers your MP by 5% of MaxMP whenever he attacks.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 425;
        desc = 'Robroccoli causes the monster to permanently lose 10% Attack.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 450;
        desc = 'Robroccoli makes the monster give 10% more Coins.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 475;
        desc = 'Robroccoli makes the monster give 10% more Pixels.';
      }
    }

    instance of movieClip 4811  {

      onClipEvent (load) {
        reqRank = 500;
        desc = 'Robroccoli makes the monster give 10% more EXP.';
      }
    }

    frame 5 {
      onEnterFrame = function () {
        tempBonus = _root.save.inventoryBonus[1301];
        if (tempBonus == undefined) {
          tempBonus = '';
        }
        tempAbility = _root.save.inventoryAbility[1301];
        if (tempAbility == undefined) {
          tempAbility = '';
        }
        tempMoreBonus = _root.save.inventoryMoreBonus[1301];
        if (tempMoreBonus == undefined) {
          tempMoreBonus = '';
        }
        bonusText.text = tempBonus;
        abilityText.text = tempAbility;
        moreBonusText.text = tempMoreBonus;
        leftText.text = _root.save.arenaBonusChange;
      };

    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1301;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.inventoryAbility[1301] != '' && _root.save.inventoryAbility[1301] != undefined && _root.save.inventoryNoBonus[1301] != true && _root.save.inventoryExist[1301] == 1 && _root.save.arenaBonusChange > 0) {
          _root.save.arenaBonusChange -= 1;
          bonusToGet = random(25) + 1;
          if (_root.save.inventoryType[1301] == 'Weapon' || _root.save.inventorySubtype[1301] == 'Weapon Bonus Adder') {
            bonusToGet = random(47) + 1;
          }
          if (bonusToGet == 1) {
            tempBonus = 'Attack';
          }
          if (bonusToGet == 2) {
            tempBonus = 'Attack Speed';
          }
          if (bonusToGet == 3) {
            tempBonus = 'Ignore Defense';
          }
          if (bonusToGet == 4) {
            tempBonus = 'Mastery';
          }
          if (bonusToGet == 5) {
            tempBonus = 'Critical Chance';
          }
          if (bonusToGet == 6) {
            tempBonus = 'Critical Damage';
          }
          if (bonusToGet == 7) {
            tempBonus = 'Defense';
          }
          if (bonusToGet == 8) {
            tempBonus = 'Damage Taken';
          }
          if (bonusToGet == 9) {
            tempBonus = 'Reflect';
          }
          if (bonusToGet == 10) {
            tempBonus = 'Accuracy';
          }
          if (bonusToGet == 11) {
            tempBonus = 'Hit Chance';
          }
          if (bonusToGet == 12) {
            tempBonus = 'Evasion';
          }
          if (bonusToGet == 13) {
            tempBonus = 'Dodge Chance';
          }
          if (bonusToGet == 14) {
            tempBonus = 'Poison Chance';
          }
          if (bonusToGet == 15) {
            tempBonus = 'Weaken Chance';
          }
          if (bonusToGet == 16) {
            tempBonus = 'Blind Chance';
          }
          if (bonusToGet == 17) {
            tempBonus = 'Stun Chance';
          }
          if (bonusToGet == 18) {
            tempBonus = 'HP';
          }
          if (bonusToGet == 19) {
            tempBonus = 'MP';
          }
          if (bonusToGet == 20) {
            tempBonus = 'HP Regen';
          }
          if (bonusToGet == 21) {
            tempBonus = 'MP Regen';
          }
          if (bonusToGet == 22) {
            tempBonus = 'Rage Depletion';
          }
          if (bonusToGet == 23) {
            tempBonus = 'Drain';
          }
          if (bonusToGet == 24) {
            tempBonus = 'Mana Eater';
          }
          if (bonusToGet == 25) {
            tempBonus = 'Autosteal';
          }
          if (bonusToGet == 26) {
            tempBonus = 'Double Hit Chance';
          }
          if (bonusToGet == 27) {
            tempBonus = 'Rage Attack';
          }
          if (bonusToGet == 28) {
            tempBonus = 'Rage Speed';
          }
          if (bonusToGet == 29) {
            tempBonus = 'Poison Damage';
          }
          if (bonusToGet == 30) {
            tempBonus = 'Poison Duration';
          }
          if (bonusToGet == 31) {
            tempBonus = 'Weaken Effect';
          }
          if (bonusToGet == 32) {
            tempBonus = 'Weaken Duration';
          }
          if (bonusToGet == 33) {
            tempBonus = 'Blind Effect';
          }
          if (bonusToGet == 34) {
            tempBonus = 'Blind Duration';
          }
          if (bonusToGet == 35) {
            tempBonus = 'Potion Efficiency';
          }
          if (bonusToGet == 36) {
            tempBonus = 'Boss Damage';
          }
          if (bonusToGet == 37) {
            tempBonus = 'Magic Resist';
          }
          if (bonusToGet == 38) {
            tempBonus = 'Instant Kill';
          }
          if (bonusToGet == 39) {
            tempBonus = 'Negate Effect';
          }
          if (bonusToGet == 40) {
            tempBonus = 'Non-Boss Damage';
          }
          if (bonusToGet == 41) {
            tempBonus = 'Damage';
          }
          if (bonusToGet == 42) {
            tempBonus = 'Extra Combo';
          }
          if (bonusToGet == 43) {
            tempBonus = 'Magic Reflect';
          }
          if (bonusToGet == 44) {
            tempBonus = 'Nullify Death Penalty';
          }
          if (bonusToGet == 45) {
            tempBonus = 'Buff Effect';
          }
          if (bonusToGet == 46) {
            tempBonus = 'All Elements';
          }
          if (bonusToGet == 47) {
            tempBonus = 'Max Spirit';
          }
          if (_root.save.inventoryType[1301] == 'Weapon' || _root.save.inventorySubtype[1301] == 'Weapon Bonus Adder') {
            if (_root.save.arenaAbilityPreference1 != 'None' && _root.save.inventoryAbility[1301] != _root.save.arenaAbilityPreference1 && Math.random() < 0.2) {
              tempBonus = _root.save.arenaAbilityPreference1;
            } else {
              if (_root.save.arenaAbilityPreference2 != 'None' && _root.save.inventoryAbility[1301] != _root.save.arenaAbilityPreference2 && Math.random() < 0.1) {
                tempBonus = _root.save.arenaAbilityPreference2;
              } else {
                if (_root.save.arenaAbilityPreference3 != 'None' && _root.save.inventoryAbility[1301] != _root.save.arenaAbilityPreference3 && Math.random() < 0.05) {
                  tempBonus = _root.save.arenaAbilityPreference3;
                }
              }
            }
          } else {
            if (_root.save.arenaAbilityPreference2 != 'None' && _root.save.inventoryAbility[1301] != _root.save.arenaAbilityPreference2 && Math.random() < 0.2) {
              tempBonus = _root.save.arenaAbilityPreference2;
            } else {
              if (_root.save.arenaAbilityPreference3 != 'None' && _root.save.inventoryAbility[1301] != _root.save.arenaAbilityPreference3 && Math.random() < 0.07000000000000001) {
                tempBonus = _root.save.arenaAbilityPreference3;
              }
            }
          }
          if (_root.save.inventoryAbility[1301] != tempBonus) {
            _root.save.inventoryAbility[1301] = tempBonus;
          } else {
            _root.save.arenaBonusChange += 4;
            _root.showPopup('Jackpot!', 'You got the exact same bonus as before. You can use the machine a few extra times today!');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.inventoryBonus[1301] != '' && _root.save.inventoryBonus[1301].indexOf('Auto Buff') == -1 && (_root.save.inventoryBonus[1301].indexOf('Ignore') == -1 || _root.save.inventoryType[1301] != 'Enhancer') && _root.save.inventoryBonus[1301] != undefined && _root.save.inventoryNoBonus[1301] != true && _root.save.inventoryExist[1301] == 1 && _root.save.arenaBonusChange > 0) {
          _root.save.arenaBonusChange -= 1;
          bonusToGet = random(22) + 1;
          if (bonusToGet == 1 || bonusToGet == 2) {
            tempBonus = 'Reward';
          }
          if (bonusToGet == 3 || bonusToGet == 4) {
            tempBonus = 'EXP';
          }
          if (bonusToGet == 5 || bonusToGet == 6) {
            tempBonus = 'Coin';
          }
          if (bonusToGet == 7 || bonusToGet == 8) {
            tempBonus = 'Pixel';
          }
          if (bonusToGet == 9 || bonusToGet == 10) {
            tempBonus = 'Drop Rate';
          }
          if (bonusToGet == 11 || bonusToGet == 12) {
            tempBonus = 'Spawn Rate';
          }
          if (bonusToGet == 13) {
            tempBonus = 'Fire Element';
          }
          if (bonusToGet == 14) {
            tempBonus = 'Ice Element';
          }
          if (bonusToGet == 15) {
            tempBonus = 'Wind Element';
          }
          if (bonusToGet == 16) {
            tempBonus = 'Earth Element';
          }
          if (bonusToGet == 17) {
            tempBonus = 'Thunder Element';
          }
          if (bonusToGet == 18) {
            tempBonus = 'Water Element';
          }
          if (bonusToGet == 19) {
            tempBonus = 'Light Element';
          }
          if (bonusToGet == 20) {
            tempBonus = 'Dark Element';
          }
          if (bonusToGet == 21) {
            tempBonus = 'Rare Monster Rate';
          }
          if (bonusToGet == 22) {
            tempBonus = 'Epic Monster Rate';
          }
          if (_root.save.arenaBonusPreference1 != 'None' && _root.save.inventoryBonus[1301] != _root.save.arenaBonusPreference1 && Math.random() < 0.2) {
            tempBonus = _root.save.arenaBonusPreference1;
          } else {
            if (_root.save.arenaBonusPreference2 != 'None' && _root.save.inventoryBonus[1301] != _root.save.arenaBonusPreference2 && Math.random() < 0.07000000000000001) {
              tempBonus = _root.save.arenaBonusPreference2;
            }
          }
          if (_root.save.inventoryBonus[1301] != tempBonus) {
            _root.save.inventoryBonus[1301] = tempBonus;
          } else {
            _root.save.arenaBonusChange += 3;
            _root.showPopup('Jackpot!', 'You got the exact same bonus as before. You can use the machine a few extra times today!');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.arenaBonusChange < 50 && _root.save.arenaPixel >= 500000000) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '\'Please consider donating. For each 500,000,000 Pixels, you help speed up my next invention a little bit, and can use this machine 50 extra times today.\'';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaBonusChange < 50 && _root.save.arenaPixel >= 500000000) {
          _root.save.arenaPixel -= 500000000;
          _root.save.arenaBonusChange += 50;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.inventoryMoreBonus[1301] != '' && _root.save.inventoryMoreBonus[1301] != undefined && _root.save.inventoryNoBonus[1301] != true && _root.save.inventoryExist[1301] == 1 && _root.save.arenaBonusChange > 0) {
          _root.save.arenaBonusChange -= 1;
          bonusToGet = random(11) + 1;
          if (bonusToGet == 1) {
            tempBonus = 'Equipment Attack';
          }
          if (bonusToGet == 2) {
            tempBonus = 'Equipment Defense';
          }
          if (bonusToGet == 3) {
            tempBonus = 'Attack Power';
          }
          if (bonusToGet == 4) {
            tempBonus = 'Defense Power';
          }
          if (bonusToGet == 5) {
            tempBonus = 'MaxHP';
          }
          if (bonusToGet == 6) {
            tempBonus = 'MaxMP';
          }
          if (bonusToGet == 7) {
            tempBonus = 'Accuracy';
          }
          if (bonusToGet == 8) {
            tempBonus = 'Evasion';
          }
          if (bonusToGet == 9) {
            tempBonus = 'EXP / Boss Kill';
          }
          if (bonusToGet == 10) {
            tempBonus = 'EXP / Rare Kill';
          }
          if (bonusToGet == 11) {
            tempBonus = 'EXP / Epic Kill';
          }
          if (_root.save.arenaMoreBonusPreference1 != 'None' && _root.save.inventoryMoreBonus[1301] != _root.save.arenaMoreBonusPreference1 && Math.random() < 0.2) {
            tempBonus = _root.save.arenaMoreBonusPreference1;
          } else {
            if (_root.save.arenaMoreBonusPreference2 != 'None' && _root.save.inventoryMoreBonus[1301] != _root.save.arenaMoreBonusPreference2 && Math.random() < 0.07000000000000001) {
              tempBonus = _root.save.arenaMoreBonusPreference2;
            }
          }
          if (_root.save.inventoryMoreBonus[1301] != tempBonus) {
            _root.save.inventoryMoreBonus[1301] = tempBonus;
          } else {
            _root.save.arenaBonusChange += 2;
            _root.showPopup('Jackpot!', 'You got the exact same bonus as before. You can use the machine a few extra times today!');
          }
        }
      }
    }

    frame 6 {
      onEnterFrame = null;
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.activityLoot == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.activityLoot != true) {
          _root.save.activityLoot = true;
        } else {
          _root.save.activityLoot = false;
        }
      }
    }

    frame 7 {
      function checkBM() {
        if (_root.save.battleReward == 0) {
          nextReward = 100;
          nextRewardText = 'Weapon Attack Rock Lv. 10';
        }
        if (_root.save.battleReward == 1) {
          nextReward = 200;
          nextRewardText = 'Weapon Attack Rock Lv. 10';
        }
        if (_root.save.battleReward == 2) {
          nextReward = 300;
          nextRewardText = 'Weapon Attack Rock Lv. 10';
        }
        if (_root.save.battleReward == 3) {
          nextReward = 400;
          nextRewardText = 'Weapon Attack Rock Lv. 10';
        }
        if (_root.save.battleReward == 4) {
          nextReward = 500;
          nextRewardText = '[I] Weapon Attack Rock Lv. 10';
        }
        if (_root.save.battleReward == 5) {
          nextReward = 1000;
          nextRewardText = 'Weapon Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 6) {
          nextReward = 2000;
          nextRewardText = 'Weapon Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 7) {
          nextReward = 3000;
          nextRewardText = 'Weapon Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 8) {
          nextReward = 4000;
          nextRewardText = 'Weapon Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 9) {
          nextReward = 5000;
          nextRewardText = '[I] Weapon Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 10) {
          nextReward = 6000;
          nextRewardText = 'Armor Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 11) {
          nextReward = 7000;
          nextRewardText = 'Armor Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 12) {
          nextReward = 8000;
          nextRewardText = 'Armor Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 13) {
          nextReward = 9000;
          nextRewardText = 'Armor Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 14) {
          nextReward = 10000;
          nextRewardText = '[I] Armor Unobtainium Enhancer Lv. 5';
        }
        if (_root.save.battleReward == 15) {
          nextReward = 50000;
          nextRewardText = 'Armor Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 16) {
          nextReward = 100000;
          nextRewardText = 'Armor Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 17) {
          nextReward = 150000;
          nextRewardText = 'Armor Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 18) {
          nextReward = 200000;
          nextRewardText = 'Armor Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 19) {
          nextReward = 250000;
          nextRewardText = '[I] Armor Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 20) {
          nextReward = 300000;
          nextRewardText = 'Weapon Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 21) {
          nextReward = 350000;
          nextRewardText = 'Weapon Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 22) {
          nextReward = 400000;
          nextRewardText = 'Weapon Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 23) {
          nextReward = 450000;
          nextRewardText = 'Weapon Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 24) {
          nextReward = 500000;
          nextRewardText = '[I] Weapon Unique Enhancer MAX';
        }
        if (_root.save.battleReward == 25) {
          nextReward = Infinity;
          nextRewardText = 'N/A';
        }
        dailyPixel = _root.save.battlePoint * _root.save.battlePoint * 100;
        if (_root.save.battlePoint > 500) {
          dailyPixel = _root.save.battlePoint * 50000;
        }
        if (dailyPixel > 25000000000.0) {
          dailyPixel = 25000000000.0;
        }
        if (dailyPixel > Math.ceil(_root.save.arenaPixel * 0.0005 + 100) * 100) {
          dailyPixel = Math.ceil(_root.save.arenaPixel * 0.0005 + 100) * 100;
        }
        bpText.text = _root.withComma(_root.save.battlePoint) + ' BP';
        nextText.text = _root.withComma(nextReward) + ' BP';
        pixelText.text = _root.withComma(dailyPixel) + ' Pixels';
      }

      checkBM();
      onEnterFrame = function () {
        checkBM();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.battlePoint >= _parent.nextReward) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        _parent.checkBM();
        if (_root.save.battlePoint >= _parent.nextReward && !isNaN(_parent.nextReward)) {
          if (_root.emptyEnhancerSlot >= 1) {
            _root.save.battleReward += 1;
            if (_root.save.battleReward >= 1 && _root.save.battleReward <= 4) {
              _root.getArenaEnhancer('Weapon Attack Enhancer', 10, 50, 0, 100, '', '', '', 0, 706, 0, Infinity, 'Weapon Attack Rock Lv. 10', '', false);
            }
            if (_root.save.battleReward == 5) {
              _root.getArenaEnhancer('Weapon Attack Enhancer', 10, 50, 0, 100, '', '', '', 0, 706, 0, Infinity, '[I] Weapon Attack Rock Lv. 10', '', true);
            }
            if (_root.save.battleReward >= 6 && _root.save.battleReward <= 9) {
              _root.getArenaEnhancer('Weapon Unobtainium Enhancer', 355, 5, 0, 100, '', '', '', 0, 706, 0, Infinity, 'Weapon Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.', false);
            }
            if (_root.save.battleReward == 10) {
              _root.getArenaEnhancer('Weapon Unobtainium Enhancer', 355, 5, 0, 100, '', '', '', 0, 706, 0, Infinity, '[I] Weapon Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.', true);
            }
            if (_root.save.battleReward >= 11 && _root.save.battleReward <= 14) {
              _root.getArenaEnhancer('Armor Unobtainium Enhancer', 365, 5, 0, 100, '', '', '', 0, 706, 0, Infinity, 'Armor Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.', false);
            }
            if (_root.save.battleReward == 15) {
              _root.getArenaEnhancer('Armor Unobtainium Enhancer', 365, 5, 0, 100, '', '', '', 0, 706, 0, Infinity, '[I] Armor Unobtainium Enhancer Lv. 5', 'Increases the bonus tier of an item. If the item already has an Unobtainium Enhancement count, it will be replaced.', true);
            }
            if (_root.save.battleReward >= 16 && _root.save.battleReward <= 19) {
              _root.getArenaEnhancer('Armor Unique Enhancer', 410, 1800, 0, 100, '', '', '', 0, 706, 0, Infinity, 'Armor Unique Enhancer MAX', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.', false);
            }
            if (_root.save.battleReward == 20) {
              _root.getArenaEnhancer('Armor Unique Enhancer', 410, 1800, 0, 100, '', '', '', 0, 706, 0, Infinity, '[I] Armor Unique Enhancer MAX', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.', true);
            }
            if (_root.save.battleReward >= 21 && _root.save.battleReward <= 24) {
              _root.getArenaEnhancer('Weapon Unique Enhancer', 400, 3000, 0, 100, '', '', '', 0, 706, 0, Infinity, 'Weapon Unique Enhancer MAX', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.', false);
            }
            if (_root.save.battleReward == 25) {
              _root.getArenaEnhancer('Weapon Unique Enhancer', 400, 3000, 0, 100, '', '', '', 0, 706, 0, Infinity, '[I] Weapon Unique Enhancer MAX', 'A unique enhancer. Unlike other enhancers, it doesn\'t add to the enhancement count of the item. However, it cannot be used on items that aren\'t fully enhanced and leveled.', true);
            }
          } else {
            _root.showPopup('Error', 'Your Enhancer inventory is full.');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_root.save.battleDaily != true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_root.save.battleDaily != true) {
          _root.save.arenaPixel += _parent.dailyPixel;
          _root.save.battleDaily = true;
        }
      }
    }

    frame 8 {
      onEnterFrame = null;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaPixel >= 1000000000) {
          _root.save.arenaPixel -= 1000000000;
          _root.endlessFloor += 5;
          if (Math.random() < 0.25) {
            _root.endlessFloor += 5;
          }
          if (_root.save.raidEndless < _root.endlessFloor) {
            _root.save.raidEndless = _root.endlessFloor;
          }
          _root.fightStat = 'Endless Dungeon - ' + _root.endlessFloor + 'Fl.';
          _root.dungeonRoom = 36;
          _root.dungeonRoomBack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonRoomProgress = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonRoomClear = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
          _root.dungeonRoomMob = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonCountMob = 0;
          _root.dungeonCountBoss = 0;
          _root.dungeonRoomChest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonCountChest = 0;
          _root.dungeonRoomDecor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          _root.dungeonChestOpen = 0;
          _root.dungeonMobDefeat = 0;
          _root.dungeonBossDefeat = 0;
          i = 1;
          while (i <= 36) {
            _root.dungeonRoomBack[i] = random(4) + 1;
            _root.dungeonRoomDecor[i] = random(4) + 1;
            ++i;
          }
          _root.dungeonFinalRoom = random(29) + 7;
          _root.dungeonRoomMob[_root.dungeonFinalRoom] = 21;
          _root.dungeonRoomClear[_root.dungeonFinalRoom] = 0;
          if (_root.endlessFloor == floorCap) {
            _root.dungeonFinalRoom = 9001;
          }
          _root.dungeonRoomDecor[_root.dungeonFinalRoom] = 5;
          if ((_root.save.raidEndless >= (_root.endlessFloor - 1) * 2 + 11 && _root.endlessFloor < 170 || _root.save.raidEndless >= _root.endlessFloor + 40) && _root.endlessFloor % 5 == 1 && _root.endlessFloor < 170) {
            _root.dungeonRoomDecor[36] = 6;
          }
          skipBoss = random(4) + 1;
          while (_root.dungeonCountMob < 15) {
            i = random(29) + 7;
            if (_root.dungeonRoomMob[i] == 0) {
              _root.dungeonCountMob += 1;
              _root.dungeonRoomClear[i] = 0;
              _root.dungeonRoomMob[i] = random(15) + 1;
              if (Math.random() < 0.015) {
                _root.dungeonRoomMob[i] = 16;
              }
            }
          }
          while (_root.dungeonCountBoss < 4) {
            i = random(29) + 7;
            if (_root.dungeonRoomMob[i] == 0) {
              _root.dungeonCountBoss += 1;
              if (skipBoss != _root.dungeonCountBoss) {
                _root.dungeonRoomClear[i] = 0;
                _root.dungeonRoomMob[i] = 16 + _root.dungeonCountBoss;
              }
            }
          }
          _root.dungeonCountBoss = 3;
          while (_root.dungeonCountChest < 10) {
            i = random(29) + 7;
            if (_root.dungeonRoomChest[i] == 0 && i != _root.dungeonFinalRoom) {
              _root.dungeonCountChest += 1;
              _root.dungeonRoomChest[i] = 1;
            }
          }
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    frame 9 {
      onEnterFrame = null;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.areaPract = true;
        _root.house.arena.travel(81);
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.house.arena.travel(1);
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.coin >= 100000000000.0) {
          _root.save.coin -= 100000000000.0;
          _root.areaPract = false;
          _root.house.arena.travel(81);
          _parent.gotoAndStop(1);
        }
      }
    }

    frame 10 {
      finalScore = _root.areaDamage;
      num = finalScore;
      div = 0;
      prim = true;
      if (num < 2 || num >= 9999999968.0) {
        prim = false;
      } else {
        i = 2;
        while (i <= Math.sqrt(num) + 1) {
          if (num % i == 0) {
            prim = false;
            div = i;
            i = num;
          }
          ++i;
        }
      }
      digArray = new Array();
      digCount = new Array();
      totalDig = 0;
      i = 0;
      while (i <= 9) {
        digCount[i] = 0;
        ++i;
      }
      if (num == 0) {
        digArray.push(0);
        digCount[0] = 1;
      }
      num = finalScore;
      palinum = 0;
      pali = false;
      while (num > 0) {
        totalDig += 1;
        palinum = palinum * 10 + num % 10;
        digArray.push(num % 10);
        digCount[num % 10] += 1;
        num = Math.floor(num / 10);
      }
      if (finalScore == palinum) {
        pali = true;
      }
      curConsec = -1;
      curConsecL = 0;
      maxConsec = -1;
      maxConsecL = 0;
      i = 0;
      while (i < digArray.length) {
        if (curConsec != digArray[i]) {
          curConsec = digArray[i];
          curConsecL = 1;
        } else {
          curConsecL += 1;
          if (maxConsecL <= curConsecL) {
            maxConsecL = curConsecL;
            maxConsec = curConsec;
          }
        }
        ++i;
      }
      uniqueCount = 0;
      allUnique = true;
      i = 0;
      while (i <= 9) {
        if (digCount[i] >= 1) {
          uniqueCount += 1;
        }
        if (digCount[i] >= 2) {
          allUnique = false;
        }
        ++i;
      }
      bonList = new Array();
      bonMult = new Array();
      bonList.push('No Bonus');
      bonMult.push(0);
      bonList.push('No Bonus');
      bonMult.push(0);
      if (finalScore > 0) {
        if (totalDig >= 2) {
          bonList.push(totalDig + ' Digits');
          bonMult.push(totalDig * 5);
        }
        if (finalScore % 100000000 == 0) {
          bonList.push('Divisible by 100,000,000');
          bonMult.push(400);
        } else {
          if (finalScore % 50000000 == 0) {
            bonList.push('Divisible by 50,000,000');
            bonMult.push(350);
          } else {
            if (finalScore % 25000000 == 0) {
              bonList.push('Divisible by 25,000,000');
              bonMult.push(325);
            } else {
              if (finalScore % 10000000 == 0) {
                bonList.push('Divisible by 10,000,000');
                bonMult.push(300);
              } else {
                if (finalScore % 5000000 == 0) {
                  bonList.push('Divisible by 5,000,000');
                  bonMult.push(275);
                } else {
                  if (finalScore % 2500000 == 0) {
                    bonList.push('Divisible by 2,500,000');
                    bonMult.push(250);
                  } else {
                    if (finalScore % 1000000 == 0) {
                      bonList.push('Divisible by 1,000,000');
                      bonMult.push(225);
                    } else {
                      if (finalScore % 500000 == 0) {
                        bonList.push('Divisible by 500,000');
                        bonMult.push(200);
                      } else {
                        if (finalScore % 250000 == 0) {
                          bonList.push('Divisible by 250,000');
                          bonMult.push(175);
                        } else {
                          if (finalScore % 100000 == 0) {
                            bonList.push('Divisible by 100,000');
                            bonMult.push(150);
                          } else {
                            if (finalScore % 50000 == 0) {
                              bonList.push('Divisible by 50,000');
                              bonMult.push(125);
                            } else {
                              if (finalScore % 25000 == 0) {
                                bonList.push('Divisible by 25,000');
                                bonMult.push(100);
                              } else {
                                if (finalScore % 10000 == 0) {
                                  bonList.push('Divisible by 10,000');
                                  bonMult.push(90);
                                } else {
                                  if (finalScore % 5000 == 0) {
                                    bonList.push('Divisible by 5,000');
                                    bonMult.push(80);
                                  } else {
                                    if (finalScore % 2500 == 0) {
                                      bonList.push('Divisible by 2,500');
                                      bonMult.push(70);
                                    } else {
                                      if (finalScore % 1000 == 0) {
                                        bonList.push('Divisible by 1,000');
                                        bonMult.push(60);
                                      } else {
                                        if (finalScore % 500 == 0) {
                                          bonList.push('Divisible by 500');
                                          bonMult.push(50);
                                        } else {
                                          if (finalScore % 250 == 0) {
                                            bonList.push('Divisible by 250');
                                            bonMult.push(40);
                                          } else {
                                            if (finalScore % 100 == 0) {
                                              bonList.push('Divisible by 100');
                                              bonMult.push(30);
                                            } else {
                                              if (finalScore % 50 == 0) {
                                                bonList.push('Divisible by 50');
                                                bonMult.push(25);
                                              } else {
                                                if (finalScore % 25 == 0) {
                                                  bonList.push('Divisible by 25');
                                                  bonMult.push(20);
                                                } else {
                                                  if (finalScore % 10 == 0) {
                                                    bonList.push('Divisible by 10');
                                                    bonMult.push(15);
                                                  } else {
                                                    if (finalScore % 5 == 0) {
                                                      bonList.push('Divisible by 5');
                                                      bonMult.push(10);
                                                    } else {
                                                      if (finalScore % 2 == 0) {
                                                        bonList.push('Divisible by 2');
                                                        bonMult.push(5);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (prim == true) {
          bonList.push('Prime');
          bonMult.push(50);
        }
        if (uniqueCount == 1) {
          bonList.push('Repdigit');
          bonMult.push(totalDig * 100);
        }
        if (pali == true) {
          bonList.push('Palindrome');
          bonMult.push(totalDig * 50 + uniqueCount * 50);
        }
        if (uniqueCount > 1 && allUnique == true) {
          bonList.push('All Unique Digits');
          bonMult.push(uniqueCount * 10);
        }
        if (maxConsecL >= 2) {
          bonList.push(maxConsecL + ' Consecutive ' + maxConsec + '\'s');
          bonMult.push(maxConsecL * 10);
        }
      }
      bon1ID = 0;
      bon2ID = 0;
      i = 1;
      while (i < bonMult.length) {
        if (bonMult[i] >= bonMult[bon1ID]) {
          bon1ID = i;
        }
        ++i;
      }
      i = 1;
      while (i < bonMult.length) {
        if (bonMult[i] >= bonMult[bon2ID] && i != bon1ID) {
          bon2ID = i;
        }
        ++i;
      }
      a1 = Math.floor(Math.pow(finalScore, 0.4) * 25 * _root.save.boost / 100) * 1000;
      b1 = Math.floor(Math.pow(finalScore, 0.4) * 0.05 + 1);
      t4.text = bonList[bon1ID] + ':';
      a2 = Math.ceil(a1 * bonMult[bon1ID] / 100);
      b2 = Math.ceil(b1 * bonMult[bon1ID] / 100);
      t7.text = bonList[bon2ID] + ':';
      a3 = Math.ceil(a1 * bonMult[bon2ID] / 100);
      b3 = Math.ceil(b1 * bonMult[bon2ID] / 100);
      if (_root.worstMoon == true) {
        a1 = Math.floor(a1 * 5);
        a2 = Math.floor(a2 * 5);
        a3 = Math.floor(a3 * 5);
        b1 = Math.floor(b1 * 5);
        b2 = Math.floor(b2 * 5);
        b3 = Math.floor(b3 * 5);
      }
      if (_root.apocalypse == true) {
        a1 = Math.floor(a1 * 2);
        a2 = Math.floor(a2 * 2);
        a3 = Math.floor(a3 * 2);
        b1 = Math.floor(b1 * 2);
        b2 = Math.floor(b2 * 2);
        b3 = Math.floor(b3 * 2);
      }
      if (_root.areaPract == true) {
        a1 = Math.floor(a1 * 0.001);
        a2 = Math.floor(a2 * 0.001);
        a3 = Math.floor(a3 * 0.001);
        b1 = 0;
        b2 = 0;
        b3 = 0;
      }
      a4 = a1 + a2 + a3;
      b4 = b1 + b2 + b3;
      t1.text = _root.withComma(finalScore);
      t2.text = '+' + _root.withComma(a1);
      t3.text = '+' + _root.withComma(b1);
      t5.text = '+' + _root.withComma(a2);
      t6.text = '+' + _root.withComma(b2);
      t8.text = '+' + _root.withComma(a3);
      t9.text = '+' + _root.withComma(b3);
      t10.text = '+' + _root.withComma(a4);
      t11.text = '+' + _root.withComma(b4);
      if (isNaN(a4)) {
        a4 = 0;
      }
      if (isNaN(b4)) {
        b4 = 0;
      }
      _root.gainEXP(a4);
      _root.save.battlePoint += b4;
      if (_root.save.raidSpecial < finalScore) {
        _root.save.raidSpecial = finalScore;
      }
    }

    frame 10 {
      onEnterFrame = null;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(9);
      }
    }

    frame 11 {
      function checkPyr() {
        _root.house.arena.enemy.approach = 10;
        entryText.text = _root.save.arenaPyramidEntry;
        gemText.text = _root.withComma(_root.save.arenaNerfGem);
        nerfText.text = _root.withComma(_root.save.arenaNerfCount);
        nextText.text = _root.withComma(_root.save.arenaNerfNext);
      }

      checkPyr();
      onEnterFrame = function () {
        checkPyr();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaPyramidEntry > 0 && _root.house.arena.enemy.enemyID == 0) {
          _root.save.arenaPyramidEntry -= 1;
          _root.house.arena.travel(20, 0);
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function openBox() {
          chanceMult = Math.pow(0.9, _root.save.arenaNerfCount);
          if (Math.random() < 0.05) {
            possibility = 1;
          } else {
            if (Math.random() < 0.2 * chanceMult) {
              possibility = 2 + random(5);
            } else {
              if (Math.random() < 0.6 * chanceMult) {
                possibility = 9 + random(3);
              } else {
                if (Math.random() < 1.2 * chanceMult) {
                  possibility = 12 + random(3);
                } else {
                  if (Math.random() < 2 * chanceMult) {
                    possibility = 15 + random(3);
                  } else {
                    possibility = 18;
                  }
                }
              }
            }
          }
          if (_root.save.bannedB >= 1 && _root.save.arenaLevel < 500) {
            if (possibility == 9) {
              possibility = 10 + random(2);
            }
            if (possibility == 12) {
              possibility = 13 + random(2);
            }
            if (possibility == 15) {
              possibility = 16 + random(2);
            }
          }
          _root.save.arenaNerfNext -= 100;
          if (_root.save.arenaNerfNext <= 0) {
            _root.save.arenaNerfCount += 1;
            _root.save.arenaNerfNext = 1000 + 2000 * _root.save.arenaNerfCount;
          }
          if (possibility == 1) {
            if (_root.save.arenaSpookyKey != true) {
              _root.save.arenaSpookyKey = true;
              itemName = 'Spooky Crypt Key';
            } else {
              if (_root.save.bannedB >= 1 && _root.save.arenaLevel < 500) {
                _root.save.arenaUnobtainium += 10;
                itemName = '10 Unobtainium';
              } else {
                _root.save.arenaExp += 1000000;
                itemName = '1,000,000 Arena EXP';
              }
            }
          }
          if (possibility == 2) {
            _root.save.arenaUnobtainium += 20;
            itemName = '20 Unobtainium';
          }
          if (possibility == 3) {
            _root.save.arenaCrystal2 += 5;
            itemName = '5 Crystals of Ultimate Rarity';
          }
          if (possibility == 4) {
            _root.save.arenaCrystal1 += 20;
            itemName = '20 Crystals of Rarity';
          }
          if (possibility == 5) {
            _root.save.arenaSuperiorCraft += 100;
            itemName = '100 Superior Crafting Material';
          }
          if (possibility == 6) {
            _root.save.arenaChaoticFragment += 10;
            itemName = '10 Chaotic Fragments of Chaos';
          }
          if (possibility == 9) {
            _root.save.arenaExp += 100000;
            itemName = '100,000 Arena EXP';
          }
          if (possibility == 10) {
            _root.save.arenaCraft += 500000;
            itemName = '500,000 Crafting Material';
          }
          if (possibility == 11) {
            _root.save.arenaPixel += 2500000;
            itemName = '2,500,000 Pixels';
          }
          if (possibility == 12) {
            _root.save.arenaExp += 50000;
            itemName = '50,000 Arena EXP';
          }
          if (possibility == 13) {
            _root.save.arenaCraft += 200000;
            itemName = '200,000 Crafting Material';
          }
          if (possibility == 14) {
            _root.save.arenaPixel += 1000000;
            itemName = '1,000,000 Pixels';
          }
          if (possibility == 15) {
            _root.save.arenaExp += 25000;
            itemName = '25,000 Arena EXP';
          }
          if (possibility == 16) {
            _root.save.arenaCraft += 100000;
            itemName = '100,000 Crafting Material';
          }
          if (possibility == 17) {
            _root.save.arenaPixel += 500000;
            itemName = '500,000 Pixels';
          }
          if (possibility == 18) {
            _root.save.arenaNerfGem += 10;
            itemName = '10 To-be-Nerfed Gems';
          }
          _root.dispNews(168, 'Gained: ' + itemName + '!');
          if (isNaN(_root.save['mysteryBoxCollect' + boxID][possibility])) {
            _root.save['mysteryBoxCollect' + boxID][possibility] = 0;
          }
          _root.save['mysteryBoxCollect' + boxID][possibility] += 1;
        }

        boxID = 9001;
      }

      onClipEvent (enterFrame) {
        if (Key.isDown(16) && this.hitTest(_root.cursor._x, _root.cursor._y, true)) {
          if (_root.save.arenaNerfGem >= 100) {
            _root.save.arenaNerfGem -= 100;
            openBox();
          }
        }
      }

      onClipEvent (release) {
        if (_root.save.arenaNerfGem >= 100) {
          _root.save.arenaNerfGem -= 100;
          openBox();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'As the nerf count increases, your chance to get good prizes from throwing To-be-Nerfed Gems decreases.\n\nNerf count is reduced to 0 when the day ends.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    frame 12 {
      _root.selectedEvent = 1;
      while (_root.selectedEvent < _root.eventStartTime.length - 2) {
        if (_root.systemtimenow >= _root.eventStartTime[_root.selectedEvent + 1] - 86400000) {
          _root.selectedEvent += 1;
        } else {
          break;
        }
      }
      onEnterFrame = function () {
        eventPointText.text = _root.withComma(_root.save.arenaEventPoint[_root.selectedEvent]);
        if (_root.systemtimenow < _root.eventStartTime[_root.selectedEvent]) {
          timeText.text = 'NOT STARTED - beginning in ' + _root.convertSecFull((_root.eventStartTime[_root.selectedEvent] - _root.systemtimenow) / 1000);
        } else {
          if (_root.systemtimenow >= _root.eventEndTime[_root.selectedEvent]) {
            timeText.text = 'ENDED';
          } else {
            timeText.text = 'IN PROGRESS - ' + _root.convertSecFull((_root.eventEndTime[_root.selectedEvent] - _root.systemtimenow) / 1000) + ' remaining';
          }
        }
        maxReward = 0;
        claimedReward = 0;
        if (_root.selectedEvent == 1) {
          rewardArray = [0, 50, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000, 60000, 70000, Infinity, Infinity, Infinity, Infinity, Infinity, 100000, 120000, 160000];
        } else {
          if (_root.selectedEvent == 2) {
            rewardArray = [0, 50, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000, 75000, 100000, Infinity, Infinity, Infinity, Infinity, Infinity, 125000, 150000, 200000];
          } else {
            if (_root.selectedEvent == 3) {
              rewardArray = [0, 50, 250, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12500, 15000, 17500, 20000, 25000, 30000, 35000, 40000, 50000, 75000, 100000, Infinity, Infinity, Infinity, Infinity, Infinity, 130000, 160000, 230000];
            }
          }
        }
        ed = 0;
        if (_root.systemtimenow >= _root.eventEndTime[_root.selectedEvent]) {
          ed = 1;
        }
        i = 1;
        while (i <= 31 + ed) {
          if (_root.save.arenaEventPoint[_root.selectedEvent] >= rewardArray[i]) {
            maxReward += 1;
          }
          if (_root.save.arenaEventReward[_root.selectedEvent * 100 + i] == true) {
            claimedReward += 1;
          }
          ++i;
        }
        if (maxReward > claimedReward) {
          rewardNotification.gotoAndStop(1);
          rewardNotification.rewardText.text = maxReward - claimedReward;
        } else {
          rewardNotification.gotoAndStop(2);
        }
      };

    }

    instance of movieClip 4928  {

      onClipEvent (load) {
        gotoAndStop(_root.selectedEvent);
      }

      onClipEvent (enterFrame) {
        gotoAndStop(_root.selectedEvent);
      }
    }

    instance of movieClip 2455  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.selectedEvent > 1) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release, keyPress '<Left>') {
        if (_root.selectedEvent > 1) {
          _root.selectedEvent -= 1;
        }
      }
    }

    instance of movieClip 2455  {

      onClipEvent (load) {
        _alpha = 0;
      }

      onClipEvent (enterFrame) {
        if (_root.selectedEvent < _root.eventStartTime.length - 2) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release, keyPress '<Right>') {
        if (_root.selectedEvent < _root.eventStartTime.length - 2) {
          _root.selectedEvent += 1;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.optionsScreen.gotoAndStop(37);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.save.arenaEvent = _root.selectedEvent;
        _root.optionsScreen.gotoAndStop(36);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance joinButton of movieClip 1552  {

      onClipEvent (load) {
        _alpha = 30;
      }

      onClipEvent (enterFrame) {
        if (_root.systemtimenow < _root.eventEndTime[_root.selectedEvent] || _root.save.arenaEventKey[_root.selectedEvent] == 1) {
          _y = 150;
        } else {
          _y = 500;
        }
        if (_root.systemtimenow >= _root.eventStartTime[_root.selectedEvent] && _root.systemtimenow < _root.eventEndTime[_root.selectedEvent] || _root.save.arenaEventKey[_root.selectedEvent] == 1) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.systemtimenow >= _root.eventStartTime[_root.selectedEvent] && _root.systemtimenow < _root.eventEndTime[_root.selectedEvent] || _root.save.arenaEventKey[_root.selectedEvent] == 1) {
          _root.save.arenaEvent = _root.selectedEvent;
          _root.house.arena.travel(82);
          _parent.gotoAndStop(1);
        } else {
          _root.showPopup('Event Unavailable', 'This event is currently unavailable.');
        }
      }
    }

    instance of movieClip 4939  {

      onClipEvent (load) {
        _y = 500;
      }

      onClipEvent (enterFrame) {
        if (_root.systemtimenow < _root.eventEndTime[_root.selectedEvent] || _root.save.arenaEventKey[_root.selectedEvent] == 1) {
          _y = 500;
        } else {
          _y = 150;
        }
      }
    }

    frame 13 {
      function checkShard() {
        entryText.text = _root.save.arenaChaosLeft + ' / ' + _root.save.arenaChaosMax;
      }

      checkShard();
      onEnterFrame = function () {
        checkShard();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.arenaChaosLeft >= 0) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaChaosLeft >= 0) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_root.save.arenaChaosLeft >= 0) {
          _root.save.arenaChaosLeft -= 0;
          _root.dungeonDiff = 1;
          _root.house.arena.travel(53);
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.arenaChaosLeft >= 1) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaChaosLeft >= 1) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_root.save.arenaChaosLeft >= 1) {
          _root.save.arenaChaosLeft -= 1;
          _root.dungeonDiff = 2;
          _root.house.arena.travel(53);
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        if (_root.save.arenaChaosLeft >= 7 && _root.save.arenaHardcore == true && _root.apocalypse == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaChaosLeft >= 7 && _root.save.arenaHardcore == true && _root.apocalypse == true) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_root.save.arenaChaosLeft >= 7 && _root.save.arenaHardcore == true && _root.apocalypse == true) {
          _root.save.arenaChaosLeft -= 7;
          _root.dungeonDiff = 3;
          _root.house.arena.travel(53);
          _parent.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        shardPrice = 2000000000;
        saleEnd = 1478871420000.0;
        if (_root.systemtimenow >= saleEnd) {
          shardPrice = 2500000000.0;
        }
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaChaosLeft < _root.save.arenaChaosMax && _root.save.arenaCraft >= shardPrice) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click here to get 1 more Dark Shard for <b>' + _root.withComma(shardPrice) + '</b> Crafting Material.\n\nDark Shards are fully refilled for free when the day ends.';
        if (shardPrice == 2000000000) {
          _root.actiondescription += '\n\n<font color=\'#FFFF00\'>20% OFF! Normally 2,500,000,000 Crafting Material each. Only ' + Math.ceil((saleEnd - _root.systemtimenow) / 3600000) + ' hr. until the sale ends - hurry up!</font>';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaChaosLeft < _root.save.arenaChaosMax && _root.save.arenaCraft >= shardPrice) {
          _root.save.arenaCraft -= shardPrice;
          _root.save.arenaChaosLeft += 1;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        costArr = new Array();
        costArr[15] = 10000000000.0;
        costArr[16] = 25000000000.0;
        costArr[17] = 50000000000.0;
        costArr[18] = 100000000000.0;
        costArr[19] = 250000000000.0;
        costArr[20] = 500000000000.0;
      }

      onClipEvent (enterFrame) {
        if (_root.save.arenaChaosMax >= 15 && _root.save.arenaChaosMax < 21 && _root.save.arenaPixel >= costArr[_root.save.arenaChaosMax]) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_root.save.arenaChaosMax >= 15 && _root.save.arenaChaosMax < 21) {
          _root.actiondescription = 'Click here to increase Dark Shard limit by 1 for <b>' + _root.withComma(costArr[_root.save.arenaChaosMax]) + '</b> Pixels.';
        } else {
          _root.actiondescription = '';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaChaosMax >= 15 && _root.save.arenaChaosMax < 21 && _root.save.arenaPixel >= costArr[_root.save.arenaChaosMax]) {
          _root.save.arenaPixel -= costArr[_root.save.arenaChaosMax];
          _root.save.arenaChaosLeft += 1;
          _root.save.arenaChaosMax += 1;
          if (_root.save.arenaChaosMax >= 15 && _root.save.arenaChaosMax < 21) {
            _root.actiondescription = 'Click here to increase Dark Shard limit by 1 for <b>' + _root.withComma(costArr[_root.save.arenaChaosMax]) + '</b> Pixels.';
          } else {
            _root.actiondescription = '';
          }
        }
      }
    }

    frame 14 {
      finalScore = _root.areaDamage;
      num = finalScore;
      div = 0;
      prim = true;
      if (num < 2 || num >= 9999999968.0) {
        prim = false;
      } else {
        i = 2;
        while (i <= Math.sqrt(num) + 1) {
          if (num % i == 0) {
            prim = false;
            div = i;
            i = num;
          }
          ++i;
        }
      }
      digArray = new Array();
      digCount = new Array();
      totalDig = 0;
      i = 0;
      while (i <= 9) {
        digCount[i] = 0;
        ++i;
      }
      if (num == 0) {
        digArray.push(0);
        digCount[0] = 1;
      }
      num = finalScore;
      palinum = 0;
      pali = false;
      while (num > 0) {
        totalDig += 1;
        palinum = palinum * 10 + num % 10;
        digArray.push(num % 10);
        digCount[num % 10] += 1;
        num = Math.floor(num / 10);
      }
      if (finalScore == palinum) {
        pali = true;
      }
      curConsec = -1;
      curConsecL = 0;
      maxConsec = -1;
      maxConsecL = 0;
      i = 0;
      while (i < digArray.length) {
        if (curConsec != digArray[i]) {
          curConsec = digArray[i];
          curConsecL = 1;
        } else {
          curConsecL += 1;
          if (maxConsecL <= curConsecL) {
            maxConsecL = curConsecL;
            maxConsec = curConsec;
          }
        }
        ++i;
      }
      uniqueCount = 0;
      allUnique = true;
      i = 0;
      while (i <= 9) {
        if (digCount[i] >= 1) {
          uniqueCount += 1;
        }
        if (digCount[i] >= 2) {
          allUnique = false;
        }
        ++i;
      }
      bonList = new Array();
      bonMult = new Array();
      bonList.push('No Bonus');
      bonMult.push(0);
      bonList.push('No Bonus');
      bonMult.push(0);
      if (finalScore > 0) {
        if (totalDig >= 2) {
          bonList.push(totalDig + ' Digits');
          bonMult.push(totalDig * 5);
        }
        if (finalScore % 100000000 == 0) {
          bonList.push('Divisible by 100,000,000');
          bonMult.push(400);
        } else {
          if (finalScore % 50000000 == 0) {
            bonList.push('Divisible by 50,000,000');
            bonMult.push(350);
          } else {
            if (finalScore % 25000000 == 0) {
              bonList.push('Divisible by 25,000,000');
              bonMult.push(325);
            } else {
              if (finalScore % 10000000 == 0) {
                bonList.push('Divisible by 10,000,000');
                bonMult.push(300);
              } else {
                if (finalScore % 5000000 == 0) {
                  bonList.push('Divisible by 5,000,000');
                  bonMult.push(275);
                } else {
                  if (finalScore % 2500000 == 0) {
                    bonList.push('Divisible by 2,500,000');
                    bonMult.push(250);
                  } else {
                    if (finalScore % 1000000 == 0) {
                      bonList.push('Divisible by 1,000,000');
                      bonMult.push(225);
                    } else {
                      if (finalScore % 500000 == 0) {
                        bonList.push('Divisible by 500,000');
                        bonMult.push(200);
                      } else {
                        if (finalScore % 250000 == 0) {
                          bonList.push('Divisible by 250,000');
                          bonMult.push(175);
                        } else {
                          if (finalScore % 100000 == 0) {
                            bonList.push('Divisible by 100,000');
                            bonMult.push(150);
                          } else {
                            if (finalScore % 50000 == 0) {
                              bonList.push('Divisible by 50,000');
                              bonMult.push(125);
                            } else {
                              if (finalScore % 25000 == 0) {
                                bonList.push('Divisible by 25,000');
                                bonMult.push(100);
                              } else {
                                if (finalScore % 10000 == 0) {
                                  bonList.push('Divisible by 10,000');
                                  bonMult.push(90);
                                } else {
                                  if (finalScore % 5000 == 0) {
                                    bonList.push('Divisible by 5,000');
                                    bonMult.push(80);
                                  } else {
                                    if (finalScore % 2500 == 0) {
                                      bonList.push('Divisible by 2,500');
                                      bonMult.push(70);
                                    } else {
                                      if (finalScore % 1000 == 0) {
                                        bonList.push('Divisible by 1,000');
                                        bonMult.push(60);
                                      } else {
                                        if (finalScore % 500 == 0) {
                                          bonList.push('Divisible by 500');
                                          bonMult.push(50);
                                        } else {
                                          if (finalScore % 250 == 0) {
                                            bonList.push('Divisible by 250');
                                            bonMult.push(40);
                                          } else {
                                            if (finalScore % 100 == 0) {
                                              bonList.push('Divisible by 100');
                                              bonMult.push(30);
                                            } else {
                                              if (finalScore % 50 == 0) {
                                                bonList.push('Divisible by 50');
                                                bonMult.push(25);
                                              } else {
                                                if (finalScore % 25 == 0) {
                                                  bonList.push('Divisible by 25');
                                                  bonMult.push(20);
                                                } else {
                                                  if (finalScore % 10 == 0) {
                                                    bonList.push('Divisible by 10');
                                                    bonMult.push(15);
                                                  } else {
                                                    if (finalScore % 5 == 0) {
                                                      bonList.push('Divisible by 5');
                                                      bonMult.push(10);
                                                    } else {
                                                      if (finalScore % 2 == 0) {
                                                        bonList.push('Divisible by 2');
                                                        bonMult.push(5);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (prim == true) {
          bonList.push('Prime');
          bonMult.push(50);
        }
        if (uniqueCount == 1) {
          bonList.push('Repdigit');
          bonMult.push(totalDig * 100);
        }
        if (pali == true) {
          bonList.push('Palindrome');
          bonMult.push(totalDig * 50 + uniqueCount * 50);
        }
        if (uniqueCount > 1 && allUnique == true) {
          bonList.push('All Unique Digits');
          bonMult.push(uniqueCount * 10);
        }
        if (maxConsecL >= 2) {
          bonList.push(maxConsecL + ' Consecutive ' + maxConsec + '\'s');
          bonMult.push(maxConsecL * 10);
        }
      }
      bon1ID = 0;
      bon2ID = 0;
      i = 1;
      while (i < bonMult.length) {
        if (bonMult[i] >= bonMult[bon1ID]) {
          bon1ID = i;
        }
        ++i;
      }
      i = 1;
      while (i < bonMult.length) {
        if (bonMult[i] >= bonMult[bon2ID] && i != bon1ID) {
          bon2ID = i;
        }
        ++i;
      }
      a1 = Math.floor(Math.pow(finalScore, 0.4) * 25 * _root.save.boost / 100) * 1000;
      b1 = Math.floor(Math.pow(finalScore, 0.4) * 0.05 + 1);
      t4.text = bonList[bon1ID] + ':';
      a2 = Math.ceil(a1 * bonMult[bon1ID] / 100);
      b2 = Math.ceil(b1 * bonMult[bon1ID] / 100);
      t7.text = bonList[bon2ID] + ':';
      a3 = Math.ceil(a1 * bonMult[bon2ID] / 100);
      b3 = Math.ceil(b1 * bonMult[bon2ID] / 100);
      if (_root.worstMoon == true) {
        a1 = Math.floor(a1 * 5);
        a2 = Math.floor(a2 * 5);
        a3 = Math.floor(a3 * 5);
        b1 = Math.floor(b1 * 5);
        b2 = Math.floor(b2 * 5);
        b3 = Math.floor(b3 * 5);
      }
      if (_root.apocalypse == true) {
        a1 = Math.floor(a1 * 2);
        a2 = Math.floor(a2 * 2);
        a3 = Math.floor(a3 * 2);
        b1 = Math.floor(b1 * 2);
        b2 = Math.floor(b2 * 2);
        b3 = Math.floor(b3 * 2);
      }
      if (_root.areaPract == true) {
        a1 = Math.floor(a1 * 0.001);
        a2 = Math.floor(a2 * 0.001);
        a3 = Math.floor(a3 * 0.001);
        b1 = 0;
        b2 = 0;
        b3 = 0;
      }
      a4 = a1 + a2 + a3;
      b4 = b1 + b2 + b3;
      t1.text = _root.withComma(finalScore);
      t2.text = '+' + _root.withComma(a1);
      t3.text = '+' + _root.withComma(b1);
      t5.text = '+' + _root.withComma(a2);
      t6.text = '+' + _root.withComma(b2);
      t8.text = '+' + _root.withComma(a3);
      t9.text = '+' + _root.withComma(b3);
      t10.text = '+' + _root.withComma(a4);
      t11.text = '+' + _root.withComma(b4);
      if (isNaN(a4)) {
        a4 = 0;
      }
      if (isNaN(b4)) {
        b4 = 0;
      }
      _root.gainEXP(a4);
      _root.save.battlePoint += b4;
      if (_root.save.raidSpecial < finalScore) {
        _root.save.raidSpecial = finalScore;
      }
    }

    frame 14 {
      onEnterFrame = null;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(15);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(15);
      }
    }

    frame 15 {
      onEnterFrame = null;
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(9);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(9);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(9);
      }
    }

    frame 16 {
      onEnterFrame = null;
    }
  }

  movieClip 4992  {

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.enhancerToUse = 0;
        _parent.gotoAndStop(2);
      }
    }
  }

  movieClip 5000  {

    frame 1 {
      _root.arenaSwap1 = 0;
      _root.enhancerToUse = 0;
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 1;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 2;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 3;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 4;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 5;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 6;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 7;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 8;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 9;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 10;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 11;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 12;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 13;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 14;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 15;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 16;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 17;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 18;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 19;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 20;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 21;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 22;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 23;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 24;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 25;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 26;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 27;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 28;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 29;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        iniSlot = 30;
      }
    }

    instance enhButton of movieClip 4992  {

      onClipEvent (load) {
        gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.arenaSwap1 = 0;
        _root.enhancerToUse = 0;
        _parent.enhButton.gotoAndStop(2);
        _root.invTab = 0;
        _root.toCheck = true;
        _root.gCheck = true;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.arenaSwap1 = 0;
        _root.enhancerToUse = 0;
        _parent.enhButton.gotoAndStop(2);
        _root.invTab = 1;
        _root.toCheck = true;
        _root.gCheck = true;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          _root.arenaSwap1 = 0;
          _root.enhancerToUse = 0;
          _parent.enhButton.gotoAndStop(2);
          _root.invTab = 2;
          _root.toCheck = true;
          _root.gCheck = true;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          _root.arenaSwap1 = 0;
          _root.enhancerToUse = 0;
          _parent.enhButton.gotoAndStop(2);
          _root.invTab = 4;
          _root.toCheck = true;
          _root.gCheck = true;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.saveid == 24) {
          _root.showPopup('NOOOOOOOOO!', 'You must resist your urges. You don\'t want to fail the challenge, do you?');
        } else {
          _root.arenaSwap1 = 0;
          _root.enhancerToUse = 0;
          _parent.enhButton.gotoAndStop(2);
          _root.invTab = 5;
          _root.toCheck = true;
          _root.gCheck = true;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.arenaSwap1 = 0;
        _root.enhancerToUse = 0;
        _parent.enhButton.gotoAndStop(2);
        _root.invTab = 6;
        _root.toCheck = true;
        _root.gCheck = true;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _root.arenaSwap1 = 0;
        _root.enhancerToUse = 0;
        _parent.enhButton.gotoAndStop(2);
        _root.invTab = 7;
        _root.toCheck = true;
        _root.gCheck = true;
      }
    }
  }

  button 5001 {

    on (release) {
      gotoAndStop(1);
    }
  }

  movieClip 5010  {

    frame 1 {
      onRollOut = function () {
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

    }
  }

  button 5076 {

    on (release) {
      if (_currentframe == 1) {
        _root.save.defStatPage = 2;
        gotoAndStop(2);
      } else {
        if (_currentframe == 2) {
          _root.save.defStatPage = 3;
          gotoAndStop(3);
        } else {
          _root.save.defStatPage = 1;
          gotoAndStop(1);
        }
      }
    }
  }

  movieClip 5193  {

    frame 1 {
      function viewStat() {
        t1.text = _root.withComma(_root.attackPower) + ' (base: ' + _root.withComma(_root.save.arenaAttack) + ')';
        t2.text = _root.withComma(_root.defensePower) + ' (base: ' + _root.withComma(_root.save.arenaDefense) + ')';
        t3.text = _root.withComma(_root.maxHealth) + ' (base: ' + _root.withComma(_root.save.arenaMaxHealth) + ')';
        t4.text = _root.withComma(_root.maxMana) + ' (base: ' + _root.withComma(_root.save.arenaMaxMana) + ')';
        t5.text = _root.withComma(_root.accuracyPct) + '% + ' + _root.withComma(_root.accuracy) + ' (base: ' + _root.withComma(_root.save.arenaAccuracy) + ')';
        t6.text = _root.withComma(_root.evasionPct) + '% + ' + _root.withComma(_root.evasion) + ' (base: ' + _root.withComma(_root.save.arenaEvasion) + ')';
        t7.text = _root.withComma(_root.arenaExpMult) + '%';
        t8.text = _root.withComma(_root.arenaCoinMult) + '%';
        t9.text = _root.withComma(_root.arenaPixelMult) + '%';
        t10.text = _root.withComma(_root.arenaDropRate) + '%';
        t11.text = _root.withComma(_root.spawnSpeed) + '%';
        t12.text = _root.withComma(_root.abilResistFire) + '%';
        t13.text = _root.withComma(_root.abilResistIce) + '%';
        t14.text = _root.withComma(_root.abilResistWind) + '%';
        t15.text = _root.withComma(_root.abilResistEarth) + '%';
        t16.text = _root.withComma(_root.abilResistThunder) + '%';
        t17.text = _root.withComma(_root.abilResistWater) + '%';
        t18.text = _root.withComma(_root.abilResistLight) + '%';
        t19.text = _root.withComma(_root.abilResistDark) + '%';
        t20.text = _root.withComma(_root.arenaRareRate) + '%';
        t21.text = _root.withComma(_root.arenaEpicRate) + '%';
      }

      stop();
      if (_root.save.defStatPage == 2) {
        gotoAndStop(2);
      }
      if (_root.save.defStatPage == 3) {
        gotoAndStop(3);
      }
      viewStat();
      statDelay = 0;
      onEnterFrame = function () {
        statDelay += 1;
        if (statDelay > 40) {
          statDelay = 0;
          viewStat();
        }
      };

    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Attack Power</b>\nIncreases the damage you deal to monsters. Acts as a Damage multiplier.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Defense Power</b>\nDecreases the damage you take from monsters. Acts as a Damage Resist multiplier.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Maximum HP</b>\nThe maximum HP you can have at a time. Higher maximum HP makes it easier to survive, and also increases the rate of HP recovery.\nLimit: 19,999,999';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Maximum MP</b>\nThe maximum MP you can have at a time. Higher maximum MP also increases the rate of MP recovery.\nLimit: 19,999,999';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Accuracy</b>\nIncreases the chance to hit monsters. Also, your Critical Chance is increased by 1% per 1,000 Accuracy you have.\nYou have an extra ' + _root.withComma(_root.accuracyPct) + '% chance to ignore monster\'s Evasion.\nHit Chance Limit: 90%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Evasion</b>\nIncreases the chance to dodge monsters\' attacks.\nYou have an extra ' + _root.withComma(_root.evasionPct) + '% chance to ignore monster\'s Accuracy and dodge the attack.\nDodge Chance Limit: 90%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>EXP</b>\nIncreases EXP you gain from killing monsters. Also increases Arena EXP gain.\nLimit: 1000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Coin</b>\nIncreases Coins you gain from killing monsters and looting. Does not increase the rate of Green Coins and Blue Coins.\nLimit: 2000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Pixel</b>\nIncreases Pixels and Crafting Material you gain from killing monsters and looting.\nLimit: 2000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Drop Rate</b>\nIncreases the chance of item dropping.\nLimit: 5000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Spawn Rate</b>\nDecreases the wait time between monsters.\nLimit: 500%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Fire Element</b>\nEach 1% of Fire Element increases your Attack by 1% when fighting Ice-element monsters and increases your Defense by 1% when fighting Fire-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Ice Element</b>\nEach 1% of Ice Element increases your Attack by 1% when fighting Wind-element monsters and increases your Defense by 1% when fighting Ice-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Wind Element</b>\nEach 1% of Wind Element increases your Attack by 1% when fighting Earth-element monsters and increases your Defense by 1% when fighting Wind-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Earth Element</b>\nEach 1% of Earth Element increases your Attack by 1% when fighting Thunder-element monsters and increases your Defense by 1% when fighting Earth-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Thunder Element</b>\nEach 1% of Thunder Element increases your Attack by 1% when fighting Water-element monsters and increases your Defense by 1% when fighting Thunder-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Water Element</b>\nEach 1% of Water Element increases your Attack by 1% when fighting Fire-element monsters and increases your Defense by 1% when fighting Water-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Light Element</b>\nEach 1% of Light Element increases your Attack by 1% when fighting Dark-element monsters and increases your Defense by 1% when fighting Light-element monsters.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Dark Element</b>\nEach 1% of Dark Element increases your Attack by 1% when fighting Light-element monsters and increases your Defense by 1% when fighting Dark-element monsters.';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaAttack, 1.3) * 0.1) * 400;
          if (_root.save.arenaAttack >= 65000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaAttack < 200) {
            cost = Math.floor(cost * 0.5);
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base Attack Power by 500\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaAttack += 500;
          updateStat();
          _root.actiondescription = 'Increase base Attack Power by 500\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaDefense, 1.3) * 0.1) * 400;
          if (_root.save.arenaDefense >= 65000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base Defense Power by 500\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaDefense += 500;
          updateStat();
          _root.actiondescription = 'Increase base Defense Power by 500\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaMaxHealth / 10, 1.3) * 0.1) * 400;
          if (_root.save.arenaMaxHealth >= 650000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base MaxHP by 5,000\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaMaxHealth += 5000;
          updateStat();
          _root.actiondescription = 'Increase base MaxHP by 5,000\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaMaxMana / 4, 1.3) * 0.125) * 400;
          if (_root.save.arenaMaxMana >= 260000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base MaxMP by 2,000\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaMaxMana += 2000;
          updateStat();
          _root.actiondescription = 'Increase base MaxMP by 2,000\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Rare Monster Rate</b>\nIncreases chance to encounter rare monsters (monsters with yellow name tag). Rare monsters give extra Coins and Pixels and drop more items.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Epic Monster Rate</b>\nIncreases chance to encounter epic monsters (monsters with green name tag). Epic monsters give extra EXP, Coins and Pixels and drop even more items.';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaAccuracy * 5, 1.3) * 0.1) * 400;
          if (_root.save.arenaAccuracy >= 13000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base Accuracy by 100\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaAccuracy += 100;
          updateStat();
          _root.actiondescription = 'Increase base Accuracy by 100\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function updateStat() {
          cost = Math.floor(Math.pow(_root.save.arenaEvasion * 5, 1.3) * 0.1) * 400;
          if (_root.save.arenaEvasion >= 13000 || _root.save.bannedB >= 1) {
            cost = Infinity;
          }
          if (_root.save.arenaPixel >= cost) {
            _alpha = 100;
          } else {
            _alpha = 30;
          }
        }

        updateStat();
      }

      onClipEvent (rollOver, dragOver) {
        updateStat();
        _root.actiondescription = 'Increase base Evasion by 100\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaPixel >= cost) {
          _root.save.arenaPixel -= cost;
          _root.save.arenaEvasion += 100;
          updateStat();
          _root.actiondescription = 'Increase base Evasion by 100\nCost: <font color=\'#FFFF00\'>' + _root.withComma(cost) + '</font> Pixels';
        }
      }
    }

    frame 2 {
      function viewStat() {
        t1.text = _root.withComma(_root.minDamage);
        t2.text = _root.withComma(_root.maxDamage);
        t3.text = _root.withComma(_root.damageResistPct) + '% + ' + _root.withComma(_root.damageResist);
        t4.text = _root.withComma(_root.minMult) + '%';
        t5.text = _root.withComma(_root.ignoreDefense) + '%';
        t6.text = _root.withComma(_root.magicResist) + '%';
        t7.text = _root.withComma(_root.weaponAttack);
        t8.text = _root.withComma(_root.weaponDefense);
        t9.text = _root.withComma(_root.attackSpeed);
        t10.text = _root.withComma(_root.doubleHit) + '%';
        t11.text = _root.withComma(_root.criticalChance) + '%';
        t12.text = _root.withComma(_root.criticalDamage) + '%';
        t13.text = _root.withComma(_root.damageReflect) + '%';
        t14.text = _root.withComma(_root.magicReflect) + '%';
        t15.text = _root.withComma(_root.instantKill) + '%';
        t16.text = _root.withComma(100 + _root.nonBossDamage) + '%';
        t17.text = _root.withComma(100 + _root.bossDamage) + '%';
        t18.text = _root.withComma(_root.potionEfficiency) + '%';
        t19.text = _root.withComma(_root.negateEffect) + '%';
        t20.text = _root.withComma(_root.rageDepletion) + '%';
        t21.text = _root.withComma(_root.ragePowerMult) + '%';
        t22.text = _root.withComma(_root.rageSpeedMult) + '%';
      }

      viewStat();
      statDelay = 0;
      onEnterFrame = function () {
        statDelay += 1;
        if (statDelay > 40) {
          statDelay = 0;
          viewStat();
        }
      };

    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Minimum Damage</b>\nMinimum damage dealt to a monster with 0 defense using a skill with 100% skill power.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Maximum Damage</b>\nMaximum damage dealt to a monster with 0 defense using a skill with 100% skill power.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Damage Resist</b>\nDamage to ignore when attacked by a monster. You take 1% less damage per 100 Defense on equipment.\nLimit: 90% + 1,999,999,999';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Mastery</b>\nActs as a minimum damage multiplier. Makes your damage less random.\nLimit: 95%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Ignore Defense</b>\nAllows you to ignore part of monster\'s defense when attacking. More effective against monsters with higher defense.\nLimit: 95%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Magic Resist</b>\nDecreases damage taken when hit by ranged attacks.\nLimit: 80%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Equipment Attack</b>\nTotal Attack on your equipment. Acts as a multiplier.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Equipment Defense</b>\nTotal Defense on your equipment. Acts as a multiplier.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Attack Speed</b>\nReduces the wait time between attacks. Also affects how fast you can use potions and your reflect damage.\nLimit: 25\nExtra Attack Speed will be converted to Double Hit Chance.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Double Hit</b>\nChance to hit 1 extra time when using attacking skills. Does not apply to Invisible Allies\' attacks.\nLimit: 95%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Critical Chance</b>\nChance to deal critical damage.\nLimit: 95%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Critical Damage</b>\nIt\'s kind of self-explanatory, right?\nLimit: 1000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Reflect Damage</b>\nAllows you to deal damage when attacked by a monster. You gain 2% Reflect Damage per Attack Speed. Damage dealt is based on your Attack. Does not apply to ranged attacks.\nLimit: 5000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Magic Reflect</b>\nSimilar to Reflect, but for monsters\' ranged attacks instead.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Negate Effect</b>\nChance to negate abnormal status effects.\nLimit: 80%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Rage Depletion</b>\nThe lower it is, the slower the RAGE meter drops.\nMinimum: 10%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Rage Attack</b>\nDamage bonus when your RAGE meter is full. Less effective if your RAGE meter is below 100%.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Rage Speed</b>\nAttack Speed bonus when your RAGE meter is full. Less effective if your RAGE meter is below 100%.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Instant Kill Chance</b>\nGrants a chance to instantly kill non-boss monsters when their HP is below 50%.\nLimit: 80%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Non-Boss Damage</b>\nDamage multiplier when fighting non-bosses.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Boss Damage</b>\nDamage multiplier when fighting bosses.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Potion Efficiency</b>\nIncreases the effect of recovery potions, and the duration of buff potions.';
      }
    }

    frame 3 {
      function viewStat() {
        t1.text = _root.withComma(_root.hpRecover);
        t2.text = _root.withComma(_root.mpRecover);
        t3.text = _root.withComma(_root.manaEater);
        t4.text = 'Lv. ' + _root.withComma(_root.lifeDrain);
        t5.text = 'Lv. ' + _root.withComma(_root.autoSteal);
        t6.text = _root.withComma(_root.save.arenaLevel);
        t7.text = _root.withComma(_root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10);
        t8.text = _root.withComma(_root.save.arenaSP);
        t11.text = _root.withComma(_root.poisonChance) + '%';
        t12.text = _root.withComma(_root.weakenChance) + '%';
        t13.text = _root.withComma(_root.blindChance) + '%';
        t14.text = _root.withComma(_root.stunChance) + '%';
        t15.text = _root.withComma(_root.poisonDamage) + '%';
        t16.text = '-' + _root.withComma(_root.weakenPower) + '%';
        t17.text = '-' + _root.withComma(_root.blindPower) + '%';
        t18.text = _root.withComma(_root.poisonDuration) + 's';
        t19.text = _root.withComma(_root.weakenDuration) + 's';
        t20.text = _root.withComma(_root.blindDuration) + 's';
      }

      viewStat();
      statDelay = 0;
      onEnterFrame = function () {
        statDelay += 1;
        if (statDelay > 40) {
          statDelay = 0;
          viewStat();
        }
      };

    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Poison Chance</b>\nChance of inflicting Poison when attacking. Once the effect wears off, the monster cannot be poisoned again for 0.5 seconds.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Weaken Chance</b>\nChance of inflicting Weaken when attacking. Once the effect wears off, the monster cannot be weakened again for 0.5 seconds.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Blind Chance</b>\nChance of inflicting Blind when attacking. Once the effect wears off, the monster cannot be blinded again for 0.5 seconds.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Stun Chance</b>\nChance of inflicting Stun when attacking. Once the effect wears off, the monster cannot be stunned again for 0.5 seconds.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Poison Damage</b>\nDamage to deal per 0.5 seconds when a monster is poisoned. Affected by your Attack.\nLimit: 5000%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Weaken Effect</b>\nMonster Attack/Defense reduction when weakened.\nLimit: -70%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Blind Effect</b>\nMonster Accuracy/Evasion reduction when blinded.\nLimit: -70%';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>HP Regen</b>\nHP to recover every second.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>MP Regen</b>\nMP to recover every second.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Mana Eater</b>\nMP to recover whenever you kill a monster.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Drain</b>\nAllows you to recover HP when you attack based on damage dealt. Higher Drain level increases HP gain per attack. Also reduces damage taken when HP is full by 0.2% per Drain level.\nLimit: Lv. 250';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Autosteal</b>\nAllows you to gain Coins and Pixels when you attack based on damage dealt. Higher Autosteal level increases Coin/Pixel gain per attack.\nLimit: Lv. 500';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Arena Rank</b>\nNot to be confused with Level. Increases your attack and defense. When you Rank up, you gain some stats and 20 Skill Points.\nLimit: 500';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Total SP</b>\nThe total number of Skill Points you have. Spend them in the \'Skill\' screen. Get more from increasing your Arena Rank, and from loot drops after you reach Rank 500.';
      }
    }

    instance of movieClip 5010  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Unspent SP</b>\nThe total number of Skill Points you haven\'t spent.';
      }
    }
  }

  movieClip 5194  {

    frame 1 {
      stop();
    }

    frame 2 {
      function autoSort() {
        VAL = new Array();
        VTEMP = 0;
        if (_root.invTab == 0) {
          i = 1;
          while (i <= 30) {
            VAL[i] = 9999999999.0;
            if (_root.save.inventoryExist[i] == 1) {
              VAL[i] = 100000;
              VAL[i] += _root.save.inventoryBonusPow[i];
              if (VAL[i] > 109999) {
                VAL[i] = 109999;
              }
              VAL[i] += _root.save.inventoryFrame[i] * 10000;
              if (_root.save.inventoryRange[i] == true) {
                VAL[i] += 100000000;
              }
            }
            ++i;
          }
          i = 1;
          while (i <= 29) {
            k = i + 1;
            while (k <= 30) {
              if (_root.save.arenaWeapon != i && _root.save.arenaWeapon != k && _root.save.arenaSubWeapon != i && _root.save.arenaSubWeapon != k) {
                if (VAL[i] > VAL[k]) {
                  VTEMP = VAL[i];
                  VAL[i] = VAL[k];
                  VAL[k] = VTEMP;
                  _root.swapArenaItem(i, k);
                }
              }
              ++k;
            }
            ++i;
          }
        } else {
          if (_root.invTab == 1) {
            i = 101;
            while (i <= 130) {
              VAL[i] = 9999999999.0;
              if (_root.save.inventoryExist[i] == 1) {
                VAL[i] = 100000;
                VAL[i] += _root.save.inventoryBonusPow[i];
                if (VAL[i] > 109999) {
                  VAL[i] = 109999;
                }
                VAL[i] += _root.save.inventoryFrame[i] * 10000;
                if (_root.save.inventorySubtype[i] == 'Hat') {
                  VAL[i] += 100000000;
                } else {
                  if (_root.save.inventorySubtype[i] == 'Shirt') {
                    VAL[i] += 200000000;
                  } else {
                    if (_root.save.inventorySubtype[i] == 'Gloves') {
                      VAL[i] += 300000000;
                    } else {
                      if (_root.save.inventorySubtype[i] == 'Pants') {
                        VAL[i] += 400000000;
                      } else {
                        if (_root.save.inventorySubtype[i] == 'Shoes') {
                          VAL[i] += 500000000;
                        } else {
                          if (_root.save.inventorySubtype[i] == 'Skin') {
                            VAL[i] += 600000000;
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++i;
            }
            i = 101;
            while (i <= 129) {
              k = i + 1;
              while (k <= 130) {
                if (_root.save.arenaHat != i && _root.save.arenaHat != k && _root.save.arenaShirt != i && _root.save.arenaShirt != k && _root.save.arenaGloves != i && _root.save.arenaGloves != k && _root.save.arenaPants != i && _root.save.arenaPants != k && _root.save.arenaShoes != i && _root.save.arenaShoes != k && _root.save.arenaSkin != i && _root.save.arenaSkin != k) {
                  if (VAL[i] > VAL[k]) {
                    VTEMP = VAL[i];
                    VAL[i] = VAL[k];
                    VAL[k] = VTEMP;
                    _root.swapArenaItem(i, k);
                  }
                }
                ++k;
              }
              ++i;
            }
          } else {
            if (_root.invTab == 5) {
              i = 501;
              while (i <= 530) {
                VAL[i] = 9999999999.0;
                if (_root.save.inventoryExist[i] == 1) {
                  VAL[i] = 100000;
                  VAL[i] += _root.save.inventoryBonusPow[i];
                  if (VAL[i] > 109999) {
                    VAL[i] = 109999;
                  }
                  VAL[i] += _root.save.inventoryFrame[i] * 10000;
                  if (_root.save.inventorySubtype[i] == 'Medal') {
                    VAL[i] += 100000000;
                  } else {
                    if (_root.save.inventorySubtype[i] == 'Pendant') {
                      VAL[i] += 200000000;
                    } else {
                      if (_root.save.inventorySubtype[i] == 'Earring') {
                        VAL[i] += 300000000;
                      } else {
                        if (_root.save.inventorySubtype[i] == 'Trinket') {
                          VAL[i] += 400000000;
                        }
                      }
                    }
                  }
                }
                ++i;
              }
              i = 501;
              while (i <= 529) {
                k = i + 1;
                while (k <= 530) {
                  if (_root.save.arenaMedal != i && _root.save.arenaMedal != k && _root.save.arenaPendant != i && _root.save.arenaPendant != k && _root.save.arenaEarring != i && _root.save.arenaEarring != k && _root.save.arenaTrinket != i && _root.save.arenaTrinket != k) {
                    if (VAL[i] > VAL[k]) {
                      VTEMP = VAL[i];
                      VAL[i] = VAL[k];
                      VAL[k] = VTEMP;
                      _root.swapArenaItem(i, k);
                    }
                  }
                  ++k;
                }
                ++i;
              }
            } else {
              if (_root.invTab == 2) {
                i = 201;
                while (i <= 230) {
                  VAL[i] = 9999999999.0;
                  if (_root.save.inventoryExist[i] == 1) {
                    VAL[i] = 100000;
                    VAL[i] += _root.save.inventoryBonusPow[i];
                    if (VAL[i] > 109999) {
                      VAL[i] = 109999;
                    }
                    VAL[i] += _root.save.inventoryFrame[i] * 10000;
                  }
                  ++i;
                }
                i = 201;
                while (i <= 229) {
                  k = i + 1;
                  while (k <= 230) {
                    if (VAL[i] > VAL[k]) {
                      VTEMP = VAL[i];
                      VAL[i] = VAL[k];
                      VAL[k] = VTEMP;
                      _root.swapArenaItem(i, k);
                    }
                    ++k;
                  }
                  ++i;
                }
              } else {
                if (_root.invTab == 4) {
                  i = 401;
                  while (i <= 430) {
                    VAL[i] = 9999999999.0;
                    if (_root.save.inventoryExist[i] == 1) {
                      VAL[i] = 100000;
                      VAL[i] += _root.save.inventoryDefense[i];
                      if (VAL[i] > 109999) {
                        VAL[i] = 109999;
                      }
                      VAL[i] += _root.save.inventoryFrame[i] * 10000;
                    }
                    ++i;
                  }
                  i = 401;
                  while (i <= 429) {
                    k = i + 1;
                    while (k <= 430) {
                      if (VAL[i] > VAL[k]) {
                        VTEMP = VAL[i];
                        VAL[i] = VAL[k];
                        VAL[k] = VTEMP;
                        _root.swapArenaItem(i, k);
                      }
                      ++k;
                    }
                    ++i;
                  }
                } else {
                  if (_root.invTab == 6) {
                    i = 601;
                    while (i <= 630) {
                      VAL[i] = 9999999999.0;
                      if (_root.save.inventoryExist[i] == 1) {
                        VAL[i] = 1000000;
                        VAL[i] += _root.save.inventoryBonusPow[i] * 10000;
                        VAL[i] += _root.save.inventoryFrame[i];
                      }
                      ++i;
                    }
                    i = 601;
                    while (i <= 629) {
                      k = i + 1;
                      while (k <= 630) {
                        if (_root.save.arenaOutfitHat != i && _root.save.arenaOutfitHat != k && _root.save.arenaOutfitShirt != i && _root.save.arenaOutfitShirt != k && _root.save.arenaOutfitGloves != i && _root.save.arenaOutfitGloves != k && _root.save.arenaOutfitPants != i && _root.save.arenaOutfitPants != k && _root.save.arenaOutfitShoes != i && _root.save.arenaOutfitShoes != k && _root.save.arenaOutfitSkin != i && _root.save.arenaOutfitSkin != k && _root.save.arenaOutfitEarring != i && _root.save.arenaOutfitEarring != k && _root.save.arenaOutfitMedal != i && _root.save.arenaOutfitMedal != k) {
                          if (VAL[i] > VAL[k]) {
                            VTEMP = VAL[i];
                            VAL[i] = VAL[k];
                            VAL[k] = VTEMP;
                            _root.swapArenaItem(i, k);
                          }
                        }
                        ++k;
                      }
                      ++i;
                    }
                  } else {
                    if (_root.invTab == 7) {
                      i = 701;
                      while (i <= 730) {
                        VAL[i] = 9999999999.0;
                        if (_root.save.inventoryExist[i] == 1) {
                          VAL[i] = 1000000;
                          VAL[i] -= _root.save.inventoryBonusPow[i] * 1000;
                          VAL[i] += _root.save.inventoryAttack[i];
                        }
                        ++i;
                      }
                      i = 701;
                      while (i <= 729) {
                        k = i + 1;
                        while (k <= 730) {
                          if (VAL[i] > VAL[k]) {
                            VTEMP = VAL[i];
                            VAL[i] = VAL[k];
                            VAL[k] = VTEMP;
                            _root.swapArenaItem(i, k);
                          }
                          ++k;
                        }
                        ++i;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _root.toCheck = true;
        _root.gCheck = true;
      }

      _root.arenaSwap1 = 0;
      _root.enhancerToUse = 0;
      _root.toCheck = true;
      _root.gCheck = true;
      _root.toCheckDel = 0;
      onEnterFrame = function () {
        if (_root.toCheck == true) {
          _root.toCheckDel += 1;
          if (_root.toCheckDel > 3) {
            _root.toCheckDel = 0;
            _root.toCheck = false;
          }
        }
        if (_root.house.arena._currentframe != 1) {
          _root.toCheck = true;
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Shift + Click to auto-sort items.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          _root.arenaSwap1 = 0;
          _root.enhancerToUse = 0;
          _parent.autoSort();
        }
      }
    }
  }

  movieClip 5196  {

    instance of movieClip 522  {

      onClipEvent (load) {
        function checkFrame() {
          tmpFr = _root.save.inventoryFrame[_root.save.arenaWeapon];
          gotoAndStop(_root.save.inventoryFrame[_root.save.arenaWeapon]);
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon') {
          }
          if (_root.save.inventoryRange[_root.save.arenaWeapon] != false) {
            _y = 40;
            _root.wpRange = 200;
          } else {
            _y = 40;
            _parent.scanLine._y = 40;
            while (_parent.scanLine.hitTest(this)) {
              _parent.scanLine._y -= 3;
            }
            _root.wpRange = Math.round((40 - _parent.scanLine._y) * 5 / 3);
          }
          trace('WEAPON RANGE: ' + _root.wpRange);
          _parent.scanLine._y = 1999;
        }

        tmpFr = -1;
        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (tmpFr != _root.save.inventoryFrame[_root.save.arenaWeapon]) {
          checkFrame();
        }
      }
    }
  }

  movieClip 5197  {
  }

  movieClip 5206  {

    frame 1 {
      if (_root.save.arenaHardcore == true) {
        zoneRecDamage *= 2.5;
        zoneRecResist *= 1.5;
        zoneRecAccuracy *= 1.5;
        zoneRecEvasion *= 1.5;
        zoneRecLevel *= 1.3;
        if (zoneRecLevel > 9001) {
          zoneRecLevel = 9001;
        }
      }
      zoneOver = 0;
      critMult = 1 + _root.criticalChance * (_root.criticalDamage - 100) / 10000;
      if (isNaN(critMult)) {
        critMult = 1;
      }
      zoneRecDamagePct = (_root.maxDamage * critMult / zoneRecDamage / (1 - _root.ignoreDefense / 500)) * (100 + _root.minMult);
      if (zoneRecDamagePct >= 50) {
        zoneRecDamagePct = 80 + zoneRecDamagePct * 0.2;
      } else {
        if (zoneRecDamagePct >= 30) {
          zoneRecDamagePct = 65 + zoneRecDamagePct * 0.5;
        } else {
          if (zoneRecDamagePct >= 20) {
            zoneRecDamagePct = 50 + zoneRecDamagePct * 1;
          } else {
            if (zoneRecDamagePct >= 10) {
              zoneRecDamagePct = 30 + zoneRecDamagePct * 2;
            } else {
              zoneRecDamagePct = +(zoneRecDamagePct * 5);
            }
          }
        }
      }
      if (zoneRecDamagePct > 100) {
        zoneRecDamagePct = 100;
      }
      zoneRecResistPct = ((_root.damageResist + _root.maxHealth / 10) / (zoneRecResist * (1 - _root.damageResistPct / 100) + 1)) * 100;
      if (zoneRecResistPct > 100) {
        zoneRecResistPct = 100;
      }
      zoneRecAccuracyPct = (_root.accuracy / zoneRecAccuracy) * 100;
      if (zoneRecAccuracyPct > 100) {
        zoneRecAccuracyPct = 100;
      } else {
        zoneRecAccuracyPct += (100 - zoneRecAccuracyPct) * _root.accuracyPct / 100;
      }
      DC = 1.1 - zoneRecEvasion / _root.evasion;
      if (DC > 0.9) {
        DC = 0.9;
      }
      if (DC < 0) {
        DC = 0;
      }
      zoneRecEvasionPct = _root.evasionPct + (100 - _root.evasionPct) * DC + 10;
      if (zoneRecEvasionPct > 100) {
        zoneRecEvasionPct = 100;
      }
      zoneRecLevelPct = (_root.save.level / zoneRecLevel) * (100 - _root.save.gDifficulty * 10);
      if (_root.save.level >= zoneRecLevel) {
        zoneRecLevelPct = 100;
      }
      zoneTotalPct = Math.floor((zoneRecDamagePct * 2.5 + zoneRecResistPct * 3.5 + zoneRecAccuracyPct * 1.5 + zoneRecEvasionPct * 1 + zoneRecLevelPct * 1.5) / 10);
      if (zoneTotalPct > zoneRecDamagePct * 3 + 15) {
        zoneTotalPct = zoneRecDamagePct * 3 + 15;
      }
      if (zoneTotalPct > zoneRecAccuracyPct * 3 + 15) {
        zoneTotalPct = zoneRecAccuracyPct * 3 + 15;
      }
      if (_root.save.arenaZone == zoneID) {
        gotoAndStop(1);
      } else {
        if (zoneSafe == true) {
          gotoAndStop(7);
        } else {
          if (noFactor == true) {
            gotoAndStop(8);
          } else {
            if (zoneTotalPct >= 95) {
              gotoAndStop(2);
            } else {
              if (zoneTotalPct >= 80) {
                gotoAndStop(3);
              } else {
                if (zoneTotalPct >= 65) {
                  gotoAndStop(4);
                } else {
                  if (zoneTotalPct >= 50) {
                    gotoAndStop(5);
                  } else {
                    gotoAndStop(6);
                  }
                }
              }
            }
          }
        }
      }
      onRollOver = function () {
        _root.actiondescription = '<b>' + zoneName + '</b>';
        if (_root.save.arenaZoneKill[zoneID] > 0) {
          _root.actiondescription += '\nKill count: <b>' + _root.withComma(_root.save.arenaZoneKill[zoneID]) + '</b>';
        }
        if (_root.save.arenaLevel >= zoneReqRank) {
          _root.actiondescription += '\n\n<font color=\'#00FF00\'>Required Rank: <b>' + zoneReqRank + '</b></font>';
        } else {
          _root.actiondescription += '\n\n<font color=\'#FF0000\'>Required Rank: <b>' + zoneReqRank + '</b></font>\nYour Arena Rank is not high enough.';
        }
        if (noFactor != true && zoneSafe != true) {
          if (zoneRecLevelPct >= 100) {
            _root.actiondescription += '\n<font color=\'#FFFF00\'>Monster Level: <b>' + _root.withComma(zoneRecLevel) + '</b></font>';
          } else {
            if (zoneRecLevelPct >= 70) {
              _root.actiondescription += '\n<font color=\'#FF9900\'>Monster Level: <b>' + _root.withComma(zoneRecLevel) + '</b></font>';
            } else {
              _root.actiondescription += '\n<font color=\'#FF0000\'>Monster Level: <b>' + _root.withComma(zoneRecLevel) + '</b></font>';
            }
          }
          _root.actiondescription += '\n<b>';
          tempJ = zoneRecLevelPct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#CCFF00\'>LEV: ||||||||||</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#DDFF00\'>LEV: |||||||||<font color=\'#999999\'>|</font></font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#EEFF00\'>LEV: ||||||||<font color=\'#999999\'>||</font></font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>LEV: |||||||<font color=\'#999999\'>|||</font></font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#FFDD00\'>LEV: ||||||<font color=\'#999999\'>||||</font></font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#FFBB00\'>LEV: |||||<font color=\'#999999\'>|||||</font></font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#FF9900\'>LEV: ||||<font color=\'#999999\'>||||||</font></font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#FF7700\'>LEV: |||<font color=\'#999999\'>|||||||</font></font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#FF5500\'>LEV: ||<font color=\'#999999\'>||||||||</font></font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF3300\'>LEV: |<font color=\'#999999\'>|||||||||</font></font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF1100\'>LEV: <font color=\'#999999\'>||||||||||</font></font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          tempJ = zoneRecDamagePct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#CCFF00\'>ATT: ||||||||||</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#DDFF00\'>ATT: |||||||||<font color=\'#999999\'>|</font></font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#EEFF00\'>ATT: ||||||||<font color=\'#999999\'>||</font></font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>ATT: |||||||<font color=\'#999999\'>|||</font></font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#FFDD00\'>ATT: ||||||<font color=\'#999999\'>||||</font></font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#FFBB00\'>ATT: |||||<font color=\'#999999\'>|||||</font></font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#FF9900\'>ATT: ||||<font color=\'#999999\'>||||||</font></font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#FF7700\'>ATT: |||<font color=\'#999999\'>|||||||</font></font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#FF5500\'>ATT: ||<font color=\'#999999\'>||||||||</font></font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF3300\'>ATT: |<font color=\'#999999\'>|||||||||</font></font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF1100\'>ATT: <font color=\'#999999\'>||||||||||</font></font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          tempJ = zoneRecResistPct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#CCFF00\'>DEF: ||||||||||</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#DDFF00\'>DEF: |||||||||<font color=\'#999999\'>|</font></font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#EEFF00\'>DEF: ||||||||<font color=\'#999999\'>||</font></font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>DEF: |||||||<font color=\'#999999\'>|||</font></font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#FFDD00\'>DEF: ||||||<font color=\'#999999\'>||||</font></font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#FFBB00\'>DEF: |||||<font color=\'#999999\'>|||||</font></font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#FF9900\'>DEF: ||||<font color=\'#999999\'>||||||</font></font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#FF7700\'>DEF: |||<font color=\'#999999\'>|||||||</font></font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#FF5500\'>DEF: ||<font color=\'#999999\'>||||||||</font></font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF3300\'>DEF: |<font color=\'#999999\'>|||||||||</font></font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF1100\'>DEF: <font color=\'#999999\'>||||||||||</font></font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          tempJ = zoneRecAccuracyPct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#CCFF00\'>ACC: ||||||||||</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#DDFF00\'>ACC: |||||||||<font color=\'#999999\'>|</font></font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#EEFF00\'>ACC: ||||||||<font color=\'#999999\'>||</font></font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>ACC: |||||||<font color=\'#999999\'>|||</font></font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#FFDD00\'>ACC: ||||||<font color=\'#999999\'>||||</font></font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#FFBB00\'>ACC: |||||<font color=\'#999999\'>|||||</font></font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#FF9900\'>ACC: ||||<font color=\'#999999\'>||||||</font></font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#FF7700\'>ACC: |||<font color=\'#999999\'>|||||||</font></font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#FF5500\'>ACC: ||<font color=\'#999999\'>||||||||</font></font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF3300\'>ACC: |<font color=\'#999999\'>|||||||||</font></font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF1100\'>ACC: <font color=\'#999999\'>||||||||||</font></font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          tempJ = zoneRecEvasionPct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#CCFF00\'>EVA: ||||||||||</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#DDFF00\'>EVA: |||||||||<font color=\'#999999\'>|</font></font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#EEFF00\'>EVA: ||||||||<font color=\'#999999\'>||</font></font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>EVA: |||||||<font color=\'#999999\'>|||</font></font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#FFDD00\'>EVA: ||||||<font color=\'#999999\'>||||</font></font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#FFBB00\'>EVA: |||||<font color=\'#999999\'>|||||</font></font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#FF9900\'>EVA: ||||<font color=\'#999999\'>||||||</font></font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#FF7700\'>EVA: |||<font color=\'#999999\'>|||||||</font></font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#FF5500\'>EVA: ||<font color=\'#999999\'>||||||||</font></font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF3300\'>EVA: |<font color=\'#999999\'>|||||||||</font></font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF1100\'>EVA: <font color=\'#999999\'>||||||||||</font></font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          tempJ = zoneTotalPct;
          if (tempJ >= 100) {
            _root.actiondescription += '\n<font color=\'#00CCFF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
          } else {
            if (tempJ >= 90) {
              _root.actiondescription += '\n<font color=\'#0099FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
            } else {
              if (tempJ >= 80) {
                _root.actiondescription += '\n<font color=\'#0066FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
              } else {
                if (tempJ >= 70) {
                  _root.actiondescription += '\n<font color=\'#0033FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                } else {
                  if (tempJ >= 60) {
                    _root.actiondescription += '\n<font color=\'#0000FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                  } else {
                    if (tempJ >= 50) {
                      _root.actiondescription += '\n<font color=\'#3300FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                    } else {
                      if (tempJ >= 40) {
                        _root.actiondescription += '\n<font color=\'#6600FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                      } else {
                        if (tempJ >= 30) {
                          _root.actiondescription += '\n<font color=\'#9900FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                        } else {
                          if (tempJ >= 20) {
                            _root.actiondescription += '\n<font color=\'#CC00FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                          } else {
                            if (tempJ >= 10) {
                              _root.actiondescription += '\n<font color=\'#FF00FF\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                            } else {
                              _root.actiondescription += '\n<font color=\'#FF00CC\'>Overall Rating: ' + Math.floor(tempJ) + '%</font>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _root.actiondescription += '</b>';
        }
        _root.actiondescription += '\n';
        if (_root.save.arenaZone == zoneID) {
          _root.actiondescription += '\n<font color=\'#7D007D\'><b>You are here.</b></font>';
        }
        if (zoneSafe == true) {
          _root.actiondescription += '\n<font color=\'#999999\'>This is a safe zone.</font>';
        } else {
          if (noFactor == true) {
          } else {
            if (zoneTotalPct >= 95) {
              _root.actiondescription += '\n<font color=\'#009900\'>This area is too easy for you.</font>';
            } else {
              if (zoneTotalPct >= 80) {
                _root.actiondescription += '\n<font color=\'#99FF00\'>This area is easy for you.</font>';
              } else {
                if (zoneTotalPct >= 65) {
                  _root.actiondescription += '\n<font color=\'#FFFF00\'>This area is recommended for you.</font>';
                } else {
                  if (zoneTotalPct >= 50) {
                    _root.actiondescription += '\n<font color=\'#FF9900\'>This area is difficult for you.</font>';
                  } else {
                    _root.actiondescription += '\n<font color=\'#FF0000\'>This area is too difficult for you.</font>';
                  }
                }
              }
            }
          }
        }
        canTeleport = true;
        if (zoneID == 20 || zoneID == 24 || zoneID == 25 || zoneID == 29 || zoneID >= 31 && zoneID <= 43 || zoneID == 47 || zoneID == 50 || zoneID >= 53 && zoneID <= 56 || zoneID == 59) {
          canTeleport = false;
        } else {
          if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79 || _root.save.arenaZone == 80 || _root.save.arenaZone == 81) {
            canTeleport = false;
          } else {
            if (_root.save.arenaZoneFound[zoneID] != 1) {
              canTeleport = false;
            }
          }
        }
        if (canTeleport == true) {
          _root.actiondescription += '\n<b><font color=\'#0099FF\'>Click here to teleport.</font></b>';
        }
      };

      onRollOut = function () {
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

      onRelease = function () {
        canTeleport = true;
        if (zoneID == 20 || zoneID == 24 || zoneID == 25 || zoneID == 29 || zoneID >= 31 && zoneID <= 43 || zoneID == 47 || zoneID == 50 || zoneID >= 53 && zoneID <= 56 || zoneID == 59) {
          canTeleport = false;
          _root.showPopup('Cannot Teleport', 'You cannot teleport to this location.');
        } else {
          if (_root.save.arenaZone == 20 || _root.save.arenaZone == 24 || _root.save.arenaZone == 25 || _root.save.arenaZone == 29 || _root.save.arenaZone >= 31 && _root.save.arenaZone <= 43 || _root.save.arenaZone == 47 || _root.save.arenaZone == 50 || _root.save.arenaZone >= 53 && _root.save.arenaZone <= 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 69 || _root.save.arenaZone == 78 || _root.save.arenaZone == 79 || _root.save.arenaZone == 80 || _root.save.arenaZone == 81) {
            canTeleport = false;
            _root.showPopup('Cannot Teleport', 'You cannot teleport from this location.');
          } else {
            if (_root.save.arenaZoneFound[zoneID] != 1) {
              canTeleport = false;
              _root.showPopup('Cannot Teleport', 'You cannot teleport to a location you haven\'t discovered.');
            } else {
              if (_root.save.arenaLevel < zoneReqRank) {
                canTeleport = false;
                _root.showPopup('Cannot Teleport', 'Your Rank is not high enough to teleport to this location.');
              } else {
                if (_root.house.arena.enemy.enemyID != 0) {
                  canTeleport = false;
                  _root.showPopup('Cannot Teleport', 'You cannot teleport when there is a monster.');
                }
              }
            }
          }
        }
        if (canTeleport == true) {
          _root.house.arena.travel(zoneID);
          _root.actiondescription = '';
          _parent._parent.gotoAndStop(1);
        }
      };

    }
  }

  movieClip 5209  {

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 0;
        zoneReqRank = 1;
        zoneName = 'Ye Olde Pub';
        zoneSafe = true;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 1;
        zoneReqRank = 1;
        zoneName = 'Beginner Training Zone';
        zoneSafe = false;
        zoneRecDamage = 200;
        zoneRecResist = 100;
        zoneRecAccuracy = 40;
        zoneRecEvasion = 90;
        zoneRecLevel = 25;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 2;
        zoneReqRank = 5;
        zoneName = 'Advanced Training Zone';
        zoneSafe = false;
        zoneRecDamage = 700;
        zoneRecResist = 750;
        zoneRecAccuracy = 120;
        zoneRecEvasion = 165;
        zoneRecLevel = 45;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 3;
        zoneReqRank = 10;
        zoneName = 'Mystic Forest';
        zoneSafe = false;
        zoneRecDamage = 2500;
        zoneRecResist = 2025;
        zoneRecAccuracy = 225;
        zoneRecEvasion = 1230;
        zoneRecLevel = 80;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 4;
        zoneReqRank = 15;
        zoneName = 'Night Forest';
        zoneSafe = false;
        zoneRecDamage = 15000;
        zoneRecResist = 6350;
        zoneRecAccuracy = 450;
        zoneRecEvasion = 1270;
        zoneRecLevel = 175;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 5;
        zoneReqRank = 20;
        zoneName = 'The Sky';
        zoneSafe = false;
        zoneRecDamage = 50000;
        zoneRecResist = 15750;
        zoneRecAccuracy = 1500;
        zoneRecEvasion = 2640;
        zoneRecLevel = 275;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 6;
        zoneReqRank = 25;
        zoneName = 'Deadlands';
        zoneSafe = false;
        zoneRecDamage = 160000;
        zoneRecResist = 15000;
        zoneRecAccuracy = 5670;
        zoneRecEvasion = 3780;
        zoneRecLevel = 400;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 7;
        zoneReqRank = 30;
        zoneName = 'Danger Zone';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 8;
        zoneReqRank = 35;
        zoneName = 'The Desert';
        zoneSafe = false;
        zoneRecDamage = 750000;
        zoneRecResist = 24750;
        zoneRecAccuracy = 9210;
        zoneRecEvasion = 6135;
        zoneRecLevel = 650;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 9;
        zoneReqRank = 40;
        zoneName = 'The Beach';
        zoneSafe = false;
        zoneRecDamage = 560000;
        zoneRecResist = 39750;
        zoneRecAccuracy = 8310;
        zoneRecEvasion = 6390;
        zoneRecLevel = 1000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 10;
        zoneReqRank = 45;
        zoneName = 'Binary Battlefield';
        zoneSafe = false;
        zoneRecDamage = 18000000;
        zoneRecResist = 106500;
        zoneRecAccuracy = 16650;
        zoneRecEvasion = 16650;
        zoneRecLevel = 1800;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 11;
        zoneReqRank = 50;
        zoneName = 'Dragon Cave';
        zoneSafe = false;
        zoneRecDamage = 65000000;
        zoneRecResist = 141000;
        zoneRecAccuracy = 23400;
        zoneRecEvasion = 23400;
        zoneRecLevel = 2500;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 12;
        zoneReqRank = 55;
        zoneName = 'Pirate Ship';
        zoneSafe = false;
        zoneRecDamage = 200000000;
        zoneRecResist = 315000;
        zoneRecAccuracy = 33600;
        zoneRecEvasion = 31750;
        zoneRecLevel = 4000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 13;
        zoneReqRank = 60;
        zoneName = 'Triangle Land';
        zoneSafe = false;
        zoneRecDamage = 9000000000.0;
        zoneRecResist = 1350000;
        zoneRecAccuracy = 90000;
        zoneRecEvasion = 90000;
        zoneRecLevel = 8000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 45;
        zoneReqRank = 70;
        zoneName = 'Hole of Time';
        zoneSafe = true;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 19;
        zoneReqRank = 70;
        zoneName = '2012: Ye Olde Pub';
        zoneSafe = false;
        zoneRecDamage = 2000000000;
        zoneRecResist = 15000000;
        zoneRecAccuracy = 150000;
        zoneRecEvasion = 150000;
        zoneRecLevel = 9001;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 46;
        zoneReqRank = 90;
        zoneName = 'Deserted Alley';
        zoneSafe = true;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 29;
        zoneReqRank = 90;
        zoneName = 'The Special Arena';
        zoneSafe = false;
        zoneRecDamage = 500000000;
        zoneRecResist = 1200000;
        zoneRecAccuracy = 31500;
        zoneRecEvasion = 43500;
        zoneRecLevel = 6000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 15;
        zoneReqRank = 20;
        zoneName = 'Polluted Sky';
        zoneSafe = false;
        zoneRecDamage = 70000;
        zoneRecResist = 15750;
        zoneRecAccuracy = 2820;
        zoneRecEvasion = 2820;
        zoneRecLevel = 300;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 20;
        zoneReqRank = 35;
        zoneName = 'Dark Pyramid';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 48;
        zoneReqRank = 250;
        zoneName = 'Pokayman City';
        zoneSafe = false;
        zoneRecDamage = 10000000000.0;
        zoneRecResist = 800000;
        zoneRecAccuracy = 68000;
        zoneRecEvasion = 1000000;
        zoneRecLevel = 6500;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 49;
        zoneReqRank = 250;
        zoneName = 'Not Copyright Infringement';
        zoneSafe = false;
        zoneRecDamage = 10000000000.0;
        zoneRecResist = 1950000;
        zoneRecAccuracy = 75000;
        zoneRecEvasion = 1000000;
        zoneRecLevel = 7000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 28;
        zoneReqRank = 70;
        zoneName = 'Pirate Ship Interior';
        zoneSafe = false;
        zoneRecDamage = 45000000;
        zoneRecResist = 150000;
        zoneRecAccuracy = 22500;
        zoneRecEvasion = 22500;
        zoneRecLevel = 2300;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 30;
        zoneReqRank = 70;
        zoneName = '-Infinity: Prehistoric Area';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 31;
        zoneReqRank = 70;
        zoneName = 'Prehistoric Mission';
        zoneSafe = false;
        zoneRecDamage = 5000000000.0;
        zoneRecResist = 3700000;
        zoneRecAccuracy = 9000;
        zoneRecEvasion = 75000;
        zoneRecLevel = 4000;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 22;
        zoneReqRank = 70;
        zoneName = '9001: Ye Olde Pub';
        zoneSafe = true;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 23;
        zoneReqRank = 70;
        zoneName = '9001: Mystic Forest';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 24;
        zoneReqRank = 70;
        zoneName = 'Defend Mission';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 25;
        zoneReqRank = 70;
        zoneName = 'Secret Lab';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 18;
        zoneReqRank = 40;
        zoneName = 'Dark Portal';
        zoneSafe = false;
        zoneRecDamage = 5000000000.0;
        zoneRecResist = 3000000;
        zoneRecAccuracy = 60000;
        zoneRecEvasion = 45000;
        zoneRecLevel = 5000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 27;
        zoneReqRank = 70;
        zoneName = 'Frosty Zone';
        zoneSafe = false;
        zoneRecDamage = 116000000;
        zoneRecResist = 184500;
        zoneRecAccuracy = 27000;
        zoneRecEvasion = 27000;
        zoneRecLevel = 3000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 26;
        zoneReqRank = 70;
        zoneName = 'Volcano Peak';
        zoneSafe = false;
        zoneRecDamage = 12000000;
        zoneRecResist = 57000;
        zoneRecAccuracy = 12000;
        zoneRecEvasion = 12000;
        zoneRecLevel = 1300;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 17;
        zoneReqRank = 40;
        zoneName = 'Scary Graveyard';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 16;
        zoneReqRank = 40;
        zoneName = 'Secret Beach';
        zoneSafe = false;
        zoneRecDamage = 5000000;
        zoneRecResist = 53250;
        zoneRecAccuracy = 10245;
        zoneRecEvasion = 10245;
        zoneRecLevel = 1200;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 14;
        zoneReqRank = 40;
        zoneName = 'Ropeless Room';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 51;
        zoneReqRank = 250;
        zoneName = 'Secret Entrance';
        zoneSafe = true;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        zoneRecLevel = 1;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 52;
        zoneReqRank = 250;
        zoneName = 'Spooky Crypt';
        zoneSafe = false;
        zoneRecDamage = 1000000000;
        zoneRecResist = 6000000;
        zoneRecAccuracy = 150000;
        zoneRecEvasion = 125000;
        zoneRecLevel = 7000;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 53;
        zoneReqRank = 250;
        zoneName = 'Secret Dungeon';
        zoneSafe = false;
        zoneRecDamage = 10000000000.0;
        zoneRecResist = 2850000;
        zoneRecAccuracy = 67500;
        zoneRecEvasion = 60000;
        zoneRecLevel = 9001;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 57;
        zoneReqRank = 150;
        zoneName = 'Censor Ship';
        zoneSafe = false;
        zoneRecDamage = 6000000000.0;
        zoneRecResist = 2250000;
        zoneRecAccuracy = 675000;
        zoneRecEvasion = 990000;
        zoneRecLevel = 7000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 21;
        zoneReqRank = 65;
        zoneName = 'Mystic Path';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1;
        zoneRecEvasion = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 44;
        zoneReqRank = 65;
        zoneName = 'Smiley Island';
        zoneSafe = false;
        zoneRecDamage = 660000000;
        zoneRecResist = 990000;
        zoneRecAccuracy = 90000;
        zoneRecEvasion = 90000;
        zoneRecLevel = 6000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 47;
        zoneReqRank = 160;
        zoneName = 'Tower of DOOOOOOM';
        zoneSafe = false;
        zoneRecDamage = 1337000000;
        zoneRecResist = 2000000;
        zoneRecAccuracy = 109500;
        zoneRecEvasion = 102000;
        zoneRecLevel = 9000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 60;
        zoneReqRank = 50;
        zoneName = 'Foodlandistan';
        zoneSafe = false;
        zoneRecDamage = 1;
        zoneRecResist = 1;
        zoneRecAccuracy = 1000;
        zoneRecEvasion = 1000;
        zoneRecLevel = 1000;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 61;
        zoneReqRank = 180;
        zoneName = 'Abandoned Lab';
        zoneSafe = false;
        zoneRecDamage = 900000000;
        zoneRecResist = 6000000;
        zoneRecAccuracy = 44000;
        zoneRecEvasion = 99000;
        zoneRecLevel = 7500;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 68;
        zoneReqRank = 180;
        zoneName = 'Triangle Hideout';
        zoneSafe = false;
        zoneRecDamage = 5000000000.0;
        zoneRecResist = 47500000;
        zoneRecAccuracy = 500000;
        zoneRecEvasion = 500000;
        zoneRecLevel = 1;
        noFactor = true;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 62;
        zoneReqRank = 40;
        zoneName = 'Lullaby Lake';
        zoneSafe = false;
        zoneRecDamage = 1100000000;
        zoneRecResist = 600000;
        zoneRecAccuracy = 40000;
        zoneRecEvasion = 40000;
        zoneRecLevel = 4200;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 63;
        zoneReqRank = 40;
        zoneName = 'Billygoat Bridge';
        zoneSafe = false;
        zoneRecDamage = 2500000000.0;
        zoneRecResist = 1350000;
        zoneRecAccuracy = 75000;
        zoneRecEvasion = 75000;
        zoneRecLevel = 5000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 64;
        zoneReqRank = 40;
        zoneName = 'Fabled Forest';
        zoneSafe = false;
        zoneRecDamage = 5500000000.0;
        zoneRecResist = 2100000;
        zoneRecAccuracy = 90000;
        zoneRecEvasion = 90000;
        zoneRecLevel = 6100;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 65;
        zoneReqRank = 40;
        zoneName = 'Fortress Foothills';
        zoneSafe = false;
        zoneRecDamage = 10000000000.0;
        zoneRecResist = 3500000;
        zoneRecAccuracy = 105000;
        zoneRecEvasion = 90000;
        zoneRecLevel = 7000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 66;
        zoneReqRank = 40;
        zoneName = 'Castle Grimm';
        zoneSafe = false;
        zoneRecDamage = 18000000000.0;
        zoneRecResist = 6000000;
        zoneRecAccuracy = 120000;
        zoneRecEvasion = 120000;
        zoneRecLevel = 8000;
        noFactor = false;
      }
    }

    instance of movieClip 5206  {

      onClipEvent (load) {
        zoneID = 67;
        zoneReqRank = 40;
        zoneName = 'Throne Room';
        zoneSafe = false;
        zoneRecDamage = 60000000000.0;
        zoneRecResist = 10500000;
        zoneRecAccuracy = 150000;
        zoneRecEvasion = 150000;
        zoneRecLevel = 8900;
        noFactor = false;
      }
    }
  }

  button 5210 {

    on (release) {
      gotoAndStop(1);
    }
  }

  movieClip 5211  {

    frame 1 {
      stop();
    }

    instance of movieClip 5197  {

      onClipEvent (release) {
      }
    }
  }

  movieClip 5223  {

    frame 1 {
      stop();
    }
  }

  movieClip 5239  {
  }

  movieClip 5248  {

    frame 1 {
      function checkDescInside() {
        skillMaxF = _root.arenaSkillMaxF[skillID];
        skillMaxF2 = _root.arenaSkillMaxF[skillID];
        maxInc = -1;
        if (skillOffset != -1 && !isNaN(skillOffset) && skillMax >= skillMaxF && _root.save.arenaSkillBook >= 1240) {
          maxInc = Math.floor((_root.save.battlePoint - skillOffset * 1000) / 40000) + 1;
          if (maxInc > 25) {
            maxInc = 25;
          }
          if (maxInc < 0) {
            maxInc = 0;
          }
          _root.save.arenaSkillMax[skillID] = skillMaxF + maxInc;
          skillMax = skillMaxF + maxInc;
          if (_root.save.battlePoint >= 500) {
            skillMaxF2 += 25;
          }
        }
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillIcon.gotoAndStop(skillID + 101);
        } else {
          skillIcon.gotoAndStop(skillID + 1);
        }
        skillNameText.text = skillName;
        skillLevelText.text = 'Lv. ' + skillLevel + ' / ' + skillMax;
        if (skillLevel >= skillMax && skillMax > skillMaxF) {
          skillLevelText.textColor = 6749952;
        } else {
          if (skillLevel >= skillMaxF) {
            skillLevelText.textColor = 16738047;
          } else {
            if (skillMax >= skillMaxF) {
              skillLevelText.textColor = 16776960;
            } else {
              skillLevelText.textColor = 6750207;
            }
          }
        }
        bar._xscale = (skillLevel / skillMax) * 100;
        if (skillLevel >= skillMax && skillMax > skillMaxF) {
          bar.gotoAndStop(4);
        } else {
          if (skillLevel >= skillMaxF) {
            bar.gotoAndStop(3);
          } else {
            if (skillLevel >= skillMax) {
              bar.gotoAndStop(2);
            } else {
              bar.gotoAndStop(1);
            }
          }
        }
      }

      stop();
      checkDesc();
      if (_root.save.arenaLevel < reqRank) {
        gotoAndStop(2);
      }
      onEnterFrame = function () {
        if (skillLevel != _root.save.arenaSkill[skillID]) {
          checkDesc();
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        spCost = _root.save.arenaSkill[_parent.skillID] + 1;
        if (spCost > 10) {
          spCost = 10;
        }
        _root.actiondescription = 'Click to raise this skill\'s level by 1.\nSP Cost: ' + spCost + '\n\nYou can hold Space while clicking to raise skill level by 5 per click, or hold Ctrl + Space while clicking to raise skill level as much as possible.\n\nAlternatively, you can click the skill icon.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        maxI = 1;
        if (Key.isDown(32)) {
          maxI = 5;
          if (Key.isDown(17)) {
            maxI = 99;
          }
        }
        i = 1;
        while (i <= maxI) {
          spCost = _root.save.arenaSkill[_parent.skillID] + 1;
          if (spCost > 10) {
            spCost = 10;
          }
          if (_root.save.arenaSP >= spCost && _root.save.arenaSkill[_parent.skillID] < _parent.skillMax) {
            _root.save.arenaSP -= spCost;
            _root.save.arenaTotalSkill += 1;
            _root.save.arenaTotalSP += spCost;
            _root.save.arenaSkill[_parent.skillID] += 1;
          }
          _parent.checkDesc();
          spCost = _root.save.arenaSkill[_parent.skillID] + 1;
          if (spCost > 10) {
            spCost = 10;
          }
          _root.actiondescription = 'Click to raise this skill\'s level by 1.\nSP Cost: ' + spCost + '\n\nYou can hold Space while clicking to raise skill level by 5 per click, or hold Ctrl + Space while clicking to raise skill level as much as possible.\n\nAlternatively, you can click the skill icon.';
          ++i;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Click to drop this skill\'s level by 1 and gain all the SP spent back.\n\nYou can hold Space while clicking to drop skill level by 5 per click, or hold Ctrl + Space while clicking to drop skill level as much as possible.\n\nAlternatively, you can Shift + Click the skill icon.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        maxI = 1;
        if (Key.isDown(32)) {
          maxI = 5;
          if (Key.isDown(17)) {
            maxI = 99;
          }
        }
        i = 1;
        while (i <= maxI) {
          spCost = _root.save.arenaSkill[_parent.skillID];
          if (spCost > 10) {
            spCost = 10;
          }
          if (_root.save.arenaPixel >= _root.resetCost && _root.save.arenaSkill[_parent.skillID] > 0) {
            _root.save.arenaPixel -= _root.resetCost;
            _root.save.arenaTotalSkill -= 1;
            _root.save.arenaSP += spCost;
            _root.save.arenaTotalSP -= spCost;
            _root.save.arenaSkill[_parent.skillID] -= 1;
          }
          _parent.checkDesc();
          ++i;
        }
      }
    }

    instance skillIcon of movieClip 1389  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<font color=\'#FFFF00\'><b>' + _parent.skillName + '</b></font>';
        _root.actiondescription += '\nLevel: <b>' + _parent.skillLevel + ' / ' + _parent.skillMax + '</b>';
        if (_parent.skillMax < _parent.skillMaxF) {
          _root.actiondescription += '\n<font color=\'#9900FF\'>[Max: <b>' + _parent.skillMaxF + ' with Skill Book]</b></font>';
        } else {
          if (_parent.maxInc >= 0 && _parent.maxInc <= 24 && _root.save.battlePoint >= 500) {
            _root.actiondescription += '\n<font color=\'#CCFF66\'>[+1 Max Level at <b>' + _root.withComma(_parent.maxInc * 40000 + _parent.skillOffset * 1000) + '</b> BP]\nCurrent BP: <b>' + _root.withComma(_root.save.battlePoint) + '</b></font>';
          }
        }
        _root.actiondescription += '\n__________\n' + _parent.skillDesc + '\n__________';
        if (_parent.skillLevel > 0) {
          _root.actiondescription += '\n\n<font color=\'#FFCCCC\'>[Current Level: ' + _parent.skillLevel + ']</font>\n' + _parent.rollDescA;
        }
        if (_parent.skillLevel < _parent.skillMaxF2) {
          _root.actiondescription += '\n\n<font color=\'#CCCCFF\'>[Next Level: ' + (_parent.skillLevel + 1) + ']</font>\n' + _parent.rollDescB;
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (Key.isDown(16)) {
          maxI = 1;
          if (Key.isDown(32)) {
            maxI = 5;
            if (Key.isDown(17)) {
              maxI = 99;
            }
          }
          i = 1;
          while (i <= maxI) {
            spCost = _root.save.arenaSkill[_parent.skillID];
            if (spCost > 10) {
              spCost = 10;
            }
            if (_root.save.arenaPixel >= _root.resetCost && _root.save.arenaSkill[_parent.skillID] > 0) {
              _root.save.arenaPixel -= _root.resetCost;
              _root.save.arenaTotalSkill -= 1;
              _root.save.arenaSP += spCost;
              _root.save.arenaTotalSP -= spCost;
              _root.save.arenaSkill[_parent.skillID] -= 1;
            }
            _parent.checkDesc();
            _root.actiondescription = '<font color=\'#FFFF00\'><b>' + _parent.skillName + '</b></font>';
            _root.actiondescription += '\nLevel: <b>' + _parent.skillLevel + ' / ' + _parent.skillMax + '</b>';
            if (_parent.skillMax < _parent.skillMaxF) {
              _root.actiondescription += '\n<font color=\'#9900FF\'>[Max: <b>' + _parent.skillMaxF + ' with Skill Book]</b></font>';
            } else {
              if (_parent.maxInc >= 0 && _parent.maxInc <= 24 && _root.save.battlePoint >= 500) {
                _root.actiondescription += '\n<font color=\'#CCFF66\'>[+1 Max Level at <b>' + _root.withComma(_parent.maxInc * 40000 + _parent.skillOffset * 1000) + '</b> BP]\nCurrent BP: <b>' + _root.withComma(_root.save.battlePoint) + '</b></font>';
              }
            }
            _root.actiondescription += '\n__________\n' + _parent.skillDesc + '\n__________';
            if (_parent.skillLevel > 0) {
              _root.actiondescription += '\n\n<font color=\'#FFCCCC\'>[Current Level: ' + _parent.skillLevel + ']</font>\n' + _parent.rollDescA;
            }
            if (_parent.skillLevel < _parent.skillMaxF2) {
              _root.actiondescription += '\n\n<font color=\'#CCCCFF\'>[Next Level: ' + (_parent.skillLevel + 1) + ']</font>\n' + _parent.rollDescB;
            }
            ++i;
          }
        } else {
          maxI = 1;
          if (Key.isDown(32)) {
            maxI = 5;
            if (Key.isDown(17)) {
              maxI = 99;
            }
          }
          i = 1;
          while (i <= maxI) {
            spCost = _root.save.arenaSkill[_parent.skillID] + 1;
            if (spCost > 10) {
              spCost = 10;
            }
            if (_root.save.arenaSP >= spCost && _root.save.arenaSkill[_parent.skillID] < _parent.skillMax) {
              _root.save.arenaSP -= spCost;
              _root.save.arenaTotalSP += spCost;
              _root.save.arenaTotalSkill += 1;
              _root.save.arenaSkill[_parent.skillID] += 1;
            }
            _parent.checkDesc();
            _root.actiondescription = '<font color=\'#FFFF00\'><b>' + _parent.skillName + '</b></font>';
            _root.actiondescription += '\nLevel: <b>' + _parent.skillLevel + ' / ' + _parent.skillMax + '</b>';
            if (_parent.skillMax < _parent.skillMaxF) {
              _root.actiondescription += '\n<font color=\'#9900FF\'>[Max: <b>' + _parent.skillMaxF + ' with Skill Book]</b></font>';
            } else {
              if (_parent.maxInc >= 0 && _parent.maxInc <= 24 && _root.save.battlePoint >= 500) {
                _root.actiondescription += '\n<font color=\'#CCFF66\'>[+1 Max Level at <b>' + _root.withComma(_parent.maxInc * 40000 + _parent.skillOffset * 1000) + '</b> BP]\nCurrent BP: <b>' + _root.withComma(_root.save.battlePoint) + '</b></font>';
              }
            }
            _root.actiondescription += '\n__________\n' + _parent.skillDesc + '\n__________';
            if (_parent.skillLevel > 0) {
              _root.actiondescription += '\n\n<font color=\'#FFCCCC\'>[Current Level: ' + _parent.skillLevel + ']</font>\n' + _parent.rollDescA;
            }
            if (_parent.skillLevel < _parent.skillMaxF2) {
              _root.actiondescription += '\n\n<font color=\'#CCCCFF\'>[Next Level: ' + (_parent.skillLevel + 1) + ']</font>\n' + _parent.rollDescB;
            }
            ++i;
          }
        }
      }
    }

    frame 2 {
      skillNameText.text = 'Required Rank: ' + reqRank;
    }
  }

  movieClip 5263  {
  }

  movieClip 5270  {

    frame 1 {
      stop();
    }

    frame 2 {
      loadCode = '0';
      i = 1;
      while (i <= 66) {
        loadCode += ',' + _root.save.arenaSkill[i];
        ++i;
      }
      buildText.text = loadCode;
    }

    instance of movieClip 5263  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        textToCopy = _parent.loadCode;
        System.setClipboard(textToCopy);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        textToCopy = '';
        textToCopy += '*LOAD CODE:*\n\n';
        textToCopy += '<pre>' + _parent.loadCode + '</pre>';
        textToCopy += '\n\n';
        textToCopy += '*SKILLS:*\n\n<pre>';
        i = 1;
        while (i <= 66) {
          tempLevel = _root.save.arenaSkill[i];
          if (tempLevel > 0) {
            tempMax = _root.save.arenaSkillMax[i];
            if (tempLevel < 10) {
              tempLevel = ' ' + tempLevel;
            }
            if (tempMax < 10) {
              tempMax = ' ' + tempMax;
            }
            textToCopy += '\nLv. ' + tempLevel + ' / ' + tempMax + '  ' + _root.arenaSkillNameF[i];
          }
          ++i;
        }
        textToCopy += '</pre>\n\n';
        textToCopy += '*SP NEEDED:* ' + _root.withComma(_root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10 - _root.save.arenaSP);
        System.setClipboard(textToCopy);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        textToCopy = '';
        textToCopy += 'h2. Stats\n\n';
        textToCopy += '\nPlayer Name: ' + _root.kongregate_username;
        textToCopy += '\nLv. *' + _root.withComma(_root.save.level) + '*';
        if (_root.save.banned > 0) {
          textToCopy += ' [▲ +' + _root.save.banned + ']';
          if (_root.save.gDifficulty == 3) {
            textToCopy += ' – IMPOSSIBLE';
          } else {
            if (_root.save.gDifficulty == 2) {
              textToCopy += ' – HARD';
            } else {
              if (_root.save.gDifficulty == 1) {
                textToCopy += ' – MEDIUM';
              }
            }
          }
        }
        textToCopy += '\nFighter Career: *Lv. ' + _root.withComma(_root.save.careerLevel[3]) + '*';
        if (_root.save.careerActive[3] > 0 || _root.save.careerBoost[3] > 0) {
          textToCopy += ' (ACTIVE)';
        } else {
          textToCopy += ' (INACTIVE)';
        }
        textToCopy += '\nItem Maker Career: *Lv. ' + _root.withComma(_root.save.careerLevel[4]) + '*';
        textToCopy += '\nRank: *' + _root.save.arenaLevel + '*';
        if (_root.save.bannedB > 0) {
          textToCopy += ' [△ +' + _root.save.bannedB + ']';
        }
        textToCopy += '\nRobacon Rank: *' + _root.save.robaconLevel + '*';
        textToCopy += '\nBP: *' + _root.withComma(_root.save.battlePoint) + '*';
        textToCopy += '\nCP: *' + _root.withComma(_root.save.collectionPoint) + '*';
        textToCopy += '\n';
        ringArray = ['(No ring equipped)', 'Health', 'Mana', 'Power', 'Speed', 'Mastery', 'Critical', 'Defense', 'Reflection', 'Accuracy', 'Evasion', 'Leech', 'Chaos', 'Encounter', 'Experience', 'Greed', 'Protection', 'Luck', 'Combo', 'Chronos', 'Rage', 'Resistance', 'Cruelty'];
        buffArray = ['(No buff)', 'Power', 'Master', 'Reward', 'Nightmare', 'Enrage', 'Elemental Boost', 'Invincibility', 'Anti–Curse', 'Loot Magnet', 'Monster Magnet', 'Air Bubble', 'Elixir of Greatness', 'Rebirth'];
        textToCopy += '\nRing: *' + ringArray[_root.save.arenaRing] + '*';
        textToCopy += '\nBuff: *' + buffArray[_root.save.arenaBuffType] + '* (Effect: *' + _root.withComma(_root.buffMultiplier * 100) + '%*)';
        if (_root.save.arenaAlly != 0) {
          textToCopy += '\nInvisible Ally: [#' + _root.save.arenaAlly + '] *==' + _root.enemyList[_root.save.arenaAlly].name + '==* [+' + _root.save.arenaAllyUpgrade[_root.save.arenaAlly] + ']';
        } else {
          textToCopy += '\nInvisible Ally: *(No Invisible Ally equipped)*';
        }
        _root.attackPower = Math.floor((_root.save.arenaAttack + _root.abilIncAttack) * (1 + _root.save.arenaSkill[9] * 0.01 + Math.ceil(_root.save.arenaSkill[12] / 2) * 0.01 + _root.curCareerLevel[3] * 0.001 + _root.abilAttack * 0.01 + _root.allyAttack * 0.01));
        if (_root.save.arenaBuffType == 4) {
          _root.attackPower = Math.floor(_root.attackPower * 0.01);
        }
        tempDamage = Math.ceil((7.0e-06 * Math.pow(_root.save.arenaLevel, 0.5) * Math.pow(_root.save.level, 0.5) + 0.01) * _root.attackPower * _root.weaponAttack * 1 + _root.attackPower);
        if (_root.worstMoon == true) {
          tempDamage = Math.floor(Math.pow(tempDamage, 0.95));
        }
        textToCopy += '\n';
        textToCopy += '\nATT: *' + _root.withComma(_root.attackPower) + ' (' + _root.withComma(_root.save.arenaAttack) + ')*';
        textToCopy += '\nDEF: *' + _root.withComma(_root.defensePower) + ' (' + _root.withComma(_root.save.arenaDefense) + ')*';
        textToCopy += '\nACC: *' + _root.accuracyPct + '% + ' + _root.withComma(_root.accuracy) + ' (' + _root.withComma(_root.save.arenaAccuracy) + ')*';
        textToCopy += '\nEVA: *' + _root.evasionPct + '% + ' + _root.withComma(_root.evasion) + ' (' + _root.withComma(_root.save.arenaEvasion) + ')*';
        textToCopy += '\nMaxHP: *' + _root.withComma(_root.maxHealth) + ' (' + _root.withComma(_root.save.arenaMaxHealth) + ')*';
        textToCopy += '\nMaxMP: *' + _root.withComma(_root.maxMana) + ' (' + _root.withComma(_root.save.arenaMaxMana) + ')*';
        textToCopy += '\nMax Spirit: *' + _root.withComma(_root.maxSpirit) + '*';
        textToCopy += '\n';
        textToCopy += '\nEquip ATT: *' + _root.withComma(_root.weaponAttack) + '*';
        textToCopy += '\nEquip DEF: *' + _root.withComma(_root.weaponDefense) + '*';
        textToCopy += '\n';
        textToCopy += '\nMax Damage: *' + _root.withComma(tempDamage) + '* (at 0 Combo + 0% Rage)';
        textToCopy += '\nMastery: *' + _root.withComma(_root.minMult) + '%*';
        textToCopy += '\nIgnore DEF: *' + _root.ignoreDefense + '%*';
        textToCopy += '\nDamage Resist: *' + _root.withComma(_root.damageResistPct) + '% + ' + _root.withComma(_root.damageResist) + '*';
        textToCopy += '\nMagic Resist: *' + _root.withComma(_root.magicResist) + '%' + '*';
        textToCopy += '\nAttack Speed: *' + _root.withComma(_root.attackSpeed) + '*';
        textToCopy += '\nDouble Hit: *' + _root.withComma(_root.doubleHit) + '%*';
        textToCopy += '\nCrit. Chance: *' + _root.withComma(_root.criticalChance) + '%*';
        textToCopy += '\nCrit. Damage: *' + _root.withComma(_root.criticalDamage) + '%*';
        textToCopy += '\nReflect: *' + _root.withComma(_root.damageReflect) + '%*';
        textToCopy += '\nMagic Reflect: *' + _root.withComma(_root.magicReflect) + '%*';
        textToCopy += '\nInstant Kill: *' + _root.withComma(_root.instantKill) + '%*';
        textToCopy += '\nNon–Boss Damage: *' + _root.withComma(_root.nonBossDamage + 100) + '%*';
        textToCopy += '\nBoss Damage: *' + _root.withComma(_root.bossDamage + 100) + '%*';
        textToCopy += '\nPotion Efficiency: *' + _root.withComma(_root.potionEfficiency) + '%*';
        textToCopy += '\nNegate Effect: *' + _root.withComma(_root.negateEffect) + '%*';
        textToCopy += '\nRage Depletion: *' + _root.withComma(_root.rageDepletion) + '%*';
        textToCopy += '\nRage Power: *' + _root.withComma(_root.ragePowerMult) + '%*';
        textToCopy += '\nRage Speed: *' + _root.withComma(_root.rageSpeedMult) + '%*';
        textToCopy += '\nHP Regen: *' + _root.withComma(_root.hpRecover) + '* / 1 sec';
        textToCopy += '\nMP Regen: *' + _root.withComma(_root.mpRecover) + '* / 1 sec';
        textToCopy += '\nDrain: *Lv. ' + _root.withComma(_root.lifeDrain) + '*';
        textToCopy += '\nMana Eater: *' + _root.withComma(_root.manaEater) + '* / kill';
        textToCopy += '\n';
        textToCopy += '\nPoison Chance: *' + _root.withComma(_root.poisonChance) + '%*';
        textToCopy += '\nPoison Damage: *' + _root.withComma(_root.poisonDamage) + '%*';
        textToCopy += '\nPoison Duration: *' + _root.withComma(_root.poisonDuration) + ' sec*';
        textToCopy += '\nWeaken Chance: *' + _root.withComma(_root.weakenChance) + '%*';
        textToCopy += '\nWeaken Effect: *' + _root.withComma(_root.weakenPower) + '%*';
        textToCopy += '\nWeaken Duration: *' + _root.withComma(_root.weakenDuration) + ' sec*';
        textToCopy += '\nBlind Chance: *' + _root.withComma(_root.blindChance) + '%*';
        textToCopy += '\nBlind Effect: *' + _root.withComma(_root.blindPower) + '%*';
        textToCopy += '\nBlind Duration: *' + _root.withComma(_root.blindDuration) + ' sec*';
        textToCopy += '\nStun Chance: *' + _root.withComma(_root.stunChance) + '%*';
        textToCopy += '\n';
        textToCopy += '\nAutosteal: *Lv. ' + _root.withComma(_root.autoSteal) + '*';
        textToCopy += '\nEXP: *' + _root.withComma(_root.arenaExpMult) + '%*';
        textToCopy += '\nCoin: *' + _root.withComma(_root.arenaCoinMult) + '%*';
        textToCopy += '\nPixel: *' + _root.withComma(_root.arenaPixelMult) + '%*';
        textToCopy += '\nDrop: *' + _root.withComma(_root.arenaDropRate) + '%*';
        textToCopy += '\nSpawn: *' + _root.withComma(_root.spawnSpeed) + '%*';
        textToCopy += '\nRare Rate: *' + _root.withComma(_root.arenaRareRate) + '%*';
        textToCopy += '\nEpic Rate: *' + _root.withComma(_root.arenaEpicRate) + '%*';
        textToCopy += '\n';
        textToCopy += '\nFire: *' + _root.withComma(_root.abilResistFire) + '%*';
        textToCopy += '\nIce: *' + _root.withComma(_root.abilResistIce) + '%*';
        textToCopy += '\nWind: *' + _root.withComma(_root.abilResistWind) + '%*';
        textToCopy += '\nEarth: *' + _root.withComma(_root.abilResistEarth) + '%*';
        textToCopy += '\nThunder: *' + _root.withComma(_root.abilResistThunder) + '%*';
        textToCopy += '\nWater: *' + _root.withComma(_root.abilResistWater) + '%*';
        textToCopy += '\nLight: *' + _root.withComma(_root.abilResistLight) + '%*';
        textToCopy += '\nDark: *' + _root.withComma(_root.abilResistDark) + '%*';
        textToCopy += '\n\n___h2. Resources\n';
        textToCopy += '\nPixel: *' + _root.withComma(_root.save.arenaPixel) + '*';
        textToCopy += '\nCrafting Material: *' + _root.withComma(_root.save.arenaCraft) + '*';
        textToCopy += '\nSuperior Crafting Material: *' + _root.withComma(_root.save.arenaSuperiorCraft) + '*';
        textToCopy += '\nUnobtainium: *' + _root.withComma(_root.save.arenaUnobtainium) + '*';
        textToCopy += '\nEnhancer Fragment: *' + _root.withComma(_root.save.arenaEnhancerFragment) + '*';
        textToCopy += '\nChaotic Fragment of Chaos: *' + _root.withComma(_root.save.arenaChaoticFragment) + '*';
        textToCopy += '\nProof of Training: *' + _root.withComma(_root.save.arenaProofTraining) + '*';
        textToCopy += '\nProof of Mission: *' + _root.withComma(_root.save.arenaProofMission) + '*';
        textToCopy += '\nBacon: *' + _root.withComma(_root.save.arenaBacon) + ' + ' + _root.withComma(_root.save.robaconBacon) + '*';
        textToCopy += '\nCrystal of Rarity: *' + _root.withComma(_root.save.arenaCrystal1) + '*';
        textToCopy += '\nCrystal of Ultimate Rarity: *' + _root.withComma(_root.save.arenaCrystal2) + '*';
        textToCopy += '\n\n___h2. Equipment\n';
        i = 0;
        while (i <= 12) {
          if (i == 1) {
            tempType = 'Weapon';
          }
          if (i == 2) {
            tempType = 'SubWeapon';
          }
          if (i == 3) {
            tempType = 'Hat';
          }
          if (i == 4) {
            tempType = 'Shirt';
          }
          if (i == 5) {
            tempType = 'Gloves';
          }
          if (i == 6) {
            tempType = 'Pants';
          }
          if (i == 7) {
            tempType = 'Shoes';
          }
          if (i == 8) {
            tempType = 'Skin';
          }
          if (i == 9) {
            tempType = 'Pendant';
          }
          if (i == 10) {
            tempType = 'Earring';
          }
          if (i == 11) {
            tempType = 'Trinket';
          }
          if (i == 12) {
            tempType = 'Medal';
          }
          if (i == 0) {
            curEquipped = 400;
            if (curEquipped != 0 && _root.save.inventoryName[curEquipped] != undefined && _root.save.inventoryName[curEquipped] != undefined) {
              textToCopy += '\n\n<br><big>Robacon\'s Weapon</big>';
              textToCopy += '\n*' + _root.save.inventoryName[curEquipped] + '* ==[+' + _root.save.inventoryEnhance[curEquipped] + ']==';
              if (_root.save.inventorySpirit[curEquipped] == true) {
                textToCopy += ' – SPIRIT';
              }
              if (_root.save.inventoryLevel[curEquipped] == 9999) {
                textToCopy += ' – FINALIZED';
              } else {
                if (_root.save.inventoryNoFuse[curEquipped] == true) {
                  textToCopy += ' – FUSED';
                }
              }
              if (_root.save.inventoryNoBonus[curEquipped] == true && _root.save.inventoryLevel[curEquipped] != 9999) {
                textToCopy += ' – BONUS LOCKED';
              }
              if (_root.save.inventoryExpiry[curEquipped] != Infinity) {
                textToCopy += ' – TEMP.';
              }
              if (_root.save.inventoryName[curEquipped].indexOf('(Cursed)') != -1) {
                textToCopy += ' – CURSED';
              }
              textToCopy += '\n\n* Rank: *' + _root.save.inventoryReqRank[curEquipped] + '* | Unob. Enhancement: *' + _root.save.inventoryUnob[curEquipped] + '*';
              if (_root.save.inventoryLevel[curEquipped] != 9999 && _root.save.inventoryMaxLevel[curEquipped] > 1) {
                textToCopy += '\n* Item Level: *' + _root.save.inventoryLevel[curEquipped] + ' / ' + _root.save.inventoryMaxLevel[curEquipped] + '*';
              }
              textToCopy += '\n* ATT: *' + _root.withComma(_root.save.inventoryAttack[curEquipped]) + '* | SPD: *' + _root.withComma(_root.save.inventorySpeed[curEquipped]) + '* | DEF: *' + _root.withComma(_root.save.inventoryDefense[curEquipped]) + '* | CRIT: *' + _root.withComma(_root.save.inventoryCrit[curEquipped]) + '* | DEX: *' + _root.withComma(_root.save.inventoryDexterity[curEquipped]) + '* | HP: *' + _root.withComma(_root.save.inventoryHealth[curEquipped]) + '*';
              textToCopy += '\n* Bonuses: [' + _root.save.inventoryBonus[curEquipped] + '] – [' + _root.save.inventoryAbility[curEquipped] + '] – [' + _root.save.inventoryMoreBonus[curEquipped] + ']';
            }
          } else {
            if (i >= 1) {
              curEquipped = _root.save['arena' + tempType];
              if (curEquipped != 0 && _root.save.inventoryName[curEquipped] != undefined && _root.save.inventoryName[curEquipped] != undefined) {
                if (i == 2) {
                  textToCopy += '\n\n<br><big>Secondary Weapon</big>';
                } else {
                  textToCopy += '\n\n<br><big>' + tempType + '</big>';
                }
                textToCopy += '\n*' + _root.save.inventoryName[curEquipped] + '* ==[+' + _root.save.inventoryEnhance[curEquipped] + ']==';
                if (_root.save.inventorySpirit[curEquipped] == true) {
                  textToCopy += ' – SPIRIT';
                }
                if (_root.save.inventoryLevel[curEquipped] == 9999) {
                  textToCopy += ' – FINALIZED';
                } else {
                  if (_root.save.inventoryNoFuse[curEquipped] == true) {
                    textToCopy += ' – FUSED';
                  }
                }
                if (_root.save.inventoryNoBonus[curEquipped] == true && _root.save.inventoryLevel[curEquipped] != 9999) {
                  textToCopy += ' – BONUS LOCKED';
                }
                if (_root.save.inventoryExpiry[curEquipped] != Infinity) {
                  textToCopy += ' – TEMP.';
                }
                if (_root.save.inventoryName[curEquipped].indexOf('(Cursed)') != -1) {
                  textToCopy += ' – CURSED';
                }
                textToCopy += '\n\n* Rank: *' + _root.save.inventoryReqRank[curEquipped] + '* | Unob. Enhancement: *' + _root.save.inventoryUnob[curEquipped] + '*';
                if (_root.save.inventoryLevel[curEquipped] != 9999 && _root.save.inventoryMaxLevel[curEquipped] > 1) {
                  textToCopy += '\n* Item Level: *' + _root.save.inventoryLevel[curEquipped] + ' / ' + _root.save.inventoryMaxLevel[curEquipped] + '*';
                }
                textToCopy += '\n* ATT: *' + _root.withComma(_root.save.inventoryAttack[curEquipped]) + '* | SPD: *' + _root.withComma(_root.save.inventorySpeed[curEquipped]) + '* | DEF: *' + _root.withComma(_root.save.inventoryDefense[curEquipped]) + '* | CRIT: *' + _root.withComma(_root.save.inventoryCrit[curEquipped]) + '* | DEX: *' + _root.withComma(_root.save.inventoryDexterity[curEquipped]) + '* | HP: *' + _root.withComma(_root.save.inventoryHealth[curEquipped]) + '*';
                textToCopy += '\n* Bonuses: [' + _root.save.inventoryBonus[curEquipped] + '] – [' + _root.save.inventoryAbility[curEquipped] + '] – [' + _root.save.inventoryMoreBonus[curEquipped] + ']';
              }
            }
          }
          ++i;
        }
        textToCopy += '\n\n___h2. Skills\n\n';
        textToCopy += '*LOAD CODE:*\n\n';
        textToCopy += '<pre>' + _parent.loadCode + '</pre>';
        textToCopy += '\n\n';
        textToCopy += '*SKILLS:*\n\n<pre>';
        i = 1;
        while (i <= 66) {
          tempLevel = _root.save.arenaSkill[i];
          if (tempLevel > 0) {
            tempMax = _root.save.arenaSkillMax[i];
            if (tempLevel < 10) {
              tempLevel = ' ' + tempLevel;
            }
            if (tempMax < 10) {
              tempMax = ' ' + tempMax;
            }
            textToCopy += '\nLv. ' + tempLevel + ' / ' + tempMax + '  ' + _root.arenaSkillNameF[i];
          }
          ++i;
        }
        textToCopy += '\n';
        i = 1;
        while (i <= 66) {
          tempLevel = _root.save.arenaSkill[i];
          if (tempLevel == 0 && _root.arenaSkillNameF[i] != '') {
            tempMax = _root.save.arenaSkillMax[i];
            if (tempMax < 10) {
              tempMax = ' ' + tempMax;
            }
            textToCopy += '\nLv.  0 / ' + tempMax + '  ' + _root.arenaSkillNameF[i];
          }
          ++i;
        }
        textToCopy += '</pre>\n\n';
        textToCopy += '*TOTAL SP:* ' + _root.withComma(_root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10);
        textToCopy += '\n*REMAINING SP:* ' + _root.withComma(_root.save.arenaSP);
        System.setClipboard(textToCopy);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }
  }

  movieClip 5272  {

    frame 1 {
      function checkCost() {
        _root.resetCost = 0;
        _root.resetCostMax = 0;
        if (_root.eventName == 'SP Reset Day') {
          _root.resetCost = 0;
          _root.resetCostMax = 0;
        } else {
          if (_root.save.arenaLevel >= 1000) {
            _root.resetCost = _root.save.arenaLevel * _root.save.arenaLevel * 4;
            _root.resetCostMax = _root.save.arenaLevel * _root.save.arenaLevel * 1 * _root.save.arenaTotalSkill;
          }
        }
      }

      stop();
      if (skillCodeInput == undefined) {
        skillCodeInput = '';
      }
      checkCost();
      onEnterFrame = function () {
        spText.text = _root.withComma(_root.save.arenaSP);
        maxText.text = _root.withComma(_root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10);
        checkCost();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(3);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(4);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(5);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(6);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(7);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(8);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent._parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(9);
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(100 + (skillLevel + 0) * 5);
          pow1B = Math.floor(100 + (skillLevel + 1) * 5);
          pow2A = Math.floor(200 + (skillLevel + 0) * 10);
          pow2B = Math.floor(200 + (skillLevel + 1) * 10);
          rollDescA = 'Basic Attack Power: ' + pow1A + '%\nAuto Fight Power: ' + pow1A + '%';
          rollDescB = 'Basic Attack Power: ' + pow1B + '%\nAuto Fight Power: ' + pow1B + '%';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            rollDescA = 'Basic Attack Power: ' + pow2A + '% + 0.2% per Spirit\nAuto Fight Power: ' + pow2A + '% + 0.2% per Spirit';
            rollDescB = 'Basic Attack Power: ' + pow2B + '% + 0.2% per Spirit\nAuto Fight Power: ' + pow2B + '% + 0.2% per Spirit';
          }
          checkDescInside();
        }

        reqRank = 1;
        skillID = 54;
        skillOffset = -1;
        skillName = 'Basic Attack';
        skillDesc = 'Your basic attack. Costs no MP. Also improves Auto Fight power.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillDesc = 'Your basic attack. Costs no Spirit. Also improves Auto Fight power.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(200 + (skillLevel + 0) * 10);
          pow1B = Math.floor(200 + (skillLevel + 1) * 10);
          pow2A = Math.floor(10 + (skillLevel + 0) * 4);
          pow2B = Math.floor(10 + (skillLevel + 1) * 4);
          pow3A = Math.floor(750 + (skillLevel + 0) * 25);
          pow3B = Math.floor(750 + (skillLevel + 1) * 25);
          pow4A = Math.floor(1 + skillLevel / 10);
          pow4B = Math.floor(1 + (skillLevel + 1) / 10);
          rollDescA = 'MP Cost: ' + pow1A + '\nRecovery: ' + pow2A + '% of MaxHP\nReduces the duration of Poison, Weaken, Blind and Slow by ' + pow4A + ' sec\nPower: ' + pow3A + '% (vs. Undead)';
          rollDescB = 'MP Cost: ' + pow1B + '\nRecovery: ' + pow2B + '% of MaxHP\nReduces the duration of Poison, Weaken, Blind and Slow by ' + pow4B + ' sec\nPower: ' + pow3B + '% (vs. Undead)';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow2A = Math.floor(20 + (skillLevel + 0) * 8);
            pow2B = Math.floor(20 + (skillLevel + 1) * 8);
            pow3A = Math.floor(1500 + (skillLevel + 0) * 50);
            pow3B = Math.floor(1500 + (skillLevel + 1) * 50);
            rollDescA = 'Spirit Cost: 5\nRecovery: ' + pow2A + '% of MaxHP\nReduces the duration of Poison, Weaken, Blind and Slow by ' + pow4A + ' sec\nPower: ' + pow3A + '% (vs. Undead)';
            rollDescB = 'Spirit Cost: 5\nRecovery: ' + pow2B + '% of MaxHP\nReduces the duration of Poison, Weaken, Blind and Slow by ' + pow4B + ' sec\nPower: ' + pow3B + '% (vs. Undead)';
          }
          checkDescInside();
        }

        reqRank = 10;
        skillID = 5;
        skillOffset = -1;
        skillName = 'Heal';
        skillDesc = 'Use some MP to heal yourself, recover from status effects and damage undead monsters. Ignore 100% of undead monsters\' DEF. If you are zombified, this skill will not allow you to recover from status effects and will cause you to lose HP.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillDesc = 'Use some Spirit to heal yourself, recover from status effects and damage undead monsters. Ignore 100% of undead monsters\' DEF. If you are zombified, this skill will not allow you to recover from status effects and will cause you to lose HP.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(70 + (skillLevel + 0) * 1);
          pow1B = Math.floor(70 + (skillLevel + 1) * 1);
          pow2A = Math.floor(50 + (skillLevel + 0) * 1);
          pow2B = Math.floor(50 + (skillLevel + 1) * 1);
          pow3A = Math.floor(160 - (skillLevel + 0) * 2);
          pow3B = Math.floor(160 - (skillLevel + 1) * 2);
          rollDescA = 'MP Cost: ' + pow1A + '\nPower: ' + pow2A + '% x 3\nDelay between attacks: ' + pow3A;
          rollDescB = 'MP Cost: ' + pow1B + '\nPower: ' + pow2B + '% x 3\nDelay between attacks: ' + pow3B;
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor(80 - (skillLevel + 0) * 1);
            pow1B = Math.floor(80 - (skillLevel + 1) * 1);
            pow2A = Math.floor(600 + (skillLevel + 0) * 20);
            pow2B = Math.floor(600 + (skillLevel + 1) * 20);
            pow3A = Math.floor(2 + (skillLevel + 0) * 0.1);
            pow3B = Math.floor(2 + (skillLevel + 1) * 0.1);
            rollDescA = 'Spirit Cost: ' + pow1A + '\nPower: ' + pow2A + '% + 0.5% per Spirit\nFor ' + pow3A + ' seconds, 100% chance to Double Hit for 2x damage';
            rollDescB = 'Spirit Cost: ' + pow1B + '\nPower: ' + pow2B + '% + 0.5% per Spirit\nFor ' + pow3B + ' seconds, 100% chance to Double Hit for 2x damage';
          }
          checkDescInside();
        }

        reqRank = 10;
        skillID = 1;
        skillOffset = -1;
        skillName = 'Quick Attack';
        skillDesc = 'Attack quickly, dealing damage to the monster multiple times.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Double Attack';
          skillDesc = 'Use some Spirit to deal greater damage and deal damage extra times for a short while.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(700 + (skillLevel + 0) * 10);
          pow1B = Math.floor(700 + (skillLevel + 1) * 10);
          pow2A = Math.floor(550 + (skillLevel + 0) * 10);
          pow2B = Math.floor(550 + (skillLevel + 1) * 10);
          pow3A = Math.floor(210 - (skillLevel + 0) * 2);
          pow3B = Math.floor(210 - (skillLevel + 1) * 2);
          rollDescA = 'MP Cost: ' + pow1A + '\nPower: ' + pow2A + '%\nDelay between attacks: ' + pow3A;
          rollDescB = 'MP Cost: ' + pow1B + '\nPower: ' + pow2B + '%\nDelay between attacks: ' + pow3B;
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor(160 - (skillLevel + 0) * 2);
            pow1B = Math.floor(160 - (skillLevel + 1) * 2);
            pow2A = Math.floor(900 + (skillLevel + 0) * 30);
            pow2B = Math.floor(900 + (skillLevel + 1) * 30);
            pow3A = Math.floor(2 + (skillLevel + 0) * 0.1);
            pow3B = Math.floor(2 + (skillLevel + 1) * 0.1);
            rollDescA = 'Spirit Cost: ' + pow1A + '\nPower: ' + pow2A + '% + 1% per Spirit\nFor ' + pow3A + ' seconds, always Critical for 2.5x Critical Damage';
            rollDescB = 'Spirit Cost: ' + pow1B + '\nPower: ' + pow2B + '% + 1% per Spirit\nFor ' + pow3B + ' seconds, always Critical for 2.5x Critical Damage';
          }
          checkDescInside();
        }

        reqRank = 30;
        skillID = 2;
        skillOffset = -1;
        skillName = 'Power Attack';
        skillDesc = 'Attack slowly, but deal extremely high damage to the monster.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Critical Strike';
          skillDesc = 'Use some Spirit to deal massive critical damage for a short while.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(+((skillLevel + 0) * 1));
          pow1B = Math.floor(+((skillLevel + 1) * 1));
          pow2A = Math.floor(+((skillLevel + 0) * 4));
          pow2B = Math.floor(+((skillLevel + 1) * 4));
          pow3A = Math.floor(+((skillLevel + 0) * 5));
          pow3B = Math.floor(+((skillLevel + 1) * 5));
          rollDescA = 'Specialized Skill Level: ' + pow1A + '\nQuick Attack Power: +' + pow2A + '% x 3\nPower Attack Power: +' + pow3A + '%';
          rollDescB = 'Specialized Skill Level: ' + pow1B + '\nQuick Attack Power: +' + pow2B + '% x 3\nPower Attack Power: +' + pow3B + '%';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor(340 - (skillLevel + 0) * 4);
            pow1B = Math.floor(340 - (skillLevel + 1) * 4);
            pow2A = Math.floor(1500 + (skillLevel + 0) * 50);
            pow2B = Math.floor(1500 + (skillLevel + 1) * 50);
            pow3A = Math.floor(80 + (skillLevel + 0) * 4) / 10;
            pow3B = Math.floor(80 + (skillLevel + 1) * 4) / 10;
            pow4A = Math.floor(80 + (skillLevel + 0) * 4) / 40;
            pow4B = Math.floor(80 + (skillLevel + 1) * 4) / 40;
            rollDescA = 'Spirit Cost: ' + pow1A + '\nPower: ' + pow2A + '% + 2% per Spirit\nPermanently reduces monster\'s Attack/Accuracy by ' + pow3A + '% (1st use) or ' + pow4A + '% (2nd to 25th uses). Poisons, weakens and blinds the monster for 1 sec.';
            rollDescB = 'Spirit Cost: ' + pow1B + '\nPower: ' + pow2B + '% + 2% per Spirit\nPermanently reduces monster\'s Attack/Accuracy by ' + pow3B + '% (1st use) or ' + pow4B + '% (2nd to 25th uses). Poisons, weakens and blinds the monster for 1 sec.';
          }
          checkDescInside();
        }

        reqRank = 70;
        skillID = 3;
        skillOffset = -1;
        skillName = 'Specialized Skill';
        skillDesc = 'A specialized, weapon-dependent skill! Depending on the type of weapon equipped, this skill has different effects. Also increases the damage dealt by Quick Attack and Power Attack.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Chaos';
          skillDesc = 'Use some Spirit to deal a lot of damage and permanently reduce the monster\'s Attack and Accuracy. Stat reduction effect is lowered if used more than once on the same monster, and stacks up to 25 times. Also poisons, weakens and blinds the monster for 1 second.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(500 - (skillLevel + 0) * 10);
          pow1B = Math.floor(500 - (skillLevel + 1) * 10);
          pow2A = Math.floor(1400 + (skillLevel + 0) * 20);
          pow2B = Math.floor(1400 + (skillLevel + 1) * 20);
          rollDescA = 'Combo: -' + pow1A + '\nPower: ' + pow2A + '% + 0.2% per Combo (up to 10,000 Combo)\nSlow the monster for 1 sec.\nRecover 50% HP and MP\nRage: +10%';
          rollDescB = 'Combo: -' + pow1B + '\nPower: ' + pow2B + '% + 0.2% per Combo (up to 10,000 Combo)\nSlow the monster for 1 sec.\nRecover 50% HP and MP\nRage: +10%';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor(800 - (skillLevel + 0) * 10);
            pow1B = Math.floor(800 - (skillLevel + 1) * 10);
            pow2A = Math.floor(3000 + (skillLevel + 0) * 100);
            pow2B = Math.floor(3000 + (skillLevel + 1) * 100);
            pow3A = Math.floor(4 + (skillLevel + 0) * 0.1);
            pow3B = Math.floor(4 + (skillLevel + 1) * 0.1);
            rollDescA = 'Spirit Cost: ' + pow1A + '\nPower: ' + pow2A + '% + 5% per Spirit\nFor ' + pow3A + ' seconds, Spawn Rate +100% and always kill non-bosses instantly when they are attacked regardless of damage dealt';
            rollDescB = 'Spirit Cost: ' + pow1B + '\nPower: ' + pow2B + '% + 5% per Spirit\nFor ' + pow3B + ' seconds, Spawn Rate +100% and always kill non-bosses instantly when they are attacked regardless of damage dealt';
          }
          checkDescInside();
        }

        reqRank = 120;
        skillID = 4;
        skillOffset = -1;
        skillName = 'Combo Strike';
        skillDesc = 'Use the power of COMBO to deal extreme damage, briefly slow the monster down and fill your RAGE meter. In addition, recover some HP and MP.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Overkill';
          skillDesc = 'Use the great power of Spirit to instantly kill non-bosses and deal massive damage to bosses. Also allows you to instantly kill monsters and increases monster spawn rate for a short while.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          rollDescA = 'Can activate/deactivate Mana Power with the Space key';
          rollDescB = 'Can activate/deactivate Mana Power with the Space key';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            rollDescA = 'Can activate/deactivate Spirit Power with the Space key';
            rollDescB = 'Can activate/deactivate Spirit Power with the Space key';
          }
          checkDescInside();
        }

        reqRank = 180;
        skillID = 49;
        skillOffset = -1;
        skillName = 'Mana Power';
        skillDesc = 'Allows you to activate and deactivate Mana Power with the Space key. When Mana Power is active, you gain extra Defense, can use MP as a shield and use MP to deal extra damage.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Spirit Power';
          skillDesc = 'Allows you to activate and deactivate Spirit Power with the Space key. When Spirit Power is active, you gain 1 extra Spirit per attack, gain extra Defense, and can use Spirit as a shield. Your Max Spirit also increases, and you automatically use some Spirit to deal extra damage when your Spirit is close to maximum.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          rollDescA = 'Quick Attack hits 1 extra time';
          rollDescB = 'Quick Attack hits 1 extra time';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            rollDescA = 'Double Attack\'s effect lasts 2 seconds longer';
            rollDescB = 'Double Attack\'s effect lasts 2 seconds longer';
          }
          checkDescInside();
        }

        reqRank = 250;
        skillID = 6;
        skillOffset = -1;
        skillName = 'Quick Attack Improve';
        skillDesc = 'Increases the number of times the monster is attacked when you use Quick Attack.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Double Attack Improve';
          skillDesc = 'Increases the effect duration of Double Attack.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          rollDescA = 'Power Attack deals 1.6x damage (1.2x If a ranged weapon, Ultimate Weapon or Reincarnation Weapon is used)';
          rollDescB = 'Power Attack deals 1.6x damage (1.2x If a ranged weapon, Ultimate Weapon or Reincarnation Weapon is used)';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            rollDescA = 'Critical Strike\'s effect lasts 2 seconds longer';
            rollDescB = 'Critical Strike\'s effect lasts 2 seconds longer';
          }
          checkDescInside();
        }

        reqRank = 350;
        skillID = 7;
        skillOffset = -1;
        skillName = 'Power Attack Improve';
        skillDesc = 'Increases the power of Power Attack. It\'s supposed to be powerful, right?';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Critical Strike Improve';
          skillDesc = 'Increases the effect duration of Critical Strike.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          rollDescA = 'Specialized Skill deals 1.1x damage and cooldown time of Specialized Skill is halved';
          rollDescB = 'Specialized Skill deals 1.1x damage and cooldown time of Specialized Skill is halved';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            rollDescA = 'Chaos\'s Spirit cost is reduced by 20';
            rollDescB = 'Chaos\'s Spirit cost is reduced by 20';
          }
          checkDescInside();
        }

        reqRank = 500;
        skillID = 8;
        skillOffset = -1;
        skillName = 'Specialized Skill Improve';
        skillDesc = 'Increases damage and reduces cooldown time of the Specialized Skill.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Chaos Improve';
          skillDesc = 'Decreases the Spirit cost of Chaos.';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Reset ALL Skill Points for FREE? You will lose all of your current skills and get your Skill Points back. Max skill levels remain the same.\n\n[Shift + Click to proceed]';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaTotalSkill > 0 && Key.isDown(16)) {
          _root.save.arenaSP = _root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10;
          _root.save.arenaTotalSkill = 0;
          _root.save.arenaTotalSP = 0;
          i = 1;
          while (i <= 66) {
            if (_root.save.arenaSkill[i] > 0) {
              _root.save.arenaSkill[i] = 0;
            }
            ++i;
          }
          _root.actiondescription = 'Your skills have been reset.';
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        skillLoadArray = _parent.skillCodeInput.split(',');
        errorText = '';
        validSoFar = 2;
        skillPointNeeded = 0;
        if (skillLoadArray.length == 67) {
          i = 0;
          while (i <= 66) {
            if (isNaN(skillLoadArray[i]) || skillLoadArray[i] < 0 || Math.round(skillLoadArray[i]) != skillLoadArray[i]) {
              validSoFar = 0;
              _root.showPopup('Error', 'Invalid code. Please check again.');
            } else {
              skillLoadArray[i] *= 1;
              if (skillLoadArray[i] > _root.save.arenaSkillMax[i]) {
                skillLoadArray[i] = _root.save.arenaSkillMax[i];
                validSoFar = 1;
              }
              if (skillLoadArray[i] > 0 && _root.arenaSkillRankF[i] > _root.save.arenaLevel) {
                skillLoadArray[i] = 0;
                validSoFar = 1;
              }
              k = 1;
              while (k <= skillLoadArray[i]) {
                if (k < 10) {
                  tmpNeed = k;
                } else {
                  tmpNeed = 10;
                }
                if (skillPointNeeded + tmpNeed <= _root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10) {
                  skillPointNeeded += tmpNeed;
                } else {
                  skillLoadArray[i] = k - 1;
                  validSoFar = 1;
                }
                ++k;
              }
            }
            ++i;
          }
        } else {
          _root.showPopup('Error', 'Invalid code. Please check again.');
          validSoFar = 0;
        }
        if (validSoFar > 0) {
          _root.save.arenaTotalSkill = 0;
          _root.save.arenaTotalSP = skillPointNeeded * 1;
          _root.save.arenaSP = (_root.save.arenaLevel * 20 + _root.save.arenaUltimateSP * 10 - skillPointNeeded) * 1;
          i = 1;
          while (i <= 66) {
            _root.save.arenaTotalSkill += skillLoadArray[i] * 1;
            _root.save.arenaSkill[i] = skillLoadArray[i] * 1;
            ++i;
          }
          _parent.gotoAndStop(10);
          if (validSoFar == 2) {
            _root.showPopup('Success', 'Skill build successfully loaded! Please check the results.');
          } else {
            _root.showPopup('Success', 'Skill build partially loaded! Some skills or skill levels are missing due to insufficient SP/Skill Books/Rank. Please check the results.');
          }
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.shareSkill.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent._parent.popScreen._currentframe != 2) {
          _parent._parent.popScreen.gotoAndStop(2);
        } else {
          _parent._parent.popScreen.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent._parent.popScreen._currentframe != 3) {
          _parent._parent.popScreen.gotoAndStop(3);
        } else {
          _parent._parent.popScreen.gotoAndStop(1);
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Attack/Defense: +' + pow1A + '%';
          rollDescB = 'Attack/Defense: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 10;
        skillID = 9;
        skillOffset = 1;
        skillName = 'Strength Enhancement';
        skillDesc = 'Improves your Attack and Defense. There\'s no stat called \'Strength\' in this game, but well, whatever.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1.5);
          pow1B = Math.floor((skillLevel + 1) * 1.5);
          rollDescA = 'Accuracy/Evasion: +' + pow1A + '%';
          rollDescB = 'Accuracy/Evasion: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 10;
        skillID = 10;
        skillOffset = 2;
        skillName = 'Dexterity Enhancement';
        skillDesc = 'Improves your Accuracy and Evasion. There\'s no stat called \'Dexterity\' in this game, but well, whatever.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 25);
          pow1B = Math.floor((skillLevel + 1) * 25);
          pow2A = Math.ceil((skillLevel + 0) * 0.5);
          pow2B = Math.ceil((skillLevel + 1) * 0.5);
          rollDescA = 'Equipment Defense: +' + _root.withComma(pow1A) + '\nDefense Power: +' + pow2A + '%';
          rollDescB = 'Equipment Defense: +' + _root.withComma(pow1B) + '\nDefense Power: +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 30;
        skillID = 11;
        skillOffset = 3;
        skillName = 'Invisible Armor';
        skillDesc = 'Gives you an invisible armor set, which adds to your Defense.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 10);
          pow1B = Math.floor((skillLevel + 1) * 10);
          pow2A = Math.ceil((skillLevel + 0) * 0.5);
          pow2B = Math.ceil((skillLevel + 1) * 0.5);
          rollDescA = 'Equipment Attack: +' + _root.withComma(pow1A) + '\nAttack Power: +' + pow2A + '%';
          rollDescB = 'Equipment Attack: +' + _root.withComma(pow1B) + '\nAttack Power: +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 40;
        skillID = 12;
        skillOffset = 4;
        skillName = 'Invisible Weapon';
        skillDesc = 'Gives you an invisible weapon, which can be used with another weapon and doesn\'t take up an inventory slot, to add to your damage.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = Math.floor((skillLevel + 0) * 50);
          pow2B = Math.floor((skillLevel + 1) * 50);
          rollDescA = 'Dodge Chance: +' + pow1A + '%\nEvasion: +' + _root.withComma(pow2A);
          rollDescB = 'Dodge Chance: +' + pow1B + '%\nEvasion: +' + _root.withComma(pow2B);
          checkDescInside();
        }

        reqRank = 50;
        skillID = 13;
        skillOffset = 5;
        skillName = 'Artful Dodger';
        skillDesc = 'Gives you a chance to dodge any attack.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = Math.floor((skillLevel + 0) * 50);
          pow2B = Math.floor((skillLevel + 1) * 50);
          rollDescA = 'Hit Chance: +' + pow1A + '%\nAccuracy: +' + _root.withComma(pow2A);
          rollDescB = 'Hit Chance: +' + pow1B + '%\nAccuracy: +' + _root.withComma(pow2B);
          checkDescInside();
        }

        reqRank = 60;
        skillID = 14;
        skillOffset = 6;
        skillName = 'Accuracy Boost';
        skillDesc = 'Boosts your accuracy and allows you to ignore the monster\'s ability to evade... sometimes. But it\'s still good.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Min. Damage: +' + pow1A + '% of Max. Damage';
          rollDescB = 'Min. Damage: +' + pow1B + '% of Max. Damage';
          checkDescInside();
        }

        reqRank = 70;
        skillID = 15;
        skillOffset = 7;
        skillName = 'Weapon Mastery';
        skillDesc = 'As you get used to your weapon, you make fewer mistakes and deal more damage. In other words, it increases your minimum damage and reduces the randomness.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = (skillLevel + 0) * 1;
          pow1B = (skillLevel + 1) * 1;
          pow2A = Math.floor((skillLevel + 0) * 1);
          pow2B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Gain extra Damage Resist equal to ' + pow1A + '% of remaining HP\nDamage Taken: -' + pow2A + '%';
          rollDescB = 'Gain extra Damage Resist equal to ' + pow1B + '% of remaining HP\nDamage Taken: -' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 130;
        skillID = 23;
        skillOffset = 8;
        skillName = 'Overpowered Tanker';
        skillDesc = 'It\'s not known where the developer got the idea for such overpowered skills, but hey, it works. And it significantly reduces the damage you take from monsters.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 50);
          pow1B = Math.floor((skillLevel + 1) * 50);
          pow2A = 100000 + Math.floor((skillLevel + 0) * 20000);
          pow2B = 100000 + Math.floor((skillLevel + 1) * 20000);
          rollDescA = 'HP Regen: +' + pow1A + '%\nHP recovered by Health Potion: ' + _root.withComma(pow2A);
          rollDescB = 'HP Regen: +' + pow1B + '%\nHP recovered by Health Potion: ' + _root.withComma(pow2B);
          checkDescInside();
        }

        reqRank = 15;
        skillID = 21;
        skillOffset = 9;
        skillName = 'HP Recovery';
        skillDesc = 'Increases your natural rate of HP regen - or in other words, you recover more HP every second. Save some potions! Oh, and those potions? Make them better, too.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 3);
          pow1B = Math.floor((skillLevel + 1) * 3);
          rollDescA = 'Maximum HP: +' + pow1A + '%';
          rollDescB = 'Maximum HP: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 25;
        skillID = 22;
        skillOffset = 10;
        skillName = 'HP Boost';
        skillDesc = 'Increases your maximum HP. Health Points, or if you prefer to call it Hit Points or simply HP, that\'s fine too. That\'s the thing you need to survive.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 25);
          pow1B = Math.floor((skillLevel + 1) * 25);
          pow2A = 100000 + Math.floor((skillLevel + 0) * 20000);
          pow2B = 100000 + Math.floor((skillLevel + 1) * 20000);
          rollDescA = 'MP Regen: +' + pow1A + '%\nMP recovered by Mana Potion: ' + _root.withComma(pow2A);
          rollDescB = 'MP Regen: +' + pow1B + '%\nMP recovered by Mana Potion: ' + _root.withComma(pow2B);
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor((skillLevel + 0) * 1);
            pow1B = Math.floor((skillLevel + 1) * 1);
            pow2A = 50 + Math.floor((skillLevel + 0) * 1);
            pow2B = 50 + Math.floor((skillLevel + 1) * 1);
            rollDescA = 'Every second, ' + pow1A + '% chance to gain 2 Spirit charges\nSpirit recovered by Spirit Potion: ' + pow2A;
            rollDescB = 'Every second, ' + pow1B + '% chance to gain 2 Spirit charges\nSpirit recovered by Spirit Potion: ' + pow2B;
          }
          checkDescInside();
        }

        reqRank = 45;
        skillID = 24;
        skillOffset = 11;
        skillName = 'MP Recovery';
        skillDesc = 'You recover more MP every second. Save even more potions! Also increases the amount of MP recovered by Mana Potions.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Spirit Recovery';
          skillDesc = 'You automatically gain Spirit over time. It doesn\'t matter whether you\'re fighting or not. Isn\'t that awesome? Also increases the amount of Spirit recovered by Spirit Potions.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 5);
          pow1B = Math.floor((skillLevel + 1) * 5);
          rollDescA = 'Maximum MP: +' + pow1A + '%';
          rollDescB = 'Maximum MP: +' + pow1B + '%';
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor((skillLevel + 0) * 20);
            pow1B = Math.floor((skillLevel + 1) * 20);
            rollDescA = 'Maximum Spirit: +' + pow1A + '';
            rollDescB = 'Maximum Spirit: +' + pow1B + '';
          }
          checkDescInside();
        }

        reqRank = 55;
        skillID = 25;
        skillOffset = 12;
        skillName = 'MP Boost';
        skillDesc = 'Increases your maximum MP, so you can cast more spells.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Spirit Boost';
          skillDesc = 'Increases your maximum Spirit, so you can use more Spirit skills and improve your Spirit power.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = (skillLevel + 0) * 0.1;
          pow2B = (skillLevel + 1) * 0.1;
          pow3A = (skillLevel + 0) * 0.2;
          pow3B = (skillLevel + 1) * 0.2;
          rollDescA = 'Drain Multiplier: ' + pow1A + '\nMax ' + pow2A + '% of MaxHP per hit\nWhen HP is at maximum, receive ' + pow3A + '% less damage';
          rollDescB = 'Drain Multiplier: ' + pow1B + '\nMax ' + pow2B + '% of MaxHP per hit\nWhen HP is at maximum, receive ' + pow3B + '% less damage';
          checkDescInside();
        }

        reqRank = 70;
        skillID = 36;
        skillOffset = 13;
        skillName = 'Drain';
        skillDesc = 'Allows you to gain HP when you attack monsters. In addition, when your HP is already at maximum, you will take less damage.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 500);
          pow1B = Math.floor((skillLevel + 1) * 500);
          rollDescA = 'When you kill a monster, MP +' + _root.withComma(pow1A);
          rollDescB = 'When you kill a monster, MP +' + _root.withComma(pow1B);
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            pow1A = Math.floor((skillLevel + 0) * 1);
            pow1B = Math.floor((skillLevel + 1) * 1);
            pow2A = Math.floor((skillLevel + 0) * 1);
            pow2B = Math.floor((skillLevel + 1) * 1);
            rollDescA = 'When you kill a monster, ' + pow1A + '% chance to gain 3 extra Spirit charges\nWhen you attack a boss, ' + pow2A + '% chance to gain 3 extra Spirit charges';
            rollDescB = 'When you kill a monster, ' + pow1B + '% chance to gain 3 extra Spirit charges\nWhen you attack a boss, ' + pow2B + '% chance to gain 3 extra Spirit charges';
          }
          checkDescInside();
        }

        reqRank = 70;
        skillID = 37;
        skillOffset = 14;
        skillName = 'Mana Eater';
        skillDesc = 'This skill allows you to eat monsters after they die and recover some MP. When Mana Power is active, amount of MP gained from this skill is multiplied by 25.';
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          skillName = 'Spirit Leech';
          skillDesc = 'This skill allows you to eat monsters after they die for a chance to gain 3 Spirit charges. It also allows you to gain extra Spirit when fighting bosses.';
        }
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 20);
          pow1B = Math.floor((skillLevel + 1) * 20);
          rollDescA = 'Attack +1% every 10 Combo, until ' + pow1A + ' Combo. Stacks multiplicatively with other Attack bonuses.';
          rollDescB = 'Attack +1% every 10 combo, until ' + pow1B + ' Combo. Stacks multiplicatively with other Attack bonuses.';
          checkDescInside();
        }

        reqRank = 35;
        skillID = 27;
        skillOffset = 15;
        skillName = 'Combo Power';
        skillDesc = 'Ever wondered what COMBO is for? Yes, this... exactly.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 20);
          pow1B = Math.floor((skillLevel + 1) * 20);
          rollDescA = 'Defense +5%, Evasion +2% every 10 Combo, until ' + pow1A + ' Combo. Stacks multiplicatively with other Defense and Evasion bonuses.';
          rollDescB = 'Defense +5%, Evasion +2% every 10 combo, until ' + pow1B + ' Combo. Stacks multiplicatively with other Defense and Evasion bonuses.';
          checkDescInside();
        }

        reqRank = 75;
        skillID = 28;
        skillOffset = 16;
        skillName = 'Combo Protection';
        skillDesc = 'Although your Combo breaks if you get hit, it\'s still a good idea to get a bit more defensive while it lasts.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 20);
          pow1B = Math.floor((skillLevel + 1) * 20);
          rollDescA = 'Critical Chance +1%, Critical Damage +1% every 10 Combo, until ' + pow1A + ' Combo';
          rollDescB = 'Critical Chance +1%, Critical Damage +1% every 10 combo, until ' + pow1B + ' Combo';
          checkDescInside();
        }

        reqRank = 115;
        skillID = 29;
        skillOffset = 17;
        skillName = 'Combo Critical';
        skillDesc = 'These skills are getting pretty self-explanatory. You don\'t need a description for this one.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 20);
          pow1B = Math.floor((skillLevel + 1) * 20);
          rollDescA = 'EXP +1%, Coin +1%, Pixel +1% every 10 Combo, until ' + pow1A + ' Combo';
          rollDescB = 'EXP +1%, Coin +1%, Pixel +1% every 10 combo, until ' + pow1B + ' Combo';
          checkDescInside();
        }

        reqRank = 155;
        skillID = 30;
        skillOffset = 18;
        skillName = 'Combo Reward';
        skillDesc = 'Think about it. Other than those easy Combo-related achievements that you probably obtained long ago, you can now increase your EXP, Coin and Pixel gain as your Combo increases! Isn\'t it awesome?';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1.5);
          pow1B = Math.floor((skillLevel + 1) * 1.5);
          rollDescA = 'Rage Depletion -' + pow1A + '%';
          rollDescB = 'Rage Depletion -' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 65;
        skillID = 31;
        skillOffset = 19;
        skillName = 'Rage Mastery';
        skillDesc = 'After investing your precious Skill Points into this useless skill, you get so angry that your RAGE meter decreases much more slowly.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 2);
          pow1B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Rage Attack: +' + pow1A + '%';
          rollDescB = 'Rage Attack: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 85;
        skillID = 32;
        skillOffset = 20;
        skillName = 'Rage Power';
        skillDesc = 'As your RAGE meter fills, you get more powerful! Most effective when RAGE meter is full.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 3);
          pow1B = Math.floor((skillLevel + 1) * 3);
          rollDescA = 'Rage Speed: +' + pow1A + '%';
          rollDescB = 'Rage Speed: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 95;
        skillID = 33;
        skillOffset = 21;
        skillName = 'Panic';
        skillDesc = 'As your RAGE meter fills, you attack faster! Most effective when RAGE meter is full.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = (skillLevel + 0) * 0.5;
          pow2B = (skillLevel + 1) * 0.5;
          rollDescA = 'Poison Chance: +' + pow1A + '%\nIf Poison activates when the monster is already poisoned, the next attack deals ' + pow2A + '% more damage';
          rollDescB = 'Poison Chance: +' + pow1B + '%\nIf Poison activates when the monster is already poisoned, the next attack deals ' + pow2B + '% more damage';
          checkDescInside();
        }

        reqRank = 105;
        skillID = 39;
        skillOffset = 22;
        skillName = 'Poison Ability';
        skillDesc = 'You have a chance to poison the monster and deal damage over time! If poison activates when the monster is already poisoned, the next attack will deal more damage. After poison wears off on a monster, the monster cannot be poisoned again in 0.5 seconds.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = (skillLevel + 0) * 0.5;
          pow2B = (skillLevel + 1) * 0.5;
          rollDescA = 'Blind Chance: +' + pow1A + '%\nIf Blind activates when the monster is already blinded, the next attack deals ' + pow2A + '% more damage';
          rollDescB = 'Blind Chance: +' + pow1B + '%\nIf Blind activates when the monster is already blinded, the next attack deals ' + pow2B + '% more damage';
          checkDescInside();
        }

        reqRank = 125;
        skillID = 43;
        skillOffset = 23;
        skillName = 'Blind Ability';
        skillDesc = 'You have a chance to blind the monster and reduce its Accuracy and Evasion! If blind activates when the monster is already blinded, the next attack will deal more damage. After blind wears off on a monster, the monster cannot be blinded again in 0.5 seconds.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = (skillLevel + 0) * 0.5;
          pow2B = (skillLevel + 1) * 0.5;
          rollDescA = 'Weaken Chance: +' + pow1A + '%\nIf Weaken activates when the monster is already weakened, the next attack deals ' + pow2A + '% more damage';
          rollDescB = 'Weaken Chance: +' + pow1B + '%\nIf Weaken activates when the monster is already weakened, the next attack deals ' + pow2B + '% more damage';
          checkDescInside();
        }

        reqRank = 135;
        skillID = 41;
        skillOffset = 24;
        skillName = 'Weaken Ability';
        skillDesc = 'You have a chance to weaken the monster and reduce its Attack and Defense! If weaken activates when the monster is already weakened, the next attack will deal more damage. After weaken wears off on a monster, the monster cannot be weakened again in 0.5 seconds.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.ceil((skillLevel + 0) * 0.4);
          pow1B = Math.ceil((skillLevel + 1) * 0.4);
          pow2A = Math.ceil((skillLevel + 0) * 20);
          pow2B = Math.ceil((skillLevel + 1) * 20);
          rollDescA = 'Stun Chance: +' + pow1A + '%\nExplosion Damage: ' + pow2A + '%';
          rollDescB = 'Stun Chance: +' + pow1B + '%\nExplosion Damage: ' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 140;
        skillID = 45;
        skillOffset = 25;
        skillName = 'Explosive Attacks';
        skillDesc = 'Allows you to stun the monster for 0.5 whopping seconds! Also, when you stun the monster, you immediately attack one extra time! The extra attack is guaranteed to be critical, and knocks the monster back a small distance.\nCooldown after effect expires: 0.5 sec.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor(500 + (skillLevel + 0) * 25);
          pow1B = Math.floor(500 + (skillLevel + 1) * 25);
          pow2A = Math.floor(5 + (skillLevel + 0) * 0.2);
          pow2B = Math.floor(5 + (skillLevel + 1) * 0.2);
          rollDescA = 'Poison Damage: ' + pow1A + '% / 0.5s\nPoison Duration: ' + pow2A + ' sec.';
          rollDescB = 'Poison Damage: ' + pow1B + '% / 0.5s\nPoison Duration: ' + pow2B + ' sec.';
          checkDescInside();
        }

        reqRank = 145;
        skillID = 40;
        skillOffset = 26;
        skillName = 'Poison Power';
        skillDesc = 'Increases Poison damage and duration.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.ceil(30 + (skillLevel + 0) * 0.5);
          pow1B = Math.ceil(30 + (skillLevel + 1) * 0.5);
          pow2A = Math.floor(5 + (skillLevel + 0) * 0.2);
          pow2B = Math.floor(5 + (skillLevel + 1) * 0.2);
          rollDescA = 'Monster ACC/EVA: -' + pow1A + '%\nBlind Duration: ' + pow2A + ' sec.';
          rollDescB = 'Monster ACC/EVA: -' + pow1B + '%\nBlind Duration: ' + pow2B + ' sec.';
          checkDescInside();
        }

        reqRank = 165;
        skillID = 44;
        skillOffset = 27;
        skillName = 'Blind Power';
        skillDesc = 'Increases Blind effect and duration.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.ceil(30 + (skillLevel + 0) * 0.5);
          pow1B = Math.ceil(30 + (skillLevel + 1) * 0.5);
          pow2A = Math.floor(5 + (skillLevel + 0) * 0.2);
          pow2B = Math.floor(5 + (skillLevel + 1) * 0.2);
          rollDescA = 'Monster ATT/DEF: -' + pow1A + '%\nWeaken Duration: ' + pow2A + ' sec.';
          rollDescB = 'Monster ATT/DEF: -' + pow1B + '%\nWeaken Duration: ' + pow2B + ' sec.';
          checkDescInside();
        }

        reqRank = 175;
        skillID = 42;
        skillOffset = 28;
        skillName = 'Weaken Power';
        skillDesc = 'Increases Weaken effect and duration.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'EXP: +' + pow1A + '%';
          rollDescB = 'EXP: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 30;
        skillID = 34;
        skillOffset = 29;
        skillName = 'Learner';
        skillDesc = 'Every kill is new experience. Increases the EXP you gain for each kill! This includes both Arena EXP and A: TG EXP!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = Math.floor((skillLevel + 0) * 1);
          pow2B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Coin: +' + pow1A + '%\nPixel: +' + pow2A + '%';
          rollDescB = 'Coin: +' + pow1B + '%\nPixel: +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 30;
        skillID = 35;
        skillOffset = 30;
        skillName = 'Money UP!';
        skillDesc = 'More money! The more, the better.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Autosteal Multiplier: ' + pow1A;
          rollDescB = 'Autosteal Multiplier: ' + pow1B;
          checkDescInside();
        }

        reqRank = 120;
        skillID = 53;
        skillOffset = 31;
        skillName = 'Autosteal';
        skillDesc = 'Automatically steal Coins and Pixels from monsters as you deal damage to them. Steal extra Coins and Pixels by overkilling!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = Math.floor((skillLevel + 0) * 2);
          pow2B = Math.floor((skillLevel + 1) * 2);
          pow3A = Math.floor((skillLevel + 0) * 2);
          pow3B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Drop Rate: +' + pow1A + '%\nRare Monster Rate: +' + pow2A + '%\nEpic Monster Rate: +' + pow3A + '%';
          rollDescB = 'Drop Rate: +' + pow1B + '%\nRare Monster Rate: +' + pow2B + '%\nEpic Monster Rate: +' + pow3B + '%';
          checkDescInside();
        }

        reqRank = 170;
        skillID = 50;
        skillOffset = 32;
        skillName = 'Five-Leaf Clover';
        skillDesc = 'Gives you a lot of luck, in the form of Drop Rate and chance to encounter Rare and Epic monsters. It\'s not a clover though...';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = (skillLevel + 0) * 0.2;
          pow1B = (skillLevel + 1) * 0.2;
          pow2A = Math.floor((skillLevel + 0) * 1);
          pow2B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Damage per status effect: +' + pow1A + '%\nAlways critical when monster HP is below ' + pow2A + '%';
          rollDescB = 'Damage per status effect: +' + pow1B + '%\nAlways critical when monster HP is below ' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 70;
        skillID = 38;
        skillOffset = 33;
        skillName = 'Coup de Grace';
        skillDesc = 'Deals more damage when the monster is affected by status effects! Also deals critical damage when monster HP is below a certain amount.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1.5);
          pow1B = Math.floor((skillLevel + 1) * 1.5);
          rollDescA = 'Double Hit Chance: +' + pow1A + '%';
          rollDescB = 'Double Hit Chance: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 120;
        skillID = 55;
        skillOffset = 38;
        skillName = 'Double Hit';
        skillDesc = 'Gives you a chance to attack one extra time with no speed penalty. Double Hit can be a critical hit.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 2);
          pow1B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Attack Speed: +' + pow1A + '%';
          rollDescB = 'Attack Speed: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 80;
        skillID = 16;
        skillOffset = 34;
        skillName = 'Weapon Booster';
        skillDesc = 'Attack faster! Attack Speed is capped at 25, but having more doesn\'t hurt - it increases your Double Hit Chance!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 2);
          pow1B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Critical Damage: +' + pow1A + '%';
          rollDescB = 'Critical Damage: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 90;
        skillID = 18;
        skillOffset = 35;
        skillName = 'Critical Force';
        skillDesc = 'Make critical hits even more awesome!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Critical Chance: +' + pow1A + '%';
          rollDescB = 'Critical Chance: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 100;
        skillID = 19;
        skillOffset = 36;
        skillName = 'Critical Chance';
        skillDesc = 'Increases your chance to deal critical damage!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          pow2A = Math.floor((skillLevel + 0) * 1);
          pow2B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Critical Damage: +' + pow1A + '%\nIgnore ' + pow2A + '% of monster DEF';
          rollDescB = 'Critical Damage: +' + pow1B + '%\nIgnore ' + pow2B + '% of monster DEF';
          checkDescInside();
        }

        reqRank = 110;
        skillID = 20;
        skillOffset = 37;
        skillName = 'Keen Eyes';
        skillDesc = 'Allows you to find the monsters\' weak spots, increasing critical damage and allowing you to ignore a portion of their defense!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 50);
          pow1B = Math.floor((skillLevel + 1) * 50);
          rollDescA = 'Reflect Damage: +' + pow1A + '%';
          rollDescB = 'Reflect Damage: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 150;
        skillID = 51;
        skillOffset = 39;
        skillName = 'Reflect';
        skillDesc = 'Because monsters that attack you must die faster.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 5);
          pow1B = Math.floor((skillLevel + 1) * 5);
          pow2A = (skillLevel + 0) * 1;
          pow2B = (skillLevel + 1) * 1;
          pow3A = Math.floor((skillLevel + 0) * 2);
          pow3B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Magic Reflect: ' + pow1A + '% of Physical Reflect\n' + pow2A + '% chance to nullify ranged damage and gain HP equal to ' + pow3A + '% of monster\'s Magic ATT';
          rollDescB = 'Magic Reflect: ' + pow1B + '% of Physical Reflect\n' + pow2B + '% chance to nullify ranged damage and gain HP equal to ' + pow3B + '% of monster\'s Magic ATT';
          checkDescInside();
        }

        reqRank = 160;
        skillID = 52;
        skillOffset = 40;
        skillName = 'Magic Reflect';
        skillDesc = 'Now you can reflect ranged attacks, too! Also grants a chance to turn ranged damage into healing. Absorption effect cannot activate more than 2 times in a row on the same monster.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 80);
          pow1B = Math.floor((skillLevel + 1) * 80);
          rollDescA = 'Potion Cost: -' + pow1A + '%';
          rollDescB = 'Potion Cost: -' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 120;
        skillID = 26;
        skillOffset = -1;
        skillName = '\'potion [PROFANITY] 1/5\'';
        skillDesc = 'Spread lies about recovery potions in order to make them only 1/5th as expensive as before.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = (skillLevel + 0) * 1;
          pow1B = (skillLevel + 1) * 1;
          pow2A = Math.floor((skillLevel + 0) * 2);
          pow2B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Gain extra Damage Resist equal to ' + pow1A + '% of remaining MP\n' + pow2A + '% chance to nullify death penalty';
          rollDescB = 'Gain extra Damage Resist equal to ' + pow1B + '% of remaining MP\n' + pow2B + '% chance to nullify death penalty';
          checkDescInside();
        }

        reqRank = 120;
        skillID = 61;
        skillOffset = -1;
        skillName = 'Protection';
        skillDesc = 'I’m not sure how it works. Magic, maybe?';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Buff Effect: +' + pow1A + '%';
          rollDescB = 'Buff Effect: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 120;
        skillID = 62;
        skillOffset = -1;
        skillName = 'Buff Boost';
        skillDesc = 'Increases the effect of most buffs. Doesn\'t increase duration.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = skillLevel;
          pow1B = skillLevel + 1;
          pow2A = Math.floor(1000 * Math.pow(1.02, skillLevel) - 1000) / 10;
          pow2B = Math.floor(1000 * Math.pow(1.02, skillLevel + 1) - 1000) / 10;
          pow3A = (skillLevel + 0) * 0.5;
          pow3B = (skillLevel + 1) * 0.5;
          rollDescA = 'Each attack on the same monster is 2% stronger than the one before it. Effect stacks up to ' + pow1A + ' time(s) for up to ' + pow2A + '% extra damage. After the monster is attacked the first time, it loses ' + pow3A + '% DEF/EVA';
          rollDescB = 'Each attack on the same monster is 2% stronger than the one before it. Effect stacks up to ' + pow1B + ' time(s) for up to ' + pow2B + '% extra damage. After the monster is attacked the first time, it loses ' + pow3B + '% DEF/EVA';
          checkDescInside();
        }

        reqRank = 180;
        skillID = 63;
        skillOffset = -1;
        skillName = 'Crescendo';
        skillDesc = 'Each attack is stronger than the one before it!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 2);
          pow1B = Math.floor((skillLevel + 1) * 2);
          pow2A = Math.floor(240 - (skillLevel + 0) * 4);
          pow2B = Math.floor(240 - (skillLevel + 1) * 4);
          rollDescA = 'Upon death, revive with ' + pow1A + '% HP\nCooldown: ' + pow2A + ' sec.\nIf MaxHP is 19,999,999, cooldown time is reduced by 10%';
          rollDescB = 'Upon death, revive with ' + pow1B + '% HP\nCooldown: ' + pow2B + ' sec.\nIf MaxHP is 19,999,999, cooldown time is reduced by 10%';
          checkDescInside();
        }

        reqRank = 180;
        skillID = 64;
        skillOffset = -1;
        skillName = 'Revive';
        skillDesc = 'Allows you to revive at the same place with no death penalty upon death. When this skill is ready, an icon will appear next to your HP bar.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = 1 + (skillLevel + 0) * 0.06;
          pow1B = 1 + (skillLevel + 1) * 0.06;
          pow2A = Math.ceil((skillLevel + 0) * 0.1);
          pow2B = Math.ceil((skillLevel + 1) * 0.1);
          rollDescA = 'Charged skills are ' + pow1A + 'x as powerful\nWhen you use a charged skill, Rage +' + pow2A + '%';
          rollDescB = 'Charged skills are ' + pow1B + 'x as powerful\nWhen you use a charged skill, Rage +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 180;
        skillID = 65;
        skillOffset = -1;
        skillName = 'Charge';
        skillDesc = 'After you don\'t use an active skill for 4 seconds, the skill will become charged and deals more damage. Skills will also be charged automatically when there are no monsters on screen.\n\nApplicable skills: Skills with X/C/V/B hotkeys';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = (skillLevel + 0) * 1.5;
          pow1B = (skillLevel + 1) * 1.5;
          pow2A = Math.floor((skillLevel + 0) * 2);
          pow2B = Math.floor((skillLevel + 1) * 2);
          rollDescA = pow1A + '% chance to nullify melee damage and gain HP equal to ' + pow2A + '% of monster\'s ATT';
          rollDescB = pow1B + '% chance to nullify melee damage and gain HP equal to ' + pow2B + '% of monster\'s ATT';
          checkDescInside();
        }

        reqRank = 180;
        skillID = 66;
        skillOffset = -1;
        skillName = 'Absorb';
        skillDesc = 'Whenever a monster attacks you, you have a chance to turn it into healing! Does not work with ranged attacks. Cannot activate more than 2 times in a row on the same monster.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 1);
          pow1B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'All Elements: +' + pow1A + '%';
          rollDescB = 'All Elements: +' + pow1B + '%';
          checkDescInside();
        }

        reqRank = 500;
        skillID = 56;
        skillOffset = -1;
        skillName = 'Elemental Bonus';
        skillDesc = 'Increases your damage and resistance against elemental monsters.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 0.5);
          pow1B = Math.floor((skillLevel + 1) * 0.5);
          pow2A = Math.floor((skillLevel + 0) * 2);
          pow2B = Math.floor((skillLevel + 1) * 2);
          rollDescA = 'Instant Kill Chance: +' + pow1A + '%\nDamage vs. Bosses: +' + pow2A + '%';
          rollDescB = 'Instant Kill Chance: +' + pow1B + '%\nDamage vs. Bosses: +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 500;
        skillID = 57;
        skillOffset = -1;
        skillName = 'Master Hunter';
        skillDesc = 'Deal more damage to boss monsters and instantly kill non-bosses! Instant Kill effect only applies when the monster has 50% HP or below.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 10);
          pow1B = Math.floor((skillLevel + 1) * 10);
          pow2A = Math.floor((skillLevel + 0) * 1);
          pow2B = Math.floor((skillLevel + 1) * 1);
          pow3A = Math.floor((skillLevel + 0) * 1);
          pow3B = Math.floor((skillLevel + 1) * 1);
          rollDescA = 'Max Spirit: +' + pow1A + '\nMagic Resist: +' + pow2A + '%\nNegate Effect Chance: +' + pow3A + '%';
          rollDescB = 'Max Spirit: +' + pow1B + '\nMagic Resist: +' + pow2B + '%\nNegate Effect Chance: +' + pow3B + '%';
          checkDescInside();
        }

        reqRank = 500;
        skillID = 58;
        skillOffset = -1;
        skillName = 'Spirit Shield';
        skillDesc = 'Gives you a Spirit Shield, which greatly increases your resistance to magic and status effects. Also raises maximum Spirit if a Spirit weapon is equipped.';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 0.2);
          pow1B = Math.floor((skillLevel + 1) * 0.2);
          pow2A = Math.floor((skillLevel + 0) * 2);
          pow2B = Math.floor((skillLevel + 1) * 2);
          pow3A = Math.floor((skillLevel + 0) * 0.4);
          pow3B = Math.floor((skillLevel + 1) * 0.4);
          rollDescA = 'Weapon Bonus: +' + pow1A + ' Tier(s)\nEquipment Attack: +' + pow2A + '\nIgnore ' + pow3A + '% of monster DEF';
          rollDescB = 'Weapon Bonus: +' + pow1B + ' Tier(s)\nEquipment Attack: +' + pow2B + '\nIgnore ' + pow3B + '% of monster DEF';
          checkDescInside();
        }

        reqRank = 500;
        skillID = 59;
        skillOffset = -1;
        skillName = 'Legendary Weapon';
        skillDesc = 'Improves the power and bonuses of all weapons!';
      }
    }

    instance of movieClip 5248  {

      onClipEvent (load) {
        function checkDesc() {
          skillLevel = _root.save.arenaSkill[skillID];
          skillMax = _root.save.arenaSkillMax[skillID];
          pow1A = Math.floor((skillLevel + 0) * 2);
          pow1B = Math.floor((skillLevel + 1) * 2);
          pow2A = Math.floor((skillLevel + 0) * 10);
          pow2B = Math.floor((skillLevel + 1) * 10);
          rollDescA = 'Maximum HP: +' + pow1A + '%\nPotion Efficiency: +' + pow2A + '%';
          rollDescB = 'Maximum HP: +' + pow1B + '%\nPotion Efficiency: +' + pow2B + '%';
          checkDescInside();
        }

        reqRank = 500;
        skillID = 60;
        skillOffset = -1;
        skillName = 'Adrenaline';
        skillDesc = 'Increases the efficiency of recovery potions and duration of some buffs. Also increases maximum HP.';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent._parent.gotoAndStop(1);
      }
    }
  }

  movieClip 5273  {

    instance of movieClip 1208  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaEarring;
          if (_root.save.arenaOutfitEarring != 0) {
            id = _root.save.arenaOutfitEarring;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 1208  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaEarring;
          if (_root.save.arenaOutfitEarring != 0) {
            id = _root.save.arenaOutfitEarring;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance body of movieClip 1245  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaSkin;
          if (_root.save.arenaOutfitSkin != 0) {
            id = _root.save.arenaOutfitSkin;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          nm1 = _root.save.inventoryName[_root.save.arenaHat];
          nm2 = _root.save.inventoryName[_root.save.arenaShirt];
          nm3 = _root.save.inventoryName[_root.save.arenaGloves];
          nm4 = _root.save.inventoryName[_root.save.arenaPants];
          nm5 = _root.save.inventoryName[_root.save.arenaShoes];
          if (_root.save.arenaOutfitHat != 0) {
            nm1 = _root.save.inventoryName[_root.save.arenaOutfitHat];
          }
          if (_root.save.arenaOutfitShirt != 0) {
            nm2 = _root.save.inventoryName[_root.save.arenaOutfitShirt];
          }
          if (_root.save.arenaOutfitGloves != 0) {
            nm3 = _root.save.inventoryName[_root.save.arenaOutfitGloves];
          }
          if (_root.save.arenaOutfitPants != 0) {
            nm4 = _root.save.inventoryName[_root.save.arenaOutfitPants];
          }
          if (_root.save.arenaOutfitShoes != 0) {
            nm5 = _root.save.inventoryName[_root.save.arenaOutfitShoes];
          }
          if (nm1 == 'CHAOS HAT' && nm2 == 'CHAOS SHIRT' && nm4 == 'CHAOS PANTS' && nm5 == 'CHAOS SHOES') {
            fr = 12;
          }
          if (nm4 == 'Ghost Pants') {
            fr = 12;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShoes;
          if (_root.save.arenaOutfitShoes != 0) {
            id = _root.save.arenaOutfitShoes;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 863  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShoes;
          if (_root.save.arenaOutfitShoes != 0) {
            id = _root.save.arenaOutfitShoes;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaGloves;
          if (_root.save.arenaOutfitGloves != 0) {
            id = _root.save.arenaOutfitGloves;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 734  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaGloves;
          if (_root.save.arenaOutfitGloves != 0) {
            id = _root.save.arenaOutfitGloves;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 798  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaPants;
          if (_root.save.arenaOutfitPants != 0) {
            id = _root.save.arenaOutfitPants;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 594  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaHat;
          if (_root.save.arenaOutfitHat != 0) {
            id = _root.save.arenaOutfitHat;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 661  {

      onClipEvent (load) {
        function checkFrame() {
          id = _root.save.arenaShirt;
          if (_root.save.arenaOutfitShirt != 0) {
            id = _root.save.arenaOutfitShirt;
          }
          fr = _root.save.inventoryFrame[id];
          if (id == 0) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 3804  {

      onClipEvent (load) {
        holding = false;
        gotoAndStop(1);
      }

      onClipEvent (press) {
        holding = true;
      }

      onClipEvent (release, releaseOutside) {
        holding = false;
      }
    }

    instance sword of movieClip 3805  {

      onClipEvent (enterFrame) {
        if (_root.arenaDelay > _root.arenaDelay2) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }
    }

    instance of movieClip 3827  {

      onClipEvent (load) {
        function checkFrame() {
          fr = _root.save.arenaRing + 1;
          if (_root.save.visibleRing == false) {
            fr = 1;
          }
          if (_currentframe != fr) {
            gotoAndStop(fr);
          }
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        if (_root.gCheck == true) {
          checkFrame();
        }
      }
    }

    instance of movieClip 3859  {

      onClipEvent (enterFrame) {
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
          fr = 3;
        } else {
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            fr = 2;
          } else {
            fr = 1;
          }
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }
  }

  movieClip 5280  {

    frame 1 {
      function createSquare(hex, alp) {
        this.createEmptyMovieClip('square_mc', 100);
        this.square_mc.beginFill(('0x' + hex) * 1, alp);
        this.square_mc.moveTo(0, 0);
        this.square_mc.lineTo(25, 0);
        this.square_mc.lineTo(25, 25);
        this.square_mc.lineTo(0, 25);
        this.square_mc.lineTo(0, 0);
        this.square_mc.endFill();
        _root.save.drawingBoardHex[loc] = hex;
        _root.save.drawingBoardAlp[loc] = alp;
      }

      if (_root.save.drawingBoardAlp[loc] > 0) {
        createSquare(_root.save.drawingBoardHex[loc], _root.save.drawingBoardAlp[loc]);
      }
      onEnterFrame = function () {
        createSquare(_root.drawingHex, 100);
      };

    }
  }

  movieClip 5330  {

    frame 1 {
      pos = Math.round((_x - 100) / 15);
      colorArr = ['000000', '323232', '4B4B4B', '646464', '7D7D7D', '969696', 'AFAFAF', 'C8C8C8', 'E1E1E1', 'FAFAFA', '643232', '964B4B', 'C86464', '644B32', '96704B', 'C89664', '646432', '96964B', 'C8C864', '4B6432', '70964B', '96C864', '326432', '4B964B', '64C864', '326464', '4B9696', '64C8C8', '324B64', '4B7096', '6496C8', '323264', '4B4B96', '6464C8', '4B3264', '704B96', '9664C8', '643264', '964B96', 'C864C8', 'FA3232', 'FA9632', 'FAFA32', '96FA32', '32FA32', '32FAFA', '3296FA', '3232FA', '9632FA', 'FA32FA'];
      thisColor = colorArr[pos];
      gotoAndStop(pos + 2);
      onEnterFrame = function () {
        thisColor = colorArr[pos + _root.drawingPage * 25];
        gotoAndStop(pos + 2 + _root.drawingPage * 25);
      };

      onRelease = function () {
        _root.drawingHex = thisColor;
        _parent.colorCodeText.text = thisColor;
      };

    }
  }

  movieClip 5333  {
  }

  movieClip 5339  {

    frame 1 {
      stop();
      onRollOver = function () {
        gotoAndStop(2);
      };

      onRollOut = function () {
        gotoAndStop(1);
      };

      onRelease = function () {
        gotoAndStop(2);
      };

      onReleaseOutside = function () {
        gotoAndStop(1);
      };

      onPress = function () {
        gotoAndStop(1);
      };

    }
  }

  movieClip 5344  {
  }

  movieClip 5353  {

    frame 1 {
      stop();
    }

    frame 2 {
      shareCode = '';
      i = 0;
      while (i <= 1199) {
        if (_root.save.drawingBoardAlp[i] > 0) {
          shareCode += i + ',' + _root.save.drawingBoardHex[i] + ',' + _root.save.drawingBoardAlp[i] + ',';
        }
        ++i;
      }
      shareCode += 'END';
      shareCodeText.text = shareCode;
    }

    instance of movieClip 5344  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        textToCopy = _parent.shareCode;
        System.setClipboard(textToCopy);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        colorArr = ['000000', '323232', '4B4B4B', '646464', '7D7D7D', '969696', 'AFAFAF', 'C8C8C8', 'E1E1E1', 'FAFAFA', '643232', '964B4B', 'C86464', '644B32', '96704B', 'C89664', '646432', '96964B', 'C8C864', '4B6432', '70964B', '96C864', '326432', '4B964B', '64C864', '326464', '4B9696', '64C8C8', '324B64', '4B7096', '6496C8', '323264', '4B4B96', '6464C8', '4B3264', '704B96', '9664C8', '643264', '964B96', 'C864C8', 'FA3232', 'FA9632', 'FAFA32', '96FA32', '32FA32', '32FAFA', '3296FA', '3232FA', '9632FA', 'FA32FA'];
        proReq = false;
        inp = _parent.shareCodeText.text;
        loadArray = inp.split(',');
        valid = true;
        if (loadArray.length % 3 != 1) {
          valid = false;
        }
        if (loadArray[loadArray.length - 1] != 'END') {
          valid = false;
        }
        tmpHex = new Array();
        tmpAlp = new Array();
        i = 0;
        while (i <= 1199) {
          tmpHex[i] = '000000';
          tmpAlp[i] = 0;
          ++i;
        }
        if (valid == true) {
          i = 0;
          while (i < loadArray.length - 1) {
            thisLoc = loadArray[i];
            thisHex = loadArray[i + 1];
            premColor = true;
            j = 0;
            while (j <= 49) {
              if (thisHex == colorArr[j]) {
                premColor = false;
              }
              ++j;
            }
            if (premColor == true) {
              proReq = true;
            }
            thisAlp = loadArray[i + 2] * 1;
            if (thisAlp > 0 && thisAlp < 100) {
              proReq = true;
            }
            if (isNaN(('0x' + thisHex) * 1)) {
              valid = false;
            } else {
              if (('0x' + thisHex) * 1 < 0 || ('0x' + thisHex) * 1 > 16777215) {
                valid = false;
              }
            }
            if (thisAlp < 0 || thisAlp > 100 || isNaN(thisAlp)) {
              valid = false;
            }
            if (thisLoc < 0 || thisLoc > 1199 || isNaN(thisLoc)) {
              valid = false;
            }
            if (valid == true) {
              tmpHex[thisLoc] = thisHex;
              tmpAlp[thisLoc] = thisAlp;
            }
            i += 3;
          }
          if (proReq == true && _root.save.battlePoint < 1000000 && _root.save.dt < 5) {
            _root.showPopup('Error', 'This drawing requires Advanced Version to load.');
          } else {
            if (valid == true) {
              i = 0;
              while (i <= 1199) {
                _root.save.drawingBoardHex[i] = tmpHex[i];
                _root.save.drawingBoardAlp[i] = tmpAlp[i];
                trace(i + ': ' + _root.save.drawingBoardHex[i] + ', ' + _root.save.drawingBoardAlp[i]);
                ++i;
              }
              _root.showPopup('Success', 'Drawing successfully loaded.');
              _parent.gotoAndStop(1);
            } else {
              _root.showPopup('Error', 'Invalid load code. Please check again to ensure that there are no line breaks or missing characters.');
            }
          }
        } else {
          _root.showPopup('Error', 'Invalid load code. Please check again to ensure that there are no line breaks or missing characters.');
        }
      }
    }
  }

  button 5358 {

    on (release) {
      museumOffset -= 5;
      if (museumOffset < 0) {
        museumOffset = 0;
      }
    }

    on (keyPress '<Up>') {
      museumOffset -= 1;
      if (museumOffset < 0) {
        museumOffset = 0;
      }
    }
  }

  button 5359 {

    on (release) {
      museumOffset += 5;
      if (museumOffset > museumMaxOffset) {
        museumOffset = museumMaxOffset;
      }
    }

    on (keyPress '<Down>') {
      museumOffset += 1;
      if (museumOffset > museumMaxOffset) {
        museumOffset = museumMaxOffset;
      }
    }
  }

  movieClip 5361  {
  }

  movieClip 5367  {
  }

  movieClip 5368  {

    frame 1 {
      onEnterFrame = function () {
        slotNum = 1401 + Math.round(_x / 40) + Math.round(_y / 40) * 10 + _parent.museumOffset * 10;
        if (_root.save.inventoryExist[slotNum] == 1) {
          gotoAndStop(4);
        } else {
          if (_root.museumItem[slotNum] == undefined) {
            gotoAndStop(2);
          } else {
            gotoAndStop(3);
            valText.text = _root.museumValue[slotNum];
            nameText.text = substring(_root.museumItem[slotNum], 0, 4) + '...';
          }
        }
      };

    }

    instance of movieClip 5367  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription2 = '';
        if (_root.museumValue[_parent.slotNum] != 1) {
          _root.actiondescription = '<b>' + _root.museumItem[_parent.slotNum] + '</b>\nThe Museum does not have this item yet. Contribute this item to the Museum to gain <b>' + _root.museumValue[_parent.slotNum] + '</b> Collection Points. Items contributed to the Museum can be taken back at any time.';
        } else {
          _root.actiondescription = '<b>' + _root.museumItem[_parent.slotNum] + '</b>\nThe Museum does not have this item yet. Contribute this item to the Museum to gain <b>1</b> Collection Point. Items contributed to the Museum can be taken back at any time.';
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
        _root.actiondescription2 = '';
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = _parent.slotNum;
      }

      onClipEvent (enterFrame) {
        slot = _parent.slotNum;
      }
    }
  }

  movieClip 5374  {

    frame 1 {
      museumOffset = 0;
      museumMaxOffset = 115;
      tmpOffset = 0;
      onEnterFrame = function () {
        _root.toCheck = true;
        if (tmpOffset != museumOffset) {
          tmpOffset = museumOffset;
          _root.actiondescription = '';
          _root.actiondescription2 = '';
        }
        if (_root.scrollingDir == -1) {
          museumOffset -= 2;
          if (museumOffset < 0) {
            museumOffset = 0;
          }
        }
        if (_root.scrollingDir == 1) {
          museumOffset += 2;
          if (museumOffset > museumMaxOffset) {
            museumOffset = museumMaxOffset;
          }
        }
        o1Text.text = museumOffset + 1;
        o2Text.text = museumOffset + 2;
        o3Text.text = museumOffset + 3;
        o4Text.text = museumOffset + 4;
        o5Text.text = museumOffset + 5;
      };

    }

    instance of movieClip 5361  {

      onClipEvent (enterFrame) {
        if (dragging == true) {
          diff = 0;
          if (_parent._ymouse < _y && _parent.museumOffset > 0) {
            diff = -1 + Math.floor((_parent._ymouse - _y) / 10);
            if (diff < -_parent.museumOffset) {
              diff = -_parent.museumOffset;
            }
          }
          if (_parent._ymouse > _y + 50 && _parent.museumOffset < _parent.museumMaxOffset) {
            diff = 1 + Math.floor((_parent._ymouse - _y - 50) / 10);
            if (diff > _parent.museumMaxOffset - _parent.museumOffset) {
              diff = _parent.museumMaxOffset - _parent.museumOffset;
            }
          }
          _parent.museumOffset += diff;
        }
        _y = 20 + (_parent.museumOffset / _parent.museumMaxOffset) * 110;
      }

      onClipEvent (press) {
        dragging = true;
      }

      onClipEvent (release, releaseOutside) {
        dragging = false;
      }
    }
  }

  movieClip 5376  {
  }

  movieClip 5380  {

    instance of movieClip 5376  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = 'Collection Points (CP) can be gained by contributing items to the Museum.\n- You gain +1 Equipment Defense per 2 CP\n- You gain +1 Equipment Attack per 10 CP\n- You gain +1% Rare Monster Rate per 20 CP\n- You gain +1% Epic Monster Rate per 50 CP\n\nTotal Effects:\n<font color=\'#CC99FF\'>Equipment Defense: <b>+' + _root.withComma(_root.save.collectionPoint / 2) + '</b>\nEquipment Attack: <b>+' + _root.withComma(_root.save.collectionPoint / 10) + '</b><font>\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + _root.withComma(_root.save.collectionPoint / 20) + '%</b>\nEpic Monster Rate: <b>+' + _root.withComma(_root.save.collectionPoint / 50) + '%</b></font>';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }
  }

  button 5384 {

    on (release) {
      if (_root.bestiaryPage > 1) {
        _root.bestiaryPage -= 1;
      }
    }
  }

  button 5385 {

    on (release) {
      if (_root.bestiaryPage < 5) {
        _root.bestiaryPage += 1;
      }
    }
  }

  movieClip 5408  {
  }

  movieClip 5410  {

    frame 1 {
      function checkEntry() {
        curPage = _root.bestiaryPage;
        ID = (_root.bestiaryPage - 1) * 100 + Math.round((_x - 40) / 20) + Math.round(_y / 20) * 20 + 1;
        killCount = _root.save.arenaBestiary[ID];
        entryLevel = 0;
        bestiaryBonus = 0;
        bonusText = '';
        if (!isNaN(killCount)) {
          if (killCount >= 1) {
            entryLevel = 1;
            bestiaryBonus = 0;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 10) {
            entryLevel = 2;
            bestiaryBonus = 10;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 100) {
            entryLevel = 3;
            bestiaryBonus = 20;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 1000) {
            entryLevel = 4;
            bestiaryBonus = 30;
            bonusText = '<font color=\'#00FFFF\'>Item Drop Rate 1.5x</font>';
          }
          if (killCount >= 10000) {
            entryLevel = 5;
            bestiaryBonus = 40;
            bonusText = '<font color=\'#99FF00\'>Item Drop Rate 2.0x</font>';
          }
          if (killCount >= 100000) {
            entryLevel = 6;
            bestiaryBonus = 50;
            bonusText = '<font color=\'#FFFF00\'>Item Drop Rate 3.0x</font>';
          }
          allyBonus = 0;
          if (!isNaN(_root.save.arenaAllyEXP[ID])) {
            allyBonus = Math.ceil(_root.save.arenaAllyEXP[ID] / 1000);
            if (_root.save.arenaAllyEXP[ID] >= 10000) {
              allyBonus = 20;
            }
          }
          bestiaryBonus = Math.floor((100 + bestiaryBonus) * (100 + allyBonus) / 10 - 1000) / 10;
        }
        gotoAndStop(entryLevel + 1);
        if (entryLevel == 6 && killCount >= 1000000) {
          gotoAndStop(8);
        }
        level = _root.enemyList[ID].level;
        hp = _root.enemyList[ID].hp;
        exp = _root.enemyList[ID].exp;
        if (_root.save.arenaHardcore == true) {
          level = Math.floor(level * 1.3);
          if (level > 9001) {
            level = 9001;
          }
          hp = Math.floor(hp * 3.5);
          exp = Math.floor(exp * 1.5);
        }
      }

      stop();
      _x = Math.round(_x);
      _y = Math.round(_y);
      checkEntry();
      onEnterFrame = function () {
        if (curPage != _root.bestiaryPage) {
          checkEntry();
        }
      };

      onRollOver = function () {
        checkEntry();
        if (entryLevel > 0) {
          _parent.enemyPreview.gotoAndStop(ID);
          extKillText = '';
          if (!isNaN(_root.save.arenaBestiaryExtra[ID]) && _root.save.arenaBestiaryExtra[ID] > 0) {
            extKillText = '\n<font color=\'#999999\'>(' + _root.withComma(_root.save.arenaBestiary[ID] - _root.save.arenaBestiaryExtra[ID]) + ' + ' + _root.withComma(_root.save.arenaBestiaryExtra[ID]) + ')</font>';
          }
          extUltraText = '';
          if (!isNaN(_root.save.arenaBestiaryUlt3[ID]) && _root.save.arenaBestiaryUlt3[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-3 form defeated!</b> (v' + _root.save.arenaBestiaryUlt3V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt3F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt3F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt2[ID]) && _root.save.arenaBestiaryUlt2[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-2 form defeated!</b> (v' + _root.save.arenaBestiaryUlt2V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt2F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt2F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt1[ID]) && _root.save.arenaBestiaryUlt1[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-1 form defeated!</b> (v' + _root.save.arenaBestiaryUlt1V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt1F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt1F[ID] + '</font>';
            }
          }
          _root.actiondescription = '<b>' + _root.enemyList[ID].name + '</b>\nLevel: <b>' + _root.withComma(level) + '</b>\nHP: <b>' + _root.withComma(hp) + '</b>\nEXP: <b>' + _root.withComma(exp) + '</b> + ' + bestiaryBonus + '%\n_________\nKilled: <b>' + _root.withComma(killCount) + '</b>' + extKillText + extUltraText + '\n[Entry Level <b>' + entryLevel + '</b>]\n' + bonusText + '\n_________\nHold left mouse button to view more info';
        }
      };

      onRollOut = function () {
        _parent.enemyPreview.gotoAndStop(1);
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

      onPress = function () {
        if (entryLevel > 0) {
          _root.bestiarySelect = ID;
          _parent.bestiaryDetail.gotoAndStop(2);
          _root.actiondescription = '';
        }
      };

      onRelease = function () {
        _parent.bestiaryDetail.gotoAndStop(1);
        if (entryLevel > 0) {
          extKillText = '';
          if (!isNaN(_root.save.arenaBestiaryExtra[ID]) && _root.save.arenaBestiaryExtra[ID] > 0) {
            extKillText = '\n<font color=\'#999999\'>(' + _root.withComma(_root.save.arenaBestiary[ID] - _root.save.arenaBestiaryExtra[ID]) + ' + ' + _root.withComma(_root.save.arenaBestiaryExtra[ID]) + ')</font>';
          }
          extUltraText = '';
          if (!isNaN(_root.save.arenaBestiaryUlt3[ID]) && _root.save.arenaBestiaryUlt3[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-3 form defeated!</b> (v' + _root.save.arenaBestiaryUlt3V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt3F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt3F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt2[ID]) && _root.save.arenaBestiaryUlt2[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-2 form defeated!</b> (v' + _root.save.arenaBestiaryUlt2V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt2F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt2F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt1[ID]) && _root.save.arenaBestiaryUlt1[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-1 form defeated!</b> (v' + _root.save.arenaBestiaryUlt1V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt1F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt1F[ID] + '</font>';
            }
          }
          _root.actiondescription = '<b>' + _root.enemyList[ID].name + '</b>\nLevel: <b>' + _root.withComma(level) + '</b>\nHP: <b>' + _root.withComma(hp) + '</b>\nEXP: <b>' + _root.withComma(exp) + '</b> + ' + bestiaryBonus + '%\n_________\nKilled: <b>' + _root.withComma(killCount) + '</b>' + extKillText + extUltraText + '\n[Entry Level <b>' + entryLevel + '</b>]\n' + bonusText + '\n_________\nHold left mouse button to view more info';
        }
      };

      onReleaseOutside = function () {
        _parent.bestiaryDetail.gotoAndStop(1);
      };

    }

    instance of movieClip 5408  {

      onClipEvent (load) {
        _alpha = 0;
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 2;
        if (del <= 100) {
          _alpha = del;
        } else {
          if (del < 200) {
            _alpha = 200 - del;
          } else {
            _alpha = 0;
          }
        }
      }
    }
  }

  movieClip 5453  {

    frame 1 {
      stop();
    }

    frame 2 {
      ID = _root.bestiarySelect;
      level = _root.enemyList[ID].level;
      hp = _root.enemyList[ID].hp;
      attack = _root.enemyList[ID].attack;
      defense = _root.enemyList[ID].defense;
      accuracy = _root.enemyList[ID].accuracy;
      evasion = _root.enemyList[ID].evasion;
      exp = _root.enemyList[ID].exp;
      coin = _root.enemyList[ID].coin;
      pixel = _root.enemyList[ID].pixel;
      rangeDamage = _root.enemyList[ID].rangeDamage;
      rampagePct = _root.enemyList[ID].rampagePct;
      skill = _root.enemyList[ID].skill;
      skillLevel = _root.enemyList[ID].skillLevel;
      if (_root.save.arenaHardcore == true) {
        level = Math.floor(level * 1.3);
        if (level > 9001) {
          level = 9001;
        }
        hp = Math.floor(hp * 3.5);
        attack = Math.floor(attack * 1.5);
        defense = Math.floor(defense * 2);
        accuracy = Math.floor(accuracy * 1.5);
        evasion = Math.floor(evasion * 1.5);
        exp = Math.floor(exp * 1.5);
        coin = Math.floor(coin * 1.5);
        pixel = Math.floor(pixel * 1.5);
        rangeDamage = Math.floor(rangeDamage * 1.5);
        if (rangeDamage == 0) {
          rangeDamage = Math.floor(attack * 0.8);
        }
        if (rampagePct > 0) {
          rampagePct = Math.floor(rampagePct + (100 - rampagePct) / 2);
        } else {
          rampagePct = 50;
          attack = Math.floor(attack * 0.8);
          rangeDamage = Math.floor(rangeDamage * 0.8);
        }
        if (skill == 'None') {
          skill = 'Random';
          skillLevel = 5;
        }
        if (skillLevel < 5) {
          skillLevel = 5;
        }
      }
      levelText.text = level;
      nameText.text = _root.enemyList[ID].name;
      artText.text = 'Art by ' + _root.enemyList[ID].art;
      areaText.text = _root.enemyList[ID].loc;
      hpText.text = _root.withComma(hp);
      attackText.text = _root.withComma(attack);
      magicAttackText.text = _root.withComma(rangeDamage);
      defenseText.text = _root.withComma(defense);
      if (defense < 0) {
        defenseText.text = 'MAX';
      }
      accuracyText.text = _root.withComma(accuracy);
      evasionText.text = _root.withComma(evasion);
      expText.text = _root.withComma(exp);
      coinText.text = _root.withComma(coin);
      pixelText.text = _root.withComma(pixel);
      elementText.text = _root.enemyList[ID].element;
      if (_root.enemyList[ID].element == 'All') {
        elementText.text = 'None';
      }
      speedText.text = _root.withComma(_root.enemyList[ID].speed * 6.4) + '% screen/s';
      if (_root.save.arenaHardcore == true) {
        speedText.text = _root.withComma(_root.enemyList[ID].speed * 8) + '% screen/s';
      }
      healText.text = _root.withComma(_root.enemyList[ID].heal);
      explodeText.text = _root.withComma(_root.enemyList[ID].explodeDamage) + ' / ' + _root.enemyList[ID].explode + 's';
      if (_root.enemyList[ID].explode == 0) {
        explodeText.text = '-';
      }
      rampageText.text = rampagePct + '% HP left';
      if (rampagePct == 0) {
        rampageText.text = '-';
      }
      specialText.text = skill;
      if (skill == 'None') {
        specialText.text = '-';
      }
      bossFlag = '-';
      if (_root.enemyList[ID].boss == true) {
        bossFlag = 'Yes';
      }
      zombieFlag = '-';
      if (_root.enemyList[ID].zombie == true) {
        zombieFlag = 'Yes';
      }
      evolveFlag = '-';
      if (_root.enemyList[ID].evolve != 0) {
        evolveFlag = _root.enemyList[_root.enemyList[ID].evolve].name;
      }
      bossText.text = bossFlag;
      zombieText.text = zombieFlag;
      evolveText.text = evolveFlag;
      expText.text = _root.withComma(exp);
      coinText.text = _root.withComma(coin);
      pixelText.text = _root.withComma(pixel);
      levelText.textColor = 16777215;
      if (level < _root.save.level * 0.6 - 25) {
        levelText.textColor = 16776960;
      }
      if (level >= _root.save.level + 1) {
        levelText.textColor = 16711680;
      }
      nameText.textColor = 16777215;
      if (_root.enemyList[ID].boss == true) {
        nameText.textColor = 10027263;
      }
      attackText.textColor = 16777215;
      if (attack > _root.damageResist * 1.6) {
        attackText.textColor = 16711680;
      } else {
        if (attack > _root.damageResist * 1.2) {
          attackText.textColor = 16750848;
        } else {
          if (attack < _root.damageResist) {
            attackText.textColor = 16776960;
          }
        }
      }
      magicAttackText.textColor = 16777215;
      if (rangeDamage > _root.damageResist * 1.6) {
        magicAttackText.textColor = 16711680;
      } else {
        if (rangeDamage > _root.damageResist * 1.2) {
          magicAttackText.textColor = 16750848;
        } else {
          if (rangeDamage < _root.damageResist) {
            magicAttackText.textColor = 16776960;
          }
        }
      }
      explodeText.textColor = 16777215;
      if (_root.enemyList[ID].explodeDamage > _root.damageResist * 1.6) {
        explodeText.textColor = 16711680;
      } else {
        if (_root.enemyList[ID].explodeDamage > _root.damageResist * 1.2) {
          explodeText.textColor = 16750848;
        } else {
          if (_root.enemyList[ID].explodeDamage < _root.damageResist) {
            explodeText.textColor = 16776960;
          }
        }
      }
      hpText.textColor = 16777215;
      avgDamage = _root.minDamage - defense;
      if (avgDamage < 1) {
        avgDamage = 1;
      }
      avgHit = hp / avgDamage;
      if (avgHit >= 75) {
        hpText.textColor = 16711680;
      } else {
        if (avgHit >= 25) {
          hpText.textColor = 16750848;
        } else {
          if (avgHit <= 5) {
            hpText.textColor = 16776960;
          }
        }
      }
      defenseText.textColor = 16777215;
      if (defense > _root.minDamage * 1.6) {
        defenseText.textColor = 16711680;
      } else {
        if (defense > _root.minDamage * 1.2) {
          defenseText.textColor = 16750848;
        } else {
          if (defense < _root.minDamage) {
            defenseText.textColor = 16776960;
          }
        }
      }
      if (defense < 0) {
        defenseText.textColor = 10066329;
      }
      accuracyText.textColor = 16777215;
      if (accuracy > _root.evasion * 1.6) {
        accuracyText.textColor = 16711680;
      } else {
        if (accuracy > _root.evasion * 1.2) {
          accuracyText.textColor = 16750848;
        } else {
          if (accuracy < _root.evasion) {
            accuracyText.textColor = 16776960;
          }
        }
      }
      evasionText.textColor = 16777215;
      if (evasion > _root.accuracy * 1.6) {
        evasionText.textColor = 16711680;
      } else {
        if (evasion > _root.accuracy * 1.2) {
          evasionText.textColor = 16750848;
        } else {
          if (evasion < _root.accuracy) {
            evasionText.textColor = 16776960;
          }
        }
      }
    }

    instance of movieClip 4548  {

      onClipEvent (load) {
        gotoAndStop(_parent.ID);
      }
    }
  }

  movieClip 5454  {

    frame 1 {
      _root.bestiaryPage = 1;
    }

    instance enemyPreview of movieClip 4548  {

      onClipEvent (load) {
        gotoAndStop(1);
      }
    }
  }

  button 5461 {

    on (release) {
      craftOffset -= 12;
      if (craftOffset < 0) {
        craftOffset = 0;
      }
    }

    on (keyPress '<Up>') {
      craftOffset -= 1;
      if (craftOffset < 0) {
        craftOffset = 0;
      }
    }
  }

  button 5462 {

    on (release) {
      craftOffset += 12;
      if (craftOffset > craftMaxOffset) {
        craftOffset = craftMaxOffset;
      }
    }

    on (keyPress '<Down>') {
      craftOffset += 1;
      if (craftOffset > craftMaxOffset) {
        craftOffset = craftMaxOffset;
      }
    }
  }

  movieClip 5475  {
  }

  movieClip 5477  {
  }

  movieClip 5478  {
  }

  movieClip 5495  {

    frame 1 {
      function checkCraft() {
        tempOffset = _parent.craftOffset;
        tempType = _parent.craftType;
        ID = _y / 20 + _parent.craftOffset + 1;
        if (_parent.craftType == 1) {
          name = _root.craftWeapon[ID].name;
          reqRank = _root.craftWeapon[ID].reqRank;
          costPixel = _root.craftWeapon[ID].costPixel;
          costCraft = _root.craftWeapon[ID].costCraft;
          costSpec = _root.craftWeapon[ID].costSpec;
          recipeType = _root.craftWeapon[ID].recipeType;
          recipeReq = _root.craftWeapon[ID].recipeReq;
          recipeLimit = _root.craftWeapon[ID].recipeLimit;
          expiry = _root.craftWeapon[ID].expiry;
          enhance = _root.craftWeapon[ID].enhance;
        } else {
          if (_parent.craftType == 2) {
            name = _root.craftArmor[ID].name;
            reqRank = _root.craftArmor[ID].reqRank;
            costPixel = _root.craftArmor[ID].costPixel;
            costCraft = _root.craftArmor[ID].costCraft;
            costSpec = _root.craftArmor[ID].costSpec;
            recipeType = _root.craftArmor[ID].recipeType;
            recipeReq = _root.craftArmor[ID].recipeReq;
            recipeLimit = _root.craftArmor[ID].recipeLimit;
            expiry = _root.craftArmor[ID].expiry;
            enhance = _root.craftArmor[ID].enhance;
          } else {
            if (_parent.craftType == 5) {
              name = _root.craftAccessory[ID].name;
              reqRank = _root.craftAccessory[ID].reqRank;
              costPixel = _root.craftAccessory[ID].costPixel;
              costCraft = _root.craftAccessory[ID].costCraft;
              costSpec = _root.craftAccessory[ID].costSpec;
              recipeType = _root.craftAccessory[ID].recipeType;
              recipeReq = _root.craftAccessory[ID].recipeReq;
              recipeLimit = _root.craftAccessory[ID].recipeLimit;
              expiry = _root.craftAccessory[ID].expiry;
              enhance = _root.craftAccessory[ID].enhance;
            } else {
              if (_parent.craftType == 6) {
                name = _root.craftMedal[ID].name;
                reqRank = _root.craftMedal[ID].reqRank;
                costPixel = _root.craftMedal[ID].costPixel;
                costCraft = _root.craftMedal[ID].costCraft;
                costSpec = _root.craftMedal[ID].costSpec;
                recipeType = _root.craftMedal[ID].recipeType;
                recipeReq = _root.craftMedal[ID].recipeReq;
                recipeLimit = _root.craftMedal[ID].recipeLimit;
                expiry = _root.craftMedal[ID].expiry;
                enhance = _root.craftMedal[ID].enhance;
              } else {
                if (_parent.craftType == 3) {
                  name = _root.craftEnhancer[ID].name;
                  reqRank = 0;
                  costPixel = _root.craftEnhancer[ID].costPixel;
                  costCraft = _root.craftEnhancer[ID].costCraft;
                  costSpec = _root.craftEnhancer[ID].costSpec;
                  recipeType = _root.craftEnhancer[ID].recipeType;
                  recipeReq = _root.craftEnhancer[ID].recipeReq;
                  recipeLimit = _root.craftEnhancer[ID].recipeLimit;
                  expiry = _root.craftEnhancer[ID].expiry;
                  enhance = _root.craftEnhancer[ID].enhance;
                } else {
                  if (_parent.craftType == 4) {
                    name = _root.craftPotion[ID].name;
                    reqRank = 0;
                    costPixel = _root.craftPotion[ID].costPixel;
                    costCraft = _root.craftPotion[ID].costCraft;
                    costSpec = _root.craftPotion[ID].costSpec;
                    recipeType = _root.craftPotion[ID].recipeType;
                    recipeReq = _root.craftPotion[ID].recipeReq;
                    recipeLimit = _root.craftPotion[ID].recipeLimit;
                    expiry = _root.craftPotion[ID].expiry;
                    enhance = _root.craftPotion[ID].enhance;
                  } else {
                    if (_parent.craftType == 7) {
                      name = _root.craftChip[ID].name;
                      reqRank = 0;
                      costPixel = _root.craftChip[ID].costPixel;
                      costCraft = _root.craftChip[ID].costCraft;
                      costSpec = _root.craftChip[ID].costSpec;
                      recipeType = _root.craftChip[ID].recipeType;
                      recipeReq = _root.craftChip[ID].recipeReq;
                      recipeLimit = _root.craftChip[ID].recipeLimit;
                      expiry = _root.craftChip[ID].expiry;
                      enhance = _root.craftChip[ID].enhance;
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.save.careerLevel[4] >= 200) {
          costPixel = Math.ceil(costPixel * 0.7);
          costCraft = Math.ceil(costCraft * 0.7);
          costSpec = Math.ceil(costSpec * 0.7);
        }
        recipe = 1;
        if (recipeType == 1) {
          recipe = 5;
        } else {
          if (recipeType == 3) {
            recipe = 1;
            if (_root.save.bestLevel >= 500) {
              recipe = 2;
            }
            if (_root.save.bestLevel >= 1000) {
              recipe = 3;
            }
            if (_root.save.bestLevel >= 2000) {
              recipe = 4;
            }
            if (_root.save.bestLevel >= 3000) {
              recipe = 5;
            }
          } else {
            if (recipeType == 2) {
              recipe = 1;
              if (_root.save.arenaCraftUsed >= 50000) {
                recipe = 2;
              }
              if (_root.save.arenaCraftUsed >= 1000000) {
                recipe = 3;
              }
              if (_root.save.arenaCraftUsed >= 20000000) {
                recipe = 4;
              }
              if (_root.save.arenaCraftUsed >= 500000000) {
                recipe = 5;
              }
            } else {
              if (recipeType == 4) {
                recipe = 1;
                if (_root.save.recipeLevel >= 1) {
                  recipe = 2;
                }
                if (_root.save.recipeLevel >= 2) {
                  recipe = 3;
                }
                if (_root.save.recipeLevel >= 3) {
                  recipe = 4;
                }
                if (_root.save.recipeLevel >= 4) {
                  recipe = 5;
                }
              } else {
                if (recipeType == 5) {
                  recipe = 1;
                  if (_root.save.secretRecipeLevel >= 1) {
                    recipe = 2;
                  }
                  if (_root.save.secretRecipeLevel >= 2) {
                    recipe = 3;
                  }
                  if (_root.save.secretRecipeLevel >= 3) {
                    recipe = 4;
                  }
                  if (_root.save.secretRecipeLevel >= 4) {
                    recipe = 5;
                  }
                } else {
                  if (recipeType == 6) {
                    recipe = 1;
                    if (_root.save.careerLevel[4] >= 1) {
                      recipe = 2;
                    }
                    if (_root.save.careerLevel[4] >= 25) {
                      recipe = 3;
                    }
                    if (_root.save.careerLevel[4] >= 50) {
                      recipe = 4;
                    }
                    if (_root.save.careerLevel[4] >= 100) {
                      recipe = 5;
                    }
                  } else {
                    if (recipeType == 7) {
                      recipe = 1;
                      if (_root.save.arenaKommanderComplete >= 1) {
                        recipe = 2;
                      }
                      if (_root.save.arenaKommanderComplete >= 5) {
                        recipe = 3;
                      }
                      if (_root.save.arenaKommanderComplete >= 30) {
                        recipe = 4;
                      }
                      if (_root.save.arenaKommanderComplete >= 100) {
                        recipe = 5;
                      }
                    } else {
                      if (recipeType == 8) {
                        recipe = 1;
                        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 1) {
                          recipe = 2;
                        }
                        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 10 && _root.save.raidMegaboss >= 270000) {
                          recipe = 3;
                        }
                        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 60 && _root.save.raidMegaboss >= 315000) {
                          recipe = 4;
                        }
                        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 200 && _root.save.raidMegaboss >= 360000) {
                          recipe = 5;
                        }
                      } else {
                        if (recipeType == 9) {
                          recipe = 1;
                          if (!isNaN(_root.save.arenaBestiary[350]) && _root.save.arenaBestiary[350] >= 1) {
                            recipe = 2;
                          }
                          if (!isNaN(_root.save.arenaBestiary[350]) && _root.save.arenaBestiary[350] >= 10 && _root.save.raidTower >= 120000000) {
                            recipe = 3;
                          }
                          if (!isNaN(_root.save.arenaBestiary[350]) && _root.save.arenaBestiary[350] >= 60 && _root.save.raidTower >= 360000000) {
                            recipe = 4;
                          }
                          if (!isNaN(_root.save.arenaBestiary[350]) && _root.save.arenaBestiary[350] >= 200 && _root.save.raidTower >= 1080000000) {
                            recipe = 5;
                          }
                        } else {
                          if (recipeType == 10) {
                            recipe = 1;
                            if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 1) {
                              recipe = 2;
                            }
                            if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 10) {
                              recipe = 3;
                            }
                            if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 60) {
                              recipe = 4;
                            }
                            if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 200) {
                              recipe = 5;
                            }
                          } else {
                            if (recipeType == 11) {
                              recipe = 1;
                              if (_root.save.raidPyramid >= 90000) {
                                recipe = 2;
                              }
                              if (_root.save.raidPyramid >= 810000) {
                                recipe = 3;
                              }
                              if (_root.save.raidPyramid >= 7290000) {
                                recipe = 4;
                              }
                              if (_root.save.raidPyramid >= 65610000) {
                                recipe = 5;
                              }
                            } else {
                              if (recipeType == 12) {
                                recipe = 1;
                                if (_root.save.arenaZoneKill[23] >= 50) {
                                  recipe = 2;
                                }
                                if (_root.save.arenaZoneKill[23] >= 500) {
                                  recipe = 3;
                                }
                                if (_root.save.arenaZoneKill[23] >= 5000) {
                                  recipe = 4;
                                }
                                if (_root.save.arenaZoneKill[23] >= 50000) {
                                  recipe = 5;
                                }
                              } else {
                                if (recipeType == 13) {
                                  recipe = 1;
                                  if (_root.save.arenaDefendComplete >= 1) {
                                    recipe = 2;
                                  }
                                  if (_root.save.arenaDefendComplete >= 5) {
                                    recipe = 3;
                                  }
                                  if (_root.save.arenaDefendComplete >= 30) {
                                    recipe = 4;
                                  }
                                  if (_root.save.arenaDefendComplete >= 100) {
                                    recipe = 5;
                                  }
                                } else {
                                  if (recipeType == 14) {
                                    recipe = 1;
                                    if (_root.save.arenaPrehistoricComplete >= 1) {
                                      recipe = 2;
                                    }
                                    if (_root.save.arenaPrehistoricComplete >= 5) {
                                      recipe = 3;
                                    }
                                    if (_root.save.arenaPrehistoricComplete >= 30) {
                                      recipe = 4;
                                    }
                                    if (_root.save.arenaPrehistoricComplete >= 100) {
                                      recipe = 5;
                                    }
                                  } else {
                                    if (recipeType == 15) {
                                      recipe = 1;
                                      if (_root.save.raidDungeon >= 1100) {
                                        recipe = 2;
                                      }
                                      if (_root.save.raidDungeon >= 1800) {
                                        recipe = 3;
                                      }
                                      if (_root.save.raidDungeon >= 2500) {
                                        recipe = 4;
                                      }
                                      if (_root.save.raidDungeon >= 3200) {
                                        recipe = 5;
                                      }
                                    } else {
                                      if (recipeType == 16) {
                                        recipe = 1;
                                      } else {
                                        if (recipeType == 17) {
                                          recipe = 5;
                                        } else {
                                          if (recipeType == 18) {
                                            recipe = 5;
                                          } else {
                                            if (recipeType == 19) {
                                              recipe = 0;
                                              if (_root.save.bannedB >= 50) {
                                                recipe = 1;
                                              }
                                            } else {
                                              if (recipeType == 20) {
                                                recipe = 1;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.saveid == 4) {
          recipe = 5;
        }
        if (_root.saveid == 24) {
          if (recipeType != 1 && recipeType != 3) {
            recipe = 0;
          }
        }
        if (recipeType == 20) {
          specType = 8;
          specCur = _root.save.arenaSampleCraft;
        } else {
          if (recipeType == 19) {
            specType = 1;
            specCur = _root.save.arenaSuperiorCraft;
          } else {
            if (recipeType == 18) {
              specType = 7;
              specCur = _root.save.arenaBacon;
            } else {
              if (recipeType == 17) {
                specType = 6;
                specCur = _root.save.arenaEnhancerFragment;
              } else {
                if (recipeType == 16) {
                  specType = 5;
                  specCur = _root.save.arenaUnobtainium;
                } else {
                  if (recipeType == 15) {
                    specType = 4;
                    specCur = _root.save.arenaChaoticFragment;
                  } else {
                    if (recipeType == 7 || recipeType == 11 || recipeType == 12 || recipeType == 13 || recipeType == 14) {
                      specType = 3;
                      specCur = _root.save.arenaProofMission;
                    } else {
                      if (recipeType == 8 || recipeType == 9) {
                        specType = 2;
                        specCur = _root.save.arenaProofTraining;
                      } else {
                        specType = 1;
                        specCur = _root.save.arenaSuperiorCraft;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (name == undefined) {
          gotoAndStop(6);
        } else {
          if (recipe < recipeReq) {
            gotoAndStop(5);
          } else {
            if (_parent.craftCurrent == ID) {
              gotoAndStop(3);
            } else {
              if (_root.save.arenaPixel < costPixel || _root.save.arenaCraft < costCraft || specCur < costSpec) {
                gotoAndStop(1);
              } else {
                if (_root.save.arenaLevel < reqRank && reqRank > 0) {
                  gotoAndStop(4);
                } else {
                  gotoAndStop(2);
                }
              }
            }
          }
        }
        nameText.text = name;
        rankText.text = reqRank;
        if (reqRank == 0) {
          rankText.text = '';
        }
        if (_currentframe <= 5) {
          iconRecipe.gotoAndStop(recipe);
          if (recipe < recipeLimit) {
            iconRecipe.iconMax.gotoAndStop(2);
          } else {
            iconRecipe.iconMax.gotoAndStop(1);
          }
          if (expiry != Infinity) {
            iconTime.gotoAndStop(1);
          } else {
            if (_parent.craftType != 4 && _parent.craftType != 6 && _parent.craftType != 7 && _root.save.arenaPixel >= costPixel && _root.save.arenaCraft >= costCraft && specCur >= costSpec && recipe >= recipeReq && name != undefined && (_root.save.arenaLevel >= reqRank || reqRank < 0)) {
              if (name.indexOf('Meteoric') != -1 || name == 'Dark Ruler' || name.indexOf('Emperor') != -1 || name.indexOf('Pendant of') != -1 || name.indexOf('Newbie') != -1 || name.indexOf('Stick') != -1 || name.indexOf('Bonus') != -1) {
                iconTime.gotoAndStop(3);
              } else {
                if (costPixel >= _root.save.arenaPixel / 10 || costCraft >= _root.save.arenaCraft / 10 || reqRank >= Math.floor(_root.save.arenaLevel * 0.9 - 10) || reqRank >= 400 || name.indexOf('Mystery Rock Lv. 10') != -1 || name.indexOf('Unique Enhancer Lv. 5') != -1 || name.indexOf('Unobtainium Enhancer Lv. 5') != -1) {
                  iconTime.gotoAndStop(3);
                } else {
                  iconTime.gotoAndStop(3);
                }
              }
            } else {
              iconTime.gotoAndStop(3);
            }
          }
        }
        if (recipe < recipeReq) {
          iconTime.gotoAndStop(3);
          nameText.text = 'Required: Recipe Level ' + recipeReq;
        }
        if (recipeType == 'Title') {
          gotoAndStop(7);
          iconTime.gotoAndStop(3);
          nameText.text = recipeReq;
        }
        if (recipeType == 'Title 2') {
          gotoAndStop(8);
          iconTime.gotoAndStop(3);
          nameText.text = recipeReq;
        }
        if (recipe > recipeLimit) {
          recipe = recipeLimit;
        }
      }

      checkCraft();
      onEnterFrame = function () {
        if (tempOffset != _parent.craftOffset || tempType != _parent.craftType || _currentframe == 3) {
          checkCraft();
        }
      };

      onRelease = function () {
        if (_currentframe <= 4 && _currentframe != 3) {
          _parent.craftCurrent = ID;
          _parent.craftRecipe = recipe;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = specType;
        }
        checkCraft();
        _parent.checkCraftStat();
      };

    }
  }

  movieClip 5496  {

    frame 1 {
      function showText() {
        _root.actiondescription = '<font color=\'#DDEEFF\'><b>';
        if (bonusPow >= 100000) {
          rainbowName = name;
          if (type != 'Enhancer') {
            if (enhance > 0) {
              rainbowName += ' [+' + enhance + ']';
            } else {
              if (enhance < 0) {
                rainbowName += ' [' + enhance + ']';
              }
            }
          }
          _root.actiondescription += _root.jewk(rainbowName) + '</b>';
        } else {
          if (bonusPow >= 706) {
            _root.actiondescription += '<font color=\'#FF0000\'>';
          } else {
            if (bonusPow >= 406) {
              _root.actiondescription += '<font color=\'#FF33CC\'>';
            } else {
              if (bonusPow >= 256) {
                _root.actiondescription += '<font color=\'#999900\'>';
              } else {
                if (bonusPow >= 156) {
                  _root.actiondescription += '<font color=\'#009900\'>';
                } else {
                  if (bonusPow >= 106) {
                    _root.actiondescription += '<font color=\'#9900FF\'>';
                  } else {
                    if (bonusPow >= 66) {
                      _root.actiondescription += '<font color=\'#00FFFF\'>';
                    } else {
                      if (bonusPow >= 36) {
                        _root.actiondescription += '<font color=\'#00FF00\'>';
                      } else {
                        if (bonusPow >= 16) {
                          _root.actiondescription += '<font color=\'#FFFF00\'>';
                        } else {
                          if (bonusPow >= 1) {
                            _root.actiondescription += '<font color=\'#0099FF\'>';
                          } else {
                            if (bonusPow >= 0) {
                              _root.actiondescription += '<font color=\'#FFFFFF\'>';
                            } else {
                              _root.actiondescription += '<font color=\'#999999\'>';
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _root.actiondescription += name;
          if (enhance > 0) {
            _root.actiondescription += ' [+' + enhance + ']';
          } else {
            if (enhance < 0) {
              _root.actiondescription += ' [' + enhance + ']';
            }
          }
          _root.actiondescription += '</font></b>';
        }
        if (noBonus == true) {
          _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot apply Bonus Rocks</b></font>';
        }
        if (noFuse == true || noUnique == true) {
          if (type != 'Accessory') {
            _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot Fuse</b></font>';
          }
        }
        if (noUnique == true) {
          _root.actiondescription += '\n<font color=\'#FF6600\'><b>Cannot apply Unique Enhancers</b></font>';
        }
        if (spirit == true) {
          _root.actiondescription += '\n<font color=\'#0099FF\'><b>Spirit Item</b></font>';
        }
        timeLeft = expiry;
        if (timeLeft != Infinity && !isNaN(timeLeft)) {
          if (timeLeft > 86400000) {
            _root.actiondescription += '\n<font color=\'#FFCC33\'>Lifespan: <b>' + Math.ceil(timeLeft / 8640000) / 10 + ' days</b></font>';
          } else {
            if (timeLeft > 3600000) {
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Lifespan: <b>' + Math.ceil(timeLeft / 3600000) + ' hr.</b></font>';
            } else {
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Lifespan: <b>' + Math.ceil(timeLeft / 60000) + ' min.</b></font>';
            }
          }
        }
        if (reqRank >= 1 && type != 'Enhancer' && type != 'Potion' && type != 'Chip') {
          if (_root.save.arenaLevel < reqRank) {
            _root.actiondescription += '\n<font color=\'#6699CC\'>Required Rank: <font color=\'#FF0000\'><b>' + reqRank + '</b></font></font>';
          } else {
            _root.actiondescription += '\n<font color=\'#6699CC\'>Required Rank: <font color=\'#99CCFF\'><b>' + reqRank + '</b></font></font>';
          }
        }
        if (maxLevel == -1) {
          _root.actiondescription += '\n<font color=\'#99FF33\'>Durability: <b>' + _root.withComma(expTNL) + '</b> attacks</font>';
        }
        if (type == 'Weapon') {
          _root.actiondescription += '\nType: Weapon / ' + subtype;
        }
        if (type == 'Armor') {
          _root.actiondescription += '\nType: Armor / ' + subtype;
        }
        if (type == 'Accessory') {
          _root.actiondescription += '\nType: Accessory / ' + subtype;
        }
        if (type == 'Weapon' || type == 'Armor' || type == 'Accessory') {
          _root.actiondescription += '\n';
          if (type == 'Weapon' && subtype != 'Secondary Weapon') {
            if (name == 'Ultimate Weapon' || name == 'Reincarnation Weapon') {
              _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>125 px</font>';
            } else {
              if (range == false) {
                _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>' + weaponRange + ' px</font>';
              } else {
                _root.actiondescription += '\nRange: <font color=\'#99CCFF\'>MAX</font>';
              }
            }
          }
          if (attack > 0) {
            if (attackMin != attackMax) {
              _root.actiondescription += '\nAttack: <font color=\'#FFFF00\'>' + _root.withComma(attackMin) + ' - ' + _root.withComma(attackMax) + '</font>';
            } else {
              _root.actiondescription += '\nAttack: <font color=\'#FFFF00\'>' + _root.withComma(attack) + '</font>';
            }
          }
          if (speed > 0) {
            if (type == 'Weapon') {
              _root.actiondescription += '\nAttack Speed: <font color=\'#FFFF00\'>' + speed + '</font>';
            } else {
              _root.actiondescription += '\nAttack Speed: <font color=\'#FFFF00\'>' + Math.floor(speed * 5) + '%</font>';
            }
          }
          if (defense > 0) {
            if (defenseMin != defenseMax) {
              _root.actiondescription += '\nDefense: <font color=\'#FFFF00\'>' + _root.withComma(defenseMin) + ' - ' + _root.withComma(defenseMax) + '</font>';
            } else {
              _root.actiondescription += '\nDefense: <font color=\'#FFFF00\'>' + _root.withComma(defense) + '</font>';
            }
          }
          if (crit > 0) {
            if (type == 'Weapon') {
              _root.actiondescription += '\nCritical Chance: <font color=\'#FFFF00\'>' + crit + '%</font>';
            } else {
              _root.actiondescription += '\nCritical Damage: <font color=\'#FFFF00\'>' + crit + '%</font>';
            }
          }
          if (dexterity > 0) {
            if (type == 'Weapon') {
              _root.actiondescription += '\nAccuracy: <font color=\'#FFFF00\'>' + dexterity + '%</font>';
            } else {
              _root.actiondescription += '\nEvasion: <font color=\'#FFFF00\'>' + dexterity + '%</font>';
            }
          }
          if (health > 0) {
            if (type == 'Weapon') {
              _root.actiondescription += '\nHP Regen: <font color=\'#FFFF00\'>' + _root.withComma(Math.floor(health * 25)) + '%</font>';
            } else {
              _root.actiondescription += '\nMaxHP: <font color=\'#FFFF00\'>' + health + '%</font>';
            }
          }
          if (maxLevel > 1 && maxLevel != 9999) {
            _root.actiondescription += '\n\n<font color=\'#77DDFF\'>--- Item Level: <b>1</b> / ' + maxLevel + ' ---</font>';
            if (subtype == 'Trinket') {
              _root.actiondescription += '\n<font color=\'#55BBDD\'>EXP: 0 / ' + _root.withComma(Math.ceil(expTNL / 1000)) + ' (0%)</font>';
            } else {
              _root.actiondescription += '\n<font color=\'#55BBDD\'>EXP: 0 / ' + _root.withComma(Math.ceil(expTNL * 1.01 / 1000)) + ' (0%)</font>';
            }
          }
        }
        if (type == 'Enhancer') {
          if (subtype == 'Weapon Attack Enhancer') {
            _root.actiondescription += '\nType: Weapon Enhancer';
            _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + power + '</font>';
          } else {
            if (subtype == 'Weapon Unique Enhancer') {
              _root.actiondescription += '\nType: Weapon Unique Enhancer';
              _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + power + '</font>';
              _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
            } else {
              if (subtype == 'Weapon Speed Enhancer') {
                _root.actiondescription += '\nType: Weapon Enhancer';
                _root.actiondescription += '\n\nAttack Speed: <font color=\'#0099FF\'>+' + power + '</font>';
              } else {
                if (subtype == 'Weapon Defense Enhancer') {
                  _root.actiondescription += '\nType: Weapon Enhancer';
                  _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + power + '</font>';
                } else {
                  if (subtype == 'Armor Attack Enhancer') {
                    _root.actiondescription += '\nType: Armor Enhancer';
                    _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + power + '</font>';
                  } else {
                    if (subtype == 'Accessory Attack Enhancer') {
                      _root.actiondescription += '\nType: Accessory Enhancer';
                      _root.actiondescription += '\n\nAttack: <font color=\'#0099FF\'>+' + power + '</font>';
                    } else {
                      if (subtype == 'Armor Speed Enhancer') {
                        _root.actiondescription += '\nType: Armor Enhancer';
                        _root.actiondescription += '\n\nAttack Speed: <font color=\'#0099FF\'>+' + Math.floor(power * 5) + '%</font>';
                      } else {
                        if (subtype == 'Armor Defense Enhancer') {
                          _root.actiondescription += '\nType: Armor Enhancer';
                          _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + power + '</font>';
                        } else {
                          if (subtype == 'Armor Unique Enhancer') {
                            _root.actiondescription += '\nType: Armor Unique Enhancer';
                            _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + power + '</font>';
                            _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
                          } else {
                            if (subtype == 'Weapon Critical Enhancer') {
                              _root.actiondescription += '\nType: Weapon Enhancer';
                              _root.actiondescription += '\n\nCritical Chance: <font color=\'#0099FF\'>+' + power + '%</font>';
                            } else {
                              if (subtype == 'Weapon Dexterity Enhancer') {
                                _root.actiondescription += '\nType: Weapon Enhancer';
                                _root.actiondescription += '\n\nAccuracy: <font color=\'#0099FF\'>+' + power + '%</font>';
                              } else {
                                if (subtype == 'Weapon Health Enhancer') {
                                  _root.actiondescription += '\nType: Weapon Enhancer';
                                  _root.actiondescription += '\n\nHP Regen: <font color=\'#0099FF\'>+' + Math.floor(power * 25) + '%</font>';
                                } else {
                                  if (subtype == 'Armor Critical Enhancer') {
                                    _root.actiondescription += '\nType: Armor Enhancer';
                                    _root.actiondescription += '\n\nCritical Damage: <font color=\'#0099FF\'>+' + power + '%</font>';
                                  } else {
                                    if (subtype == 'Armor Dexterity Enhancer') {
                                      _root.actiondescription += '\nType: Armor Enhancer';
                                      _root.actiondescription += '\n\nEvasion: <font color=\'#0099FF\'>+' + power + '%</font>';
                                    } else {
                                      if (subtype == 'Armor Health Enhancer') {
                                        _root.actiondescription += '\nType: Armor Enhancer';
                                        _root.actiondescription += '\n\nMaxHP: <font color=\'#0099FF\'>+' + power + '%</font>';
                                      } else {
                                        if (subtype == 'Accessory Unique Enhancer') {
                                          _root.actiondescription += '\nType: Accessory Unique Enhancer';
                                          _root.actiondescription += '\n\nDefense: <font color=\'#0099FF\'>+' + power + '</font>';
                                          _root.actiondescription += '\n<font color=\'#FFFF00\'>Can only be used on fully enhanced and fully leveled items</font>';
                                        } else {
                                          if (subtype == 'Weapon Bonus Adder') {
                                            _root.actiondescription += '\nType: Weapon Bonus Adder';
                                            if (typeS == true) {
                                              _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font>.</font>';
                                            }
                                          } else {
                                            if (subtype == 'Armor Bonus Adder') {
                                              _root.actiondescription += '\nType: Armor Bonus Adder';
                                              if (typeS == true) {
                                                _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font>.</font>';
                                              }
                                            } else {
                                              if (subtype == 'Accessory Bonus Adder') {
                                                _root.actiondescription += '\nType: Accessory Bonus Adder';
                                                if (typeS == true) {
                                                  _root.actiondescription += '\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item (except Medals and some Trinkets)</font>.</font>';
                                                }
                                              } else {
                                                if (subtype == 'Weapon Lifespan Extender') {
                                                  _root.actiondescription += '\nType: Weapon Lifespan Extender';
                                                  _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + power + '</font>';
                                                } else {
                                                  if (subtype == 'Armor Lifespan Extender') {
                                                    _root.actiondescription += '\nType: Armor Lifespan Extender';
                                                    _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + power + '</font>';
                                                  } else {
                                                    if (subtype == 'Accessory Lifespan Extender') {
                                                      _root.actiondescription += '\nType: Accessory Lifespan Extender';
                                                      _root.actiondescription += '\n\nLifespan (Days): <font color=\'#0099FF\'>+' + power + '</font>';
                                                    } else {
                                                      if (subtype == 'Weapon Growth Rock') {
                                                        _root.actiondescription += '\nType: Weapon Enhancer';
                                                        _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + power + '</font>';
                                                      } else {
                                                        if (subtype == 'Armor Growth Rock') {
                                                          _root.actiondescription += '\nType: Armor Enhancer';
                                                          _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + power + '</font>';
                                                        } else {
                                                          if (subtype == 'Accessory Growth Rock') {
                                                            _root.actiondescription += '\nType: Accessory Enhancer';
                                                            _root.actiondescription += '\n\nMax Level: <font color=\'#0099FF\'>+' + power + '</font>';
                                                          } else {
                                                            if (subtype == 'Weapon Spirit Rock') {
                                                              _root.actiondescription += '\nType: Weapon Spirit Rock';
                                                              if (typeS == true) {
                                                                _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                              } else {
                                                                _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                              }
                                                            } else {
                                                              if (subtype == 'Armor Spirit Rock') {
                                                                _root.actiondescription += '\nType: Armor Spirit Rock';
                                                                if (typeS == true) {
                                                                  _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                } else {
                                                                  _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                }
                                                              } else {
                                                                if (subtype == 'Accessory Spirit Rock') {
                                                                  _root.actiondescription += '\nType: Accessory Spirit Rock';
                                                                  if (typeS == true) {
                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FFFF00\'>any item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                  } else {
                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Can be used on <font color=\'#FF9900\'>a fully enhanced item</font> to turn it into a Spirit item, or turn a Spirit item into a regular item.</font>';
                                                                  }
                                                                } else {
                                                                  if (subtype == 'Mystery Enhancer Identifier') {
                                                                    _root.actiondescription += '\nType: Mystery Enhancer Identifier';
                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Reveals the effect of a Mystery Enhancer.</font>';
                                                                  } else {
                                                                    if (subtype == 'Weapon Mystery Enhancer') {
                                                                      _root.actiondescription += '\nType: Weapon Enhancer';
                                                                      _root.actiondescription += '\n\nEnhancement Level: <font color=\'#0099FF\'>' + power + '</font>';
                                                                    } else {
                                                                      if (subtype == 'Armor Mystery Enhancer') {
                                                                        _root.actiondescription += '\nType: Armor Enhancer';
                                                                        _root.actiondescription += '\n\nEnhancement Level: <font color=\'#0099FF\'>' + power + '</font>';
                                                                      } else {
                                                                        if (subtype == 'Enhancer Success Enhancer') {
                                                                          _root.actiondescription += '\nType: Enhancer Enhancer';
                                                                          _root.actiondescription += '\nSuccess Rate: <font color=\'#0099FF\'>' + power + '% of current</font>';
                                                                        } else {
                                                                          if (subtype == 'Enhancer Destruction Enhancer') {
                                                                            _root.actiondescription += '\nType: Enhancer Enhancer';
                                                                            _root.actiondescription += '\nDestruction Rate: <font color=\'#0099FF\'>' + power + '% of current</font>';
                                                                          } else {
                                                                            if (subtype == 'Weapon Unobtainium Enhancer') {
                                                                              _root.actiondescription += '\nType: Weapon Unobtainium Enhancer';
                                                                              _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + power + ' of original</font>';
                                                                            } else {
                                                                              if (subtype == 'Armor Unobtainium Enhancer') {
                                                                                _root.actiondescription += '\nType: Armor Unobtainium Enhancer';
                                                                                _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + power + ' of original</font>';
                                                                              } else {
                                                                                if (subtype == 'Accessory Unobtainium Enhancer') {
                                                                                  _root.actiondescription += '\nType: Accessory Unobtainium Enhancer';
                                                                                  _root.actiondescription += '\n\nBonus Tier: <font color=\'#0099FF\'>+' + power + ' of original</font>';
                                                                                } else {
                                                                                  if (subtype == 'Weapon Finalizer') {
                                                                                    _root.actiondescription += '\nType: Weapon Finalizer';
                                                                                    _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + power + '</b> or below weapon. A finalized item gains extra stats, but can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                  } else {
                                                                                    if (subtype == 'Armor Finalizer') {
                                                                                      _root.actiondescription += '\nType: Armor Finalizer';
                                                                                      _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + power + '</b> or below armor piece. A finalized item gains extra stats, but can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                    } else {
                                                                                      if (subtype == 'Accessory Finalizer') {
                                                                                        _root.actiondescription += '\nType: Accessory Finalizer';
                                                                                        _root.actiondescription += '\n\n<font color=\'#0099FF\'>Finalize a Rank <b>' + power + '</b> or below accessory (except Trinket). A finalized item gains extra stats, can no longer be enhanced, fused, leveled up, and cannot have its bonuses changed.</font>';
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (typeI == true) {
            _root.actiondescription += '\n\n<font color=\'#FF9900\'>Does not disappear when used.</font>';
          }
        }
        if (type == 'Potion') {
          if (subtype == 'Power Buff Potion') {
            _root.actiondescription += '\nType: Power Buff';
            _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
            _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
            _root.actiondescription += '\nEffect:';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>Defense: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxHP: <b>+' + Math.floor(150 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxMP: <b>+' + Math.floor(250 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>Accuracy: <b>+' + Math.floor(75 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n<font color=\'#FFCC33\'>Evasion: <b>+' + Math.floor(75 * _root.buffMultiplier) + '%</b></font>';
            _root.actiondescription += '\n[Will replace current buff]';
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
          } else {
            if (subtype == 'Master Buff Potion') {
              _root.actiondescription += '\nType: Master Buff';
              _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
              _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
              _root.actiondescription += '\nEffect:';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Mastery: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage Taken: <b>-' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>HP Regen: <b>+' + Math.floor(2500 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>MP Regen: <b>+' + Math.floor(1250 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Hit Chance: <b>+' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Dodge Chance: <b>+' + Math.floor(25 * _root.buffMultiplier) + '%</b></font>';
              _root.actiondescription += '\n[Will replace current buff]';
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
            } else {
              if (subtype == 'Reward Buff Potion') {
                _root.actiondescription += '\nType: Reward Buff';
                _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                _root.actiondescription += '\nEffect:';
                _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                _root.actiondescription += '\n[Will replace current buff]';
                _root.actiondescription += '\n\n<font color=\'#FFFF00\'>The duration of this buff is affected by Potion Efficiency.</font>';
              } else {
                if (subtype == 'Nightmare Potion') {
                  _root.actiondescription += '\nType: ???';
                  _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                  _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                } else {
                  if (subtype == 'Anti-Curse Potion') {
                    _root.actiondescription += '\nType: Anti-Curse Potion';
                    _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                    _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                  } else {
                    if (subtype == 'Loot Magnet') {
                      _root.actiondescription += '\nType: Loot Magnet';
                      _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                      _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                      _root.actiondescription += '\nEffect:';
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Magnetizes most loot drops</font>';
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Epic Monster Rate: <b>+' + Math.floor(100 * _root.buffMultiplier) + '%</b></font>';
                      _root.actiondescription += '\n[Will replace current buff]';
                    } else {
                      if (subtype == 'Monster Magnet') {
                        _root.actiondescription += '\nType: Monster Magnet';
                        _root.actiondescription += '\nCan be used <font color=\'#0099FF\'><b>' + defense + '</b> more time(s)</font>';
                        _root.actiondescription += '\nDuration: <font color=\'#0099FF\'><b>' + _root.convertSec(attack) + '</b></font>';
                        _root.actiondescription += '\nEffect:';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Magnetizes monsters</font>';
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Spawn Rate: <b>+' + Math.floor(50 * _root.buffMultiplier) + '%</b></font>';
                        _root.actiondescription += '\n[Will replace current buff]';
                      } else {
                        if (subtype == 'Rebirth Potion') {
                          _root.actiondescription += '\nType: Rebirth Potion';
                        } else {
                          if (subtype == 'Potion of Regrets') {
                            _root.actiondescription += '\nType: Potion of Regrets';
                            _root.actiondescription += '\nYou can use Potion of Regrets <font color=\'#0099FF\'><b>' + _root.save.regretRem + '</b> more time(s) this month</font>';
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (type == 'Chip') {
          if (subtype == 'Monster Chip (Rare)') {
            _root.actiondescription += '\nType: Monster Chip';
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
            if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
              _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
            } else {
              if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 500 kill count for this monster.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 500 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 15) {
                    _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-1 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 100 kill count for this monster.';
                  } else {
                    if (_root.save.arenaAllyUpgrade[attack] == 10) {
                      _root.actiondescription += '\nYou have fully upgraded this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-1 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 100 kill count for this monster.';
                    } else {
                      _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to upgrade the Invisible Ally for this monster.';
                    }
                  }
                }
              }
            }
          }
          if (subtype == 'Monster Chip (Epic)') {
            _root.actiondescription += '\nType: Monster Chip';
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
            if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
              _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
            } else {
              if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 5,000 kill count for this monster.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 5,000 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 15) {
                    _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-2 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 1,000 kill count for this monster.';
                  } else {
                    if (_root.save.arenaAllyUpgrade[attack] == 10) {
                      _root.actiondescription += '\nYou have fully upgraded this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-2 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 1,000 kill count for this monster.';
                    } else {
                      _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to fully upgrade the Invisible Ally for this monster.';
                    }
                  }
                }
              }
            }
          }
          if (subtype == 'Monster Chip (Ultra)') {
            _root.actiondescription += '\nType: Monster Chip';
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
            if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
              _root.actiondescription += '\nYou haven\'t mastered this Invisible Ally. This Monster Chip cannot be used.';
            } else {
              if (_root.save.arenaAllyUpgrade[attack] == 15 && _root.enemyList[attack].allyPassive3 == '') {
                _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nClick this Monster Chip to gain 50,000 kill count for this monster.';
              } else {
                if (_root.save.arenaAllyUpgrade[attack] == 10 && _root.enemyList[attack].allyPassive3 == '') {
                  _root.actiondescription += '\nYou have fully upgraded this monster.\n\nClick this Monster Chip to obtain the ULTRA ALLY for this monster and gain 50,000 kill count for this monster.';
                } else {
                  if (_root.save.arenaAllyUpgrade[attack] == 15) {
                    _root.actiondescription += '\nYou have obtained the ULTRA ALLY for this monster.\n\nYou can go to Danger Zone in Hardcore + Apocalypse Mode and use this Monster Chip to summon the ULTRA-3 form of this monster (if it exists). In case you use it without being in Danger Zone in Hardcore + Apocalypse Mode, you will gain 10,000 kill count for this monster.';
                  } else {
                    _root.actiondescription += '\nAlly Upgrades: <b>' + _root.save.arenaAllyUpgrade[attack] + '</b> / 10\nClick this Monster Chip to obtain the ULTRA ALLY for this monster.';
                  }
                }
              }
            }
          }
          if (subtype == 'Monster Chip (Kongpanion)') {
            _root.actiondescription += '\nType: Monster Chip';
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>[#' + attack + '] ' + _root.enemyList[attack].name + '</font>';
            if (isNaN(_root.save.arenaAllyEXP[attack]) || _root.save.arenaAllyEXP[attack] < 10000) {
              _root.actiondescription += '\nYou do not own this Kongpanion. Use this Monster Chip to obtain the Kongpanion for this monster. Please note that this only applies to the respective Invisible Ally in Anti-Idle: The Game and it will NOT give you an actual Kongpanion that is visible on your Kongregate profile page.';
            } else {
              if (_root.save.arenaAllyUpgrade[attack] == 15) {
                _root.actiondescription += '\nYou already have this Shiny Kongpanion. This Monster Chip cannot be used.';
              } else {
                _root.actiondescription += '\nYou already have the non-Shiny version of this Kongpanion. Use this Monster Chip to upgrade it to a Shiny Kongpanion. Please note that this only applies to the respective Invisible Ally in Anti-Idle: The Game and it will NOT give you an actual Shiny Kongpanion that is visible on your Kongregate profile page.';
              }
            }
          }
          if (attack <= 500) {
            _root.actiondescription += '\n\nKill count: <b>' + _root.withComma(_root.save.arenaBestiary[attack]) + '</b>';
          }
        }
        _root.actiondescription += '\n';
        if (type == 'Enhancer') {
          tier = 0;
          if (bonus != '') {
            _root.actiondescription += '\nAdd Bonus: <font color=\'#99FF33\'><b>' + bonus + '</b></font>';
            tier = 1;
          }
          if (ability != '') {
            _root.actiondescription += '\nAdd Bonus: <font color=\'#FFCC33\'><b>' + ability + '</b></font>';
            tier = 1;
          }
          if (moreBonus != '') {
            _root.actiondescription += '\nAdd Bonus: <font color=\'#CC99FF\'><b>' + moreBonus + '</b></font>';
            tier = 1;
          }
          if (bonus != '' || ability != '' || moreBonus != '') {
            _root.actiondescription += '\n[Will replace same color bonuses]';
          }
        } else {
          tier = Math.ceil(reqRank / 10);
          if (type == 'Weapon' && _root.save.arenaSkill[59] > 0) {
            tier += Math.floor(_root.save.arenaSkill[59] / 5);
          }
          baseTier = tier;
          tier += unob;
          if (unob > 0 || bonus != '' || ability != '' || moreBonus != '') {
            if (type == 'Weapon' || type == 'Armor' || type == 'Accessory') {
              _root.actiondescription += '\n<font color=\'#DDFF77\'>--- Bonus Tier: <b>' + tier + '</b></font>';
              if (unob > 0) {
                _root.actiondescription += ' <font color=\'#BBCC66\'>(' + baseTier + ' + <font color=\'#DDFF77\'>' + unob + '</font>)</font>';
              } else {}
              _root.actiondescription += '<font color=\'#DDFF77\'> ---</font>';
            }
          }
          if (bonus == 'Random') {
            _root.actiondescription += '\n<font color=\'#99FF33\'><b>Random Bonus</b></font>';
          } else {
            if (bonus == 'Reward') {
              _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.25) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
              _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
            } else {
              if (bonus == 'EXP') {
                _root.actiondescription += '\n<font color=\'#99FF33\'>EXP: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
              } else {
                if (bonus == 'Coin') {
                  _root.actiondescription += '\n<font color=\'#99FF33\'>Coin: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                } else {
                  if (bonus == 'Pixel') {
                    _root.actiondescription += '\n<font color=\'#99FF33\'>Pixel: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                  } else {
                    if (bonus == 'Drop Rate') {
                      _root.actiondescription += '\n<font color=\'#99FF33\'>Drop Rate: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                    } else {
                      if (bonus == 'Spawn Rate') {
                        _root.actiondescription += '\n<font color=\'#99FF33\'>Spawn Rate: <b>+' + Math.ceil(tier * 0.2) + '%</b></font>';
                      } else {
                        if (bonus == 'Rare Monster Rate') {
                          _root.actiondescription += '\n<font color=\'#99FF33\'>Rare Monster Rate: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                        } else {
                          if (bonus == 'Epic Monster Rate') {
                            _root.actiondescription += '\n<font color=\'#99FF33\'>Epic Monster Rate: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                          } else {
                            if (bonus == 'Ignore Epic Weapons') {
                              _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Epic [Element] Staff and Light/Dark Glaive loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 50000)) + ' Pixels</b> each</font>';
                            } else {
                              if (bonus == 'Ignore Bonus Rocks') {
                                _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Bonus Rock loots (except special Bonus Rocks) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                              } else {
                                if (bonus == 'Ignore Pendants') {
                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Pendant loots (except Immortal Pendant, Collector\'s Pendant and Rank 500 Pendants) and replace them with <b>' + _root.withComma(Math.ceil(tier * 5000)) + ' Pixels</b> each</font>';
                                } else {
                                  if (bonus == 'Ignore Finalizers') {
                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore Finalizer loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                  } else {
                                    if (bonus == 'Ignore Outfit Items') {
                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Ignore outfit loots and replace them with <b>' + _root.withComma(Math.ceil(tier * 25000)) + ' Pixels</b> each</font>';
                                    } else {
                                      if (bonus == 'Fire Element') {
                                        _root.actiondescription += '\n<font color=\'#99FF33\'>Fire Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                      } else {
                                        if (bonus == 'Ice Element') {
                                          _root.actiondescription += '\n<font color=\'#99FF33\'>Ice Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                        } else {
                                          if (bonus == 'Wind Element') {
                                            _root.actiondescription += '\n<font color=\'#99FF33\'>Wind Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                          } else {
                                            if (bonus == 'Earth Element') {
                                              _root.actiondescription += '\n<font color=\'#99FF33\'>Earth Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                            } else {
                                              if (bonus == 'Thunder Element') {
                                                _root.actiondescription += '\n<font color=\'#99FF33\'>Thunder Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                              } else {
                                                if (bonus == 'Water Element') {
                                                  _root.actiondescription += '\n<font color=\'#99FF33\'>Water Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                } else {
                                                  if (bonus == 'Light Element') {
                                                    _root.actiondescription += '\n<font color=\'#99FF33\'>Light Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                  } else {
                                                    if (bonus == 'Dark Element') {
                                                      _root.actiondescription += '\n<font color=\'#99FF33\'>Dark Element: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (ability == 'Random') {
            _root.actiondescription += '\n<font color=\'#FFCC33\'><b>Random Bonus</b></font>';
          } else {
            if (ability == 'Attack') {
              _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
            } else {
              if (ability == 'Attack Speed') {
                _root.actiondescription += '\n<font color=\'#FFCC33\'>Attack Speed: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
              } else {
                if (ability == 'Ignore Defense') {
                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Ignore <b>' + Math.ceil(tier * 1) + '%</b> of monster DEF</font>';
                } else {
                  if (ability == 'Mastery') {
                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Min Damage: <b>+' + Math.ceil(tier * 1) + '%</b> of Max Damage</font>';
                  } else {
                    if (ability == 'Critical Chance') {
                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                    } else {
                      if (ability == 'Critical Damage') {
                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Critical Damage: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                      } else {
                        if (ability == 'Defense') {
                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Defense: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                        } else {
                          if (ability == 'Damage Taken') {
                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage Taken: <b>-' + Math.ceil(tier * 1) + '%</b></font>';
                          } else {
                            if (ability == 'Reflect') {
                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Reflect Damage: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                            } else {
                              if (ability == 'Accuracy') {
                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Accuracy: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                              } else {
                                if (ability == 'Hit Chance') {
                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Hit Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                } else {
                                  if (ability == 'Evasion') {
                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Evasion: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                  } else {
                                    if (ability == 'Dodge Chance') {
                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Dodge Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                    } else {
                                      if (ability == 'Poison Chance') {
                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                      } else {
                                        if (ability == 'Weaken Chance') {
                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                        } else {
                                          if (ability == 'Blind Chance') {
                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Chance: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                          } else {
                                            if (ability == 'Stun Chance') {
                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Stun Chance: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                            } else {
                                              if (ability == 'Silence Chance') {
                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Silence Chance: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                              } else {
                                                if (ability == 'HP') {
                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxHP: <b>+' + Math.ceil(tier * 3) + '%</b></font>';
                                                } else {
                                                  if (ability == 'MP') {
                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>MaxMP: <b>+' + Math.ceil(tier * 3) + '%</b></font>';
                                                  } else {
                                                    if (ability == 'HP Regen') {
                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>HP Regen: <b>+' + Math.ceil(tier * 100) + '%</b></font>';
                                                    } else {
                                                      if (ability == 'MP Regen') {
                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>MP Regen: <b>+' + Math.ceil(tier * 50) + '%</b></font>';
                                                      } else {
                                                        if (ability == 'Rage Depletion') {
                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Depletion: <b>-' + Math.ceil(tier * 1) + '%</b></font>';
                                                        } else {
                                                          if (ability == 'Drain') {
                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Drain Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                          } else {
                                                            if (ability == 'Mana Eater') {
                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>When you kill a monster, MP <b>+' + Math.ceil(tier * 500) + '</b></font>';
                                                            } else {
                                                              if (ability == 'Autosteal') {
                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Autosteal Level: <b>+' + Math.ceil(tier * 1) + '</b></font>';
                                                              } else {
                                                                if (ability == 'Double Hit Chance') {
                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Double Hit Chance: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                } else {
                                                                  if (ability == 'Rage Attack') {
                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Attack: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                  } else {
                                                                    if (ability == 'Rage Speed') {
                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Rage Speed: <b>+' + Math.ceil(tier * 2.5) + '%</b></font>';
                                                                    } else {
                                                                      if (ability == 'Poison Damage') {
                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Damage: <b>+' + Math.ceil(tier * 25) + '%</b> / sec</font>';
                                                                      } else {
                                                                        if (ability == 'Poison Duration') {
                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>Poison Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                        } else {
                                                                          if (ability == 'Weaken Effect') {
                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Weakened monster ATT/DEF: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                          } else {
                                                                            if (ability == 'Weaken Duration') {
                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Weaken Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                            } else {
                                                                              if (ability == 'Blind Effect') {
                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Blinded monster ACC/EVA: <b>-' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                              } else {
                                                                                if (ability == 'Blind Duration') {
                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'>Blind Duration: <b>+' + Math.ceil(tier * 1) + ' sec</b></font>';
                                                                                } else {
                                                                                  if (ability == 'Potion Efficiency') {
                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Potion Efficiency: <b>+' + Math.ceil(tier * 10) + '%</b></font>';
                                                                                  } else {
                                                                                    if (ability == 'Boss Damage') {
                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                    } else {
                                                                                      if (ability == 'Magic Resist') {
                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage taken from magic attacks is reduced by <b>' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                      } else {
                                                                                        if (ability == 'Instant Kill') {
                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 0.5) + '%</b> chance to instantly kill a non-boss monster if its HP is below 50%</font>';
                                                                                        } else {
                                                                                          if (ability == 'Negate Effect') {
                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to negate status effects</font>';
                                                                                          } else {
                                                                                            if (ability == 'Damage') {
                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                                              _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Bosses: <b>+' + Math.ceil(tier * 1.5) + '%</b></font>';
                                                                                            } else {
                                                                                              if (ability == 'Non-Boss Damage') {
                                                                                                _root.actiondescription += '\n<font color=\'#FFCC33\'>Damage vs. Non-Bosses: <b>+' + Math.ceil(tier * 2) + '%</b></font>';
                                                                                              } else {
                                                                                                if (ability == 'Extra Combo') {
                                                                                                  _root.actiondescription += '\n<font color=\'#FFCC33\'><b>' + Math.ceil(tier * 1) + '%</b> chance to gain +3 extra combo per attack</font>';
                                                                                                } else {
                                                                                                  if (ability == 'Magic Reflect') {
                                                                                                    _root.actiondescription += '\n<font color=\'#FFCC33\'>Magic Reflect: <b>+' + Math.ceil(tier * 10) + '%</b> of Physical Reflect</font>';
                                                                                                  } else {
                                                                                                    if (ability == 'Nullify Death Penalty') {
                                                                                                      _root.actiondescription += '\n<font color=\'#FFCC33\'><b>100%</b> chance to nullify death penalty</font>';
                                                                                                    } else {
                                                                                                      if (ability == 'Buff Effect') {
                                                                                                        _root.actiondescription += '\n<font color=\'#FFCC33\'>Buff Effect: <b>+' + Math.ceil(tier * 0.5) + '%</b></font>';
                                                                                                      } else {
                                                                                                        if (ability == 'All Elements') {
                                                                                                          _root.actiondescription += '\n<font color=\'#FFCC33\'>All Elements: <b>+' + Math.ceil(tier * 1) + '%</b></font>';
                                                                                                        } else {
                                                                                                          if (ability == 'Max Spirit') {
                                                                                                            _root.actiondescription += '\n<font color=\'#FFCC33\'>Max Spirit: <b>+' + Math.ceil(tier * 10) + '</b></font>';
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (moreBonus == 'Random') {
            _root.actiondescription += '\n<font color=\'#CC99FF\'><b>Random Bonus</b></font>';
          } else {
            if (moreBonus == 'Equipment Attack') {
              _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Attack: <b>+' + _root.withComma(Math.ceil(0.1 * tier * tier)) + '</b></font>';
            } else {
              if (moreBonus == 'Equipment Defense') {
                _root.actiondescription += '\n<font color=\'#CC99FF\'>Equipment Defense: <b>+' + _root.withComma(Math.ceil(0.15 * tier * tier)) + '</b></font>';
              } else {
                if (moreBonus == 'Attack Power') {
                  _root.actiondescription += '\n<font color=\'#CC99FF\'>Attack Power: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                } else {
                  if (moreBonus == 'Defense Power') {
                    _root.actiondescription += '\n<font color=\'#CC99FF\'>Defense Power: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                  } else {
                    if (moreBonus == 'MaxHP') {
                      _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxHP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                    } else {
                      if (moreBonus == 'MaxMP') {
                        _root.actiondescription += '\n<font color=\'#CC99FF\'>MaxMP: <b>+' + _root.withComma(Math.ceil(100 * tier * tier)) + '</b></font>';
                      } else {
                        if (moreBonus == 'Accuracy') {
                          _root.actiondescription += '\n<font color=\'#CC99FF\'>Accuracy: <b>+' + _root.withComma(Math.ceil(4 * tier * tier)) + '</b></font>';
                        } else {
                          if (moreBonus == 'Evasion') {
                            _root.actiondescription += '\n<font color=\'#CC99FF\'>Evasion: <b>+' + _root.withComma(Math.ceil(6 * tier * tier)) + '</b></font>';
                          } else {
                            if (moreBonus == 'EXP / Boss Kill') {
                              _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Boss Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +100% of original EXP)</font>';
                            } else {
                              if (moreBonus == 'EXP / Rare Kill') {
                                _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Rare Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +200% of original EXP)\nEXP / Epic Kill: <b>+' + _root.withComma(Math.ceil(2 * tier * tier)) + '</b>\n(Limit: +400% of original EXP)</font>';
                              } else {
                                if (moreBonus == 'EXP / Epic Kill') {
                                  _root.actiondescription += '\n<font color=\'#CC99FF\'>EXP / Epic Kill: <b>+' + _root.withComma(Math.ceil(10 * tier * tier)) + '</b>\n(Limit: +400% of original EXP)</font>';
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (name.indexOf('Humblebee') != -1) {
          if (maxLevel >= 184 && maxLevel < 284) {
            _root.actiondescription += '\n\n<font color=\'#FFFF00\'>1 more Humblebee Armor Upgrade can be applied.\n</font>';
          } else {
            if (maxLevel >= 84) {
              _root.actiondescription += '\n\n<font color=\'#FFFF00\'>2 more Humblebee Armor Upgrades can be applied.\n</font>';
            }
          }
        }
        if (desc != undefined && desc != '') {
          _root.actiondescription += '\n\n<font color=\'#CCCCCC\'>' + desc + '</font>';
        }
        if (sell > 0) {
          _root.actiondescription += '\n\nSell for: <font color=\'#FFFF00\'>' + _root.withComma(sell) + '</font> Pixels';
        }
        _root.actiondescription += '</font>';
        if (_root.save.arenaLevel >= 50) {
          if (desc == 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!') {
          } else {
            if (desc == 'Thank you for your donation and your continued support!') {
            } else {
              tmpName = name;
              if (tmpName.indexOf('Dragon Slayer Hat') != -1) {
                tmpName = 'Dragon Slayer Hat';
              }
              if (tmpName.indexOf('Dragon Slayer Shirt') != -1) {
                tmpName = 'Dragon Slayer Shirt';
              }
              if (tmpName.indexOf('Dragon Slayer Gloves') != -1) {
                tmpName = 'Dragon Slayer Gloves';
              }
              if (tmpName.indexOf('Dragon Slayer Pants') != -1) {
                tmpName = 'Dragon Slayer Pants';
              }
              if (tmpName.indexOf('Dragon Slayer Shoes') != -1) {
                tmpName = 'Dragon Slayer Shoes';
              }
              if (tmpName.indexOf('Demon Slayer Hat') != -1) {
                tmpName = 'Demon Slayer Hat';
              }
              if (tmpName.indexOf('Demon Slayer Shirt') != -1) {
                tmpName = 'Demon Slayer Shirt';
              }
              if (tmpName.indexOf('Demon Slayer Gloves') != -1) {
                tmpName = 'Demon Slayer Gloves';
              }
              if (tmpName.indexOf('Demon Slayer Pants') != -1) {
                tmpName = 'Demon Slayer Pants';
              }
              if (tmpName.indexOf('Demon Slayer Shoes') != -1) {
                tmpName = 'Demon Slayer Shoes';
              }
              if (tmpName.indexOf('[Event] [I] Mystery Enhancer Identifier') != -1) {
                tmpName = '[Event] Mystery Enhancer Identifier';
              }
              if (tmpName.indexOf('Armor Cleansing Rock') != -1) {
                tmpName = 'Armor Cleansing Rock';
              }
              tmpSlot = 1400;
              i = 1401;
              while (i <= 3000) {
                if (_root.museumItem[i] == tmpName) {
                  tmpSlot = i;
                  if (_root.save.inventoryExist[tmpSlot] != 1) {
                    i = 3001;
                  }
                }
                ++i;
              }
              if (tmpSlot != 1400) {
                if (_root.save.inventoryExist[tmpSlot] == 1) {
                } else {
                  _root.actiondescription += '\n\n<font color=\'#FFCC99\'>Add this item to the Museum to gain <b>+' + _root.museumValue[tmpSlot] + '</b> CP!</font>';
                }
              }
            }
          }
        }
        _root.actiondescription2 = '';
        if (setID != 0) {
          _root.actiondescription2 += '<font color=\'#CC9900\'><b>' + _root.setArray[setID].setNameD + '</b></font>\n';
          _root.actiondescription2 += _root.displaySetItems(setID);
        }
      }

      onRollOver = function () {
        showText();
      };

      onRollOut = function () {
        _root.actiondescription = '';
        _root.actiondescription2 = '';
      };

      onDragOver = function () {
        showText();
      };

      onDragOut = function () {
        _root.actiondescription = '';
        _root.actiondescription2 = '';
      };

    }

    instance itemIcon of movieClip 4827  {

      onClipEvent (load) {
        function checkFrame() {
          if (_parent.type == 'Weapon') {
            gotoAndStop(2);
          } else {
            if (_parent.subtype == 'Hat') {
              gotoAndStop(3);
            } else {
              if (_parent.subtype == 'Shirt') {
                gotoAndStop(4);
              } else {
                if (_parent.subtype == 'Gloves') {
                  gotoAndStop(5);
                } else {
                  if (_parent.subtype == 'Pants') {
                    gotoAndStop(6);
                  } else {
                    if (_parent.subtype == 'Shoes') {
                      gotoAndStop(7);
                    } else {
                      if (_parent.subtype == 'Skin') {
                        gotoAndStop(14);
                      } else {
                        if (_parent.subtype == 'Medal') {
                          gotoAndStop(9);
                        } else {
                          if (_parent.subtype == 'Pendant') {
                            gotoAndStop(11);
                          } else {
                            if (_parent.subtype == 'Earring') {
                              gotoAndStop(12);
                            } else {
                              if (_parent.subtype == 'Trinket') {
                                gotoAndStop(13);
                              } else {
                                if (_parent.type == 'Enhancer') {
                                  gotoAndStop(8);
                                } else {
                                  if (_parent.type == 'Potion') {
                                    gotoAndStop(10);
                                  } else {
                                    if (_parent.type == 'Chip') {
                                      gotoAndStop(15);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          bonuspow = _parent.bonusPow;
          if (isNaN(bonuspow)) {
            bonuspow = 0;
          }
          if (bonuspow >= 100000) {
            fr = 11;
          } else {
            if (bonuspow >= 706) {
              fr = 10;
            } else {
              if (bonuspow >= 406) {
                fr = 9;
              } else {
                if (bonuspow >= 256) {
                  fr = 8;
                } else {
                  if (bonuspow >= 156) {
                    fr = 7;
                  } else {
                    if (bonuspow >= 106) {
                      fr = 6;
                    } else {
                      if (bonuspow >= 66) {
                        fr = 5;
                      } else {
                        if (bonuspow >= 36) {
                          fr = 4;
                        } else {
                          if (bonuspow >= 16) {
                            fr = 3;
                          } else {
                            if (bonuspow >= 1) {
                              fr = 2;
                            } else {
                              fr = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (powDisp._currentframe != fr) {
            powDisp.gotoAndStop(fr);
          }
          cost = _parent.cost;
          costType = _parent.costType;
          if (_parent.craftItem == true || _root.save.arenaPixel >= cost && costType == 'Pixels' || _root.save.arenaCraft >= cost && costType == 'Crafting Material' || _root.save.blueCoin >= cost && costType == 'Blue Coins' || _root.save.arenaProofTraining >= cost && costType == 'Proof of Training' || _root.save.arenaProofMission >= cost && costType == 'Proof of Mission') {
            fr = 1;
            if (_root.save.arenaLevel < _parent.reqRank) {
              fr = 5;
            }
          } else {
            fr = 4;
          }
          if (itemBG._currentframe != fr) {
            itemBG.gotoAndStop(fr);
          }
          protDisp.gotoAndStop(2);
        }

        checkFrame();
      }

      onClipEvent (enterFrame) {
        checkFrame();
      }
    }
  }

  movieClip 5508  {
  }

  movieClip 5530  {

    frame 1 {
      stop();
    }
  }

  movieClip 5531  {

    instance of movieClip 5530  {

      onClipEvent (load) {
        lev = 1;
        if (_parent.recipe >= lev) {
          gotoAndStop(lev + 1);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = _parent.levDesc[lev];
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 5530  {

      onClipEvent (load) {
        lev = 2;
        if (_parent.recipe >= lev) {
          gotoAndStop(lev + 1);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = _parent.levDesc[lev];
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 5530  {

      onClipEvent (load) {
        lev = 3;
        if (_parent.recipe >= lev) {
          gotoAndStop(lev + 1);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = _parent.levDesc[lev];
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 5530  {

      onClipEvent (load) {
        lev = 4;
        if (_parent.recipe >= lev) {
          gotoAndStop(lev + 1);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = _parent.levDesc[lev];
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 5530  {

      onClipEvent (load) {
        lev = 5;
        if (_parent.recipe >= lev) {
          gotoAndStop(lev + 1);
        }
      }

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = _parent.levDesc[lev];
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }
  }

  movieClip 5534  {

    frame 1 {
      stop();
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.bestLevel >= 500) {
          recipe = 2;
        }
        if (_root.save.bestLevel >= 1000) {
          recipe = 3;
        }
        if (_root.save.bestLevel >= 2000) {
          recipe = 4;
        }
        if (_root.save.bestLevel >= 3000) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Reach level 500');
        levDesc.push('Reach level 1,000');
        levDesc.push('Reach level 2,000');
        levDesc.push('Reach level 3,000');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.recipeLevel >= 1) {
          recipe = 2;
        }
        if (_root.save.recipeLevel >= 2) {
          recipe = 3;
        }
        if (_root.save.recipeLevel >= 3) {
          recipe = 4;
        }
        if (_root.save.recipeLevel >= 4) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Can be obtained as a loot drop from Lv. 100+ bosses');
        levDesc.push('Can be obtained as a loot drop from Lv. 300+ bosses');
        levDesc.push('Can be obtained as a loot drop from Lv. 900+ bosses');
        levDesc.push('Can be obtained as a loot drop from Lv. 2700+ bosses');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.secretRecipeLevel >= 1) {
          recipe = 2;
        }
        if (_root.save.secretRecipeLevel >= 2) {
          recipe = 3;
        }
        if (_root.save.secretRecipeLevel >= 3) {
          recipe = 4;
        }
        if (_root.save.secretRecipeLevel >= 4) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Can be obtained as a loot drop from rare monsters');
        levDesc.push('Can be obtained as a loot drop from rare monsters');
        levDesc.push('Can be obtained as a loot drop from rare monsters');
        levDesc.push('Can be obtained as a loot drop from rare monsters');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.careerLevel[4] >= 1) {
          recipe = 2;
        }
        if (_root.save.careerLevel[4] >= 25) {
          recipe = 3;
        }
        if (_root.save.careerLevel[4] >= 50) {
          recipe = 4;
        }
        if (_root.save.careerLevel[4] >= 100) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Item Maker Career Lv. 1');
        levDesc.push('Item Maker Career Lv. 25');
        levDesc.push('Item Maker Career Lv. 50');
        levDesc.push('Item Maker Career Lv. 100');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.arenaKommanderComplete >= 1) {
          recipe = 2;
        }
        if (_root.save.arenaKommanderComplete >= 5) {
          recipe = 3;
        }
        if (_root.save.arenaKommanderComplete >= 30) {
          recipe = 4;
        }
        if (_root.save.arenaKommanderComplete >= 100) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Complete Mission Kommander\'s Mission 1 time');
        levDesc.push('Complete Mission Kommander\'s Mission 5 times');
        levDesc.push('Complete Mission Kommander\'s Mission 30 times');
        levDesc.push('Complete Mission Kommander\'s Mission 100 times');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 1) {
          recipe = 2;
        }
        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 10 && _root.save.raidMegaboss >= 180000) {
          recipe = 3;
        }
        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 60 && _root.save.raidMegaboss >= 270000) {
          recipe = 4;
        }
        if (!isNaN(_root.save.arenaBestiary[295]) && _root.save.arenaBestiary[295] >= 200 && _root.save.raidMegaboss >= 315000) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Conquer \'The Special Arena\' 1 time');
        levDesc.push('Conquer \'The Special Arena\' 10 times\nGet a high score of at least 270 seconds remaining');
        levDesc.push('Conquer \'The Special Arena\' 60 times\nGet a high score of at least 315 seconds remaining');
        levDesc.push('Conquer \'The Special Arena\' 200 times\nGet a high score of at least 360 seconds remaining');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 1) {
          recipe = 2;
        }
        if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 10) {
          recipe = 3;
        }
        if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 60) {
          recipe = 4;
        }
        if (!isNaN(_root.save.arenaBestiary[275]) && _root.save.arenaBestiary[275] >= 200) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Defeat Chuck Norris 1 time');
        levDesc.push('Defeat Chuck Norris 10 times');
        levDesc.push('Defeat Chuck Norris 60 times');
        levDesc.push('Defeat Chuck Norris 200 times');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.arenaZoneKill[23] >= 50) {
          recipe = 2;
        }
        if (_root.save.arenaZoneKill[23] >= 500) {
          recipe = 3;
        }
        if (_root.save.arenaZoneKill[23] >= 5000) {
          recipe = 4;
        }
        if (_root.save.arenaZoneKill[23] >= 50000) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Defeat 50 monsters in 9001: Mystic Forest');
        levDesc.push('Defeat 500 monsters in 9001: Mystic Forest');
        levDesc.push('Defeat 5,000 monsters in 9001: Mystic Forest');
        levDesc.push('Defeat 50,000 monsters in 9001: Mystic Forest');
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.arenaPrehistoricComplete >= 1) {
          recipe = 2;
        }
        if (_root.save.arenaPrehistoricComplete >= 5) {
          recipe = 3;
        }
        if (_root.save.arenaPrehistoricComplete >= 30) {
          recipe = 4;
        }
        if (_root.save.arenaPrehistoricComplete >= 100) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Complete Prehistoric Mission 1 time');
        levDesc.push('Complete Prehistoric Mission 5 times');
        levDesc.push('Complete Prehistoric Mission 30 times');
        levDesc.push('Complete Prehistoric Mission 100 times');
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 5531  {

      onClipEvent (load) {
        recipe = 1;
        if (_root.save.raidDungeon >= 1100) {
          recipe = 2;
        }
        if (_root.save.raidDungeon >= 1800) {
          recipe = 3;
        }
        if (_root.save.raidDungeon >= 2500) {
          recipe = 4;
        }
        if (_root.save.raidDungeon >= 3200) {
          recipe = 5;
        }
        levDesc = [zeroItem, ''];
        levDesc.push('Finish the Secret Dungeon with a score of at least 1,100');
        levDesc.push('Finish the Secret Dungeon with a score of at least 1,800');
        levDesc.push('Finish the Secret Dungeon with a score of at least 2,500');
        levDesc.push('Finish the Secret Dungeon with a score of at least 3,200');
      }
    }
  }

  movieClip 5535  {
  }

  movieClip 5542  {

    frame 1 {
      stop();
    }

    frame 2 {
      function checkCrystal() {
        crystalTemp *= 1;
        if (isNaN(crystalTemp)) {
          crystalTemp = 0;
        }
        if (crystalTemp > _root.save.arenaCrystal1) {
          crystalTemp = _root.save.arenaCrystal1;
        }
        if (crystalTemp > _parent.crystal1Max) {
          crystalTemp = _parent.crystal1Max;
        }
      }

      crystalText.restrict = '0-9';
      if (_parent.crystal1Apply == 0) {
        crystalTemp = 999;
      } else {
        crystalTemp = _parent.crystal1Apply;
      }
      crystalText.text = crystalTemp;
      checkCrystal();
      Selection.setFocus(crystalText);
      onEnterFrame = function () {
        checkCrystal();
      };

    }

    instance of movieClip 5535  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.checkCrystal();
        _parent._parent.crystal1Apply = _parent.crystalTemp;
        _parent._parent.checkCraftStat();
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    frame 3 {
      function checkCrystal() {
        crystalTemp *= 1;
        if (isNaN(crystalTemp)) {
          crystalTemp = 0;
        }
        if (crystalTemp > _root.save.arenaCrystal2) {
          crystalTemp = _root.save.arenaCrystal2;
        }
        if (crystalTemp > _parent.crystal2Max) {
          crystalTemp = _parent.crystal2Max;
        }
      }

      crystalText.restrict = '0-9';
      if (_parent.crystal2Apply == 0) {
        crystalTemp = 999;
      } else {
        crystalTemp = _parent.crystal2Apply;
      }
      checkCrystal();
      crystalText.text = crystalTemp;
      Selection.setFocus(crystalText);
      onEnterFrame = function () {
        checkCrystal();
      };

    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.checkCrystal();
        _parent._parent.crystal2Apply = _parent.crystalTemp;
        _parent._parent.checkCraftStat();
        _parent.gotoAndStop(1);
      }
    }
  }

  movieClip 5543  {

    frame 1 {
      function checkCraftStat() {
        ID = craftCurrent;
        if (craftType == 1) {
          type = 'Weapon';
          name = _root.craftWeapon[ID].name;
          reqRank = _root.craftWeapon[ID].reqRank;
          subtype = _root.craftWeapon[ID].subtype;
          frame = _root.craftWeapon[ID].frame;
          range = _root.craftWeapon[ID].range;
          attack = _root.craftWeapon[ID].attack;
          speed = _root.craftWeapon[ID].speed;
          defense = _root.craftWeapon[ID].defense;
          bonus = _root.craftWeapon[ID].bonus;
          ability = _root.craftWeapon[ID].ability;
          moreBonus = _root.craftWeapon[ID].moreBonus;
          maxLevel = _root.craftWeapon[ID].maxLevel;
          expTNL = _root.craftWeapon[ID].expTNL;
          enhance = _root.craftWeapon[ID].enhance;
          bonusPow = _root.craftWeapon[ID].bonusPow;
          sell = _root.craftWeapon[ID].sell;
          expiry = _root.craftWeapon[ID].expiry;
          noBonus = _root.craftWeapon[ID].noBonus;
          noLife = _root.craftWeapon[ID].noLife;
          noFuse = _root.craftWeapon[ID].noFuse;
          noUnique = _root.craftWeapon[ID].noUnique;
          spirit = _root.craftWeapon[ID].spirit;
          crit = _root.craftWeapon[ID].crit;
          dexterity = _root.craftWeapon[ID].dexterity;
          health = _root.craftWeapon[ID].health;
          unob = _root.craftWeapon[ID].unob;
          desc = _root.craftWeapon[ID].desc;
          careerExp = _root.craftWeapon[ID].careerExp;
          costPixel = _root.craftWeapon[ID].costPixel;
          costCraft = _root.craftWeapon[ID].costCraft;
          costSpec = _root.craftWeapon[ID].costSpec;
        } else {
          if (craftType == 2) {
            type = 'Armor';
            name = _root.craftArmor[ID].name;
            reqRank = _root.craftArmor[ID].reqRank;
            subtype = _root.craftArmor[ID].subtype;
            frame = _root.craftArmor[ID].frame;
            attack = _root.craftArmor[ID].attack;
            speed = _root.craftArmor[ID].speed;
            defense = _root.craftArmor[ID].defense;
            bonus = _root.craftArmor[ID].bonus;
            ability = _root.craftArmor[ID].ability;
            moreBonus = _root.craftArmor[ID].moreBonus;
            maxLevel = _root.craftArmor[ID].maxLevel;
            expTNL = _root.craftArmor[ID].expTNL;
            enhance = _root.craftArmor[ID].enhance;
            bonusPow = _root.craftArmor[ID].bonusPow;
            sell = _root.craftArmor[ID].sell;
            expiry = _root.craftArmor[ID].expiry;
            noBonus = _root.craftArmor[ID].noBonus;
            noLife = _root.craftArmor[ID].noLife;
            noFuse = _root.craftArmor[ID].noFuse;
            noUnique = _root.craftArmor[ID].noUnique;
            spirit = _root.craftArmor[ID].spirit;
            crit = _root.craftArmor[ID].crit;
            dexterity = _root.craftArmor[ID].dexterity;
            health = _root.craftArmor[ID].health;
            unob = _root.craftArmor[ID].unob;
            desc = _root.craftArmor[ID].desc;
            careerExp = _root.craftArmor[ID].careerExp;
            costPixel = _root.craftArmor[ID].costPixel;
            costCraft = _root.craftArmor[ID].costCraft;
            costSpec = _root.craftArmor[ID].costSpec;
          } else {
            if (craftType == 3) {
              type = 'Enhancer';
              name = _root.craftEnhancer[ID].name;
              reqRank = 1;
              subtype = _root.craftEnhancer[ID].subtype;
              frame = _root.craftEnhancer[ID].frame;
              power = _root.craftEnhancer[ID].power;
              curse = _root.craftEnhancer[ID].curse;
              success = _root.craftEnhancer[ID].success;
              bonus = _root.craftEnhancer[ID].bonus;
              ability = _root.craftEnhancer[ID].ability;
              moreBonus = _root.craftEnhancer[ID].moreBonus;
              enhance = _root.craftEnhancer[ID].enhance;
              bonusPow = _root.craftEnhancer[ID].bonusPow;
              sell = _root.craftEnhancer[ID].sell;
              expiry = _root.craftEnhancer[ID].expiry;
              noBonus = false;
              noLife = false;
              noFuse = false;
              noUnique = false;
              spirit = false;
              unob = 0;
              desc = _root.craftEnhancer[ID].desc;
              maxLevel = 1;
              careerExp = _root.craftEnhancer[ID].careerExp;
              costPixel = _root.craftEnhancer[ID].costPixel;
              costCraft = _root.craftEnhancer[ID].costCraft;
              costSpec = _root.craftEnhancer[ID].costSpec;
            } else {
              if (craftType == 4) {
                type = 'Potion';
                name = _root.craftPotion[ID].name;
                reqRank = 1;
                subtype = _root.craftPotion[ID].subtype;
                frame = _root.craftPotion[ID].frame;
                attack = _root.craftPotion[ID].attack;
                defense = _root.craftPotion[ID].defense;
                maxLevel = 1;
                enhance = _root.craftPotion[ID].enhance;
                bonusPow = _root.craftPotion[ID].bonusPow;
                sell = _root.craftPotion[ID].sell;
                expiry = _root.craftPotion[ID].expiry;
                bonus = '';
                ability = '';
                moreBonus = '';
                noBonus = false;
                noLife = false;
                noFuse = false;
                noUnique = false;
                spirit = false;
                unob = 0;
                desc = _root.craftPotion[ID].desc;
                careerExp = _root.craftPotion[ID].careerExp;
                costPixel = _root.craftPotion[ID].costPixel;
                costCraft = _root.craftPotion[ID].costCraft;
                costSpec = _root.craftPotion[ID].costSpec;
              } else {
                if (craftType == 5) {
                  type = 'Accessory';
                  name = _root.craftAccessory[ID].name;
                  reqRank = _root.craftAccessory[ID].reqRank;
                  subtype = _root.craftAccessory[ID].subtype;
                  frame = _root.craftAccessory[ID].frame;
                  attack = _root.craftAccessory[ID].attack;
                  speed = _root.craftAccessory[ID].speed;
                  defense = _root.craftAccessory[ID].defense;
                  bonus = _root.craftAccessory[ID].bonus;
                  ability = _root.craftAccessory[ID].ability;
                  moreBonus = _root.craftAccessory[ID].moreBonus;
                  maxLevel = _root.craftAccessory[ID].maxLevel;
                  expTNL = _root.craftAccessory[ID].expTNL;
                  enhance = _root.craftAccessory[ID].enhance;
                  bonusPow = _root.craftAccessory[ID].bonusPow;
                  sell = _root.craftAccessory[ID].sell;
                  expiry = _root.craftAccessory[ID].expiry;
                  noBonus = _root.craftAccessory[ID].noBonus;
                  noLife = _root.craftAccessory[ID].noLife;
                  noFuse = _root.craftAccessory[ID].noFuse;
                  noUnique = _root.craftAccessory[ID].noUnique;
                  spirit = _root.craftAccessory[ID].spirit;
                  crit = _root.craftAccessory[ID].crit;
                  dexterity = _root.craftAccessory[ID].dexterity;
                  health = _root.craftAccessory[ID].health;
                  desc = _root.craftAccessory[ID].desc;
                  unob = _root.craftAccessory[ID].unob;
                  careerExp = _root.craftAccessory[ID].careerExp;
                  costPixel = _root.craftAccessory[ID].costPixel;
                  costCraft = _root.craftAccessory[ID].costCraft;
                  costSpec = _root.craftAccessory[ID].costSpec;
                } else {
                  if (craftType == 6) {
                    type = 'Accessory';
                    name = _root.craftMedal[ID].name;
                    reqRank = _root.craftMedal[ID].reqRank;
                    subtype = _root.craftMedal[ID].subtype;
                    frame = _root.craftMedal[ID].frame;
                    attack = _root.craftMedal[ID].attack;
                    speed = _root.craftMedal[ID].speed;
                    defense = _root.craftMedal[ID].defense;
                    bonus = _root.craftMedal[ID].bonus;
                    ability = _root.craftMedal[ID].ability;
                    moreBonus = _root.craftMedal[ID].moreBonus;
                    maxLevel = _root.craftMedal[ID].maxLevel;
                    expTNL = _root.craftMedal[ID].expTNL;
                    enhance = _root.craftMedal[ID].enhance;
                    bonusPow = _root.craftMedal[ID].bonusPow;
                    sell = _root.craftMedal[ID].sell;
                    expiry = _root.craftMedal[ID].expiry;
                    noBonus = _root.craftMedal[ID].noBonus;
                    noLife = _root.craftMedal[ID].noLife;
                    noFuse = _root.craftMedal[ID].noFuse;
                    noUnique = _root.craftMedal[ID].noUnique;
                    spirit = _root.craftMedal[ID].spirit;
                    crit = _root.craftMedal[ID].crit;
                    dexterity = _root.craftMedal[ID].dexterity;
                    health = _root.craftMedal[ID].health;
                    unob = _root.craftMedal[ID].unob;
                    desc = _root.craftMedal[ID].desc;
                    careerExp = _root.craftMedal[ID].careerExp;
                    costPixel = _root.craftMedal[ID].costPixel;
                    costCraft = _root.craftMedal[ID].costCraft;
                    costSpec = _root.craftMedal[ID].costSpec;
                  } else {
                    if (craftType == 7) {
                      type = 'Chip';
                      name = _root.craftChip[ID].name;
                      reqRank = 1;
                      subtype = _root.craftChip[ID].subtype;
                      frame = _root.craftChip[ID].frame;
                      attack = _root.craftChip[ID].attack;
                      defense = _root.craftChip[ID].defense;
                      maxLevel = 1;
                      enhance = _root.craftChip[ID].enhance;
                      bonusPow = _root.craftChip[ID].bonusPow;
                      sell = _root.craftChip[ID].sell;
                      expiry = _root.craftChip[ID].expiry;
                      bonus = '';
                      ability = '';
                      moreBonus = '';
                      noBonus = false;
                      noLife = false;
                      noFuse = false;
                      noUnique = false;
                      spirit = false;
                      unob = 0;
                      desc = _root.craftChip[ID].desc;
                      careerExp = _root.craftChip[ID].careerExp;
                      costPixel = _root.craftChip[ID].costPixel;
                      costCraft = _root.craftChip[ID].costCraft;
                      costSpec = _root.craftChip[ID].costSpec;
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.save.careerLevel[4] >= 200) {
          costPixel = Math.ceil(costPixel * 0.7);
          costCraft = Math.ceil(costCraft * 0.7);
          costSpec = Math.ceil(costSpec * 0.7);
        }
        if (name == undefined) {
          name = 'N/A';
        }
        setID = _root.checkArenaSet(name);
        if (craftRecipe == 1) {
          crystal1Max = 0;
          crystal2Max = 0;
        } else {
          if (craftRecipe == 2) {
            crystal1Max = 50;
            crystal2Max = 50;
          } else {
            if (craftRecipe == 3) {
              crystal1Max = 100;
              crystal2Max = 100;
            } else {
              if (craftRecipe == 4) {
                crystal1Max = 250;
                crystal2Max = 250;
              } else {
                if (craftRecipe == 5) {
                  crystal1Max = 500;
                  crystal2Max = 500;
                }
              }
            }
          }
        }
        if (type == 'Weapon' && attack == 0 || type == 'Enhancer' || type == 'Potion' || subtype == 'Medal' || name == 'Dark Ruler') {
          crystal1Max = 0;
          crystal2Max = 0;
        }
        if (_root.save.careerLevel[4] < 100) {
          crystal1Max = Math.floor(crystal1Max / 2);
          crystal2Max = Math.floor(crystal2Max / 2);
        }
        costPixel = Math.floor(costPixel * (1 + crystal1Apply * 0.002 + crystal2Apply * 0.006));
        if (costPixel > 999999999999.0) {
          costPixel = 999999999999.0;
        }
        c1Text.text = crystal1Apply + ' / ' + crystal1Max;
        c2Text.text = crystal2Apply + ' / ' + crystal2Max;
        c1oText.text = 'You have: ' + _root.withComma(_root.save.arenaCrystal1);
        c2oText.text = 'You have: ' + _root.withComma(_root.save.arenaCrystal2);
        pixelText.text = _root.withComma(-costPixel);
        craftText.text = _root.withComma(-costCraft);
        specText.text = _root.withComma(-costSpec);
        careerText.text = '+' + _root.withComma(careerExp);
        if (_root.save.careerActive[4] <= 0 && _root.save.careerBoost[4] <= 0) {
          careerText.text = '[N/A]';
        }
      }

      _root.toCheck = true;
      _root.gCheck = true;
      antiSaveScum = 0;
      craftType = 1;
      craftOffset = 0;
      craftRecipe = 1;
      craftMaxOffset = _root.craftWeapon.length - 13;
      if (craftMaxOffset < 1) {
        craftMaxOffset = 1;
      }
      craftCurrent = 2;
      crystal1Apply = 0;
      crystal2Apply = 0;
      specType = 1;
      checkCraftStat();
      onEnterFrame = function () {
        if (_root.scrollingDir == -1) {
          craftOffset -= 3;
          if (craftOffset < 0) {
            craftOffset = 0;
          }
        }
        if (_root.scrollingDir == 1) {
          craftOffset += 3;
          if (craftOffset > craftMaxOffset) {
            craftOffset = craftMaxOffset;
          }
        }
        if (crystal1Apply > _root.save.arenaCrystal1) {
          crystal1Apply = _root.save.arenaCrystal1;
          checkCraftStat();
        }
        if (crystal2Apply > _root.save.arenaCrystal2) {
          crystal2Apply = _root.save.arenaCrystal2;
          checkCraftStat();
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.crystalConfirm.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.crystalConfirm.gotoAndStop(3);
      }
    }

    instance of movieClip 5361  {

      onClipEvent (enterFrame) {
        if (dragging == true) {
          diff = 0;
          if (_parent._ymouse < _y && _parent.craftOffset > 0) {
            diff = -1 + Math.floor((_parent._ymouse - _y) / 10);
            if (diff < -_parent.craftOffset) {
              diff = -_parent.craftOffset;
            }
          }
          if (_parent._ymouse > _y + 50 && _parent.craftOffset < _parent.craftMaxOffset) {
            diff = 1 + Math.floor((_parent._ymouse - _y - 50) / 10);
            if (diff > _parent.craftMaxOffset - _parent.craftOffset) {
              diff = _parent.craftMaxOffset - _parent.craftOffset;
            }
          }
          _parent.craftOffset += diff;
        }
        _y = 20 + (_parent.craftOffset / _parent.craftMaxOffset) * 150;
      }

      onClipEvent (press) {
        dragging = true;
      }

      onClipEvent (release, releaseOutside) {
        dragging = false;
      }
    }

    instance of movieClip 5496  {

      onClipEvent (enterFrame) {
        type = _parent.type;
        subtype = _parent.subtype;
        name = _parent.name;
        if (name.indexOf('[S]') != -1) {
          typeS = true;
        } else {
          typeS = false;
        }
        if (name.indexOf('[I]') != -1) {
          typeI = true;
        } else {
          typeI = false;
        }
        name = name.replace('[S] ', '');
        name = name.replace('[I] ', '');
        reqRank = _parent.reqRank;
        frame = _parent.frame;
        range = _parent.range;
        attack = _parent.attack;
        speed = _parent.speed;
        defense = _parent.defense;
        power = _parent.power;
        curse = _parent.curse;
        success = _parent.success;
        bonus = _parent.bonus;
        ability = _parent.ability;
        moreBonus = _parent.moreBonus;
        maxLevel = _parent.maxLevel;
        expTNL = _parent.expTNL;
        cost = Infinity;
        costType = 'Blue Coins';
        sell = _parent.sell;
        expiry = _parent.expiry;
        enhance = _parent.enhance;
        bonusPow = _parent.bonusPow;
        secretPow = _parent.secretPow;
        noBonus = _parent.noBonus;
        noLife = _parent.noLife;
        noRecycle = _parent.noRecycle;
        noFuse = _parent.noFuse;
        noUnique = _parent.noUnique;
        spirit = _parent.spirit;
        unob = _parent.unob;
        crit = _parent.crit;
        dexterity = _parent.dexterity;
        health = _parent.health;
        desc = _parent.desc;
        setID = _parent.setID;
        if (type == 'Weapon') {
          attToGet = Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
          attackMin = attack + Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * 0.9 + 0.001);
          attackMax = attack + Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * 1.1 + 0.001);
          defenseMin = defense;
          defenseMax = defense;
          if (noUnique == true) {
            attackMin = attack + Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
            attackMax = attack + Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
          }
          defToGet = Math.floor(_parent.crystal1Apply * 0.1 + _parent.crystal2Apply * 0.3 + 0.001);
          spdToGet = Math.floor(_parent.crystal2Apply * 0.01 + 0.001);
          critToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          dexToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          hpToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          bonusPow = Math.round(attToGet + defToGet * 5 / 12 + spdToGet * 20 + critToGet * 5 + dexToGet * 5 + hpToGet * 5) + _parent.bonusPow;
          attack += attToGet;
          speed += spdToGet;
          defense += defToGet;
          crit += critToGet;
          dexterity += dexToGet;
          health += hpToGet;
        } else {
          defToGet = Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
          attackMin = attack;
          attackMax = attack;
          defenseMin = defense + Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * 0.9 + 0.001);
          defenseMax = defense + Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * 1.1 + 0.001);
          if (noUnique == true) {
            defenseMin = defense + Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
            defenseMax = defense + Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
          }
          attToGet = Math.floor(_parent.crystal1Apply * 0.05 + _parent.crystal2Apply * 0.15 + 0.001);
          spdToGet = Math.floor(_parent.crystal2Apply * 0.01 + 0.001);
          critToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          dexToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          hpToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
          bonusPow = Math.round(attToGet * 5 / 2 + defToGet + spdToGet * 20 + critToGet * 5 + dexToGet * 5 + hpToGet * 5) + _parent.bonusPow;
          attack += attToGet;
          speed += spdToGet;
          defense += defToGet;
          crit += critToGet;
          dexterity += dexToGet;
          health += hpToGet;
        }
        craftItem = true;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_parent.specType == 1) {
          special = _root.save.arenaSuperiorCraft;
        }
        if (_parent.specType == 2) {
          special = _root.save.arenaProofTraining;
        }
        if (_parent.specType == 3) {
          special = _root.save.arenaProofMission;
        }
        if (_parent.specType == 4) {
          special = _root.save.arenaChaoticFragment;
        }
        if (_parent.specType == 5) {
          special = _root.save.arenaUnobtainium;
        }
        if (_parent.specType == 6) {
          special = _root.save.arenaEnhancerFragment;
        }
        if (_parent.specType == 7) {
          special = _root.save.arenaBacon;
        }
        if (_parent.specType == 8) {
          special = _root.save.arenaSampleCraft;
        }
        if (_root.save.arenaTutorial == 0) {
          _root.save.arenaTutorial = 1;
        }
        if (_root.emptyWeaponSlot > 0 && _parent.type == 'Weapon' || _root.emptyArmorSlot > 0 && _parent.type == 'Armor' || _root.emptyEnhancerSlot > 0 && _parent.type == 'Enhancer' || _root.emptyPotionSlot > 0 && _parent.type == 'Potion' || _root.emptyAccessorySlot > 0 && _parent.type == 'Accessory' || _root.emptyChipSlot > 0 && _parent.type == 'Chip') {
          if (_root.save.arenaCraft >= _parent.costCraft && _root.save.arenaPixel >= _parent.costPixel && special >= _parent.costSpec) {
            _root.save.arenaCraft -= _parent.costCraft;
            _root.save.arenaCraftUsed += _parent.costCraft;
            _root.save.arenaPixel -= _parent.costPixel;
            _root.save.arenaCrystal1 -= _parent.crystal1Apply;
            _root.save.arenaCrystal2 -= _parent.crystal2Apply;
            _root.gainCareerEXP(4, _parent.careerExp, true);
            if (_parent.specType == 1) {
              _root.save.arenaSuperiorCraft -= _parent.costSpec;
            }
            if (_parent.specType == 2) {
              _root.save.arenaProofTraining -= _parent.costSpec;
            }
            if (_parent.specType == 3) {
              _root.save.arenaProofMission -= _parent.costSpec;
            }
            if (_parent.specType == 4) {
              _root.save.arenaChaoticFragment -= _parent.costSpec;
            }
            if (_parent.specType == 5) {
              _root.save.arenaUnobtainium -= _parent.costSpec;
            }
            if (_parent.specType == 6) {
              _root.save.arenaEnhancerFragment -= _parent.costSpec;
            }
            if (_parent.specType == 7) {
              _root.save.arenaBacon -= _parent.costSpec;
            }
            if (_parent.specType == 8) {
              _root.save.arenaSampleCraft -= _parent.costSpec;
            }
            if (_parent.type == 'Weapon') {
              enhance = _parent.enhance;
              bonusPow = 0;
              frame = _parent.frame;
              name = _parent.name;
              reqRank = _parent.reqRank;
              subtype = _parent.subtype;
              range = _parent.range;
              attack = _parent.attack;
              speed = _parent.speed;
              defense = _parent.defense;
              bonus = _parent.bonus;
              ability = _parent.ability;
              moreBonus = _parent.moreBonus;
              maxLevel = _parent.maxLevel;
              expTNL = _parent.expTNL;
              sell = _parent.sell;
              expiry = _parent.expiry;
              noBonus = _parent.noBonus;
              noLife = _parent.noLife;
              noFuse = _parent.noFuse;
              noUnique = _parent.noUnique;
              spirit = _parent.spirit;
              crit = _parent.crit;
              dexterity = _parent.dexterity;
              health = _parent.health;
              desc = _parent.desc;
              unob = _parent.unob;
              setID = _parent.setID;
              attToGet = Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * (0.9 + Math.random() * 0.2) + 0.001);
              if (noUnique == true) {
                attToGet = Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
              }
              defToGet = Math.floor(_parent.crystal1Apply * 0.1 + _parent.crystal2Apply * 0.3 + 0.001);
              spdToGet = Math.floor(_parent.crystal2Apply * 0.01 + 0.001);
              critToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
              dexToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
              hpToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
              bonusPow = Math.round(attToGet + defToGet * 5 / 12 + spdToGet * 20 + critToGet * 5 + dexToGet * 5 + hpToGet * 5);
              attack += attToGet;
              speed += spdToGet;
              defense += defToGet;
              crit += critToGet;
              dexterity += dexToGet;
              health += hpToGet;
              _root.getArenaWeapon(reqRank, subtype, frame, range, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow + _parent.bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, false, setID);
            } else {
              if (_parent.type == 'Armor') {
                enhance = _parent.enhance;
                bonusPow = 0;
                frame = _parent.frame;
                name = _parent.name;
                reqRank = _parent.reqRank;
                subtype = _parent.subtype;
                attack = _parent.attack;
                speed = _parent.speed;
                defense = _parent.defense;
                bonus = _parent.bonus;
                ability = _parent.ability;
                moreBonus = _parent.moreBonus;
                maxLevel = _parent.maxLevel;
                expTNL = _parent.expTNL;
                sell = _parent.sell;
                expiry = _parent.expiry;
                noBonus = _parent.noBonus;
                noLife = _parent.noLife;
                noFuse = _parent.noFuse;
                noUnique = _parent.noUnique;
                spirit = _parent.spirit;
                crit = _parent.crit;
                dexterity = _parent.dexterity;
                health = _parent.health;
                desc = _parent.desc;
                unob = _parent.unob;
                setID = _parent.setID;
                defToGet = Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * (0.9 + Math.random() * 0.2) + 0.001);
                if (noUnique == true) {
                  defToGet = Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply + 0.001);
                }
                attToGet = Math.floor(_parent.crystal1Apply * 0.05 + _parent.crystal2Apply * 0.15 + 0.001);
                spdToGet = Math.floor(_parent.crystal2Apply * 0.01 + 0.001);
                critToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
                dexToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
                hpToGet = Math.floor(_parent.crystal2Apply * 0.05 + 0.001);
                bonusPow = Math.round(attToGet * 5 / 2 + defToGet + spdToGet * 20 + critToGet * 5 + dexToGet * 5 + hpToGet * 5);
                attack += attToGet;
                speed += spdToGet;
                defense += defToGet;
                crit += critToGet;
                dexterity += dexToGet;
                health += hpToGet;
                _root.getArenaArmor(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow * 2 + _parent.bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noFuse, noUnique, spirit, unob, name, desc, false, setID);
              } else {
                if (_parent.type == 'Accessory') {
                  enhance = _parent.enhance;
                  bonusPow = 0;
                  frame = _parent.frame;
                  name = _parent.name;
                  reqRank = _parent.reqRank;
                  subtype = _parent.subtype;
                  attack = _parent.attack;
                  speed = _parent.speed;
                  defense = _parent.defense;
                  bonus = _parent.bonus;
                  ability = _parent.ability;
                  moreBonus = _parent.moreBonus;
                  maxLevel = _parent.maxLevel;
                  expTNL = _parent.expTNL;
                  sell = _parent.sell;
                  expiry = _parent.expiry;
                  noBonus = _parent.noBonus;
                  noLife = _parent.noLife;
                  noFuse = _parent.noFuse;
                  noUnique = _parent.noUnique;
                  spirit = _parent.spirit;
                  crit = _parent.crit;
                  dexterity = _parent.dexterity;
                  health = _parent.health;
                  desc = _parent.desc;
                  unob = _parent.unob;
                  setID = _parent.setID;
                  defToGet = Math.floor((_parent.crystal1Apply * 0.5 + _parent.crystal2Apply) * (0.9 + Math.random() * 0.2));
                  if (noUnique == true) {
                    defToGet = Math.floor(_parent.crystal1Apply * 0.5 + _parent.crystal2Apply);
                  }
                  attToGet = Math.floor(_parent.crystal1Apply * 0.05 + _parent.crystal2Apply * 0.15);
                  spdToGet = Math.floor(_parent.crystal2Apply * 0.01);
                  critToGet = Math.floor(_parent.crystal2Apply * 0.05);
                  dexToGet = Math.floor(_parent.crystal2Apply * 0.05);
                  hpToGet = Math.floor(_parent.crystal2Apply * 0.05);
                  bonusPow = Math.round(attToGet * 5 / 2 + defToGet + spdToGet * 20 + critToGet * 5 + dexToGet * 5 + hpToGet * 5);
                  attack += attToGet;
                  speed += spdToGet;
                  defense += defToGet;
                  crit += critToGet;
                  dexterity += dexToGet;
                  health += hpToGet;
                  _root.getArenaAccessory(reqRank, subtype, frame, attack, speed, defense, crit, dexterity, health, maxLevel, expTNL, 1, 0, enhance, bonusPow * 2 + _parent.bonusPow, bonus, ability, moreBonus, sell, expiry, noBonus, noLife, noUnique, spirit, unob, name, desc, false, setID);
                } else {
                  if (_parent.type == 'Enhancer') {
                    enhance = _parent.enhance;
                    frame = _parent.frame;
                    name = _parent.name;
                    subtype = _parent.subtype;
                    power = _parent.power;
                    curse = 0;
                    success = 100;
                    bonus = _parent.bonus;
                    ability = _parent.ability;
                    moreBonus = _parent.moreBonus;
                    sell = _parent.sell;
                    expiry = _parent.expiry;
                    desc = _parent.desc;
                    _root.getArenaEnhancer(subtype, frame, power, curse, success, bonus, ability, moreBonus, enhance, _parent.bonusPow, sell, expiry, name, desc, false, setID);
                  } else {
                    if (_parent.type == 'Potion') {
                      enhance = _parent.enhance;
                      frame = _parent.frame;
                      name = _parent.name;
                      subtype = _parent.subtype;
                      attack = _parent.attack;
                      defense = _parent.defense;
                      sell = _parent.sell;
                      expiry = _parent.expiry;
                      desc = _parent.desc;
                      _root.getArenaPotion(subtype, frame, attack, defense, enhance, _parent.bonusPow, sell, expiry, name, desc);
                    } else {
                      if (_parent.type == 'Chip') {
                        enhance = _parent.enhance;
                        frame = _parent.frame;
                        name = _parent.name;
                        subtype = _parent.subtype;
                        attack = _parent.attack;
                        defense = _parent.defense;
                        sell = _parent.sell;
                        expiry = _parent.expiry;
                        desc = _parent.desc;
                        _root.getArenaChip(subtype, frame, attack, defense, enhance, _parent.bonusPow, sell, expiry, name, desc);
                      }
                    }
                  }
                }
              }
            }
          } else {
            _root.showPopup('Cannot Craft', 'Please double-check if you have enough Pixels, Crafting Material and other required items to craft.');
          }
        } else {
          _root.showPopup('Inventory Full!', 'Your inventory is full. Please sell some items then try again.');
        }
        _parent.checkCraftStat();
      }
    }

    instance of movieClip 5508  {

      onClipEvent (enterFrame) {
        gotoAndStop(_parent.specType);
      }

      onClipEvent (rollOver, dragOver) {
        if (_parent.specType == 8) {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>Mysterious Square</b></font>\nThis Mysterious Square is required to craft a medal that has the same name as your title. You are given 3 of these per month, and if you don\'t use them, they will not carry over to the next month. By supporting the game and making a donation, you can permanently get rid of this limit and unlock new medal designs!';
        } else {
          if (_parent.specType == 6) {
            _root.actiondescription = '<font color=\'#FFFF00\'><b>Enhancer Fragment</b></font>\nA piece of a broken enhancer. Good thing some of them are still usable, and can be used to craft working enhancers. Monsters drop these - stronger monsters drop more!';
          } else {
            if (_parent.specType == 5) {
              _root.actiondescription = '<font color=\'#FFFF00\'><b>Unobtainium</b></font>\nContrary to popular belief, it\'s not blue. Monsters carry it for odd reasons. Required to craft extremely powerful items.';
            } else {
              if (_parent.specType == 3) {
                _root.actiondescription = '<font color=\'#FFFF00\'><b>Proof of Mission</b></font>\nIt looks like you can obtain this from missions, like Mission Kommander\'s Mission, Defend Mission and Prehistoric Mission. You have no idea why this is required for crafting, but oh well.';
              } else {
                if (_parent.specType == 2) {
                  _root.actiondescription = '<font color=\'#FFFF00\'><b>Proof of Training</b></font>\nA proof... I mean, yellow square that shows you have been training hard. It can be obtained by defeating monsters in The Special Arena and completing the Tower of DOOOOOOM.';
                } else {
                  if (_parent.specType == 1) {
                    _root.actiondescription = '<font color=\'#FFFF00\'><b>Superior Crafting Material</b></font>\nA very rare and valuable type of Crafting Material. Only a few monsters drop it. Needed to craft powerful items.';
                  }
                }
              }
            }
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 5508  {

      onClipEvent (enterFrame) {
        gotoAndStop(_parent.specType);
        if (_parent.specType == 8) {
          _parent.specText2.text = _root.withComma(_root.save.arenaSampleCraft);
          if (_root.save.arenaSampleCraft > 3) {
            _parent.specText2.text = 'Unlimited';
          }
        } else {
          if (_parent.specType == 7) {
            _parent.specText2.text = _root.withComma(_root.save.arenaBacon);
          } else {
            if (_parent.specType == 6) {
              _parent.specText2.text = _root.withComma(_root.save.arenaEnhancerFragment);
            } else {
              if (_parent.specType == 5) {
                _parent.specText2.text = _root.withComma(_root.save.arenaUnobtainium);
              } else {
                if (_parent.specType == 4) {
                  _parent.specText2.text = _root.withComma(_root.save.arenaChaoticFragment);
                } else {
                  if (_parent.specType == 3) {
                    _parent.specText2.text = _root.withComma(_root.save.arenaProofMission);
                  } else {
                    if (_parent.specType == 2) {
                      _parent.specText2.text = _root.withComma(_root.save.arenaProofTraining);
                    } else {
                      if (_parent.specType == 1) {
                        _parent.specText2.text = _root.withComma(_root.save.arenaSuperiorCraft);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      onClipEvent (rollOver, dragOver) {
        if (_parent.specType == 8) {
          _root.actiondescription = '<font color=\'#FFFF00\'><b>Mysterious Square</b></font>\nThis Mysterious Square is required to craft a medal that has the same name as your title. You are given 3 of these per month, and if you don\'t use them, they will not carry over to the next month. By supporting the game and making a donation, you can permanently get rid of this limit and unlock new medal designs!';
        } else {
          if (_parent.specType == 6) {
            _root.actiondescription = '<font color=\'#FFFF00\'><b>Enhancer Fragment</b></font>\nA piece of a broken enhancer. Good thing some of them are still usable, and can be used to craft working enhancers. Monsters drop these - stronger monsters drop more!';
          } else {
            if (_parent.specType == 5) {
              _root.actiondescription = '<font color=\'#FFFF00\'><b>Unobtainium</b></font>\nContrary to popular belief, it\'s not blue. Monsters carry it for odd reasons. Required to craft extremely powerful items.';
            } else {
              if (_parent.specType == 3) {
                _root.actiondescription = '<font color=\'#FFFF00\'><b>Proof of Mission</b></font>\nIt looks like you can obtain this from missions, like Mission Kommander\'s Mission, Defend Mission and Prehistoric Mission. You have no idea why this is required for crafting, but oh well.';
              } else {
                if (_parent.specType == 2) {
                  _root.actiondescription = '<font color=\'#FFFF00\'><b>Proof of Training</b></font>\nA proof... I mean, yellow square that shows you have been training hard. It can be obtained by defeating monsters in The Special Arena and completing the Tower of DOOOOOOM.';
                } else {
                  if (_parent.specType == 1) {
                    _root.actiondescription = '<font color=\'#FFFF00\'><b>Superior Crafting Material</b></font>\nA very rare and valuable type of Crafting Material. Only a few monsters drop it. Needed to craft powerful items.';
                  }
                }
              }
            }
          }
        }
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.recipeList.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 1) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 1) {
          _parent.craftType = 1;
          _parent.craftCurrent = 2;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftWeapon.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 2) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 2) {
          _parent.craftType = 2;
          _parent.craftCurrent = 2;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftArmor.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 3) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 3) {
          _parent.craftType = 3;
          _parent.craftCurrent = 2;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftEnhancer.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 6;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 4) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 4) {
          _parent.craftType = 4;
          _parent.craftCurrent = 3;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftPotion.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 5) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 5) {
          _parent.craftType = 5;
          _parent.craftCurrent = 3;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftAccessory.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 6) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 6) {
          _parent.craftType = 6;
          _root.craftMedal = [zeroItem];
          _root.addArenaCraftMedal(4, 1, 1, 1, 'Medal', 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, '', '', '', 0, Infinity, true, false, false, false, 0, 0, 0, 0, 0, 'First Medal', 'Awarded for discovering that you can craft Medals. YAY!');
          if (_root.save.arenaLevel >= 10) {
            _root.addArenaCraftMedal(4, 1, 1, 10, 'Medal', 6, 5, 0, 5, 0, 0, 0, 1, 0, 0, 16, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 2000, 0, 0, 0, 'Newbie Fighter', 'Awarded for reaching Rank 10.');
          }
          if (_root.save.arenaLevel >= 30) {
            _root.addArenaCraftMedal(4, 1, 1, 30, 'Medal', 7, 15, 0, 15, 0, 0, 0, 1, 0, 0, 36, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 10000, 0, 1, 0, 'Fighter', 'Awarded for reaching Rank 30.');
          }
          if (_root.save.arenaLevel >= 70) {
            _root.addArenaCraftMedal(4, 1, 1, 70, 'Medal', 8, 30, 0, 30, 0, 0, 0, 1, 0, 0, 66, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 50000, 0, 5, 0, 'Veteran Fighter', 'Awarded for reaching Rank 70.');
          }
          if (_root.save.arenaLevel >= 120) {
            _root.addArenaCraftMedal(4, 1, 1, 120, 'Medal', 9, 50, 0, 50, 0, 0, 0, 1, 0, 0, 106, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 200000, 0, 20, 0, 'Heroic Fighter', 'Awarded for reaching Rank 120.');
          }
          if (_root.save.arenaLevel >= 180) {
            _root.addArenaCraftMedal(4, 1, 1, 180, 'Medal', 10, 75, 0, 75, 0, 0, 0, 1, 0, 0, 156, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 1000000, 0, 100, 0, 'Elite Fighter', 'Awarded for reaching Rank 180.');
          }
          if (_root.save.arenaLevel >= 250) {
            _root.addArenaCraftMedal(4, 1, 1, 250, 'Medal', 11, 105, 0, 105, 0, 0, 0, 1, 0, 0, 256, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 5000000, 0, 250, 0, 'Master Fighter', 'Awarded for reaching Rank 250.');
          }
          if (_root.save.arenaLevel >= 350) {
            _root.addArenaCraftMedal(4, 1, 1, 350, 'Medal', 12, 140, 0, 140, 0, 0, 0, 1, 0, 0, 406, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 20000000, 0, 500, 0, 'Ultimate Fighter', 'Awarded for reaching Rank 350.');
          }
          if (_root.save.arenaLevel >= 500) {
            _root.addArenaCraftMedal(4, 1, 1, 500, 'Medal', 13, 180, 0, 180, 0, 0, 0, 1, 0, 0, 706, 'EXP', '', '', 0, Infinity, true, false, false, false, 0, 100000000, 0, 1000, 0, 'Arena Champion', 'Awarded for reaching Rank 500. You\'re a true Arena Champion!');
          }
          if (_root.save.arenaMaxCombo >= 9999) {
            _root.addArenaCraftMedal(16, 1, 1, 50, 'Medal', 20, 0, 5, 0, 0, 0, 0, 1, 0, 0, 16, '', 'Double Hit Chance', '', 0, Infinity, true, false, false, false, 0, 10000, 0, 1, 0, 'Combo King', 'Awarded for reaching 9,999 Combo.');
          }
          if (_root.bestiaryLevel >= 1400) {
            _root.addArenaCraftMedal(16, 1, 1, 200, 'Medal', 29, 0, 0, 0, 0, 10, 10, 1, 0, 0, 156, 'Spawn Rate', 'Instant Kill', '', 0, Infinity, true, false, false, false, 0, 100000, 0, 100, 0, 'Bestiary Master', 'Awarded for having a level 1,400 Bestiary.');
          }
          if (_root.bestiaryLevel >= 1600) {
            _root.addArenaCraftMedal(16, 1, 1, 300, 'Medal', 30, 0, 0, 0, 0, 25, 25, 1, 0, 0, 256, 'Spawn Rate', 'Instant Kill', '', 0, Infinity, true, false, false, false, 0, 1000000, 0, 250, 0, 'Bestiary King', 'Awarded for having a level 1,600 Bestiary.');
          }
          if (_root.bestiaryLevel >= 1800) {
            _root.addArenaCraftMedal(16, 1, 1, 400, 'Medal', 31, 0, 0, 0, 0, 50, 50, 1, 0, 0, 406, 'Spawn Rate', 'Instant Kill', '', 0, Infinity, true, false, false, false, 0, 10000000, 0, 500, 0, 'Mad Scientist', 'Awarded for having a level 1,800 Bestiary.');
          }
          if (_root.bestiaryLevel >= 2000) {
            _root.addArenaCraftMedal(16, 1, 1, 500, 'Medal', 32, 0, 0, 0, 0, 100, 100, 1, 0, 0, 706, 'Spawn Rate', 'Instant Kill', '', 0, Infinity, true, false, false, false, 0, 100000000, 0, 1000, 0, 'THE BESTiary', 'Awarded for having a level 2,000 Bestiary.');
          }
          if (_root.save.arenaStorage4 == true) {
            _root.addArenaCraftMedal(4, 1, 1, 500, 'Medal', 37, 0, 0, 0, 0, 0, 150, 1, 0, 0, 456, 'Drop Rate', '', '', 0, Infinity, true, false, false, false, 0, 1000000000, 0, 5000, 0, 'Bottomless Bag', 'Awarded for unlocking the 8th Storage page.');
          }
          if (_root.totalAllyTamed >= 200) {
            _root.addArenaCraftMedal(4, 1, 1, 200, 'Medal', 50, 0, 0, 0, 10, 0, 0, 1, 0, 0, 156, 'Rare Monster Rate', '', 'EXP / Rare Kill', 0, Infinity, true, false, false, false, 0, 100000, 0, 100, 0, 'Novice Tamer', 'Awarded for taming 200 Invisible Allies.');
          }
          if (_root.totalAllyTamed >= 300) {
            _root.addArenaCraftMedal(4, 1, 1, 300, 'Medal', 51, 0, 0, 0, 25, 0, 0, 1, 0, 0, 256, 'Rare Monster Rate', '', 'EXP / Rare Kill', 0, Infinity, true, false, false, false, 0, 1000000, 0, 250, 0, 'Veteran Tamer', 'Awarded for taming 300 Invisible Allies.');
          }
          if (_root.totalAllyTamed >= 400) {
            _root.addArenaCraftMedal(4, 1, 1, 400, 'Medal', 52, 0, 0, 0, 50, 0, 0, 1, 0, 0, 406, 'Rare Monster Rate', '', 'EXP / Rare Kill', 0, Infinity, true, false, false, false, 0, 10000000, 0, 500, 0, 'Master Tamer', 'Awarded for taming 400 Invisible Allies.');
          }
          if (_root.totalAllyTamed >= 500) {
            _root.addArenaCraftMedal(4, 1, 1, 500, 'Medal', 53, 0, 0, 0, 100, 0, 0, 1, 0, 0, 706, 'Rare Monster Rate', '', 'EXP / Rare Kill', 0, Infinity, true, false, false, false, 0, 100000000, 0, 1000, 0, 'Legendary Tamer', 'Awarded for taming 500 Invisible Allies.');
          }
          if (_root.totalAllyMastered >= 200) {
            _root.addArenaCraftMedal(16, 1, 1, 200, 'Medal', 54, 0, 0, 0, 10, 0, 10, 1, 0, 0, 156, 'Epic Monster Rate', '', 'EXP / Epic Kill', 0, Infinity, true, false, false, false, 0, 100000, 0, 100, 0, 'Novice Trainer', 'Awarded for mastering 200 Invisible Allies.');
          }
          if (_root.totalAllyMastered >= 300) {
            _root.addArenaCraftMedal(16, 1, 1, 300, 'Medal', 55, 0, 0, 0, 25, 0, 25, 1, 0, 0, 256, 'Epic Monster Rate', '', 'EXP / Epic Kill', 0, Infinity, true, false, false, false, 0, 1000000, 0, 250, 0, 'Veteran Trainer', 'Awarded for mastering 300 Invisible Allies.');
          }
          if (_root.totalAllyMastered >= 400) {
            _root.addArenaCraftMedal(16, 1, 1, 400, 'Medal', 56, 0, 0, 0, 50, 0, 50, 1, 0, 0, 406, 'Epic Monster Rate', '', 'EXP / Epic Kill', 0, Infinity, true, false, false, false, 0, 10000000, 0, 500, 0, 'Master Trainer', 'Awarded for mastering 400 Invisible Allies.');
          }
          if (_root.totalAllyMastered >= 500) {
            _root.addArenaCraftMedal(16, 1, 1, 500, 'Medal', 57, 0, 0, 0, 100, 0, 100, 1, 0, 0, 706, 'Epic Monster Rate', '', 'EXP / Epic Kill', 0, Infinity, true, false, false, false, 0, 100000000, 0, 1000, 0, 'Legendary Trainer', 'Awarded for mastering 500 Invisible Allies.');
          }
          if (_root.save.totalPlayTime >= 18000) {
            _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 108, 0, 0, 0, 0, 0, 0, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'This medal\'s name depends on your Anti-Idle title when you craft it. More medal designs are available as special gifts for those who wish to support the game. Check the \'Donate!\' page in the main menu for details!');
          }
          if (_root.save.dt >= 1) {
            _root.addArenaCraftMedal(16, 1, 1, 30, 'Medal', 65, 0, 0, 0, 0, 0, 50, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 0, 0, 'Contributor', 'Thank you for your donation and your continued support!');
          }
          if (_root.save.dt >= 2) {
            _root.addArenaCraftMedal(16, 1, 1, 60, 'Medal', 65, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 0, 0, 'Honorable Anti-Idler', 'Thank you for your donation and your continued support!');
          }
          if (_root.save.userTitle != '') {
            if (_root.save.dt >= 3) {
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 39, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
            }
            if (_root.save.dt >= 4) {
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 40, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 41, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 42, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 43, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 44, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 45, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 46, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 47, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 48, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 49, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 106, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 107, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 109, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 110, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 111, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 112, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 113, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 114, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 115, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 116, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 117, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 118, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
              _root.addArenaCraftMedal(20, 1, 1, 60, 'Medal', 119, 0, 0, 0, 0, 0, 100, 1, 0, 0, 706, '', '', '', 0, Infinity, false, false, false, false, 10, 0, 0, 1, 0, _root.save.userTitle, 'Thank you for your donation and your continued support!');
            }
          }
          _parent.craftCurrent = 1;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftMedal.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 4;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (enterFrame) {
        if (_parent.craftType == 7) {
          _alpha = 100;
        } else {
          _alpha = 30;
        }
      }

      onClipEvent (release) {
        if (_parent.craftType != 7) {
          _parent.craftType = 7;
          _parent.craftCurrent = 2;
          _parent.craftOffset = 0;
          _parent.craftMaxOffset = _root.craftChip.length - 13;
          if (_parent.craftMaxOffset < 1) {
            _parent.craftMaxOffset = 1;
          }
          _parent.craftRecipe = 1;
          _parent.crystal1Apply = 0;
          _parent.crystal2Apply = 0;
          _parent.specType = 1;
          _parent.checkCraftStat();
        }
      }
    }
  }

  movieClip 5558  {
  }

  movieClip 5564  {

    frame 1 {
      stop();
    }

    instance of movieClip 5558  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaPixel >= 5000000000.0) {
          _root.save.arenaPixel -= 5000000000.0;
          _root.save.arenaStorage2 = true;
          _parent.gotoAndStop(2);
        } else {
          _root.showPopup('Not Enough Pixels', 'You don\'t have enough Pixels.');
        }
      }
    }
  }

  movieClip 5566  {

    frame 1 {
      stop();
    }

    instance of movieClip 5558  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaPixel >= 50000000000.0) {
          _root.save.arenaPixel -= 50000000000.0;
          _root.save.arenaStorage3 = true;
          _parent.gotoAndStop(2);
        } else {
          _root.showPopup('Not Enough Pixels', 'You don\'t have enough Pixels.');
        }
      }
    }
  }

  movieClip 5568  {

    frame 1 {
      stop();
    }

    instance of movieClip 5558  {

      onClipEvent (release) {
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaPixel >= 500000000000.0) {
          _root.save.arenaPixel -= 500000000000.0;
          _root.save.arenaStorage4 = true;
          _parent.gotoAndStop(2);
        } else {
          _root.showPopup('Not Enough Pixels', 'You don\'t have enough Pixels.');
        }
      }
    }
  }

  movieClip 5579  {

    frame 1 {
      stop();
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 301;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 302;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 303;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 304;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 305;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 306;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 307;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 308;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 309;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 310;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 311;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 312;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 313;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 314;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 315;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 316;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 317;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 318;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 319;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 320;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 321;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 322;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 323;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 324;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(3);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(4);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(10);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(5);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(6);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(7);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(8);
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 325;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 326;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 327;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 328;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 329;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 330;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 331;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 332;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 333;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 334;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 335;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 336;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 337;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 338;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 339;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 340;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 341;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 342;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 343;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 344;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 345;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 346;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 347;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 348;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 349;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 350;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 351;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 352;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 353;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 354;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 355;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 356;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 357;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 358;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 359;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 360;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 361;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 362;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 363;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 364;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 365;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 366;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 367;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 368;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 369;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 370;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 371;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 372;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 373;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 374;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 375;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 376;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 377;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 378;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 379;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 380;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 381;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 382;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 383;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 384;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 385;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 386;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 387;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 388;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 389;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 390;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 391;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 392;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 393;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 394;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 395;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 396;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1101;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1102;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1103;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1104;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1105;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1106;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1107;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1108;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1109;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1110;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1111;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1112;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1113;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1114;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1115;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1116;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1117;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1118;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1119;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1120;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1121;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1122;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1123;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1124;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1125;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1126;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1127;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1128;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1129;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1130;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1131;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1132;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1133;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1134;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1135;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1136;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1137;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1138;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1139;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1140;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1141;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1142;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1143;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1144;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1145;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1146;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1147;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1148;
      }
    }

    instance of movieClip 5564  {

      onClipEvent (load) {
        if (_root.save.arenaStorage2 == true) {
          gotoAndStop(2);
        }
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1149;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1150;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1151;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1152;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1153;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1154;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1155;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1156;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1157;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1158;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1159;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1160;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1161;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1162;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1163;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1164;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1165;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1166;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1167;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1168;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1169;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1170;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1171;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1172;
      }
    }

    instance of movieClip 5566  {

      onClipEvent (load) {
        if (_root.save.arenaStorage3 == true) {
          gotoAndStop(2);
        }
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1173;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1174;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1175;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1176;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1177;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1178;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1179;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1180;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1181;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1182;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1183;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1184;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1185;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1186;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1187;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1188;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1189;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1190;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1191;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1192;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1193;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1194;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1195;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 1196;
      }
    }

    instance of movieClip 5568  {

      onClipEvent (load) {
        if (_root.save.arenaStorage4 == true) {
          gotoAndStop(2);
        }
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 397;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 398;
      }
    }

    instance of movieClip 4828  {

      onClipEvent (load) {
        slot = 399;
      }
    }
  }

  movieClip 5580  {

    frame 1 {
      _root.toCheck = true;
      _root.gCheck = true;
      storage = true;
      recycleCooldown = 0;
      onEnterFrame = function () {
        if (_root.save.inventoryExist[399] == 1 && _root.save.inventoryType[399] == 'Armor' && _root.emptyOutfitSlot > 0) {
          rSubtype = _root.save.inventorySubtype[399];
          rFrame = _root.save.inventoryFrame[399];
          rBonusPow = 706;
          rSell = _root.save.inventorySell[399];
          rName = _root.save.inventoryName[399];
          rDesc = _root.save.inventoryDesc[399];
          _root.getArenaOutfit(1, rSubtype, rFrame, rBonusPow, rSell, rName, rDesc);
          _root.deleteArenaItem(399);
        }
        if (_root.save.inventoryExist[399] == 1 && _root.save.inventorySubtype[399] == 'Medal' && _root.emptyOutfitSlot > 0) {
          rSubtype = _root.save.inventorySubtype[399];
          rFrame = _root.save.inventoryFrame[399];
          rBonusPow = 706;
          rSell = _root.save.inventorySell[399];
          rName = _root.save.inventoryName[399];
          rDesc = _root.save.inventoryDesc[399];
          _root.getArenaOutfit(1, rSubtype, rFrame, rBonusPow, rSell, rName, rDesc);
          _root.deleteArenaItem(399);
        }
      };

    }
  }

  movieClip 5606  {

    frame 1 {
      onEnterFrame = function () {
        if (_root.save.arenaRing == ringID) {
          gotoAndStop(3);
        } else {
          if (_root.save.arenaRingOwned[ringID] > 0) {
            gotoAndStop(2);
          } else {
            gotoAndStop(1);
          }
        }
      };

      onRollOver = function () {
        _root.actiondescription = ringDesc;
      };

      onDragOver = function () {
        _root.actiondescription = ringDesc;
      };

      onRollOut = function () {
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

      onRelease = function () {
        if (_root.save.arenaRingOwned[ringID] > 0) {
          _root.save.arenaRing = ringID;
        }
      };

    }
  }

  movieClip 5666  {
  }

  movieClip 5674  {
  }

  movieClip 5678  {
  }

  movieClip 5684  {
  }

  // unknown tag 88 length 49

  // unknown tag 88 length 49

  movieClip 5755  {
  }

  movieClip 5760  {
  }

  movieClip 5762  {

    frame 1 {
      function checkEntry() {
        ID = _parent.ID;
        killCount = _root.save.arenaBestiary[ID];
        entryLevel = 0;
        bestiaryBonus = 0;
        bonusText = '';
        if (!isNaN(killCount)) {
          if (killCount >= 1) {
            entryLevel = 1;
            bestiaryBonus = 0;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 10) {
            entryLevel = 2;
            bestiaryBonus = 10;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 100) {
            entryLevel = 3;
            bestiaryBonus = 20;
            bonusText = '<font color=\'#999999\'>New bonus at Level 4</font>';
          }
          if (killCount >= 1000) {
            entryLevel = 4;
            bestiaryBonus = 30;
            bonusText = '<font color=\'#00FFFF\'>Item Drop Rate 1.5x</font>';
          }
          if (killCount >= 10000) {
            entryLevel = 5;
            bestiaryBonus = 40;
            bonusText = '<font color=\'#99FF00\'>Item Drop Rate 2.0x</font>';
          }
          if (killCount >= 100000) {
            entryLevel = 6;
            bestiaryBonus = 50;
            bonusText = '<font color=\'#FFFF00\'>Item Drop Rate 3.0x</font>';
          }
          allyBonus = 0;
          if (!isNaN(_root.save.arenaAllyEXP[ID])) {
            allyBonus = Math.ceil(_root.save.arenaAllyEXP[ID] / 1000);
            if (_root.save.arenaAllyEXP[ID] >= 10000) {
              allyBonus = 20;
            }
          }
          bestiaryBonus = Math.floor((100 + bestiaryBonus) * (100 + allyBonus) / 10 - 1000) / 10;
        }
        gotoAndStop(entryLevel + 1);
        if (entryLevel == 6 && killCount >= 1000000) {
          gotoAndStop(8);
        }
        level = _root.enemyList[ID].level;
        hp = _root.enemyList[ID].hp;
        exp = _root.enemyList[ID].exp;
        if (_root.save.arenaHardcore == true) {
          level = Math.floor(level * 1.3);
          if (level > 9001) {
            level = 9001;
          }
          hp = Math.floor(hp * 3.5);
          exp = Math.floor(exp * 1.5);
        }
      }

      stop();
      checkEntry();
      onEnterFrame = function () {
        if (curPage != _root.bestiaryPage) {
          checkEntry();
        }
      };

      onRollOver = function () {
        checkEntry();
        if (entryLevel > 0) {
          _parent.enemyPreview.gotoAndStop(ID);
          extKillText = '';
          if (!isNaN(_root.save.arenaBestiaryExtra[ID]) && _root.save.arenaBestiaryExtra[ID] > 0) {
            extKillText = '\n<font color=\'#999999\'>(' + _root.withComma(_root.save.arenaBestiary[ID] - _root.save.arenaBestiaryExtra[ID]) + ' + ' + _root.withComma(_root.save.arenaBestiaryExtra[ID]) + ')</font>';
          }
          extUltraText = '';
          if (!isNaN(_root.save.arenaBestiaryUlt3[ID]) && _root.save.arenaBestiaryUlt3[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-3 form defeated!</b> (v' + _root.save.arenaBestiaryUlt3V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt3F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt3F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt2[ID]) && _root.save.arenaBestiaryUlt2[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-2 form defeated!</b> (v' + _root.save.arenaBestiaryUlt2V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt2F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt2F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt1[ID]) && _root.save.arenaBestiaryUlt1[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-1 form defeated!</b> (v' + _root.save.arenaBestiaryUlt1V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt1F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt1F[ID] + '</font>';
            }
          }
          _root.actiondescription = '<b>' + _root.enemyList[ID].name + '</b>\nLevel: <b>' + _root.withComma(level) + '</b>\nHP: <b>' + _root.withComma(hp) + '</b>\nEXP: <b>' + _root.withComma(exp) + '</b> + ' + bestiaryBonus + '%\n_________\nKilled: <b>' + _root.withComma(killCount) + '</b>' + extKillText + extUltraText + '\n[Entry Level <b>' + entryLevel + '</b>]\n' + bonusText + '\n_________\nHold left mouse button to view more info';
        }
      };

      onRollOut = function () {
        _parent.enemyPreview.gotoAndStop(1);
        _root.actiondescription = '';
      };

      onDragOut = function () {
        _root.actiondescription = '';
      };

      onPress = function () {
        if (entryLevel > 0) {
          _root.bestiarySelect = ID;
          _parent._parent._parent.bestiaryDetail.gotoAndStop(2);
          _root.actiondescription = '';
        }
      };

      onRelease = function () {
        _parent._parent._parent.bestiaryDetail.gotoAndStop(1);
        if (entryLevel > 0) {
          extKillText = '';
          if (!isNaN(_root.save.arenaBestiaryExtra[ID]) && _root.save.arenaBestiaryExtra[ID] > 0) {
            extKillText = '\n<font color=\'#999999\'>(' + _root.withComma(_root.save.arenaBestiary[ID] - _root.save.arenaBestiaryExtra[ID]) + ' + ' + _root.withComma(_root.save.arenaBestiaryExtra[ID]) + ')</font>';
          }
          extUltraText = '';
          if (!isNaN(_root.save.arenaBestiaryUlt3[ID]) && _root.save.arenaBestiaryUlt3[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-3 form defeated!</b> (v' + _root.save.arenaBestiaryUlt3V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt3F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt3F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt2[ID]) && _root.save.arenaBestiaryUlt2[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-2 form defeated!</b> (v' + _root.save.arenaBestiaryUlt2V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt2F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt2F[ID] + '</font>';
            }
          }
          if (!isNaN(_root.save.arenaBestiaryUlt1[ID]) && _root.save.arenaBestiaryUlt1[ID] > 0) {
            extUltraText += '\n<font color=\'#FF9999\'><b>ULTRA-1 form defeated!</b> (v' + _root.save.arenaBestiaryUlt1V[ID] + ')</font>';
            if (_root.save.arenaBestiaryUlt1F[ID] != undefined) {
              extUltraText += '\n<font color=\'#FF9999\'>First kill: ' + _root.save.arenaBestiaryUlt1F[ID] + '</font>';
            }
          }
          _root.actiondescription = '<b>' + _root.enemyList[ID].name + '</b>\nLevel: <b>' + _root.withComma(level) + '</b>\nHP: <b>' + _root.withComma(hp) + '</b>\nEXP: <b>' + _root.withComma(exp) + '</b> + ' + bestiaryBonus + '%\n_________\nKilled: <b>' + _root.withComma(killCount) + '</b>' + extKillText + extUltraText + '\n[Entry Level <b>' + entryLevel + '</b>]\n' + bonusText + '\n_________\nHold left mouse button to view more info';
        }
      };

      onReleaseOutside = function () {
        _parent._parent._parent.bestiaryDetail.gotoAndStop(1);
      };

      if (_root.save.featureBestiary != true) {
        onRollOver = null;
        onRollOut = null;
        onDragOut = null;
        onPress = null;
        onRelease = null;
        onReleaseOutside = null;
      }
    }

    instance of movieClip 5408  {

      onClipEvent (load) {
        _alpha = 0;
        del = 0;
      }

      onClipEvent (enterFrame) {
        del += 2;
        if (del <= 100) {
          _alpha = del;
        } else {
          if (del < 200) {
            _alpha = 200 - del;
          } else {
            _alpha = 0;
          }
        }
      }
    }
  }

  movieClip 5763  {
  }

  movieClip 5764  {

    frame 1 {
      stop();
    }
  }

  movieClip 5771  {

    frame 1 {
      function checkAlly() {
        tempOffset = _parent.allyOffset;
        tempID = _parent.allyOffset + Math.round(_y / 20) + 1;
        if (_parent.allyFiltered == true) {
          ID = _parent.allyArray[tempID];
        } else {
          ID = tempID;
        }
        if (isNaN(ID)) {
          ID = 0;
        }
        if (ID >= 1) {
          allyEXP = _root.save.arenaAllyEXP[ID];
          if (isNaN(allyEXP)) {
            if (isNaN(_root.save.arenaBestiary[ID])) {
              allyEXP = 0;
              obtained = false;
              gotoAndStop(2);
            } else {
              allyEXP = 0;
              obtained = false;
              gotoAndStop(4);
              favorite = _root.save.arenaAllyFavorite[ID];
              if (favorite == true) {
                favoriteIcon.gotoAndStop(1);
              } else {
                favoriteIcon.gotoAndStop(2);
              }
              allyName.text = _root.enemyList[ID].name;
              if (ID < 10) {
                fakeID = '00' + ID;
              } else {
                if (ID < 100) {
                  fakeID = '0' + ID;
                } else {
                  fakeID = ID;
                }
              }
              allyID.text = fakeID;
            }
          } else {
            obtained = true;
            gotoAndStop(3);
            favorite = _root.save.arenaAllyFavorite[ID];
            if (allyEXP >= 10000 || ID >= 501) {
              expBar._xscale = 100;
              if (ID >= 501) {
                if (_root.save.arenaAllyUpgrade[ID] == 15) {
                  fr = 22;
                } else {
                  fr = 21;
                }
              } else {
                if (_root.save.arenaAllyUpgrade[ID] == 15) {
                  fr = 13;
                  if (!isNaN(_root.save.arenaBestiaryUlt1[ID])) {
                    fr += 1;
                  }
                  if (!isNaN(_root.save.arenaBestiaryUlt2[ID])) {
                    fr += 2;
                  }
                  if (!isNaN(_root.save.arenaBestiaryUlt3[ID])) {
                    fr += 4;
                  }
                } else {
                  fr = 2 + _root.save.arenaAllyUpgrade[ID];
                }
              }
              expBar.gotoAndStop(fr);
              allyProg.text = '';
            } else {
              expBar._xscale = allyEXP / 100;
              expBar.gotoAndStop(1);
              allyProg.text = _root.withComma(allyEXP) + ' EXP';
            }
            if (favorite == true) {
              favoriteIcon.gotoAndStop(1);
            } else {
              favoriteIcon.gotoAndStop(2);
            }
            allyName.text = _root.enemyList[ID].name;
            if (ID < 10) {
              fakeID = '00' + ID;
            } else {
              if (ID < 100) {
                fakeID = '0' + ID;
              } else {
                fakeID = ID;
              }
            }
            allyID.text = fakeID;
            if (_root.save.arenaAlly == ID) {
              equipped = true;
              equipIcon.gotoAndStop(1);
            } else {
              equipped = false;
              equipIcon.gotoAndStop(2);
            }
          }
        } else {
          gotoAndStop(2);
        }
      }

      checkAlly();
      onEnterFrame = function () {
        if (tempOffset != _parent.allyOffset || _parent.recheckAlly > 0) {
          checkAlly();
        }
        if (equipped == true && _root.save.arenaAlly != ID) {
          checkAlly();
        }
      };

    }

    instance of movieClip 1552  {

      onClipEvent (rollOver, dragOver) {
        ID = _parent.ID;
        passive1text = '';
        passive2text = '';
        passive3text = '';
        active1text = '';
        active2text = '';
        active3text = '';
        tempText = '';
        maxI = 2;
        if (_root.save.arenaAllyUpgrade[ID] == 15) {
          maxI = 3;
        }
        i = 1;
        while (i <= maxI) {
          abil = _root.enemyList[ID]['allyPassive' + i];
          abilX = Math.floor(_root.enemyList[ID]['allyPassive' + i + 'X'] * (1 + _root.save.arenaAllyUpgrade[ID] / 10));
          if (i == 3) {
            abilX = _root.enemyList[ID]['allyPassive' + i + 'X'];
          }
          if (abil == 'EXP') {
            this['passive' + i + 'text'] = '\nEXP: +' + abilX + '%';
          } else {
            if (abil == 'Coin') {
              this['passive' + i + 'text'] = '\nCoin: +' + abilX + '%';
            } else {
              if (abil == 'Pixel') {
                this['passive' + i + 'text'] = '\nPixel: +' + abilX + '%';
              } else {
                if (abil == 'Reward') {
                  this['passive' + i + 'text'] = '\nEXP: +' + abilX + '%';
                  this['passive' + i + 'text'] += '\nCoin: +' + abilX + '%';
                  this['passive' + i + 'text'] += '\nPixel: +' + abilX + '%';
                } else {
                  if (abil == 'Drop Rate') {
                    this['passive' + i + 'text'] = '\nDrop Rate: +' + abilX + '%';
                  } else {
                    if (abil == 'Spawn Rate') {
                      this['passive' + i + 'text'] = '\nSpawn Rate: +' + abilX + '%';
                    } else {
                      if (abil == 'Attack %') {
                        this['passive' + i + 'text'] = '\nAttack: +' + abilX + '%';
                      } else {
                        if (abil == 'Defense %') {
                          this['passive' + i + 'text'] = '\nDefense: +' + abilX + '%';
                        } else {
                          if (abil == 'MaxHP %') {
                            this['passive' + i + 'text'] = '\nMaxHP: +' + abilX + '%';
                          } else {
                            if (abil == 'MaxMP %') {
                              this['passive' + i + 'text'] = '\nMaxMP: +' + abilX + '%';
                            } else {
                              if (abil == 'Accuracy %') {
                                this['passive' + i + 'text'] = '\nAccuracy: +' + abilX + '%';
                              } else {
                                if (abil == 'Evasion %') {
                                  this['passive' + i + 'text'] = '\nEvasion: +' + abilX + '%';
                                } else {
                                  if (abil == 'Equipment Attack') {
                                    this['passive' + i + 'text'] = '\nEquipment Attack: +' + abilX;
                                  } else {
                                    if (abil == 'Equipment Defense') {
                                      this['passive' + i + 'text'] = '\nEquipment Defense: +' + abilX;
                                    } else {
                                      if (abil == 'Attack Speed') {
                                        this['passive' + i + 'text'] = '\nAttack Speed: +' + abilX;
                                      } else {
                                        if (abil == 'Attack Speed %') {
                                          this['passive' + i + 'text'] = '\nAttack Speed: +' + abilX + '%';
                                        } else {
                                          if (abil == 'Mastery') {
                                            this['passive' + i + 'text'] = '\nMastery: +' + abilX + '%';
                                          } else {
                                            if (abil == 'Resist') {
                                              this['passive' + i + 'text'] = '\nDamage Taken: -' + abilX + '%';
                                            } else {
                                              if (abil == 'Hit Chance') {
                                                this['passive' + i + 'text'] = '\nHit Chance: +' + abilX + '%';
                                              } else {
                                                if (abil == 'Dodge Chance') {
                                                  this['passive' + i + 'text'] = '\nDodge Chance: +' + abilX + '%';
                                                } else {
                                                  if (abil == 'Critical Chance') {
                                                    this['passive' + i + 'text'] = '\nCritical Chance: +' + abilX + '%';
                                                  } else {
                                                    if (abil == 'Critical Damage') {
                                                      this['passive' + i + 'text'] = '\nCritical Damage: +' + abilX + '%';
                                                    } else {
                                                      if (abil == 'Reflect') {
                                                        this['passive' + i + 'text'] = '\nReflect Power: +' + abilX + '%';
                                                      } else {
                                                        if (abil == 'Magic Resist') {
                                                          this['passive' + i + 'text'] = '\nMagic Resist: +' + abilX + '%';
                                                        } else {
                                                          if (abil == 'Double Hit Chance') {
                                                            this['passive' + i + 'text'] = '\nDouble Hit Chance: +' + abilX + '%';
                                                          } else {
                                                            if (abil == 'Instant Kill') {
                                                              this['passive' + i + 'text'] = '\nInstant Kill Chance: +' + abilX + '%';
                                                            } else {
                                                              if (abil == 'Boss Damage') {
                                                                this['passive' + i + 'text'] = '\nDamage vs. Bosses: +' + abilX + '%';
                                                              } else {
                                                                if (abil == 'Non-Boss Damage') {
                                                                  this['passive' + i + 'text'] = '\nDamage vs. Non-Bosses: +' + abilX + '%';
                                                                } else {
                                                                  if (abil == 'Damage') {
                                                                    this['passive' + i + 'text'] = '\nDamage vs. Bosses: +' + abilX + '%';
                                                                    this['passive' + i + 'text'] += '\nDamage vs. Non-Bosses: +' + abilX + '%';
                                                                  } else {
                                                                    if (abil == 'Ignore Defense') {
                                                                      this['passive' + i + 'text'] = '\nIgnore ' + abilX + '% of monster DEF';
                                                                    } else {
                                                                      if (abil == 'Potion Efficiency') {
                                                                        this['passive' + i + 'text'] = '\nPotion Efficiency: +' + abilX + '%';
                                                                      } else {
                                                                        if (abil == 'Negate Effect') {
                                                                          this['passive' + i + 'text'] = '\nNegate Effect Chance: +' + abilX + '%';
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++i;
        }
        i = 1;
        while (i <= 3) {
          abil = _root.enemyList[ID]['allyActive' + i];
          abilX = _root.enemyList[ID]['allyActive' + i + 'X'];
          abilY = _root.enemyList[ID]['allyActive' + i + 'Y'];
          abilZ = _root.enemyList[ID]['allyActive' + i + 'Z'];
          if (abil != '') {
            this['active' + i + 'text'] = '\n<font color=\'#99FF00\'><b>' + abil + '</b></font> [CD: <font color=\'#99FF00\'><b>' + abilZ + '</b>s</font>]';
          }
          if (abil == 'Attack: Regular') {
            this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage.';
          } else {
            if (abil == 'Attack: Knockback') {
              this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and knocks the monster back a distance of ' + Math.floor(abilY * 25) + '%.';
            } else {
              if (abil == 'HP Recovery') {
                this['active' + i + 'text'] += '\nRecovers ' + abilX + '% of MaxHP.';
              } else {
                if (abil == 'MP Recovery') {
                  this['active' + i + 'text'] += '\nRecovers ' + abilX + '% of MaxMP.';
                } else {
                  if (abil == 'Attack: Poison') {
                    this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and poisons the monster for ' + abilY + 's.';
                  } else {
                    if (abil == 'Attack: Weaken') {
                      this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and weakens the monster for ' + abilY + 's.';
                    } else {
                      if (abil == 'Attack: Blind') {
                        this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and blinds the monster for ' + abilY + 's.';
                      } else {
                        if (abil == 'Attack: Stun') {
                          this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and stuns the monster for ' + abilY + 's.';
                        } else {
                          if (abil == 'Heal') {
                            this['active' + i + 'text'] += '\nRecovers ' + abilX + '% of MaxHP and deals ' + abilY + '% damage to undead monsters.';
                          } else {
                            if (abil == 'Buff Extension') {
                              this['active' + i + 'text'] += '\nExtends your current buff duration by ' + abilX + 's.';
                            } else {
                              if (abil == 'Buff: Power') {
                                this['active' + i + 'text'] += '\nGrants a ' + abilX + 's Power Buff.';
                              } else {
                                if (abil == 'Buff: Master') {
                                  this['active' + i + 'text'] += '\nGrants a ' + abilX + 's Master Buff.';
                                } else {
                                  if (abil == 'Buff: Reward') {
                                    this['active' + i + 'text'] += '\nGrants a ' + abilX + 's Reward Buff.';
                                  } else {
                                    if (abil == 'Buff: Enrage') {
                                      this['active' + i + 'text'] += '\nGreatly increases your power for ' + abilX + 's.';
                                    } else {
                                      if (abil == 'Buff: Elemental Boost') {
                                        this['active' + i + 'text'] += '\nIncreases your EXP gain, elemental damage and elemental resistance for ' + abilX + 's.';
                                      } else {
                                        if (abil == 'Buff: Invincibility') {
                                          this['active' + i + 'text'] += '\nAllows you to become immune to all monster attacks for ' + abilX + 's.';
                                        } else {
                                          if (abil == 'Attack: Power Down') {
                                            this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and permanently reduces the monster\'s Attack by ' + abilY + '%.';
                                          } else {
                                            if (abil == 'Attack: Defense Down') {
                                              this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and permanently reduces the monster\'s Defense by ' + abilY + '%.';
                                            } else {
                                              if (abil == 'Attack: Accuracy Down') {
                                                this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and permanently reduces the monster\'s Accuracy by ' + abilY + '%.';
                                              } else {
                                                if (abil == 'Attack: Evasion Down') {
                                                  this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and permanently reduces the monster\'s Evasion by ' + abilY + '%.';
                                                } else {
                                                  if (abil == 'Attack: Silence') {
                                                    this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage and has a ' + abilY + '% chance to remove a non-boss, non-ULTRA monster\'s magic attack, special ability and ability to rampage.';
                                                  } else {
                                                    if (abil == 'Spirit Recovery') {
                                                      this['active' + i + 'text'] += '\nRecovers ' + abilX + ' Spirit.';
                                                    } else {
                                                      if (abil == 'Attack: Ignore Defense') {
                                                        this['active' + i + 'text'] += '\nDeals ' + abilX + '% damage, ignoring the monster\'s defense.';
                                                      } else {
                                                        if (abil == 'Produce Loot: Coin') {
                                                          this['active' + i + 'text'] += '\nProduces approximately ' + _root.withComma(abilX) + ' Coins in the form of loot.';
                                                        } else {
                                                          if (abil == 'Produce Loot: Pixel') {
                                                            this['active' + i + 'text'] += '\nProduces approximately ' + _root.withComma(abilX) + ' Pixels in the form of loot.';
                                                          } else {
                                                            if (abil == 'Produce Loot: Material') {
                                                              this['active' + i + 'text'] += '\nProduces approximately ' + _root.withComma(abilX) + ' Crafting Material in the form of loot.';
                                                            } else {
                                                              if (abil == 'Produce Loot: Stat') {
                                                                this['active' + i + 'text'] += '\nProduces a Stat Increase loot.';
                                                              } else {
                                                                if (abil == 'Produce Loot: Rare Item') {
                                                                  this['active' + i + 'text'] += '\nProduces a random rare item.';
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++i;
        }
        _root.actiondescription = '<font color=\'#FFFF00\'><b>' + _root.enemyList[ID].name + '</b></font>';
        _root.actiondescription += '\nLevel: <b>' + _root.withComma(_root.enemyList[ID].level) + '</b></font>';
        _root.actiondescription += '\nAlly EXP: ' + _root.withComma(_root.save.arenaAllyEXP[ID]) + ' / 10,000';
        _root.actiondescription += '\n----------\n<b>Passive Abilities</b>';
        _root.actiondescription += passive1text;
        _root.actiondescription += passive2text;
        _root.actiondescription += '<font color=\'#FFFF00\'>' + passive3text + '</font>';
        _root.actiondescription += '\n----------\n<b>Active Abilities</b>';
        _root.actiondescription += active1text;
        _root.actiondescription += active2text;
        _root.actiondescription += active3text;
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        if (_root.save.arenaAlly != _parent.ID) {
          _root.save.arenaAlly = _parent.ID;
        } else {
          _root.save.arenaAlly = 0;
        }
        _parent.checkAlly();
      }
    }

    instance favoriteIcon of movieClip 5760  {

      onClipEvent (rollOver, dragOver) {
        _root.actiondescription = '<b>Favorite</b>\nYou can see your favorite Invisible Allies using the Filter Allies button.';
      }

      onClipEvent (rollOut, dragOut) {
        _root.actiondescription = '';
      }

      onClipEvent (release) {
        if (_root.save.arenaAllyFavorite[_parent.ID] != true) {
          _root.save.arenaAllyFavorite[_parent.ID] = true;
        } else {
          _root.save.arenaAllyFavorite[_parent.ID] = false;
        }
        _parent.checkAlly();
      }
    }

    instance of movieClip 5764  {

      onClipEvent (load) {
        if (_root.save.featureBestiary == true) {
          gotoAndStop(2);
        }
      }

      onClipEvent (release) {
      }
    }
  }

  button 5772 {

    on (release) {
      allyOffset -= 12;
      if (allyOffset < 0) {
        allyOffset = 0;
      }
    }

    on (keyPress '<Up>') {
      allyOffset -= 1;
      if (allyOffset < 0) {
        allyOffset = 0;
      }
      _root.actiondescription = '';
    }
  }

  button 5773 {

    on (release) {
      allyOffset += 12;
      if (allyOffset > allyMaxOffset) {
        allyOffset = allyMaxOffset;
      }
    }

    on (keyPress '<Down>') {
      allyOffset += 1;
      if (allyOffset > allyMaxOffset) {
        allyOffset = allyMaxOffset;
      }
      _root.actiondescription = '';
    }
  }

  movieClip 5808  {

    frame 1 {
      stop();
    }

    frame 2 {
      passiveArray = ['Reward', 'EXP', 'Coin', 'Pixel', 'Drop Rate', 'Spawn Rate', 'Attack %', 'Defense %', 'MaxHP %', 'MaxMP %', 'Accuracy %', 'Evasion %', 'Equipment Attack', 'Equipment Defense', 'Attack Speed', 'Attack Speed %', 'Mastery', 'Resist', 'Hit Chance', 'Dodge Chance', 'Critical Chance', 'Critical Damage', 'Reflect', 'Magic Resist', 'Double Hit Chance', 'Instant Kill', 'Boss Damage', 'Non-Boss Damage', 'Damage', 'Ignore Defense', 'Potion Efficiency', 'Negate Effect'];
      activeArray = ['Attack: Regular', 'Attack: Knockback', 'Attack: Poison', 'Attack: Weaken', 'Attack: Blind', 'Attack: Stun', 'Attack: Power Down', 'Attack: Defense Down', 'Attack: Accuracy Down', 'Attack: Evasion Down', 'Attack: Silence', 'Attack: Ignore Defense', 'Heal', 'HP Recovery', 'MP Recovery', 'Spirit Recovery', 'Buff Extension', 'Buff: Power', 'Buff: Master', 'Buff: Reward', 'Buff: Enrage', 'Buff: Elemental Boost', 'Buff: Invincibility', 'Produce Loot: Coin', 'Produce Loot: Pixel', 'Produce Loot: Material', 'Produce Loot: Stat', 'Produce Loot: Rare Item'];
      text1.restrict = '0-9';
      text2.restrict = '0-9';
      text3.restrict = '0-9';
      text4.restrict = '0-9';
      text8.restrict = '0-9';
      text9.restrict = '0-9';
      t1 = _root.save.filterPref1t;
      t2 = _root.save.filterPref2t;
      t3 = _root.save.filterPref3t;
      t4 = _root.save.filterPref4t;
      text5.text = _root.save.filterPref5t;
      text6.text = _root.save.filterPref6t;
      t7 = _root.save.filterPref7t;
      t8 = _root.save.filterPref8t;
      t9 = _root.save.filterPref9t;
      onEnterFrame = function () {
        if (isNaN(t1) || t1 < 0) {
          t1 = 0;
        }
        if (isNaN(t2) || t2 < 0) {
          t2 = 0;
        }
        if (isNaN(t3) || t3 < 1) {
          t3 = 1;
        }
        if (t3 > 9001) {
          t3 = 9001;
        }
        if (isNaN(t4) || t4 < 1) {
          t4 = 1;
        }
        if (t4 > 9001) {
          t4 = 9001;
        }
        if (isNaN(t8) || t8 < 0) {
          t8 = 1;
        }
        if (t8 > 10) {
          t8 = 15;
        }
        if (isNaN(t9) || t9 < 0) {
          t9 = 1;
        }
        if (t9 > 10) {
          t9 = 15;
        }
        _root.save.filterPref1t = t1;
        _root.save.filterPref2t = t2;
        _root.save.filterPref3t = t3;
        _root.save.filterPref4t = t4;
        text5.text = _root.save.filterPref5t;
        text6.text = _root.save.filterPref6t;
        _root.save.filterPref7t = t7;
        _root.save.filterPref8t = t8;
        _root.save.filterPref9t = t9;
        if (_root.save.filterPref5c == true) {
          text1.textColor = 0;
        } else {
          text1.textColor = 10066329;
        }
        if (_root.save.filterPref6c == true) {
          text2.textColor = 0;
        } else {
          text2.textColor = 10066329;
        }
        if (_root.save.filterPref7c == true) {
          text3.textColor = 0;
        } else {
          text3.textColor = 10066329;
        }
        if (_root.save.filterPref8c == true) {
          text4.textColor = 0;
        } else {
          text4.textColor = 10066329;
        }
        if (_root.save.filterPref9c == true) {
          text5.textColor = 10092288;
        } else {
          text5.textColor = 10066329;
        }
        if (_root.save.filterPref10c == true) {
          text6.textColor = 10092288;
        } else {
          text6.textColor = 10066329;
        }
        if (_root.save.filterPref11c == true) {
          text7.textColor = 0;
        } else {
          text7.textColor = 10066329;
        }
        if (_root.save.filterPref12c == true) {
          text8.textColor = 0;
        } else {
          text8.textColor = 10066329;
        }
        if (_root.save.filterPref13c == true) {
          text9.textColor = 0;
        } else {
          text9.textColor = 10066329;
        }
      };

    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref1c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref1c != true) {
          _root.save.filterPref1c = true;
          _root.save.filterPref2c = false;
        } else {
          _root.save.filterPref1c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref2c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref2c != true) {
          _root.save.filterPref2c = true;
          _root.save.filterPref1c = false;
          _root.save.filterPref5c = false;
          _root.save.filterPref6c = false;
        } else {
          _root.save.filterPref2c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref3c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref3c != true) {
          _root.save.filterPref3c = true;
          _root.save.filterPref4c = false;
        } else {
          _root.save.filterPref3c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref4c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref4c != true) {
          _root.save.filterPref4c = true;
          _root.save.filterPref3c = false;
        } else {
          _root.save.filterPref4c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref5c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref5c != true) {
          _root.save.filterPref5c = true;
          _root.save.filterPref1c = true;
          _root.save.filterPref2c = false;
        } else {
          _root.save.filterPref5c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref6c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref6c != true) {
          _root.save.filterPref6c = true;
          _root.save.filterPref1c = true;
          _root.save.filterPref2c = false;
        } else {
          _root.save.filterPref6c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref7c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref7c != true) {
          _root.save.filterPref7c = true;
        } else {
          _root.save.filterPref7c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref8c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref8c != true) {
          _root.save.filterPref8c = true;
        } else {
          _root.save.filterPref8c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref9c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref9c != true) {
          _root.save.filterPref9c = true;
        } else {
          _root.save.filterPref9c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref10c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref10c != true) {
          _root.save.filterPref10c = true;
        } else {
          _root.save.filterPref10c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref11c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref11c != true) {
          _root.save.filterPref11c = true;
        } else {
          _root.save.filterPref11c = false;
        }
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function changeBonus() {
          curBonus = 0;
          i = 0;
          while (i <= _parent.passiveArray.length - 1) {
            if (toChange == _parent.passiveArray[i]) {
              curBonus = i;
            }
            ++i;
          }
          if (curBonus == _parent.passiveArray.length - 1) {
            newBonus = _parent.passiveArray[0];
          } else {
            newBonus = _parent.passiveArray[curBonus + 1];
          }
        }

      }

      onClipEvent (release) {
        toChange = _root.save.filterPref5t;
        changeBonus();
        _root.save.filterPref5t = newBonus;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function changeBonus() {
          curBonus = 0;
          i = 0;
          while (i <= _parent.passiveArray.length - 1) {
            if (toChange == _parent.passiveArray[i]) {
              curBonus = i;
            }
            ++i;
          }
          if (curBonus == 0) {
            newBonus = _parent.passiveArray[_parent.passiveArray.length - 1];
          } else {
            newBonus = _parent.passiveArray[curBonus - 1];
          }
        }

      }

      onClipEvent (release) {
        toChange = _root.save.filterPref5t;
        changeBonus();
        _root.save.filterPref5t = newBonus;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function changeBonus() {
          curBonus = 0;
          i = 0;
          while (i <= _parent.activeArray.length - 1) {
            if (toChange == _parent.activeArray[i]) {
              curBonus = i;
            }
            ++i;
          }
          if (curBonus == _parent.activeArray.length - 1) {
            newBonus = _parent.activeArray[0];
          } else {
            newBonus = _parent.activeArray[curBonus + 1];
          }
        }

      }

      onClipEvent (release) {
        toChange = _root.save.filterPref6t;
        changeBonus();
        _root.save.filterPref6t = newBonus;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (load) {
        function changeBonus() {
          curBonus = 0;
          i = 0;
          while (i <= _parent.activeArray.length - 1) {
            if (toChange == _parent.activeArray[i]) {
              curBonus = i;
            }
            ++i;
          }
          if (curBonus == 0) {
            newBonus = _parent.activeArray[_parent.activeArray.length - 1];
          } else {
            newBonus = _parent.activeArray[curBonus - 1];
          }
        }

      }

      onClipEvent (release) {
        toChange = _root.save.filterPref6t;
        changeBonus();
        _root.save.filterPref6t = newBonus;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent._parent.allyFiltered = false;
        _parent._parent.allyArray = [zeroItem];
        i = 1;
        while (i <= _root.totalMonster + _root.kpaCount) {
          allyValid = true;
          if (_root.save.filterPref1c == true) {
            if (isNaN(_root.save.arenaAllyEXP[i])) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref2c == true) {
            if (!isNaN(_root.save.arenaAllyEXP[i])) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref3c == true) {
            if (_root.save.arenaAllyFavorite[i] != true) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref4c == true) {
            if (_root.save.arenaAllyFavorite[i] == true) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref5c == true) {
            if (_root.save.arenaAllyEXP[i] < _root.save.filterPref1t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref6c == true) {
            if (_root.save.arenaAllyEXP[i] > _root.save.filterPref2t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref7c == true) {
            if (_root.enemyList[i].level < _root.save.filterPref3t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref8c == true) {
            if (_root.enemyList[i].level > _root.save.filterPref4t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref9c == true) {
            filterValid = false;
            k = 1;
            while (k <= 3) {
              if (_root.enemyList[i]['allyPassive' + k] == _root.save.filterPref5t) {
                filterValid = true;
              }
              if (_root.enemyList[i]['allyPassive' + k] == 'Reward') {
                if (_root.save.filterPref5t == 'EXP' || _root.save.filterPref5t == 'Coin' || _root.save.filterPref5t == 'Pixel') {
                  filterValid = true;
                }
              }
              if (_root.enemyList[i]['allyPassive' + k] == 'Damage') {
                if (_root.save.filterPref5t == 'Boss Damage' || _root.save.filterPref5t == 'Non-Boss Damage') {
                  filterValid = true;
                }
              }
              ++k;
            }
            if (filterValid == false) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref10c == true) {
            filterValid = false;
            k = 1;
            while (k <= 3) {
              if (_root.enemyList[i]['allyActive' + k] == _root.save.filterPref6t) {
                filterValid = true;
              }
              ++k;
            }
            if (filterValid == false) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref11c == true) {
            if (_root.enemyList[i].name.indexOf(_root.save.filterPref7t) == -1) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref12c == true) {
            if (_root.save.arenaAllyUpgrade[i] < _root.save.filterPref8t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref13c == true) {
            if (_root.save.arenaAllyUpgrade[i] > _root.save.filterPref9t) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref14c == true) {
            if (_root.enemyList[i].allyPassive3 == '') {
              allyValid = false;
            }
          }
          if (_root.save.filterPref15c == true) {
            if (_root.enemyList[i].allyPassive3 != '') {
              allyValid = false;
            }
          }
          if (_root.save.filterPref16c == true) {
            if (i <= 500) {
              allyValid = false;
            }
          }
          if (_root.save.filterPref17c == true) {
            if (i > 500) {
              allyValid = false;
            }
          }
          if (allyValid == true) {
            _parent._parent.allyArray.push(i);
          }
          ++i;
        }
        _parent._parent.allyOffset = 0;
        _parent._parent.allyMaxOffset = _parent._parent.allyArray.length - 13;
        if (_parent._parent.allyMaxOffset < 1) {
          _parent._parent.allyMaxOffset = 1;
        }
        _parent._parent.allyFiltered = true;
        _parent._parent.recheckAlly = 2;
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.gotoAndStop(1);
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref12c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref12c != true) {
          _root.save.filterPref12c = true;
        } else {
          _root.save.filterPref12c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref13c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref13c != true) {
          _root.save.filterPref13c = true;
        } else {
          _root.save.filterPref13c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref14c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref14c != true) {
          _root.save.filterPref14c = true;
          _root.save.filterPref15c = false;
        } else {
          _root.save.filterPref14c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref15c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref15c != true) {
          _root.save.filterPref15c = true;
          _root.save.filterPref14c = false;
        } else {
          _root.save.filterPref15c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref16c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref16c != true) {
          _root.save.filterPref16c = true;
          _root.save.filterPref17c = false;
        } else {
          _root.save.filterPref16c = false;
        }
      }
    }

    instance of movieClip 4859  {

      onClipEvent (enterFrame) {
        if (_root.save.filterPref17c == true) {
          gotoAndStop(2);
        } else {
          gotoAndStop(1);
        }
      }

      onClipEvent (release) {
        if (_root.save.filterPref17c != true) {
          _root.save.filterPref17c = true;
          _root.save.filterPref16c = false;
        } else {
          _root.save.filterPref17c = false;
        }
      }
    }
  }

  movieClip 5809  {

    frame 1 {
      allyFiltered = false;
      allyOffset = _root.save.arenaAlly - 1;
      allyMaxOffset = _root.totalMonster - 12 + _root.kpaCount;
      allyArray = [zeroItem];
      recheckAlly = 0;
      if (allyOffset < 0) {
        allyOffset = 0;
      }
      if (allyMaxOffset < 1) {
        allyMaxOffset = 1;
      }
      if (allyOffset > allyMaxOffset) {
        allyOffset = allyMaxOffset;
      }
      onEnterFrame = function () {
        if (_root.scrollingDir == -1) {
          _root.actiondescription = '';
          allyOffset -= 3;
          if (allyOffset < 0) {
            allyOffset = 0;
          }
        }
        if (_root.scrollingDir == 1) {
          _root.actiondescription = '';
          allyOffset += 3;
          if (allyOffset > allyMaxOffset) {
            allyOffset = allyMaxOffset;
          }
        }
        if (recheckAlly > 0) {
          recheckAlly -= 1;
        }
      };

    }

    instance of movieClip 5361  {

      onClipEvent (enterFrame) {
        if (dragging == true) {
          diff = 0;
          if (_parent._ymouse < _y && _parent.allyOffset > 0) {
            diff = -1 + Math.floor((_parent._ymouse - _y) / 20);
            if (diff < -_parent.allyOffset) {
              diff = -_parent.allyOffset;
            }
          }
          if (_parent._ymouse > _y + 50 && _parent.allyOffset < _parent.allyMaxOffset) {
            diff = 1 + Math.floor((_parent._ymouse - _y - 50) / 20);
            if (diff > _parent.allyMaxOffset - _parent.allyOffset) {
              diff = _parent.allyMaxOffset - _parent.allyOffset;
            }
          }
          _parent.allyOffset += diff;
        }
        _y = 20 + (_parent.allyOffset / _parent.allyMaxOffset) * 150;
      }

      onClipEvent (press) {
        dragging = true;
      }

      onClipEvent (release, releaseOutside) {
        dragging = false;
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.filterScreen.gotoAndStop(2);
      }
    }

    instance of movieClip 1552  {

      onClipEvent (release) {
        _parent.allyFiltered = false;
        _parent.allyOffset = _root.save.arenaAlly - 1;
        _parent.allyMaxOffset = _root.totalMonster - 12 + _root.kpaCount;
        if (_parent.allyOffset < 0) {
          _parent.allyOffset = 0;
        }
        if (_parent.allyMaxOffset < 1) {
          _parent.allyMaxOffset = 1;
        }
        if (_parent.allyOffset > _parent.allyMaxOffset) {
          _parent.allyOffset = _parent.allyMaxOffset;
        }
        _parent.recheckAlly = 2;
      }
    }
  }

  movieClip 5820  {

    frame 1 {
      if (_root.save.autoSet6 != true) {
        z = 1;
        while (z <= 1337) {
          if (_root.save.inventoryExist[z] == 1) {
            if (_root.save.inventoryType[z] == 'Weapon' || _root.save.inventoryType[z] == 'Armor' || _root.save.inventoryType[z] == 'Accessory') {
              _root.save.inventorySet[z] = _root.checkArenaSet(_root.save.inventoryName[z]);
            }
          }
          ++z;
        }
        _root.save.autoSet6 = true;
      }
      _root.recalcMuseumScore();
      if (_root.save.autoSwap1 != true) {
        _root.save.autoSwap1 = true;
        _root.save.arenaMedal = 0;
        _root.save.arenaPendant = 0;
        nextAccSlot = 501;
        z = 101;
        while (z <= 130) {
          if (_root.save.inventorySubtype[z] == 'Pendant' || _root.save.inventorySubtype[z] == 'Medal') {
            _root.save.inventoryType[z] = 'Accessory';
            _root.swapArenaItem(z, nextAccSlot);
            nextAccSlot += 1;
          }
          ++z;
        }
        z = 301;
        while (z <= 330) {
          if (_root.save.inventorySubtype[z] == 'Pendant' || _root.save.inventorySubtype[z] == 'Medal') {
            _root.save.inventoryType[z] = 'Accessory';
          }
          ++z;
        }
      }
      z = 1;
      while (z <= 600) {
        if (isNaN(_root.save.inventoryUnob[z]) || _root.save.inventoryUnob[z] > 100) {
          _root.save.inventoryUnob[z] = 0;
        }
        ++z;
      }
      if (_root.save.curAttMedPend != 0 && _root.emptyAccessorySlot >= 1) {
        tempAttMonth = _root.save.curAttMedPend % 100;
        tempAttYear = Math.floor(_root.save.curAttMedPend / 100);
        _root.save.curAttMedPend = 0;
        _root.getArenaAccessory(40, 'Medal', 64, 40, 8, 40, 40, 40, 40, 1, 0, 1, 0, 10, 706, 'Pixel', 'Damage', 'Attack Power', 0, 6480000000.0, true, true, false, false, 16, 'Perfect Attendance', 'Thank you for playing Anti-Idle every day in ' + _root.getFullMonthName(tempAttMonth) + ' ' + tempAttYear + '!\n\nWhen this item is in your inventory, you will receive +10% Pixel, +10% MaxHP and +10% MaxMP! Stacks up to 2 times. Does not apply if the item is expired.', true);
      }
    }

    frame 1 {
      function showDamage(num, col, xLoc, yLoc) {
        if (_root.cursoridle < 300) {
          if (!isNaN(num)) {
            num = _root.withComma(num);
          }
          if (yLoc < 30) {
            yLoc = 30;
          }
          _root.incDt();
          stuffHolder.attachMovie('damagePop', 'damagePop' + _root.summonCount, _root.antiLag, {'_x': xLoc, '_y': yLoc + 10, 'damageNum': num, 'damageColor': col});
        }
      }

      function subFunction1() {
        if (_root.save.arenaZone == 79 && _root.save.arenaBuffType != 13) {
          _root.save.arenaZone = 0;
        }
        _root.abilIncEquipAttack = +Math.floor(_root.save.collectionPoint / 10);
        _root.abilIncEquipDefense = +Math.floor(_root.save.collectionPoint / 2);
        _root.abilIncAttack = 0;
        _root.abilIncDefense = 0;
        _root.abilIncHP = 0;
        _root.abilIncMP = 0;
        _root.abilIncAccuracy = 0;
        _root.abilIncEvasion = 0;
        _root.abilIncExpBoss = 0;
        _root.abilIncExpRare = 0;
        _root.abilIncExpEpic = 0;
        _root.abilIncPixelLoot = 0;
        _root.abilIncCraftLoot = 0;
        _root.abilResistFire = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistIce = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistWind = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistEarth = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistThunder = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistWater = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistLight = +(_root.save.arenaSkill[56] * 1);
        _root.abilResistDark = +(_root.save.arenaSkill[56] * 1);
        if (_root.save.careerLevel[3] >= 200) {
          _root.abilResistFire += 30;
          _root.abilResistIce += 30;
          _root.abilResistWind += 30;
          _root.abilResistEarth += 30;
          _root.abilResistThunder += 30;
          _root.abilResistWater += 30;
          _root.abilResistLight += 30;
          _root.abilResistDark += 30;
        }
        _root.abilResistAll = 0;
        _root.abilPwnFire = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnIce = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnWind = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnEarth = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnThunder = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnWater = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnLight = +(_root.save.arenaSkill[56] * 1);
        _root.abilPwnDark = +(_root.save.arenaSkill[56] * 1);
        if (_root.save.careerLevel[3] >= 200) {
          _root.abilPwnFire += 30;
          _root.abilPwnIce += 30;
          _root.abilPwnWind += 30;
          _root.abilPwnEarth += 30;
          _root.abilPwnThunder += 30;
          _root.abilPwnWater += 30;
          _root.abilPwnLight += 30;
          _root.abilPwnDark += 30;
        }
        _root.abilPwnAll = 0;
        _root.abilExp = +_root.setExpBonus;
        _root.abilCoin = +_root.setCoinBonus;
        _root.abilPixel = +_root.setPixelBonus;
        _root.abilDropRate = +_root.setDropBonus;
        _root.abilSpawnRate = +_root.setSpawnBonus;
        _root.abilRareRate = +Math.floor(_root.save.collectionPoint / 20) + _root.setRareBonus;
        _root.abilEpicRate = +Math.floor(_root.save.collectionPoint / 50) + _root.setEpicBonus;
        _root.abilAttack = 0;
        _root.abilAttackSpeed = +_root.setSpeedBonus;
        _root.abilIgnoreDefense = 0;
        _root.abilMastery = 0;
        _root.abilCriticalChance = 0;
        _root.abilCriticalDamage = 0;
        _root.abilDefense = 0;
        _root.abilDamageTaken = 0;
        _root.abilReflect = 0;
        _root.abilAccuracy = 0;
        _root.abilHitChance = 0;
        _root.abilEvasion = 0;
        _root.abilDodgeChance = 0;
        _root.abilPoisonChance = 0;
        _root.abilWeakenChance = 0;
        _root.abilBlindChance = 0;
        _root.abilStunChance = 0;
        _root.abilSilenceChance = 0;
        _root.abilHP = +_root.setHealthBonus;
        _root.abilMP = +_root.setManaBonus;
        _root.abilHPRegen = 0;
        _root.abilMPRegen = 0;
        _root.abilRageDepletion = 0;
        _root.abilLifeDrain = 0;
        _root.abilManaEater = 0;
        _root.abilAutoSteal = 0;
        _root.abilDoubleHit = 0;
        _root.abilRageAttack = 0;
        _root.abilRageSpeed = 0;
        _root.abilPoisonDamage = 0;
        _root.abilPoisonDuration = 0;
        _root.abilWeakenEffect = 0;
        _root.abilWeakenDuration = 0;
        _root.abilBlindEffect = 0;
        _root.abilBlindDuration = 0;
        _root.abilPotionEfficiency = +(_root.save.arenaSkill[60] * 10);
        _root.abilBossDamage = +_root.setDamageBonus + _root.save.arenaSkill[57] * 2;
        _root.abilNonBossDamage = +_root.setDamageBonus;
        _root.abilMagicResist = +(_root.save.arenaSkill[58] * 1);
        _root.abilInstantKill = +Math.floor(_root.save.arenaSkill[57] * 0.5);
        _root.abilNegateEffect = +(_root.save.arenaSkill[58] * 1);
        _root.abilExtraCombo = 0;
        _root.abilMagicReflect = 0;
        _root.abilNullifyPenalty = 0;
        _root.abilBuffEffect = 0;
        _root.abilMaxSpirit = 0;
        _root.abilIgnoreEpicWeapon = 0;
        _root.abilIgnoreBonusRock = 0;
        _root.abilIgnorePendant = 0;
        _root.abilIgnoreFinalizer = 0;
        _root.abilIgnoreOutfit = 0;
        if (_root.specPierce > 0) {
          _root.abilIgnoreDefense += 10 + _root.save.arenaSkill[3];
        }
        if (_root.specPolearm > 0) {
          _root.abilIncEquipAttack += 250 + 25 * _root.save.arenaSkill[3];
          _root.abilIncEquipDefense += 500 + 50 * _root.save.arenaSkill[3];
          _root.abilHP += 100 + 10 * _root.save.arenaSkill[3];
        }
        if (_root.specTrueshot > 0) {
          _root.abilHitChance += 10 + _root.save.arenaSkill[3];
        }
        dilStack = 0;
        domStack = 0;
        megStack = 0;
        i = 501;
        while (i <= 530) {
          if (_root.save.inventoryName[i] == 'Perfect Attendance' && _root.save.inventoryExist[i] == 1 && dilStack < 2 && _root.save.inventoryExpiry[i] > _root.systemtimenow) {
            dilStack += 1;
            _root.abilPixel += 10;
            _root.abilHP += 10;
            _root.abilMP += 10;
          }
          if (_root.save.inventoryName[i] == 'Dominator Gem' && _root.save.inventoryExist[i] == 1 && domStack < 1) {
            domStack += 1;
            _root.abilCoin += Math.floor(Math.min(_root.save.arenaSpookyScore / 1000, 30));
          }
          if (_root.save.inventoryName[i] == 'Mega Triangle Gem' && _root.save.inventoryExist[i] == 1 && megStack < 1) {
            megStack += 1;
            _root.abilExp += Math.floor(Math.min(_root.save.arenaTriangleScore / 100, 30));
          }
          ++i;
        }
        if (_root.save.arenaBuffType == 1 && _root.arenaPotionBlock <= 0) {
          _root.abilAttack += Math.floor(50 * _root.buffMultiplier);
          _root.abilDefense += Math.floor(50 * _root.buffMultiplier);
          _root.abilHP += Math.floor(150 * _root.buffMultiplier);
          _root.abilMP += Math.floor(250 * _root.buffMultiplier);
          _root.abilAccuracy += Math.floor(75 * _root.buffMultiplier);
          _root.abilEvasion += Math.floor(75 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 2 && _root.arenaPotionBlock <= 0) {
          _root.abilMastery += Math.floor(50 * _root.buffMultiplier);
          _root.abilDamageTaken += Math.floor(25 * _root.buffMultiplier);
          _root.abilHPRegen += Math.floor(2500 * _root.buffMultiplier);
          _root.abilMPRegen += Math.floor(1250 * _root.buffMultiplier);
          _root.abilHitChance += Math.floor(25 * _root.buffMultiplier);
          _root.abilDodgeChance += Math.floor(25 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 3 && _root.arenaPotionBlock <= 0) {
          _root.abilExp += Math.floor(50 * _root.buffMultiplier);
          _root.abilCoin += Math.floor(50 * _root.buffMultiplier);
          _root.abilPixel += Math.floor(50 * _root.buffMultiplier);
          _root.abilDropRate += Math.floor(100 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 4 && _root.arenaPotionBlock <= 0) {
          _root.abilExp += Math.floor(100 * _root.buffMultiplier);
          _root.abilCoin += Math.floor(100 * _root.buffMultiplier);
          _root.abilPixel += Math.floor(100 * _root.buffMultiplier);
          _root.abilDropRate += Math.floor(200 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 5 && _root.arenaPotionBlock <= 0) {
          _root.abilRageDepletion += Math.floor(30 * _root.buffMultiplier);
          _root.abilRageAttack += Math.floor(60 * _root.buffMultiplier);
          _root.abilRageSpeed += Math.floor(90 * _root.buffMultiplier);
          _root.abilNonBossDamage += Math.floor(60 * _root.buffMultiplier);
          _root.abilBossDamage += Math.floor(60 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 6 && _root.arenaPotionBlock <= 0) {
          _root.abilExp += Math.floor(50 * _root.buffMultiplier);
          _root.abilResistFire += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistIce += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistWind += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistEarth += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistThunder += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistWater += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistLight += Math.floor(150 * _root.buffMultiplier);
          _root.abilResistDark += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnFire += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnIce += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnWind += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnEarth += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnThunder += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnWater += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnLight += Math.floor(150 * _root.buffMultiplier);
          _root.abilPwnDark += Math.floor(150 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 9 && _root.arenaPotionBlock <= 0) {
          _root.abilDropRate += Math.floor(50 * _root.buffMultiplier);
          _root.abilRareRate += Math.floor(100 * _root.buffMultiplier);
          _root.abilEpicRate += Math.floor(100 * _root.buffMultiplier);
        }
        if (_root.save.arenaBuffType == 10 && _root.arenaPotionBlock <= 0) {
          _root.abilSpawnRate += Math.floor(50 * _root.buffMultiplier);
        }
        if (_root.save.arenaRing == 1) {
          _root.abilHP += 300;
          _root.abilHPRegen += 4000;
        } else {
          if (_root.save.arenaRing == 2) {
            _root.abilMP += 250;
            _root.abilMPRegen += 4000;
          } else {
            if (_root.save.arenaRing == 3) {
              _root.abilAttack += 60;
              _root.abilIgnoreDefense += 60;
            } else {
              if (_root.save.arenaRing == 4) {
                _root.abilAttackSpeed += 100;
                _root.abilDoubleHit += 60;
              } else {
                if (_root.save.arenaRing == 5) {
                  _root.abilMastery += 90;
                  _root.abilIgnoreDefense += 10;
                  _root.abilHitChance += 10;
                  _root.abilDodgeChance += 10;
                } else {
                  if (_root.save.arenaRing == 6) {
                    _root.abilCriticalChance += 30;
                    _root.abilCriticalDamage += 150;
                  } else {
                    if (_root.save.arenaRing == 7) {
                      _root.abilDefense += 60;
                      _root.abilDamageTaken += 30;
                    } else {
                      if (_root.save.arenaRing == 8) {
                        _root.abilReflect += 4500;
                        _root.abilAttack += 15;
                        _root.abilDefense += 15;
                      } else {
                        if (_root.save.arenaRing == 9) {
                          _root.abilAccuracy += 120;
                          _root.abilHitChance += 30;
                        } else {
                          if (_root.save.arenaRing == 10) {
                            _root.abilEvasion += 120;
                            _root.abilDodgeChance += 30;
                          } else {
                            if (_root.save.arenaRing == 11) {
                              _root.abilLifeDrain += 50;
                              _root.abilManaEater += 6000;
                              _root.abilHP += 150;
                            } else {
                              if (_root.save.arenaRing == 12) {
                                _root.abilPoisonChance += 50;
                                _root.abilWeakenChance += 50;
                                _root.abilBlindChance += 50;
                                _root.abilStunChance += 10;
                              } else {
                                if (_root.save.arenaRing == 13) {
                                  _root.abilSpawnRate += 20;
                                } else {
                                  if (_root.save.arenaRing == 14) {
                                    _root.abilExp += 50;
                                  } else {
                                    if (_root.save.arenaRing == 15) {
                                      _root.abilCoin += 50;
                                      _root.abilPixel += 50;
                                    } else {
                                      if (_root.save.arenaRing == 16) {
                                        _root.abilNullifyPenalty += 100;
                                      } else {
                                        if (_root.save.arenaRing == 17) {
                                          _root.abilDropRate += 100;
                                          _root.abilRareRate += 100;
                                          _root.abilEpicRate += 100;
                                        } else {
                                          if (_root.save.arenaRing == 20) {
                                            _root.abilRageDepletion += 30;
                                            _root.abilRageAttack += 60;
                                            _root.abilRageSpeed += 120;
                                          } else {
                                            if (_root.save.arenaRing == 21) {
                                              _root.abilMagicResist += 80;
                                              _root.abilNegateEffect += 80;
                                            } else {
                                              if (_root.save.arenaRing == 22) {
                                                _root.abilBossDamage += 120;
                                                _root.abilInstantKill += 30;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _root.allyExp = 0;
        _root.allyCoin = 0;
        _root.allyPixel = 0;
        _root.allyDropRate = 0;
        _root.allySpawnRate = 0;
        _root.allyAttack = 0;
        _root.allyDefense = 0;
        _root.allyHP = 0;
        _root.allyMP = 0;
        _root.allyAccuracy = 0;
        _root.allyEvasion = 0;
        _root.allyEquipAttack = 0;
        _root.allyEquipDefense = 0;
        _root.allyAttackSpeed = 0;
        _root.allyAttackSpeedRaw = 0;
        _root.allyMastery = 0;
        _root.allyDamageTaken = 0;
        _root.allyHitChance = 0;
        _root.allyDodgeChance = 0;
        _root.allyCriticalChance = 0;
        _root.allyCriticalDamage = 0;
        _root.allyReflect = 0;
        _root.allyMagicResist = 0;
        _root.allyDoubleHit = 0;
        _root.allyInstantKill = 0;
        _root.allyBossDamage = 0;
        _root.allyNonBossDamage = 0;
        _root.allyIgnoreDefense = 0;
        _root.allyNegateEffect = 0;
        _root.allyPotionEfficiency = 0;
        if (isNaN(_root.save.arenaAllyUpgrade[_root.save.arenaAlly])) {
          _root.save.arenaAllyUpgrade[_root.save.arenaAlly] = 0;
        }
        _root.allyPassive1 = _root.enemyList[_root.save.arenaAlly].allyPassive1;
        _root.allyPassive1X = Math.floor(_root.enemyList[_root.save.arenaAlly].allyPassive1X * (1 + _root.save.arenaAllyUpgrade[_root.save.arenaAlly] / 10));
        _root.allyPassive2 = _root.enemyList[_root.save.arenaAlly].allyPassive2;
        _root.allyPassive2X = Math.floor(_root.enemyList[_root.save.arenaAlly].allyPassive2X * (1 + _root.save.arenaAllyUpgrade[_root.save.arenaAlly] / 10));
        _root.allyPassive3 = _root.enemyList[_root.save.arenaAlly].allyPassive3;
        _root.allyPassive3X = _root.enemyList[_root.save.arenaAlly].allyPassive3X;
        if (_root.save.arenaAllyUpgrade[_root.save.arenaAlly] < 15) {
          _root.allyPassive3X = 0;
        }
        _root.allyActive1 = _root.enemyList[_root.save.arenaAlly].allyActive1;
        _root.allyActive1X = _root.enemyList[_root.save.arenaAlly].allyActive1X;
        _root.allyActive1Y = _root.enemyList[_root.save.arenaAlly].allyActive1Y;
        _root.allyActive1Z = _root.enemyList[_root.save.arenaAlly].allyActive1Z;
        _root.allyActive2 = _root.enemyList[_root.save.arenaAlly].allyActive2;
        _root.allyActive2X = _root.enemyList[_root.save.arenaAlly].allyActive2X;
        _root.allyActive2Y = _root.enemyList[_root.save.arenaAlly].allyActive2Y;
        _root.allyActive2Z = _root.enemyList[_root.save.arenaAlly].allyActive2Z;
        _root.allyActive3 = _root.enemyList[_root.save.arenaAlly].allyActive3;
        _root.allyActive3X = _root.enemyList[_root.save.arenaAlly].allyActive3X;
        _root.allyActive3Y = _root.enemyList[_root.save.arenaAlly].allyActive3Y;
        _root.allyActive3Z = _root.enemyList[_root.save.arenaAlly].allyActive3Z;
        i = 1;
        while (i <= 3) {
          if (_root['allyPassive' + i] == 'Reward') {
            _root.allyExp += _root['allyPassive' + i + 'X'];
            _root.allyCoin += _root['allyPassive' + i + 'X'];
            _root.allyPixel += _root['allyPassive' + i + 'X'];
          } else {
            if (_root['allyPassive' + i] == 'EXP') {
              _root.allyExp += _root['allyPassive' + i + 'X'];
            } else {
              if (_root['allyPassive' + i] == 'Coin') {
                _root.allyCoin += _root['allyPassive' + i + 'X'];
              } else {
                if (_root['allyPassive' + i] == 'Pixel') {
                  _root.allyPixel += _root['allyPassive' + i + 'X'];
                } else {
                  if (_root['allyPassive' + i] == 'Reflect') {
                    _root.allyReflect += _root['allyPassive' + i + 'X'];
                  } else {
                    if (_root['allyPassive' + i] == 'Drop Rate') {
                      _root.allyDropRate += _root['allyPassive' + i + 'X'];
                    } else {
                      if (_root['allyPassive' + i] == 'Spawn Rate') {
                        _root.allySpawnRate += _root['allyPassive' + i + 'X'];
                      } else {
                        if (_root['allyPassive' + i] == 'Attack %') {
                          _root.allyAttack += _root['allyPassive' + i + 'X'];
                        } else {
                          if (_root['allyPassive' + i] == 'Defense %') {
                            _root.allyDefense += _root['allyPassive' + i + 'X'];
                          } else {
                            if (_root['allyPassive' + i] == 'MaxHP %') {
                              _root.allyHP += _root['allyPassive' + i + 'X'];
                            } else {
                              if (_root['allyPassive' + i] == 'MaxMP %') {
                                _root.allyMP += _root['allyPassive' + i + 'X'];
                              } else {
                                if (_root['allyPassive' + i] == 'Accuracy %') {
                                  _root.allyAccuracy += _root['allyPassive' + i + 'X'];
                                } else {
                                  if (_root['allyPassive' + i] == 'Evasion %') {
                                    _root.allyEvasion += _root['allyPassive' + i + 'X'];
                                  } else {
                                    if (_root['allyPassive' + i] == 'Equipment Attack') {
                                      _root.allyEquipAttack += _root['allyPassive' + i + 'X'];
                                    } else {
                                      if (_root['allyPassive' + i] == 'Equipment Defense') {
                                        _root.allyEquipDefense += _root['allyPassive' + i + 'X'];
                                      } else {
                                        if (_root['allyPassive' + i] == 'Attack Speed') {
                                          _root.allyAttackSpeedRaw += _root['allyPassive' + i + 'X'];
                                        } else {
                                          if (_root['allyPassive' + i] == 'Attack Speed %') {
                                            _root.allyAttackSpeed += _root['allyPassive' + i + 'X'];
                                          } else {
                                            if (_root['allyPassive' + i] == 'Mastery') {
                                              _root.allyMastery += _root['allyPassive' + i + 'X'];
                                            } else {
                                              if (_root['allyPassive' + i] == 'Resist') {
                                                _root.allyDamageTaken += _root['allyPassive' + i + 'X'];
                                              } else {
                                                if (_root['allyPassive' + i] == 'Hit Chance') {
                                                  _root.allyHitChance += _root['allyPassive' + i + 'X'];
                                                } else {
                                                  if (_root['allyPassive' + i] == 'Dodge Chance') {
                                                    _root.allyDodgeChance += _root['allyPassive' + i + 'X'];
                                                  } else {
                                                    if (_root['allyPassive' + i] == 'Critical Chance') {
                                                      _root.allyCriticalChance += _root['allyPassive' + i + 'X'];
                                                    } else {
                                                      if (_root['allyPassive' + i] == 'Critical Damage') {
                                                        _root.allyCriticalDamage += _root['allyPassive' + i + 'X'];
                                                      } else {
                                                        if (_root['allyPassive' + i] == 'Magic Resist') {
                                                          _root.allyMagicResist += _root['allyPassive' + i + 'X'];
                                                        } else {
                                                          if (_root['allyPassive' + i] == 'Double Hit Chance') {
                                                            _root.allyDoubleHit += _root['allyPassive' + i + 'X'];
                                                          } else {
                                                            if (_root['allyPassive' + i] == 'Instant Kill') {
                                                              _root.allyInstantKill += _root['allyPassive' + i + 'X'];
                                                            } else {
                                                              if (_root['allyPassive' + i] == 'Boss Damage') {
                                                                _root.allyBossDamage += _root['allyPassive' + i + 'X'];
                                                              } else {
                                                                if (_root['allyPassive' + i] == 'Non-Boss Damage') {
                                                                  _root.allyNonBossDamage += _root['allyPassive' + i + 'X'];
                                                                } else {
                                                                  if (_root['allyPassive' + i] == 'Damage') {
                                                                    _root.allyNonBossDamage += _root['allyPassive' + i + 'X'];
                                                                    _root.allyBossDamage += _root['allyPassive' + i + 'X'];
                                                                  } else {
                                                                    if (_root['allyPassive' + i] == 'Ignore Defense') {
                                                                      _root.allyIgnoreDefense += _root['allyPassive' + i + 'X'];
                                                                    } else {
                                                                      if (_root['allyPassive' + i] == 'Potion Efficiency') {
                                                                        _root.allyPotionEfficiency += _root['allyPassive' + i + 'X'];
                                                                      } else {
                                                                        if (_root['allyPassive' + i] == 'Negate Effect') {
                                                                          _root.allyNegateEffect += _root['allyPassive' + i + 'X'];
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++i;
        }
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
          _root.spiritCount += 1;
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
            _root.save.inventorySpirit[_root.save.arenaWeapon] = false;
          }
        }
        if (_root.save.inventorySpirit[_root.save.arenaHat] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaShirt] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaGloves] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaPants] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaShoes] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaSkin] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaMedal] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaPendant] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaEarring] == true) {
          _root.spiritCount += 1;
        }
        if (_root.save.inventorySpirit[_root.save.arenaTrinket] == true) {
          _root.spiritCount += 1;
        }
        _root.curseCount = 0;
        if (_root.save.inventoryName[_root.save.arenaWeapon].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaHat].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaShirt].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaGloves].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaPants].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaShoes].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryName[_root.save.arenaSkin].indexOf('(Cursed)') != -1) {
          _root.curseCount += 1;
        }
        if (_root.save.inventoryExist[_root.save.arenaWeapon] != 1) {
          _root.save.arenaWeapon = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaHat] != 1) {
          _root.save.arenaHat = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShirt] != 1) {
          _root.save.arenaShirt = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaGloves] != 1) {
          _root.save.arenaGloves = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaPants] != 1) {
          _root.save.arenaPants = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaShoes] != 1) {
          _root.save.arenaShoes = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaSkin] != 1) {
          _root.save.arenaSkin = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaMedal] != 1) {
          _root.save.arenaMedal = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaPendant] != 1) {
          _root.save.arenaPendant = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaEarring] != 1) {
          _root.save.arenaEarring = 0;
        }
        if (_root.save.inventoryExist[_root.save.arenaTrinket] != 1) {
          _root.save.arenaTrinket = 0;
        }
      }

      function travel(destination) {
        if (enemy.enemyID == 0) {
          _root.actiondescription = '';
          _root.save.arenaZone = destination;
          _root.arenaCombo = 0;
          enemy.approach = 10;
          _root.save.arenaZoneFound[destination] = 1;
          if (_root.save.arenaZone == 7 || _root.save.arenaZone == 24 || _root.save.arenaZone == 52 || _root.save.arenaZone == 54 || _root.save.arenaZone == 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 61 || _root.save.arenaZone == 68 || _root.save.arenaZone == 78 || _root.save.arenaZone == 82) {
            if (cgtHP._currentframe != 2) {
              cgtHP.gotoAndStop(2);
            }
          } else {
            if (cgtHP._currentframe != 1) {
              cgtHP.gotoAndStop(1);
            }
          }
        }
      }

      function checkStat() {
        if (_root.saveid == 24 && _root.save.arenaZone > 13) {
          _root.save.arenaZone = 0;
        }
        _root.worstMoon = false;
        _root.apocalypse = false;
        if (_root.save.arenaAlly == 1) {
          _root.worstMoon = true;
        }
        if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Worst Moon Gem') {
          if (_root.worstMoon == true) {
            _root.apocalypse = true;
          } else {
            _root.worstMoon = true;
          }
        }
        if (_root.saveid == 26) {
          _root.apocalypse = true;
          _root.worstMoon = true;
        }
        if (_root.save.arenaTurnBased == true && _root.save.autoFight == false && _root.save.inventoryName[_root.save.arenaWeapon] != 'Dark Ruler' && _root.save.inventoryName[_root.save.arenaWeapon] != 'CHAOS AURA' && _root.save.arenaZone != 24 && _root.save.arenaZone != 34 && _root.save.arenaZone != 35) {
          _root.turnBased = true;
        } else {
          _root.turnBased = false;
        }
        _root.autoExp = 0;
        _root.manaLeech = 0;
        _root.lootMagnet = false;
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
          _root.lootMagnet = true;
        }
        if (_root.save.arenaBuffType == 9 && _root.arenaPotionBlock <= 0) {
          _root.lootMagnet = true;
        }
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 69) {
          _root.lootMagnet = true;
        }
        if (_root.save.inventoryName[_root.save.arenaPendant] == 'GIGA PENDANT' && _root.save.inventoryName[_root.save.arenaEarring] == 'GIGA EARRINGS') {
          _root.lootMagnet = true;
        }
        if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Constancy' && _root.save.inventoryLevel[_root.save.arenaTrinket] == 500) {
          _root.lootMagnet = true;
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' && _root.save.inventoryName[_root.save.arenaHat] == 'Ultimate Hat' && _root.save.inventoryName[_root.save.arenaShirt] == 'Ultimate Shirt' && _root.save.inventoryName[_root.save.arenaGloves] == 'Ultimate Gloves' && _root.save.inventoryName[_root.save.arenaPants] == 'Ultimate Pants' && _root.save.inventoryName[_root.save.arenaShoes] == 'Ultimate Shoes' && _root.save.inventoryName[_root.save.arenaPendant] == 'Ultimate Pendant' && _root.save.inventoryName[_root.save.arenaEarring] == 'Ultimate Earrings' && (_root.save.inventoryName[_root.save.arenaTrinket] == 'Ultimate Trinket' || _root.apocalypse == true)) {
          _root.lootMagnet = true;
          _root.manaLeech = _root.save.banned + _root.save.bannedHard * 2 + _root.save.bannedImpossible * 4;
          if (_root.manaLeech > 3000) {
            _root.manaLeech = 3000;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon' && _root.save.inventoryName[_root.save.arenaHat] == 'Reincarnation Hat' && _root.save.inventoryName[_root.save.arenaShirt] == 'Reincarnation Shirt' && _root.save.inventoryName[_root.save.arenaGloves] == 'Reincarnation Gloves' && _root.save.inventoryName[_root.save.arenaPants] == 'Reincarnation Pants' && _root.save.inventoryName[_root.save.arenaShoes] == 'Reincarnation Shoes' && _root.save.inventoryName[_root.save.arenaPendant] == 'Reincarnation Pendant' && _root.save.inventoryName[_root.save.arenaEarring] == 'Reincarnation Earrings' && (_root.save.inventoryName[_root.save.arenaTrinket] == 'Reincarnation Trinket' || _root.apocalypse == true)) {
          _root.lootMagnet = true;
          _root.autoExp = _root.save.bannedB;
        }
        _root.monsterMagnet = false;
        if (_root.save.arenaBuffType == 10 && _root.arenaPotionBlock <= 0) {
          _root.monsterMagnet = true;
        }
        _root.robaconActive = false;
        if (_root.save.inventoryType[400] == 'Weapon' && _root.save.inventoryReqRank[400] <= _root.save.robaconLevel && _root.save.robaconBacon > 0 && _root.save.inventoryExpiry[400] >= _root.systemtimenow) {
          if (_root.save.arenaZone != 44 && _root.save.arenaZone != 47) {
            _root.robaconActive = true;
          }
        }
        _root.spiritCount = 0;
        subFunction1();
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 3) {
          _root.save.arenaWeapon = 0;
          _root.checkSetBonus();
        }
        if (_root.save.arenaSubWeapon != 0) {
          if (_root.save.arenaWeapon == 0) {
            _root.save.arenaSubWeapon = 0;
          }
          if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 280 || _root.save.inventoryFrame[_root.save.arenaSubWeapon] == 281) {
            if (_root.save.inventorySubtype[_root.save.arenaWeapon] != 'Bow' && _root.save.inventorySubtype[_root.save.arenaWeapon] != 'Crossbow') {
              _root.save.arenaSubWeapon = 0;
            }
          }
          if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 282) {
            if (_root.save.inventorySubtype[_root.save.arenaWeapon] != 'Gun') {
              _root.save.arenaSubWeapon = 0;
            }
          }
          if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 283) {
            if (_root.save.inventorySubtype[_root.save.arenaWeapon] != 'Claw') {
              _root.save.arenaSubWeapon = 0;
            }
          }
          if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 284 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 291) {
            if (_root.save.inventoryRange[_root.save.arenaWeapon] == true || _root.save.inventoryName[_root.save.arenaWeapon] == 'Ultimate Weapon' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Reincarnation Weapon') {
              _root.save.arenaSubWeapon = 0;
            }
          }
          if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 351 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 358) {
            if (_root.save.inventorySubtype[_root.save.arenaWeapon] != 'Wand' && _root.save.inventorySubtype[_root.save.arenaWeapon] != 'Staff') {
              _root.save.arenaSubWeapon = 0;
            }
          }
          _root.checkSetBonus();
        }
        if (_root.save.inventoryExp[400] >= _root.save.inventoryExpTNL[400] && _root.save.inventoryLevel[400] < _root.save.inventoryMaxLevel[400]) {
          _root.save.inventoryExp[400] = 0;
          _root.save.inventoryLevel[400] += 1;
          if (_root.save.inventoryName[400] == 'Pirate Sword' && _root.save.inventoryLevel[400] == 300) {
            _root.save.inventorySpeed[400] += 3;
            if (_root.save.vegetarianMode == true) {
              _root.save.inventoryDesc[400] = 'Congratulations! You have mastered the pirate language (for this particular sword, at least), and as a result, you can attack twice as fast with this Pirate Sword equipped!\n\nActually, you just let Robroccoli do the job for you, but the same still applies.';
            } else {
              _root.save.inventoryDesc[400] = 'Congratulations! You have mastered the pirate language (for this particular sword, at least), and as a result, you can attack twice as fast with this Pirate Sword equipped!\n\nActually, you just let Robacon do the job for you, but the same still applies.';
            }
          }
          if (_root.save.inventoryAttack[400] > 0) {
            statToGain = 4 + random(3);
            _root.save.inventoryAttack[400] += statToGain;
            _root.save.inventoryBonusPow[400] += statToGain;
            if (_root.save.inventoryLevel[400] % 2 == 0) {
              _root.save.inventoryDefense[400] += 2;
              _root.save.inventoryBonusPow[400] += 2;
            }
            if (_root.save.inventoryLevel[400] % 3 == 0) {
              _root.save.inventoryDexterity[400] += 1;
              _root.save.inventoryBonusPow[400] += 10;
            }
            if (_root.save.inventoryLevel[400] % 4 == 0) {
              _root.save.inventoryHealth[400] += 1;
              _root.save.inventoryBonusPow[400] += 5;
            }
            if (_root.save.inventoryLevel[400] % 5 == 0) {
              _root.save.inventoryCrit[400] += 1;
              _root.save.inventoryBonusPow[400] += 10;
            }
          } else {
            _root.save.inventorySpeed[400] += 1;
            _root.save.inventoryBonusPow[400] += 10;
            if (_root.save.inventoryLevel[400] % 2 == 0) {
              _root.save.inventoryDefense[400] += 2;
              _root.save.inventoryBonusPow[400] += 2;
            }
            if (_root.save.inventoryLevel[400] % 3 == 0) {
              _root.save.inventoryDexterity[400] += 1;
              _root.save.inventoryBonusPow[400] += 10;
            }
            if (_root.save.inventoryLevel[400] % 4 == 0) {
              _root.save.inventoryHealth[400] += 1;
              _root.save.inventoryBonusPow[400] += 5;
            }
            if (_root.save.inventoryLevel[400] % 5 == 0) {
              _root.save.inventoryCrit[400] += 1;
              _root.save.inventoryBonusPow[400] += 10;
            }
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[400] + '] is now Level ' + _root.save.inventoryLevel[400] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaWeapon] >= _root.save.inventoryExpTNL[_root.save.arenaWeapon] && _root.save.inventoryLevel[_root.save.arenaWeapon] < _root.save.inventoryMaxLevel[_root.save.arenaWeapon]) {
          _root.save.inventoryExp[_root.save.arenaWeapon] = 0;
          _root.save.inventoryLevel[_root.save.arenaWeapon] += 1;
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Pirate Sword' && _root.save.inventoryLevel[_root.save.arenaWeapon] == 300) {
            _root.save.inventorySpeed[_root.save.arenaWeapon] += 3;
            _root.save.inventoryDesc[_root.save.arenaWeapon] = 'Congratulations! You have mastered the pirate language (for this particular sword, at least), and as a result, you can attack twice as fast with this Pirate Sword equipped!';
          }
          if (_root.save.inventoryAttack[_root.save.arenaWeapon] > 0) {
            statToGain = 4 + random(3);
            _root.save.inventoryAttack[_root.save.arenaWeapon] += statToGain;
            _root.save.inventoryBonusPow[_root.save.arenaWeapon] += statToGain;
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 2 == 0) {
              _root.save.inventoryDefense[_root.save.arenaWeapon] += 2;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 2;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 3 == 0) {
              _root.save.inventoryDexterity[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 4 == 0) {
              _root.save.inventoryHealth[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 5 == 0) {
              _root.save.inventoryCrit[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
          } else {
            _root.save.inventorySpeed[_root.save.arenaWeapon] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 2 == 0) {
              _root.save.inventoryDefense[_root.save.arenaWeapon] += 2;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 2;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 3 == 0) {
              _root.save.inventoryDexterity[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 4 == 0) {
              _root.save.inventoryHealth[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaWeapon] % 5 == 0) {
              _root.save.inventoryCrit[_root.save.arenaWeapon] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaWeapon] += 10;
            }
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaWeapon] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaWeapon] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaHat] >= _root.save.inventoryExpTNL[_root.save.arenaHat] && _root.save.inventoryLevel[_root.save.arenaHat] < _root.save.inventoryMaxLevel[_root.save.arenaHat]) {
          _root.save.inventoryExp[_root.save.arenaHat] = 0;
          _root.save.inventoryLevel[_root.save.arenaHat] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaHat] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaHat] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaHat] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaHat] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaHat] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaHat] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaHat] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaHat] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaHat] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaHat] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaHat] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaHat] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaHat] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaHat] += 10;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaHat] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaHat] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaShirt] >= _root.save.inventoryExpTNL[_root.save.arenaShirt] && _root.save.inventoryLevel[_root.save.arenaShirt] < _root.save.inventoryMaxLevel[_root.save.arenaShirt]) {
          _root.save.inventoryExp[_root.save.arenaShirt] = 0;
          _root.save.inventoryLevel[_root.save.arenaShirt] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaShirt] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaShirt] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaShirt] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaShirt] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShirt] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShirt] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaShirt] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShirt] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShirt] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaShirt] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShirt] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShirt] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaShirt] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShirt] += 10;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaShirt] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaShirt] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaGloves] >= _root.save.inventoryExpTNL[_root.save.arenaGloves] && _root.save.inventoryLevel[_root.save.arenaGloves] < _root.save.inventoryMaxLevel[_root.save.arenaGloves]) {
          _root.save.inventoryExp[_root.save.arenaGloves] = 0;
          _root.save.inventoryLevel[_root.save.arenaGloves] += 1;
          if (_root.save.inventoryFrame[_root.save.arenaGloves] >= 141 && _root.save.inventoryFrame[_root.save.arenaGloves] <= 145) {
            _root.save.inventoryFrame[_root.save.arenaGloves] -= 1;
            _root.save.inventorySpeed[_root.save.arenaGloves] += 2;
            _root.save.inventoryBonusPow[_root.save.arenaGloves] += 80;
            if (_root.save.inventoryFrame[_root.save.arenaGloves] == 140) {
              _root.save.inventoryName[_root.save.arenaGloves] = 'Fairy Godmother Gloves';
              _root.save.inventorySet[_root.save.arenaGloves] = _root.checkArenaSet('Fairy Godmother Gloves');
              _root.save.inventoryNoFuse[_root.save.arenaGloves] = false;
              _root.save.inventoryEnhance[_root.save.arenaGloves] = -2;
              _root.save.inventoryAttack[_root.save.arenaGloves] += 60;
              _root.save.inventorySpeed[_root.save.arenaGloves] += 4;
              _root.save.inventoryDefense[_root.save.arenaGloves] += 160;
              _root.save.inventoryCrit[_root.save.arenaGloves] += 20;
              _root.save.inventoryDexterity[_root.save.arenaGloves] += 20;
              _root.save.inventoryHealth[_root.save.arenaGloves] += 20;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 1320;
            }
            _root.toCheck = true;
            _root.gCheck = true;
          }
          if (_root.save.inventoryFrame[_root.save.arenaGloves] >= 153 && _root.save.inventoryFrame[_root.save.arenaGloves] <= 154) {
            _root.save.inventoryFrame[_root.save.arenaGloves] -= 1;
            _root.save.inventoryAttack[_root.save.arenaGloves] += 50;
            _root.save.inventoryBonusPow[_root.save.arenaGloves] += 200;
            if (_root.save.inventoryFrame[_root.save.arenaGloves] == 152) {
              _root.save.inventoryName[_root.save.arenaGloves] = 'CHAOS GLOVES';
              _root.save.inventorySet[_root.save.arenaGloves] = _root.checkArenaSet('CHAOS GLOVES');
              _root.save.inventoryNoFuse[_root.save.arenaGloves] = false;
              _root.save.inventoryEnhance[_root.save.arenaGloves] = 0;
              _root.save.inventoryAttack[_root.save.arenaGloves] += 100;
              _root.save.inventoryCrit[_root.save.arenaGloves] += 50;
              _root.save.inventoryHealth[_root.save.arenaGloves] += 50;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 1400;
            }
            _root.toCheck = true;
            _root.gCheck = true;
          } else {
            statToGain = 2 + random(2);
            _root.save.inventoryDefense[_root.save.arenaGloves] += statToGain;
            _root.save.inventoryBonusPow[_root.save.arenaGloves] += statToGain;
            if (_root.save.inventoryLevel[_root.save.arenaGloves] % 2 == 0) {
              _root.save.inventoryAttack[_root.save.arenaGloves] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 4;
            }
            if (_root.save.inventoryLevel[_root.save.arenaGloves] % 3 == 0) {
              _root.save.inventoryDexterity[_root.save.arenaGloves] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaGloves] % 4 == 0) {
              _root.save.inventoryHealth[_root.save.arenaGloves] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 10;
            }
            if (_root.save.inventoryLevel[_root.save.arenaGloves] % 5 == 0) {
              _root.save.inventoryCrit[_root.save.arenaGloves] += 1;
              _root.save.inventoryBonusPow[_root.save.arenaGloves] += 10;
            }
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaGloves] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaGloves] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaPants] >= _root.save.inventoryExpTNL[_root.save.arenaPants] && _root.save.inventoryLevel[_root.save.arenaPants] < _root.save.inventoryMaxLevel[_root.save.arenaPants]) {
          _root.save.inventoryExp[_root.save.arenaPants] = 0;
          _root.save.inventoryLevel[_root.save.arenaPants] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaPants] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaPants] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaPants] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaPants] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPants] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPants] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaPants] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPants] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPants] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaPants] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPants] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPants] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaPants] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPants] += 10;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaPants] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaPants] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaShoes] >= _root.save.inventoryExpTNL[_root.save.arenaShoes] && _root.save.inventoryLevel[_root.save.arenaShoes] < _root.save.inventoryMaxLevel[_root.save.arenaShoes]) {
          _root.save.inventoryExp[_root.save.arenaShoes] = 0;
          _root.save.inventoryLevel[_root.save.arenaShoes] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaShoes] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaShoes] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaShoes] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaShoes] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShoes] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShoes] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaShoes] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShoes] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShoes] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaShoes] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShoes] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaShoes] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaShoes] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaShoes] += 10;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaShoes] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaShoes] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaSkin] >= _root.save.inventoryExpTNL[_root.save.arenaSkin] && _root.save.inventoryLevel[_root.save.arenaSkin] < _root.save.inventoryMaxLevel[_root.save.arenaSkin]) {
          _root.save.inventoryExp[_root.save.arenaSkin] = 0;
          _root.save.inventoryLevel[_root.save.arenaSkin] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaSkin] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaSkin] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaSkin] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaSkin] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaSkin] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaSkin] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaSkin] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaSkin] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaSkin] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaSkin] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaSkin] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaSkin] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaSkin] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaSkin] += 10;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaSkin] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaSkin] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaMedal] >= _root.save.inventoryExpTNL[_root.save.arenaMedal] && _root.save.inventoryLevel[_root.save.arenaMedal] < _root.save.inventoryMaxLevel[_root.save.arenaMedal]) {
          _root.save.inventoryExp[_root.save.arenaMedal] = 0;
          _root.save.inventoryLevel[_root.save.arenaMedal] += 1;
          _root.save.inventoryReqRank[_root.save.arenaMedal] = Math.round(_root.save.inventoryReqRank[_root.save.arenaMedal] / 10 + 1) * 10;
          if (_root.save.inventoryReqRank[_root.save.arenaMedal] > 500) {
            _root.save.inventoryReqRank[_root.save.arenaMedal] = 500;
          }
          _root.save.inventoryCrit[_root.save.arenaMedal] += 5;
          _root.save.inventoryDexterity[_root.save.arenaMedal] += 5;
          _root.save.inventoryHealth[_root.save.arenaMedal] += 5;
          _root.save.inventoryBonusPow[_root.save.arenaMedal] += 150;
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaMedal] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaMedal] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaPendant] >= _root.save.inventoryExpTNL[_root.save.arenaPendant] && _root.save.inventoryLevel[_root.save.arenaPendant] < _root.save.inventoryMaxLevel[_root.save.arenaPendant]) {
          _root.save.inventoryExp[_root.save.arenaPendant] = 0;
          _root.save.inventoryLevel[_root.save.arenaPendant] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaPendant] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaPendant] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaPendant] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaPendant] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPendant] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPendant] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaPendant] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPendant] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPendant] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaPendant] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPendant] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPendant] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaPendant] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPendant] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaPendant] % 6 == 0) {
            _root.save.inventorySpeed[_root.save.arenaPendant] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaPendant] += 40;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaPendant] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaPendant] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaEarring] >= _root.save.inventoryExpTNL[_root.save.arenaEarring] && _root.save.inventoryLevel[_root.save.arenaEarring] < _root.save.inventoryMaxLevel[_root.save.arenaEarring]) {
          _root.save.inventoryExp[_root.save.arenaEarring] = 0;
          _root.save.inventoryLevel[_root.save.arenaEarring] += 1;
          statToGain = 2 + random(2);
          _root.save.inventoryDefense[_root.save.arenaEarring] += statToGain;
          _root.save.inventoryBonusPow[_root.save.arenaEarring] += statToGain;
          if (_root.save.inventoryLevel[_root.save.arenaEarring] % 2 == 0) {
            _root.save.inventoryAttack[_root.save.arenaEarring] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaEarring] += 4;
          }
          if (_root.save.inventoryLevel[_root.save.arenaEarring] % 3 == 0) {
            _root.save.inventoryDexterity[_root.save.arenaEarring] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaEarring] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaEarring] % 4 == 0) {
            _root.save.inventoryHealth[_root.save.arenaEarring] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaEarring] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaEarring] % 5 == 0) {
            _root.save.inventoryCrit[_root.save.arenaEarring] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaEarring] += 10;
          }
          if (_root.save.inventoryLevel[_root.save.arenaEarring] % 6 == 0) {
            _root.save.inventorySpeed[_root.save.arenaEarring] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaEarring] += 40;
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaEarring] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaEarring] + '.');
        }
        if (_root.save.inventoryExp[_root.save.arenaTrinket] >= _root.save.inventoryExpTNL[_root.save.arenaTrinket] && _root.save.inventoryLevel[_root.save.arenaTrinket] < _root.save.inventoryMaxLevel[_root.save.arenaTrinket]) {
          _root.save.inventoryExp[_root.save.arenaTrinket] = 0;
          _root.save.inventoryLevel[_root.save.arenaTrinket] += 1;
          if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Constancy') {
            if (_root.save.inventoryLevel[_root.save.arenaTrinket] % 10 == 0) {
              _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 10;
              _root.save.inventoryUnob[_root.save.arenaTrinket] += 1;
            }
            if (_root.save.inventoryReqRank[_root.save.arenaTrinket] == 500) {
              _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 250;
              _root.save.inventoryUnob[_root.save.arenaTrinket] = 60;
            }
            _root.save.inventoryAttack[_root.save.arenaTrinket] += 1;
            _root.save.inventoryDefense[_root.save.arenaTrinket] += 1;
            _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 5;
            if (_root.save.inventoryLevel[_root.save.arenaTrinket] == 500) {
              _root.save.inventoryAttack[_root.save.arenaTrinket] = 1000;
              _root.save.inventoryDefense[_root.save.arenaTrinket] = 1000;
              _root.save.inventoryCrit[_root.save.arenaTrinket] = 100;
              _root.save.inventoryDexterity[_root.save.arenaTrinket] = 100;
              _root.save.inventoryHealth[_root.save.arenaTrinket] = 100;
              _root.save.inventoryFrame[_root.save.arenaTrinket] = 8;
              _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 2500;
            }
          } else {
            if (_root.save.inventoryLevel[_root.save.arenaTrinket] % 10 == 0) {
              _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 10;
              _root.save.inventoryUnob[_root.save.arenaTrinket] += 1;
            }
            if (_root.save.inventoryReqRank[_root.save.arenaTrinket] == 500) {
              _root.save.inventoryBonusPow[_root.save.arenaTrinket] += 250;
              _root.save.inventoryUnob[_root.save.arenaTrinket] = 60;
            }
          }
          _root.dispNews(62, 'Item Level Up! [' + _root.save.inventoryName[_root.save.arenaTrinket] + '] is now Level ' + _root.save.inventoryLevel[_root.save.arenaTrinket] + '.');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaHat] < _root.systemtimenow) {
          _root.save.arenaHat = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Hat expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaShirt] < _root.systemtimenow) {
          _root.save.arenaShirt = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Shirt expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaGloves] < _root.systemtimenow) {
          _root.save.arenaGloves = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Gloves expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaPants] < _root.systemtimenow) {
          _root.save.arenaPants = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Pants expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaShoes] < _root.systemtimenow) {
          _root.save.arenaShoes = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Shoes expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaSkin] < _root.systemtimenow) {
          _root.save.arenaSkin = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Skin expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaWeapon] < _root.systemtimenow) {
          _root.save.arenaWeapon = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Weapon expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaSubWeapon] < _root.systemtimenow) {
          _root.save.arenaSubWeapon = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Secondary Weapon expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaMedal] < _root.systemtimenow) {
          _root.save.arenaMedal = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Medal expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaPendant] < _root.systemtimenow) {
          _root.save.arenaPendant = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Pendant expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaEarring] < _root.systemtimenow) {
          _root.save.arenaEarring = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Earring expired!');
        }
        if (_root.save.inventoryExpiry[_root.save.arenaTrinket] < _root.systemtimenow) {
          _root.save.arenaTrinket = 0;
          _root.checkSetBonus();
          _root.gCheck = true;
          _root.dispNews(63, 'Trinket expired!');
        }
        itemTier = new Array();
        itemBonus = new Array();
        itemAbility = new Array();
        itemMoreBonus = new Array();
        itemTier[1] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaWeapon] / 10);
        itemTier[2] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaHat] / 10);
        itemTier[3] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaShirt] / 10);
        itemTier[4] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaGloves] / 10);
        itemTier[5] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaPants] / 10);
        itemTier[6] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaShoes] / 10);
        itemTier[7] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaMedal] / 10);
        itemTier[8] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaPendant] / 10);
        itemTier[9] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaEarring] / 10);
        itemTier[10] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaTrinket] / 10);
        itemTier[11] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaSkin] / 10);
        itemTier[12] = Math.ceil(_root.save.inventoryReqRank[_root.save.arenaSubWeapon] / 10);
        itemTier[13] = Math.ceil(_root.save.inventoryReqRank[400] / 10);
        itemTier[1] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaWeapon]);
        itemTier[2] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaHat]);
        itemTier[3] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaShirt]);
        itemTier[4] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaGloves]);
        itemTier[5] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaPants]);
        itemTier[6] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaShoes]);
        itemTier[7] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaMedal]);
        itemTier[8] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaPendant]);
        itemTier[9] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaEarring]);
        itemTier[10] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaTrinket]);
        itemTier[11] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaSkin]);
        itemTier[12] += Math.ceil(_root.save.inventoryUnob[_root.save.arenaSubWeapon]);
        itemTier[13] += Math.ceil(_root.save.inventoryUnob[400]);
        i = 1;
        while (i <= 13) {
          if (i == 1 && _root.save.arenaSkill[59] > 0) {
            itemTier[i] += Math.floor(_root.save.arenaSkill[59] / 5);
          }
          if (i == 12 && _root.save.arenaSkill[59] > 0) {
            itemTier[i] += Math.floor(_root.save.arenaSkill[59] / 5);
          }
          if (i == 13 && _root.save.arenaSkill[59] > 0) {
            itemTier[i] += Math.floor(_root.save.arenaSkill[59] / 5);
          }
          if (isNaN(itemTier[i])) {
            itemTier[i] = 0;
          }
          if (_root.save.arenaZone >= 70 && _root.save.arenaZone <= 77) {
            itemTier[i] = 0;
          }
          if (_root.save.arenaZone == 82) {
            if (_root.save.arenaEvent == 1) {
              itemTier[i] = 0;
            }
          }
          ++i;
        }
        itemBonus[1] = _root.save.inventoryBonus[_root.save.arenaWeapon];
        itemBonus[2] = _root.save.inventoryBonus[_root.save.arenaHat];
        itemBonus[3] = _root.save.inventoryBonus[_root.save.arenaShirt];
        itemBonus[4] = _root.save.inventoryBonus[_root.save.arenaGloves];
        itemBonus[5] = _root.save.inventoryBonus[_root.save.arenaPants];
        itemBonus[6] = _root.save.inventoryBonus[_root.save.arenaShoes];
        itemBonus[7] = _root.save.inventoryBonus[_root.save.arenaMedal];
        itemBonus[8] = _root.save.inventoryBonus[_root.save.arenaPendant];
        itemBonus[9] = _root.save.inventoryBonus[_root.save.arenaEarring];
        itemBonus[10] = _root.save.inventoryBonus[_root.save.arenaTrinket];
        itemBonus[11] = _root.save.inventoryBonus[_root.save.arenaSkin];
        itemBonus[12] = _root.save.inventoryBonus[_root.save.arenaSubWeapon];
        itemBonus[13] = _root.save.inventoryBonus[400];
        itemAbility[1] = _root.save.inventoryAbility[_root.save.arenaWeapon];
        itemAbility[2] = _root.save.inventoryAbility[_root.save.arenaHat];
        itemAbility[3] = _root.save.inventoryAbility[_root.save.arenaShirt];
        itemAbility[4] = _root.save.inventoryAbility[_root.save.arenaGloves];
        itemAbility[5] = _root.save.inventoryAbility[_root.save.arenaPants];
        itemAbility[6] = _root.save.inventoryAbility[_root.save.arenaShoes];
        itemAbility[7] = _root.save.inventoryAbility[_root.save.arenaMedal];
        itemAbility[8] = _root.save.inventoryAbility[_root.save.arenaPendant];
        itemAbility[9] = _root.save.inventoryAbility[_root.save.arenaEarring];
        itemAbility[10] = _root.save.inventoryAbility[_root.save.arenaTrinket];
        itemAbility[11] = _root.save.inventoryAbility[_root.save.arenaSkin];
        itemAbility[12] = _root.save.inventoryAbility[_root.save.arenaSubWeapon];
        itemAbility[13] = _root.save.inventoryAbility[400];
        itemMoreBonus[1] = _root.save.inventoryMoreBonus[_root.save.arenaWeapon];
        itemMoreBonus[2] = _root.save.inventoryMoreBonus[_root.save.arenaHat];
        itemMoreBonus[3] = _root.save.inventoryMoreBonus[_root.save.arenaShirt];
        itemMoreBonus[4] = _root.save.inventoryMoreBonus[_root.save.arenaGloves];
        itemMoreBonus[5] = _root.save.inventoryMoreBonus[_root.save.arenaPants];
        itemMoreBonus[6] = _root.save.inventoryMoreBonus[_root.save.arenaShoes];
        itemMoreBonus[7] = _root.save.inventoryMoreBonus[_root.save.arenaMedal];
        itemMoreBonus[8] = _root.save.inventoryMoreBonus[_root.save.arenaPendant];
        itemMoreBonus[9] = _root.save.inventoryMoreBonus[_root.save.arenaEarring];
        itemMoreBonus[10] = _root.save.inventoryMoreBonus[_root.save.arenaTrinket];
        itemMoreBonus[11] = _root.save.inventoryMoreBonus[_root.save.arenaSkin];
        itemMoreBonus[12] = _root.save.inventoryMoreBonus[_root.save.arenaSubWeapon];
        itemMoreBonus[13] = _root.save.inventoryMoreBonus[400];
        TMI = 12;
        if (_root.robaconActive == true) {
          TMI = 13;
        }
        i = 1;
        while (i <= TMI) {
          if (itemMoreBonus[i] == 'Equipment Attack') {
            _root.abilIncEquipAttack += Math.ceil(0.1 * itemTier[i] * itemTier[i]);
          } else {
            if (itemMoreBonus[i] == 'Equipment Defense') {
              _root.abilIncEquipDefense += Math.ceil(0.15 * itemTier[i] * itemTier[i]);
            } else {
              if (itemMoreBonus[i] == 'Attack Power') {
                _root.abilIncAttack += Math.ceil(4 * itemTier[i] * itemTier[i]);
              } else {
                if (itemMoreBonus[i] == 'Defense Power') {
                  _root.abilIncDefense += Math.ceil(6 * itemTier[i] * itemTier[i]);
                } else {
                  if (itemMoreBonus[i] == 'MaxHP') {
                    _root.abilIncHP += Math.ceil(100 * itemTier[i] * itemTier[i]);
                  } else {
                    if (itemMoreBonus[i] == 'MaxMP') {
                      _root.abilIncMP += Math.ceil(100 * itemTier[i] * itemTier[i]);
                    } else {
                      if (itemMoreBonus[i] == 'Accuracy') {
                        _root.abilIncAccuracy += Math.ceil(4 * itemTier[i] * itemTier[i]);
                      } else {
                        if (itemMoreBonus[i] == 'Evasion') {
                          _root.abilIncEvasion += Math.ceil(6 * itemTier[i] * itemTier[i]);
                        } else {
                          if (itemMoreBonus[i] == 'EXP / Boss Kill') {
                            _root.abilIncExpBoss += Math.ceil(2 * itemTier[i] * itemTier[i]);
                          } else {
                            if (itemMoreBonus[i] == 'EXP / Rare Kill') {
                              _root.abilIncExpRare += Math.ceil(2 * itemTier[i] * itemTier[i]);
                            } else {
                              if (itemMoreBonus[i] == 'EXP / Epic Kill') {
                                _root.abilIncExpEpic += Math.ceil(10 * itemTier[i] * itemTier[i]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (itemBonus[i] == 'Reward') {
            _root.abilExp += Math.ceil(itemTier[i] * 0.25);
            _root.abilCoin += Math.ceil(itemTier[i] * 0.5);
            _root.abilPixel += Math.ceil(itemTier[i] * 0.5);
          } else {
            if (itemBonus[i] == 'EXP') {
              _root.abilExp += Math.ceil(itemTier[i] * 0.5);
            } else {
              if (itemBonus[i] == 'Coin') {
                _root.abilCoin += itemTier[i] * 1;
              } else {
                if (itemBonus[i] == 'Pixel') {
                  _root.abilPixel += itemTier[i] * 1;
                } else {
                  if (itemBonus[i] == 'Drop Rate') {
                    _root.abilDropRate += itemTier[i] * 1;
                  } else {
                    if (itemBonus[i] == 'Spawn Rate') {
                      _root.abilSpawnRate += Math.ceil(itemTier[i] * 0.2);
                    } else {
                      if (itemBonus[i] == 'Rare Monster Rate') {
                        _root.abilRareRate += Math.ceil(itemTier[i] * 2.5);
                      } else {
                        if (itemBonus[i] == 'Epic Monster Rate') {
                          _root.abilEpicRate += Math.ceil(itemTier[i] * 2.5);
                        } else {
                          if (itemBonus[i] == 'Fire Element') {
                            _root.abilResistFire += itemTier[i] * 1;
                            _root.abilPwnIce += itemTier[i] * 1;
                          } else {
                            if (itemBonus[i] == 'Ice Element') {
                              _root.abilResistIce += itemTier[i] * 1;
                              _root.abilPwnWind += itemTier[i] * 1;
                            } else {
                              if (itemBonus[i] == 'Wind Element') {
                                _root.abilResistWind += itemTier[i] * 1;
                                _root.abilPwnEarth += itemTier[i] * 1;
                              } else {
                                if (itemBonus[i] == 'Earth Element') {
                                  _root.abilResistEarth += itemTier[i] * 1;
                                  _root.abilPwnThunder += itemTier[i] * 1;
                                } else {
                                  if (itemBonus[i] == 'Thunder Element') {
                                    _root.abilResistThunder += itemTier[i] * 1;
                                    _root.abilPwnWater += itemTier[i] * 1;
                                  } else {
                                    if (itemBonus[i] == 'Water Element') {
                                      _root.abilResistWater += itemTier[i] * 1;
                                      _root.abilPwnFire += itemTier[i] * 1;
                                    } else {
                                      if (itemBonus[i] == 'Light Element') {
                                        _root.abilResistLight += itemTier[i] * 1;
                                        _root.abilPwnDark += itemTier[i] * 1;
                                      } else {
                                        if (itemBonus[i] == 'Dark Element') {
                                          _root.abilResistDark += itemTier[i] * 1;
                                          _root.abilPwnLight += itemTier[i] * 1;
                                        } else {
                                          if (itemBonus[i] == 'Ignore Epic Weapons') {
                                            _root.abilIgnoreEpicWeapon += itemTier[i] * 50000;
                                          } else {
                                            if (itemBonus[i] == 'Ignore Bonus Rocks') {
                                              _root.abilIgnoreBonusRock += itemTier[i] * 5000;
                                            } else {
                                              if (itemBonus[i] == 'Ignore Pendants') {
                                                _root.abilIgnorePendant += itemTier[i] * 5000;
                                              } else {
                                                if (itemBonus[i] == 'Ignore Finalizers') {
                                                  _root.abilIgnoreFinalizer += itemTier[i] * 25000;
                                                } else {
                                                  if (itemBonus[i] == 'Ignore Outfit Items') {
                                                    _root.abilIgnoreOutfit += itemTier[i] * 25000;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (itemAbility[i] == 'Attack') {
            _root.abilAttack += itemTier[i] * 1;
          } else {
            if (itemAbility[i] == 'Attack Speed') {
              _root.abilAttackSpeed += Math.ceil(itemTier[i] * 2);
            } else {
              if (itemAbility[i] == 'Ignore Defense') {
                _root.abilIgnoreDefense += itemTier[i] * 1;
              } else {
                if (itemAbility[i] == 'Mastery') {
                  _root.abilMastery += itemTier[i] * 1;
                } else {
                  if (itemAbility[i] == 'Critical Chance') {
                    _root.abilCriticalChance += Math.ceil(itemTier[i] * 1);
                  } else {
                    if (itemAbility[i] == 'Critical Damage') {
                      _root.abilCriticalDamage += Math.ceil(itemTier[i] * 2);
                    } else {
                      if (itemAbility[i] == 'Defense') {
                        _root.abilDefense += Math.ceil(itemTier[i] * 1.5);
                      } else {
                        if (itemAbility[i] == 'Damage Taken') {
                          _root.abilDamageTaken += Math.ceil(itemTier[i] * 1);
                        } else {
                          if (itemAbility[i] == 'Reflect') {
                            _root.abilReflect += itemTier[i] * 50;
                          } else {
                            if (itemAbility[i] == 'Accuracy') {
                              _root.abilAccuracy += Math.ceil(itemTier[i] * 1.5);
                            } else {
                              if (itemAbility[i] == 'Hit Chance') {
                                _root.abilHitChance += Math.ceil(itemTier[i] * 0.5);
                              } else {
                                if (itemAbility[i] == 'Evasion') {
                                  _root.abilEvasion += Math.ceil(itemTier[i] * 2);
                                } else {
                                  if (itemAbility[i] == 'Dodge Chance') {
                                    _root.abilDodgeChance += Math.ceil(itemTier[i] * 0.5);
                                  } else {
                                    if (itemAbility[i] == 'Poison Chance') {
                                      _root.abilPoisonChance += itemTier[i] * 1;
                                    } else {
                                      if (itemAbility[i] == 'Weaken Chance') {
                                        _root.abilWeakenChance += itemTier[i] * 1;
                                      } else {
                                        if (itemAbility[i] == 'Blind Chance') {
                                          _root.abilBlindChance += itemTier[i] * 1;
                                        } else {
                                          if (itemAbility[i] == 'Stun Chance') {
                                            _root.abilStunChance += Math.ceil(itemTier[i] * 0.5);
                                          } else {
                                            if (itemAbility[i] == 'Silence Chance') {
                                              _root.abilSilenceChance += itemTier[i] * 2;
                                            } else {
                                              if (itemAbility[i] == 'HP') {
                                                _root.abilHP += itemTier[i] * 3;
                                              } else {
                                                if (itemAbility[i] == 'MP') {
                                                  _root.abilMP += itemTier[i] * 3;
                                                } else {
                                                  if (itemAbility[i] == 'HP Regen') {
                                                    _root.abilHPRegen += itemTier[i] * 100;
                                                  } else {
                                                    if (itemAbility[i] == 'MP Regen') {
                                                      _root.abilMPRegen += itemTier[i] * 50;
                                                    } else {
                                                      if (itemAbility[i] == 'Rage Depletion') {
                                                        _root.abilRageDepletion += itemTier[i] * 1;
                                                      } else {
                                                        if (itemAbility[i] == 'Drain') {
                                                          _root.abilLifeDrain += itemTier[i] * 1;
                                                        } else {
                                                          if (itemAbility[i] == 'Mana Eater') {
                                                            _root.abilManaEater += itemTier[i] * 500;
                                                          } else {
                                                            if (itemAbility[i] == 'Autosteal') {
                                                              _root.abilAutoSteal += itemTier[i] * 1;
                                                            } else {
                                                              if (itemAbility[i] == 'Double Hit Chance') {
                                                                _root.abilDoubleHit += itemTier[i] * 2;
                                                              } else {
                                                                if (itemAbility[i] == 'Rage Attack') {
                                                                  _root.abilRageAttack += Math.ceil(itemTier[i] * 1.5);
                                                                } else {
                                                                  if (itemAbility[i] == 'Rage Speed') {
                                                                    _root.abilRageSpeed += Math.ceil(itemTier[i] * 2.5);
                                                                  } else {
                                                                    if (itemAbility[i] == 'Poison Damage') {
                                                                      _root.abilPoisonDamage += itemTier[i] * 25;
                                                                    } else {
                                                                      if (itemAbility[i] == 'Weaken Effect') {
                                                                        _root.abilWeakenEffect += Math.ceil(itemTier[i] * 0.5);
                                                                      } else {
                                                                        if (itemAbility[i] == 'Blind Effect') {
                                                                          _root.abilBlindEffect += Math.ceil(itemTier[i] * 0.5);
                                                                        } else {
                                                                          if (itemAbility[i] == 'Poison Duration') {
                                                                            _root.abilPoisonDuration += itemTier[i] * 1;
                                                                          } else {
                                                                            if (itemAbility[i] == 'Weaken Duration') {
                                                                              _root.abilWeakenDuration += itemTier[i] * 1;
                                                                            } else {
                                                                              if (itemAbility[i] == 'Blind Duration') {
                                                                                _root.abilBlindDuration += itemTier[i] * 1;
                                                                              } else {
                                                                                if (itemAbility[i] == 'Potion Efficiency') {
                                                                                  _root.abilPotionEfficiency += itemTier[i] * 10;
                                                                                } else {
                                                                                  if (itemAbility[i] == 'Boss Damage') {
                                                                                    _root.abilBossDamage += itemTier[i] * 2;
                                                                                  } else {
                                                                                    if (itemAbility[i] == 'Magic Resist') {
                                                                                      _root.abilMagicResist += itemTier[i] * 1;
                                                                                    } else {
                                                                                      if (itemAbility[i] == 'Instant Kill') {
                                                                                        _root.abilInstantKill += Math.ceil(itemTier[i] * 0.5);
                                                                                      } else {
                                                                                        if (itemAbility[i] == 'Negate Effect') {
                                                                                          _root.abilNegateEffect += itemTier[i] * 1;
                                                                                        } else {
                                                                                          if (itemAbility[i] == 'Non-Boss Damage') {
                                                                                            _root.abilNonBossDamage += itemTier[i] * 2;
                                                                                          } else {
                                                                                            if (itemAbility[i] == 'Damage') {
                                                                                              _root.abilNonBossDamage += Math.ceil(itemTier[i] * 1.5);
                                                                                              _root.abilBossDamage += Math.ceil(itemTier[i] * 1.5);
                                                                                            } else {
                                                                                              if (itemAbility[i] == 'Extra Combo') {
                                                                                                _root.abilExtraCombo += itemTier[i] * 1;
                                                                                              } else {
                                                                                                if (itemAbility[i] == 'Magic Reflect') {
                                                                                                  _root.abilMagicReflect += itemTier[i] * 10;
                                                                                                } else {
                                                                                                  if (itemAbility[i] == 'Nullify Death Penalty') {
                                                                                                    _root.abilNullifyPenalty += 100;
                                                                                                  } else {
                                                                                                    if (itemAbility[i] == 'Buff Effect') {
                                                                                                      _root.abilBuffEffect += Math.ceil(itemTier[i] * 0.5);
                                                                                                    } else {
                                                                                                      if (itemAbility[i] == 'All Elements') {
                                                                                                        _root.abilResistFire += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistIce += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistWind += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistEarth += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistThunder += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistWater += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistLight += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilResistDark += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnFire += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnIce += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnWind += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnEarth += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnThunder += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnWater += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnLight += Math.ceil(itemTier[i] * 1);
                                                                                                        _root.abilPwnDark += Math.ceil(itemTier[i] * 1);
                                                                                                      } else {
                                                                                                        if (itemAbility[i] == 'Max Spirit') {
                                                                                                          _root.abilMaxSpirit += itemTier[i] * 10;
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++i;
        }
        if (_root.specSphere > 0) {
          _root.abilResistFire += Math.floor(0.3 * _root.abilResistFire);
          _root.abilResistIce += Math.floor(0.3 * _root.abilResistIce);
          _root.abilResistWind += Math.floor(0.3 * _root.abilResistWind);
          _root.abilResistEarth += Math.floor(0.3 * _root.abilResistEarth);
          _root.abilResistThunder += Math.floor(0.3 * _root.abilResistThunder);
          _root.abilResistWater += Math.floor(0.3 * _root.abilResistWater);
          _root.abilResistLight += Math.floor(0.3 * _root.abilResistLight);
          _root.abilResistDark += Math.floor(0.3 * _root.abilResistDark);
          _root.abilPwnFire += Math.floor(0.3 * _root.abilPwnFire);
          _root.abilPwnIce += Math.floor(0.3 * _root.abilPwnIce);
          _root.abilPwnWind += Math.floor(0.3 * _root.abilPwnWind);
          _root.abilPwnEarth += Math.floor(0.3 * _root.abilPwnEarth);
          _root.abilPwnThunder += Math.floor(0.3 * _root.abilPwnThunder);
          _root.abilPwnWater += Math.floor(0.3 * _root.abilPwnWater);
          _root.abilPwnLight += Math.floor(0.3 * _root.abilPwnLight);
          _root.abilPwnDark += Math.floor(0.3 * _root.abilPwnDark);
        }
        _root.buffMultiplier = (100 + _root.abilBuffEffect + Math.floor(_root.save.arenaSkill[62] * 1)) / 100;
        if (_root.save.arenaLevel >= 1 && _root.save.arenaLevel < 12) {
          _root.arenaReqExp = _root.save.arenaLevel * 200;
        } else {
          if (_root.save.arenaLevel >= 12 && _root.save.arenaLevel < 30) {
            _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 50);
          } else {
            if (_root.save.arenaLevel >= 30 && _root.save.arenaLevel < 70) {
              _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 70) - 15000;
            } else {
              if (_root.save.arenaLevel >= 70 && _root.save.arenaLevel < 120) {
                _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 100) - 150000;
              } else {
                if (_root.save.arenaLevel >= 120 && _root.save.arenaLevel < 180) {
                  _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 150) - 500000;
                } else {
                  if (_root.save.arenaLevel >= 180 && _root.save.arenaLevel < 250) {
                    _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 250) - 2500000;
                  } else {
                    if (_root.save.arenaLevel >= 250 && _root.save.arenaLevel < 500) {
                      _root.arenaReqExp = Math.ceil(_root.save.arenaLevel * (_root.save.arenaLevel + 1) * 400) - 10000000;
                    } else {
                      if (_root.save.arenaLevel >= 500) {
                        _root.arenaReqExp = 100000000;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.saveid == 22) {
          _root.arenaReqExp = Math.floor(_root.arenaReqExp * 0.5);
        }
        if (_root.save.robaconLevel >= 1 && _root.save.robaconLevel < 30) {
          _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 50);
        } else {
          if (_root.save.robaconLevel >= 30 && _root.save.robaconLevel < 70) {
            _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 70) - 15000;
          } else {
            if (_root.save.robaconLevel >= 70 && _root.save.robaconLevel < 120) {
              _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 100) - 150000;
            } else {
              if (_root.save.robaconLevel >= 120 && _root.save.robaconLevel < 180) {
                _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 150) - 500000;
              } else {
                if (_root.save.robaconLevel >= 180 && _root.save.robaconLevel < 250) {
                  _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 250) - 2500000;
                } else {
                  if (_root.save.robaconLevel >= 250 && _root.save.robaconLevel < 500) {
                    _root.robaconReqExp = Math.ceil(_root.save.robaconLevel * (_root.save.robaconLevel + 1) * 400) - 10000000;
                  } else {
                    if (_root.save.robaconLevel >= 500) {
                      _root.robaconReqExp = 99999999;
                    }
                  }
                }
              }
            }
          }
        }
        _root.rageDepletion = 100 - Math.floor(_root.save.arenaSkill[31] * 1.5 + _root.abilRageDepletion * 1);
        if (_root.worstMoon == true) {
          _root.rageDepletion += 100;
        }
        if (_root.rageDepletion < 10) {
          _root.rageDepletion = 10;
        }
        if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Eternal Rage') {
          _root.rageDepletion = -50;
        }
        _root.maxHealth = Math.floor((_root.save.arenaMaxHealth + _root.abilIncHP) * (1 + _root.save.arenaSkill[22] * 0.03 + _root.save.arenaSkill[60] * 0.02 + _root.curCareerLevel[3] * 0.001 + (_root.save.inventoryHealth[_root.save.arenaHat] + _root.save.inventoryHealth[_root.save.arenaShirt] + _root.save.inventoryHealth[_root.save.arenaGloves] + _root.save.inventoryHealth[_root.save.arenaPants] + _root.save.inventoryHealth[_root.save.arenaShoes] + _root.save.inventoryHealth[_root.save.arenaSkin] + _root.save.inventoryHealth[_root.save.arenaMedal] + _root.save.inventoryHealth[_root.save.arenaPendant] + _root.save.inventoryHealth[_root.save.arenaEarring] + _root.save.inventoryHealth[_root.save.arenaTrinket]) * 0.01 + _root.abilHP * 0.01 + _root.allyHP * 0.01) * (1 + _root.curseCount * -0.1));
        _root.maxMana = Math.floor((_root.save.arenaMaxMana + _root.abilIncMP) * (1 + _root.save.arenaSkill[25] * 0.05 + _root.curCareerLevel[3] * 0.001 + _root.abilMP * 0.01 + _root.allyMP * 0.01) * (1 + _root.spiritCount * -0.1));
        if (_root.maxMana < 1) {
          _root.maxMana = 1;
        }
        if (_root.worstMoon == true) {
          _root.maxHealth = Math.floor(Math.pow(_root.maxHealth, 0.98));
          _root.maxMana = Math.floor(Math.pow(_root.maxMana, 0.98));
        }
        if (_root.apocalypse == true) {
          _root.maxHealth = Math.floor(_root.maxHealth * 0.9);
          _root.maxMana = Math.floor(_root.maxMana * 0.9);
        }
        if (_root.saveid == 22 && _root.save.arenaZone <= 13) {
          _root.maxHealth = Math.floor(_root.maxHealth * 2);
        }
        if (_root.save.arenaZone == 68) {
          _root.maxHealth = Math.ceil(_root.maxHealth * 3);
        }
        if (_root.maxMana < 1) {
          _root.maxMana = 1;
        }
        if (_root.maxHealth > 19999999) {
          _root.maxHealth = 19999999;
        }
        if (_root.maxMana > 19999999) {
          _root.maxMana = 19999999;
        }
        if (_root.specInfinity > 0) {
          _root.save.arenaMana = _root.maxMana;
        }
        _root.maxSpirit = _root.spiritCount * 250 + _root.save.arenaSkill[25] * 20 + _root.save.arenaSkill[58] * 10 + _root.abilMaxSpirit;
        if (_root.manaPower == true) {
          _root.maxSpirit += 50;
        }
        if (_root.apocalypse == true) {
          _root.maxSpirit = Math.ceil(_root.maxSpirit * 0.6);
        } else {
          if (_root.worstMoon == true) {
            _root.maxSpirit = Math.ceil(_root.maxSpirit * 0.8);
          }
        }
        if (isNaN(_root.maxHealth)) {
          _root.maxHealth = 100;
        }
        _root.hpRecover = Math.floor((4000 + _root.maxHealth / 25) * (1 + _root.save.arenaSkill[21] * 0.5 + _root.abilHPRegen * 0.01 + _root.save.inventoryHealth[_root.save.arenaWeapon] * 0.25));
        _root.mpRecover = Math.floor((400 + _root.maxMana / 250) * (1 + _root.save.arenaSkill[24] * 0.25 + _root.abilMPRegen * 0.01) * (1 + Math.min(_root.spiritCount, 10) * -0.1));
        if (_root.worstMoon == true) {
          _root.hpRecover = Math.floor(Math.pow(_root.hpRecover, 0.95));
          _root.mpRecover = Math.floor(Math.pow(_root.mpRecover, 0.95));
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
          _root.mpRecover = Math.floor(1 + _root.save.arenaSkill[24] * 0.4 + _root.abilMPRegen * 0.01);
        }
        if (_root.save.arenaZone == 24) {
          _root.maxHealth = 200;
          _root.hpRecover = 0;
        }
        if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
          _root.maxHealth = 9001;
          _root.hpRecover = 100;
        }
        _root.hpRecover = Math.floor(_root.hpRecover / 10) * 10;
        _root.mpRecover = Math.floor(_root.mpRecover / 10) * 10;
        _root.attackPower = Math.floor((_root.save.arenaAttack + _root.abilIncAttack) * (1 + _root.save.arenaSkill[9] * 0.01 + Math.ceil(_root.save.arenaSkill[12] / 2) * 0.01 + _root.curCareerLevel[3] * 0.001 + _root.abilAttack * 0.01 + _root.allyAttack * 0.01));
        tempCombo = Math.floor(_root.arenaCombo / 10);
        if (_root.save.arenaRing == 18) {
          if (tempCombo > _root.save.arenaSkill[27] * 2 + 30) {
            tempCombo = _root.save.arenaSkill[27] * 2 + 30;
          }
        } else {
          if (tempCombo > _root.save.arenaSkill[27] * 2) {
            tempCombo = _root.save.arenaSkill[27] * 2;
          }
        }
        if (tempCombo < 0 || isNaN(tempCombo)) {
          tempCombo = 0;
        }
        _root.attackPower = Math.floor(_root.attackPower * (100 + tempCombo * 1) / 100);
        _root.defensePower = Math.floor((_root.save.arenaDefense + _root.abilIncDefense) * (1 + _root.save.arenaSkill[9] * 0.01 + Math.ceil(_root.save.arenaSkill[11] / 2) * 0.01 + _root.curCareerLevel[3] * 0.001 + _root.abilDefense * 0.01 + _root.allyDefense * 0.01));
        if (_root.save.arenaBuffType == 4 && _root.arenaPotionBlock <= 0) {
          _root.attackPower = Math.floor(_root.attackPower * 0.01);
          _root.defensePower = Math.floor(_root.defensePower * 0.01);
        }
        _root.ragePowerMult = 100 * (0.4 + _root.save.arenaSkill[32] * 0.02 + _root.abilRageAttack / 100);
        _root.rageSpeedMult = 100 * (+(_root.save.arenaSkill[33] * 0.03) + _root.abilRageSpeed / 100);
        if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Gem of Eternal Rage') {
          _root.ragePowerMult = Math.floor(_root.ragePowerMult * 1.2);
        }
        if (_root.save.arenaRage > 100) {
          _root.save.arenaRage = 100;
        }
        _root.ragePower = 100 + Math.round(_root.save.arenaRage) * _root.ragePowerMult / 100;
        _root.rageSpeed = 100 + Math.round(_root.save.arenaRage) * _root.rageSpeedMult / 100;
        _root.ignoreDefense = _root.save.arenaSkill[20] + Math.floor(_root.save.arenaSkill[59] * 0.4) + _root.abilIgnoreDefense + _root.allyIgnoreDefense;
        if (_root.save.arenaZone == 52) {
          _root.ignoreDefense -= Math.floor(_root.areaSpookyKill / 100);
          if (_root.ignoreDefense < 0) {
            _root.ignoreDefense = 0;
          }
        }
        if (_root.save.arenaZone == 78) {
          _root.ignoreDefense -= _root.endlessFloor;
          if (_root.ignoreDefense < 0) {
            _root.ignoreDefense = 0;
          }
        }
        if (_root.ignoreDefense > 95) {
          _root.ignoreDefense = 95;
        }
        if (_root.arenaSoap > 0 && _root.save.inventoryName[_root.save.arenaWeapon] == 'Censor Sword') {
          if (_root.save.inventoryName[_root.save.arenaHat] == 'Censor Hat' && _root.save.inventoryName[_root.save.arenaShirt] == 'Censor Shirt' && _root.save.inventoryName[_root.save.arenaGloves] == 'Censor Gloves' && _root.save.inventoryName[_root.save.arenaPants] == 'Censor Pants' && _root.save.inventoryName[_root.save.arenaShoes] == 'Censor Shoes') {
            _root.ignoreDefense = 100;
          }
        }
        if (_root.save.arenaZone == 14 && (_root.save.inventoryName[_root.save.arenaWeapon] == 'Burned Rope' || _root.save.inventoryName[_root.save.arenaWeapon] == '[O] Burned Rope')) {
          _root.ignoreDefense = 100;
        }
        if (_root.save.arenaZone >= 23 && _root.save.arenaZone <= 25 && (_root.save.inventoryName[_root.save.arenaWeapon] == 'Special Wand' || _root.save.inventoryName[_root.save.arenaWeapon] == '[O] Special Wand')) {
          _root.ignoreDefense = 100;
        }
        if (enemy.name == 'Secret Crystal' && _root.save.inventorySubtype[_root.save.arenaWeapon] == 'Mining Tool') {
          _root.ignoreDefense = 100;
        }
        if (enemy.defense >= 999999999999.0 && _root.ignoreDefense > 100) {
          _root.ignoreDefense = 100;
        }
        _root.weaponDefense = _root.save.inventoryDefense[_root.save.arenaWeapon] + _root.save.inventoryDefense[_root.save.arenaHat] + _root.save.inventoryDefense[_root.save.arenaShirt] + _root.save.inventoryDefense[_root.save.arenaGloves] + _root.save.inventoryDefense[_root.save.arenaPants] + _root.save.inventoryDefense[_root.save.arenaShoes] + _root.save.inventoryDefense[_root.save.arenaSkin] + _root.save.inventoryDefense[_root.save.arenaMedal] + _root.save.inventoryDefense[_root.save.arenaPendant] + _root.save.inventoryDefense[_root.save.arenaEarring] + _root.save.inventoryDefense[_root.save.arenaTrinket] + _root.save.arenaSkill[11] * 25 + _root.allyEquipDefense + _root.abilIncEquipDefense;
        _root.weaponAttack = _root.save.inventoryAttack[_root.save.arenaWeapon] + _root.save.inventoryAttack[_root.save.arenaHat] + _root.save.inventoryAttack[_root.save.arenaShirt] + _root.save.inventoryAttack[_root.save.arenaGloves] + _root.save.inventoryAttack[_root.save.arenaPants] + _root.save.inventoryAttack[_root.save.arenaShoes] + _root.save.inventoryAttack[_root.save.arenaSkin] + _root.save.inventoryAttack[_root.save.arenaMedal] + _root.save.inventoryAttack[_root.save.arenaPendant] + _root.save.inventoryAttack[_root.save.arenaEarring] + _root.save.inventoryAttack[_root.save.arenaTrinket] + _root.save.arenaSkill[12] * 10 + _root.save.arenaSkill[59] * 2 + _root.allyEquipAttack + _root.abilIncEquipAttack;
        _root.attackSpeed = Math.floor((_root.save.inventorySpeed[_root.save.arenaWeapon] * (1 + (_root.save.inventorySpeed[_root.save.arenaHat] + _root.save.inventorySpeed[_root.save.arenaShirt] + _root.save.inventorySpeed[_root.save.arenaGloves] + _root.save.inventorySpeed[_root.save.arenaPants] + _root.save.inventorySpeed[_root.save.arenaShoes] + _root.save.inventorySpeed[_root.save.arenaSkin] + _root.save.inventorySpeed[_root.save.arenaMedal] + _root.save.inventorySpeed[_root.save.arenaPendant] + _root.save.inventorySpeed[_root.save.arenaEarring] + _root.save.inventorySpeed[_root.save.arenaTrinket]) * 0.05) + _root.allyAttackSpeedRaw) * (1 + 0.02 * _root.save.arenaSkill[16] + _root.abilAttackSpeed * 0.01 + _root.allyAttackSpeed * 0.01) * (_root.rageSpeed / 100));
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 1 && _root.attackSpeed > 12) {
          _root.attackSpeed = 12;
        }
        if (isNaN(_root.attackSpeed)) {
          _root.attackSpeed = 1;
        }
        _root.doubleHit = Math.floor(_root.save.arenaSkill[55] * 1.5) + _root.abilDoubleHit + _root.allyDoubleHit;
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 1) {
          _root.doubleHit = 0;
        }
        if (_root.attackSpeed > 25) {
          _root.doubleHit += _root.attackSpeed - 25;
          _root.attackSpeed = 25;
        }
        if (_root.worstMoon == true) {
          _root.doubleHit = Math.floor(_root.doubleHit / 2);
        }
        if (_root.apocalypse == true) {
          _root.doubleHit = Math.floor(_root.doubleHit / 2);
        }
        if (_root.attackSpeed < 1) {
          _root.attackSpeed = 1;
        }
        if (_root.doubleHit > 95) {
          _root.doubleHit = 95;
        }
        if (_root.arenaSlow > 0) {
          _root.attackSpeed = Math.ceil(_root.attackSpeed * 0.4);
        }
        _root.minMult = 5 + _root.save.arenaSkill[15] + _root.abilMastery + _root.allyMastery;
        if (_root.minMult > 95) {
          _root.minMult = 95;
        }
        _root.maxDamage = Math.ceil((7.0e-06 * Math.pow(_root.save.arenaLevel, 0.5) * Math.pow(_root.save.level, 0.5) + 0.01) * _root.attackPower * _root.weaponAttack * (_root.ragePower / 100) * (1 + _root['abilPwn' + enemy.element] * 0.01) + _root.attackPower);
        if (_currentframe != 1) {
          _root.maxDamage = Math.ceil((7.0e-06 * Math.pow(_root.save.arenaLevel, 0.5) * Math.pow(_root.save.level, 0.5) + 0.01) * _root.attackPower * _root.weaponAttack * (_root.ragePower / 100) * 1 + _root.attackPower);
        }
        if (_root.save.level < 100) {
          _root.maxDamage = Math.ceil(_root.maxDamage * _root.save.level / 100);
        }
        if (_root.worstMoon == true) {
          _root.maxDamage = Math.floor(Math.pow(_root.maxDamage, 0.95) * 0.5);
        }
        if (_root.apocalypse == true) {
          _root.maxDamage = Math.floor(_root.maxDamage * 0.9);
        }
        if (_root.save.arenaZone == 14) {
          _root.maxDamage = 500;
          _root.minMult = 100;
        }
        if (_root.save.arenaZone == 56) {
          _root.maxDamage = Math.floor(Math.pow(_root.maxDamage, 0.8) * 10);
        }
        if (_root.save.arenaZone >= 23 && _root.save.arenaZone <= 25) {
          _root.maxDamage = Math.ceil(Math.min(_root.save.level, 5000) / 10 + _root.save.arenaLevel + 500);
          _root.minMult = 100;
        }
        if (_root.specInfinity > 0) {
          _root.minMult = 100;
        }
        _root.minDamage = Math.ceil(_root.minMult * _root.maxDamage / 100);
        _root.accuracy = Math.floor((_root.save.arenaAccuracy + _root.save.arenaSkill[14] * 50 + _root.abilIncAccuracy) * (1 + _root.save.arenaSkill[10] * 0.015 + _root.curCareerLevel[3] * 0.001 + _root.save.inventoryDexterity[_root.save.arenaWeapon] * 0.01 + _root.abilAccuracy * 0.01 + _root.allyAccuracy * 0.01));
        _root.accuracyPct = Math.floor(_root.save.arenaSkill[14] + _root.abilHitChance + _root.allyHitChance);
        if (_root.save.arenaZone == 52) {
          _root.accuracyPct -= Math.floor(_root.areaSpookyKill / 100);
          if (_root.accuracyPct < 0) {
            _root.accuracyPct = 0;
          }
        }
        if (_root.save.arenaZone == 78) {
          _root.accuracyPct -= _root.endlessFloor;
          if (_root.accuracyPct < 0) {
            _root.accuracyPct = 0;
          }
        }
        if (_root.worstMoon == true) {
          _root.accuracyPct = Math.floor(_root.accuracyPct * 0.5);
        }
        if (_root.apocalypse == true) {
          _root.accuracyPct = Math.floor(_root.accuracyPct * 0.5);
        }
        if (_root.accuracyPct > 90) {
          _root.accuracyPct = 90;
        }
        _root.evasion = Math.floor((_root.save.arenaEvasion + _root.save.arenaSkill[13] * 50 + _root.abilIncEvasion) * (1 + _root.save.arenaSkill[10] * 0.015 + (_root.save.inventoryDexterity[_root.save.arenaHat] + _root.save.inventoryDexterity[_root.save.arenaShirt] + _root.save.inventoryDexterity[_root.save.arenaGloves] + _root.save.inventoryDexterity[_root.save.arenaPants] + _root.save.inventoryDexterity[_root.save.arenaShoes] + _root.save.inventoryDexterity[_root.save.arenaSkin] + _root.save.inventoryDexterity[_root.save.arenaMedal] + _root.save.inventoryDexterity[_root.save.arenaPendant] + _root.save.inventoryDexterity[_root.save.arenaEarring] + _root.save.inventoryDexterity[_root.save.arenaTrinket]) * 0.01 + _root.curCareerLevel[3] * 0.001 + _root.abilEvasion * 0.01 + _root.allyEvasion * 0.01));
        tempCombo = Math.floor(_root.arenaCombo / 10);
        if (_root.save.arenaRing == 18) {
          if (tempCombo > _root.save.arenaSkill[28] * 2 + 30) {
            tempCombo = _root.save.arenaSkill[28] * 2 + 30;
          }
        } else {
          if (tempCombo > _root.save.arenaSkill[28] * 2) {
            tempCombo = _root.save.arenaSkill[28] * 2;
          }
        }
        if (tempCombo < 0 || isNaN(tempCombo)) {
          tempCombo = 0;
        }
        _root.evasion = Math.floor(_root.evasion * (1 + tempCombo * 0.02));
        _root.evasionPct = Math.floor(_root.save.arenaSkill[13] * 1 + _root.abilDodgeChance + _root.allyDodgeChance);
        if (_root.save.arenaZone == 52) {
          _root.evasionPct -= Math.floor(_root.areaSpookyKill / 100);
          if (_root.evasionPct < 0) {
            _root.evasionPct = 0;
          }
        }
        if (_root.save.arenaZone == 78) {
          _root.evasionPct -= _root.endlessFloor;
          if (_root.evasionPct < 0) {
            _root.evasionPct = 0;
          }
        }
        if (_root.worstMoon == true) {
          _root.evasionPct = Math.floor(_root.evasionPct * 0.5);
        }
        if (_root.apocalypse == true) {
          _root.evasionPct = Math.floor(_root.evasionPct * 0.5);
        }
        if (_root.save.arenaZone == 24) {
          _root.evasion = 1;
          _root.evasionPct = 0;
        }
        if (_root.evasionPct > 90) {
          _root.evasionPct = 90;
        }
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 2) {
          if (_root.evasionPct > 14) {
            _root.evasionPct = 14;
          }
        }
        if (_root.arenaBlind > 0) {
          _root.accuracy = Math.floor(_root.accuracy * 0.6);
          _root.accuracyPct = Math.floor(_root.accuracyPct * 0.8);
          _root.evasion = Math.floor(_root.evasion * 0.6);
          _root.evasionPct = Math.floor(_root.evasionPct * 0.8);
        }
        if (_root.save.arenaBuffType == 7 && _root.arenaPotionBlock <= 0) {
          _root.evasionPct = 100;
        }
        _root.criticalChance = Math.floor(_root.accuracy / 1000) + _root.save.inventoryCrit[_root.save.arenaWeapon] + _root.save.arenaSkill[19] + _root.abilCriticalChance + _root.allyCriticalChance;
        _root.criticalDamage = 100 + (_root.save.inventoryCrit[_root.save.arenaHat] + _root.save.inventoryCrit[_root.save.arenaShirt] + _root.save.inventoryCrit[_root.save.arenaGloves] + _root.save.inventoryCrit[_root.save.arenaPants] + _root.save.inventoryCrit[_root.save.arenaShoes] + _root.save.inventoryCrit[_root.save.arenaSkin] + _root.save.inventoryCrit[_root.save.arenaMedal] + _root.save.inventoryCrit[_root.save.arenaPendant] + _root.save.inventoryCrit[_root.save.arenaEarring] + _root.save.inventoryCrit[_root.save.arenaTrinket]) + _root.save.arenaSkill[18] * 2 + _root.save.arenaSkill[20] * 1 + _root.abilCriticalDamage + _root.allyCriticalDamage;
        tempCombo = Math.floor(_root.arenaCombo / 10);
        if (_root.save.arenaRing == 18) {
          if (tempCombo > _root.save.arenaSkill[29] * 2 + 30) {
            tempCombo = _root.save.arenaSkill[29] * 2 + 30;
          }
        } else {
          if (tempCombo > _root.save.arenaSkill[29] * 2) {
            tempCombo = _root.save.arenaSkill[29] * 2;
          }
        }
        if (tempCombo < 0 || isNaN(tempCombo)) {
          tempCombo = 0;
        }
        _root.criticalChance += tempCombo;
        _root.criticalDamage += tempCombo * 1;
        if (_root.worstMoon == true) {
          _root.criticalChance = Math.floor(_root.criticalChance / 2);
          _root.criticalDamage = Math.floor((_root.criticalDamage - 100) / 4) + 100;
        }
        if (_root.apocalypse == true) {
          _root.criticalChance = Math.floor(_root.criticalChance / 2);
          _root.criticalDamage = Math.floor((_root.criticalDamage - 100) / 4) + 100;
        }
        if (_root.criticalChance > 95) {
          _root.criticalChance = 95;
        }
        if (_root.criticalDamage > 1000) {
          _root.criticalDamage = 1000;
        }
        _root.damageResist = Math.floor((1.0e-06 * Math.pow(_root.save.arenaLevel, 0.5) * Math.pow(_root.save.level, 0.5) + 0.002) * _root.defensePower * _root.weaponDefense * (1 + _root['abilResist' + enemy.element] * 0.01) + _root.defensePower + _root.save.arenaMana * _root.save.arenaSkill[61] / 100 + _root.save.arenaHealth * _root.save.arenaSkill[23] / 100);
        if (_currentframe != 1) {
          _root.damageResist = Math.floor((1.0e-06 * Math.pow(_root.save.arenaLevel, 0.5) * Math.pow(_root.save.level, 0.5) + 0.002) * _root.defensePower * _root.weaponDefense * 1 + _root.defensePower + _root.save.arenaMana * _root.save.arenaSkill[61] / 100 + _root.save.arenaHealth * _root.save.arenaSkill[23] / 100);
        }
        tempCombo = Math.floor(_root.arenaCombo / 10);
        if (_root.save.arenaRing == 18) {
          if (tempCombo > _root.save.arenaSkill[28] * 2 + 30) {
            tempCombo = _root.save.arenaSkill[28] * 2 + 30;
          }
        } else {
          if (tempCombo > _root.save.arenaSkill[28] * 2) {
            tempCombo = _root.save.arenaSkill[28] * 2;
          }
        }
        if (tempCombo < 0 || isNaN(tempCombo)) {
          tempCombo = 0;
        }
        _root.damageResist = Math.floor(_root.damageResist * (1 + tempCombo * 0.05));
        _root.damageResistPct = Math.floor(_root.weaponDefense / 100) + Math.floor(_root.save.arenaSkill[23] * 1) + _root.abilDamageTaken + _root.allyDamageTaken;
        if (_root.save.arenaZone == 52) {
          _root.damageResistPct -= Math.floor(_root.areaSpookyKill / 100);
          if (_root.damageResistPct < 0) {
            _root.damageResistPct = 0;
          }
        }
        if (_root.save.arenaZone == 78) {
          _root.damageResistPct -= _root.endlessFloor;
          if (_root.damageResistPct < 0) {
            _root.damageResistPct = 0;
          }
        }
        if (_root.worstMoon == true) {
          _root.damageResist = Math.floor(Math.pow(_root.damageResist, 0.95));
          _root.damageResistPct = Math.floor(_root.damageResistPct / 2);
        }
        if (_root.apocalypse == true) {
          _root.damageResist = Math.floor(_root.damageResist * 0.9);
          _root.damageResistPct = Math.floor(_root.damageResistPct / 2);
        }
        if (_root.save.arenaZone == 24) {
          _root.damageResist = 0;
          _root.damageResistPct = 0;
        }
        if (_root.damageResistPct > 90) {
          _root.damageResistPct = 90;
        }
        if (_root.save.arenaZone == 29) {
          _root.damageResistPct = 80 + Math.floor(_root.damageResistPct / 10);
        }
        if (_root.save.arenaZone == 68) {
          _root.damageResist = Math.ceil(_root.damageResist * 3);
        }
        if (_root.manaPower == true) {
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] != true) {
            _root.damageResist = Math.floor(_root.damageResist + _root.maxMana * 0.2);
          }
          _root.damageResistPct += Math.floor(50 - _root.damageResistPct / 2);
        }
        if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
          _root.damageResist = Math.floor(Math.pow(_root.damageResist, 0.45));
        }
        if (_root.arenaWeaken > 0) {
          _root.maxDamage = Math.floor(_root.maxDamage * 0.6);
          _root.minDamage = Math.floor(_root.minDamage * 0.6);
          _root.damageResist = Math.floor(_root.damageResist * 0.6);
          _root.damageResistPct = Math.floor(_root.damageResistPct * 0.8);
        }
        if (enemy.enemyID == 331) {
          _root.maxDamage = Math.floor(_root.maxDamage * 0.4);
          _root.minDamage = Math.floor(_root.minDamage * 0.4);
          _root.damageResist = Math.floor(_root.damageResist * 0.7);
          _root.damageResistPct = Math.floor(_root.damageResistPct * 0.7);
        }
        if (_root.saveid == 22) {
          _root.save.arenaDefense = 65000;
          _root.damageResist = 0;
          _root.damageResistPct = 0;
        }
        if (_root.damageResist > 1999999999) {
          _root.damageResist = 1999999999;
        }
        _root.damageReflect = 50 + _root.attackSpeed * 2 + _root.save.arenaSkill[51] * 50 + _root.abilReflect + _root.allyReflect;
        if (_root.damageReflect > 5000) {
          _root.damageReflect = 5000;
        }
        _root.magicReflect = Math.ceil(_root.damageReflect * (_root.save.arenaSkill[52] * 0.05 + _root.abilMagicReflect * 0.01));
        _root.negateEffect = _root.abilNegateEffect + _root.allyNegateEffect;
        _root.bossDamage = _root.abilBossDamage + _root.allyBossDamage;
        _root.nonBossDamage = _root.abilNonBossDamage + _root.allyNonBossDamage;
        if (_root.save.arenaZone == 24) {
          _root.bossDamage += 200;
          _root.nonBossDamage += 200;
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Fire Staff') {
          if (enemy.element == 'Ice') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Ice Staff') {
          if (enemy.element == 'Wind') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Wind Staff') {
          if (enemy.element == 'Earth') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Earth Staff') {
          if (enemy.element == 'Thunder') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Thunder Staff') {
          if (enemy.element == 'Water') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Epic Water Staff') {
          if (enemy.element == 'Fire') {
            _root.bossDamage += 40;
            _root.nonBossDamage += 40;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Light Glaive') {
          if (enemy.element == 'Dark') {
            _root.bossDamage += 30;
            _root.nonBossDamage += 30;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Glaive') {
          if (enemy.element == 'Light') {
            _root.bossDamage += 30;
            _root.nonBossDamage += 30;
          }
        }
        _root.instantKill = _root.abilInstantKill + _root.allyInstantKill;
        _root.magicResist = _root.abilMagicResist + _root.allyMagicResist;
        _root.potionEfficiency = 100 + _root.abilPotionEfficiency + _root.allyPotionEfficiency;
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Fairy Godmother Wand') {
          _root.magicResist += 15;
          _root.negateEffect += 15;
          if (_root.save.inventoryName[_root.save.arenaHat] == 'Fairy Godmother Hat' && _root.save.inventoryName[_root.save.arenaShirt] == 'Fairy Godmother Shirt' && _root.save.inventoryName[_root.save.arenaGloves] == 'Fairy Godmother Gloves' && _root.save.inventoryName[_root.save.arenaPants] == 'Fairy Godmother Pants' && _root.save.inventoryName[_root.save.arenaShoes] == 'Fairy Godmother Shoes') {
            _root.potionEfficiency += 500;
          }
        }
        if (_root.manaPower == true) {
          _root.magicResist += 15;
        }
        if (_root.worstMoon == true) {
          _root.damageReflect = Math.floor(_root.damageReflect / 5);
          _root.magicReflect = Math.floor(_root.magicReflect / 5);
          _root.negateEffect = Math.floor(_root.negateEffect / 2);
          _root.bossDamage = Math.floor(_root.bossDamage / 2);
          _root.nonBossDamage = Math.floor(_root.nonBossDamage / 2);
          _root.instantKill = Math.floor(_root.instantKill / 2);
          _root.magicResist = Math.floor(_root.magicResist / 2);
          _root.potionEfficiency = Math.floor(_root.potionEfficiency / 2);
        }
        if (_root.apocalypse == true) {
          _root.damageReflect = Math.floor(_root.damageReflect / 5);
          _root.magicReflect = Math.floor(_root.magicReflect / 5);
          _root.negateEffect = Math.floor(_root.negateEffect / 2);
          _root.bossDamage = Math.floor(_root.bossDamage / 2);
          _root.nonBossDamage = Math.floor(_root.nonBossDamage / 2);
          _root.instantKill = Math.floor(_root.instantKill / 2);
          _root.magicResist = Math.floor(_root.magicResist / 2);
          _root.potionEfficiency = Math.floor(_root.potionEfficiency / 2);
        }
        if (_root.negateEffect > 80) {
          _root.negateEffect = 80;
        }
        if (_root.instantKill > 80) {
          _root.instantKill = 80;
        }
        if (_root.magicResist > 80) {
          _root.magicResist = 80;
        }
        if (_root.specDispel > 0) {
          _root.negateEffect = 100;
        }
        _root.silenceChance = _root.abilSilenceChance;
        _root.poisonChance = Math.floor(_root.save.arenaSkill[39] * 1 + _root.abilPoisonChance);
        _root.weakenChance = Math.floor(_root.save.arenaSkill[41] * 1 + _root.abilWeakenChance);
        _root.blindChance = Math.floor(_root.save.arenaSkill[43] * 1 + _root.abilBlindChance);
        _root.stunChance = Math.ceil(_root.save.arenaSkill[45] * 0.4) + _root.abilStunChance;
        if (_root.worstMoon == true) {
          _root.poisonChance = Math.floor(_root.poisonChance / 2);
          _root.weakenChance = Math.floor(_root.weakenChance / 2);
          _root.blindChance = Math.floor(_root.blindChance / 2);
          _root.stunChance = Math.floor(_root.stunChance / 2);
        }
        if (_root.poisonChance > 100) {
          _root.poisonChance = 100;
        }
        if (_root.weakenChance > 100) {
          _root.weakenChance = 100;
        }
        if (_root.blindChance > 100) {
          _root.blindChance = 100;
        }
        if (_root.stunChance > 100) {
          _root.stunChance = 100;
        }
        if (_root.save.arenaZone == 24 || _root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
          _root.poisonChance = 0;
        }
        _root.poisonDuration = 5 + _root.save.arenaSkill[40] * 0.2 + _root.abilPoisonDuration;
        _root.poisonDamage = 500 + _root.save.arenaSkill[40] * 25 + _root.abilPoisonDamage;
        _root.weakenDuration = 5 + _root.save.arenaSkill[42] * 0.2 + _root.abilWeakenDuration;
        _root.weakenPower = 30 + Math.ceil(_root.save.arenaSkill[42] * 0.5) + _root.abilWeakenEffect;
        _root.blindDuration = 5 + _root.save.arenaSkill[44] * 0.2 + _root.abilBlindDuration;
        _root.blindPower = 30 + Math.ceil(_root.save.arenaSkill[44] * 0.5) + _root.abilBlindEffect;
        _root.stunDuration = 0.5;
        if (_root.worstMoon == true) {
          _root.poisonDamage = Math.floor(_root.poisonDamage / 5);
          _root.weakenPower = Math.floor(_root.weakenPower / 2);
          _root.blindPower = Math.floor(_root.blindPower / 2);
        }
        if (_root.poisonDamage > 5000) {
          _root.poisonDamage = 5000;
        }
        if (_root.weakenPower > 70) {
          _root.weakenPower = 70;
        }
        if (_root.blindPower > 70) {
          _root.blindPower = 70;
        }
        _root.lifeDrain = _root.save.arenaSkill[36] + _root.abilLifeDrain;
        _root.manaEater = _root.save.arenaSkill[37] * 500 + _root.abilManaEater;
        if (_root.save.arenaZone == 24) {
          _root.lifeDrain = 0;
        }
        if (_root.save.arenaZone == 29) {
          _root.lifeDrain = 0;
        }
        if (_root.save.arenaZone >= 30 && _root.save.arenaZone <= 43) {
          _root.lifeDrain = 0;
        }
        _root.autoSteal = _root.save.arenaSkill[53] + _root.abilAutoSteal;
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Pirate Sword') {
          if (_root.save.inventoryLevel[_root.save.arenaWeapon] > 300) {
            _root.autoSteal += 300;
          } else {
            _root.autoSteal += _root.save.inventoryLevel[_root.save.arenaWeapon];
          }
        }
        if (_root.lifeDrain > 250) {
          _root.lifeDrain = 250;
        }
        if (_root.autoSteal > 500) {
          _root.autoSteal = 500;
        }
        _root.arenaRareRate = 100 + _root.save.arenaSkill[50] * 2 + _root.abilRareRate;
        _root.arenaEpicRate = 100 + _root.save.arenaSkill[50] * 2 + _root.abilEpicRate;
        _root.arenaExpMult = 100 + Math.floor(_root.save.arenaSkill[34] * 1) + Math.floor(_root.abilExp) + _root.allyExp;
        _root.arenaCoinMult = 100 + _root.save.arenaSkill[35] * 1 + _root.abilCoin + _root.allyCoin;
        _root.arenaPixelMult = 100 + _root.save.arenaSkill[35] * 1 + _root.abilPixel + _root.allyPixel;
        if (_root.save.careerLevel[3] >= 100) {
          _root.arenaExpMult += 10;
          _root.arenaCoinMult += 10;
          _root.arenaPixelMult += 10;
        }
        if (_root.specPolearm > 0) {
          _root.arenaExpMult += 10 + 1 * _root.save.arenaSkill[3];
          _root.arenaCoinMult += 10 + 1 * _root.save.arenaSkill[3];
        }
        if (_root.specSphere > 0) {
          _root.arenaExpMult += 30;
        }
        _root.arenaDropRate = 100 + _root.save.arenaSkill[50] * 1 + _root.abilDropRate + _root.allyDropRate + _root.curCareerLevel[4];
        _root.spawnSpeed = 100 + _root.abilSpawnRate + _root.allySpawnRate;
        if (_root.spiritInsta > 0) {
          _root.spawnSpeed += 100;
        }
        if (_root.worstMoon == true) {
          _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.3);
          _root.arenaCoinMult = Math.floor(_root.arenaCoinMult * 1.6);
          _root.arenaPixelMult = Math.floor(_root.arenaPixelMult * 1.6);
          _root.arenaDropRate = Math.floor(_root.arenaDropRate * 1.6);
        }
        if (_root.apocalypse == true) {
          _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.15);
          _root.arenaCoinMult = Math.floor(_root.arenaCoinMult * 1.3);
          _root.arenaPixelMult = Math.floor(_root.arenaPixelMult * 1.3);
          _root.arenaDropRate = Math.floor(_root.arenaDropRate * 1.3);
        }
        if (_root.save.banPenalty[8] == 1) {
          _root.arenaDropRate = Math.floor(_root.arenaDropRate * 1.5);
        }
        if (_root.saveid == 24) {
          _root.arenaPixelMult = Math.floor(_root.arenaPixelMult * 0.1);
        }
        tempCombo = Math.floor(_root.arenaCombo / 10);
        if (_root.save.arenaRing == 18) {
          if (tempCombo > _root.save.arenaSkill[30] * 2 + 30) {
            tempCombo = _root.save.arenaSkill[30] * 2 + 30;
          }
        } else {
          if (tempCombo > _root.save.arenaSkill[30] * 2) {
            tempCombo = _root.save.arenaSkill[30] * 2;
          }
        }
        if (tempCombo < 0 || isNaN(tempCombo)) {
          tempCombo = 0;
        }
        _root.arenaExpMult += tempCombo;
        _root.arenaCoinMult += tempCombo;
        _root.arenaPixelMult += tempCombo;
        i = 1;
        while (i <= 30) {
          if (_root.save.inventoryFrame[i] >= 319 && _root.save.inventoryFrame[i] <= 328 && _root.save.inventoryExist[i] == 1) {
            _root.arenaDropRate += 1;
          }
          if (_root.save.inventoryFrame[i] >= 360 && _root.save.inventoryFrame[i] <= 379 && _root.save.inventoryExist[i] == 1) {
            _root.arenaDropRate += 1;
          }
          ++i;
        }
        i = 1;
        while (i <= _root.todayEvent) {
          yy = _root.clock_year % 10;
          mm = _root.clock_month;
          dd = _root.clock_date;
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from The Corruption area in Battle Arena' && _root.save.arenaZone == 50) {
            _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.5);
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from The Corruption area in Battle Arena' && _root.save.arenaZone == 59) {
            _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.5);
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Secret Dungeon area in Battle Arena' && _root.save.arenaZone == 53) {
            _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.5);
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Secret Dungeon area in Battle Arena' && _root.save.arenaZone == 54) {
            _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.5);
          }
          if (_root.eventList[yy][mm][dd][i] == 'Gain 1.5x EXP from Endless Dungeon area in Battle Arena' && _root.save.arenaZone == 78) {
            _root.arenaExpMult = Math.floor(_root.arenaExpMult * 1.5);
          }
          if (_root.eventList[yy][mm][dd][i] == '4x Drop Rate in Battle Arena') {
            _root.arenaDropRate = Math.floor(_root.arenaDropRate * 4);
          }
          if (_root.eventList[yy][mm][dd][i] == '3x Drop Rate in Battle Arena') {
            _root.arenaDropRate = Math.floor(_root.arenaDropRate * 3);
          }
          if (_root.eventList[yy][mm][dd][i] == '2x Drop Rate in Battle Arena') {
            _root.arenaDropRate = Math.floor(_root.arenaDropRate * 2);
          }
          if (_root.eventList[yy][mm][dd][i] == '1.5x Drop Rate in Battle Arena') {
            _root.arenaDropRate = Math.floor(_root.arenaDropRate * 1.5);
          }
          ++i;
        }
        if (_root.saveid == 21) {
          _root.spawnSpeed += 50;
        }
        if (_root.saveid == 26) {
          _root.arenaExpMult += 700;
          _root.arenaCoinMult += 700;
          _root.arenaPixelMult += 700;
          _root.arenaDropRate += 700;
          _root.arenaRareRate += 700;
          _root.arenaEpicRate += 700;
          _root.spawnSpeed += 300;
        }
        if (_root.arenaExpMult > 1000) {
          _root.arenaExpMult = 1000;
        }
        if (_root.arenaCoinMult > 2000) {
          _root.arenaCoinMult = 2000;
        }
        if (_root.arenaPixelMult > 2000) {
          _root.arenaPixelMult = 2000;
        }
        if (_root.arenaDropRate > 5000) {
          _root.arenaDropRate = 5000;
        }
        if (_root.spawnSpeed > 500) {
          _root.spawnSpeed = 500;
        }
        if (_root.saveid == 22) {
          _root.arenaPixelMult = Math.floor(_root.arenaPixelMult * 2);
        }
        if (_root.save.arenaZone == 20 || _root.save.arenaZone == 52 || _root.save.arenaZone == 56 || _root.save.arenaZone == 68) {
          _root.arenaDropRate = 0;
        }
        if (_root.save.arenaZone >= 31 && _root.save.arenaZone <= 42) {
          _root.spawnSpeed = 100;
        }
        _root.trackZoneKill();
      }

      function regen() {
        _root.labCooldown -= 1;
        if (_root.save.arenaZone == 50) {
          if (enemy.lifespan >= 2) {
            if (_root.save.arenaCorruptHealth > 100) {
              _root.save.arenaCorruptHealth -= 2;
            }
            if (_root.save.arenaCorruptAttack > 100) {
              _root.save.arenaCorruptAttack -= 1;
            }
            if (_root.save.arenaCorruptDefense > 100) {
              _root.save.arenaCorruptDefense -= 2;
            }
            if (_root.save.arenaCorruptAccuracy > 100) {
              _root.save.arenaCorruptAccuracy -= 1;
            }
            if (_root.save.arenaCorruptEvasion > 100) {
              _root.save.arenaCorruptEvasion -= 2;
            }
          }
        }
        if (_root.autoExp > 0) {
          etg = Math.floor(_root.autoExp * _root.save.boost * Math.pow(_root.save.level, 0.6) * 0.04);
          if (etg > Math.ceil(_root.save.level * _root.save.level / 5)) {
            etg = Math.ceil(_root.save.level * _root.save.level / 5);
          }
          _root.gainEXP(etg);
        }
        if (_root.save.bannedB > 0) {
          etg2 = Math.floor((_root.autoExp * 3 + _root.save.bannedB) * Math.sqrt(_root.save.arenaLevel) * 2);
          if (_root.save.arenaLevel == 500) {
            etg2 = Math.floor(etg2 * 0.25);
          }
          if (etg2 > 25000 + _root.save.arenaLevel * 50) {
            etg2 = 25000 + _root.save.arenaLevel * 50;
          }
          _root.save.arenaExp += etg2;
        }
        if (_root.autoStealCoin > 0) {
          _root.gainCoin(_root.autoStealCoin);
          _root.autoStealCoin = 0;
        }
        i = 1;
        while (i <= 3) {
          _root['allyCooldown' + i] -= 1;
          if (_root['allyCooldown' + i] <= 0) {
            tempActive = _root['allyActive' + i];
            tempActiveX = _root['allyActive' + i + 'X'];
            tempActiveY = _root['allyActive' + i + 'Y'];
            tempActiveZ = _root['allyActive' + i + 'Z'];
            if (enemy.enemyID != 0 && enemy.skill != 'Self-Destruct') {
              if (tempActive == 'Attack: Regular') {
                dealDamage(tempActiveX, 0, 'Invisible Ally');
                _root['allyCooldown' + i] = tempActiveZ;
              } else {
                if (tempActive == 'Attack: Knockback') {
                  dealDamage(tempActiveX, tempActiveY, 'Invisible Ally');
                  _root['allyCooldown' + i] = tempActiveZ;
                } else {
                  if (tempActive == 'Attack: Poison') {
                    dealDamage(tempActiveX, 0, 'Invisible Ally');
                    enemy.poison += tempActiveY;
                    _root['allyCooldown' + i] = tempActiveZ;
                  } else {
                    if (tempActive == 'Attack: Weaken') {
                      dealDamage(tempActiveX, 0, 'Invisible Ally');
                      enemy.weaken += tempActiveY;
                      _root['allyCooldown' + i] = tempActiveZ;
                    } else {
                      if (tempActive == 'Attack: Blind') {
                        dealDamage(tempActiveX, 0, 'Invisible Ally');
                        enemy.blind += tempActiveY;
                        _root['allyCooldown' + i] = tempActiveZ;
                      } else {
                        if (tempActive == 'Attack: Stun') {
                          dealDamage(tempActiveX, 0, 'Invisible Ally');
                          enemy.stun += tempActiveY;
                          _root['allyCooldown' + i] = tempActiveZ;
                        } else {
                          if (tempActive == 'Attack: Power Down') {
                            dealDamage(tempActiveX, 0, 'Invisible Ally');
                            enemy.attack = Math.ceil(enemy.attack * (100 - tempActiveY) / 100);
                            _root['allyCooldown' + i] = tempActiveZ;
                          } else {
                            if (tempActive == 'Attack: Defense Down') {
                              dealDamage(tempActiveX, 0, 'Invisible Ally');
                              enemy.defense = Math.ceil(enemy.defense * (100 - tempActiveY) / 100);
                              _root['allyCooldown' + i] = tempActiveZ;
                            } else {
                              if (tempActive == 'Attack: Accuracy Down') {
                                dealDamage(tempActiveX, 0, 'Invisible Ally');
                                enemy.accuracy = Math.ceil(enemy.accuracy * (100 - tempActiveY) / 100);
                                _root['allyCooldown' + i] = tempActiveZ;
                              } else {
                                if (tempActive == 'Attack: Evasion Down') {
                                  dealDamage(tempActiveX, 0, 'Invisible Ally');
                                  enemy.evasion = Math.ceil(enemy.evasion * (100 - tempActiveY) / 100);
                                  _root['allyCooldown' + i] = tempActiveZ;
                                } else {
                                  if (tempActive == 'Attack: Silence') {
                                    dealDamage(tempActiveX, 0, 'Invisible Ally');
                                    if (Math.random() < tempActiveY / 100 && enemy.boss != true && enemy.ultra != true && enemy.skillLevel >= 0) {
                                      enemy.rampagePct = 0;
                                      enemy.explodeDamage = 1;
                                      enemy.skill = 'None';
                                      enemy.skillLevel = -1;
                                      enemy.rangeDamage = 0;
                                      showDamage('SILENCED', 16777215, enemy._x + enemy._width / 2, 40);
                                    }
                                    _root['allyCooldown' + i] = tempActiveZ;
                                  } else {
                                    if (tempActive == 'Attack: Ignore Defense') {
                                      dealDamage(tempActiveX, 0, 'Invisible Ally - Ignore Defense');
                                      _root['allyCooldown' + i] = tempActiveZ;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (_root.save.arenaBuffType == 0) {
              if (tempActive == 'Buff: Power') {
                _root.save.arenaBuffType = 1;
                _root.save.arenaBuffDuration = tempActiveX;
                _root['allyCooldown' + i] = tempActiveZ;
              } else {
                if (tempActive == 'Buff: Master') {
                  _root.save.arenaBuffType = 2;
                  _root.save.arenaBuffDuration = tempActiveX;
                  _root['allyCooldown' + i] = tempActiveZ;
                } else {
                  if (tempActive == 'Buff: Reward') {
                    _root.save.arenaBuffType = 3;
                    _root.save.arenaBuffDuration = tempActiveX;
                    _root['allyCooldown' + i] = tempActiveZ;
                  } else {
                    if (tempActive == 'Buff: Enrage') {
                      _root.save.arenaBuffType = 5;
                      _root.save.arenaBuffDuration = tempActiveX;
                      _root['allyCooldown' + i] = tempActiveZ;
                    } else {
                      if (tempActive == 'Buff: Elemental Boost') {
                        _root.save.arenaBuffType = 6;
                        _root.save.arenaBuffDuration = tempActiveX;
                        _root['allyCooldown' + i] = tempActiveZ;
                      } else {
                        if (tempActive == 'Buff: Invincibility') {
                          _root.save.arenaBuffType = 7;
                          _root.save.arenaBuffDuration = tempActiveX;
                          _root['allyCooldown' + i] = tempActiveZ;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (tempActive == 'HP Recovery' && _root.save.arenaZone != 24 && (_root.save.arenaZone < 30 || _root.save.arenaZone > 43)) {
              _root.save.arenaHealth += Math.floor(_root.maxHealth * tempActiveX / 100);
              _root['allyCooldown' + i] = tempActiveZ;
            } else {
              if (tempActive == 'Heal' && _root.save.arenaZone != 24 && (_root.save.arenaZone < 30 || _root.save.arenaZone > 43)) {
                if (_root.arenaZombify <= 0) {
                  _root.save.arenaHealth += Math.floor(_root.maxHealth * tempActiveX / 100);
                }
                if (enemy.zombie == true && enemy.enemyID != 0) {
                  _root.house.arena.dealDamage(tempActiveY, 0, 'Invisible Ally - Ignore Defense');
                }
                _root['allyCooldown' + i] = tempActiveZ;
              } else {
                if (tempActive == 'MP Recovery') {
                  _root.save.arenaMana += Math.floor(_root.maxMana * tempActiveX / 100);
                  _root['allyCooldown' + i] = tempActiveZ;
                } else {
                  if (tempActive == 'Spirit Recovery') {
                    _root.save.arenaSpirit += tempActiveX;
                    _root['allyCooldown' + i] = tempActiveZ;
                  } else {
                    if (tempActive == 'Buff Extension' && _root.save.arenaBuffType != 0 && _root.save.arenaBuffDuration > 0 && _root.save.arenaBuffDuration < 5999) {
                      _root.save.arenaBuffDuration += tempActiveX;
                      if (_root.save.arenaBuffDuration > 5999) {
                        _root.save.arenaBuffDuration = 5999;
                      }
                      _root['allyCooldown' + i] = tempActiveZ;
                    } else {
                      if (tempActive == 'Produce Loot: Coin') {
                        _root.incDt2();
                        stuffHolder.attachMovie('newLoot1', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': Math.floor(((tempActiveX * _root.arenaCoinMult / 100) * _root.save.boost / 100) * (0.9 + Math.random() * 0.2))});
                        _root['allyCooldown' + i] = tempActiveZ;
                      } else {
                        if (tempActive == 'Produce Loot: Pixel') {
                          _root.incDt2();
                          stuffHolder.attachMovie('newLoot7', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': Math.floor((tempActiveX * _root.arenaPixelMult / 100) * (0.9 + Math.random() * 0.2))});
                          _root['allyCooldown' + i] = tempActiveZ;
                        } else {
                          if (tempActive == 'Produce Loot: Material') {
                            _root.incDt2();
                            stuffHolder.attachMovie('newLoot6', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': Math.floor((tempActiveX * _root.arenaPixelMult / 100) * (0.9 + Math.random() * 0.2))});
                            _root['allyCooldown' + i] = tempActiveZ;
                          } else {
                            if (tempActive == 'Produce Loot: Stat') {
                              _root.incDt2();
                              stuffHolder.attachMovie('newLoot4', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 1});
                              _root['allyCooldown' + i] = tempActiveZ;
                            } else {
                              if (tempActive == 'Produce Loot: Rare Item') {
                                if (Math.random() < 0.02) {
                                  _root.incDt2();
                                  stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 1});
                                } else {
                                  if (Math.random() < 0.05) {
                                    _root.incDt2();
                                    stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 2});
                                  } else {
                                    if (Math.random() < 0.1) {
                                      _root.incDt2();
                                      stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 1});
                                    } else {
                                      if (Math.random() < 0.25) {
                                        _root.incDt2();
                                        stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 1});
                                      } else {
                                        _root.incDt2();
                                        stuffHolder.attachMovie('newLoot3', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 200 + Math.random() * 100, 'y': 150, 'lootValue': 20});
                                      }
                                    }
                                  }
                                }
                                _root['allyCooldown' + i] = tempActiveZ;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++i;
        }
        if (_root.save.arenaBuffDuration > 0) {
          if (_root.save.arenaBuffType >= 1 && _root.save.arenaBuffType <= 3) {
            _root.save.arenaBuffDuration -= (1 / _root.potionEfficiency) * 100;
          } else {
            _root.save.arenaBuffDuration -= 1;
          }
        } else {
          _root.save.arenaBuffDuration = 0;
          _root.save.arenaBuffType = 0;
          if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Auto Buff Gem') {
            _root.save.arenaBuffDuration = 15 + random(16);
            _root.save.arenaBuffType = 1 + random(3);
            if (Math.random() < 0.4) {
              _root.save.arenaBuffType = 5 + random(2);
            }
          }
        }
        if (_root.save.inventoryName[_root.save.arenaPendant] == 'Cursed Pendant') {
          _root.save.arenaBuffDuration = 1;
          _root.save.arenaBuffType = 4;
        }
        if (_root.save.inventoryName[_root.save.arenaTrinket] == 'Auto Buff Gem' && _root.save.inventoryBonus[_root.save.arenaTrinket] != 'Auto Buff - Random' && _root.save.inventoryBonus[_root.save.arenaTrinket] != '') {
          _root.save.arenaBuffDuration = 1;
          _root.save.arenaBuffType = 0;
          if (_root.save.inventoryBonus[_root.save.arenaTrinket] == 'Auto Buff - Power') {
            _root.save.arenaBuffType = 1;
          }
          if (_root.save.inventoryBonus[_root.save.arenaTrinket] == 'Auto Buff - Master') {
            _root.save.arenaBuffType = 2;
          }
          if (_root.save.inventoryBonus[_root.save.arenaTrinket] == 'Auto Buff - Reward') {
            _root.save.arenaBuffType = 3;
          }
          if (_root.save.inventoryBonus[_root.save.arenaTrinket] == 'Auto Buff - Enrage') {
            _root.save.arenaBuffType = 5;
          }
          if (_root.save.inventoryBonus[_root.save.arenaTrinket] == 'Auto Buff - Boost') {
            _root.save.arenaBuffType = 6;
          }
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
          _root.save.arenaMana = 0;
          _root.save.arenaSpirit = 0;
        } else {
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            if (Math.random() < _root.save.arenaSkill[24] * 0.01) {
              _root.save.arenaSpirit += 2;
            }
            _root.save.arenaMana = 0;
            _root.save.arenaFury = 0;
          } else {
            _root.save.arenaSpirit = 0;
            _root.save.arenaFury = 0;
          }
        }
        if (_root.save.arenaSkill[49] < 1 && _root.save.inventoryName[_root.save.arenaWeapon] != 'CHAOS AURA') {
          _root.manaPower = false;
        }
        if (_root.areaUnderwater == true) {
          _root.save.arenaOxygenPenalty += 1;
          if (_root.save.arenaOxygenPenalty > 30 && _root.save.arenaBuffType != 11) {
            if (_root.save.arenaZone != 59) {
              takeDamage(Math.ceil((_root.save.arenaOxygenPenalty - 30) * (_root.save.arenaOxygenPenalty - 20) / 5), 'Drown');
            } else {
              takeDamage((_root.save.arenaOxygenPenalty - 30) * 900, 'Drown');
            }
          }
        } else {
          _root.save.arenaOxygenPenalty = 0;
        }
        if (_root.save.arenaRage > _root.rageDepletion / 100) {
          _root.save.arenaRage -= _root.rageDepletion / 100;
        } else {
          _root.save.arenaRage = 0;
        }
        if (_root.arenaPoison > 0) {
          poisonDamage = Math.floor(_root.save.arenaHealth / 5);
          if (poisonDamage > _root.save.arenaHealth - 1) {
            poisonDamage = _root.save.arenaHealth - 1;
          }
          if (poisonDamage > 1000000) {
            poisonDamage = 1000000;
          }
          _root.save.arenaHealth -= poisonDamage;
          _root.arenaPoison -= 1;
        }
        if (_root.chargeX < 4) {
          _root.chargeX += 1;
        }
        if (_root.chargeC < 4) {
          _root.chargeC += 1;
        }
        if (_root.chargeV < 4) {
          _root.chargeV += 1;
        }
        if (_root.chargeB < 4) {
          _root.chargeB += 1;
        }
        if (_root.spiritDouble > 0) {
          _root.spiritDouble -= 1;
        }
        if (_root.spiritCrit > 0) {
          _root.spiritCrit -= 1;
        }
        if (_root.spiritInsta > 0) {
          _root.spiritInsta -= 1;
        }
        if (_root.arenaWeaken > 0) {
          _root.arenaWeaken -= 1;
        }
        if (_root.arenaBlind > 0) {
          _root.arenaBlind -= 1;
        }
        if (_root.arenaSlow > 0) {
          _root.arenaSlow -= 1;
        }
        if (_root.arenaPotionBlock > 0) {
          _root.arenaPotionBlock -= 1;
        }
        if (_root.arenaZombify > 0) {
          _root.arenaZombify -= 1;
        }
        if (_root.arenaSoap > 0) {
          _root.arenaSoap -= 1;
        }
        _root.noSpec = false;
        if (_root.specInfinity > 0) {
          _root.specInfinity -= 1;
          specDisp.gotoAndStop(2);
        } else {
          if (_root.specPierce > 0) {
            _root.specPierce -= 1;
            specDisp.gotoAndStop(3);
          } else {
            if (_root.specPolearm > 0) {
              _root.specPolearm -= 1;
              specDisp.gotoAndStop(4);
            } else {
              if (_root.specTrueshot > 0) {
                _root.specTrueshot -= 1;
                specDisp.gotoAndStop(5);
              } else {
                if (_root.specSphere > 0) {
                  _root.specSphere -= 1;
                  specDisp.gotoAndStop(6);
                } else {
                  if (_root.specDispel > 0) {
                    _root.specDispel -= 1;
                    specDisp.gotoAndStop(7);
                  } else {
                    if (_root.specGlory > 0) {
                      _root.specGlory -= 1;
                      specDisp.gotoAndStop(8);
                    } else {
                      _root.noSpec = true;
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.reviveCooldown > 0) {
          _root.reviveCooldown -= 1;
          if (_root.reviveCooldown % 10 == 1 && _root.maxHealth == 19999999) {
            _root.reviveCooldown -= 1;
          }
        }
        if (_root.save.arenaZone == 24) {
          _root.reviveCooldown = 240 - _root.save.arenaSkill[64] * 4;
        }
        if (_root.save.arenaZone == 7 || _root.save.arenaZone == 24 || _root.save.arenaZone == 52 || _root.save.arenaZone == 54 || _root.save.arenaZone == 56 || _root.save.arenaZone == 59 || _root.save.arenaZone == 61 || _root.save.arenaZone == 68 || _root.save.arenaZone == 78 || _root.save.arenaZone == 82) {
          if (cgtHP._currentframe != 2) {
            cgtHP.gotoAndStop(2);
          }
        } else {
          if (cgtHP._currentframe != 1) {
            cgtHP.gotoAndStop(1);
          }
        }
      }

      function actualRegen() {
        if (enemy.enemyID != 0) {
          if (_root.specSphere > 0) {
            dealDamage(200 + _root.save.arenaSkill[3] * 5, 0, '');
          }
          if (_root.specGlory > 0) {
            dealDamage(400 + _root.save.arenaSkill[3] * 10, 0, '');
          }
        }
        if (_root.specGlory > 0) {
          if (Math.random() < 0.1) {
            _root.incDt2();
            stuffHolder.attachMovie('newLoot10', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 150 + Math.random() * 200, 'y': -50, 'lootValue': 5});
          }
          if (Math.random() < 0.05) {
            _root.incDt2();
            stuffHolder.attachMovie('newLoot16', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 150 + Math.random() * 200, 'y': -50, 'lootValue': 2});
          }
          if (Math.random() < 0.02) {
            _root.incDt2();
            stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 150 + Math.random() * 200, 'y': -50, 'lootValue': 1});
          }
          if (Math.random() < 0.005) {
            _root.incDt2();
            stuffHolder.attachMovie('newLoot11', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': 150 + Math.random() * 200, 'y': -50, 'lootValue': 2});
          }
        }
        _root.save.arenaHealth += Math.floor(_root.hpRecover / 10);
        _root.save.arenaMana += Math.floor(_root.mpRecover / 10);
      }

      function dealDamage(skillPower, knockBack, special) {
        if (_root.specInfinity > 0) {
          _root.save.arenaMana = _root.maxMana;
        }
        if (_root.arenaBot > 48000) {
          _root.showPopup('Exhaustion', 'You can no longer attack as you are exhausted. Release the attack key and take a short break.');
        } else {
          if (_root.arenaBot > 24000) {
            _root.showPopup('Exhaustion', 'Release the attack key and take a short break. Active skills will stop working in ' + _root.withComma((48000 - _root.arenaBot) / 40) + ' sec.');
          }
        }
        if (_root.save.arenaZone == 24) {
          knockBack *= 0.1;
        }
        if (_root.save.arenaZone >= 31 && _root.save.arenaZone <= 42) {
          knockBack *= 0.1;
        }
        if (_root.save.arenaZone == 52) {
          knockBack *= 0.1;
        }
        if (_root.save.arenaZone == 56 && special != 'Poison') {
          _root.areaRevengeRage += 1;
          if (_root.areaRevengeRage >= 150) {
            takeDamage(99999999999.0, 'Cannot Dodge');
          }
          _root.areaRevengeCalm = 0;
        }
        hitChancePenalty = +Math.floor((enemy.level - _root.save.level) / 100);
        if (hitChancePenalty > 30) {
          hitChancePenalty = 30;
        }
        if (_root.save.arenaZone == 82 && (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler')) {
          hitChancePenalty = 999;
        }
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 3 && _root.setHighest >= 2) {
          hitChancePenalty = 999;
          _root.fightStat2 = 'You have 2+ items of the same set equipped!';
        }
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 3 && _root.save.arenaWeapon != 0) {
          hitChancePenalty = 999;
        }
        if (enemy.level > _root.save.level) {
          hitChancePenalty += 10;
          if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
            hitChancePenalty += 20;
          } else {
            if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
              hitChancePenalty += 10;
            }
          }
        }
        if (_root.worstMoon == true) {
          hitChancePenalty += 5;
        }
        finalEvasion = enemy.evasion;
        if (enemy.blind > 0) {
          finalEvasion = enemy.evasion * (100 - _root.blindPower) / 100;
        }
        if (Math.random() > hitChancePenalty / 100 && (Math.random() < _root.accuracy / finalEvasion - 0.1 || Math.random() < _root.accuracyPct / 100) || special == 'Ignore Evasion') {
          enemy.crescendo += 1;
          if (enemy.crescendo <= _root.save.arenaSkill[63]) {
            enemy.crescendoMult *= 1.02;
          }
          finalIgnoreDef = _root.ignoreDefense;
          if (enemy.weaken > 0) {
            finalIgnoreDef = _root.ignoreDefense + (100 - _root.ignoreDefense) * _root.weakenPower / 100;
          }
          if (special == 'Ignore Defense') {
            finalIgnoreDef = 100;
          }
          if (special == 'Pierce' && enemy.defense < 99999999999.0) {
            finalIgnoreDef = 100;
          }
          damageDealt = Math.ceil(((_root.minDamage + random(_root.maxDamage - _root.minDamage + 1)) * (skillPower / 100) - enemy.defense * (100 - finalIgnoreDef) / 100) * (_root.areaDamagePct / 100));
          if (special == 'Pierce' && damageDealt < 50) {
            damageDealt = 50;
          }
          if (enemy.crescendo == 1) {
            enemy.defense = Math.ceil(enemy.defense * (1 - _root.save.arenaSkill[63] * 0.005));
            enemy.evasion = Math.ceil(enemy.evasion * (1 - _root.save.arenaSkill[63] * 0.005));
          }
          if (special == 'Heal') {
            damageDealt = Math.ceil((_root.minDamage + random(_root.maxDamage - _root.minDamage + 1)) * (skillPower / 100) * (_root.areaDamagePct / 100));
          }
          if (special == 'Invisible Ally - Ignore Defense') {
            damageDealt = Math.ceil((_root.minDamage + random(_root.maxDamage - _root.minDamage + 1)) * (skillPower / 100) * (_root.areaDamagePct / 100));
            allyDamageMult = 1 + (_root.enemyList[_root.save.arenaAlly].level - enemy.level) / 100;
            if (allyDamageMult > 3) {
              allyDamageMult = 3;
            }
            if (allyDamageMult < 0.5) {
              allyDamageMult = 0.5;
            }
            damageDealt = Math.floor(damageDealt * allyDamageMult);
          }
          if (special == 'Invisible Ally') {
            allyDamageMult = 1 + (_root.enemyList[_root.save.arenaAlly].level - enemy.level) / 100;
            if (allyDamageMult > 3) {
              allyDamageMult = 3;
            }
            if (allyDamageMult < 0.5) {
              allyDamageMult = 0.5;
            }
            damageDealt = Math.floor(damageDealt * allyDamageMult);
          }
          if (special == 'Roundhouse Kick') {
            damageDealt = Math.ceil((_root.minDamage + random(_root.maxDamage - _root.minDamage + 1)) * (skillPower / 100) * (_root.areaDamagePct / 100));
            rangedAttack._alpha = 100;
            rangedAttack.gotoAndStop(10);
          }
          if (special == 'Bacon') {
            rangedAttack._alpha = 100;
            if (_root.save.vegetarianMode == true) {
              rangedAttack.gotoAndStop(12);
            } else {
              rangedAttack.gotoAndStop(11);
            }
          }
          if (_root.save.arenaZone == 52) {
            damageDealt = Math.ceil(Math.pow(damageDealt, 0.8) * 40);
            if (isNaN(damageDealt)) {
              damageDealt = 50;
            }
          }
          if (_root.manaPower == true) {
            if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
              damageDealt = Math.ceil(damageDealt * (2 + _root.save.arenaFury / 100));
              _root.save.arenaFury -= 1;
              if (_root.save.arenaFury <= 0) {
                _root.save.arenaFury = 0;
                _root.manaPower = false;
              }
            } else {
              if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
                if (_root.save.arenaSpirit >= _root.maxSpirit - 10) {
                  spiritToConsume = _root.save.arenaSpirit + 10 - _root.maxSpirit;
                  if (spiritToConsume < 0) {
                    spiritToConsume = 0;
                  }
                  if (spiritToConsume > 10) {
                    spiritToConsume = 10;
                  }
                } else {
                  spiritToConsume = 0;
                }
                _root.save.arenaSpirit -= spiritToConsume;
                damageDealt = Math.ceil(damageDealt * (1 + spiritToConsume / 10));
              } else {
                manaToConsume = Math.ceil(_root.save.arenaMana / 50);
                if (_root.save.arenaMana > 5000000) {
                  manaToConsume = 100000 + Math.ceil((_root.save.arenaMana - 5000000) / 100);
                }
                if (_root.save.arenaMana > 10000000) {
                  manaToConsume = 150000 + Math.ceil((_root.save.arenaMana - 10000000) / 200);
                }
                if (manaToConsume > _root.save.arenaMana) {
                  manaToConsume = _root.save.arenaMana;
                }
                _root.save.arenaMana -= manaToConsume;
                if (_root.specInfinity > 0) {
                  _root.save.arenaMana = _root.maxMana;
                }
                damageDealt = Math.ceil(damageDealt * (1 + manaToConsume / 50000));
              }
            }
          }
          damagePenalty = 40 + (Math.pow(enemy.level, 1.12) / (_root.save.level + _root.save.arenaLevel * 10 + 999) - 1) * 50;
          if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
            damagePenalty += (8999 - _root.save.level) / 450;
          }
          if (damagePenalty < 0) {
            damagePenalty = 0;
          }
          if (enemy.level > _root.save.level) {
            damagePenalty += 10;
            if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
              damagePenalty += 20;
            } else {
              if (_root.save.gDifficulty >= 2 && _root.save.level < 8999) {
                damagePenalty += 10;
              }
            }
          }
          if (_root.worstMoon == true) {
            damagePenalty += 5;
          }
          if (enemy.boss == true) {
            damagePenalty += 20;
          }
          if (enemy.zombie == true && special != 'Heal' && _root.save.arenaZone != 20) {
            damagePenalty += 70;
          }
          if (_root.save.gDifficulty >= 3 && _root.save.level < 8999 && damagePenalty > 95) {
            if (damagePenalty > 99) {
              damagePenalty = 99;
            }
          } else {
            if (damagePenalty > 95) {
              damagePenalty = 95;
            }
          }
          if (_root.apocalypse == true) {
            damagePenalty += (100 - damagePenalty) / 2;
          }
          if (enemy.enemyID == 331 && _root.save.level < 9000) {
            damagePenalty = 100;
          }
          if (enemy.ultra != true) {
            if (_root.save.inventoryName[_root.save.arenaHat] == 'ULTRA HAT' || _root.save.inventoryName[_root.save.arenaShirt] == 'ULTRA SHIRT' || _root.save.inventoryName[_root.save.arenaGloves] == 'ULTRA GLOVES' || _root.save.inventoryName[_root.save.arenaPants] == 'ULTRA PANTS' || _root.save.inventoryName[_root.save.arenaShoes] == 'ULTRA SHOES') {
              damagePenalty = 100;
            }
          }
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Sword of Ascendant' && enemy.enemyID != 331) {
            damagePenalty = 100;
          }
          if (_root.save.inventoryName[_root.save.arenaWeapon] != 'Sword of Ascendant' && enemy.enemyID == 331) {
            damagePenalty = 100;
          }
          damageDealt = Math.floor(damageDealt * (100 - damagePenalty) / 100);
          if (enemy.name == 'Secret Crystal' && _root.save.inventorySubtype[_root.save.arenaWeapon] == 'Mining Tool' && damagePenalty < 100) {
            damageDealt = 2000;
          }
          if (enemy.name == 'Pirate Gem' && _root.save.inventorySubtype[_root.save.arenaWeapon] == 'Mining Tool' && damagePenalty < 100) {
            damageDealt = 6;
          }
          if (_root.save.arenaZone == 21 && _root.save.inventorySubtype[_root.save.arenaWeapon] == 'Mining Tool' && damagePenalty < 100) {
            damageDealt = 4;
          }
          if (_root.save.arenaZone >= 23 && _root.save.arenaZone <= 25 && damagePenalty < 100) {
            if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Special Wand') {
              damageDealt = Math.ceil((Math.min(_root.save.level, 5000) / 10 + _root.save.arenaLevel + 500) * skillPower / 100);
              if (_root.arenaWeaken > 0) {
                damageDealt = Math.floor(damageDealt * 0.6);
              }
            }
            if (enemy.name == 'DON\'T ATTACK!!!') {
              damageDealt = 1;
            }
          }
          if (enemy.boss == true) {
            damageDealt = Math.ceil(damageDealt * (1 + _root.bossDamage / 100));
          } else {
            damageDealt = Math.ceil(damageDealt * (1 + _root.nonBossDamage / 100));
          }
          damageDealt = Math.ceil(damageDealt * enemy.crescendoMult);
          if (_root.turnBased == true) {
            damageDealt = Math.ceil(damageDealt * 0.99);
          }
          if (_root.save.arenaZone == 20) {
            damageDealt += Math.floor(Math.min(Math.sqrt((_root.minDamage + random(_root.maxDamage - _root.minDamage)) / 1000), 100) * skillPower / 100);
            if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Revolution Pyrabow' && _root.save.inventoryName[_root.save.arenaEarring] == 'Revolution Earrings') {
              damageDealt = Math.floor(damageDealt * 1.2);
            }
          }
          if (_root.save.arenaZone == 47 && _root.setCount[32] >= 6) {
            damageDealt = Math.floor(damageDealt * 1.2);
          }
          if (_root.save.arenaZone == 54 && _root.setCount[72] >= 2) {
            damageDealt = Math.floor(damageDealt * 1.2);
          }
          if (_root.save.arenaZone == 78 && (_root.setCount[53] >= 6 || _root.setCount[54] >= 6)) {
            damageDealt = Math.floor(damageDealt * 1.2);
          }
          if (damageDealt < 1 || isNaN(damageDealt)) {
            damageDealt = 1;
          }
          if (_root.save.arenaZone == 54) {
            if (_root.arenaChaosPhase == 2) {
              damageDealt = 1;
            }
            if (_root.arenaChaosPhase == 5 || _root.arenaChaosPhase == 6) {
              _root.save.arenaHealth = Math.ceil(_root.save.arenaHealth * 0.7);
            }
          }
          if (hero.Xalpha == 30) {
            damageDealt = 0;
          }
          critHit = false;
          coupBonus = 0;
          if (enemy.hp < enemy.maxhp) {
            if (enemy.poison > 0) {
              coupBonus += _root.save.arenaSkill[38] * 0.002;
            }
            if (enemy.weaken > 0) {
              coupBonus += _root.save.arenaSkill[38] * 0.002;
            }
            if (enemy.blind > 0) {
              coupBonus += _root.save.arenaSkill[38] * 0.002;
            }
            if (enemy.stun > 0) {
              coupBonus += _root.save.arenaSkill[38] * 0.002;
            }
            if (enemy.slow > 0) {
              coupBonus += _root.save.arenaSkill[38] * 0.002;
            }
          }
          damageDealt += Math.ceil(damageDealt * coupBonus);
          damageDealt += Math.ceil(damageDealt * nextAttack);
          if (_root.save.restTime > 0) {
            damageDealt = Math.floor(damageDealt * (1.1 + _root.save.restEfficiency[4] * 0.01));
          }
          if (special != 'Poison' && special != 'Reflect') {
            if (_root.save.arenaRing == 18) {
              _root.arenaCombo += 1;
            }
            if (Math.random() < _root.abilExtraCombo / 100) {
              _root.arenaCombo += 3;
            }
          }
          if (_root.spiritCrit > 0) {
            _root.arenaCombo += 1;
            damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 40);
            critHit = true;
          } else {
            if (special == 'Reflect' && _root.save.arenaRing == 8 || special == 'Rapid Fire') {
              _root.arenaCombo += 1;
              damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
              critHit = true;
            } else {
              if (enemy.enemyID != 0 && enemy.hp / enemy.maxhp <= _root.save.arenaSkill[38] * 0.01) {
                _root.arenaCombo += 1;
                damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                critHit = true;
              } else {
                if (_root.save.arenaZone == 81 && 100 - enemy.explodeCount / 36 <= _root.save.arenaSkill[38]) {
                  _root.arenaCombo += 1;
                  damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                  critHit = true;
                } else {
                  if (_root.save.arenaZone == 84 && 100 - enemy.explodeCount / 24 <= _root.save.arenaSkill[38]) {
                    _root.arenaCombo += 1;
                    damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                    critHit = true;
                  } else {
                    if (special == 'Bacon' && _root.save.robaconLevel >= 125 && _root.worstMoon != true) {
                      _root.arenaCombo += 1;
                      damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                      critHit = true;
                    } else {
                      if (special == 'Explosive' && _root.worstMoon != true) {
                        _root.arenaCombo += 1;
                        damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                        critHit = true;
                      } else {
                        if (Math.random() * 100 < _root.criticalChance) {
                          if (_root.worstMoon != true) {
                            _root.arenaCombo += 1;
                          }
                          damageDealt = Math.ceil(damageDealt * _root.criticalDamage / 100);
                          critHit = true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (_root.save.arenaZone == 50 && special != 'Poison') {
            if (_root.save.arenaCorruptHealth < 1000 && damageDealt > enemy.maxhp * 1) {
              _root.save.arenaCorruptHealth += 10;
            } else {
              if (_root.save.arenaCorruptHealth < 1000 && damageDealt > enemy.maxhp * 0.4) {
                _root.save.arenaCorruptHealth += 2;
              } else {
                if (_root.save.arenaCorruptHealth < 2000 && damageDealt > enemy.maxhp * 0.1) {
                  _root.save.arenaCorruptHealth += 1;
                } else {
                  if (_root.save.arenaCorruptHealth > 200 && damageDealt < enemy.maxhp * 0.04) {
                    _root.save.arenaCorruptHealth -= 10;
                  } else {
                    if (_root.save.arenaCorruptHealth > 50 && damageDealt < enemy.maxhp * 0.04) {
                      _root.save.arenaCorruptHealth -= 1;
                    }
                  }
                }
              }
            }
            if (_root.save.arenaCorruptDefense < 1000 && damageDealt > enemy.defense * 10) {
              _root.save.arenaCorruptDefense += 10;
            } else {
              if (_root.save.arenaCorruptDefense < 1000 && damageDealt > enemy.defense * 5) {
                _root.save.arenaCorruptDefense += 2;
              } else {
                if (_root.save.arenaCorruptDefense < 2000 && damageDealt > enemy.defense * 0.9) {
                  _root.save.arenaCorruptDefense += 1;
                } else {
                  if (_root.save.arenaCorruptDefense > 200 && damageDealt < enemy.defense * 0.2) {
                    _root.save.arenaCorruptDefense -= 10;
                  } else {
                    if (_root.save.arenaCorruptDefense > 50 && damageDealt < enemy.defense * 0.2) {
                      _root.save.arenaCorruptDefense -= 1;
                    }
                  }
                }
              }
            }
            if (_root.save.arenaCorruptEvasion < 200) {
              _root.save.arenaCorruptEvasion += 5;
            } else {
              if (_root.save.arenaCorruptEvasion < 1000) {
                _root.save.arenaCorruptEvasion += 2;
              } else {
                if (_root.save.arenaCorruptEvasion < 2000) {
                  _root.save.arenaCorruptEvasion += 1;
                }
              }
            }
          }
          _root.incDt();
          if (enemy.immune == true) {
            damageDealt = 1;
          }
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Eric\'s Gun-Shovel' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Eric\'s Shovel') {
            if (damageDealt > 8888888888.0) {
              damageDealt = 8888888888.0;
            } else {
              if (damageDealt > 888888888) {
                damageDealt = 888888888;
              } else {
                if (damageDealt > 88888888) {
                  damageDealt = 88888888;
                } else {
                  if (damageDealt > 8888888) {
                    damageDealt = 8888888;
                  } else {
                    if (damageDealt > 888888) {
                      damageDealt = 888888;
                    } else {
                      if (damageDealt > 88888) {
                        damageDealt = 88888;
                      } else {
                        if (damageDealt > 8888) {
                          damageDealt = 8888;
                        } else {
                          if (damageDealt > 888) {
                            damageDealt = 888;
                          } else {
                            if (damageDealt > 88) {
                              damageDealt = 88;
                            } else {
                              if (damageDealt > 8) {
                                damageDealt = 8;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (_root.save.arenaZone >= 23 && _root.save.arenaZone <= 25) {
            if (damageDealt > 200000) {
              damageDealt = 200000;
            }
          }
          if (enemy.enemyID == 440) {
            if (damageDealt > 1900000000) {
              damageDealt = 1900000000;
            }
            if (damageDealt > 380000000 && enemy.lifespan < 30) {
              damageDealt = 380000000;
            }
          }
          damageDealt = Math.floor(damageDealt * (1 - _root.curseCount * 0.1));
          if (_root.save.arenaMaxDamage < damageDealt) {
            _root.save.arenaMaxDamage = damageDealt;
          }
          if (special == 'Poison') {
            showDamage(damageDealt, 10092288, enemy._x + enemy._width / 2, 40);
          } else {
            if (special == 'Quick Attack') {
              if (critHit == true) {
                showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 80);
              } else {
                showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 80);
              }
            } else {
              if (special == 'Quick Attack 2') {
                if (critHit == true) {
                  showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 70);
                } else {
                  showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 70);
                }
              } else {
                if (special == 'Quick Attack 3') {
                  if (critHit == true) {
                    showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 60);
                  } else {
                    showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 60);
                  }
                } else {
                  if (special == 'Quick Attack 4') {
                    if (critHit == true) {
                      showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 50);
                    } else {
                      showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 50);
                    }
                  } else {
                    if (special == 'Rapid Fire') {
                      showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 40);
                    } else {
                      if (special == 'Ultimate Attack') {
                        _root.arenaCombo += 3;
                        if (critHit == true) {
                          showDamage(_root.withComma(damageDealt) + ' x 4', 14496512, enemy._x + enemy._width / 2, 50);
                        } else {
                          showDamage(_root.withComma(damageDealt) + ' x 4', 14522624, enemy._x + enemy._width / 2, 50);
                        }
                        damageDealt *= 4;
                      } else {
                        if (special == 'Double Hit') {
                          if (critHit == true) {
                            showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 100);
                          } else {
                            showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 100);
                          }
                        } else {
                          if (special == 'Explosive') {
                            showDamage(damageDealt, 16777215, enemy._x + enemy._width / 2, 40);
                          } else {
                            if (critHit == true) {
                              showDamage(damageDealt, 14496512, enemy._x + enemy._width / 2, 90);
                            } else {
                              showDamage(damageDealt, 14522624, enemy._x + enemy._width / 2, 90);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (_root.autoSteal > 0 && !isNaN(_root.autoSteal) && damageDealt > 0 && !isNaN(damageDealt)) {
            damagePct = (damageDealt / enemy.maxhp) * 100;
            if (damagePct > 200) {
              damagePct = 200;
            }
            if (damagePct < 0) {
              damagePct = 0;
            }
            _root.autoStealCoin += Math.ceil(damagePct * _root.autoSteal * enemy.coin * _root.save.boost / 2500000);
            _root.save.arenaPixel += Math.ceil(damagePct * _root.autoSteal * enemy.pixel / 25000);
          }
          enemy.hp -= damageDealt;
          if (_root.save.arenaZone == 54) {
            if (_root.arenaChaosPhase == 3 || _root.arenaChaosPhase == 6) {
              enemy.hp += damageDealt * 3;
            }
          }
          if (_root.save.arenaZone == 81) {
            enemy.hp += damageDealt;
            _root.areaDamage += Math.floor(damageDealt / 90000000);
            _root.areaDamageRemainder += damageDealt % 90000000;
            if (_root.areaDamageRemainder >= 90000000) {
              _root.areaDamageRemainder -= 90000000;
              _root.areaDamage += 1;
            }
          }
          if (_root.save.arenaZone == 84) {
            enemy.hp += damageDealt;
            _root.areaDamage += damageDealt;
          }
          instantKillChance = _root.instantKill / 100;
          if (enemy.boss == true) {
            instantKillChance = 0;
          }
          if (enemy.hp > enemy.maxhp * 0.5) {
            instantKillChance = 0;
          }
          if (Math.random() < instantKillChance || _root.spiritInsta > 0 || special == 'Headshot') {
            if (_root.save.arenaZone != 52 && enemy.boss != true && enemy.ultra != true) {
              enemy.hp = 0;
              showDamage('Instant Kill', 13421772, enemy._x + enemy._width / 2, 40);
            }
          }
          if (_root.save.arenaZone == 20) {
            _root.raidDamage += damageDealt;
          }
          if (damageDealt > 0) {
            toDrain = Math.ceil(Math.pow(damageDealt, 0.4) * _root.lifeDrain * 5);
            maxDrain = Math.floor(_root.maxHealth * _root.lifeDrain / 1000);
            if (toDrain > maxDrain) {
              toDrain = maxDrain;
            }
            if (_root.save.arenaHealth <= 0) {
              toDrain = 0;
            }
            if (special != 'Poison' && special != 'Reflect') {
              _root.save.arenaHealth += toDrain;
            }
            if (special == 'Absorb') {
              _root.save.arenaHealth += Math.floor(_root.maxHealth * Math.floor(_root.save.arenaSkill[3] * 1 + 10) / 100);
              _root.save.arenaMana += Math.floor(_root.maxMana * Math.floor(_root.save.arenaSkill[3] * 0.2 + 2) / 100);
            }
            if (special == 'Threaten') {
              enemy.stun = 3;
              if (enemy.threatCount < 1) {
                enemy.threatCount = 1;
                enemy.attack = Math.ceil(enemy.attack * (0.88 - _root.save.arenaSkill[3] * 0.006));
                enemy.rangeDamage = Math.ceil(enemy.rangeDamage * (0.88 - _root.save.arenaSkill[3] * 0.006));
              } else {
                if (enemy.threatCount < 10) {
                  enemy.threatCount += 1;
                  enemy.attack = Math.ceil(enemy.attack * (0.98 - _root.save.arenaSkill[3] * 0.001));
                  enemy.rangeDamage = Math.ceil(enemy.rangeDamage * (0.98 - _root.save.arenaSkill[3] * 0.001));
                }
              }
            }
            if (special == 'Hamstring') {
              if (Math.random() < 0.05 + _root.save.arenaSkill[3] / 200 && enemy.slow <= -0.5) {
                enemy.slow = 1;
                showDamage('SLOW', 10092543, enemy._x + enemy._width / 2, 40);
              }
            }
            if (special == 'Hyper Cannonball') {
              enemy.stun = 3;
            }
            if (special == 'Hyper EXPlosion') {
              if (enemy.exp >= 20000) {
                enemy.exp += Math.floor(4000 + _root.save.arenaSkill[3] * 400);
              } else {
                enemy.exp = Math.floor(enemy.exp * (1.2 + _root.save.arenaSkill[3] * 0.02));
              }
              enemy.stun = 3;
            }
            _root.save.arenaMana += Math.floor(_root.manaLeech * 25);
            if (enemy.boss == true && Math.random() < _root.save.arenaSkill[37] * 0.01) {
              _root.save.arenaSpirit += 3;
            }
          }
          if (damageDealt > 0 && enemy.speed > 0) {
            if (enemy.boss == true) {
              knockBack = Math.ceil(knockBack * 0.7);
            }
            if (knockBack > 0 && enemy.curSpeed > knockBack * -1) {
              enemy.curSpeed = knockBack * -1;
            }
            if (special == 'Magnetic') {
              enemy.magImmune = 15;
              enemy.magnetCount += 1;
              magEff = random(100) + 1;
              trace(magEff);
              if (magEff <= 70 || enemy.magnetCount > 10) {
                lootValue = Math.floor(((1000 + _root.arenaSkillSpecLevel * 100) * _root.arenaCoinMult * _root.save.boost / 10000) * (0.9 + Math.random() * 0.2));
                if (_root.save.permaBanPenalty[11] == 3) {
                  lootValue = Math.floor(lootValue * 2);
                } else {
                  if (_root.save.permaBanPenalty[11] == 2) {
                    lootValue = Math.floor(lootValue * 1.6);
                  } else {
                    if (_root.save.permaBanPenalty[11] == 1) {
                      lootValue = Math.floor(lootValue * 1.4);
                    }
                  }
                }
                _root.incDt2();
                stuffHolder.attachMovie('newLoot1', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': enemy._x + enemy._width / 2, 'y': 150, 'lootValue': lootValue});
              } else {
                if (magEff <= 90) {
                  lootValue = 700;
                  if (_root.save.permaBanPenalty[11] == 3) {
                    lootValue = Math.floor(lootValue * 2);
                  } else {
                    if (_root.save.permaBanPenalty[11] == 2) {
                      lootValue = Math.floor(lootValue * 1.6);
                    } else {
                      if (_root.save.permaBanPenalty[11] == 1) {
                        lootValue = Math.floor(lootValue * 1.4);
                      }
                    }
                  }
                  _root.incDt2();
                  stuffHolder.attachMovie('newLoot2', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': enemy._x + enemy._width / 2, 'y': 150, 'lootValue': lootValue});
                } else {
                  if (magEff <= 99 || _root.save.wcDropToday >= 25000 || Math.random() < 0.7) {
                    lootValue = 7;
                    if (_root.save.permaBanPenalty[11] == 3) {
                      lootValue = Math.floor(lootValue * 2);
                    } else {
                      if (_root.save.permaBanPenalty[11] == 2) {
                        lootValue = Math.floor(lootValue * 1.6);
                      } else {
                        if (_root.save.permaBanPenalty[11] == 1) {
                          lootValue = Math.floor(lootValue * 1.4);
                        }
                      }
                    }
                    _root.incDt2();
                    stuffHolder.attachMovie('newLoot3', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': enemy._x + enemy._width / 2, 'y': 150, 'lootValue': lootValue});
                  } else {
                    if (_root.save.wcDropToday < 25000) {
                      _root.save.wcDropToday += 1;
                      lootValue = 1;
                      _root.incDt2();
                      stuffHolder.attachMovie('newLoot20', 'newLoot' + _root.summonCount, _root.antiLag2 + 500, {'x': enemy._x + enemy._width / 2, 'y': 150, 'lootValue': lootValue});
                    }
                  }
                }
              }
            }
          }
          _root.arenaCombo += 1;
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            _root.save.arenaSpirit += 1;
            if (_root.manaPower == true) {
              _root.save.arenaSpirit += 1;
            }
            if (_root.save.arenaRing == 11 && Math.random() < 0.5) {
              _root.save.arenaSpirit += 1;
            }
          }
          if (enemy.rampagePct != 0 || enemy.skill != 'None' || enemy.skillLevel != 0 || enemy.rangeDamage != 0) {
            if (Math.random() < _root.silenceChance / 100 && enemy.boss != true && enemy.skillLevel >= 0) {
              enemy.rampagePct = 0;
              enemy.explodeDamage = 1;
              enemy.skill = 'None';
              enemy.skillLevel = -1;
              enemy.rangeDamage = 0;
              showDamage('SILENCED', 16777215, enemy._x + enemy._width / 2, 40);
            }
          }
          nextAttack = 0;
          if (_root.save.arenaRing == 19 && Math.random() < 0.05) {
            if (enemy.slow <= -0.5) {
              enemy.slow = 1;
            }
          }
          if (Math.random() < _root.poisonChance / 100) {
            if (enemy.poison <= -0.5) {
              enemy.poison = _root.poisonDuration;
            } else {
              if (enemy.poison > 0) {
                nextAttack += _root.save.arenaSkill[39] * 0.005;
              }
            }
          }
          if (Math.random() < _root.weakenChance / 100) {
            if (enemy.weaken <= -0.5) {
              enemy.weaken = _root.weakenDuration;
            } else {
              if (enemy.weaken > 0) {
                nextAttack += _root.save.arenaSkill[41] * 0.005;
              }
            }
          }
          if (Math.random() < _root.blindChance / 100) {
            if (enemy.blind <= -0.5) {
              enemy.blind = _root.blindDuration;
            } else {
              if (enemy.blind > 0) {
                nextAttack += _root.save.arenaSkill[43] * 0.005;
              }
            }
          }
          if (Math.random() < _root.stunChance / 100 && enemy.stun <= -0.5 && special != 'Explosive') {
            enemy.stun = _root.stunDuration;
            if (_root.save.arenaSkill[45] > 0) {
              dealDamage(_root.save.arenaSkill[45] * 20, 0, 'Explosive');
            }
          }
        } else {
          if (_root.save.arenaZone == 50) {
            if (_root.save.arenaCorruptEvasion > 1000) {
              _root.save.arenaCorruptEvasion -= 20;
            } else {
              if (_root.save.arenaCorruptEvasion > 200) {
                _root.save.arenaCorruptEvasion -= 10;
              } else {
                if (_root.save.arenaCorruptEvasion > 50) {
                  _root.save.arenaCorruptEvasion -= 1;
                }
              }
            }
          }
          showDamage('MISS!!', 10066329, enemy._x + enemy._width / 2, 80);
        }
      }

      function takeDamage(damageTemp, special) {
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 2) {
          if (isNaN(tmpHealth)) {
            tmpHealth = _root.save.arenaHealth;
          }
          if (enemy.enemyID != 0) {
            if (_root.save.arenaHealth > tmpHealth) {
              _root.save.arenaHealth = tmpHealth;
            }
          }
          tmpHealth = _root.save.arenaHealth;
        }
        if (_root.save.arenaZone >= 62 && _root.save.arenaZone <= 67 && _root.areaFairyPerformance > 0) {
          _root.areaFairyPerformance -= 1;
        }
        finalAccuracy = enemy.accuracy;
        if (enemy.blind > 0) {
          finalAccuracy = enemy.accuracy * (100 - _root.blindPower) / 100;
        }
        noDodgeChance = finalAccuracy / _root.evasion - 0.1;
        if (noDodgeChance < 0.1) {
          noDodgeChance = 0.1;
        }
        if (hero.Xalpha == 30) {
          noDodgeChance = 0;
        }
        if (_root.save.arenaZone == 24 || _root.save.arenaZone == 38) {
          dodgeCombo = 0;
        }
        if (Math.random() < noDodgeChance && Math.random() > _root.evasionPct / 100 || dodgeCombo >= 10 || special == 'Drown' || special == 'Cannot Dodge' || special == 'Apocalypse') {
          if (special != 'Heal' && special != 'Drown' && special != 'Cannot Dodge' && special != 'Apocalypse') {
            dodgeCombo = 0;
          }
          tempDEF = _root.damageResist;
          if (enemy.enemyID != 0) {
            tempDEF = Math.floor(tempDEF * (1 + (_root.save.level - enemy.level) / 6000));
            if (enemy.level > _root.save.level) {
              if (_root.save.gDifficulty >= 3 && _root.save.level < 8999) {
                tempDEF = Math.floor(tempDEF * 0.6);
              } else {
                tempDEF = Math.floor(tempDEF * 0.8);
              }
            }
          }
          if (tempDEF < 0) {
            tempDEF = 0;
          }
          if (tempDEF > Math.floor(_root.damageResist * 2)) {
            tempDEF = Math.floor(_root.damageResist * 2);
          }
          damageTaken = Math.ceil((damageTemp - tempDEF) * (100 - _root.damageResistPct) / 100);
          if (enemy.weaken > 0) {
            damageTaken -= Math.floor(damageTemp * _root.weakenPower * (100 - _root.damageResistPct) / 10000);
          }
          if (special == 'Heal') {
            damageTaken = Math.ceil(damageTemp * -1);
          }
          if (special == 'Drown') {
            damageTaken = Math.ceil((damageTemp - _root.damageResist / 3) * (100 - _root.damageResistPct / 3) / 100);
          }
          if (special == 'Magic') {
            if (damageTaken < 1) {
              damageTaken = 1;
            }
            damageTaken += Math.ceil(enemy.rangeDamage * 0.1 * (0.9 + Math.random() * 0.2));
            damageTaken = Math.ceil(damageTaken * (1 - _root.magicResist / 100));
          }
          if (special == 'Ignore Defense') {
            damageTaken = Math.ceil(damageTemp);
          }
          if (special == 'Apocalypse') {
            damageTaken = Math.ceil(damageTemp);
          }
          if (_root.save.arenaZone == 56) {
            damageTaken = Math.ceil(damageTaken * (1 + _root.areaRevengeRage * 0.01));
          }
          if (_root.save.arenaZone == 53 || _root.save.arenaZone == 54) {
            if (_root.dungeonAntiCurse == true) {
              damageTaken = Math.ceil(damageTaken * 0.3);
            }
          }
          if (_root.turnBased == true) {
            damageTaken = Math.ceil(damageTaken * 1.01);
          }
          if (damageTaken < 1 && special != 'Heal') {
            damageTaken = 1;
          }
          if (_root.save.arenaZone == 54) {
            if (_root.arenaChaosPhase == 4 || _root.arenaChaosPhase == 6) {
              damageTaken = Math.ceil(damageTaken * 2);
              if (damageTaken < 666666 && damageTaken > 0) {
                damageTaken = 666666;
              }
            }
          }
          if (_root.save.arenaHealth >= _root.maxHealth) {
            damageTaken = Math.ceil(damageTaken * (1 - _root.lifeDrain * 0.002));
          }
          if (_root.save.restTime > 0) {
            damageTaken = Math.ceil(damageTaken * (0.9 - _root.save.restEfficiency[5] * 0.01));
          }
          _root.save.arenaHealth -= damageTaken;
          if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA' && special != 'Apocalypse' && damageTaken > 0) {
            _root.save.arenaFury += Math.floor(Math.log(damageTaken));
          }
          if (_root.manaPower == true && special != 'Ignore Defense' && special != 'Apocalypse' && damageTaken > 0) {
            if (_root.save.inventoryName[_root.save.arenaWeapon] != 'CHAOS AURA') {
              if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
                if (_root.save.arenaSpirit >= Math.floor(damageTaken / 50000)) {
                  _root.save.arenaSpirit -= Math.floor(damageTaken / 50000);
                } else {
                  extraDamage = damageTaken - _root.save.arenaSpirit * 50000;
                  damageTaken += extraDamage;
                  _root.save.arenaHealth -= extraDamage;
                  _root.save.arenaSpirit = 0;
                }
              } else {
                if (_root.save.arenaMana >= damageTaken) {
                  _root.save.arenaMana -= damageTaken;
                } else {
                  extraDamage = damageTaken - _root.save.arenaMana;
                  damageTaken += extraDamage;
                  _root.save.arenaHealth -= extraDamage;
                  _root.save.arenaMana = 0;
                }
              }
            }
          }
          if (_root.save.arenaZone == 50) {
            if (_root.save.arenaCorruptAttack < 1000 && damageTaken == 1) {
              _root.save.arenaCorruptAttack += 10;
            } else {
              if (_root.save.arenaCorruptAttack < 1000 && damageTaken < _root.maxHealth * 0.04) {
                _root.save.arenaCorruptAttack += 2;
              } else {
                if (_root.save.arenaCorruptAttack < 2000 && damageTaken < _root.maxHealth * 0.1) {
                  _root.save.arenaCorruptAttack += 1;
                } else {
                  if (_root.save.arenaCorruptAttack > 200 && damageTaken > _root.maxHealth * 0.2) {
                    _root.save.arenaCorruptAttack -= 10;
                  } else {
                    if (_root.save.arenaCorruptAttack > 50 && damageTaken > _root.maxHealth * 0.2) {
                      _root.save.arenaCorruptAttack -= 1;
                    }
                  }
                }
              }
            }
            if (_root.save.arenaCorruptAccuracy > 200) {
              _root.save.arenaCorruptAccuracy -= 10;
            } else {
              if (_root.save.arenaCorruptAccuracy > 50) {
                _root.save.arenaCorruptAccuracy -= 1;
              }
            }
          }
          damageColorX = 10027229;
          if (damageTaken > 0 && special != 'Apocalypse') {
            if (_root.save.arenaZone != 47) {
              damageMult = 1 + Math.pow(damageTaken, 0.2);
              comboMult = 1 + _root.arenaCombo / 125;
              if (damageMult > 20 || isNaN(damageMult)) {
                damageMult = 20;
              }
              if (comboMult > 5 || isNaN(comboMult)) {
                comboMult = 5;
              }
              _root.save.arenaRage += Math.ceil(damageMult * comboMult);
              if (damageTaken >= 2) {
                _root.save.arenaRage += Math.ceil(_root.save.arenaSkill[65] * 0.5);
              }
            } else {
              _root.save.arenaRage += 1;
            }
          }
          if (special == 'Magic') {
            comboToLose = Math.ceil(_root.arenaCombo / 2);
            if (comboToLose > 200) {
              comboToLose = 200;
            }
            damageColorX = 12255453;
            _root.arenaCombo -= comboToLose;
            if (enemy.element == 'Fire') {
              fr = 3;
            } else {
              if (enemy.element == 'Ice') {
                fr = 4;
              } else {
                if (enemy.element == 'Wind') {
                  fr = 5;
                } else {
                  if (enemy.element == 'Earth') {
                    fr = 6;
                  } else {
                    if (enemy.element == 'Thunder') {
                      fr = 7;
                    } else {
                      if (enemy.element == 'Water') {
                        fr = 8;
                      } else {
                        if (enemy.element == 'Dark') {
                          fr = 1;
                        } else {
                          if (enemy.element == 'Light') {
                            fr = 2;
                          } else {
                            fr = 9;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            rangedAttack.gotoAndStop(fr);
            rangedAttack._alpha = 100;
          } else {
            if (special == 'Drown') {
              comboToLose = Math.ceil(_root.arenaCombo / 2);
              if (comboToLose > 1) {
                comboToLose = 1;
              }
              damageColorX = 10027229;
              _root.arenaCombo -= comboToLose;
            } else {
              if (special == 'Heal') {
                damageColorX = 39423;
              } else {
                if (special == 'Explode') {
                  comboToLose = Math.ceil(_root.arenaCombo / 1.5);
                  if (comboToLose > 500) {
                    comboToLose = 500;
                  }
                  damageColorX = 16724736;
                  _root.arenaCombo -= comboToLose;
                  rangedAttack.gotoAndStop(3);
                  rangedAttack._alpha = 100;
                } else {
                  if (special != 'Apocalypse') {
                    if (_root.save.arenaRing == 18) {
                      _root.arenaCombo = Math.floor(_root.arenaCombo / 10);
                    } else {
                      _root.arenaCombo = 0;
                    }
                  }
                }
              }
            }
          }
          if (Math.random() > _root.negateEffect / 100 && damageTaken > 0 && special != 'Apocalypse' && special != 'Drown') {
            if ((enemy.skill == 'Throw Soap' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaSoap <= 0) {
              _root.arenaSoap = Math.ceil(enemy.skillLevel / 2);
              _root.dispNews(66, 'The monster threw some SOAP at you!');
            }
            if ((enemy.skill == 'Poison' || enemy.skill == 'All' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaPoison <= 0) {
              _root.arenaPoison = enemy.skillLevel;
              showDamage('Poison', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Weaken' || enemy.skill == 'All' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaWeaken <= 0) {
              _root.arenaWeaken = enemy.skillLevel;
              showDamage('Weaken', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Blind' || enemy.skill == 'All' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaBlind <= 0) {
              _root.arenaBlind = enemy.skillLevel;
              showDamage('Blind', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Slow' || enemy.skill == 'All' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaSlow <= 0) {
              _root.arenaSlow = enemy.skillLevel;
              showDamage('Slow', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Stun' || enemy.skill == 'All' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaStun <= 0 && _root.arenaPotionBlock <= 0) {
              _root.arenaStun = Math.ceil(enemy.skillLevel / 2);
              showDamage('Stun', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Potion Block' || enemy.skill == 'All' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaZombify <= 0 && _root.arenaStun <= 0 && _root.arenaPotionBlock <= 0) {
              _root.arenaPotionBlock = enemy.skillLevel;
              showDamage('Potion Block', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Zombify' || enemy.skill == 'All' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.05 && _root.arenaZombify <= 0 && _root.arenaPotionBlock <= 0) {
              _root.arenaZombify = enemy.skillLevel;
              showDamage('Zombify', 16750848, 62.5, 50);
            }
            if ((enemy.skill == 'Health Drain' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.1) {
              healthToDrain = Math.floor(Math.pow(damageTaken, 1.3) * enemy.skillLevel);
              if (_root.save.arenaZone == 47) {
                healthToDrain = Math.floor(healthToDrain * 0.15);
              }
              if (healthToDrain > enemy.maxhp - enemy.hp) {
                healthToDrain = enemy.maxhp - enemy.hp;
              }
              enemy.hp += healthToDrain;
              showDamage(healthToDrain, 39423, enemy._x + enemy._width / 2, 40);
            }
            if ((enemy.skill == 'Mana Drain' || enemy.skill == 'Doom' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.1) {
              manaToDrain = Math.floor((damageTaken / 10) * enemy.skillLevel);
              if (manaToDrain > _root.save.arenaMana) {
                manaToDrain = _root.save.arenaMana;
              }
              if (manaToDrain > 0) {
                _root.save.arenaMana -= manaToDrain;
                showDamage('MP -' + _root.withComma(manaToDrain), 16750848, 62.5, 50);
              }
            }
            if ((enemy.skill == 'Attack UP' || enemy.skill == 'Stat UP' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.07000000000000001) {
              enemy.attack = Math.floor(enemy.attack * (100 + enemy.skillLevel) / 100);
              enemy.rangeDamage = Math.floor(enemy.rangeDamage * (100 + enemy.skillLevel) / 100);
              showDamage('Attack +' + enemy.skillLevel + '%', 16711680, enemy._x + enemy._width / 2, 40);
            }
            if ((enemy.skill == 'Defense UP' || enemy.skill == 'Stat UP' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.07000000000000001) {
              enemy.defense = Math.floor(enemy.defense * (100 + enemy.skillLevel) / 100);
              showDamage('Defense +' + enemy.skillLevel + '%', 16711680, enemy._x + enemy._width / 2, 40);
            }
            if ((enemy.skill == 'Accuracy UP' || enemy.skill == 'Stat UP' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.08) {
              enemy.accuracy = Math.floor(enemy.accuracy * (100 + enemy.skillLevel) / 100);
              showDamage('Accuracy +' + enemy.skillLevel + '%', 16711680, enemy._x + enemy._width / 2, 40);
            }
            if ((enemy.skill == 'Evasion UP' || enemy.skill == 'Stat UP' || enemy.skill == 'Chaos' || enemy.skill == 'ULTRA') && Math.random() < 0.08) {
              enemy.evasion = Math.floor(enemy.evasion * (100 + enemy.skillLevel) / 100);
              showDamage('Evasion +' + enemy.skillLevel + '%', 16711680, enemy._x + enemy._width / 2, 40);
            }
          }
          if (special == 'Heal') {
            damageTaken = Math.ceil(damageTaken * -1);
          }
          if (_root.save.arenaRing == 16 && _root.save.arenaBuffType == 0 && Math.random() < 0.2) {
            _root.save.arenaBuffType = 7;
            _root.save.arenaBuffDuration = 3;
          }
          showDamage(damageTaken, damageColorX, 62.5, 70);
        } else {
          if (_root.evasionPct < 100) {
            dodgeCombo += 1;
          }
          if (_root.save.arenaZone == 50) {
            if (_root.save.arenaCorruptAccuracy < 200) {
              _root.save.arenaCorruptAccuracy += 10;
            } else {
              if (_root.save.arenaCorruptAccuracy < 1000) {
                _root.save.arenaCorruptAccuracy += 5;
              } else {
                if (_root.save.arenaCorruptAccuracy < 2000) {
                  _root.save.arenaCorruptAccuracy += 1;
                }
              }
            }
          }
          showDamage('MISS!!', 10066329, 62.5, 70);
        }
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 2) {
          if (isNaN(tmpHealth)) {
            tmpHealth = _root.save.arenaHealth;
          }
          if (enemy.enemyID != 0) {
            if (_root.save.arenaHealth > tmpHealth) {
              _root.save.arenaHealth = tmpHealth;
            }
          }
          tmpHealth = _root.save.arenaHealth;
        }
      }

      stop();
      _root.meleeHit = true;
      _root.damageNumCount = 0;
      _root.checkSetBonus();
      _root.arenaSwap1 = 0;
      _root.save.arenaZoneFound[0] = 1;
      _root.turnBased = false;
      _root.autoStealCoin = 0;
      _root.reviveCooldown = 240 - _root.save.arenaSkill[64] * 4;
      _root.robaconActive = false;
      _root.worstMoon = false;
      _root.apocalypse = false;
      _root.killedChaos = false;
      _root.manaPower = false;
      _root.chargeX = 4;
      _root.chargeC = 4;
      _root.chargeV = 4;
      _root.chargeB = 4;
      _root.arenaStrike = 0;
      _root.spiritDouble = 0;
      _root.spiritCrit = 0;
      _root.spiritInsta = 0;
      _root.specPolearmCD = 0;
      _root.specMine = 0;
      _root.specInfinity = 0;
      _root.specPierce = 0;
      _root.specPolearm = 0;
      _root.specTrueshot = 0;
      _root.specSphere = 0;
      _root.specDispel = 0;
      _root.specGlory = 0;
      _root.allyCooldown1 = _root.enemyList[_root.save.arenaAlly].allyActive1Z;
      _root.allyCooldown2 = _root.enemyList[_root.save.arenaAlly].allyActive2Z;
      _root.allyCooldown3 = _root.enemyList[_root.save.arenaAlly].allyActive3Z;
      nextAttack = 0;
      dodgeCombo = 0;
      if (_root.save.arenaZone == 20) {
        _root.save.arenaZone = 7;
      }
      if (_root.save.arenaZone == 24) {
        _root.save.arenaZone = 23;
      }
      if (_root.save.arenaZone == 29) {
        _root.save.arenaZone = 46;
      }
      if (_root.save.arenaZone >= 53 && _root.save.arenaZone <= 55) {
        _root.save.arenaZone = 51;
      }
      if (_root.save.arenaZone >= 32 && _root.save.arenaZone <= 42) {
        _root.save.arenaZone = 30;
      }
      if (_root.save.arenaZone == 47) {
        _root.save.arenaZone = 44;
      }
      if (_root.save.arenaZone == 50) {
        _root.save.arenaZone = _root.save.arenaZoneOrig;
      }
      if (_root.save.arenaZone == 55) {
        _root.save.arenaZone = 0;
      }
      if (_root.save.arenaZone == 56) {
        _root.save.arenaZone = _root.save.arenaZoneOrig;
      }
      if (_root.save.arenaZone == 58) {
        _root.save.arenaZone = 9;
      }
      if (_root.save.arenaZone == 59) {
        _root.save.arenaZone = _root.save.arenaZoneOrig;
      }
      if (_root.save.arenaZone == 69) {
        _root.save.arenaZone = 8;
      }
      if (_root.save.arenaZone == 78) {
        _root.save.arenaZone = 0;
      }
      if (_root.save.arenaZone == 80) {
        _root.save.arenaZone = 1;
      }
      if (_root.save.arenaZone == 81) {
        _root.save.arenaZone = 1;
      }
      if (_root.save.arenaZone == 84) {
        _root.save.arenaZone = 83;
      }
      enemy.element = 'All';
      checkDelay = 0;
      regenDelay = 0;
      regenDelay2 = 0;
      _root.arenaDelay = 0;
      _root.arenaCombo = 0;
      _root.arenaBot = 0;
      _root.arenaPoison = 0;
      _root.arenaWeaken = 0;
      _root.arenaBlind = 0;
      _root.arenaSlow = 0;
      _root.arenaStun = 0;
      _root.arenaZombify = 0;
      _root.arenaPotionBlock = 0;
      _root.arenaSoap = 0;
      _root.save.inventoryAttack[0] = 0;
      _root.save.inventorySpeed[0] = 0;
      _root.save.inventoryDefense[0] = 0;
      _root.save.inventoryBonus[0] = '';
      _root.save.inventoryAbility[0] = '';
      _root.save.inventoryMoreBonus[0] = '';
      _root.save.inventoryCrit[0] = 0;
      _root.save.inventoryDexterity[0] = 0;
      _root.save.inventoryHealth[0] = 0;
      if (_root.save.arenaHardcore == true) {
        _root.fightStat2 = 'You\'re currently playing on HARDCORE difficulty!';
      } else {
        _root.fightStat2 = 'You\'re currently playing on CASUAL difficulty!';
      }
      checkStat();
      checkStat();
      _root.gCheck = true;
      _root.gCheckDel = 0;
      onEnterFrame = function () {
        if (_root.gCheck == true) {
          _root.gCheckDel += 1;
          if (_root.gCheckDel > 2) {
            _root.gCheckDel = 0;
            _root.gCheck = false;
          }
        }
        if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] >= 284 && _root.save.inventoryFrame[_root.save.arenaSubWeapon] <= 291) {
          if (_root.arenaStrike > 0 && _root.arenaStrike < 30) {
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 284) {
              v1 = 300;
              v2 = 0.4;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 285) {
              v1 = 200;
              v2 = 0.8;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 286) {
              v1 = 200;
              v2 = 1.2;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 287) {
              v1 = 300;
              v2 = 0.4;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 288) {
              v1 = 150;
              v2 = 0.4;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 289) {
              v1 = 300;
              v2 = 0.4;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 290) {
              v1 = 150;
              v2 = 0.8;
            }
            if (_root.save.inventoryFrame[_root.save.arenaSubWeapon] == 291) {
              v1 = 200;
              v2 = 0.4;
            }
            _root.incDt();
            stuffHolder.attachMovie('missile', 'missile' + _root.summonCount, _root.antiLag + 2000, {'_x': 100 + _root.arenaStrike * 10, '_y': 150, 'missilePower': v1, 'missileKnockBack': 0, 'missileQuickAttack': false});
            _root.arenaStrike += 4 + random(2);
          }
        }
        if (_root.save.inventorySpirit[_root.save.arenaWeapon] != true || _root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
          _root.spiritDouble = 0;
          _root.spiritCrit = 0;
          _root.spiritInsta = 0;
        }
        if (_root.arenaCombo > 99999) {
          _root.arenaCombo = 99999;
        }
        if (_root.save.arenaMaxCombo < _root.arenaCombo) {
          _root.save.arenaMaxCombo = _root.arenaCombo;
        }
        checkDelay += 1;
        if (checkDelay >= 40) {
          checkDelay = 0;
          checkStat();
        }
        if (enemy.enemyID == 0) {
          regenDelay += 40 / _root.fps;
          regenDelay2 += 40 / _root.fps;
          if (_root.arenaStun > 0) {
            if (_root.arenaStun > 4) {
              _root.arenaStun = 4;
            }
            _root.arenaStun -= 1 / _root.fps;
            if (_root.save.arenaRing == 4) {
              _root.arenaStun -= 0.025;
            }
            if (_root.arenaStun < 0) {
              _root.arenaStun = 0;
            }
          }
        } else {
          if (enemy.lifespan == 0 || _root.turnBased == false || _root.arenaDelay > -1 || _root.arenaStun > 0) {
            regenDelay += 1;
            regenDelay2 += 1;
            if (_root.arenaStun > 0) {
              if (_root.arenaStun > 4) {
                _root.arenaStun = 4;
              }
              _root.arenaStun -= 0.025;
              if (_root.save.arenaRing == 4) {
                _root.arenaStun -= 0.025;
              }
              if (_root.arenaStun < 0) {
                _root.arenaStun = 0;
              }
            }
            if (_root.save.arenaRing == 1 || _root.save.arenaRing == 21) {
              _root.arenaPoison = 0;
            }
            if (_root.save.arenaRing == 3 || _root.save.arenaRing == 5 || _root.save.arenaRing == 7 || _root.save.arenaRing == 21) {
              _root.arenaWeaken = 0;
            }
            if (_root.save.arenaRing == 5 || _root.save.arenaRing == 9 || _root.save.arenaRing == 10 || _root.save.arenaRing == 21) {
              _root.arenaBlind = 0;
            }
            if (_root.save.arenaRing == 4 || _root.save.arenaRing == 21) {
              _root.arenaSlow = 0;
            }
            if (_root.save.arenaRing == 1 || _root.save.arenaRing == 2) {
              _root.arenaPotionBlock = 0;
            }
            if (_root.save.arenaRing == 1) {
              _root.arenaZombify = 0;
            }
          }
        }
        if (regenDelay >= 40) {
          regenDelay -= 40;
          regen();
        }
        if (regenDelay2 >= 4) {
          regenDelay2 -= 4;
          actualRegen();
        }
        if (_root.arenaDelay > 0) {
          if (_root.arenaSkillSpec == 'Magnetic Stab') {
            if (enemy.curX > 110 && enemy.magImmune <= 0) {
              if (enemy.curSpeed < 0) {
                enemy.curSpeed = 0;
              }
              enemy.curX -= _root.attackSpeed;
              if (enemy.curX < 110) {
                enemy.curX = 110;
              }
            }
          }
          _root.arenaDelay -= _root.attackSpeed;
          if (_root.arenaDelay <= 0) {
            _root.arenaDelay = 0;
          }
        } else {
          _root.arenaDelay = -1;
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA' || _root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler') {
          _root.arenaBot = 0;
        }
        if (Key.isDown(1) || Key.isDown(89) || Key.isDown(90) || Key.isDown(88) || Key.isDown(67) || Key.isDown(86) || Key.isDown(66) || Key.isDown(65) || Key.isDown(83) || Key.isDown(68) || Key.isDown(70) || Key.isDown(81) || Key.isDown(87)) {
          _root.arenaBot += 1;
        } else {
          _root.arenaBot = 0;
        }
        if (_root.save.arenaZone == 82 && _root.save.arenaEvent == 2) {
          if (isNaN(tmpHealth)) {
            tmpHealth = _root.save.arenaHealth;
          }
          if (enemy.enemyID != 0) {
            if (_root.save.arenaHealth > tmpHealth) {
              _root.save.arenaHealth = tmpHealth;
            }
          }
          tmpHealth = _root.save.arenaHealth;
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
          _root.save.arenaMana = 0;
          _root.save.arenaSpirit = 0;
        } else {
          if (_root.save.inventorySpirit[_root.save.arenaWeapon] == true) {
            _root.save.arenaMana = 0;
            _root.save.arenaFury = 0;
          } else {
            _root.save.arenaSpirit = 0;
            _root.save.arenaFury = 0;
          }
        }
        if (_root.save.arenaRage > 100) {
          _root.save.arenaRage = 100;
        }
        if (_root.save.arenaHealth > _root.maxHealth) {
          _root.save.arenaHealth = _root.maxHealth;
        }
        if (_root.save.arenaMana > _root.maxMana) {
          _root.save.arenaMana = _root.maxMana;
        }
        if (_root.save.arenaSpirit > _root.maxSpirit) {
          _root.save.arenaSpirit = _root.maxSpirit;
        }
        if (_root.save.arenaFury > 100) {
          _root.save.arenaFury = 100;
        }
        if (_root.save.arenaMana < 0) {
          _root.save.arenaMana = 0;
        }
        if (_root.save.arenaSpirit < 0) {
          _root.save.arenaSpirit = 0;
        }
        if (_root.save.arenaFury < 0) {
          _root.save.arenaFury = 0;
        }
        if (_root.save.arenaHealth <= 0) {
          if (_root.reviveCooldown <= 0 && _root.save.arenaSkill[64] > 0 && _root.save.arenaZone != 24) {
            _root.save.arenaHealth = Math.ceil(_root.maxHealth * _root.save.arenaSkill[64] / 50);
            _root.reviveCooldown = 240 - _root.save.arenaSkill[64] * 4;
            _root.arenaPoison = 0;
            _root.arenaWeaken = 0;
            _root.arenaBlind = 0;
            _root.arenaSlow = 0;
            _root.arenaStun = 0;
            _root.arenaZombify = 0;
            _root.arenaPotionBlock = 0;
            _root.arenaCombo = 0;
          } else {
            _root.save.arenaHealth = _root.maxHealth;
            if (_root.areaSafe != true) {
              if (_root.save.arenaZone == 56) {
                _root.areaRevengeKill = 0;
                _root.dispNews(65, 'Better luck next time!');
                _root.save.arenaZone = _root.save.arenaZoneOrig;
              } else {
                if (_root.save.arenaZone == 52) {
                  if (_root.save.inventoryName[_root.save.arenaPendant] != 'Anti-Checkpoint Pendant') {
                    _root.areaSpookyKill = Math.floor(_root.save.arenaSpookyToday / 200) * 200;
                  } else {
                    _root.areaSpookyKill = 0;
                  }
                } else {
                  if (_root.save.arenaZone == 82) {
                    _root.eventConsecKill = 0;
                  } else {
                    if (_root.save.arenaZone == 68) {
                      _root.areaTriangleKill = 0;
                    } else {
                      if (Math.random() < _root.save.arenaSkill[61] * 0.02 + _root.abilNullifyPenalty * 0.01 || _root.save.arenaZone == 78) {
                        _root.dispNews(65, 'Death penalty nullified.');
                        _root.save.arenaZone = 0;
                      } else {
                        _root.save.arenaExp -= Math.floor(_root.arenaReqExp / 5);
                        if (_root.save.arenaExp < 0) {
                          _root.save.arenaExp = 0;
                        }
                        _root.save.arenaRing = 0;
                        _root.gCheck = true;
                        _root.save.arenaRingOwned = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                        _root.dispNews(65, 'A monster killed you and stole all of your Rings!');
                        _root.save.arenaZone = 0;
                      }
                    }
                  }
                }
              }
            }
            _root.arenaPoison = 0;
            _root.arenaWeaken = 0;
            _root.arenaBlind = 0;
            _root.arenaSlow = 0;
            _root.arenaStun = 0;
            _root.arenaZombify = 0;
            _root.arenaPotionBlock = 0;
            _root.arenaCombo = 0;
            _root.save.arenaDeath += 1;
            enemy.enemyID = 0;
            enemy.approach = 10;
            enemy.zombie = false;
          }
        }
        if (isNaN(_root.save.arenaExp)) {
          _root.save.arenaExp = 0;
        }
        if (isNaN(_root.save.arenaLevel) || _root.save.arenaLevel > 500) {
          _root.save.arenaLevel = 1;
        }
        if (_root.save.arenaExp >= _root.arenaReqExp) {
          _root.save.arenaExpTotal += _root.arenaReqExp;
          _root.save.arenaExp -= _root.arenaReqExp;
          if (_root.save.arenaLevel < 500) {
            _root.save.arenaLevel += 1;
            _root.save.arenaSP += 20;
            _root.dispNews(25, 'Arena Rank UP! You are now Rank ' + _root.save.arenaLevel + '!');
            _root.fightStat2 = 'Rank UP! You are now Rank ' + _root.save.arenaLevel + '!';
            _root.save.arenaMaxHealth += 250 + Math.floor(_root.save.arenaLevel * 5);
            _root.save.arenaMaxMana += 100 + Math.floor(_root.save.arenaLevel * 2);
            _root.save.arenaAttack += 25 + Math.floor(_root.save.arenaLevel * 0.5);
            _root.save.arenaDefense += 25 + Math.floor(_root.save.arenaLevel * 0.5);
            _root.save.arenaAccuracy += 10 + Math.floor(_root.save.arenaLevel * 0.2);
            _root.save.arenaEvasion += 10 + Math.floor(_root.save.arenaLevel * 0.2);
            _root.save.arenaPixel += 100 * _root.save.arenaLevel * _root.save.arenaLevel;
            _root.save.arenaCraft += 10 * _root.save.arenaLevel * _root.save.arenaLevel;
          } else {
            _root.save.battlePoint += 4;
            _root.save.arenaExpExcess += 1;
            _root.save.arenaPixel += 25000000;
            _root.save.arenaCraft += 2500000;
          }
          _root.save.battlePoint += 1;
          _root.gainCareerEXP(3, _root.save.arenaLevel * 5, true);
          checkStat();
        }
        if (_root.save.robaconExp >= _root.robaconReqExp && _root.save.robaconLevel < 500) {
          _root.save.robaconExpTotal += _root.robaconReqExp;
          _root.save.robaconExp -= _root.robaconReqExp;
          _root.save.robaconLevel += 1;
          checkStat();
          if (_root.save.vegetarianMode == true) {
            _root.dispNews(26, 'Robroccoli Rank UP! Robroccoli is now Rank ' + _root.save.robaconLevel + '!');
            _root.fightStat2 = 'Robroccoli Rank UP! Robroccoli is now Rank ' + _root.save.robaconLevel + '!';
          } else {
            _root.dispNews(26, 'Robacon Rank UP! Robacon is now Rank ' + _root.save.robaconLevel + '!');
            _root.fightStat2 = 'Robacon Rank UP! Robacon is now Rank ' + _root.save.robaconLevel + '!';
          }
        }
        if (_root.antiLag > 400) {
          _root.antiLag = 0;
        }
        if (_root.damageNumCount > 1000000000) {
          _root.damageNumCount = 0;
        }
        if (_root.antiLag2 > 400) {
          _root.antiLag2 = 0;
        }
        if (_root.save.inventoryName[_root.save.arenaWeapon] == 'Dark Ruler' && _root.save.arenaZone != 82) {
          _root.save.autoFight = false;
          _root.maxMana = 100;
          if (enemy.enemyID != 0) {
            if (_root.arenaPotionBlock <= 0) {
              if (_root.save.arenaMana < 80 && _root.save.arenaPixel >= 500) {
                if (_root.save.arenaSkill[26] > 0) {
                  _root.save.arenaPixel -= 100;
                } else {
                  _root.save.arenaPixel -= 500;
                }
                _root.save.arenaMana += 1 * Math.ceil(_root.potionEfficiency / 100);
              }
              if (_root.save.arenaHealth < Math.floor(_root.maxHealth / 2) && _root.save.arenaPixel >= 10000) {
                if (_root.save.arenaSkill[26] > 0) {
                  _root.save.arenaPixel -= 2000;
                } else {
                  _root.save.arenaPixel -= 10000;
                }
                _root.save.arenaHealth += 1000 * Math.floor(_root.potionEfficiency);
              }
            }
            if (_root.arenaDelay <= 0 && _root.arenaStun <= 0) {
              if (_root.arenaZombify <= 0) {
                if ((_root.save.arenaHealth < _root.maxHealth || _root.arenaPoison > 0 || _root.arenaWeaken > 0 || _root.arenaBlind > 0 || _root.arenaSlow > 0 || enemy.zombie == true && enemy.enemyID != 0) && _root.save.arenaMana >= 10) {
                  _root.save.arenaMana -= 10;
                  _root.save.arenaHealth = _root.maxHealth;
                  _root.arenaPoison = 0;
                  _root.arenaWeaken = 0;
                  _root.arenaBlind = 0;
                  _root.arenaSlow = 0;
                  if (enemy.zombie == true && enemy.enemyID != 0) {
                    tempHealDamage = 200 + Math.floor(_root.totalCareerLevel * 0.2);
                    damageMult = 1;
                    if (_root.save.permaBanPenalty[15] == 3) {
                      damageMult = 1.25;
                    } else {
                      if (_root.save.permaBanPenalty[15] == 2) {
                        damageMult = 1.15;
                      } else {
                        if (_root.save.permaBanPenalty[15] == 1) {
                          damageMult = 1.1;
                        }
                      }
                    }
                    dealDamage(Math.floor(tempHealDamage * damageMult), 0, 'Heal');
                    if (Math.random() < _root.doubleHit / 100) {
                      _root.house.arena.dealDamage(Math.floor(tempHealDamage * damageMult), 0, 'Double Hit');
                    }
                  }
                  if (_root.save.questType == 'Use Skill') {
                    if (_root.save.questSubtype == 'Heal') {
                      _root.save.questCount += 1;
                    }
                  }
                  _root.arenaDelay = 125;
                  _root.arenaDelay2 = 125;
                }
              }
              if (_root.save.arenaMana >= 5 && (enemy.lifespan < 0.5 || enemy.defense >= 9999999999.0) && _root.arenaDelay <= 0) {
                _root.arenaDelay = 100;
                _root.arenaDelay2 = 49;
                _root.arenaSkillPower = 38 + Math.floor(_root.totalCareerLevel * 0.038);
                damageMult = 1;
                if (_root.save.permaBanPenalty[15] == 3) {
                  damageMult = 1.25;
                } else {
                  if (_root.save.permaBanPenalty[15] == 2) {
                    damageMult = 1.15;
                  } else {
                    if (_root.save.permaBanPenalty[15] == 1) {
                      damageMult = 1.1;
                    }
                  }
                }
                _root.arenaSkillPower = Math.floor(_root.arenaSkillPower * damageMult);
                _root.arenaKnockBack = 0;
                _root.arenaQuickAttack = true;
                _root.save.arenaMana -= 5;
                if (_root.save.questType == 'Use Skill') {
                  if (_root.save.questSubtype == 'Quick Attack') {
                    _root.save.questCount += 1;
                  }
                }
              }
              if (_root.save.arenaMana >= 20 && _root.arenaDelay <= 0) {
                _root.arenaDelay = 125;
                _root.arenaDelay2 = 62;
                _root.arenaSkillPower = 190 + Math.floor(_root.totalCareerLevel * 0.19);
                damageMult = 1;
                if (_root.save.permaBanPenalty[15] == 3) {
                  damageMult = 1.25;
                } else {
                  if (_root.save.permaBanPenalty[15] == 2) {
                    damageMult = 1.15;
                  } else {
                    if (_root.save.permaBanPenalty[15] == 1) {
                      damageMult = 1.1;
                    }
                  }
                }
                _root.arenaSkillPower = Math.floor(_root.arenaSkillPower * damageMult);
                _root.arenaKnockBack = 0;
                _root.save.arenaMana -= 20;
                if (_root.save.questType == 'Use Skill') {
                  if (_root.save.questSubtype == 'Power Attack') {
                    _root.save.questCount += 1;
                  }
                }
              }
            }
          } else {
            _root.save.arenaMana = 100;
          }
        }
      };

    }

    instance of movieClip 3787  {

      onClipEvent (load) {
        gotoAndStop(_root.save.arenaZone + 1);
      }

      onClipEvent (enterFrame) {
        fr = _root.save.arenaZone + 1;
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
      }
    }

    instance of movieClip 3802  {

      onClipEvent (load) {
        scale = 100;
        disp = _root.arenaCombo;
      }

      onClipEvent (enterFrame) {
        target = _root.arenaCombo;
        if (target > disp) {
          disp += Math.ceil((target - disp) / 5);
        } else {
          if (target < disp) {
            disp += Math.floor((target - disp) / 5);
          }
        }
        if (disp >= 99999) {
          fr = 8;
        } else {
          if (disp >= 10000) {
            fr = 7;
          } else {
            if (disp >= 1000) {
              fr = 6;
            } else {
              if (disp >= 500) {
                fr = 5;
              } else {
                if (disp >= 200) {
                  fr = 4;
                } else {
                  if (disp >= 100) {
                    fr = 3;
                  } else {
                    if (disp >= 1) {
                      fr = 2;
                    } else {
                      fr = 1;
                    }
                  }
                }
              }
            }
          }
        }
        if (_root.save.arenaZone == 47) {
          _root.arenaCombo = 0;
          fr = 1;
        }
        if (_currentframe != fr) {
          gotoAndStop(fr);
        }
        if (comboText.text != _root.withComma(disp)) {
          comboText.text = _root.withComma(disp);
          scale = 110;
        }
        if (scale > 100) {
          scale -= 2;
        }
        _xscale = scale;
        _yscale = scale;
      }
    }

    instance hero of movieClip 3874  {

      onClipEvent (load) {
        manaShield = false;
        pressSpace = false;
        holdSpace = false;
        del = 0;
        if (_root.save.arenaSkill[49] >= 1 && _root.save.arenaManaPower == true) {
          _root.manaPower = true;
        }
      }

      onClipEvent (enterFrame) {
        del += 1;
        if (del >= 2) {
          del = 0;
          if (_root.save.arenaZone == 38 || _root.save.arenaZone == 24) {
            if (Key.isDown(16)) {
              Xalpha = 30;
              if (_root.house.arena.enemy.enemyID == 323) {
                Xalpha = 100;
              }
            } else {
              Xalpha = 100;
            }
          } else {
            Xalpha = 100;
          }
          if (_root.save.arenaSkill[49] >= 1 || _root.save.inventoryName[_root.save.arenaWeapon] == 'CHAOS AURA') {
            if (Key.isDown(32) && holdSpace != true) {
              pressSpace = true;
              holdSpace = true;
            } else {
              if (Key.isDown(32)) {
                pressSpace = false;
              } else {
                pressSpace = false;
                holdSpace = false;
              }
            }
            if (pressSpace == true) {
              if (_root.manaPower != true) {
                if (_root.save.inventoryName[_root.save.arenaWeapon] != 'CHAOS AURA' || _root.save.arenaFury >= 25) {
                  _root.manaPower = true;
                  _root.save.arenaManaPower = true;
                }
              } else {
                if (_root.save.inventoryName[_root.save.arenaWeapon] != 'CHAOS AURA') {
                  _root.manaPower = false;
                  _root.save.arenaManaPower = false;
                }
              }
            }
          }
          if (_root.save.arenaZone == 38 || _root.save.arenaZone == 24) {
            _root.manaPower = false;
            _root.save.arenaManaPower = false;
          }
          if (_alpha != Xalpha) {
            _alpha = Xalpha;
          }
          if (_root.save.arenaZone == 24) {
            _alpha = 0;
          }
        }
